{"version":3,"sources":["hooks/useWindowSize/index.ts","../../common/src/KeyBinder.ts","../../common/src/Mp3Encoder.ts","../../common/src/mp3-encoder.js","../../common/src/util.ts","../../common/src/AudioClip.ts","../../common/src/Model.ts","../../common/src/CanvasResizer.ts","../../common/src/Image.ts","../../common/src/Fetcher.ts","../../common/src/Anki.ts","../../common/src/SubtitleCollection.ts","components/Alert.tsx","../../common/components/src/TagsTextField.tsx","../../common/components/src/ImageDialog.tsx","../../common/components/src/SubtitleTextImage.tsx","../../common/components/src/AnkiDialog.tsx","components/background-colored.png","components/DragOverlay.tsx","services/SubtitleReader.ts","components/Bar.tsx","services/util.ts","components/CopyHistory.tsx","components/LandingPage.tsx","services/BroadcastChannelVideoProtocol.ts","services/ChromeTabVideoProtocol.ts","services/Clock.ts","components/Controls.tsx","services/MediaAdapter.ts","components/SubtitlePlayer.tsx","services/VideoChannel.ts","components/Player.tsx","components/CustomFieldDialog.tsx","components/SettingsDialog.tsx","services/SettingsProvider.ts","services/PlayerChannel.ts","services/AppKeyBinder.ts","components/VideoPlayer.tsx","services/ChromeExtension.ts","services/ChromeExtensionProvider.ts","services/PlaybackPreferences.ts","components/App.tsx","reportWebVitals.js","index.tsx"],"names":["useWindowSize","enabled","useState","size","setSize","useLayoutEffect","updateSize","window","innerWidth","innerHeight","addEventListener","removeEventListener","DefaultKeyBinder","keyBindSet","this","onCopy","disabledGetter","subtitleGetter","useCapture","shortcut","copySubtitle","keys","handler","copyHandler","hotkeys","capture","unbind","event","subtitle","onAnkiExport","ankiExport","ankiExportHandler","onUpdateLastCard","updateLastCard","updateLastCardHandler","onSeekToSubtitle","timeGetter","subtitlesGetter","delegate","forward","subtitles","length","_adjacentSubtitle","start","end","previousShortcut","seekToPreviousSubtitle","nextShortcut","seekToNextSubtitle","previousHandler","nextHandler","onSeekToBeginningOfCurrentSubtitle","seekToBeginningOfCurrentSubtitle","_currentSubtitle","undefined","time","currentSubtitle","now","minDiff","Number","MAX_SAFE_INTEGER","i","s","diff","onSeekBackwardOrForward","backShortcut","seekBackward","seekForward","backHandler","onOffsetChange","subtitleStart","originalStart","adjustOffsetToPreviousSubtitle","adjustOffsetToNextSubtitle","adjacentSubtitleIndex","Math","max","increase","currentOffset","decreaseShortcut","decreaseOffset","increaseShortcut","increaseOffset","decreaseHandler","increaseHandler","onAdjustPlaybackRate","increasePlaybackRate","decreasePlaybackRate","onToggleSubtitles","toggleSubtitles","onToggleSubtitleTrack","shortcuts","toggleVideoSubtitleTrack1","toggleVideoSubtitleTrack2","filter","track","handlers","push","onToggleSubtitleTrackInList","toggleAsbplayerSubtitleTrack1","toggleAsbplayerSubtitleTrack2","onPlay","togglePlay","onAutoPause","toggleAutoPause","toggleCondensedPlayback","Mp3Encoder","blob","workerFactory","Promise","resolve","reject","a","reader","FileReader","onload","e","audioContext","AudioContext","target","Error","decodeAudioData","result","audioBuffer","channels","numberOfChannels","getChannelData","worker","postMessage","command","sampleRate","onmessage","Blob","data","buffer","type","terminate","onerror","error","message","readAsArrayBuffer","Worker_fn","Worker","Direction","humanReadableTime","timestamp","seconds","nearestTenth","totalSeconds","floor","round","minutes","hours","String","padStart","surroundingSubtitles","index","countRadius","timeRadius","startIndex","atBoundary","backward","endIndex","slice","mockSurroundingSubtitles","middleSubtitle","maxTimestamp","offset","afterTimestamp","min","text","originalEnd","beforeTimestamp","unshift","initialIndex","direction","next","abs","download","name","url","URL","createObjectURL","document","createElement","body","appendChild","style","display","href","sanitize","click","revokeObjectURL","remove","PostMineAction","AutoPausePreference","PlayMode","defaultMp3WorkerFactory","Base64AudioData","baseName","playbackRate","base64","extension","_name","_start","_end","_base64","_extension","playingAudio","stopAudioTimeout","cachedBlob","_blob","stopAudio","clearTimeout","audio","Audio","src","preload","load","play","setTimeout","pause","fetch","FileAudioData","file","trackId","recorderMimeType","clippingAudio","clippingAudioReject","stopClippingTimeout","_recorderConfiguration","recorderExtension","readAsDataURL","onloadend","substring","indexOf","_clipAudio","_audioElement","currentTime","oncanplay","stream","_captureStream","recorder","MediaRecorder","mimeType","chunks","ondataavailable","finished","onstop","stop","getAudioTracks","source","selectTrack","onloadedmetadata","audioTracks","t","id","captureStream","mozCaptureStream","audioStream","MediaStream","getVideoTracks","addTrack","AUDIO_TYPES","Object","isTypeSupported","map","Mp3AudioData","encode","isSliceable","AudioClip","mp3WorkerFactory","subtitleFileName","lastIndexOf","CanvasResizer","canvas","ctx","maxWidth","maxHeight","widthRatio","width","heightRatio","height","ratio","newWidth","newHeight","createImageBitmap","resizeWidth","resizeHeight","then","sprite","drawImage","catch","Base64ImageData","_dataUrl","FileImageData","_canvas","dataUrl","toDataURL","toBlob","video","_videoElement","videoWidth","videoHeight","getContext","resizer","resize","Image","bitMap","imageName","HttpFetcher","method","JSON","stringify","response","json","ankiQuerySpecialCharacters","Anki","settingsProvider","fetcher","ankiConnectUrl","_executeAction","modelName","word","query","wordField","_escapeQuery","escaped","char","includes","definition","audioClip","image","customFieldValues","tags","mode","fields","_appendField","sentenceField","definitionField","sourceField","urlField","customFieldName","customAnkiFields","params","note","deckName","deck","noteType","options","allowDuplicate","duplicateScope","duplicateScopeOptions","checkChildren","gui","updateLast","audioField","sanitizedName","_sanitizeFileName","_storeMediaFile","fileName","filename","imageField","recentNotes","sort","lastNoteId","notes","infoResponse","noteId","info","value","fieldName","multiline","newValue","split","join","existingValue","replacement","action","version","SubtitleCollection","tree","gapsTree","IntervalTree","returnLastShown","returnNextToShow","last","insert","lastShown","nextToShow","startedShowing","willStopShowing","interval","showing","search","gapIntervals","nextStart","high","showingCheckRadiusMs","emptySubtitleCollection","useAlertStyles","makeStyles","root","justifyContent","position","top","pointerEvents","zIndex","Alert","props","classes","useEffect","open","timeout","onClose","autoHideDuration","className","Grow","in","severity","children","TagsTextField","onTagsChange","setValue","handleChange","useCallback","currentValue","endsWith","newTags","splitTags","tag","trim","extractTagsFromString","TextField","onChange","useStyles","theme","backgroundSize","ImageDialog","resizeRatio","setDataUrl","setWidth","setHeight","windowWidth","windowHeight","img","fetchImage","Dialog","Card","CardMedia","title","SubtitleTextImage","availableWidth","scale","textImage","screen","alt","marginBottom","spacing","flexGrow","mediaField","cursor","rangeSelectSlider","transform","sliderMarksFromSliderContext","sliderContext","boundary","seenTimestamps","label","mark","sliderValueLabelFormat","ms","subtitleIntersectsTimeInterval","overlapStart","ValueLabelComponent","Tooltip","enterTouchDelay","placement","useTextImageSetStyles","padding","backgroundColor","palette","disabledBackground","TextImageSet","selectedSubtitles","Paper","elevation","TextFieldEndAdornment","withStyles","InputAdornment","AnkiDialog","disabled","initialText","onProceed","onRewind","onCancel","onViewImage","onOpenSettings","onRerecord","initialAudioClip","initialSource","initialUrl","customFields","anki","initialDefinition","initialWord","initialCustomFieldValues","initialSelectedTimestampInterval","timestampInterval","forceTimestampBoundaryInterval","timestampBoundaryInterval","forceInitialTimestampInterval","initialTimestampInterval","initialLastAppliedTimestampIntervalToText","lastAppliedTimestampIntervalToText","initialLastAppliedTimestampIntervalToAudio","lastAppliedTimestampIntervalToAudio","stateRef","setDefinition","setText","setWord","lastSearchedWord","setLastSearchedWord","setSource","setTags","setUrl","duplicateNotes","setDuplicateNotes","wordTimestamp","setWordTimestamp","setCustomFieldValues","setTimestampInterval","setSelectedSubtitles","setInitialTimestampInterval","initialTimestampBoundaryInterval","setInitialTimestampBoundaryInterval","setTimestampBoundaryInterval","timestampMarks","setTimestampMarks","setLastAppliedTimestampIntervalToText","setLastAppliedTimestampIntervalToAudio","setAudioClip","dialogRefCallback","element","getBoundingClientRect","current","textForTimestampInterval","subtitleEnd","findIndex","subtitlesToDisplay","boundaryIntervalFromSliderContext","newAudioClip","preferMp3","toMp3","audioPaddingStart","audioPaddingEnd","Date","trimmedWord","findNotesWithWord","console","wordHelperText","handlePlayAudio","preventDefault","stopPropagation","handleCustomFieldChange","newCustomFieldValues","assign","handleViewImage","handleApplyTimestampIntervalToText","newText","handleTimestampIntervalChange","newTimestampInterval","expectedUnchangedText","handleApplyTimestampIntervalToAudio","handleResetTimestampInterval","handleZoomInTimestampInterval","newTimestampBoundaryInterval","handleZoomOutTimestampInterval","handleCopyImageToClipboard","navigator","clipboard","ClipboardItem","pngBlob","write","disableApplyTextSelection","audioActionElement","IconButton","onClick","edge","disableEnforceFocus","fullWidth","Toolbar","Typography","variant","DialogContent","ref","color","maxRows","InputProps","endAdornment","rows","helperText","findNotesWithWordGui","Grid","container","item","Slider","valueLabelFormat","marks","step","valueLabelDisplay","marginTop","DialogActions","Button","dragging","appBarHidden","transparentBackground","content","flexDirection","alignItems","textAlign","backgroundRepeat","backgroundPosition","backgroundImage","coloredBackground","backgroundBlendMode","background","DragOverlay","loading","Fade","tagRegex","RegExp","assNewLineRegex","helperElement","helperCanvas","SubtitleReader","xmlParser","files","all","f","_subtitles","flatMap","nodes","n1","n2","parseSrt","node","cue","replace","isFromNetflix","parser","WebVTT","Parser","StringDecoder","cues","oncue","c","lines","newLines","line","_fixRTL","onflush","startTime","endTime","parse","flush","parseAss","dialogues","dialogue","slices","fragments","fragment","xml","_xmlParser","textNodes","elm","parseFloat","_decodeHTML","pipeThrough","parseDisplaySets","pipeTo","_displaySetsToSubtitles","imageDataArray","currentImageDisplaySet","WritableStream","displaySet","controller","objectDefinitionSegments","screenWidth","presentationCompositionSegment","screenHeight","Uint8ClampedArray","imageData","putImageData","header","presentationTimestamp","endDefinitionSegment","index1","index2","newLine","innerHTML","childNodes","nodeValue","XMLParser","ignoreAttributes","subtitleNode","writeSrt","format","subtitlesToSrt","leftButton","marginRight","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","drawerWidth","easeOut","enteringScreen","copyHistoryButton","copyHistoryButtonShift","hide","useCopyHistoryTooltipStyles","tooltip","show","CopyHistoryTooltip","toolTipProps","Bar","drawerOpen","hidden","subtitleFiles","onOpenCopyHistory","onFileSelector","onDownloadSubtitleFilesAsSrt","menuOpen","setMenuOpen","menuAnchorEl","setMenuAnchorEl","canSaveAsSrt","find","handleFileAction","currentTarget","handleMenuClose","handleOpenFilesFromMenu","handleDownloadSubtitleFilesAsSrt","Popover","anchorEl","anchorOrigin","vertical","horizontal","ListItem","button","AppBar","clsx","disableFocusListener","disableHoverListener","disableTouchListener","component","rel","computeStyles","subtitleColor","subtitleSize","subtitleOutlineThickness","subtitleOutlineColor","subtitleBackgroundOpacity","subtitleBackgroundColor","subtitleFontFamily","styles","fontSize","thickness","opacity","hex","exec","r","parseInt","g","b","hexToRgb","timeDurationDisplay","milliseconds","totalMilliseconds","includeMilliseconds","secs","mins","hrs","pad","n","zeros","drawer","flexShrink","drawerPaper","drawerHeader","mixins","toolbar","listContainer","overflowY","overflowX","listItem","hover","listItemGutters","paddingLeft","paddingRight","listItemIconRoot","minWidth","emptyState","emptyText","secondary","Menu","onSelect","onClipAudio","onDownloadImage","onDelete","handleCopy","writeText","handleJumpTo","handleClipAudio","handleDownloadImage","handleDelete","transformOrigin","ListItemText","primaryTypographyProps","primary","videoFile","audioFile","CopyHistory","scrollToBottomRefCallback","scrollIntoView","menuItem","setMenuItem","handleMenu","handleMenuClosed","items","currentKey","lastSeenItemName","itemNameCounters","itemsBySection","key","ListItemSecondaryAction","onDownloadSectionAsSrt","gutters","ListItemIcon","onAnki","wrap","Fragment","Drawer","anchor","paper","Divider","browseLink","LandingPage","latestExtensionVersion","extensionUrl","installedExtensionVersion","setInstalledExtensionVersion","fetchInstalledExtensionVersion","extensionUpdateAvailable","gt","extensionNotInstalled","Link","BroadcastChannelVideoProtocol","channelId","channel","onMessage","BroadcastChannel","that","close","ChromeTabVideoProtocol","tabId","listener","unsubscribeFromExtension","subscribe","sendMessage","Clock","accumulated","started","_rate","rate","_elapsed","useControlStyles","left","bottom","buttonContainer","timeDisplay","marginLeft","numberInput","volumeInputContainerShown","short","volumeInputContainerHidden","volumeInputHidden","volumeInputShown","volumeInputThumbHidden","volumeInputThumbShown","subContainer","inactiveButton","inactiveTopButton","progress","margin","topButton","gridContainer","useProgressBarStyles","mouseEventListener","fillContainer","fillContainerThick","easeInOut","fill","handleContainer","handle","borderRadius","handleOn","shortest","VolumeSlider","verticalAlign","thumb","boxShadow","active","displayTime","secondsInMinute","ProgressBar","onSeek","mouseOver","setMouseOver","containerRef","useRef","handleClick","rect","right","pageX","handleMouseOver","handleMouseOut","progressWidth","elementWidth","fillStyle","handleStyle","fillContainerClassName","handleClassName","onMouseOver","onMouseOut","AudioTrackSelector","selectedAudioTrack","onAudioTrackSelected","list","selected","language","TabSelector","tabs","selectedTab","onTabSelected","MediaUnloader","onUnload","PlayModeSelector","selectedPlayMode","onPlayMode","normal","condensed","autoPause","Controls","clock","playing","offsetEnabled","displayLength","playbackRateEnabled","mousePositionRef","onShow","onPause","onUnloadAudio","onUnloadVideo","onPlaybackRateChange","onVolumeChange","disableKeyEvents","playbackPreferences","closeEnabled","volumeEnabled","playMode","playModeEnabled","subtitlesEnabled","subtitlesToggle","onSubtitlesToggle","popOutEnabled","popOut","onPopOutToggle","fullscreenEnabled","fullscreen","onFullscreenToggle","hideSubtitlePlayerToggleEnabled","subtitlePlayerHidden","onHideSubtitlePlayerToggle","showOnMouseMovement","theaterModeToggleEnabled","theaterModeEnabled","onTheaterModeToggle","setShow","audioTrackSelectorOpen","setAudioTrackSelectorOpen","audioTrackSelectorAnchorEl","setAudioTrackSelectorAnchorEl","tabSelectorOpen","setTabSelectorOpen","tabSelectorAnchorEl","setTabSelectorAnchorEl","audioUnloaderOpen","setAudioUnloaderOpen","audioUnloaderAnchorEl","setAudioUnloaderAnchorEl","videoUnloaderOpen","setVideoUnloaderOpen","videoUnloaderAnchorEl","setVideoUnloaderAnchorEl","playModeSelectorOpen","setPlayModeSelectorOpen","playModeSelectorAnchorEl","setPlayModeSelectorAnchorEl","showVolumeBar","setShowVolumeBar","volume","setVolume","lastCommittedVolume","setLastCommittedVolume","lastMousePositionRef","x","y","lastShowTimestampRef","lastNumberInputChangeTimestampRef","lastShowRef","forceShowRef","offsetInputWidth","setOffsetInputWidth","playbackRateInputWidth","setPlaybackRateInputWidth","offsetInputRef","playbackRateInputRef","closeButtonRef","updateState","forceUpdate","handleSeek","savedVolume","setInterval","currentShow","pow","offsetTop","offsetHeight","activeElement","clearInterval","updateOffset","offsetSeconds","toFixed","blur","updatePlaybackRate","handleKey","newOffset","isNaN","newPlaybackRate","handleNumberInputClicked","inputElement","setSelectionRange","handleAudioTrackSelectorClosed","handleAudioTrackSelectorOpened","handleAudioTrackSelected","handleTabSelectorClosed","handleTabSelectorOpened","handleTabSelected","tab","handleAudioUnloaderClosed","handleAudioUnloaderOpened","handleUnloadAudio","handleVideoUnloaderClosed","handleVideoUnloaderOpened","handleUnloadVideo","handlePlayModeSelectorClosed","handlePlayModeSelectorOpened","handlePlayModeSelected","handleVolumeMouseOut","handleVolumeMouseOver","handleVolumeChange","handleVolumeChangeCommitted","handleVolumeToggle","newVolume","onChangeCommitted","defaultValue","Input","inputRef","disableUnderline","placeholder","MediaAdapter","readyResolves","_onMediaCanPlay","callback","readyState","useSubtitlePlayerStyles","default","compressed","table","noSubtitles","useSubtitleRowStyles","subtitleRow","overflowWrap","whiteSpace","compressedSubtitle","disabledSubtitle","copyButton","SubtitleRow","React","memo","subtitleRef","onClickSubtitle","onCopySubtitle","copyButtonEnabled","tableRowProps","textRef","textSelected","setTextSelected","disabledClassName","availWidth","TableRow","onMouseUp","selection","getSelection","isSameNode","anchorNode","parentNode","TableCell","SubtitlePlayer","onStartedShowing","onWillStopShowing","subtitleCollection","jumpToSubtitle","displayHelp","lastJumpToTopTimestamp","disabledSubtitleTracks","keyBinder","playingRef","clockRef","subtitleRefs","useMemo","Array","_","createRef","subtitleCollectionRef","empty","subtitleRefsRef","disableKeyEventsRef","selectedSubtitleIndexes","setSelectedSubtitleIndexes","selectedSubtitleIndexesRef","lengthRef","hiddenRef","lastScrollTimestampRef","requestAnimationRef","startedShowingSubtitleRef","onStartedShowingRef","willStopShowingSubtitleRef","onWillStopShowingRef","requestAnimationFrame","update","smallestIndex","currentSubtitleIndexes","subtitlesAt","keysAreEqual","scrollToSubtitleRef","allowScroll","block","inline","behavior","cancelAnimationFrame","scrollToCurrentSubtitle","indexes","scrollIfVisible","visibilityState","firstSubtitleRef","bindAdjustOffset","bindOffsetToSubtitle","bindSeekToSubtitle","bindSeekToBeginningOfCurrentSubtitle","bindSeekBackwardOrForward","handleScroll","jumpToIndex","calculateSurroundingSubtitlesForIndex","surroundingSubtitlesCountRadius","surroundingSubtitlesTimeRadius","calculateSurroundingSubtitles","calculateCurrentSubtitle","subtitleIndexes","bindCopy","none","bindToggleSubtitleTrackInList","bindAnkiExport","showAnkiDialog","bindUpdateLastCard","subtitleTable","TableContainer","Table","TableBody","square","VideoChannel","protocol","isReady","readyCallbacks","playCallbacks","pauseCallbacks","audioTrackSelectedCallbacks","currentTimeCallbacks","exitCallbacks","offsetCallbacks","playbackRateCallbacks","popOutToggleCallbacks","copyCallbacks","playModeCallbacks","hideSubtitlePlayerToggleCallbacks","appBarToggleCallbacks","fullscreenToggleCallbacks","ankiDialogRequestCallbacks","toggleSubtitleTrackInListCallbacks","_playbackRate","readyMessage","paused","readyStateMessage","Event","playMessage","echo","pauseMessage","audioTrackSelectedMessage","currentTimeMessage","offsetMessage","playbackRateMessage","copyMessage","postMineAction","preventDuplicate","toggleSubtitleTrackInListMessage","videoFileName","subtitleFileNames","names","settings","msg","videoFrame","border","trackLength","audioRef","videoRef","useOffset","subtitlesLength","audioLength","videoLength","Player","sources","audioFileUrl","videoFileUrl","subtitleReader","videoFrameRef","videoChannelRef","videoFullscreen","hideSubtitlePlayer","videoPopOut","availableTabs","ankiDialogRequested","ankiDialogFinishedRequest","onError","onLoaded","onAnkiDialogRequest","onAppBarToggle","onHideSubtitlePlayer","onVideoPopOut","onPlayModeChangedViaBind","rewindSubtitle","setPlayMode","playModeRef","setSubtitles","subtitlesRef","Boolean","loadingSubtitles","setLoadingSubtitles","setPlaying","setLastJumpToTopTimestamp","setOffset","setPlaybackRate","setAudioTracks","setSelectedAudioTrack","setChannelId","setResumeOnFinishedAnkiDialogRequest","hideSubtitlePlayerRef","setDisabledSubtitleTracks","mediaAdapter","seek","forwardToMedia","setTime","applyOffset","forwardToVideo","newSubtitles","installed","lte","channelClosed","onReady","uuidv4","init","subscribed","onExit","ready","subtitleSettings","ankiSettings","miscSettings","hideSubtitlePlayerToggle","onOffset","onPlaybackRate","onCurrentTime","tracks","newTracks","resumeOnFinishedAnkiDialogRequest","resume","seeking","expectedSeekTime","nextSubtitle","t0","handleOnStartedShowingSubtitle","autoPausePreference","atStart","handleOnWillStopShowingSubtitle","atEnd","process","encodeURIComponent","handlePlay","handlePause","handleSeekToSubtitle","shouldPlay","handleCopyFromSubtitlePlayer","handleMouseMove","screenX","screenY","audioTrackSelected","handleOffsetChange","HTMLMediaElement","handlePlaybackRateChange","handlePlayMode","handleToggleSubtitleTrack","bindPlay","bindAdjustPlaybackRate","togglePlayMode","newPlayMode","bindAutoPause","bindCondensedPlayback","unbindCopy","unbindAnkiExport","appBarToggle","fullscreenToggle","loaded","videoInWindow","onMouseMove","gte","CustomFieldDialog","existingCustomFieldNames","setFieldName","fieldExists","DialogTitle","subtitleSetting","subtitlePreview","subtitlePreviewInput","outline","addFieldButton","switchLabel","useSelectableSettingStyles","formControl","SelectableSetting","selections","removable","onSelectionChange","onRemoval","FormControl","InputLabel","Select","MenuItem","keyBindProperties","extensionOverridden","modifierKeyReplacements","isMacOs","modifierKeys","useKeyBindFieldStyles","labelItem","KeyBindField","onKeysChange","onOpenExtensionShortcuts","currentKeyString","setCurrentKeyString","currentKeyStringRef","onKeysChangeRef","editing","setEditing","handleEditKeyBinding","nativeEvent","detail","pressed","getPressedKeyString","isAModifier","isBModifier","keyup","contains","xs","contentEditable","SettingsDialog","scrollToId","setAnkiConnectUrl","ankiConnectUrlError","setAnkiConnectUrlError","ankiConnectUrlChangeTimestamp","setAnkiConnectUrlChangeTimestamp","setDeck","deckNames","setDeckNames","setNoteType","modelNames","setModelNames","setSentenceField","setDefinitionField","setAudioField","setImageField","setWordField","setSourceField","setUrlField","setCustomFields","setPreferMp3","fieldNames","setFieldNames","customFieldDialogOpen","setCustomFieldDialogOpen","setAudioPaddingStart","setAudioPaddingEnd","maxImageWidth","setMaxImageWidth","maxImageHeight","setMaxImageHeight","setSurroundingSubtitlesCountRadius","setSurroundingSubtitlesTimeRadius","setSubtitleColor","setSubtitleSize","setSubtitleOutlineColor","setSubtitleOutlineThickness","setSubtitleBackgroundColor","setSubtitleBackgroundOpacity","setSubtitleFontFamily","imageBasedSubtitleScaleFactor","setImageBasedSubtitleScaleFactor","setSubtitlePreview","themeType","setThemeType","copyToClipboardOnMine","setCopyToClipboardOnMine","setAutoPausePreference","setKeyBindSet","rememberSubtitleOffset","setRememberSubtitleOffset","handleAnkiConnectUrlChange","handleRetryAnkiConnectUrl","handleDeckChange","handleDeckSelectionChange","handleNoteTypeChange","handleNoteTypeSelectionChange","handleSentenceFieldChange","handleSentenceFieldSelectionChange","handleDefinitionFieldChange","handleDefinitionFieldSelectionChange","handleAudioFieldChange","handleAudioFieldSelectionChange","handleImageFieldChange","handleImageFieldSelectionChange","handleWordFieldChange","handleWordFieldSelectionChange","handleSourceFieldChange","handleSourceFieldSelectionChange","handleUrlFieldChange","handleUrlFieldSelectionChange","handleAudioPaddingStart","handleAudioPaddingEnd","handleMaxImageWidth","handleMaxImageHeight","handleSurroundingSubtitlesCountRadius","handleSurroundingSubtitlesTimeRadius","handleSubtitleColorChange","handleSubtitleSizeChange","handleSubtitleOutlineColorChange","handleSubtitleOutlineThicknessChange","handleSubtitleBackgroundColorChange","handleSubtitleBackgroundOpacityChange","handleSubtitleFontFamilyChange","handleSubtitlePreviewChange","handleImageBasedSubtitleScaleFactorChange","handleAddCustomField","oldCustomFields","newCustomFields","handleCustomFieldRemoval","handleTagsChange","handlePreferMp3Change","checked","handleThemeTypeChange","handleCopyToClipboardOnMine","handleAutoPausePreferenceChange","handleKeysChange","keyBindName","newKeyBindSet","handleRememberSubtitleOffsetChange","subtitlePreviewStyles","canceled","requestPermission","refreshFieldNames","modelFieldNames","handleClose","customFieldInputs","getElementById","FormLabel","FormGroup","FormHelperText","location","hostname","FormControlLabel","control","Switch","labelPlacement","inputProps","RadioGroup","row","Radio","properties","extensionCommands","openShortcuts","defaultAutoPausePreference","defaultKeyBindSet","ankiConnectUrlKey","deckKey","noteTypeKey","sentenceFieldKey","definitionFieldKey","audioFieldKey","imageFieldKey","wordFieldKey","sourceFieldKey","urlFieldKey","customAnkiFieldsKey","tagsKey","subtitleSizeKey","subtitleColorKey","subtitleOutlineThicknessKey","subtitleOutlineColorKey","subtitleBackgroundColorKey","subtitleBackgroundOpacityKey","subtitleFontFamilyKey","subtitlePreviewKey","imageBasedSubtitleScaleFactorKey","audioPaddingStartKey","audioPaddingEndKey","maxImageWidthKey","maxImageHeightKey","surroundingSubtitlesCountRadiusKey","surroundingSubtitlesTimeRadiusKey","preferMp3Key","themeTypeKey","copyToClipboardOnMineKey","autoPausePreferenceKey","keyBindSetKey","rememberSubtitleOffsetKey","SettingsProvider","_tags","_keyBindSet","newSettings","localStorage","getItem","removeItem","setItem","_setOptionalItem","ankiFieldsString","tagsString","_getNumberItem","serialized","PlayerChannel","closeCallbacks","subtitlesCallbacks","subtitleSettingsCallbacks","miscSettingsCallbacks","ankiSettingsCallbacks","alertCallbacks","subtitlesMessage","subtitleSettingsMessage","playModeMessage","hideSubtitlePlayerToggleMessage","appBarToggleMessage","fullscreenToggleMessage","ankiSettingsMessage","miscSettingsMessage","alertMessage","AppKeyBinder","defaultKeyBinder","copyHandlers","ankiExportHandlers","updateLastCardHandlers","onExtensionMessage","h","KeyboardEvent","_remove","splice","bindToggleSubtitles","bindToggleSubtitleTrackInVideo","onCondensedPlayback","overflow","cursorHidden","subtitleContainer","lineHeight","notifyReady","playerChannel","outerWidth","availHeight","outerHeight","resizeTo","selectedTrack","VideoPlayer","poppingInRef","setFullscreen","setLength","setVideoFileName","showSubtitles","setShowSubtitles","startedShowingSubtitle","setStartedShowingSubtitle","willStopShowingSubtitle","setWillStopShowingSubtitle","setSubtitlesEnabled","setSubtitlePlayerHidden","theaterMode","setAppBarHidden","showSubtitlesRef","showCursor","setShowCursor","lastMouseMovementTimestamp","setMiscSettings","setSubtitleSettings","setAnkiSettings","alertOpen","setAlertOpen","setAlertMessage","alertSeverity","setAlertSeverity","videoRefCallback","videoElement","onloadeddata","ontimeupdate","code","errorMessage","selectAudioTrack","updateSubtitlesWithOffset","forwardToPlayer","onSubtitles","onSubtitleSettings","onMiscSettings","onAnkiSettings","onAlert","onbeforeunload","equals","arrayEquals","s1","s2","copy","toggleSubtitleTrackInList","extractSubtitles","noSubtitleCallback","subtitleCallback","handleSubtitlesToggle","handleFullscreenToggle","exitFullscreen","documentElement","requestFullscreen","handlePopOutToggle","popOutToggle","handleHideSubtitlePlayerToggle","handleTheaterModeToggle","handleDoubleClick","subtitleStyles","handleAlertClosed","bounds","clientX","clientY","controls","onDoubleClick","isMobile","ChromeExtension","windowEventListener","onMessageCallbacks","onTabsCallbacks","heartbeatStarted","sender","tabsCommand","ackRequested","receivedTabs","fromVideoPlayer","_sendHeartbeat","videoPlayer","callbacks","keyBindNameMap","ChromeExtensionProvider","translatedCommands","extensionCommandName","volumeKey","theaterModeKey","offsetKey","PlaybackPreferences","useContentStyles","contentShift","audioClipFromItem","paddingStart","paddingEnd","fromBase64","subtitleFile","fromFile","filePlaybackRate","audioTrack","imageFromItem","mediaTimestamp","itemSourceString","NavigateToVideo","searchParams","get","to","RenderVideo","Content","App","createTheme","main","red","A400","useLocation","useSearchParams","inVideoPlayer","pathname","extensionProvider","setExtension","setVideoFullscreen","onChromeExtension","drawerRatio","minDrawerSize","copiedSubtitles","setCopiedSubtitles","copiedSubtitlesRef","copyHistoryOpen","setCopyHistoryOpen","setTheaterMode","setHideSubtitlePlayer","setVideoPopOut","alert","setAlert","setJumpToSubtitle","setRewindSubtitle","setSources","setLoading","setDragging","dragEnterRef","setFileName","ankiDialogOpen","setAnkiDialogOpen","ankiDialogDisabled","setAnkiDialogDisabled","ankiDialogItem","setAnkiDialogItem","ankiDialogItemSliderContext","itemSliderContext","ankiDialogAudioClip","ankiDialogImage","setAnkiDialogRequested","setAnkiDialogFinishedRequest","settingsDialogOpen","setSettingsDialogOpen","settingsDialogScrollToId","setSettingsDialogScrollToId","imageDialogOpen","setImageDialogOpen","setDisableKeyEvents","setImage","setTab","setAvailableTabs","fileInputRef","ankiDialogRequestedRef","handleError","handleAnkiDialogRequest","handleAnkiDialogRequestFromVideoPlayer","blobFile","File","handleAnkiDialogProceed","export","newCopiedSubtitle","newCopiedSubtitles","handleOpenCopyHistory","handleCloseCopyHistory","handleAppBarToggle","fullscreenElement","handleHideSubtitlePlayer","handleVideoPopOut","handleOpenSettings","handleImageDialogClosed","handleCloseSettings","handleDeleteCopyHistoryItem","previous","clip","handleDownloadCopyHistorySectionAsSrt","deduplicated","toISOString","handleSelectCopyHistoryItem","handleAnki","handleAnkiDialogCancel","handleAnkiDialogRewind","subscribeTabs","t1","t2","handleFiles","extensionStartIndex","extractSources","revokeUrls","handleDirectory","fileSystemEntry","webkitGetAsEntry","isDirectory","fileSystemDirectoryEntry","createReader","readEntries","entries","filePromises","unsubscribe","startHeartbeat","syncMessage","handleAutoPauseModeChangedViaBind","oldPlayMode","handleDrop","dataTransfer","allDirectories","handleFileInputChange","handleFileSelector","nonSupSubtitleFiles","filesToSrt","handleDragOver","handleDragEnter","handleDragLeave","handleSourcesLoaded","hash","startsWith","nothingLoaded","effectiveCopyHistoryOpen","ThemeProvider","CssBaseline","onDrop","onDragOver","onDragEnter","onDragLeave","path","accept","multiple","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","createRoot","querySelector","render","basename"],"mappings":"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","file":"static/js/main.80b44ab6.chunk.js","sourcesContent":["import { useLayoutEffect, useState } from 'react';\n\n// https://stackoverflow.com/questions/19014250/rerender-view-on-browser-resize-with-react\nexport function useWindowSize(enabled: boolean) {\n    const [size, setSize] = useState([0, 0]);\n\n    useLayoutEffect(() => {\n        function updateSize() {\n            if (enabled) {\n                setSize([window.innerWidth, window.innerHeight]);\n            }\n        }\n\n        window.addEventListener('resize', updateSize);\n        updateSize();\n\n        return () => window.removeEventListener('resize', updateSize);\n    }, [enabled]);\n\n    return size;\n}\n","import { SubtitleModel } from './Model';\nimport hotkeys from 'hotkeys-js';\nimport { KeyBindSet } from './Settings';\n\nexport interface KeyBinder {\n    bindCopy<T extends SubtitleModel = SubtitleModel>(\n        onCopy: (event: KeyboardEvent, subtitle: T) => void,\n        disabledGetter: () => boolean,\n        subtitleGetter: () => T | undefined,\n        useCapture?: boolean\n    ): () => void;\n    bindAnkiExport(\n        onAnkiExport: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean\n    ): () => void;\n    bindUpdateLastCard(\n        onUpdateLastCard: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean\n    ): () => void;\n    bindSeekToSubtitle(\n        onSeekToSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean\n    ): () => void;\n    bindSeekToBeginningOfCurrentSubtitle(\n        onSeekToBeginningOfCurrentSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean\n    ): () => void;\n    bindSeekBackwardOrForward(\n        onSeekBackwardOrForward: (event: KeyboardEvent, forward: boolean) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean\n    ): () => void;\n    bindOffsetToSubtitle(\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean\n    ): () => void;\n    bindAdjustOffset(\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\n        disabledGetter: () => boolean,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean\n    ): () => void;\n    bindAdjustPlaybackRate(\n        onAdjustPlaybackRate: (event: KeyboardEvent, increase: boolean) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean\n    ): () => void;\n    bindToggleSubtitles(\n        onToggleSubtitles: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean\n    ): () => void;\n    bindToggleSubtitleTrackInVideo(\n        onToggleSubtitleTrack: (event: KeyboardEvent, extra: any) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean\n    ): () => void;\n    bindToggleSubtitleTrackInList(\n        onToggleSubtitleTrackInList: (event: KeyboardEvent, extra: any) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean\n    ): () => void;\n    bindPlay(onPlay: (event: KeyboardEvent) => void, disabledGetter: () => boolean, useCapture?: boolean): () => void;\n    bindAutoPause(\n        onAutoPause: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean\n    ): () => void;\n    bindCondensedPlayback(\n        onCondensedPlayback: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean\n    ): () => void;\n}\n\nexport class DefaultKeyBinder implements KeyBinder {\n    private readonly keyBindSet: KeyBindSet;\n\n    constructor(keyBindSet: KeyBindSet) {\n        this.keyBindSet = keyBindSet;\n    }\n    bindCopy<T extends SubtitleModel = SubtitleModel>(\n        onCopy: (event: KeyboardEvent, subtitle: T) => void,\n        disabledGetter: () => boolean,\n        subtitleGetter: () => T | undefined,\n        useCapture = false\n    ) {\n        const shortcut = this.keyBindSet.copySubtitle.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = this.copyHandler(onCopy, disabledGetter, subtitleGetter);\n        hotkeys(shortcut, { capture: useCapture }, handler);\n        return () => hotkeys.unbind(shortcut, handler);\n    }\n\n    copyHandler<T extends SubtitleModel>(\n        onCopy: (event: KeyboardEvent, subtitle: T) => void,\n        disabledGetter: () => boolean,\n        subtitleGetter: () => T | undefined\n    ) {\n        return (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            const subtitle = subtitleGetter();\n\n            if (!subtitle) {\n                return;\n            }\n\n            onCopy(event, subtitle);\n        };\n    }\n\n    bindAnkiExport(onAnkiExport: (event: KeyboardEvent) => void, disabledGetter: () => boolean, useCapture = false) {\n        const shortcut = this.keyBindSet.ankiExport.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = this.ankiExportHandler(onAnkiExport, disabledGetter);\n        hotkeys(shortcut, { capture: useCapture }, handler);\n        return () => hotkeys.unbind(shortcut, handler);\n    }\n\n    ankiExportHandler(onAnkiExport: (event: KeyboardEvent) => void, disabledGetter: () => boolean) {\n        return (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onAnkiExport(event);\n        };\n    }\n\n    bindUpdateLastCard(\n        onUpdateLastCard: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture = false\n    ) {\n        const shortcut = this.keyBindSet.updateLastCard.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = this.updateLastCardHandler(onUpdateLastCard, disabledGetter);\n        hotkeys(shortcut, { capture: useCapture }, handler);\n        return () => hotkeys.unbind(shortcut, handler);\n    }\n\n    updateLastCardHandler(onUpdateLastCard: (event: KeyboardEvent) => void, disabledGetter: () => boolean) {\n        return (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onUpdateLastCard(event);\n        };\n    }\n\n    bindSeekToSubtitle(\n        onSeekToSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture = false\n    ) {\n        const delegate = (event: KeyboardEvent, forward: boolean) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            const subtitles = subtitlesGetter();\n\n            if (!subtitles || subtitles.length === 0) {\n                return;\n            }\n\n            const subtitle = this._adjacentSubtitle(forward, timeGetter(), subtitles);\n\n            if (subtitle !== null && subtitle.start >= 0 && subtitle.end >= 0) {\n                onSeekToSubtitle(event, subtitle);\n            }\n        };\n        const previousShortcut = this.keyBindSet.seekToPreviousSubtitle.keys;\n        const nextShortcut = this.keyBindSet.seekToNextSubtitle.keys;\n        const previousHandler = (event: KeyboardEvent) => delegate(event, false);\n        const nextHandler = (event: KeyboardEvent) => delegate(event, true);\n\n        if (previousShortcut) {\n            hotkeys(previousShortcut, { capture: useCapture }, previousHandler);\n        }\n\n        if (nextShortcut) {\n            hotkeys(nextShortcut, { capture: useCapture }, nextHandler);\n        }\n\n        return () => {\n            if (previousShortcut) {\n                hotkeys.unbind(previousShortcut, previousHandler);\n            }\n\n            if (nextShortcut) {\n                hotkeys.unbind(nextShortcut, nextHandler);\n            }\n        };\n    }\n\n    bindSeekToBeginningOfCurrentSubtitle(\n        onSeekToBeginningOfCurrentSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture = false\n    ) {\n        const shortcut = this.keyBindSet.seekToBeginningOfCurrentSubtitle.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            const subtitles = subtitlesGetter();\n\n            if (!subtitles || subtitles.length === 0) {\n                return;\n            }\n\n            const subtitle = this._currentSubtitle(timeGetter(), subtitles);\n\n            if (subtitle !== undefined && subtitle.start >= 0 && subtitle.end >= 0) {\n                onSeekToBeginningOfCurrentSubtitle(event, subtitle);\n            }\n        };\n        hotkeys(shortcut, { capture: useCapture }, handler);\n        return () => hotkeys.unbind(shortcut, handler);\n    }\n\n    _currentSubtitle(time: number, subtitles: SubtitleModel[]) {\n        const now = time;\n        let currentSubtitle: SubtitleModel | undefined;\n        let minDiff = Number.MAX_SAFE_INTEGER;\n\n        for (let i = 0; i < subtitles.length; ++i) {\n            const s = subtitles[i];\n\n            if (s.start < 0 || s.end < 0) {\n                continue;\n            }\n\n            const diff = now - s.start;\n\n            if (now >= s.start && now < s.end) {\n                if (diff < minDiff) {\n                    currentSubtitle = s;\n                    minDiff = diff;\n                }\n            }\n        }\n\n        return currentSubtitle;\n    }\n\n    bindSeekBackwardOrForward(\n        onSeekBackwardOrForward: (event: KeyboardEvent, forward: boolean) => void,\n        disabledGetter: () => boolean,\n        useCapture = false\n    ) {\n        const delegate = (event: KeyboardEvent, forward: boolean) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onSeekBackwardOrForward(event, forward);\n        };\n        const backShortcut = this.keyBindSet.seekBackward.keys;\n        const nextShortcut = this.keyBindSet.seekForward.keys;\n        const backHandler = (event: KeyboardEvent) => delegate(event, false);\n        const nextHandler = (event: KeyboardEvent) => delegate(event, true);\n\n        if (backShortcut) {\n            hotkeys(backShortcut, { capture: useCapture }, backHandler);\n        }\n\n        if (nextShortcut) {\n            hotkeys(nextShortcut, { capture: useCapture }, nextHandler);\n        }\n\n        return () => {\n            if (backShortcut) {\n                hotkeys.unbind(backShortcut, backHandler);\n            }\n\n            if (nextShortcut) {\n                hotkeys.unbind(nextShortcut, nextHandler);\n            }\n        };\n    }\n\n    bindOffsetToSubtitle(\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture = false\n    ) {\n        const delegate = (event: KeyboardEvent, forward: boolean) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            const subtitles = subtitlesGetter();\n\n            if (!subtitles || subtitles.length === 0) {\n                return;\n            }\n\n            const time = timeGetter();\n            const subtitle = this._adjacentSubtitle(forward, time, subtitles);\n\n            if (subtitle !== null) {\n                const subtitleStart = subtitle.originalStart;\n                const newOffset = time - subtitleStart;\n                onOffsetChange(event, newOffset);\n            }\n        };\n        const previousShortcut = this.keyBindSet.adjustOffsetToPreviousSubtitle.keys;\n        const nextShortcut = this.keyBindSet.adjustOffsetToNextSubtitle.keys;\n        const previousHandler = (event: KeyboardEvent) => delegate(event, false);\n        const nextHandler = (event: KeyboardEvent) => delegate(event, true);\n\n        if (previousShortcut) {\n            hotkeys(previousShortcut, { capture: useCapture }, previousHandler);\n        }\n\n        if (nextShortcut) {\n            hotkeys(nextShortcut, { capture: useCapture }, nextHandler);\n        }\n\n        return () => {\n            if (previousShortcut) {\n                hotkeys.unbind(previousShortcut, previousHandler);\n            }\n\n            if (nextShortcut) {\n                hotkeys.unbind(nextShortcut, nextHandler);\n            }\n        };\n    }\n\n    _adjacentSubtitle(forward: boolean, time: number, subtitles: SubtitleModel[]) {\n        const now = time;\n        let adjacentSubtitleIndex = -1;\n        let minDiff = Number.MAX_SAFE_INTEGER;\n\n        for (let i = 0; i < subtitles.length; ++i) {\n            const s = subtitles[i];\n            const diff = forward ? s.start - now : now - s.start;\n\n            if (minDiff <= diff) {\n                continue;\n            }\n\n            if (forward && now < s.start) {\n                minDiff = diff;\n                adjacentSubtitleIndex = i;\n            } else if (!forward && now > s.start) {\n                minDiff = diff;\n                adjacentSubtitleIndex = now < s.end ? Math.max(0, i - 1) : i;\n            }\n        }\n\n        if (adjacentSubtitleIndex !== -1) {\n            return subtitles[adjacentSubtitleIndex];\n        }\n\n        return null;\n    }\n\n    bindAdjustOffset(\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\n        disabledGetter: () => boolean,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture = false\n    ) {\n        const delegate = (event: KeyboardEvent, increase: boolean) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            const subtitles = subtitlesGetter();\n\n            if (!subtitles || subtitles.length === 0) {\n                return;\n            }\n\n            const currentOffset = subtitles[0].start - subtitles[0].originalStart;\n            const newOffset = currentOffset + (increase ? 100 : -100);\n            onOffsetChange(event, newOffset);\n        };\n\n        const decreaseShortcut = this.keyBindSet.decreaseOffset.keys;\n        const increaseShortcut = this.keyBindSet.increaseOffset.keys;\n        const decreaseHandler = (event: KeyboardEvent) => delegate(event, false);\n        const increaseHandler = (event: KeyboardEvent) => delegate(event, true);\n\n        hotkeys(decreaseShortcut, { capture: useCapture }, decreaseHandler);\n        hotkeys(increaseShortcut, { capture: useCapture }, increaseHandler);\n        return () => {\n            hotkeys.unbind(decreaseShortcut, decreaseHandler);\n            hotkeys.unbind(increaseShortcut, increaseHandler);\n        };\n    }\n\n    bindAdjustPlaybackRate(\n        onAdjustPlaybackRate: (event: KeyboardEvent, increase: boolean) => void,\n        disabledGetter: () => boolean,\n        useCapture = false\n    ) {\n        const delegate = (event: KeyboardEvent, increase: boolean) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onAdjustPlaybackRate(event, increase);\n        };\n        const increaseShortcut = this.keyBindSet.increasePlaybackRate.keys;\n        const decreaseShortcut = this.keyBindSet.decreasePlaybackRate.keys;\n        const decreaseHandler = (event: KeyboardEvent) => delegate(event, false);\n        const increaseHandler = (event: KeyboardEvent) => delegate(event, true);\n\n        if (decreaseShortcut) {\n            hotkeys(decreaseShortcut, { capture: useCapture }, decreaseHandler);\n        }\n\n        if (increaseShortcut) {\n            hotkeys(increaseShortcut, { capture: useCapture }, increaseHandler);\n        }\n\n        return () => {\n            if (decreaseShortcut) {\n                hotkeys.unbind(decreaseShortcut, decreaseHandler);\n            }\n\n            if (increaseShortcut) {\n                hotkeys.unbind(increaseShortcut, increaseHandler);\n            }\n        };\n    }\n\n    bindToggleSubtitles(\n        onToggleSubtitles: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture = false\n    ) {\n        const shortcut = this.keyBindSet.toggleSubtitles.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onToggleSubtitles(event);\n        };\n        hotkeys(shortcut, { capture: useCapture }, handler);\n        return () => {\n            hotkeys.unbind(shortcut, handler);\n        };\n    }\n\n    bindToggleSubtitleTrackInVideo(\n        onToggleSubtitleTrack: (event: KeyboardEvent, extra: any) => void,\n        disabledGetter: () => boolean,\n        useCapture = false\n    ) {\n        const shortcuts = [\n            this.keyBindSet.toggleVideoSubtitleTrack1.keys,\n            this.keyBindSet.toggleVideoSubtitleTrack2.keys,\n        ].filter((s) => s);\n\n        if (shortcuts.length === 0) {\n            return () => {};\n        }\n\n        const delegate = (event: KeyboardEvent, track: number) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onToggleSubtitleTrack(event, track);\n        };\n        let handlers: ((event: KeyboardEvent) => void)[] = [];\n\n        for (let i = 0; i < shortcuts.length; ++i) {\n            const handler = (event: KeyboardEvent) => delegate(event, i);\n            handlers.push(handler);\n            hotkeys(shortcuts[i], { capture: useCapture }, handler);\n        }\n\n        return () => {\n            for (let i = 0; i < shortcuts.length; ++i) {\n                const handler = handlers[i];\n                hotkeys.unbind(shortcuts[i], handler);\n            }\n        };\n    }\n\n    bindToggleSubtitleTrackInList(\n        onToggleSubtitleTrackInList: (event: KeyboardEvent, extra: any) => void,\n        disabledGetter: () => boolean,\n        useCapture = false\n    ) {\n        const shortcuts = [\n            this.keyBindSet.toggleAsbplayerSubtitleTrack1.keys,\n            this.keyBindSet.toggleAsbplayerSubtitleTrack2.keys,\n        ].filter((s) => s);\n\n        if (shortcuts.length === 0) {\n            return () => {};\n        }\n\n        const delegate = (event: KeyboardEvent, track: number) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onToggleSubtitleTrackInList(event, track);\n        };\n\n        let handlers: ((event: KeyboardEvent) => void)[] = [];\n\n        for (let i = 0; i < 9; ++i) {\n            const handler = (event: KeyboardEvent) => delegate(event, i);\n            handlers.push(handler);\n            hotkeys(shortcuts[i], { capture: useCapture }, handler);\n        }\n\n        return () => {\n            for (let i = 0; i < 9; ++i) {\n                const handler = handlers[i];\n                hotkeys.unbind(shortcuts[i], handler);\n            }\n        };\n    }\n\n    bindPlay(onPlay: (event: KeyboardEvent) => void, disabledGetter: () => boolean, useCapture = false) {\n        const shortcut = this.keyBindSet.togglePlay.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onPlay(event);\n        };\n\n        hotkeys(shortcut, { capture: useCapture }, handler);\n        return () => {\n            hotkeys.unbind(shortcut, handler);\n        };\n    }\n\n    bindAutoPause(onAutoPause: (event: KeyboardEvent) => void, disabledGetter: () => boolean, useCapture = false) {\n        const shortcut = this.keyBindSet.toggleAutoPause.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onAutoPause(event);\n        };\n        hotkeys(shortcut, { capture: useCapture }, handler);\n        return () => {\n            hotkeys.unbind(shortcut, handler);\n        };\n    }\n\n    bindCondensedPlayback(\n        onAutoPause: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture = false\n    ) {\n        const shortcut = this.keyBindSet.toggleCondensedPlayback.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onAutoPause(event);\n        };\n        hotkeys(shortcut, { capture: useCapture }, handler);\n        return () => {\n            hotkeys.unbind(shortcut, handler);\n        };\n    }\n}\n","export default class Mp3Encoder {\n    static async encode(blob: Blob, workerFactory: () => Worker): Promise<Blob> {\n        return new Promise(async (resolve, reject) => {\n            var reader = new FileReader();\n            reader.onload = async (e) => {\n                try {\n                    const audioContext = new AudioContext();\n\n                    if (e.target === null) {\n                        reject(new Error(\"Could not obtain buffer to encode\"));\n                        return;\n                    }\n\n                    const audioBuffer = await audioContext.decodeAudioData(e.target.result as ArrayBuffer);\n                    const channels = [];\n\n                    for (let i = 0; i < audioBuffer.numberOfChannels; ++i) {\n                        channels.push(audioBuffer.getChannelData(i));\n                    }\n\n                    const worker = workerFactory();\n                    worker.postMessage({\n                        command: 'encode',\n                        audioBuffer: {\n                            channels: channels,\n                            numberOfChannels: audioBuffer.numberOfChannels,\n                            length: audioBuffer.length,\n                            sampleRate: audioBuffer.sampleRate,\n                        },\n                    });\n                    worker.onmessage = (e) => {\n                        resolve(new Blob(e.data.buffer, { type: 'audio/mp3' }));\n                        worker.terminate();\n                    };\n                    worker.onerror = (e) => {\n                        const error = e?.error ?? new Error('MP3 encoding failed: ' + e?.message);\n                        reject(error);\n                        worker.terminate();\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            };\n            reader.readAsArrayBuffer(blob);\n        });\n    }\n}\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/mp3-encoder.7f842300.worker.js\");\n}\n","import sanitize from 'sanitize-filename';\nimport { SubtitleModel } from './Model';\n\nexport function humanReadableTime(timestamp: number, nearestTenth = false): string {\n    const totalSeconds = Math.floor(timestamp / 1000);\n    let seconds;\n\n    if (nearestTenth) {\n        seconds = Math.round(((timestamp / 1000) % 60) * 10) / 10;\n    } else {\n        seconds = totalSeconds % 60;\n    }\n\n    const minutes = Math.floor(totalSeconds / 60) % 60;\n    const hours = Math.floor(totalSeconds / 3600);\n\n    if (hours > 0) {\n        return hours + 'h' + String(minutes).padStart(2, '0') + 'm' + String(seconds).padStart(2, '0') + 's';\n    }\n\n    return minutes + 'm' + String(seconds).padStart(2, '0') + 's';\n}\n\nexport function surroundingSubtitles(\n    subtitles: SubtitleModel[],\n    index: number,\n    countRadius: number,\n    timeRadius: number\n): SubtitleModel[] {\n    let startIndex = index;\n\n    for (let i = index; i >= 0; --i) {\n        startIndex = i;\n\n        if (atBoundary(subtitles, startIndex, index, countRadius, timeRadius, Direction.backward)) {\n            break;\n        }\n    }\n\n    let endIndex = startIndex;\n\n    for (let i = index; i <= subtitles.length - 1; ++i) {\n        endIndex = i;\n\n        if (atBoundary(subtitles, endIndex, index, countRadius, timeRadius, Direction.forward)) {\n            break;\n        }\n    }\n\n    return subtitles.slice(startIndex, endIndex + 1);\n}\n\nfunction indexNearTimestamp(subtitles: SubtitleModel[], timestamp: number, direction: Direction) {\n    if (direction === Direction.forward) {\n        for (let i = 0; i < subtitles.length; ++i) {\n            if (subtitles[i].start >= timestamp) {\n                return i;\n            }\n        }\n    } else {\n        for (let i = subtitles.length - 1; i >= 0; --i) {\n            if (subtitles[i].start <= timestamp) {\n                return i;\n            }\n        }\n    }\n\n    return undefined;\n}\n\nexport function surroundingSubtitlesAroundInterval(\n    subtitles: SubtitleModel[],\n    startTimestamp: number,\n    endTimestamp: number,\n    countRadius: number,\n    timeRadius: number\n) {\n    if (subtitles.length === 0) {\n        return {};\n    }\n\n    let startBoundaryIndex = 0;\n    const indexAfterStartTimestamp =\n        indexNearTimestamp(subtitles, startTimestamp, Direction.forward) ?? subtitles.length - 1;\n\n    for (let i = 0; i < subtitles.length; ++i) {\n        startBoundaryIndex = i;\n\n        if (\n            withinBoundaryAroundInterval(\n                subtitles,\n                i,\n                countRadius,\n                timeRadius,\n                startTimestamp,\n                indexAfterStartTimestamp\n            )\n        ) {\n            break;\n        }\n    }\n\n    let endBoundaryIndex = subtitles.length - 1;\n    const indexBeforeEndTimestamp = indexNearTimestamp(subtitles, endTimestamp, Direction.backward) ?? 0;\n\n    for (let i = subtitles.length - 1; i >= 0; --i) {\n        endBoundaryIndex = i;\n\n        if (\n            withinBoundaryAroundInterval(subtitles, i, countRadius, timeRadius, endTimestamp, indexBeforeEndTimestamp)\n        ) {\n            break;\n        }\n    }\n\n    if (endBoundaryIndex <= startBoundaryIndex) {\n        return {};\n    }\n\n    return {\n        surroundingSubtitles: subtitles.slice(startBoundaryIndex, endBoundaryIndex + 1),\n        subtitle: subtitles[indexAfterStartTimestamp],\n    };\n}\n\nexport function mockSurroundingSubtitles(\n    middleSubtitle: SubtitleModel,\n    maxTimestamp: number,\n    timeRadius: number\n): SubtitleModel[] {\n    const subtitles = [middleSubtitle];\n    const offset = middleSubtitle.start - middleSubtitle.originalStart;\n\n    if (middleSubtitle.end < maxTimestamp) {\n        const afterTimestamp = Math.min(maxTimestamp, middleSubtitle.end + timeRadius);\n        subtitles.push({\n            text: '',\n            start: middleSubtitle.end,\n            end: afterTimestamp,\n            originalStart: middleSubtitle.end - offset,\n            originalEnd: afterTimestamp - offset,\n            track: middleSubtitle.track,\n        });\n    }\n\n    if (middleSubtitle.start > 0) {\n        const beforeTimestamp = Math.max(0, middleSubtitle.start - timeRadius);\n        subtitles.unshift({\n            text: '',\n            start: beforeTimestamp,\n            end: middleSubtitle.start,\n            originalStart: beforeTimestamp - offset,\n            originalEnd: middleSubtitle.start - offset,\n            track: middleSubtitle.track,\n        });\n    }\n\n    return subtitles;\n}\n\nenum Direction {\n    forward,\n    backward,\n}\n\nfunction atBoundary(\n    subtitles: SubtitleModel[],\n    index: number,\n    initialIndex: number,\n    countRadius: number,\n    timeRadius: number,\n    direction: Direction\n): boolean {\n    let next;\n\n    if (direction == Direction.forward) {\n        next = index + 1 < subtitles.length ? subtitles[index + 1] : null;\n    } else {\n        next = index - 1 >= 0 ? subtitles[index - 1] : null;\n    }\n\n    if (\n        Math.abs(initialIndex - index) >= countRadius &&\n        (next === null || Math.abs(next.start - subtitles[initialIndex].start) >= timeRadius)\n    ) {\n        return true;\n    }\n\n    return false;\n}\n\nfunction withinBoundaryAroundInterval(\n    subtitles: SubtitleModel[],\n    index: number,\n    countRadius: number,\n    timeRadius: number,\n    timestamp: number,\n    indexNearTimestamp: number\n): boolean {\n    const current = subtitles[index];\n\n    if (Math.abs(indexNearTimestamp - index) <= countRadius || Math.abs(current.start - timestamp) <= timeRadius) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function download(blob: Blob, name: string) {\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    document.body.appendChild(a);\n    a.style.display = 'none';\n    a.href = url;\n    a.download = sanitize(name);\n    a.click();\n    URL.revokeObjectURL(url);\n    a.remove();\n}\n","import Mp3Encoder from './Mp3Encoder';\n// eslint-disable-next-line\n// @ts-ignore\nimport Worker from 'worker-loader!./mp3-encoder.js';\nimport { download } from './util';\nconst defaultMp3WorkerFactory = () => new Worker();\n\ninterface ExperimentalAudioElement extends HTMLAudioElement {\n    audioTracks: any;\n    captureStream?: () => MediaStream;\n    mozCaptureStream?: () => MediaStream;\n}\n\ninterface AudioData {\n    name: string;\n    extension: string;\n    start: number;\n    end: number;\n    play: () => Promise<void>;\n    blob: () => Promise<Blob>;\n    base64: () => Promise<string>;\n    slice: (start: number, end: number) => AudioData;\n    isSliceable: () => boolean;\n}\n\nclass Base64AudioData implements AudioData {\n    private readonly _name: string;\n    private readonly _start: number;\n    private readonly _end: number;\n    private readonly playbackRate: number;\n    private readonly _base64: string;\n    private readonly _extension: string;\n\n    private playingAudio?: HTMLAudioElement;\n    private stopAudioTimeout?: NodeJS.Timeout;\n    private cachedBlob?: Blob;\n\n    constructor(baseName: string, start: number, end: number, playbackRate: number, base64: string, extension: string) {\n        this._name = baseName + '_' + Math.floor(start) + '_' + Math.floor(end);\n        this._start = start;\n        this._end = end;\n        this.playbackRate = playbackRate;\n        this._base64 = base64;\n        this._extension = extension;\n    }\n\n    get name(): string {\n        return this._name;\n    }\n\n    get extension(): string {\n        return this._extension;\n    }\n\n    get start(): number {\n        return this._start;\n    }\n\n    get end(): number {\n        return this._end;\n    }\n\n    async base64() {\n        return this._base64;\n    }\n\n    async blob() {\n        return await this._blob();\n    }\n\n    async play(): Promise<void> {\n        if (this.playingAudio) {\n            this.stopAudio(this.playingAudio);\n            clearTimeout(this.stopAudioTimeout!);\n            this.playingAudio = undefined;\n            this.stopAudioTimeout = undefined;\n            return;\n        }\n\n        const blob = await this._blob();\n        const audio = new Audio();\n        audio.src = URL.createObjectURL(blob);\n        audio.preload = 'none';\n        audio.load();\n        this.playingAudio = audio;\n\n        await audio.play();\n\n        this.stopAudioTimeout = setTimeout(() => {\n            this.stopAudio(audio);\n            this.playingAudio = undefined;\n            this.stopAudioTimeout = undefined;\n        }, (this._end - this._start) / this.playbackRate + 100);\n    }\n\n    private stopAudio(audio: HTMLAudioElement) {\n        audio.pause();\n        const src = audio.src;\n        audio.src = '';\n        URL.revokeObjectURL(src);\n    }\n\n    async _blob() {\n        if (!this.cachedBlob) {\n            this.cachedBlob = await (await fetch('data:audio/' + this.extension + ';base64,' + this._base64)).blob();\n        }\n\n        return this.cachedBlob;\n    }\n\n    slice(start: number, end: number): AudioData {\n        // Not supported\n        return this;\n    }\n\n    isSliceable() {\n        return false;\n    }\n}\n\nclass FileAudioData implements AudioData {\n    private readonly file: File;\n    private readonly _name: string;\n    private readonly _start: number;\n    private readonly _end: number;\n    private readonly playbackRate: number;\n    private readonly trackId?: string;\n    private readonly _extension: string;\n    private readonly recorderMimeType: string;\n\n    private clippingAudio?: HTMLAudioElement;\n    private clippingAudioReject?: (error: string) => void;\n    private stopClippingTimeout?: NodeJS.Timeout;\n\n    private playingAudio?: HTMLAudioElement;\n    private stopAudioTimeout?: NodeJS.Timeout;\n\n    private _blob?: Blob;\n\n    constructor(file: File, start: number, end: number, playbackRate: number, trackId?: string) {\n        const [recorderMimeType, recorderExtension] = FileAudioData._recorderConfiguration();\n        this.recorderMimeType = recorderMimeType;\n        this.file = file;\n        this._name = file.name + '_' + start + '_' + end;\n        this._start = start;\n        this._end = end;\n        this.playbackRate = playbackRate;\n        this.trackId = trackId;\n        this._extension = recorderExtension;\n    }\n\n    private static _recorderConfiguration() {\n        const AUDIO_TYPES: { [key: string]: string } = {\n            'audio/ogg;codecs=opus': 'ogg',\n            'audio/webm;codecs=opus': 'webm',\n        };\n        return Object.keys(AUDIO_TYPES)\n            .filter(MediaRecorder.isTypeSupported)\n            .map((t) => [t as string, AUDIO_TYPES[t] as string])[0];\n    }\n\n    get name(): string {\n        return this._name;\n    }\n\n    get extension(): string {\n        return this._extension;\n    }\n\n    get start() {\n        return this._start;\n    }\n\n    get end() {\n        return this._end;\n    }\n\n    async base64() {\n        return new Promise<string>(async (resolve, reject) => {\n            var reader = new FileReader();\n            const blob = await this.blob();\n\n            if (blob === undefined) {\n                reject('Did not finish recording blob');\n            } else {\n                reader.readAsDataURL(blob);\n                reader.onloadend = () => {\n                    const result = reader.result as string;\n                    const base64 = result.substring(result.indexOf(',') + 1);\n                    resolve(base64);\n                };\n            }\n        });\n    }\n\n    async play() {\n        if (!this._blob) {\n            this._blob = await this._clipAudio();\n            return;\n        }\n\n        if (this.playingAudio) {\n            this.stopAudio(this.playingAudio);\n            clearTimeout(this.stopAudioTimeout!);\n            this.playingAudio = undefined;\n            this.stopAudioTimeout = undefined;\n            return;\n        }\n\n        const audio = await this._audioElement(this._blob, false);\n        audio.currentTime = 0;\n        await audio.play();\n        this.playingAudio = audio;\n        this.stopAudioTimeout = setTimeout(() => {\n            this.stopAudio(audio);\n            this.stopAudioTimeout = undefined;\n            this.playingAudio = undefined;\n        }, (this._end - this._start) / this.playbackRate + 100);\n    }\n\n    async blob() {\n        if (!this._blob) {\n            this._blob = await this._clipAudio();\n        }\n\n        if (this._blob === undefined) {\n            throw new Error('Did not finish recording blob');\n        }\n\n        return this._blob;\n    }\n\n    async _clipAudio(): Promise<Blob | undefined> {\n        if (this.clippingAudio) {\n            this.stopAudio(this.clippingAudio);\n            clearTimeout(this.stopClippingTimeout!);\n            this.clippingAudioReject?.('Did not finish recording blob');\n            this.clippingAudio = undefined;\n            this.stopClippingTimeout = undefined;\n            this.clippingAudioReject = undefined;\n            return undefined;\n        }\n\n        return new Promise(async (resolve, reject) => {\n            try {\n                const audio = await this._audioElement(this.file, true);\n                audio.oncanplay = async (e) => {\n                    audio.play();\n                    const stream = this._captureStream(audio);\n                    const recorder = new MediaRecorder(stream, { mimeType: this.recorderMimeType });\n                    const chunks: BlobPart[] = [];\n\n                    recorder.ondataavailable = (e) => {\n                        chunks.push(e.data);\n                    };\n\n                    let finished = false;\n\n                    recorder.onstop = (e) => {\n                        if (finished) {\n                            resolve(new Blob(chunks, { type: this.recorderMimeType }));\n                        }\n                    };\n\n                    recorder.start();\n\n                    this.clippingAudioReject = reject;\n                    this.clippingAudio = audio;\n                    this.stopClippingTimeout = setTimeout(() => {\n                        this.stopAudio(audio);\n                        this.clippingAudio = undefined;\n                        this.stopClippingTimeout = undefined;\n                        this.clippingAudioReject = undefined;\n                        finished = true;\n                        recorder.stop();\n                        for (const track of stream.getAudioTracks()) {\n                            track.stop();\n                        }\n                    }, (this._end - this._start) / this.playbackRate + 100);\n                };\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    private _audioElement(source: Blob, selectTrack: boolean): Promise<ExperimentalAudioElement> {\n        const audio = new Audio() as ExperimentalAudioElement;\n        audio.src = URL.createObjectURL(source);\n\n        return new Promise((resolve, reject) => {\n            audio.onloadedmetadata = (e) => {\n                if (selectTrack && this.trackId && audio.audioTracks && audio.audioTracks.length > 0) {\n                    // @ts-ignore\n                    for (const t of audio.audioTracks) {\n                        t.enabled = this.trackId === t.id;\n                    }\n                }\n\n                audio.currentTime = this._start / 1000;\n                audio.playbackRate = this.playbackRate;\n                resolve(audio);\n            };\n        });\n    }\n\n    private stopAudio(audio: HTMLAudioElement) {\n        audio.pause();\n        const src = audio.src;\n        audio.src = '';\n        URL.revokeObjectURL(src);\n    }\n\n    private _captureStream(audio: ExperimentalAudioElement) {\n        let stream: MediaStream | undefined;\n\n        if (typeof audio.captureStream === 'function') {\n            stream = audio.captureStream();\n        }\n\n        if (typeof audio.mozCaptureStream === 'function') {\n            stream = audio.mozCaptureStream();\n        }\n\n        if (stream === undefined) {\n            throw new Error('Unable to capture stream from audio');\n        }\n\n        const audioStream = new MediaStream();\n\n        for (const track of stream.getVideoTracks()) {\n            track.stop();\n        }\n\n        for (const track of stream.getAudioTracks()) {\n            if (track.enabled) {\n                audioStream.addTrack(track);\n            }\n        }\n\n        return audioStream;\n    }\n\n    slice(start: number, end: number) {\n        return new FileAudioData(this.file, start, end, this.playbackRate, this.trackId);\n    }\n\n    isSliceable() {\n        return true;\n    }\n}\n\nclass Mp3AudioData implements AudioData {\n    private readonly data: AudioData;\n    private readonly workerFactory: () => Worker;\n    private _blob?: Blob;\n\n    constructor(data: AudioData, workerFactory: () => Worker) {\n        this.data = data;\n        this.workerFactory = workerFactory;\n    }\n\n    get name() {\n        return this.data.name;\n    }\n\n    get extension() {\n        return 'mp3';\n    }\n\n    get start() {\n        return this.data.start;\n    }\n\n    get end() {\n        return this.data.end;\n    }\n\n    async base64() {\n        return new Promise<string>(async (resolve, reject) => {\n            try {\n                var reader = new FileReader();\n                reader.readAsDataURL(await this.blob());\n                reader.onloadend = () => {\n                    const result = reader.result as string;\n                    const base64 = result.substring(result.indexOf(',') + 1);\n                    resolve(base64);\n                };\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    async play() {\n        await this.data.play();\n    }\n\n    async blob() {\n        if (!this._blob) {\n            this._blob = await Mp3Encoder.encode(await this.data.blob(), this.workerFactory);\n        }\n\n        return this._blob;\n    }\n\n    slice(start: number, end: number) {\n        return new Mp3AudioData(this.data.slice(start, end), this.workerFactory);\n    }\n\n    isSliceable() {\n        return this.data.isSliceable();\n    }\n}\n\nexport default class AudioClip {\n    private readonly data: AudioData;\n\n    constructor(data: AudioData) {\n        this.data = data;\n    }\n\n    static fromBase64(\n        subtitleFileName: string,\n        start: number,\n        end: number,\n        playbackRate: number,\n        base64: string,\n        extension: string\n    ) {\n        return new AudioClip(\n            new Base64AudioData(\n                subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')),\n                start,\n                end,\n                playbackRate,\n                base64,\n                extension\n            )\n        );\n    }\n\n    static fromFile(file: File, start: number, end: number, playbackRate: number, trackId?: string) {\n        return new AudioClip(new FileAudioData(file, start, end, playbackRate, trackId));\n    }\n\n    get start() {\n        return this.data.start;\n    }\n\n    get end() {\n        return this.data.end;\n    }\n\n    get name() {\n        return this.data.name + '.' + this.data.extension;\n    }\n\n    async play() {\n        await this.data.play();\n    }\n\n    async base64() {\n        return await this.data.base64();\n    }\n\n    async download() {\n        const blob = await this.data.blob();\n        download(blob, this.name);\n    }\n\n    toMp3(mp3WorkerFactory = defaultMp3WorkerFactory) {\n        if (this.data instanceof Mp3AudioData) {\n            return this;\n        }\n\n        if (this.data.extension === 'mp3') {\n            return this;\n        }\n\n        return new AudioClip(new Mp3AudioData(this.data, mp3WorkerFactory));\n    }\n\n    slice(start: number, end: number) {\n        return new AudioClip(this.data.slice(start, end));\n    }\n\n    isSliceable() {\n        return this.data.isSliceable();\n    }\n}\n","import { AnkiSettings } from './Settings';\n\nexport interface RectModel {\n    readonly left: number;\n    readonly top: number;\n    readonly width: number;\n    readonly height: number;\n}\n\nexport interface DimensionsModel {\n    readonly width: number;\n    readonly height: number;\n}\n\nexport interface SubtitleTextImage {\n    readonly dataUrl: string;\n    readonly screen: DimensionsModel;\n    readonly image: DimensionsModel;\n}\n\nexport interface SubtitleModel {\n    readonly text: string;\n    readonly textImage?: SubtitleTextImage;\n    readonly start: number;\n    readonly end: number;\n    readonly originalStart: number;\n    readonly originalEnd: number;\n    readonly track: number;\n}\n\nexport interface CopiedSubtitleModel extends SubtitleModel {\n    surroundingSubtitles: SubtitleModel[];\n    timestamp: number;\n    id: string;\n    name: string;\n    subtitleFile?: File;\n    audioFile?: File;\n    videoFile?: File;\n    audioTrack?: number;\n    audio?: AudioModel;\n    image?: ImageModel;\n}\n\nexport interface ImageModel {\n    readonly base64: string;\n    readonly extension: 'jpeg';\n}\n\nexport interface AudioModel {\n    readonly base64: string;\n    readonly extension: 'webm' | 'mp3';\n    readonly paddingStart: number;\n    readonly paddingEnd: number;\n    readonly start?: number;\n    readonly end?: number;\n    readonly playbackRate?: number;\n}\n\nexport interface AnkiDialogSliderContext {\n    subtitleStart: number;\n    subtitleEnd: number;\n    subtitles: SubtitleModel[];\n}\n\nexport interface AnkiUiState {\n    readonly type: 'initial' | 'resume';\n    readonly open: boolean;\n    readonly settingsProvider: AnkiSettings;\n    readonly subtitle: SubtitleModel;\n    readonly url: string;\n    readonly source: string;\n    readonly image?: ImageModel;\n    readonly audio?: AudioModel;\n    readonly themeType: string;\n    readonly dialogRequestedTimestamp: number;\n}\n\nexport interface AnkiUiInitialState extends AnkiUiState {\n    readonly type: 'initial';\n    readonly surroundingSubtitles: SubtitleModel[];\n}\n\nexport interface AnkiUiResumeState extends AnkiUiState {\n    readonly type: 'resume';\n\n    readonly text: string;\n    readonly initialTimestampInterval: number[];\n    readonly timestampInterval: number[];\n    readonly timestampBoundaryInterval?: number[];\n    readonly sliderContext: AnkiDialogSliderContext;\n    readonly definition: string;\n    readonly word: string;\n    readonly customFieldValues: { [key: string]: string };\n    readonly lastAppliedTimestampIntervalToText: number[];\n    readonly lastAppliedTimestampIntervalToAudio?: number[];\n}\n\nexport interface AnkiUiSavedState {\n    subtitle: SubtitleModel;\n    text: string;\n    sliderContext: AnkiDialogSliderContext;\n    definition: string;\n    image?: ImageModel;\n    audio?: AudioModel;\n    word: string;\n    source: string;\n    url: string;\n    customFieldValues: { [key: string]: string };\n    timestampInterval: number[];\n    initialTimestampInterval: number[];\n    timestampBoundaryInterval?: number[];\n    lastAppliedTimestampIntervalToText: number[];\n    lastAppliedTimestampIntervalToAudio?: number[];\n    dialogRequestedTimestamp: number;\n}\n\nexport interface VideoDataSubtitleTrack {\n    label: string;\n    language: string;\n    url: string;\n}\n\nexport interface ConfirmedVideoDataSubtitleTrack {\n    name: string;\n    language: string;\n    subtitleUrl: string;\n}\n\nexport interface VideoData {\n    basename: string;\n    error?: string;\n    subtitles: VideoDataSubtitleTrack[];\n    extension: string;\n}\n\nexport interface VideoDataUiState {\n    open?: boolean;\n    isLoading?: boolean;\n    suggestedName?: string;\n    subtitles?: VideoDataSubtitleTrack[];\n    error?: string;\n    themeType?: string;\n    selectedSubtitle?: string;\n    showSubSelect?: boolean;\n}\n\nexport interface VideoTabModel {\n    id: number; // Actually the tab ID\n    title?: string;\n    src: string; // Video src\n}\n\nexport interface Rgb {\n    r: number;\n    g: number;\n    b: number;\n}\n\nexport interface AudioTrackModel {\n    id: string;\n    label: string;\n    language: string;\n}\n\nexport enum PostMineAction {\n    none = 0,\n    showAnkiDialog = 1,\n    updateLastCard = 2,\n}\n\nexport enum AutoPausePreference {\n    atStart = 1,\n    atEnd = 2,\n}\n\nexport enum PlayMode {\n    normal = 1,\n    condensed = 2,\n    autoPause = 3,\n}\n","export default class CanvasResizer {\n    resize(\n        canvas: HTMLCanvasElement,\n        ctx: CanvasRenderingContext2D,\n        maxWidth: number,\n        maxHeight: number\n    ): Promise<HTMLCanvasElement> {\n        return new Promise((resolve, reject) => {\n            const widthRatio = maxWidth <= 0 ? 1 : maxWidth / canvas.width;\n            const heightRatio = maxHeight <= 0 ? 1 : maxHeight / canvas.height;\n            const ratio = Math.min(1, Math.min(widthRatio, heightRatio));\n\n            if (ratio < 1) {\n                const newWidth = canvas.width * ratio;\n                const newHeight = canvas.height * ratio;\n                createImageBitmap(canvas, { resizeWidth: newWidth, resizeHeight: newHeight })\n                    .then((sprite) => {\n                        canvas.width = newWidth;\n                        canvas.height = newHeight;\n                        ctx.drawImage(sprite, 0, 0);\n                        resolve(canvas);\n                    })\n                    .catch((e) => reject(e));\n            } else {\n                resolve(canvas);\n            }\n        });\n    }\n}\n","import { resolveConfig } from 'prettier';\nimport sanitize from 'sanitize-filename';\nimport CanvasResizer from './CanvasResizer';\nimport { download } from './util';\n\nclass Base64ImageData implements ImageData {\n    private readonly _name: string;\n    private readonly _base64: string;\n    private readonly _extension: string;\n\n    private cachedBlob?: Blob;\n\n    constructor(name: string, base64: string, extension: string) {\n        this._name = name;\n        this._base64 = base64;\n        this._extension = extension;\n    }\n\n    get name() {\n        return this._name;\n    }\n\n    get extension() {\n        return this._extension;\n    }\n\n    async base64() {\n        return this._base64;\n    }\n\n    async blob() {\n        return await this._blob();\n    }\n\n    async _blob() {\n        if (!this.cachedBlob) {\n            this.cachedBlob = await (await fetch(this._dataUrl())).blob();\n        }\n\n        return this.cachedBlob;\n    }\n\n    async dataUrl() {\n        return this._dataUrl();\n    }\n\n    _dataUrl() {\n        return 'data:image/' + this.extension + ';base64,' + this._base64;\n    }\n}\n\nclass FileImageData implements ImageData {\n    private readonly file: File;\n    private readonly timestamp: number;\n    private readonly maxWidth: number;\n    private readonly maxHeight: number;\n    private readonly _name: string;\n\n    constructor(file: File, timestamp: number, maxWidth: number, maxHeight: number) {\n        this.file = file;\n        this._name = file.name + '_' + Math.floor(timestamp) + '.jpeg';\n        this.timestamp = timestamp;\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n    }\n\n    get name() {\n        return this._name;\n    }\n\n    get extension() {\n        return 'jpeg';\n    }\n\n    async base64(): Promise<string> {\n        return new Promise(async (resolve, reject) => {\n            const canvas = await this._canvas();\n            const dataUrl = canvas.toDataURL('image/jpeg');\n            resolve(dataUrl.substring(dataUrl.indexOf(',') + 1));\n        });\n    }\n\n    async blob(): Promise<Blob> {\n        return new Promise(async (resolve, reject) => {\n            const canvas = await this._canvas();\n            canvas.toBlob((blob) => {\n                if (blob === null) {\n                    reject(new Error('Could not obtain blob'));\n                } else {\n                    resolve(blob);\n                }\n            }, 'image/jpeg');\n        });\n    }\n\n    async dataUrl() {\n        const canvas = await this._canvas();\n        return canvas.toDataURL();\n    }\n\n    async _canvas(): Promise<HTMLCanvasElement> {\n        return new Promise(async (resolve, reject) => {\n            const video = this._videoElement(this.file);\n\n            video.oncanplay = async (e) => {\n                const canvas = document.createElement('canvas');\n                canvas.width = video.videoWidth;\n                canvas.height = video.videoHeight;\n                const ctx = canvas.getContext('2d');\n                ctx!.drawImage(video, 0, 0, canvas.width, canvas.height);\n                if (this.maxWidth > 0 || this.maxHeight > 0) {\n                    const resizer = new CanvasResizer();\n                    await resizer.resize(canvas, ctx!, this.maxWidth, this.maxHeight);\n                    resolve(canvas);\n                } else {\n                    resolve(canvas);\n                }\n                URL.revokeObjectURL(video.src);\n            };\n        });\n    }\n\n    _videoElement(source: File) {\n        const video = document.createElement('video');\n        video.src = URL.createObjectURL(source);\n        video.preload = 'none';\n        video.currentTime = this.timestamp / 1000;\n        video.load();\n\n        return video;\n    }\n}\n\ninterface ImageData {\n    name: string;\n    extension: string;\n    base64: () => Promise<string>;\n    dataUrl: () => Promise<string>;\n    blob: () => Promise<Blob>;\n}\n\nexport default class Image {\n    private readonly data: ImageData;\n\n    constructor(data: ImageData) {\n        this.data = data;\n    }\n\n    static fromBase64(subtitleFileName: string, timestamp: number, base64: string, extension: string) {\n        const imageName =\n            subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')) +\n            '_' +\n            Math.floor(timestamp) +\n            '.' +\n            extension;\n        return new Image(new Base64ImageData(imageName, base64, extension));\n    }\n\n    static fromFile(file: File, timestamp: number, maxWidth: number, maxHeight: number) {\n        return new Image(new FileImageData(file, timestamp, maxWidth, maxHeight));\n    }\n\n    get name() {\n        return this.data.name;\n    }\n\n    get extension() {\n        return this.data.extension;\n    }\n\n    async base64() {\n        return await this.data.base64();\n    }\n\n    async dataUrl() {\n        return await this.data.dataUrl();\n    }\n\n    async blob() {\n        return await this.data.blob();\n    }\n\n    async pngBlob() {\n        return new Promise<Blob>(async (resolve, reject) => {\n            try {\n                createImageBitmap(await this.blob()).then((bitMap) => {\n                    const canvas = document.createElement('canvas');\n                    canvas.width = bitMap.width;\n                    canvas.height = bitMap.height;\n                    canvas.getContext('2d')!.drawImage(bitMap, 0, 0);\n                    canvas.toBlob((blob) => {\n                        if (blob) {\n                            resolve(blob);\n                        } else {\n                            reject('Failed to convert to PNG');\n                        }\n                    }, 'image/png');\n                });\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    async download() {\n        const blob = await this.data.blob();\n        download(blob, this.data.name);\n    }\n}\n","export interface Fetcher {\n    fetch: (url: string, body: any) => Promise<any>;\n}\n\nexport class HttpFetcher implements Fetcher {\n    async fetch(url: string, body: any) {\n        const response = await fetch(url, {\n            method: 'POST',\n            body: JSON.stringify(body),\n        });\n        return await response.json();\n    }\n}\n","import AudioClip from './AudioClip';\nimport Image from './Image';\nimport { HttpFetcher, Fetcher } from './Fetcher';\nimport { AnkiSettings } from './Settings';\nimport sanitize from 'sanitize-filename';\n\nconst ankiQuerySpecialCharacters = ['\"', '*', '_', '\\\\', ':'];\n\nexport type AnkiExportMode = 'gui' | 'updateLast' | 'default';\n\nexport class Anki {\n    private readonly settingsProvider: AnkiSettings;\n    private readonly fetcher: Fetcher;\n\n    constructor(settingsProvider: AnkiSettings, fetcher = new HttpFetcher()) {\n        this.settingsProvider = settingsProvider;\n        this.fetcher = fetcher;\n    }\n\n    async deckNames(ankiConnectUrl?: string) {\n        const response = await this._executeAction('deckNames', null, ankiConnectUrl);\n        return response.result;\n    }\n\n    async modelNames(ankiConnectUrl?: string) {\n        const response = await this._executeAction('modelNames', null, ankiConnectUrl);\n        return response.result;\n    }\n\n    async modelFieldNames(modelName: string, ankiConnectUrl?: string) {\n        const response = await this._executeAction('modelFieldNames', { modelName: modelName }, ankiConnectUrl);\n        return response.result;\n    }\n\n    async findNotesWithWord(word: string, ankiConnectUrl?: string) {\n        const response = await this._executeAction(\n            'findNotes',\n            { query: this.settingsProvider.wordField + ':' + this._escapeQuery(word) },\n            ankiConnectUrl\n        );\n        return response.result;\n    }\n\n    async findNotesWithWordGui(word: string, ankiConnectUrl?: string) {\n        const response = await this._executeAction(\n            'guiBrowse',\n            { query: this.settingsProvider.wordField + ':' + this._escapeQuery(word) },\n            ankiConnectUrl\n        );\n        return response.result;\n    }\n\n    _escapeQuery(query: string) {\n        let escaped = '';\n\n        for (let i = 0; i < query.length; ++i) {\n            const char = query[i];\n            if (ankiQuerySpecialCharacters.includes(char)) {\n                escaped += `\\\\${char}`;\n            } else {\n                escaped += char;\n            }\n        }\n\n        return `\"${escaped}\"`;\n    }\n\n    async requestPermission(ankiConnectUrl?: string) {\n        const response = await this._executeAction('requestPermission', null, ankiConnectUrl);\n        return response.result;\n    }\n\n    async export(\n        text: string | undefined,\n        definition: string | undefined,\n        audioClip: AudioClip | undefined,\n        image: Image | undefined,\n        word: string | undefined,\n        source: string | undefined,\n        url: string | undefined,\n        customFieldValues: { [key: string]: string },\n        tags: string[],\n        mode: AnkiExportMode,\n        ankiConnectUrl?: string\n    ) {\n        const fields = {};\n\n        this._appendField(fields, this.settingsProvider.sentenceField, text, true);\n        this._appendField(fields, this.settingsProvider.definitionField, definition, true);\n        this._appendField(fields, this.settingsProvider.wordField, word, false);\n        this._appendField(fields, this.settingsProvider.sourceField, source, false);\n        this._appendField(fields, this.settingsProvider.urlField, url, false);\n\n        if (customFieldValues) {\n            for (const customFieldName of Object.keys(customFieldValues)) {\n                this._appendField(\n                    fields,\n                    this.settingsProvider.customAnkiFields[customFieldName],\n                    customFieldValues[customFieldName],\n                    true\n                );\n            }\n        }\n\n        const params: any = {\n            note: {\n                deckName: this.settingsProvider.deck,\n                modelName: this.settingsProvider.noteType,\n                tags: tags,\n                options: {\n                    allowDuplicate: false,\n                    duplicateScope: 'deck',\n                    duplicateScopeOptions: {\n                        deckName: this.settingsProvider.deck,\n                        checkChildren: false,\n                    },\n                },\n            },\n        };\n\n        const gui = mode === 'gui';\n        const updateLast = mode === 'updateLast';\n\n        if (this.settingsProvider.audioField && audioClip) {\n            const sanitizedName = this._sanitizeFileName(audioClip.name);\n\n            if (gui || updateLast) {\n                const fileName = (await this._storeMediaFile(sanitizedName, await audioClip.base64(), ankiConnectUrl))\n                    .result;\n                this._appendField(fields, this.settingsProvider.audioField, `[sound:${fileName}]`, false);\n            } else {\n                params.note['audio'] = {\n                    filename: sanitizedName,\n                    data: await audioClip.base64(),\n                    fields: [this.settingsProvider.audioField],\n                };\n            }\n        }\n\n        if (this.settingsProvider.imageField && image) {\n            const sanitizedName = this._sanitizeFileName(image.name);\n\n            if (gui || updateLast) {\n                const fileName = (await this._storeMediaFile(sanitizedName, await image.base64(), ankiConnectUrl))\n                    .result;\n                this._appendField(\n                    fields,\n                    this.settingsProvider.imageField,\n                    `<div><img src=\"${fileName}\"></div>`,\n                    false\n                );\n            } else {\n                params.note['picture'] = {\n                    filename: sanitizedName,\n                    data: await image.base64(),\n                    fields: [this.settingsProvider.imageField],\n                };\n            }\n        }\n\n        params.note['fields'] = fields;\n\n        switch (mode) {\n            case 'gui':\n                return (await this._executeAction('guiAddCards', params, ankiConnectUrl)).result;\n            case 'updateLast':\n                const recentNotes = (\n                    await this._executeAction('findNotes', { query: 'added:1' }, ankiConnectUrl)\n                ).result.sort();\n\n                if (recentNotes.length === 0) {\n                    throw new Error('Could not find note to update');\n                }\n\n                const lastNoteId = recentNotes[recentNotes.length - 1];\n                params.note['id'] = lastNoteId;\n                const infoResponse = await this._executeAction('notesInfo', { notes: [lastNoteId] });\n\n                if (infoResponse.result.length > 0 && infoResponse.result[0].noteId === lastNoteId) {\n                    const info = infoResponse.result[0];\n                    await this._executeAction('updateNoteFields', params, ankiConnectUrl);\n\n                    if (!this.settingsProvider.wordField || !info.fields) {\n                        return info.noteId;\n                    }\n\n                    const wordField = info.fields[this.settingsProvider.wordField];\n\n                    if (!wordField || !wordField.value) {\n                        return info.noteId;\n                    }\n\n                    return wordField.value;\n                }\n\n                throw new Error('Could not update last card because the card info could not be fetched');\n            case 'default':\n                return (await this._executeAction('addNote', params, ankiConnectUrl)).result;\n            default:\n                throw new Error('Unknown export mode: ' + mode);\n        }\n    }\n\n    _appendField(fields: any, fieldName: string | undefined, value: string | undefined, multiline: boolean) {\n        if (!fieldName || !value) {\n            return;\n        }\n\n        let newValue = multiline ? value.split('\\n').join('<br>') : value;\n        const existingValue = fields[fieldName];\n\n        if (existingValue) {\n            newValue = existingValue + '<br>' + newValue;\n        }\n\n        fields[fieldName] = newValue;\n    }\n\n    _sanitizeFileName(name: string) {\n        return sanitize(name, { replacement: '_' });\n    }\n\n    async _storeMediaFile(name: string, base64: string, ankiConnectUrl?: string) {\n        return this._executeAction('storeMediaFile', { filename: name, data: base64 }, ankiConnectUrl);\n    }\n\n    async _executeAction(action: string, params: any, ankiConnectUrl?: string) {\n        const body: any = {\n            action: action,\n            version: 6,\n        };\n\n        if (params) {\n            body['params'] = params;\n        }\n\n        const json = await this.fetcher.fetch(ankiConnectUrl || this.settingsProvider.ankiConnectUrl, body);\n\n        if (json.error) {\n            throw new Error(json.error);\n        }\n\n        return json;\n    }\n}\n","import IntervalTree, { Interval, NumericTuple } from '@flatten-js/interval-tree';\nimport { SubtitleModel } from './Model';\n\nexport interface SubtitleSlice<T> {\n    showing: T[];\n    lastShown?: T[];\n    nextToShow?: T[];\n    startedShowing?: T;\n    willStopShowing?: T;\n}\n\nexport interface SubtitleCollectionOptions {\n    returnLastShown?: boolean;\n    returnNextToShow?: boolean;\n    showingCheckRadiusMs?: number;\n}\n\nexport class SubtitleCollection<T extends SubtitleModel> {\n    static emptySubtitleCollection = new SubtitleCollection([]);\n\n    // Tree for subtitles\n    private readonly tree: IntervalTree<T>;\n    // Tree for gaps between subtitles. The gaps are populated with the last subtitle before the gap.\n    private readonly gapsTree?: IntervalTree<T>;\n    private readonly options: SubtitleCollectionOptions;\n\n    constructor(subtitles: T[], options: SubtitleCollectionOptions = {}) {\n        this.tree = new IntervalTree<T>();\n        this.options = options;\n\n        if (options.returnLastShown || options.returnNextToShow) {\n            let last: T | undefined;\n            this.gapsTree = new IntervalTree<T>();\n\n            if (subtitles.length > 0 && subtitles[0].start > 0) {\n                this.gapsTree.insert([0, subtitles[0].start - 1], subtitles[0]);\n            }\n\n            for (const s of subtitles) {\n                this.tree.insert([s.start, s.end], s);\n\n                if (last !== undefined && last.end < s.start) {\n                    this.gapsTree.insert([last.end + 1, s.start - 1], last);\n                }\n\n                last = s;\n            }\n        } else {\n            for (const s of subtitles) {\n                this.tree.insert([s.start, s.end], s);\n            }\n        }\n    }\n\n    static empty<S extends SubtitleModel>() {\n        return SubtitleCollection.emptySubtitleCollection as SubtitleCollection<S>;\n    }\n\n    subtitlesAt(timestamp: number): SubtitleSlice<T> {\n        const interval: NumericTuple = [timestamp, timestamp];\n        const showing = this.tree.search(interval) as T[];\n        let lastShown: T[] | undefined;\n        let nextToShow: T[] | undefined;\n        let startedShowing: T | undefined;\n        let willStopShowing: T | undefined;\n\n        if (showing.length === 0) {\n            if (this.gapsTree !== undefined) {\n                // One of returnLastShown or returnNextToShow is true due to constructor\n                const gapIntervals: Interval[] = [];\n                lastShown = this.gapsTree.search(interval, (s, i) => {\n                    gapIntervals.push(i);\n                    return s;\n                }) as T[];\n\n                if (lastShown.length > 0 && this.options.returnNextToShow) {\n                    const nextStart = gapIntervals[0].high + 1;\n                    nextToShow = this.tree.search([nextStart, nextStart]) as T[];\n                }\n            }\n        } else if (this.options.showingCheckRadiusMs !== undefined) {\n            for (const s of showing) {\n                if (willStopShowing === undefined && s.end < timestamp + this.options.showingCheckRadiusMs) {\n                    willStopShowing = s;\n                }\n\n                if (startedShowing === undefined && timestamp - this.options.showingCheckRadiusMs < s.start) {\n                    startedShowing = s;\n                }\n\n                if (startedShowing !== undefined && willStopShowing !== undefined) {\n                    break;\n                }\n            }\n        }\n\n        return { showing, lastShown, nextToShow, startedShowing, willStopShowing };\n    }\n}\n","import { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport MuiAlert, { Color } from '@material-ui/lab/Alert';\nimport Grow from '@material-ui/core/Grow';\n\nconst useAlertStyles = makeStyles({\n    root: {\n        display: 'flex',\n        justifyContent: 'center',\n        position: 'fixed',\n        top: 80,\n        width: '100%',\n        pointerEvents: 'none',\n        zIndex: 2000,\n    },\n});\n\ninterface Props {\n    open: boolean;\n    autoHideDuration: number;\n    onClose: () => void;\n    severity: Color | undefined;\n    children: React.ReactNode\n}\n\nexport default function Alert(props: Props) {\n    const classes = useAlertStyles();\n\n    useEffect(() => {\n        if (props.open) {\n            const timeout = setTimeout(props.onClose, props.autoHideDuration);\n            return () => clearTimeout(timeout);\n        }\n    }, [props.open, props.autoHideDuration, props.onClose]);\n\n    return (\n        <div className={classes.root}>\n            <Grow in={props.open}>\n                <MuiAlert severity={props.severity}>{props.children}</MuiAlert>\n            </Grow>\n        </div>\n    );\n}\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport { TextField, TextFieldProps } from \"@material-ui/core\";\n\nfunction extractTagsFromString(value: string) {\n    const splitTags = value.split(' ').join('').split(',');\n    const tags = [];\n\n    for (const tag of splitTags) {\n        tags.push(tag.trim());\n    }\n\n    return tags;\n}\n\nexport interface Props {\n    tags: string[];\n    onTagsChange: (tags: string[]) => void;\n}\n\nexport default function TagsTextField({tags, onTagsChange, ...props}: Props & TextFieldProps) {\n    const [value, setValue] = useState('');\n\n    useEffect(() => {\n        const tagsString = tags.join(', ');\n\n        if (tagsString !== value) {\n            setValue(tags.join(', '));\n        }\n    }, [value, tags]);\n\n    const handleChange = useCallback((e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        let currentValue = e.target.value;\n\n        if (\n            value.length > currentValue.length &&\n            value.includes(currentValue) &&\n            currentValue.endsWith(',')\n        ) {\n            // Detected a backspace at the last comma, move cursor back enough to remove the comma\n            currentValue = currentValue.substring(0, currentValue.length - 1);\n        }\n\n        // Decompose string into individual tags by removing all spaces and splitting on \",\"\n        const newTags = extractTagsFromString(currentValue);\n        setValue(newTags.join(', '));\n        onTagsChange(newTags);\n    }, [value, onTagsChange]);\n\n    return (\n        <TextField\n            {...props}\n            value={value}\n            onChange={handleChange}\n        />\n    );\n}\n","import React, { useEffect, useState, useLayoutEffect } from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport Card from '@material-ui/core/Card';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Dialog from '@material-ui/core/Dialog';\nimport { Image as CommonImage } from '@project/common';\n\ninterface ImageDimensions {\n    width: number;\n    height: number;\n}\n\nconst useStyles = makeStyles((theme) => ({\n    image: ({ width, height }: ImageDimensions) => ({\n        width: width,\n        height: height,\n        backgroundSize: 'contain',\n    }),\n}));\n\n// https://stackoverflow.com/questions/19014250/rerender-view-on-browser-resize-with-react\nfunction useWindowSize() {\n    const [size, setSize] = useState([0, 0]);\n\n    useLayoutEffect(() => {\n        function updateSize() {\n            setSize([window.innerWidth, window.innerHeight]);\n        }\n\n        window.addEventListener('resize', updateSize);\n        updateSize();\n\n        return () => window.removeEventListener('resize', updateSize);\n    }, []);\n\n    return size;\n}\n\ninterface Props {\n    open: boolean;\n    image?: CommonImage;\n    onClose: () => void;\n}\n\nexport default function ImageDialog({ open, image, onClose }: Props) {\n    const [dataUrl, setDataUrl] = useState<string>();\n    const [width, setWidth] = useState<number>(0);\n    const [height, setHeight] = useState<number>(0);\n    const [windowWidth, windowHeight] = useWindowSize();\n\n    let resizeRatio;\n\n    if (width > 0 && height > 0) {\n        resizeRatio = Math.min(1, Math.min(windowWidth / (2 * width), windowHeight / (2 * height)));\n    } else {\n        resizeRatio = 1;\n    }\n\n    const classes = useStyles({ width: width * resizeRatio, height: height * resizeRatio });\n\n    useEffect(() => {\n        setDataUrl(undefined);\n        async function fetchImage() {\n            if (!image) {\n                return;\n            }\n\n            const dataUrl = await image.dataUrl();\n            const img = new Image();\n            img.onload = () => {\n                setWidth(img.width);\n                setHeight(img.height);\n                setDataUrl(dataUrl);\n            };\n            img.src = dataUrl;\n        }\n\n        fetchImage();\n    }, [image]);\n\n    if (!image || !dataUrl) {\n        return null;\n    }\n\n    return (\n        <Dialog open={open} onClose={onClose} maxWidth=\"lg\">\n            <Card>\n                <CardMedia\n                    className={classes.image}\n                    image={dataUrl}\n                    title={image.name}\n                    style={{ width: width * resizeRatio, height: height * resizeRatio }}\n                />\n            </Card>\n        </Dialog>\n    );\n}\n","import React from 'react';\nimport { SubtitleModel } from '../..';\n\ninterface Props {\n    subtitle: SubtitleModel;\n    availableWidth: number;\n    scale: number;\n}\n\nexport default function SubtitleTextImage({ subtitle, availableWidth, scale }: Props) {\n    if (subtitle.textImage === undefined) {\n        return null;\n    }\n\n    const imageScale = (scale * availableWidth) / subtitle.textImage.screen.width;\n    const width = imageScale * subtitle.textImage.image.width;\n\n    return (\n        <div style={{ maxWidth: width }}>\n            <img style={{ width: '100%' }} alt=\"subtitle\" src={subtitle.textImage.dataUrl} />\n        </div>\n    );\n}\n","import React, { MutableRefObject, useCallback, useState, useEffect } from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport {\n    Anki,\n    AnkiDialogSliderContext,\n    AudioClip,\n    Image,\n    humanReadableTime,\n    AnkiSettings,\n    SubtitleModel,\n    surroundingSubtitles,\n} from '@project/common';\nimport Button from '@material-ui/core/Button';\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DoneIcon from '@material-ui/icons/Done';\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Paper from '@material-ui/core/Paper';\nimport RestoreIcon from '@material-ui/icons/Restore';\nimport SearchIcon from '@material-ui/icons/Search';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport Slider, { Mark } from '@material-ui/core/Slider';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport ZoomInIcon from '@material-ui/icons/ZoomIn';\nimport ZoomOutIcon from '@material-ui/icons/ZoomOut';\nimport SubtitleTextImage from './SubtitleTextImage';\nimport TagsTextField from './TagsTextField';\nimport { AnkiExportMode } from '@project/common';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& .MuiTextField-root': {\n            marginBottom: theme.spacing(1),\n        },\n    },\n    title: {\n        flexGrow: 1,\n    },\n    mediaField: {\n        cursor: 'pointer',\n        '& input': {\n            cursor: 'pointer',\n        },\n    },\n    rangeSelectSlider: {\n        '& .MuiSlider-markLabel': {\n            transform: 'translateX(-3%)',\n        },\n    },\n}));\n\nconst boundaryIntervalSubtitleCountRadius = 1;\nconst boundaryIntervalSubtitleTimeRadius = 5000;\n\nfunction boundaryIntervalFromSliderContext(sliderContext: AnkiDialogSliderContext) {\n    let index = sliderContext.subtitles.findIndex((s) => s.start === sliderContext.subtitleStart);\n    index = index === -1 ? sliderContext.subtitles.length / 2 : index;\n\n    const subtitlesToDisplay = surroundingSubtitles(\n        sliderContext.subtitles,\n        index,\n        boundaryIntervalSubtitleCountRadius,\n        boundaryIntervalSubtitleTimeRadius\n    );\n\n    let min = null;\n    let max = null;\n\n    for (const s of subtitlesToDisplay) {\n        if (min === null || s.start < min) {\n            min = s.start;\n        }\n\n        if (max === null || s.end > max) {\n            max = s.end;\n        }\n    }\n\n    return min !== null && max !== null && [min, max];\n}\n\nfunction sliderMarksFromSliderContext(sliderContext: AnkiDialogSliderContext, boundary: number[]): Mark[] {\n    const seenTimestamps: any = {};\n\n    return sliderContext.subtitles\n        .filter((s) => s.text.trim() !== '' || s.textImage !== undefined)\n        .map((s) => {\n            if (s.start in seenTimestamps) {\n                return null;\n            }\n\n            seenTimestamps[s.start] = true;\n\n            return {\n                value: s.start,\n                label: `${s.text.trim().substring(0, Math.min(s.text.length, 3))}...`,\n            };\n        })\n        .filter((mark: Mark | null) => mark !== null)\n        .filter((mark: Mark | null) => mark!.value >= boundary[0] && mark!.value <= boundary[1]) as Mark[];\n}\n\nfunction sliderValueLabelFormat(ms: number) {\n    return humanReadableTime(ms, true);\n}\n\nfunction subtitleIntersectsTimeInterval(subtitle: SubtitleModel, interval: number[]) {\n    const length = Math.max(0, subtitle.end - subtitle.start);\n\n    if (length === 0) {\n        return false;\n    }\n\n    const overlapStart = Math.max(subtitle.start, interval[0]);\n    const overlapEnd = Math.min(subtitle.end, interval[1]);\n\n    return overlapEnd - overlapStart >= length / 2;\n}\n\ninterface ValueLabelComponentProps {\n    children: React.ReactElement;\n    open: boolean;\n    value: number;\n}\n\nfunction ValueLabelComponent({ children, open, value }: ValueLabelComponentProps) {\n    return (\n        <Tooltip open={open} enterTouchDelay={0} placement=\"top\" title={value}>\n            {children}\n        </Tooltip>\n    );\n}\n\ninterface TextImageSetProps {\n    selectedSubtitles: SubtitleModel[];\n    width: number;\n}\n\nconst useTextImageSetStyles = makeStyles((theme) => ({\n    root: {\n        marginBottom: theme.spacing(1),\n        padding: theme.spacing(1),\n        backgroundColor: theme.palette.action.disabledBackground,\n    },\n}));\n\nfunction TextImageSet({ selectedSubtitles, width }: TextImageSetProps) {\n    const classes = useTextImageSetStyles();\n\n    if (selectedSubtitles.length === 0 || width <= 0) {\n        return null;\n    }\n\n    return (\n        <Paper elevation={0} className={classes.root}>\n            {selectedSubtitles.map((s, index) => {\n                return <SubtitleTextImage key={index} availableWidth={width} subtitle={s} scale={1} />;\n            })}\n        </Paper>\n    );\n}\n\nconst TextFieldEndAdornment = withStyles({\n    // Hack to recenter TextField end adornment\n    root: {\n        transform: 'translateY(-8px)',\n    },\n})(InputAdornment);\n\nexport interface AnkiDialogState {\n    text: string;\n    sliderContext?: AnkiDialogSliderContext;\n    definition: string;\n    word: string;\n    source: string;\n    url: string;\n    customFieldValues: { [key: string]: string };\n    lastAppliedTimestampIntervalToText?: number[];\n    lastAppliedTimestampIntervalToAudio?: number[];\n    initialTimestampInterval?: number[];\n    timestampBoundaryInterval?: number[];\n    timestampInterval?: number[];\n}\n\ninterface AnkiDialogProps {\n    open: boolean;\n    disabled: boolean;\n    text?: string;\n    onProceed: (\n        text: string,\n        definition: string,\n        audioClip: AudioClip | undefined,\n        image: Image | undefined,\n        word: string,\n        source: string,\n        url: string,\n        customFieldValues: { [key: string]: string },\n        tags: string[],\n        mode: AnkiExportMode\n    ) => void;\n    onRerecord?: () => void;\n    onRewind: () => void;\n    onCancel: () => void;\n    onViewImage: (image: Image) => void;\n    onOpenSettings?: () => void;\n    audioClip?: AudioClip;\n    image?: Image;\n    source?: string;\n    url?: string;\n    sliderContext?: AnkiDialogSliderContext;\n    settingsProvider: AnkiSettings;\n    anki: Anki;\n    definition?: string;\n    word?: string;\n    customFields: { [key: string]: string };\n    customFieldValues?: { [key: string]: string };\n    initialTimestampInterval?: number[];\n    timestampBoundaryInterval?: number[];\n    timestampInterval?: number[];\n    lastAppliedTimestampIntervalToText?: number[];\n    lastAppliedTimestampIntervalToAudio?: number[];\n    stateRef?: MutableRefObject<AnkiDialogState | undefined>;\n}\n\nexport function AnkiDialog({\n    open,\n    disabled,\n    text: initialText,\n    onProceed,\n    onRewind,\n    onCancel,\n    onViewImage,\n    onOpenSettings,\n    onRerecord,\n    audioClip: initialAudioClip,\n    image,\n    source: initialSource,\n    url: initialUrl,\n    sliderContext,\n    customFields,\n    settingsProvider,\n    anki,\n    definition: initialDefinition,\n    word: initialWord,\n    customFieldValues: initialCustomFieldValues,\n    timestampInterval: initialSelectedTimestampInterval,\n    timestampBoundaryInterval: forceTimestampBoundaryInterval,\n    initialTimestampInterval: forceInitialTimestampInterval,\n    lastAppliedTimestampIntervalToText: initialLastAppliedTimestampIntervalToText,\n    lastAppliedTimestampIntervalToAudio: initialLastAppliedTimestampIntervalToAudio,\n    stateRef,\n}: AnkiDialogProps) {\n    const classes = useStyles();\n    const [definition, setDefinition] = useState<string>('');\n    const [text, setText] = useState<string>('');\n    const [word, setWord] = useState<string>('');\n    const [lastSearchedWord, setLastSearchedWord] = useState<string>();\n    const [source, setSource] = useState<string>(initialSource ?? '');\n    const [tags, setTags] = useState<string[]>(settingsProvider.tags);\n    const [url, setUrl] = useState<string>(initialUrl ?? '');\n    const [duplicateNotes, setDuplicateNotes] = useState<any[]>([]);\n    const [wordTimestamp, setWordTimestamp] = useState<number>(0);\n    const [customFieldValues, setCustomFieldValues] = useState<{ [key: string]: string }>({});\n    const [timestampInterval, setTimestampInterval] = useState<number[]>();\n    const [selectedSubtitles, setSelectedSubtitles] = useState<SubtitleModel[]>([]);\n    const [initialTimestampInterval, setInitialTimestampInterval] = useState<number[]>();\n    const [initialTimestampBoundaryInterval, setInitialTimestampBoundaryInterval] = useState<number[]>();\n    const [timestampBoundaryInterval, setTimestampBoundaryInterval] = useState<number[]>();\n    const [timestampMarks, setTimestampMarks] = useState<Mark[]>();\n    const [lastAppliedTimestampIntervalToText, setLastAppliedTimestampIntervalToText] = useState<number[]>();\n    const [lastAppliedTimestampIntervalToAudio, setLastAppliedTimestampIntervalToAudio] = useState<number[]>();\n    const [width, setWidth] = useState<number>(0);\n    const [audioClip, setAudioClip] = useState<AudioClip>();\n    const dialogRefCallback = useCallback((element: HTMLElement) => {\n        setWidth(element?.getBoundingClientRect().width ?? 0);\n    }, []);\n\n    if (stateRef) {\n        stateRef.current = {\n            text,\n            sliderContext,\n            definition,\n            word,\n            source,\n            url,\n            customFieldValues,\n            initialTimestampInterval,\n            timestampBoundaryInterval,\n            lastAppliedTimestampIntervalToText,\n            lastAppliedTimestampIntervalToAudio,\n            timestampInterval,\n        };\n    }\n\n    const textForTimestampInterval = useCallback(\n        (timestampInterval: number[]) => {\n            return sliderContext!.subtitles\n                .filter((s) => subtitleIntersectsTimeInterval(s, timestampInterval))\n                .filter((s) => s.text.trim() !== '')\n                .map((s) => s.text)\n                .join('\\n');\n        },\n        [sliderContext]\n    );\n\n    useEffect(() => {\n        setText(initialText ?? '');\n        setDefinition(initialDefinition ?? '');\n        setWord(initialWord ?? '');\n        setSource(initialSource ?? '');\n        setUrl(initialUrl ?? '');\n        setDuplicateNotes([]);\n        setCustomFieldValues(initialCustomFieldValues ?? {});\n    }, [initialText, initialSource, initialDefinition, initialWord, initialCustomFieldValues, initialUrl]);\n\n    useEffect(() => {\n        setTags(settingsProvider.tags);\n    }, [settingsProvider.tags]);\n\n    useEffect(() => {\n        const timestampInterval =\n            initialSelectedTimestampInterval ||\n            (sliderContext && [sliderContext.subtitleStart, sliderContext.subtitleEnd]) ||\n            undefined;\n        const timestampBoundaryInterval =\n            (sliderContext && boundaryIntervalFromSliderContext(sliderContext)) || undefined;\n        const timestampMarks =\n            (sliderContext && sliderMarksFromSliderContext(sliderContext, timestampBoundaryInterval!)) || undefined;\n        const selectedSubtitles =\n            sliderContext === undefined || timestampInterval === undefined\n                ? []\n                : sliderContext.subtitles.filter((s) => subtitleIntersectsTimeInterval(s, timestampInterval));\n        setText(\n            initialText ??\n                selectedSubtitles\n                    .filter((s) => s.text.trim() !== '')\n                    .map((s) => s.text)\n                    .join('\\n')\n        );\n        setTimestampInterval(timestampInterval);\n        setSelectedSubtitles(selectedSubtitles);\n        setInitialTimestampInterval(forceInitialTimestampInterval || timestampInterval);\n        setLastAppliedTimestampIntervalToText(initialLastAppliedTimestampIntervalToText || timestampInterval);\n        setLastAppliedTimestampIntervalToAudio(initialLastAppliedTimestampIntervalToAudio || timestampInterval);\n        setTimestampBoundaryInterval(forceTimestampBoundaryInterval ?? timestampBoundaryInterval);\n        setInitialTimestampBoundaryInterval(timestampBoundaryInterval);\n        setTimestampMarks(timestampMarks);\n    }, [\n        sliderContext,\n        forceInitialTimestampInterval,\n        initialSelectedTimestampInterval,\n        forceTimestampBoundaryInterval,\n        initialLastAppliedTimestampIntervalToText,\n        initialLastAppliedTimestampIntervalToAudio,\n    ]);\n\n    useEffect(() => {\n        if (!initialAudioClip) {\n            setAudioClip(undefined);\n            return;\n        }\n\n        let newAudioClip = initialAudioClip;\n\n        if (settingsProvider.preferMp3) {\n            newAudioClip = newAudioClip.toMp3();\n        }\n\n        if (lastAppliedTimestampIntervalToAudio) {\n            newAudioClip = newAudioClip.slice(\n                Math.max(0, Math.round(lastAppliedTimestampIntervalToAudio[0]) - settingsProvider.audioPaddingStart),\n                Math.round(lastAppliedTimestampIntervalToAudio[1]) + settingsProvider.audioPaddingEnd\n            );\n        }\n\n        setAudioClip(newAudioClip);\n    }, [\n        initialAudioClip,\n        settingsProvider.preferMp3,\n        lastAppliedTimestampIntervalToAudio,\n        settingsProvider.audioPaddingStart,\n        settingsProvider.audioPaddingEnd,\n    ]);\n\n    useEffect(() => {\n        setWordTimestamp(Date.now());\n    }, [word]);\n\n    useEffect(() => {\n        if (!word || !settingsProvider.wordField) {\n            return;\n        }\n\n        const trimmedWord = word.trim();\n\n        if (trimmedWord === '' || trimmedWord === lastSearchedWord) {\n            return;\n        }\n\n        const timeout = setTimeout(async () => {\n            try {\n                setDuplicateNotes(await anki.findNotesWithWord(trimmedWord));\n                setLastSearchedWord(trimmedWord);\n            } catch (e) {\n                console.error(e);\n            }\n        }, 500);\n\n        return () => clearTimeout(timeout);\n    }, [word, wordTimestamp, lastSearchedWord, anki, settingsProvider.wordField]);\n\n    const handlePlayAudio = useCallback(\n        (e: React.MouseEvent<HTMLDivElement>) => {\n            e.preventDefault();\n            e.stopPropagation();\n            audioClip!.play();\n        },\n        [audioClip]\n    );\n\n    const handleCustomFieldChange = useCallback(\n        (customFieldName: string, value: string) => {\n            const newCustomFieldValues: { [fieldName: string]: string } = {};\n            Object.assign(newCustomFieldValues, customFieldValues);\n            newCustomFieldValues[customFieldName] = value;\n            setCustomFieldValues(newCustomFieldValues);\n        },\n        [customFieldValues]\n    );\n\n    let wordHelperText;\n\n    if (word && word.trim() === lastSearchedWord && settingsProvider.wordField) {\n        wordHelperText =\n            duplicateNotes.length > 0\n                ? `Found ${duplicateNotes.length} notes with word \"${word}\" in field \"${settingsProvider.wordField}\"`\n                : `No notes found with word \"${word.trim()}\" in field \"${settingsProvider.wordField}\"`;\n    } else {\n        wordHelperText = '';\n    }\n\n    const handleViewImage = useCallback(\n        (e: React.MouseEvent<HTMLDivElement>) => {\n            e.preventDefault();\n            e.stopPropagation();\n            onViewImage(image!);\n        },\n        [image, onViewImage]\n    );\n\n    const handleApplyTimestampIntervalToText = useCallback(() => {\n        if (timestampInterval === undefined) {\n            return;\n        }\n\n        const newText = textForTimestampInterval(timestampInterval);\n        setText(newText);\n        setLastAppliedTimestampIntervalToText(timestampInterval);\n    }, [textForTimestampInterval, timestampInterval]);\n\n    const handleTimestampIntervalChange = useCallback(\n        (e: React.ChangeEvent<{}>, newValue: number | number[]) => {\n            const newTimestampInterval = newValue as number[];\n            setTimestampInterval(newTimestampInterval);\n            const selectedSubtitles = sliderContext!.subtitles.filter((s) =>\n                subtitleIntersectsTimeInterval(s, newTimestampInterval)\n            );\n            setSelectedSubtitles(selectedSubtitles);\n\n            if (lastAppliedTimestampIntervalToText !== undefined) {\n                const expectedUnchangedText = textForTimestampInterval(lastAppliedTimestampIntervalToText);\n\n                if (text.trim() === expectedUnchangedText.trim()) {\n                    const newText = textForTimestampInterval(newTimestampInterval);\n                    setText(newText);\n                    setLastAppliedTimestampIntervalToText(newTimestampInterval);\n                }\n            }\n\n            if (onRerecord === undefined && audioClip?.isSliceable() === true) {\n                setLastAppliedTimestampIntervalToAudio(newTimestampInterval);\n            }\n        },\n        [sliderContext, text, lastAppliedTimestampIntervalToText, textForTimestampInterval]\n    );\n\n    const handleApplyTimestampIntervalToAudio = useCallback(\n        (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n            if (onRerecord) {\n                e.stopPropagation();\n                onRerecord();\n            } else {\n                setLastAppliedTimestampIntervalToAudio(timestampInterval);\n            }\n        },\n        [onRerecord, timestampInterval]\n    );\n\n    const handleResetTimestampInterval = useCallback(() => {\n        if (!initialTimestampBoundaryInterval) {\n            return;\n        }\n\n        const selectedSubtitles =\n            sliderContext === undefined || initialTimestampInterval === undefined\n                ? []\n                : sliderContext.subtitles.filter((s) => subtitleIntersectsTimeInterval(s, initialTimestampInterval));\n        setSelectedSubtitles(selectedSubtitles);\n        setTimestampInterval(initialTimestampInterval);\n        setTimestampBoundaryInterval(initialTimestampBoundaryInterval);\n        setTimestampMarks(\n            sliderContext && sliderMarksFromSliderContext(sliderContext, initialTimestampBoundaryInterval)\n        );\n    }, [initialTimestampInterval, initialTimestampBoundaryInterval, sliderContext]);\n\n    const handleZoomInTimestampInterval = useCallback(() => {\n        if (!timestampBoundaryInterval || !timestampInterval) {\n            return;\n        }\n\n        const newMin = (timestampBoundaryInterval[0] + timestampInterval[0]) / 2;\n        const newMax = (timestampBoundaryInterval[1] + timestampInterval[1]) / 2;\n        const newTimestampBoundaryInterval = [newMin, newMax];\n        setTimestampBoundaryInterval(newTimestampBoundaryInterval);\n        setTimestampMarks(sliderContext && sliderMarksFromSliderContext(sliderContext, newTimestampBoundaryInterval));\n    }, [timestampBoundaryInterval, timestampInterval, sliderContext]);\n\n    const handleZoomOutTimestampInterval = useCallback(() => {\n        if (!timestampBoundaryInterval || !timestampInterval) {\n            return;\n        }\n\n        const newMin = Math.max(0, 2 * timestampBoundaryInterval[0] - timestampInterval[0]);\n        const newMax = 2 * timestampBoundaryInterval[1] - timestampInterval[1];\n        const newTimestampBoundaryInterval = [newMin, newMax];\n        setTimestampBoundaryInterval(newTimestampBoundaryInterval);\n        setTimestampMarks(sliderContext && sliderMarksFromSliderContext(sliderContext, newTimestampBoundaryInterval));\n    }, [timestampBoundaryInterval, timestampInterval, sliderContext]);\n\n    const handleCopyImageToClipboard = useCallback(\n        async (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n            e.stopPropagation();\n\n            if (!image) {\n                return;\n            }\n\n            navigator.clipboard.write([new ClipboardItem({ 'image/png': await image.pngBlob() })]);\n        },\n        [image]\n    );\n\n    const disableApplyTextSelection =\n        !sliderContext || sliderContext.subtitles.filter((s) => s.text.trim() !== '').length === 0;\n\n    let audioActionElement: JSX.Element | undefined = undefined;\n\n    if (onRerecord !== undefined) {\n        audioActionElement = (\n            <Tooltip title=\"Apply Selection (rerecord)\">\n                <span>\n                    <IconButton\n                        disabled={\n                            !timestampInterval ||\n                            !lastAppliedTimestampIntervalToAudio ||\n                            (timestampInterval[0] === lastAppliedTimestampIntervalToAudio[0] &&\n                                timestampInterval[1] === lastAppliedTimestampIntervalToAudio[1])\n                        }\n                        onClick={handleApplyTimestampIntervalToAudio}\n                        edge=\"end\"\n                    >\n                        <FiberManualRecordIcon />\n                    </IconButton>\n                </span>\n            </Tooltip>\n        );\n    }\n\n    return (\n        <Dialog open={open} disableEnforceFocus fullWidth maxWidth=\"sm\" onClose={onCancel}>\n            <Toolbar>\n                <Typography variant=\"h6\" className={classes.title}>\n                    Anki Export\n                </Typography>\n                {onOpenSettings && (\n                    <IconButton edge=\"end\" onClick={() => onOpenSettings()}>\n                        <SettingsIcon />\n                    </IconButton>\n                )}\n            </Toolbar>\n            <DialogContent ref={dialogRefCallback}>\n                <form className={classes.root}>\n                    {sliderContext && timestampInterval && (\n                        <TextImageSet\n                            selectedSubtitles={selectedSubtitles.filter((s) => s.textImage !== undefined)}\n                            width={width}\n                        />\n                    )}\n                    <TextField\n                        variant=\"filled\"\n                        color=\"secondary\"\n                        multiline\n                        fullWidth\n                        maxRows={8}\n                        label=\"Sentence\"\n                        value={text}\n                        onChange={(e) => setText(e.target.value)}\n                        InputProps={{\n                            endAdornment: timestampInterval && (\n                                <TextFieldEndAdornment position=\"end\">\n                                    <Tooltip title=\"Apply Selection\">\n                                        <span>\n                                            <IconButton\n                                                disabled={\n                                                    !timestampInterval ||\n                                                    !lastAppliedTimestampIntervalToText ||\n                                                    (timestampInterval[0] === lastAppliedTimestampIntervalToText[0] &&\n                                                        timestampInterval[1] ===\n                                                            lastAppliedTimestampIntervalToText[1]) ||\n                                                    disableApplyTextSelection\n                                                }\n                                                onClick={handleApplyTimestampIntervalToText}\n                                                edge=\"end\"\n                                            >\n                                                <DoneIcon />\n                                            </IconButton>\n                                        </span>\n                                    </Tooltip>\n                                </TextFieldEndAdornment>\n                            ),\n                        }}\n                    />\n                    <TextField\n                        variant=\"filled\"\n                        color=\"secondary\"\n                        multiline\n                        fullWidth\n                        rows={8}\n                        label=\"Definition\"\n                        value={definition}\n                        onChange={(e) => setDefinition(e.target.value)}\n                    />\n                    <TextField\n                        variant=\"filled\"\n                        color=\"secondary\"\n                        fullWidth\n                        label=\"Word\"\n                        value={word}\n                        onChange={(e) => setWord(e.target.value)}\n                        helperText={wordHelperText}\n                        InputProps={{\n                            endAdornment: (\n                                <InputAdornment position=\"end\">\n                                    <Tooltip title=\"Search in Anki\">\n                                        <span>\n                                            <IconButton\n                                                disabled={\n                                                    disabled ||\n                                                    !settingsProvider.wordField ||\n                                                    !word ||\n                                                    word.trim() === ''\n                                                }\n                                                onClick={() => anki.findNotesWithWordGui(word.trim())}\n                                                edge=\"end\"\n                                            >\n                                                <SearchIcon />\n                                            </IconButton>\n                                        </span>\n                                    </Tooltip>\n                                </InputAdornment>\n                            ),\n                        }}\n                    />\n                    {Object.keys(customFields).map((customFieldName) => (\n                        <TextField\n                            key={customFieldName}\n                            variant=\"filled\"\n                            color=\"secondary\"\n                            fullWidth\n                            multiline\n                            maxRows={8}\n                            label={customFieldName}\n                            value={customFieldValues[customFieldName] || ''}\n                            onChange={(e) => handleCustomFieldChange(customFieldName, e.target.value)}\n                        />\n                    ))}\n                    {audioClip && (\n                        <div className={classes.mediaField} onClick={handlePlayAudio}>\n                            <TextField\n                                variant=\"filled\"\n                                color=\"secondary\"\n                                fullWidth\n                                value={audioClip.name}\n                                label=\"Audio\"\n                                helperText={\n                                    onRerecord === undefined &&\n                                    !audioClip.isSliceable() &&\n                                    'Audio clip cannot be updated because it is pre-recorded'\n                                }\n                                InputProps={{\n                                    endAdornment: audioActionElement && timestampInterval && (\n                                        <InputAdornment position=\"end\">{audioActionElement}</InputAdornment>\n                                    ),\n                                }}\n                            />\n                        </div>\n                    )}\n                    {image && (\n                        <div className={classes.mediaField} onClick={handleViewImage}>\n                            <TextField\n                                variant=\"filled\"\n                                color=\"secondary\"\n                                fullWidth\n                                value={image.name}\n                                label=\"Image\"\n                                InputProps={{\n                                    endAdornment: (\n                                        <InputAdornment position=\"end\">\n                                            <Tooltip title=\"Copy to Clipboard\">\n                                                <span>\n                                                    <IconButton onClick={handleCopyImageToClipboard} edge=\"end\">\n                                                        <FileCopyIcon />\n                                                    </IconButton>\n                                                </span>\n                                            </Tooltip>\n                                        </InputAdornment>\n                                    ),\n                                }}\n                            />\n                        </div>\n                    )}\n                    <TextField\n                        variant=\"filled\"\n                        color=\"secondary\"\n                        fullWidth\n                        label=\"Source\"\n                        value={source}\n                        onChange={(e) => setSource(e.target.value)}\n                    />\n                    {initialUrl && (\n                        <TextField\n                            variant=\"filled\"\n                            color=\"secondary\"\n                            fullWidth\n                            label=\"URL\"\n                            value={url}\n                            onChange={(e) => setUrl(e.target.value)}\n                        />\n                    )}\n                    {settingsProvider.tags.length > 0 && (\n                        <TagsTextField\n                            variant=\"filled\"\n                            label=\"Tags\"\n                            helperText=\"Comma-separated list of strings\"\n                            fullWidth\n                            color=\"secondary\"\n                            tags={tags}\n                            onTagsChange={(newTags) => setTags(newTags)}\n                        />\n                    )}\n                    {timestampInterval && timestampBoundaryInterval && timestampMarks && (\n                        <Grid container direction=\"row\">\n                            <Grid item style={{ flexGrow: 1 }}>\n                                <Slider\n                                    ValueLabelComponent={ValueLabelComponent}\n                                    value={timestampInterval}\n                                    valueLabelFormat={sliderValueLabelFormat}\n                                    onChange={handleTimestampIntervalChange}\n                                    min={timestampBoundaryInterval[0]}\n                                    max={timestampBoundaryInterval[1]}\n                                    marks={timestampMarks}\n                                    step={1}\n                                    valueLabelDisplay=\"auto\"\n                                    className={classes.rangeSelectSlider}\n                                    color=\"secondary\"\n                                />\n                            </Grid>\n                            <Grid item>\n                                <Tooltip title=\"Reset\">\n                                    <span>\n                                        <IconButton\n                                            edge=\"end\"\n                                            style={{ marginTop: -8 }}\n                                            onClick={handleResetTimestampInterval}\n                                        >\n                                            <RestoreIcon />\n                                        </IconButton>\n                                    </span>\n                                </Tooltip>\n                            </Grid>\n                            <Grid item>\n                                <Tooltip title=\"Zoom In\">\n                                    <span>\n                                        <IconButton\n                                            edge=\"end\"\n                                            style={{ marginTop: -8 }}\n                                            onClick={handleZoomInTimestampInterval}\n                                        >\n                                            <ZoomInIcon />\n                                        </IconButton>\n                                    </span>\n                                </Tooltip>\n                            </Grid>\n                            <Grid item>\n                                <Tooltip title=\"Zoom Out\">\n                                    <span>\n                                        <IconButton\n                                            edge=\"end\"\n                                            style={{ marginTop: -8 }}\n                                            onClick={handleZoomOutTimestampInterval}\n                                        >\n                                            <ZoomOutIcon />\n                                        </IconButton>\n                                    </span>\n                                </Tooltip>\n                            </Grid>\n                        </Grid>\n                    )}\n                </form>\n            </DialogContent>\n            <DialogActions>\n                <Button disabled={disabled} onClick={() => onCancel()}>\n                    Cancel\n                </Button>\n                {sliderContext && (\n                    <Button disabled={disabled} onClick={() => onRewind()}>\n                        Rewind\n                    </Button>\n                )}\n                <Button\n                    disabled={disabled}\n                    onClick={() =>\n                        onProceed(\n                            text,\n                            definition,\n                            audioClip,\n                            image,\n                            word,\n                            source ?? '',\n                            url ?? '',\n                            customFieldValues,\n                            tags,\n                            'gui'\n                        )\n                    }\n                >\n                    Open in Anki\n                </Button>\n                <Button\n                    disabled={disabled}\n                    onClick={() =>\n                        onProceed(\n                            text,\n                            definition,\n                            audioClip,\n                            image,\n                            word,\n                            source ?? '',\n                            url ?? '',\n                            customFieldValues,\n                            tags,\n                            'updateLast'\n                        )\n                    }\n                >\n                    Update Last Card\n                </Button>\n                <Button\n                    disabled={disabled}\n                    onClick={() =>\n                        onProceed(\n                            text,\n                            definition,\n                            audioClip,\n                            image,\n                            word,\n                            source ?? '',\n                            url ?? '',\n                            customFieldValues,\n                            tags,\n                            'default'\n                        )\n                    }\n                >\n                    Export\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n","export default __webpack_public_path__ + \"static/media/background-colored.cbc50e45.png\";","import { makeStyles } from '@material-ui/styles';\nimport Fade from '@material-ui/core/Fade';\nimport coloredBackground from './background-colored.png';\nimport { Theme } from '@material-ui/core';\n\ninterface StylesProps {\n    dragging: boolean;\n    appBarHidden: boolean;\n}\n\ninterface Props {\n    dragging: boolean;\n    appBarHidden: boolean;\n    loading: boolean;\n}\n\nconst useStyles = makeStyles<Theme, StylesProps>((theme) => ({\n    root: ({ dragging, appBarHidden }) => ({\n        position: 'absolute',\n        height: appBarHidden ? '100%' : 'calc(100% - 64px)',\n        width: '100%',\n        zIndex: 101,\n        pointerEvents: dragging ? 'auto' : 'none',\n    }),\n    transparentBackground: ({ appBarHidden }) => ({\n        '&::before': {\n            content: \"' '\",\n            position: 'absolute',\n            height: appBarHidden ? '100vh' : 'calc(100vh - 64px)',\n            width: '100%',\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            alignItems: 'center',\n            textAlign: 'center',\n            backgroundSize: '300px 300px',\n            backgroundRepeat: 'no-repeat',\n            backgroundPosition: 'center',\n            backgroundImage: `url(${coloredBackground})`,\n            backgroundBlendMode: 'overlay',\n            background: 'rgba(0, 0, 0, .3)',\n            filter: 'drop-shadow(10px 10px 10px rgb(0, 0, 0, .4))',\n        },\n        width: '100%',\n        height: '100%',\n    }),\n}));\n\nexport default function DragOverlay({ dragging, appBarHidden, loading }: Props) {\n    const classes = useStyles({ dragging, appBarHidden });\n\n    return (\n        <div className={classes.root}>\n            <Fade in={dragging || loading}>\n                <div className={classes.transparentBackground} />\n            </Fade>\n        </div>\n    );\n}\n","import { compile as parseAss } from 'ass-compiler';\nimport { Cue, Node, parseSync as parseSrt, stringifySync as writeSrt } from 'subtitle';\nimport { WebVTT } from 'vtt.js';\nimport { XMLParser } from 'fast-xml-parser';\nimport { DisplaySet, parseDisplaySets } from 'pgs-parser';\nimport { SubtitleTextImage } from '@project/common';\n\nconst tagRegex = RegExp('</?([^>]*)>', 'ig');\nconst assNewLineRegex = RegExp(/\\\\[nN]/, 'ig');\nconst helperElement = document.createElement('div');\nconst helperCanvas = document.createElement('canvas');\n\ninterface SubtitleNode {\n    start: number;\n    end: number;\n    text: string;\n    textImage?: SubtitleTextImage;\n    track: number;\n}\n\nexport default class SubtitleReader {\n    private xmlParser?: XMLParser;\n\n    async subtitles(files: File[]) {\n        return (await Promise.all(files.map((f, i) => this._subtitles(f, i))))\n            .flatMap((nodes) => nodes)\n            .sort((n1, n2) => n1.start - n2.start);\n    }\n\n    async _subtitles(file: File, track: number): Promise<SubtitleNode[]> {\n        if (file.name.endsWith('.srt')) {\n            const nodes = parseSrt(await file.text());\n            return nodes\n                .filter((node) => node.type === 'cue')\n                .map((node) => {\n                    const cue = node.data as Cue;\n                    return {\n                        start: cue.start,\n                        end: cue.end,\n                        text: cue.text.replace(tagRegex, ''),\n                        track: track,\n                    };\n                });\n        }\n\n        if (file.name.endsWith('.vtt') || file.name.endsWith('.nfvtt')) {\n            return new Promise(async (resolve, reject) => {\n                const isFromNetflix = file.name.endsWith('.nfvtt');\n                const parser = new WebVTT.Parser(window, WebVTT.StringDecoder());\n                const cues: any[] = [];\n                parser.oncue = (c: any) => {\n                    c.text = c.text.replace(tagRegex, '');\n\n                    if (isFromNetflix) {\n                        const lines = c.text.split('\\n');\n                        const newLines = [];\n\n                        for (const line of lines) {\n                            newLines.push(this._fixRTL(line));\n                        }\n\n                        c.text = newLines.join('\\n');\n                    }\n                    cues.push(c);\n                };\n                parser.onflush = () =>\n                    resolve(\n                        cues.map((c) => ({\n                            start: Math.floor(c.startTime * 1000),\n                            end: Math.floor(c.endTime * 1000),\n                            text: c.text as string,\n                            track: track,\n                        }))\n                    );\n                parser.parse(await file.text());\n                parser.flush();\n            });\n        }\n\n        if (file.name.endsWith('.ass')) {\n            const nodes = parseAss(await file.text(), {});\n            return nodes.dialogues.map((dialogue) => {\n                return {\n                    start: Math.round(dialogue.start * 1000),\n                    end: Math.round(dialogue.end * 1000),\n                    text: dialogue.slices\n                        .flatMap((slice) => slice.fragments.map((fragment) => fragment.text))\n                        .join('')\n                        .replace(assNewLineRegex, '\\n'),\n                    track: track,\n                };\n            });\n        }\n\n        if (file.name.endsWith('.ytxml')) {\n            const text = await file.text();\n            const xml = this._xmlParser().parse(text);\n\n            if (Object.keys(xml).length === 0) {\n                return [];\n            }\n\n            const textNodes = xml['transcript']['text'];\n            const subtitles = [];\n\n            for (let index = 0, length = textNodes.length; index < length; index++) {\n                const elm = textNodes[index];\n\n                if (!('#text' in elm) || !('@_dur' in elm) || !('@_start' in elm)) {\n                    continue;\n                }\n\n                const start = parseFloat(elm['@_start']);\n\n                subtitles.push({\n                    start: Math.floor(start * 1000),\n                    end: Math.floor((start + parseFloat(elm['@_dur'])) * 1000),\n                    text: this._decodeHTML(String(elm['#text']).replace(tagRegex, '')),\n                    track,\n                });\n            }\n\n            return subtitles;\n        }\n\n        if (file.name.endsWith('.sup')) {\n            const subtitles: SubtitleNode[] = [];\n            await file\n                .stream()\n                // FIXME: Figure out how to remove conflicts with @types/node ReadableStream\n                // @ts-ignore\n                .pipeThrough(parseDisplaySets())\n                .pipeTo(this._displaySetsToSubtitles(subtitles, track));\n\n            return subtitles;\n        }\n\n        throw new Error('Unsupported subtitle file format');\n    }\n\n    private _displaySetsToSubtitles(subtitles: SubtitleNode[], track: number) {\n        let imageDataArray: Uint8ClampedArray | undefined;\n        let currentImageDisplaySet: DisplaySet | undefined;\n\n        return new WritableStream<DisplaySet>({\n            write(displaySet, controller) {\n                if (displaySet.objectDefinitionSegments.length > 0) {\n                    if (currentImageDisplaySet === undefined) {\n                        currentImageDisplaySet = displaySet;\n                    }\n                } else if (currentImageDisplaySet !== undefined) {\n                    const screenWidth = currentImageDisplaySet.presentationCompositionSegment.width;\n                    const screenHeight = currentImageDisplaySet.presentationCompositionSegment.height;\n                    imageDataArray =\n                        imageDataArray === undefined || imageDataArray.length < screenHeight * screenWidth * 4\n                            ? new Uint8ClampedArray(screenWidth * screenHeight * 4)\n                            : imageDataArray;\n                    const imageData = currentImageDisplaySet.imageData(imageDataArray);\n                    helperCanvas.width = imageData.width;\n                    helperCanvas.height = imageData.height;\n                    const context = helperCanvas.getContext('2d')!;\n                    context.putImageData(imageData, 0, 0);\n                    subtitles.push({\n                        start:\n                            currentImageDisplaySet.objectDefinitionSegments[0].header.presentationTimestamp / 90 ?? 0,\n                        end: displaySet.endDefinitionSegment.header.presentationTimestamp / 90,\n                        text: '',\n                        textImage: {\n                            dataUrl: helperCanvas.toDataURL('image/png'),\n                            image: {\n                                width: imageData.width,\n                                height: imageData.height,\n                            },\n                            screen: {\n                                width: currentImageDisplaySet.presentationCompositionSegment.width,\n                                height: currentImageDisplaySet.presentationCompositionSegment.height,\n                            },\n                        },\n                        track,\n                    });\n\n                    currentImageDisplaySet = undefined;\n                }\n            },\n        });\n    }\n\n    private _fixRTL(line: string): string {\n        const index1 = line.indexOf('&lrm;');\n        const index2 = line.indexOf('&rlm;');\n        let newLine = '';\n\n        if (index1 > -1) {\n            newLine = line.substring(0, index1) + '\\u202a' + line.substring(index1 + 5) + '\\u202c';\n            return this._fixRTL(newLine);\n        } else if (index2 > -1) {\n            newLine = line.substring(0, index2) + '\\u202b' + line.substring(index2 + 5) + '\\u202c';\n            return this._fixRTL(newLine);\n        }\n\n        return line;\n    }\n\n    private _decodeHTML(text: string): string {\n        helperElement.innerHTML = text;\n        return helperElement.childNodes.length === 0 ? '' : helperElement.childNodes[0].nodeValue!;\n    }\n\n    private _xmlParser() {\n        if (this.xmlParser === undefined) {\n            this.xmlParser = new XMLParser({ ignoreAttributes: false });\n        }\n\n        return this.xmlParser;\n    }\n\n    subtitlesToSrt(subtitles: SubtitleNode[]) {\n        const nodes: Node[] = subtitles.map((subtitleNode) => {\n            return {\n                type: 'cue',\n                data: {\n                    start: subtitleNode.start,\n                    end: subtitleNode.end,\n                    text: subtitleNode.text,\n                },\n            };\n        });\n        return writeSrt(nodes, { format: 'SRT' });\n    }\n\n    async filesToSrt(files: File[]) {\n        return this.subtitlesToSrt(await this.subtitles(files));\n    }\n}\n","import { makeStyles, Theme } from '@material-ui/core/styles';\nimport clsx from 'clsx';\nimport AppBar from '@material-ui/core/AppBar';\nimport BugReportIcon from '@material-ui/icons/BugReport';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport HelpIcon from '@material-ui/icons/Help';\nimport FolderIcon from '@material-ui/icons/Folder';\nimport IconButton from '@material-ui/core/IconButton';\nimport ListIcon from '@material-ui/icons/List';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Tooltip, { TooltipProps } from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Popover from '@material-ui/core/Popover';\nimport { useCallback, useState } from 'react';\n\ninterface BarProps {\n    drawerWidth: number;\n    drawerOpen: boolean;\n    hidden: boolean;\n    title: string;\n    subtitleFiles?: File[];\n    onFileSelector: () => void;\n    onDownloadSubtitleFilesAsSrt: () => void;\n    onOpenSettings: () => void;\n    onOpenCopyHistory: () => void;\n}\n\ninterface StyleProps {\n    drawerWidth: number;\n}\n\nconst useStyles = makeStyles<Theme, StyleProps, string>((theme) => ({\n    title: {\n        flexGrow: 1,\n    },\n    leftButton: {\n        marginRight: theme.spacing(1),\n    },\n    appBar: {\n        transition: theme.transitions.create(['margin', 'width'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n    },\n    appBarShift: {\n        width: ({ drawerWidth }) => `calc(100% - ${drawerWidth}px)`,\n        transition: theme.transitions.create(['margin', 'width'], {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n        marginRight: ({ drawerWidth }) => drawerWidth,\n    },\n    copyHistoryButton: {\n        transform: 'scaleX(1)',\n        width: 48,\n        padding: 12,\n        transition: theme.transitions.create(['transform', 'padding', 'width'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n    },\n    copyHistoryButtonShift: {\n        transform: 'scaleX(0)',\n        width: 0,\n        padding: 5,\n        transition: theme.transitions.create(['transform', 'padding', 'width'], {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    hide: {\n        display: 'none',\n    },\n}));\n\ninterface CopyHistoryTooltipStylesProps {\n    show: boolean;\n}\n\ninterface CopyHistoryTooltipProps extends TooltipProps {\n    show: boolean;\n}\n\nconst useCopyHistoryTooltipStyles = makeStyles<Theme, CopyHistoryTooltipStylesProps, string>((theme) => ({\n    tooltip: ({ show }) => ({\n        display: show ? 'block' : 'none',\n    }),\n}));\n\nfunction CopyHistoryTooltip({ show, ...toolTipProps }: CopyHistoryTooltipProps) {\n    const classes = useCopyHistoryTooltipStyles({ show: show });\n    return <Tooltip classes={classes} {...toolTipProps} />;\n}\n\nexport default function Bar({\n    drawerWidth,\n    drawerOpen,\n    hidden,\n    title,\n    subtitleFiles,\n    onOpenSettings,\n    onOpenCopyHistory,\n    onFileSelector,\n    onDownloadSubtitleFilesAsSrt,\n}: BarProps) {\n    const classes = useStyles({ drawerWidth });\n    const [menuOpen, setMenuOpen] = useState<boolean>(false);\n    const [menuAnchorEl, setMenuAnchorEl] = useState<HTMLElement>();\n    const canSaveAsSrt =\n        subtitleFiles !== undefined && subtitleFiles.find((f) => !f.name.endsWith('.sup')) !== undefined;\n\n    const handleFileAction = useCallback(\n        (event: React.MouseEvent<HTMLButtonElement>) => {\n            if (canSaveAsSrt) {\n                setMenuAnchorEl(event.currentTarget);\n                setMenuOpen(true);\n            } else {\n                onFileSelector();\n            }\n        },\n        [onFileSelector, canSaveAsSrt]\n    );\n\n    const handleMenuClose = useCallback(() => {\n        setMenuOpen(false);\n    }, []);\n\n    const handleOpenFilesFromMenu = useCallback(() => {\n        setMenuOpen(false);\n        onFileSelector();\n    }, [onFileSelector]);\n\n    const handleDownloadSubtitleFilesAsSrt = useCallback(() => {\n        setMenuOpen(false);\n        onDownloadSubtitleFilesAsSrt();\n    }, [onDownloadSubtitleFilesAsSrt]);\n\n    return (\n        <>\n            {canSaveAsSrt && (\n                <Popover\n                    open={menuOpen}\n                    anchorEl={menuAnchorEl}\n                    onClose={handleMenuClose}\n                    anchorOrigin={{\n                        vertical: 'bottom',\n                        horizontal: 'center',\n                    }}\n                >\n                    <List>\n                        <ListItem button onClick={handleOpenFilesFromMenu}>\n                            Open Files\n                        </ListItem>\n                        <ListItem button onClick={handleDownloadSubtitleFilesAsSrt}>\n                            Download Subtitles as SRT\n                        </ListItem>\n                    </List>\n                </Popover>\n            )}\n            <AppBar\n                position=\"static\"\n                elevation={0}\n                className={clsx(classes.appBar, {\n                    [classes.appBarShift]: drawerOpen,\n                    [classes.hide]: hidden,\n                })}\n            >\n                <Toolbar>\n                    <Tooltip\n                        disableFocusListener={canSaveAsSrt}\n                        disableHoverListener={canSaveAsSrt}\n                        disableTouchListener={canSaveAsSrt}\n                        title=\"Open Files\"\n                    >\n                        <IconButton\n                            edge=\"start\"\n                            color=\"inherit\"\n                            className={classes.leftButton}\n                            onClick={handleFileAction}\n                        >\n                            <FolderIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        {title}\n                    </Typography>\n                    <Tooltip title=\"Donate\">\n                        <IconButton\n                            edge=\"end\"\n                            color=\"inherit\"\n                            component=\"a\"\n                            href=\"https://github.com/killergerbah/asbplayer#supporters\"\n                            target=\"_blank\"\n                            rel=\"noreferrer\"\n                        >\n                            <FavoriteIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title=\"Submit Issue\">\n                        <IconButton\n                            edge=\"end\"\n                            color=\"inherit\"\n                            component=\"a\"\n                            href=\"https://github.com/killergerbah/asbplayer/issues\"\n                            target=\"_blank\"\n                            rel=\"noreferrer\"\n                        >\n                            <BugReportIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title=\"Help\">\n                        <IconButton\n                            edge=\"end\"\n                            color=\"inherit\"\n                            component=\"a\"\n                            href=\"https://github.com/killergerbah/asbplayer#usage\"\n                            target=\"_blank\"\n                            rel=\"noreferrer\"\n                        >\n                            <HelpIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title=\"Settings\">\n                        <IconButton edge=\"end\" color=\"inherit\" onClick={onOpenSettings}>\n                            <SettingsIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <CopyHistoryTooltip title=\"Mining History\" show={!drawerOpen}>\n                        <IconButton\n                            edge=\"end\"\n                            color=\"inherit\"\n                            aria-label=\"menu\"\n                            className={clsx(classes.copyHistoryButton, {\n                                [classes.copyHistoryButtonShift]: drawerOpen,\n                            })}\n                            onClick={onOpenCopyHistory}\n                        >\n                            <ListIcon />\n                        </IconButton>\n                    </CopyHistoryTooltip>\n                </Toolbar>\n            </AppBar>\n        </>\n    );\n}\n","import { Rgb } from '@project/common';\n\nexport function arrayEquals(a: any[], b: any[], equals = (a: any, b: any) => a === b) {\n    if (a.length !== b.length) {\n        return false;\n    }\n\n    for (let i = 0; i < a.length; ++i) {\n        if (!equals(a[i], b[i])) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nexport function keysAreEqual(a: any, b: any) {\n    for (let key in a) {\n        if (!(key in b)) {\n            return false;\n        }\n    }\n\n    for (let key in b) {\n        if (!(key in a)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n// https://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb\nfunction hexToRgb(hex: string): Rgb {\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)!;\n    return {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16),\n    };\n}\n\ninterface SubtitleStyle {\n    subtitleColor: string;\n    subtitleSize: number;\n    subtitleOutlineThickness: number;\n    subtitleOutlineColor: string;\n    subtitleBackgroundOpacity: number;\n    subtitleBackgroundColor: string;\n    subtitleFontFamily: string;\n}\n\nexport function computeStyles({\n    subtitleColor,\n    subtitleSize,\n    subtitleOutlineThickness,\n    subtitleOutlineColor,\n    subtitleBackgroundOpacity,\n    subtitleBackgroundColor,\n    subtitleFontFamily,\n}: SubtitleStyle) {\n    const styles: any = {\n        color: subtitleColor,\n        fontSize: Number(subtitleSize),\n    };\n\n    if (subtitleOutlineThickness > 0) {\n        const thickness = subtitleOutlineThickness;\n        const color = subtitleOutlineColor;\n        styles[\n            'textShadow'\n        ] = `0 0 ${thickness}px ${color}, 0 0 ${thickness}px ${color}, 0 0 ${thickness}px ${color}, 0 0 ${thickness}px ${color}`;\n    }\n\n    if (subtitleBackgroundOpacity > 0) {\n        const opacity = subtitleBackgroundOpacity;\n        const color = subtitleBackgroundColor;\n        const { r, g, b } = hexToRgb(color);\n        styles['backgroundColor'] = `rgba(${r}, ${g}, ${b}, ${opacity})`;\n    }\n\n    if (subtitleFontFamily && subtitleFontFamily.length > 0) {\n        styles['fontFamily'] = subtitleFontFamily;\n    }\n\n    return styles;\n}\n\nexport function timeDurationDisplay(\n    milliseconds: number,\n    totalMilliseconds: number,\n    includeMilliseconds = true\n): string {\n    if (milliseconds < 0) {\n        return timeDurationDisplay(0, totalMilliseconds);\n    }\n\n    milliseconds = Math.round(milliseconds);\n    const ms = milliseconds % 1000;\n    milliseconds = (milliseconds - ms) / 1000;\n    const secs = milliseconds % 60;\n    milliseconds = (milliseconds - secs) / 60;\n    const mins = milliseconds % 60;\n\n    if (totalMilliseconds >= 3600000) {\n        const hrs = (milliseconds - mins) / 60;\n\n        if (includeMilliseconds) {\n            return pad(hrs) + ':' + pad(mins) + ':' + pad(secs) + '.' + pad(ms, 3);\n        }\n\n        return pad(hrs) + ':' + pad(mins) + ':' + pad(secs);\n    }\n\n    if (includeMilliseconds) {\n        return pad(mins) + ':' + pad(secs) + '.' + pad(ms, 3);\n    }\n\n    return pad(mins) + ':' + pad(secs);\n}\n\nfunction pad(n: number, zeros: number = 2) {\n    return String(n).padStart(zeros, '0');\n}\n","import React, { useCallback, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { timeDurationDisplay } from '../services/util';\nimport { ListItemSecondaryAction, Theme } from '@material-ui/core';\nimport Divider from '@material-ui/core/Divider';\nimport Drawer from '@material-ui/core/Drawer';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Popover from '@material-ui/core/Popover';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport StarIcon from '@material-ui/icons/Star';\nimport SaveAltIcon from '@material-ui/icons/SaveAlt';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport { AudioModel, ImageModel, SubtitleModel } from '@project/common';\n\nexport interface CopyHistoryItem extends SubtitleModel {\n    name: string;\n    id: string;\n    timestamp: number;\n    surroundingSubtitles: SubtitleModel[];\n    audioFile?: File;\n    audioTrack?: string;\n    videoFile?: File;\n    filePlaybackRate?: number;\n    subtitleFile?: File;\n    mediaTimestamp?: number;\n    audio?: AudioModel;\n    image?: ImageModel;\n    url?: string;\n}\n\ninterface CopyHistoryProps {\n    open: boolean;\n    drawerWidth: number;\n    items: CopyHistoryItem[];\n    onClose: () => void;\n    onDelete: (item: CopyHistoryItem) => void;\n    onAnki: (item: CopyHistoryItem) => void;\n    onSelect: (item: CopyHistoryItem) => void;\n    onClipAudio: (item: CopyHistoryItem) => void;\n    onDownloadImage: (item: CopyHistoryItem) => void;\n    onDownloadSectionAsSrt: (name: string, items: CopyHistoryItem[]) => void;\n}\n\nconst useStyles = makeStyles<Theme, CopyHistoryProps, string>((theme) => ({\n    drawer: {\n        width: ({ drawerWidth }) => drawerWidth,\n        flexShrink: 0,\n    },\n    drawerPaper: {\n        width: ({ drawerWidth }) => drawerWidth,\n    },\n    drawerHeader: {\n        display: 'flex',\n        alignItems: 'center',\n        position: 'static',\n        padding: theme.spacing(0, 1),\n        // necessary for content to be below app bar\n        ...theme.mixins.toolbar,\n        justifyContent: 'flex-start',\n    },\n    listContainer: {\n        position: 'relative',\n        height: '100%',\n        overflowY: 'auto',\n        overflowX: 'hidden',\n    },\n    listItem: {\n        '&:hover': {\n            backgroundColor: theme.palette.action.hover,\n        },\n    },\n    listItemGutters: {\n        paddingLeft: 5,\n        paddingRight: 5,\n    },\n    listItemIconRoot: {\n        minWidth: 20,\n    },\n    emptyState: {\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        textAlign: 'center',\n        height: '100%',\n        padding: 15,\n    },\n    text: {\n        flexGrow: 1,\n    },\n    emptyText: {\n        flexGrow: 1,\n        color: theme.palette.text.secondary,\n    },\n    timestamp: {\n        paddingRight: 15,\n        paddingLeft: 15,\n        color: theme.palette.text.secondary,\n    },\n}));\n\ninterface MenuProps {\n    open: boolean;\n    item?: CopyHistoryItem;\n    anchorEl?: Element;\n    onClose: () => void;\n    onSelect: (item: CopyHistoryItem) => void;\n    onClipAudio: (item: CopyHistoryItem) => void;\n    onDownloadImage: (item: CopyHistoryItem) => void;\n    onDelete: (item: CopyHistoryItem) => void;\n}\n\nfunction Menu({ open, anchorEl, onClose, onSelect, onClipAudio, onDownloadImage, onDelete, item }: MenuProps) {\n    const handleCopy = useCallback(() => {\n        navigator.clipboard.writeText(item!.text);\n        onClose();\n    }, [item, onClose]);\n\n    const handleJumpTo = useCallback(() => {\n        onSelect(item!);\n        onClose();\n    }, [item, onSelect, onClose]);\n\n    const handleClipAudio = useCallback(() => {\n        onClipAudio(item!);\n        onClose();\n    }, [item, onClipAudio, onClose]);\n\n    const handleDownloadImage = useCallback(() => {\n        onDownloadImage(item!);\n        onClose();\n    }, [item, onDownloadImage, onClose]);\n\n    const handleDelete = useCallback(() => {\n        onDelete(item!);\n        onClose();\n    }, [item, onDelete, onClose]);\n\n    if (!item) {\n        return null;\n    }\n\n    return (\n        <Popover\n            disableEnforceFocus={true}\n            open={open}\n            anchorEl={anchorEl}\n            onClose={onClose}\n            anchorOrigin={{\n                vertical: 'center',\n                horizontal: 'center',\n            }}\n            transformOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n            }}\n        >\n            <List>\n                <ListItem button onClick={handleCopy}>\n                    <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Copy\" />\n                </ListItem>\n                <ListItem button onClick={handleJumpTo}>\n                    <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Jump To\" />\n                </ListItem>\n                {(item.videoFile || item.audioFile || item.audio) && (\n                    <ListItem button onClick={handleClipAudio}>\n                        <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Download Audio\" />\n                    </ListItem>\n                )}\n                {(item.videoFile || item.image) && (\n                    <ListItem button onClick={handleDownloadImage}>\n                        <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Download Image\" />\n                    </ListItem>\n                )}\n                <ListItem button onClick={handleDelete}>\n                    <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Delete\" />\n                </ListItem>\n            </List>\n        </Popover>\n    );\n}\n\nexport default function CopyHistory(props: CopyHistoryProps) {\n    const onDelete = props.onDelete;\n    const classes = useStyles(props);\n    const scrollToBottomRefCallback = useCallback((element: HTMLElement | null) => {\n        if (element) {\n            element.scrollIntoView();\n        }\n    }, []);\n    const [menuItem, setMenuItem] = useState<CopyHistoryItem>();\n    const [menuOpen, setMenuOpen] = useState<boolean>(false);\n    const [menuAnchorEl, setMenuAnchorEl] = useState<Element>();\n\n    const handleMenu = useCallback((e: React.MouseEvent, item: CopyHistoryItem) => {\n        setMenuItem(item);\n        setMenuOpen(true);\n        setMenuAnchorEl(e.currentTarget);\n    }, []);\n\n    const handleMenuClosed = useCallback(() => {\n        setMenuItem(undefined);\n        setMenuOpen(false);\n        setMenuAnchorEl(undefined);\n    }, []);\n\n    const handleDelete = useCallback(\n        (item: CopyHistoryItem) => {\n            onDelete(item);\n        },\n        [onDelete]\n    );\n\n    let content;\n\n    if (props.items.length > 0) {\n        const items = [];\n        let lastSeenItemName = null;\n        let i = 0;\n        const itemNameCounters: { [name: string]: number } = {};\n        let itemsBySection: { [key: string]: CopyHistoryItem[] } = {};\n        let currentKey: string | undefined;\n\n        for (const item of props.items) {\n            if (lastSeenItemName === null || lastSeenItemName !== item.name) {\n\n                if (item.name in itemNameCounters) {\n                    itemNameCounters[item.name]++;\n                } else {\n                    itemNameCounters[item.name] = 0;\n                }\n\n                const key = item.name + '-' + itemNameCounters[item.name];\n                itemsBySection[key] = [];\n                lastSeenItemName = item.name;\n                currentKey = key;\n\n                items.push(\n                    <ListItem key={key}>\n                        <Typography color=\"textSecondary\">{item.name}</Typography>\n                        <ListItemSecondaryAction>\n                            <Tooltip title=\"Download as SRT\">\n                                <IconButton\n                                    onClick={() => props.onDownloadSectionAsSrt(item.name, itemsBySection[key])}\n                                    edge=\"end\"\n                                >\n                                    <SaveAltIcon />\n                                </IconButton>\n                            </Tooltip>\n                        </ListItemSecondaryAction>\n                    </ListItem>\n                );\n            }\n\n            itemsBySection[currentKey!].push(item);\n            const ref = i === props.items.length - 1 ? scrollToBottomRefCallback : null;\n\n            items.push(\n                <ListItem\n                    ref={ref}\n                    key={item.id}\n                    className={classes.listItem}\n                    classes={{ gutters: classes.listItemGutters }}\n                >\n                    <ListItemIcon classes={{ root: classes.listItemIconRoot }}>\n                        <Tooltip title=\"Export to Anki\">\n                            <IconButton onClick={() => props.onAnki(item)}>\n                                <StarIcon fontSize=\"small\" />\n                            </IconButton>\n                        </Tooltip>\n                    </ListItemIcon>\n                    <ListItemIcon classes={{ root: classes.listItemIconRoot }}>\n                        <IconButton onClick={(e) => handleMenu(e, item)}>\n                            <MoreVertIcon fontSize=\"small\" />\n                        </IconButton>\n                    </ListItemIcon>\n                    <ListItemText\n                        primary={\n                            <Grid wrap=\"nowrap\" container>\n                                <Grid item className={item.text === '' ? classes.emptyText : classes.text}>\n                                    {item.text === '' ? 'No text' : item.text}\n                                </Grid>\n                                <Grid item className={classes.timestamp}>\n                                    {timeDurationDisplay(item.start, item.start, false)}\n                                </Grid>\n                            </Grid>\n                        }\n                    />\n                </ListItem>\n            );\n\n            ++i;\n        }\n\n        content = (\n            <div className={classes.listContainer}>\n                <List>{items}</List>\n            </div>\n        );\n    } else {\n        content = (\n            <div className={classes.emptyState}>\n                <Typography variant=\"h6\">Mining history is empty.</Typography>\n                <Typography variant=\"caption\">See the help for keyboard shortcuts.</Typography>\n            </div>\n        );\n    }\n\n    return (\n        <React.Fragment>\n            <Drawer\n                variant=\"persistent\"\n                anchor=\"right\"\n                open={props.open}\n                className={classes.drawer}\n                classes={{\n                    paper: classes.drawerPaper,\n                }}\n            >\n                <div className={classes.drawerHeader}>\n                    <IconButton onClick={props.onClose}>\n                        <ChevronRightIcon />\n                    </IconButton>\n                </div>\n                <Divider />\n                {content}\n            </Drawer>\n            <Menu\n                open={props.open && menuOpen}\n                anchorEl={menuAnchorEl}\n                item={menuItem}\n                onClose={handleMenuClosed}\n                onSelect={props.onSelect}\n                onClipAudio={props.onClipAudio}\n                onDownloadImage={props.onDownloadImage}\n                onDelete={handleDelete}\n            />\n        </React.Fragment>\n    );\n}\n","import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport gt from 'semver/functions/gt';\nimport Fade from '@material-ui/core/Fade';\nimport Link from '@material-ui/core/Link';\nimport Typography from '@material-ui/core/Typography';\nimport ChromeExtension from '../services/ChromeExtension';\nimport { Theme } from '@material-ui/core/styles';\n\ninterface StylesProps {\n    appBarHidden: boolean;\n}\n\nconst useStyles = makeStyles<Theme, StylesProps>((theme) => ({\n    background: ({ appBarHidden }) => ({\n        position: 'absolute',\n        height: appBarHidden ? '100vh' : 'calc(100vh - 64px)',\n        width: '100%',\n        zIndex: 100,\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        padding: 15,\n        textAlign: 'center',\n    }),\n    browseLink: {\n        cursor: 'pointer',\n    },\n}));\n\ninterface Props {\n    extension: ChromeExtension;\n    latestExtensionVersion: string;\n    extensionUrl: string;\n    loading: boolean;\n    dragging: boolean;\n    appBarHidden: boolean;\n    onFileSelector: React.MouseEventHandler<HTMLAnchorElement> &\n        React.MouseEventHandler<HTMLSpanElement> &\n        React.MouseEventHandler<HTMLLabelElement>;\n}\n\nexport default function LandingPage({\n    extension,\n    latestExtensionVersion,\n    extensionUrl,\n    loading,\n    dragging,\n    appBarHidden,\n    onFileSelector,\n}: Props) {\n    const classes = useStyles({ appBarHidden });\n    const [installedExtensionVersion, setInstalledExtensionVersion] = useState<string>();\n\n    useEffect(() => {\n        async function fetchInstalledExtensionVersion() {\n            setInstalledExtensionVersion(extension.version);\n        }\n\n        fetchInstalledExtensionVersion();\n    }, [extension]);\n\n    const extensionUpdateAvailable = installedExtensionVersion && gt(latestExtensionVersion, installedExtensionVersion);\n    const extensionNotInstalled = !installedExtensionVersion;\n\n    return (\n        <React.Fragment>\n            <Fade in={!loading && !dragging} timeout={500}>\n                <div className={classes.background}>\n                    <Typography variant=\"h6\">\n                        Drag and drop subtitle and media files, or{' '}\n                        <Link\n                            target=\"#\"\n                            className={classes.browseLink}\n                            onClick={onFileSelector}\n                            color=\"secondary\"\n                            component=\"label\"\n                        >\n                            browse\n                        </Link>\n                        .\n                        <br />\n                        {extensionNotInstalled && (\n                            <span>\n                                Install the{' '}\n                                <Link color=\"secondary\" target=\"_blank\" rel=\"noreferrer\" href={extensionUrl}>\n                                    Chrome extension\n                                </Link>{' '}\n                                to sync subtitles with streaming video.\n                            </span>\n                        )}\n                        {extensionUpdateAvailable && (\n                            <span>\n                                An extension{' '}\n                                <Link color=\"secondary\" target=\"_blank\" rel=\"noreferrer\" href={extensionUrl}>\n                                    update\n                                </Link>{' '}\n                                is available.\n                            </span>\n                        )}\n                    </Typography>\n                </div>\n            </Fade>\n        </React.Fragment>\n    );\n}\n","import { Message } from \"@project/common\";\nimport { VideoProtocol, VideoProtocolMessage } from \"./VideoProtocol\";\n\nexport default class BroadcastChannelVideoProtocol implements VideoProtocol {\n    private channel?: BroadcastChannel;\n\n    onMessage?: (message: VideoProtocolMessage) => void;\n    \n    constructor(channelId: string) {\n        this.channel = new BroadcastChannel(channelId);\n        const that = this;\n        this.channel.onmessage = (event) => {\n            that.onMessage?.(event as VideoProtocolMessage);\n        };\n    }\n\n    postMessage(message: Message) {\n        this.channel?.postMessage(message);\n    }\n\n    close() {\n        this.channel?.close();\n        this.channel = undefined;\n    }\n}\n","import { Message } from '@project/common';\nimport ChromeExtension, { ExtensionMessage } from './ChromeExtension';\nimport { VideoProtocol, VideoProtocolMessage } from './VideoProtocol';\n\nexport default class ChromeTabVideoProtocol implements VideoProtocol {\n    private readonly tabId: number;\n    private readonly src: string;\n    private readonly extension: ChromeExtension;\n    private readonly listener: (message: ExtensionMessage) => void;\n    private readonly unsubscribeFromExtension: () => void;\n\n    onMessage?: (message: VideoProtocolMessage) => void;\n\n    constructor(tabId: number, src: string, extension: ChromeExtension) {\n        this.tabId = tabId;\n        this.src = src;\n        this.listener = (message) => {\n            if (message.tabId === tabId && message.src === src) {\n                this.onMessage?.({\n                    data: message.data,\n                });\n            }\n        };\n\n        this.unsubscribeFromExtension = extension.subscribe(this.listener);\n        this.extension = extension;\n    }\n\n    postMessage(message: Message) {\n        this.extension.sendMessage(message, this.tabId, this.src);\n    }\n\n    close() {\n        this.unsubscribeFromExtension();\n    }\n}\n","export default class Clock {\n    private accumulated: number;\n    private started: boolean;\n    private startTime?: number;\n    private _rate = 1;\n\n    constructor() {\n        this.accumulated = 0;\n        this.started = false;\n    }\n\n    get rate() {\n        return this._rate;\n    }\n\n    set rate(rate: number) {\n        if (this.started) {\n            this.accumulated += this._elapsed();\n            this.startTime = Date.now();\n        }\n    \n        this._rate = rate;\n    }\n\n    time(max: number) {\n        if (this.started) {\n            return Math.min(max, this.accumulated + this._elapsed());\n        }\n\n        return Math.min(max, this.accumulated);\n    }\n\n    stop() {\n        if (!this.started) {\n            return;\n        }\n\n        this.started = false;\n        this.accumulated += this._elapsed();\n    }\n\n    private _elapsed() {\n        return (Date.now() - this.startTime!) * this._rate;\n    }\n\n    start() {\n        this.startTime = Date.now();\n        this.started = true;\n    }\n\n    setTime(time: number) {\n        if (this.started) {\n            this.startTime = Date.now();\n            this.accumulated = time;\n        } else {\n            this.accumulated = time;\n        }\n    }\n\n    progress(max: number) {\n        return max === 0 ? 0 : Math.min(1, this.time(max) / max);\n    }\n}\n","import React, { useCallback, useEffect, useState, useRef, MutableRefObject } from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\nimport AudiotrackIcon from '@material-ui/icons/Audiotrack';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Fade from '@material-ui/core/Fade';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport Input from '@material-ui/core/Input';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport OpenInNewIcon from '@material-ui/icons/OpenInNew';\nimport Popover from '@material-ui/core/Popover';\nimport FullscreenIcon from '@material-ui/icons/Fullscreen';\nimport AspectRatioIcon from '@material-ui/icons/AspectRatio';\nimport FullscreenExitIcon from '@material-ui/icons/FullscreenExit';\nimport PauseIcon from '@material-ui/icons/Pause';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport QueueMusicIcon from '@material-ui/icons/QueueMusic';\nimport Slider from '@material-ui/core/Slider';\nimport TuneIcon from '@material-ui/icons/Tune';\nimport SubtitlesIcon from '@material-ui/icons/Subtitles';\nimport VideocamIcon from '@material-ui/icons/Videocam';\nimport VolumeOffIcon from '@material-ui/icons/VolumeOff';\nimport VolumeUpIcon from '@material-ui/icons/VolumeUp';\nimport { AudioTrackModel, PlayMode, VideoTabModel } from '@project/common';\nimport Clock from '../services/Clock';\nimport PlaybackPreferences from '../services/PlaybackPreferences';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nconst useControlStyles = makeStyles((theme) => ({\n    container: {\n        position: 'absolute',\n        left: '50%',\n        width: '50%',\n        bottom: 0,\n        pointerEvents: 'none',\n        color: '#fff',\n    },\n    buttonContainer: {\n        flexDirection: 'row',\n    },\n    timeDisplay: {\n        color: '#fff',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        height: '100%',\n        cursor: 'default',\n        fontSize: 20,\n        marginLeft: 10,\n    },\n    numberInput: {\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        fontSize: 20,\n        marginLeft: 10,\n        width: 100,\n        color: '#fff',\n        pointerEvents: 'auto',\n    },\n    volumeInputContainerShown: {\n        transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.short,\n        }),\n        marginRight: 5,\n        pointerEvents: 'auto',\n    },\n    volumeInputContainerHidden: {\n        transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.short,\n        }),\n        marginRight: 0,\n        pointerEvents: 'auto',\n    },\n    volumeInputHidden: {\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.short,\n        }),\n        width: 0,\n        pointerEvents: 'auto',\n    },\n    volumeInputShown: {\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.short,\n        }),\n        width: 100,\n        pointerEvents: 'auto',\n    },\n    volumeInputThumbHidden: {\n        transition: theme.transitions.create('visibility', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.short,\n        }),\n        opacity: 0,\n        pointerEvents: 'auto',\n    },\n    volumeInputThumbShown: {\n        transition: theme.transitions.create('visibility', {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.short,\n        }),\n        opacity: 1,\n        pointerEvents: 'auto',\n    },\n    subContainer: {\n        background: 'linear-gradient(to bottom, rgba(0, 0, 0, 0), rgba(0, 0, 0, .4) 40%, rgba(0, 0, 0, 0.7))',\n        position: 'relative',\n        left: '-100%',\n        width: '200%',\n        zIndex: 10,\n    },\n    button: {\n        pointerEvents: 'auto',\n    },\n    inactiveButton: {\n        color: 'rgba(72, 72, 72, 0.7)',\n        pointerEvents: 'auto',\n    },\n    inactiveTopButton: {\n        color: 'rgba(255, 255, 255, 0.5)',\n        pointerEvents: 'auto',\n    },\n    progress: {\n        margin: 5,\n    },\n    topButton: {\n        pointerEvents: 'auto',\n        color: '#fff',\n    },\n    gridContainer: {\n        pointerEvents: 'auto',\n        padding: 2,\n    },\n}));\n\nconst useProgressBarStyles = makeStyles((theme) => ({\n    root: {\n        height: 10,\n    },\n    container: {\n        height: 10,\n        pointerEvents: 'auto',\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        position: 'absolute',\n        width: 'calc(100% - 20px)',\n        marginLeft: 10,\n    },\n    mouseEventListener: {\n        zIndex: 1,\n        height: 10,\n        cursor: 'pointer',\n        pointerEvents: 'auto',\n        position: 'absolute',\n        width: '100%',\n    },\n    fillContainer: {\n        background: 'rgba(30,30,30,0.7)',\n        width: '100%',\n        height: 5,\n        position: 'relative',\n    },\n    fillContainerThick: {\n        transition: theme.transitions.create('height', {\n            easing: theme.transitions.easing.easeInOut,\n            duration: 50,\n        }),\n        height: 8,\n    },\n    fill: {\n        background: 'linear-gradient(to left, #ff1f62, #49007a)',\n        height: '100%',\n    },\n    handleContainer: {\n        position: 'absolute',\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        height: '100%',\n        bottom: 0,\n    },\n    handle: {\n        borderRadius: '50%',\n        width: 16,\n        height: 16,\n        opacity: 0,\n        left: -8,\n        background: 'white',\n        position: 'absolute',\n    },\n    handleOn: {\n        opacity: 1,\n        transition: theme.transitions.create('opacity', {\n            easing: theme.transitions.easing.easeInOut,\n            duration: theme.transitions.duration.shortest,\n        }),\n    },\n}));\n\nconst VolumeSlider = withStyles((theme) => ({\n    root: {\n        color: 'white',\n        verticalAlign: 'middle',\n    },\n    thumb: {\n        backgroundColor: 'white',\n        color: 'white',\n        '&:focus': {\n            boxShadow: 'inherit',\n        },\n        '&:hover, &$active': {\n            boxShadow: '0px 0px 0px 8px rgba(255, 255, 255, 0.1)',\n        },\n    },\n    active: {\n        color: 'white',\n    },\n}))(Slider);\n\nfunction displayTime(milliseconds: number) {\n    const seconds = Math.floor(milliseconds / 1000);\n    const minutes = Math.floor(seconds / 60);\n    const secondsInMinute = seconds % 60;\n    return String(minutes) + ':' + String(secondsInMinute).padStart(2, '0');\n}\n\nfunction elementWidth(element: HTMLElement) {\n    const rect = element.getBoundingClientRect();\n    return rect.right - rect.left;\n}\n\ninterface ProgressBarProps {\n    onSeek: (progress: number) => void;\n    value: number;\n}\n\nfunction ProgressBar({ onSeek, value }: ProgressBarProps) {\n    const classes = useProgressBarStyles();\n    const [mouseOver, setMouseOver] = useState(false);\n    const containerRef = useRef(null);\n\n    const handleClick = useCallback(\n        (e: React.MouseEvent<HTMLDivElement>) => {\n            const rect = e.currentTarget.getBoundingClientRect();\n            // Account for margins by subtracting 10 from left/right sides\n            const width = rect.right - rect.left - 20;\n            const progress = Math.min(1, Math.max(0, (e.pageX - rect.left - 10) / width));\n            onSeek(progress);\n        },\n        [onSeek]\n    );\n\n    const handleMouseOver = useCallback(() => setMouseOver(true), []);\n    const handleMouseOut = useCallback(() => setMouseOver(false), []);\n    const progressWidth = containerRef.current ? (elementWidth(containerRef.current) * value) / 100 : 0;\n    const fillStyle = { width: progressWidth };\n    const handleStyle = { marginLeft: progressWidth };\n    const fillContainerClassName = mouseOver\n        ? classes.fillContainer + ' ' + classes.fillContainerThick\n        : classes.fillContainer;\n    const handleClassName = mouseOver ? classes.handle + ' ' + classes.handleOn : classes.handle;\n\n    return (\n        <div className={classes.root}>\n            <div ref={containerRef} className={classes.container}>\n                <div className={fillContainerClassName}>\n                    <div className={classes.fill} style={fillStyle}></div>\n                    <div className={classes.handleContainer}>\n                        <div className={handleClassName} style={handleStyle} />\n                    </div>\n                </div>\n            </div>\n            <div\n                className={classes.mouseEventListener}\n                onClick={handleClick}\n                onMouseOver={handleMouseOver}\n                onMouseOut={handleMouseOut}\n            ></div>\n        </div>\n    );\n}\n\ninterface AudioTrackSelectorProps {\n    open: boolean;\n    anchorEl?: Element;\n    audioTracks?: AudioTrackModel[];\n    selectedAudioTrack?: string;\n    onAudioTrackSelected: (id: string) => void;\n    onClose: () => void;\n}\n\nfunction AudioTrackSelector({\n    open,\n    anchorEl,\n    audioTracks,\n    selectedAudioTrack,\n    onAudioTrackSelected,\n    onClose,\n}: AudioTrackSelectorProps) {\n    if (!audioTracks || audioTracks.length === 0) {\n        return null;\n    }\n\n    const list = audioTracks.map((t) => {\n        return (\n            <ListItem\n                key={t.id}\n                selected={t.id === selectedAudioTrack}\n                button\n                onClick={() => onAudioTrackSelected(t.id)}\n            >\n                {t.language} {t.label}\n            </ListItem>\n        );\n    });\n\n    return (\n        <div>\n            <Popover\n                disableEnforceFocus={true}\n                open={open}\n                anchorEl={anchorEl}\n                onClose={onClose}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n            >\n                <List>{list}</List>\n            </Popover>\n        </div>\n    );\n}\n\ninterface TabSelectorProps {\n    open: boolean;\n    anchorEl?: Element;\n    tabs?: VideoTabModel[];\n    selectedTab?: VideoTabModel;\n    onTabSelected: (tab: VideoTabModel) => void;\n    onClose: () => void;\n}\n\nfunction TabSelector({ open, anchorEl, onClose, tabs, selectedTab, onTabSelected }: TabSelectorProps) {\n    if (!tabs || tabs.length === 0) {\n        return null;\n    }\n\n    const list = tabs.map((t) => {\n        return (\n            <ListItem\n                key={`${t.id}:${t.src}`}\n                selected={selectedTab && t.id === selectedTab.id && t.src === selectedTab.src}\n                button\n                onClick={() => onTabSelected(t)}\n            >\n                {t.id} {t.title} {t.src}\n            </ListItem>\n        );\n    });\n\n    return (\n        <div>\n            <Popover\n                disableEnforceFocus={true}\n                open={open}\n                anchorEl={anchorEl}\n                onClose={onClose}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n            >\n                <List>{list}</List>\n            </Popover>\n        </div>\n    );\n}\n\ninterface MediaUnloaderProps {\n    open: boolean;\n    anchorEl?: Element;\n    file?: string;\n    onUnload: () => void;\n    onClose: () => void;\n}\n\nfunction MediaUnloader({ open, anchorEl, onUnload, onClose, file }: MediaUnloaderProps) {\n    return (\n        <div>\n            <Popover\n                disableEnforceFocus={true}\n                open={open}\n                anchorEl={anchorEl}\n                onClose={onClose}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n            >\n                <List>\n                    <ListItem button onClick={(e) => onUnload()}>\n                        Unload {file}\n                    </ListItem>\n                </List>\n            </Popover>\n        </div>\n    );\n}\n\ninterface PlayModeSelectorProps {\n    open: boolean;\n    anchorEl?: Element;\n    selectedPlayMode?: PlayMode;\n    onPlayMode: (playMode: PlayMode) => void;\n    onClose: () => void;\n}\n\nfunction PlayModeSelector({ open, anchorEl, selectedPlayMode, onPlayMode, onClose }: PlayModeSelectorProps) {\n    return (\n        <div>\n            <Popover\n                disableEnforceFocus={true}\n                open={open}\n                anchorEl={anchorEl}\n                onClose={onClose}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n            >\n                <List>\n                    <ListItem\n                        selected={selectedPlayMode === PlayMode.normal}\n                        button\n                        onClick={(e) => onPlayMode(PlayMode.normal)}\n                    >\n                        Normal\n                    </ListItem>\n                    <ListItem\n                        selected={selectedPlayMode === PlayMode.condensed}\n                        button\n                        onClick={(e) => onPlayMode(PlayMode.condensed)}\n                    >\n                        Condensed\n                    </ListItem>\n                    <ListItem\n                        selected={selectedPlayMode === PlayMode.autoPause}\n                        button\n                        onClick={(e) => onPlayMode(PlayMode.autoPause)}\n                    >\n                        Auto-pause\n                    </ListItem>\n                </List>\n            </Popover>\n        </div>\n    );\n}\n\nexport interface Point {\n    x: number;\n    y: number;\n}\n\ninterface ControlsProps {\n    clock: Clock;\n    playing: boolean;\n    length: number;\n    offsetEnabled?: boolean;\n    displayLength?: number;\n    offset: number;\n    playbackRate: number;\n    playbackRateEnabled?: boolean;\n    onAudioTrackSelected: (id: string) => void;\n    onSeek: (progress: number) => void;\n    mousePositionRef: MutableRefObject<Point>;\n    onShow?: (show: boolean) => void;\n    onPause: () => void;\n    onPlay: () => void;\n    onTabSelected?: (tab: VideoTabModel) => void;\n    onUnloadAudio?: () => void;\n    onUnloadVideo?: () => void;\n    onOffsetChange: (offset: number) => void;\n    onPlaybackRateChange: (playbackRate: number) => void;\n    onVolumeChange: (volume: number) => void;\n    disableKeyEvents?: boolean;\n    playbackPreferences: PlaybackPreferences;\n    closeEnabled?: boolean;\n    onClose?: () => void;\n    volumeEnabled?: boolean;\n    playMode?: PlayMode;\n    playModeEnabled?: boolean;\n    onPlayMode?: (playMode: PlayMode) => void;\n    subtitlesEnabled?: boolean;\n    subtitlesToggle?: boolean;\n    onSubtitlesToggle?: () => void;\n    videoFile?: string;\n    audioFile?: string;\n    audioTracks?: AudioTrackModel[];\n    selectedAudioTrack?: string;\n    tabs?: VideoTabModel[];\n    selectedTab?: VideoTabModel;\n    popOutEnabled?: boolean;\n    popOut?: boolean;\n    onPopOutToggle?: () => void;\n    fullscreenEnabled?: boolean;\n    fullscreen?: boolean;\n    onFullscreenToggle?: () => void;\n    hideSubtitlePlayerToggleEnabled?: boolean;\n    subtitlePlayerHidden?: boolean;\n    onHideSubtitlePlayerToggle?: () => void;\n    showOnMouseMovement: boolean;\n    theaterModeToggleEnabled?: boolean;\n    theaterModeEnabled?: boolean;\n    onTheaterModeToggle?: () => void;\n}\n\nexport default function Controls({\n    clock,\n    playing,\n    length,\n    offsetEnabled,\n    displayLength,\n    offset,\n    playbackRate,\n    playbackRateEnabled,\n    onAudioTrackSelected,\n    onSeek,\n    mousePositionRef,\n    onShow,\n    onPause,\n    onPlay,\n    onTabSelected,\n    onUnloadAudio,\n    onUnloadVideo,\n    onOffsetChange,\n    onPlaybackRateChange,\n    onVolumeChange,\n    disableKeyEvents,\n    playbackPreferences,\n    closeEnabled,\n    onClose,\n    volumeEnabled,\n    playMode,\n    playModeEnabled,\n    onPlayMode,\n    subtitlesEnabled,\n    subtitlesToggle,\n    onSubtitlesToggle,\n    videoFile,\n    audioFile,\n    audioTracks,\n    selectedAudioTrack,\n    tabs,\n    selectedTab,\n    popOutEnabled,\n    popOut,\n    onPopOutToggle,\n    fullscreenEnabled,\n    fullscreen,\n    onFullscreenToggle,\n    hideSubtitlePlayerToggleEnabled,\n    subtitlePlayerHidden,\n    onHideSubtitlePlayerToggle,\n    showOnMouseMovement,\n    theaterModeToggleEnabled,\n    theaterModeEnabled,\n    onTheaterModeToggle,\n}: ControlsProps) {\n    const classes = useControlStyles();\n    const [show, setShow] = useState<boolean>(true);\n    const [audioTrackSelectorOpen, setAudioTrackSelectorOpen] = useState<boolean>(false);\n    const [audioTrackSelectorAnchorEl, setAudioTrackSelectorAnchorEl] = useState<Element>();\n    const [tabSelectorOpen, setTabSelectorOpen] = useState<boolean>(false);\n    const [tabSelectorAnchorEl, setTabSelectorAnchorEl] = useState<Element>();\n    const [audioUnloaderOpen, setAudioUnloaderOpen] = useState<boolean>(false);\n    const [audioUnloaderAnchorEl, setAudioUnloaderAnchorEl] = useState<Element>();\n    const [videoUnloaderOpen, setVideoUnloaderOpen] = useState<boolean>(false);\n    const [videoUnloaderAnchorEl, setVideoUnloaderAnchorEl] = useState<Element>();\n    const [playModeSelectorOpen, setPlayModeSelectorOpen] = useState<boolean>(false);\n    const [playModeSelectorAnchorEl, setPlayModeSelectorAnchorEl] = useState<Element>();\n    const [showVolumeBar, setShowVolumeBar] = useState<boolean>(false);\n    const [volume, setVolume] = useState<number>(100);\n    const [lastCommittedVolume, setLastCommittedVolume] = useState<number>(100);\n\n    const lastMousePositionRef = useRef<Point>({ x: 0, y: 0 });\n    const lastShowTimestampRef = useRef<number>(Date.now());\n    const lastNumberInputChangeTimestampRef = useRef<number>(Date.now());\n    const lastShowRef = useRef<boolean>(true);\n    const forceShowRef = useRef<boolean>(false);\n    const [offsetInputWidth, setOffsetInputWidth] = useState<number>(5);\n    const [playbackRateInputWidth, setPlaybackRateInputWidth] = useState<number>(5);\n    const offsetInputRef = useRef<HTMLInputElement>();\n    const playbackRateInputRef = useRef<HTMLInputElement>();\n    const containerRef = useRef<HTMLDivElement>(null);\n    const closeButtonRef = useRef<HTMLButtonElement>(null);\n    const [, updateState] = useState<any>();\n    const forceUpdate = useCallback(() => updateState({}), []);\n\n    const handleSeek = useCallback(\n        (progress: number) => {\n            onSeek(progress);\n        },\n        [onSeek]\n    );\n\n    function handleMouseOver() {\n        forceShowRef.current = true;\n    }\n\n    function handleMouseOut() {\n        forceShowRef.current = false;\n    }\n\n    useEffect(() => {\n        const savedVolume = Number(playbackPreferences.volume);\n        setVolume(savedVolume);\n        onVolumeChange(savedVolume / 100);\n\n        if (savedVolume > 0) {\n            setLastCommittedVolume(savedVolume);\n        }\n    }, [playbackPreferences, onVolumeChange]);\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            let currentShow: boolean;\n\n            if (showOnMouseMovement) {\n                currentShow =\n                    Date.now() - lastShowTimestampRef.current < 2000 ||\n                    Math.pow(mousePositionRef.current.x - lastMousePositionRef.current.x, 2) +\n                        Math.pow(mousePositionRef.current.y - lastMousePositionRef.current.y, 2) >\n                        100;\n            } else {\n                currentShow =\n                    ((containerRef.current && mousePositionRef.current.y > containerRef.current.offsetTop - 20) ||\n                        (closeButtonRef.current &&\n                            mousePositionRef.current.y < closeButtonRef.current.offsetHeight + 20)) ??\n                    false;\n            }\n\n            currentShow =\n                currentShow ||\n                forceShowRef.current ||\n                offsetInputRef.current === document.activeElement ||\n                playbackRateInputRef.current === document.activeElement ||\n                Date.now() - lastNumberInputChangeTimestampRef.current < 2000;\n\n            if (currentShow && !lastShowRef.current) {\n                lastShowTimestampRef.current = Date.now();\n                setShow(currentShow);\n            } else if (!currentShow && lastShowRef.current) {\n                setShow(currentShow);\n            }\n\n            lastShowRef.current = currentShow;\n            lastMousePositionRef.current.x = mousePositionRef.current.x;\n            lastMousePositionRef.current.y = mousePositionRef.current.y;\n        }, 100);\n        return () => clearInterval(interval);\n    }, [mousePositionRef, showOnMouseMovement]);\n\n    useEffect(() => onShow?.(show), [onShow, show]);\n\n    const updateOffset = useCallback((offset: number) => {\n        if (offsetInputRef.current) {\n            if (offset === 0) {\n                offsetInputRef.current.value = '';\n                setOffsetInputWidth(5);\n            } else {\n                const offsetSeconds = offset / 1000;\n                const value = offsetSeconds >= 0 ? '+' + offsetSeconds.toFixed(2) : String(offsetSeconds.toFixed(2));\n                offsetInputRef.current.value = value;\n                lastNumberInputChangeTimestampRef.current = Date.now();\n                setOffsetInputWidth(value.length);\n            }\n            offsetInputRef.current.blur();\n        }\n    }, []);\n\n    const updatePlaybackRate = useCallback((playbackRate: number) => {\n        if (playbackRateInputRef.current) {\n            if (playbackRate === 1) {\n                playbackRateInputRef.current.value = '';\n                setPlaybackRateInputWidth(5);\n            } else {\n                const value = '×' + String(playbackRate.toFixed(2));\n                playbackRateInputRef.current.value = value;\n                lastNumberInputChangeTimestampRef.current = Date.now();\n                setPlaybackRateInputWidth(value.length);\n            }\n            playbackRateInputRef.current.blur();\n        }\n    }, []);\n\n    useEffect(() => {\n        if (disableKeyEvents) {\n            return;\n        }\n\n        function handleKey(event: KeyboardEvent) {\n            if (event.key === 'Enter') {\n                if (offsetInputRef.current === document.activeElement) {\n                    const newOffset = Number(offsetInputRef.current.value);\n\n                    if (newOffset === offset) {\n                        updateOffset(offset);\n                        return;\n                    }\n\n                    if (Number.isNaN(newOffset)) {\n                        return;\n                    }\n\n                    onOffsetChange(newOffset * 1000);\n                } else if (playbackRateInputRef.current === document.activeElement) {\n                    const newPlaybackRate = Number(playbackRateInputRef.current.value);\n\n                    if (playbackRate === newPlaybackRate) {\n                        updatePlaybackRate(playbackRate);\n                        return;\n                    }\n\n                    if (Number.isNaN(newPlaybackRate) || newPlaybackRate < 0.1 || newPlaybackRate > 5) {\n                        return;\n                    }\n\n                    onPlaybackRateChange(newPlaybackRate);\n                }\n            }\n        }\n\n        window.addEventListener('keydown', handleKey);\n\n        return () => {\n            window.removeEventListener('keydown', handleKey);\n        };\n    }, [\n        onOffsetChange,\n        onPlaybackRateChange,\n        updateOffset,\n        updatePlaybackRate,\n        offset,\n        playbackRate,\n        disableKeyEvents,\n    ]);\n\n    const handleNumberInputClicked = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n        const inputElement = e.target as HTMLInputElement;\n        inputElement.setSelectionRange(0, inputElement.value?.length || 0);\n    }, []);\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            forceUpdate();\n        }, 100);\n\n        return () => clearInterval(interval);\n    }, [forceUpdate]);\n\n    useEffect(() => {\n        updateOffset(offset);\n    }, [offset, updateOffset]);\n\n    useEffect(() => {\n        updatePlaybackRate(playbackRate);\n    }, [playbackRate, updatePlaybackRate]);\n\n    const handleAudioTrackSelectorClosed = useCallback(() => {\n        setAudioTrackSelectorAnchorEl(undefined);\n        setAudioTrackSelectorOpen(false);\n    }, []);\n\n    const handleAudioTrackSelectorOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setAudioTrackSelectorAnchorEl(e.currentTarget);\n        setAudioTrackSelectorOpen(true);\n    }, []);\n\n    const handleAudioTrackSelected = useCallback(\n        (id: string) => {\n            onAudioTrackSelected(id);\n            setAudioTrackSelectorAnchorEl(undefined);\n            setAudioTrackSelectorOpen(false);\n        },\n        [onAudioTrackSelected]\n    );\n\n    const handleTabSelectorClosed = useCallback(() => {\n        setTabSelectorAnchorEl(undefined);\n        setTabSelectorOpen(false);\n    }, []);\n\n    const handleTabSelectorOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setTabSelectorAnchorEl(e.currentTarget);\n        setTabSelectorOpen(true);\n    }, []);\n\n    const handleTabSelected = useCallback(\n        (tab: VideoTabModel) => {\n            onTabSelected?.(tab);\n            setTabSelectorAnchorEl(undefined);\n            setTabSelectorOpen(false);\n        },\n        [onTabSelected]\n    );\n\n    const handleAudioUnloaderClosed = useCallback(() => {\n        setAudioUnloaderAnchorEl(undefined);\n        setAudioUnloaderOpen(false);\n    }, []);\n\n    const handleAudioUnloaderOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setAudioUnloaderAnchorEl(e.currentTarget);\n        setAudioUnloaderOpen(true);\n    }, []);\n\n    const handleUnloadAudio = useCallback(() => {\n        onUnloadAudio?.();\n        setAudioUnloaderOpen(false);\n    }, [onUnloadAudio]);\n\n    const handleVideoUnloaderClosed = useCallback(() => {\n        setVideoUnloaderAnchorEl(undefined);\n        setVideoUnloaderOpen(false);\n    }, []);\n\n    const handleVideoUnloaderOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setVideoUnloaderAnchorEl(e.currentTarget);\n        setVideoUnloaderOpen(true);\n    }, []);\n\n    const handleUnloadVideo = useCallback(() => {\n        onUnloadVideo?.();\n        setVideoUnloaderOpen(false);\n    }, [onUnloadVideo]);\n\n    const handlePlayModeSelectorClosed = useCallback(() => {\n        setPlayModeSelectorAnchorEl(undefined);\n        setPlayModeSelectorOpen(false);\n    }, []);\n\n    const handlePlayModeSelectorOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setPlayModeSelectorAnchorEl(e.currentTarget);\n        setPlayModeSelectorOpen(true);\n    }, []);\n\n    const handlePlayModeSelected = useCallback(\n        (playMode: PlayMode) => {\n            onPlayMode?.(playMode);\n            setPlayModeSelectorAnchorEl(undefined);\n            setPlayModeSelectorOpen(false);\n        },\n        [onPlayMode]\n    );\n\n    const handleVolumeMouseOut = useCallback(() => setShowVolumeBar(false), []);\n    const handleVolumeMouseOver = useCallback(() => setShowVolumeBar(true), []);\n\n    const handleVolumeChange = useCallback(\n        (e: React.ChangeEvent<{}>, value: number | number[]) => {\n            if (typeof value !== 'number') {\n                return;\n            }\n\n            setVolume(value);\n            onVolumeChange(value / 100);\n        },\n        [onVolumeChange]\n    );\n\n    const handleVolumeChangeCommitted = useCallback(\n        (e: React.ChangeEvent<{}>, value: number | number[]) => {\n            if (typeof value !== 'number') {\n                return;\n            }\n\n            if (value > 0) {\n                setLastCommittedVolume(value);\n            }\n\n            playbackPreferences.volume = value;\n        },\n        [playbackPreferences]\n    );\n\n    const handleVolumeToggle = useCallback(() => {\n        setVolume((volume) => {\n            const newVolume = volume > 0 ? 0 : lastCommittedVolume;\n            onVolumeChange(newVolume / 100);\n            return newVolume;\n        });\n    }, [onVolumeChange, lastCommittedVolume]);\n\n    const progress = clock.progress(length);\n\n    return (\n        <React.Fragment>\n            <Fade in={show} timeout={200}>\n                <Grid container style={{ position: 'absolute', top: 0 }}>\n                    <Grid item style={{ flexGrow: 1 }}>\n                        {closeEnabled && (\n                            <IconButton\n                                ref={closeButtonRef}\n                                color=\"inherit\"\n                                className={classes.topButton}\n                                onClick={onClose}\n                                onMouseOver={handleMouseOver}\n                                onMouseOut={handleMouseOut}\n                            >\n                                <CloseIcon />\n                            </IconButton>\n                        )}\n                    </Grid>\n                    <Grid item>\n                        {theaterModeToggleEnabled && (\n                            <IconButton\n                                color=\"inherit\"\n                                className={theaterModeEnabled ? classes.topButton : classes.inactiveTopButton}\n                                onClick={onTheaterModeToggle}\n                                onMouseOver={handleMouseOver}\n                                onMouseOut={handleMouseOut}\n                            >\n                                <AspectRatioIcon />\n                            </IconButton>\n                        )}\n                        {hideSubtitlePlayerToggleEnabled && (\n                            <IconButton\n                                color=\"inherit\"\n                                className={classes.topButton}\n                                onClick={onHideSubtitlePlayerToggle}\n                                onMouseOver={handleMouseOver}\n                                onMouseOut={handleMouseOut}\n                            >\n                                {subtitlePlayerHidden ? <ArrowBackIcon /> : <ArrowForwardIcon />}\n                            </IconButton>\n                        )}\n                    </Grid>\n                </Grid>\n            </Fade>\n            <div\n                ref={containerRef}\n                className={classes.container}\n                onMouseOver={handleMouseOver}\n                onMouseOut={handleMouseOut}\n            >\n                <Fade in={show} timeout={200}>\n                    <div className={classes.subContainer}>\n                        <ProgressBar onSeek={handleSeek} value={progress * 100} />\n                        <Grid container className={classes.gridContainer} direction=\"row\">\n                            <Grid item>\n                                <IconButton color=\"inherit\" onClick={() => (playing ? onPause() : onPlay())}>\n                                    {playing ? (\n                                        <PauseIcon className={classes.button} />\n                                    ) : (\n                                        <PlayArrowIcon className={classes.button} />\n                                    )}\n                                </IconButton>\n                            </Grid>\n                            {volumeEnabled && (\n                                <Grid\n                                    item\n                                    onMouseOver={handleVolumeMouseOver}\n                                    onMouseOut={handleVolumeMouseOut}\n                                    className={\n                                        showVolumeBar\n                                            ? classes.volumeInputContainerShown\n                                            : classes.volumeInputContainerHidden\n                                    }\n                                >\n                                    <IconButton color=\"inherit\" onClick={handleVolumeToggle}>\n                                        {volume === 0 ? <VolumeOffIcon /> : <VolumeUpIcon />}\n                                    </IconButton>\n                                    <VolumeSlider\n                                        onChange={handleVolumeChange}\n                                        onChangeCommitted={handleVolumeChangeCommitted}\n                                        value={volume}\n                                        defaultValue={100}\n                                        classes={{\n                                            root: showVolumeBar ? classes.volumeInputShown : classes.volumeInputHidden,\n                                            thumb: showVolumeBar\n                                                ? classes.volumeInputThumbShown\n                                                : classes.volumeInputThumbHidden,\n                                        }}\n                                    />\n                                </Grid>\n                            )}\n                            <Grid item>\n                                <div className={classes.timeDisplay}>\n                                    {displayTime(progress * length)} / {displayTime(displayLength || length)}\n                                </div>\n                            </Grid>\n                            {offsetEnabled && (\n                                <Grid item>\n                                    <Tooltip title=\"Subtitle Offset\">\n                                        <Input\n                                            style={{\n                                                width: `${offsetInputWidth}ch`,\n                                            }}\n                                            inputRef={offsetInputRef}\n                                            disableUnderline={true}\n                                            className={classes.numberInput}\n                                            placeholder={'±' + Number(0).toFixed(2)}\n                                            onClick={handleNumberInputClicked}\n                                            onChange={(e) => setOffsetInputWidth(Math.max(5, e.target.value.length))}\n                                        />\n                                    </Tooltip>\n                                </Grid>\n                            )}\n                            {playbackRateEnabled && (\n                                <Grid item>\n                                    <Tooltip title=\"Playback Rate\">\n                                        <Input\n                                            style={{\n                                                width: `${playbackRateInputWidth}ch`,\n                                                marginLeft: 4,\n                                            }}\n                                            inputRef={playbackRateInputRef}\n                                            disableUnderline={true}\n                                            className={classes.numberInput}\n                                            placeholder={'×' + Number(1).toFixed(2)}\n                                            onClick={handleNumberInputClicked}\n                                            onChange={(e) =>\n                                                setPlaybackRateInputWidth(Math.max(5, e.target.value.length))\n                                            }\n                                        />\n                                    </Tooltip>\n                                </Grid>\n                            )}\n                            <Grid item style={{ flexGrow: 1 }}></Grid>\n                            {subtitlesToggle && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={onSubtitlesToggle}>\n                                        <SubtitlesIcon\n                                            className={subtitlesEnabled ? classes.button : classes.inactiveButton}\n                                        />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {videoFile && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={handleVideoUnloaderOpened}>\n                                        <VideocamIcon className={classes.button} />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {audioFile && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={handleAudioUnloaderOpened}>\n                                        <AudiotrackIcon className={classes.button} />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {audioTracks && audioTracks.length > 1 && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={handleAudioTrackSelectorOpened}>\n                                        <QueueMusicIcon className={classes.button} />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {tabs && tabs.length > 0 && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={handleTabSelectorOpened}>\n                                        <VideocamIcon\n                                            className={selectedTab ? classes.button : classes.inactiveButton}\n                                        />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {playModeEnabled && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={handlePlayModeSelectorOpened}>\n                                        <TuneIcon\n                                            className={playModeEnabled ? classes.button : classes.inactiveButton}\n                                        />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {popOutEnabled && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={onPopOutToggle}>\n                                        <OpenInNewIcon\n                                            className={classes.button}\n                                            style={popOut ? { transform: 'rotateX(180deg)' } : {}}\n                                        />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {fullscreenEnabled && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={onFullscreenToggle}>\n                                        {fullscreen ? (\n                                            <FullscreenExitIcon className={classes.button} />\n                                        ) : (\n                                            <FullscreenIcon className={classes.button} />\n                                        )}\n                                    </IconButton>\n                                </Grid>\n                            )}\n                        </Grid>\n                    </div>\n                </Fade>\n                <TabSelector\n                    open={tabSelectorOpen && show}\n                    anchorEl={tabSelectorAnchorEl}\n                    tabs={tabs}\n                    selectedTab={selectedTab}\n                    onClose={handleTabSelectorClosed}\n                    onTabSelected={handleTabSelected}\n                />\n                <AudioTrackSelector\n                    open={audioTrackSelectorOpen && show}\n                    anchorEl={audioTrackSelectorAnchorEl}\n                    audioTracks={audioTracks}\n                    selectedAudioTrack={selectedAudioTrack}\n                    onClose={handleAudioTrackSelectorClosed}\n                    onAudioTrackSelected={handleAudioTrackSelected}\n                />\n                <MediaUnloader\n                    open={audioUnloaderOpen}\n                    anchorEl={audioUnloaderAnchorEl}\n                    file={audioFile}\n                    onClose={handleAudioUnloaderClosed}\n                    onUnload={handleUnloadAudio}\n                />\n                <MediaUnloader\n                    open={videoUnloaderOpen}\n                    anchorEl={videoUnloaderAnchorEl}\n                    file={videoFile}\n                    onClose={handleVideoUnloaderClosed}\n                    onUnload={handleUnloadVideo}\n                />\n                <PlayModeSelector\n                    open={playModeSelectorOpen && show}\n                    anchorEl={playModeSelectorAnchorEl}\n                    selectedPlayMode={playMode}\n                    onClose={handlePlayModeSelectorClosed}\n                    onPlayMode={handlePlayModeSelected}\n                />\n            </div>\n        </React.Fragment>\n    );\n}\n","import { RefObject } from \"react\";\n\nexport interface MediaElement {\n    currentTime: number;\n    readyState: number;\n    playbackRate: number;\n    oncanplay: ((ev: Event) => void) | null;\n    play: () => Promise<void>;\n    pause: () => void;\n    duration: number;\n}\n\nexport default class MediaAdapter {\n    private readonly ref: RefObject<MediaElement | undefined>;\n    private readonly readyResolves: (() => void)[];\n\n    constructor(ref: RefObject<MediaElement | undefined>) {\n        this.ref = ref;\n        this.readyResolves = [];\n    }\n\n    async seek(time: number) {\n        return new Promise((resolve, reject) => {\n            if (this.ref.current) {\n                this.ref.current.currentTime = time;\n                this._onMediaCanPlay(() => resolve(undefined));\n            } else {\n                resolve(undefined);\n            }\n        });\n    }\n\n    async onReady() {\n        return new Promise((resolve, reject) => {\n            if (this.ref.current) {\n                this._onMediaCanPlay(() => resolve(undefined));\n            } else {\n                resolve(undefined);\n            }\n        });\n    }\n\n    _onMediaCanPlay(callback: () => void) {\n        if (this.ref.current?.readyState === 4) {\n            callback();\n            return;\n        }\n\n        if (this.ref.current && !this.ref.current.oncanplay) {\n            this.ref.current.oncanplay = (e) => {\n                for (const resolve of this.readyResolves) {\n                    resolve();\n                }\n\n                this.readyResolves.length = 0;\n\n                if (this.ref.current) {\n                    this.ref.current.oncanplay = null;\n                }\n            };\n        }\n\n        this.readyResolves.push(callback);\n    }\n\n    play() {\n        this.ref.current?.play();\n    }\n\n    pause() {\n        this.ref.current?.pause();\n    }\n\n    playbackRate(playbackRate: number) {\n        if (this.ref.current) {\n            this.ref.current.playbackRate = playbackRate;\n        }\n    }\n}\n","import React, { useCallback, useEffect, useState, useMemo, useRef, createRef, RefObject } from 'react';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport { keysAreEqual } from '../services/util';\nimport { useWindowSize } from '../hooks/useWindowSize';\nimport {\n    AsbplayerSettingsProvider,\n    PostMineAction,\n    surroundingSubtitles,\n    SubtitleModel,\n    SubtitleCollection,\n    KeyBinder,\n} from '@project/common';\nimport { SubtitleTextImage } from '@project/common/components';\nimport FileCopy from '@material-ui/icons/FileCopy';\nimport IconButton from '@material-ui/core/IconButton';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableRow, { TableRowProps } from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\nimport Clock from '../services/Clock';\n\ninterface StylesProps {\n    compressed: boolean;\n    appBarHidden: boolean;\n    windowWidth: number;\n}\n\nconst useSubtitlePlayerStyles = makeStyles<Theme, StylesProps, string>((theme) => ({\n    container: {\n        height: ({ appBarHidden }) => (appBarHidden ? '100vh' : 'calc(100vh - 64px)'),\n        position: 'relative',\n        overflowX: 'hidden',\n        backgroundColor: theme.palette.background.default,\n        width: ({ compressed, windowWidth }) => (compressed ? Math.max(350, 0.25 * windowWidth) : '100%'),\n    },\n    table: {\n        backgroundColor: theme.palette.background.default,\n        marginBottom: 75, // so the last row doesn't collide with controls\n    },\n    noSubtitles: {\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        padding: 15,\n        textAlign: 'center',\n    },\n}));\n\nconst useSubtitleRowStyles = makeStyles((theme) => ({\n    subtitleRow: {\n        '&:hover': {\n            backgroundColor: theme.palette.action.hover,\n        },\n    },\n    subtitle: {\n        fontSize: 20,\n        paddingRight: 0,\n        minWidth: 200,\n        width: '100%',\n        overflowWrap: 'anywhere',\n        whiteSpace: 'pre-wrap',\n    },\n    compressedSubtitle: {\n        fontSize: 16,\n        paddingRight: 0,\n        minWidth: 200,\n        width: '100%',\n        overflowWrap: 'anywhere',\n        whiteSpace: 'pre-wrap',\n    },\n    disabledSubtitle: {\n        color: 'transparent',\n        backgroundColor: theme.palette.action.disabledBackground,\n        borderRadius: 5,\n    },\n    timestamp: {\n        fontSize: 14,\n        color: '#aaaaaa',\n        textAlign: 'right',\n        paddingRight: 15,\n        paddingLeft: 5,\n    },\n    copyButton: {\n        textAlign: 'right',\n        padding: 0,\n    },\n}));\n\nexport interface DisplaySubtitleModel extends SubtitleModel {\n    displayTime: string;\n    index: number;\n}\n\ninterface SubtitleRowProps extends TableRowProps {\n    index: number;\n    compressed: boolean;\n    selected: boolean;\n    disabled: boolean;\n    subtitle: DisplaySubtitleModel;\n    copyButtonEnabled: boolean;\n    subtitleRef: RefObject<HTMLTableRowElement>;\n    onClickSubtitle: (index: number) => void;\n    onCopySubtitle: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>, index: number) => void;\n}\n\nconst SubtitleRow = React.memo((props: SubtitleRowProps) => {\n    const {\n        index,\n        selected,\n        subtitleRef,\n        onClickSubtitle,\n        onCopySubtitle,\n        compressed,\n        disabled,\n        subtitle,\n        copyButtonEnabled,\n        ...tableRowProps\n    } = props;\n    const classes = useSubtitleRowStyles();\n    const textRef = useRef<HTMLSpanElement>(null);\n    const [textSelected, setTextSelected] = useState<boolean>(false);\n    let className = compressed ? classes.compressedSubtitle : classes.subtitle;\n    let disabledClassName = disabled ? classes.disabledSubtitle : '';\n\n    if (subtitle.start < 0 || subtitle.end < 0) {\n        return null;\n    }\n\n    function handleMouseUp() {\n        const selection = document.getSelection();\n        const selected =\n            selection?.type === 'Range' && textRef.current?.isSameNode(selection.anchorNode?.parentNode ?? null);\n        setTextSelected(selected ?? false);\n    }\n\n    const content = subtitle.textImage ? (\n        <SubtitleTextImage availableWidth={window.screen.availWidth / 2} subtitle={subtitle} scale={1} />\n    ) : (\n        <span ref={textRef} className={disabledClassName}>\n            {subtitle.text}\n        </span>\n    );\n\n    return (\n        <TableRow\n            onClick={() => !textSelected && onClickSubtitle(index)}\n            onMouseUp={handleMouseUp}\n            ref={subtitleRef}\n            className={classes.subtitleRow}\n            selected={selected}\n            {...tableRowProps}\n        >\n            <TableCell className={className}>{content}</TableCell>\n            {copyButtonEnabled && (\n                <TableCell className={classes.copyButton}>\n                    <IconButton onClick={(e) => onCopySubtitle(e, index)}>\n                        <FileCopy fontSize={compressed ? 'small' : 'medium'} />\n                    </IconButton>\n                </TableCell>\n            )}\n            <TableCell className={classes.timestamp}>{subtitle.displayTime}</TableCell>\n        </TableRow>\n    );\n});\n\ninterface SubtitlePlayerProps {\n    clock: Clock;\n    onSeek: (progress: number, shouldPlay: boolean) => void;\n    onCopy: (\n        subtitle: SubtitleModel,\n        surroundingSubtitles: SubtitleModel[],\n        postMineAction: PostMineAction,\n        preventDuplicate: boolean\n    ) => void;\n    onOffsetChange: (offset: number) => void;\n    onToggleSubtitleTrack: (track: number) => void;\n    onStartedShowing?: () => void;\n    onWillStopShowing?: () => void;\n    playing: boolean;\n    subtitles?: DisplaySubtitleModel[];\n    subtitleCollection?: SubtitleCollection<DisplaySubtitleModel>;\n    length: number;\n    jumpToSubtitle?: SubtitleModel;\n    compressed: boolean;\n    copyButtonEnabled: boolean;\n    loading: boolean;\n    drawerOpen: boolean;\n    appBarHidden: boolean;\n    displayHelp?: string;\n    disableKeyEvents: boolean;\n    lastJumpToTopTimestamp: number;\n    hidden: boolean;\n    disabledSubtitleTracks: { [track: number]: boolean };\n    settingsProvider: AsbplayerSettingsProvider;\n    keyBinder: KeyBinder;\n}\n\nexport default function SubtitlePlayer({\n    clock,\n    onSeek,\n    onCopy,\n    onOffsetChange,\n    onToggleSubtitleTrack,\n    onStartedShowing,\n    onWillStopShowing,\n    playing,\n    subtitles,\n    subtitleCollection,\n    length,\n    jumpToSubtitle,\n    compressed,\n    copyButtonEnabled,\n    loading,\n    drawerOpen,\n    appBarHidden,\n    displayHelp,\n    disableKeyEvents,\n    lastJumpToTopTimestamp,\n    hidden,\n    disabledSubtitleTracks,\n    settingsProvider,\n    keyBinder,\n}: SubtitlePlayerProps) {\n    const playingRef = useRef<boolean>();\n    playingRef.current = playing;\n    const clockRef = useRef<Clock>(clock);\n    clockRef.current = clock;\n    const subtitleListRef = useRef<DisplaySubtitleModel[]>();\n    subtitleListRef.current = subtitles;\n    const subtitleRefs = useMemo<RefObject<HTMLTableRowElement>[]>(\n        () =>\n            subtitles\n                ? Array(subtitles.length)\n                      .fill(undefined)\n                      .map((_) => createRef<HTMLTableRowElement>())\n                : [],\n        [subtitles]\n    );\n    const subtitleCollectionRef = useRef<SubtitleCollection<DisplaySubtitleModel>>(SubtitleCollection.empty<DisplaySubtitleModel>());\n    subtitleCollectionRef.current = subtitleCollection ?? SubtitleCollection.empty<DisplaySubtitleModel>();\n    const subtitleRefsRef = useRef<RefObject<HTMLTableRowElement>[]>([]);\n    subtitleRefsRef.current = subtitleRefs;\n    const disableKeyEventsRef = useRef<boolean>();\n    disableKeyEventsRef.current = disableKeyEvents;\n    const [selectedSubtitleIndexes, setSelectedSubtitleIndexes] = useState<{ [index: number]: boolean }>({});\n    const selectedSubtitleIndexesRef = useRef<{ [index: number]: boolean }>({});\n    const lengthRef = useRef<number>(0);\n    lengthRef.current = length;\n    const hiddenRef = useRef<boolean>(false);\n    hiddenRef.current = hidden;\n    const lastScrollTimestampRef = useRef<number>(0);\n    const requestAnimationRef = useRef<number>();\n    const containerRef = useRef<HTMLElement>();\n    const drawerOpenRef = useRef<boolean>();\n    drawerOpenRef.current = drawerOpen;\n    const [windowWidth] = useWindowSize(true);\n    const classes = useSubtitlePlayerStyles({ compressed, windowWidth, appBarHidden });\n    const startedShowingSubtitleRef = useRef<SubtitleModel>();\n    const onStartedShowingRef = useRef<() => void>();\n    onStartedShowingRef.current = onStartedShowing;\n    const willStopShowingSubtitleRef = useRef<SubtitleModel>();\n    const onWillStopShowingRef = useRef<() => void>();\n    onWillStopShowingRef.current = onWillStopShowing;\n\n    // This effect should be scheduled only once as re-scheduling seems to cause performance issues.\n    // Therefore all of the state it operates on is contained in refs.\n    useEffect(() => {\n        const update = () => {\n            const subtitleRefs = subtitleRefsRef.current;\n            const clock = clockRef.current;\n            const currentSubtitleIndexes: { [index: number]: boolean } = {};\n            const timestamp = clock.time(lengthRef.current);\n\n            let slice = subtitleCollectionRef.current.subtitlesAt(timestamp);\n            const showing = slice.showing.length === 0 ? slice.lastShown ?? [] : slice.showing;\n            let smallestIndex: number | undefined;\n\n            for (const s of showing) {\n                currentSubtitleIndexes[s.index] = true;\n\n                if (smallestIndex === undefined || s.index < smallestIndex) {\n                    smallestIndex = s.index;\n                }\n            }\n\n            if (!keysAreEqual(currentSubtitleIndexes, selectedSubtitleIndexesRef.current)) {\n                selectedSubtitleIndexesRef.current = currentSubtitleIndexes;\n                setSelectedSubtitleIndexes(currentSubtitleIndexes);\n\n                if (smallestIndex !== undefined) {\n                    const scrollToSubtitleRef = subtitleRefs[smallestIndex];\n                    const allowScroll = !hiddenRef.current && Date.now() - lastScrollTimestampRef.current > 5000;\n\n                    if (scrollToSubtitleRef?.current && allowScroll) {\n                        scrollToSubtitleRef.current.scrollIntoView({\n                            block: 'center',\n                            inline: 'nearest',\n                            behavior: 'smooth',\n                        });\n                    }\n                }\n            }\n\n            if (startedShowingSubtitleRef.current !== slice.startedShowing) {\n                if (slice.startedShowing !== undefined) {\n                    onStartedShowingRef.current?.();\n                }\n\n                startedShowingSubtitleRef.current = slice.startedShowing;\n            }\n\n            if (willStopShowingSubtitleRef.current !== slice.willStopShowing) {\n                if (slice.willStopShowing !== undefined) {\n                    onWillStopShowingRef.current?.();\n                }\n\n                willStopShowingSubtitleRef.current = slice.willStopShowing;\n            }\n\n            requestAnimationRef.current = requestAnimationFrame(update);\n        };\n\n        requestAnimationRef.current = requestAnimationFrame(update);\n\n        return () => {\n            if (requestAnimationRef.current !== undefined) {\n                cancelAnimationFrame(requestAnimationRef.current);\n            }\n        };\n    }, []);\n\n    const scrollToCurrentSubtitle = useCallback(() => {\n        const selectedSubtitleIndexes = selectedSubtitleIndexesRef.current;\n\n        if (!selectedSubtitleIndexes) {\n            return;\n        }\n\n        const indexes = Object.keys(selectedSubtitleIndexes);\n\n        if (indexes.length === 0) {\n            return;\n        }\n\n        const scrollToSubtitleRef = subtitleRefs[Number(indexes[0])];\n\n        scrollToSubtitleRef?.current?.scrollIntoView({\n            block: 'center',\n            inline: 'nearest',\n            behavior: 'smooth',\n        });\n    }, [subtitleRefs]);\n\n    useEffect(() => {\n        if (hidden) {\n            return;\n        }\n\n        function scrollIfVisible() {\n            if (document.visibilityState === 'visible') {\n                scrollToCurrentSubtitle();\n            }\n        }\n\n        document.addEventListener('visibilitychange', scrollIfVisible);\n\n        return () => document.removeEventListener('visibilitychange', scrollIfVisible);\n    }, [hidden, selectedSubtitleIndexes, subtitleRefs, scrollToCurrentSubtitle]);\n\n    useEffect(() => {\n        if (!hidden) {\n            scrollToCurrentSubtitle();\n        }\n    }, [hidden, scrollToCurrentSubtitle]);\n\n    useEffect(() => {\n        if (hiddenRef.current) {\n            return;\n        }\n\n        const subtitleRefs = subtitleRefsRef.current;\n\n        if (!subtitleRefs || subtitleRefs.length === 0) {\n            return;\n        }\n\n        const firstSubtitleRef = subtitleRefs[0];\n        firstSubtitleRef?.current?.scrollIntoView({\n            block: 'center',\n            inline: 'nearest',\n            behavior: 'smooth',\n        });\n    }, [lastJumpToTopTimestamp]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindAdjustOffset(\n            (event, offset) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onOffsetChange(offset);\n            },\n            () => disableKeyEvents,\n            () => subtitles\n        );\n\n        return () => unbind();\n    }, [keyBinder, onOffsetChange, disableKeyEvents, subtitles]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindOffsetToSubtitle(\n            (event, offset) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onOffsetChange(offset);\n            },\n            () => disableKeyEvents,\n            () => clock.time(length),\n            () => subtitles\n        );\n\n        return () => unbind();\n    }, [keyBinder, onOffsetChange, disableKeyEvents, clock, subtitles, length]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindSeekToSubtitle(\n            (event, subtitle) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onSeek(subtitle.start, false);\n            },\n            () => disableKeyEvents,\n            () => clock.time(length),\n            () => subtitles\n        );\n\n        return () => unbind();\n    }, [keyBinder, onSeek, subtitles, disableKeyEvents, clock, length]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindSeekToBeginningOfCurrentSubtitle(\n            (event, subtitle) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onSeek(subtitle.start, false);\n            },\n            () => disableKeyEvents,\n            () => clock.time(length),\n            () => subtitles\n        );\n\n        return () => unbind();\n    }, [keyBinder, onSeek, subtitles, disableKeyEvents, clock, length]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindSeekBackwardOrForward(\n            (event, forward) => {\n                event.stopPropagation();\n                event.preventDefault();\n                if (forward) {\n                    onSeek(Math.min(length, clock.time(length) + 10000), false);\n                } else {\n                    onSeek(Math.max(0, clock.time(length) - 10000), false);\n                }\n            },\n            () => disableKeyEvents\n        );\n\n        return () => unbind();\n    }, [keyBinder, clock, length, disableKeyEvents, onSeek]);\n\n    useEffect(() => {\n        function handleScroll() {\n            lastScrollTimestampRef.current = Date.now();\n        }\n\n        const table = containerRef.current;\n        table?.addEventListener('wheel', handleScroll);\n\n        return () => table?.removeEventListener('wheel', handleScroll);\n    }, [containerRef, lastScrollTimestampRef]);\n\n    useEffect(() => {\n        if (hidden) {\n            return;\n        }\n\n        if (!jumpToSubtitle || !subtitles) {\n            return;\n        }\n\n        let jumpToIndex = -1;\n        let i = 0;\n\n        for (let s of subtitles) {\n            if (s.originalStart === jumpToSubtitle.originalStart && s.text === jumpToSubtitle.text) {\n                jumpToIndex = i;\n                break;\n            }\n\n            ++i;\n        }\n\n        if (jumpToIndex !== -1) {\n            subtitleRefs[jumpToIndex]?.current?.scrollIntoView({\n                block: 'center',\n                inline: 'nearest',\n                behavior: 'smooth',\n            });\n        }\n    }, [hidden, jumpToSubtitle, subtitles, subtitleRefs]);\n\n    const calculateSurroundingSubtitlesForIndex = useCallback(\n        (index: number) => {\n            if (!selectedSubtitleIndexesRef.current || !subtitles) {\n                return [];\n            }\n\n            return surroundingSubtitles(\n                subtitles,\n                index,\n                settingsProvider.surroundingSubtitlesCountRadius,\n                settingsProvider.surroundingSubtitlesTimeRadius\n            );\n        },\n        [subtitles, settingsProvider.surroundingSubtitlesCountRadius, settingsProvider.surroundingSubtitlesTimeRadius]\n    );\n\n    const calculateSurroundingSubtitles = useCallback(() => {\n        if (!selectedSubtitleIndexesRef.current) {\n            return [];\n        }\n        const index = Math.min(...Object.keys(selectedSubtitleIndexesRef.current).map((i) => Number(i)));\n        return calculateSurroundingSubtitlesForIndex(index);\n    }, [calculateSurroundingSubtitlesForIndex]);\n\n    const calculateCurrentSubtitle = useCallback(() => {\n        const subtitleIndexes = Object.keys(selectedSubtitleIndexesRef.current).map((i) => Number(i));\n\n        if (!subtitles || !subtitleIndexes || subtitleIndexes.length === 0) {\n            return undefined;\n        }\n\n        const index = Math.min(...subtitleIndexes);\n        return subtitles[index];\n    }, [subtitles]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindCopy(\n            (event, subtitle) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onCopy(subtitle, calculateSurroundingSubtitles(), PostMineAction.none, false);\n            },\n            () => disableKeyEventsRef.current ?? false,\n            () => calculateCurrentSubtitle()\n        );\n\n        return () => unbind();\n    }, [keyBinder, calculateCurrentSubtitle, calculateSurroundingSubtitles, onCopy]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindToggleSubtitleTrackInList(\n            (event, track) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onToggleSubtitleTrack(track);\n            },\n            () => disableKeyEvents\n        );\n\n        return () => unbind();\n    }, [keyBinder, disableKeyEvents, onToggleSubtitleTrack]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindAnkiExport(\n            (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n                const subtitleIndexes = Object.keys(selectedSubtitleIndexesRef.current).map((i) => Number(i));\n\n                if (subtitles && subtitleIndexes && subtitleIndexes.length > 0) {\n                    const index = Math.min(...subtitleIndexes);\n                    onCopy(\n                        subtitles[index],\n                        calculateSurroundingSubtitlesForIndex(index),\n                        PostMineAction.showAnkiDialog,\n                        true\n                    );\n                }\n            },\n            () => !subtitles || subtitles.length === 0 || disableKeyEvents\n        );\n\n        return () => unbind();\n    }, [keyBinder, onCopy, disableKeyEvents, subtitles, calculateSurroundingSubtitlesForIndex]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindUpdateLastCard(\n            (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n                const subtitleIndexes = Object.keys(selectedSubtitleIndexesRef.current).map((i) => Number(i));\n\n                if (subtitles && subtitleIndexes && subtitleIndexes.length > 0) {\n                    const index = Math.min(...subtitleIndexes);\n                    onCopy(\n                        subtitles[index],\n                        calculateSurroundingSubtitlesForIndex(index),\n                        PostMineAction.updateLastCard,\n                        true\n                    );\n                }\n            },\n            () => !subtitles || subtitles.length === 0 || disableKeyEvents\n        );\n\n        return () => unbind();\n    }, [keyBinder, onCopy, disableKeyEvents, subtitles, calculateSurroundingSubtitlesForIndex]);\n\n    const handleClick = useCallback(\n        (index: number) => {\n            if (!subtitles) {\n                return;\n            }\n\n            const selectedSubtitleIndexes = selectedSubtitleIndexesRef.current || {};\n            onSeek(subtitles[index].start, !playingRef.current && index in selectedSubtitleIndexes);\n        },\n        [subtitles, onSeek]\n    );\n\n    const handleCopy = useCallback(\n        (e: React.MouseEvent<HTMLButtonElement, MouseEvent>, index: number) => {\n            e.preventDefault();\n            e.stopPropagation();\n\n            if (!subtitles) {\n                return;\n            }\n\n            onCopy(subtitles[index], calculateSurroundingSubtitlesForIndex(index), PostMineAction.none, false);\n        },\n        [subtitles, calculateSurroundingSubtitlesForIndex, onCopy]\n    );\n\n    let subtitleTable = null;\n\n    if (!subtitles || subtitles.length === 0) {\n        if (!loading && displayHelp) {\n            subtitleTable = !loading && displayHelp && (\n                <div className={classes.noSubtitles}>\n                    <Typography variant=\"h6\">{displayHelp}</Typography>\n                </div>\n            );\n        } else if (subtitles && subtitles.length === 0) {\n            subtitleTable = (\n                <div className={classes.noSubtitles}>\n                    <Typography variant=\"h6\">No subtitles</Typography>\n                </div>\n            );\n        }\n    } else {\n        subtitleTable = (\n            <TableContainer className={classes.table}>\n                <Table>\n                    <TableBody>\n                        {subtitles.map((s: SubtitleModel, index: number) => {\n                            const selected = index in selectedSubtitleIndexes;\n\n                            return (\n                                <SubtitleRow\n                                    key={index}\n                                    index={index}\n                                    compressed={compressed}\n                                    selected={selected}\n                                    copyButtonEnabled={copyButtonEnabled}\n                                    disabled={disabledSubtitleTracks[s.track]}\n                                    subtitle={subtitles[index]}\n                                    subtitleRef={subtitleRefs[index]}\n                                    onClickSubtitle={handleClick}\n                                    onCopySubtitle={handleCopy}\n                                />\n                            );\n                        })}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        );\n    }\n\n    return (\n        <Paper square elevation={0} ref={containerRef} className={classes.container}>\n            {subtitleTable}\n        </Paper>\n    );\n}\n","import {\n    AlertMessage,\n    AnkiSettings,\n    AnkiSettingsToVideoMessage,\n    AppBarToggleMessageToVideoMessage,\n    AudioModel,\n    AudioTrackModel,\n    AudioTrackSelectedFromVideoMessage,\n    AudioTrackSelectedToVideoMessage,\n    CopyMessage,\n    CurrentTimeFromVideoMessage,\n    CurrentTimeToVideoMessage,\n    FullscreenToggleMessageToVideoMessage,\n    HideSubtitlePlayerToggleToVideoMessage,\n    ImageModel,\n    MiscSettings,\n    MiscSettingsToVideoMessage,\n    OffsetFromVideoMessage,\n    OffsetToVideoMessage,\n    PauseFromVideoMessage,\n    PlaybackRateFromVideoMessage,\n    PlaybackRateToVideoMessage,\n    PlayFromVideoMessage,\n    PlayMode,\n    PlayModeMessage,\n    PostMineAction,\n    ReadyFromVideoMessage,\n    ReadyStateFromVideoMessage,\n    ReadyToVideoMessage,\n    SubtitleModel,\n    SubtitleSettings,\n    SubtitleSettingsToVideoMessage,\n    SubtitlesToVideoMessage,\n    ToggleSubtitleTrackInListFromVideoMessage,\n} from '@project/common';\nimport { VideoProtocol } from './VideoProtocol';\n\nexport default class VideoChannel {\n    private readonly protocol: VideoProtocol;\n    private time: number;\n    private isReady: boolean;\n    private readyCallbacks: ((paused: boolean) => void)[];\n    private playCallbacks: ((echo: boolean) => void)[];\n    private pauseCallbacks: ((echo: boolean) => void)[];\n    private audioTrackSelectedCallbacks: ((audioTrack: string) => void)[];\n    private currentTimeCallbacks: ((currentTime: number, echo: boolean) => void)[];\n    private exitCallbacks: (() => void)[];\n    private offsetCallbacks: ((offset: number) => void)[];\n    private playbackRateCallbacks: ((playbackRate: number, echo: boolean) => void)[];\n    private popOutToggleCallbacks: (() => void)[];\n    private copyCallbacks: ((\n        subtitle: SubtitleModel,\n        surroundingSubtitles: SubtitleModel[],\n        audio: AudioModel | undefined,\n        image: ImageModel | undefined,\n        url: string | undefined,\n        postMineAction: PostMineAction,\n        preventDuplicate: boolean,\n        id: string | undefined\n    ) => void)[];\n    private playModeCallbacks: ((mode: PlayMode) => void)[];\n    private hideSubtitlePlayerToggleCallbacks: (() => void)[];\n    private appBarToggleCallbacks: (() => void)[];\n    private fullscreenToggleCallbacks: (() => void)[];\n    private ankiDialogRequestCallbacks: (() => void)[];\n    private toggleSubtitleTrackInListCallbacks: ((track: number) => void)[];\n\n    readyState: number;\n    oncanplay: ((ev: Event) => void) | null = null;\n    audioTracks?: AudioTrackModel[];\n    selectedAudioTrack?: string;\n    duration: number;\n    _playbackRate: number;\n\n    constructor(protocol: VideoProtocol) {\n        this.protocol = protocol;\n        this.time = 0;\n        this.duration = 0;\n        this.isReady = false;\n        this.readyState = 0;\n        this._playbackRate = 1;\n        this.selectedAudioTrack = undefined;\n        this.readyCallbacks = [];\n        this.playCallbacks = [];\n        this.pauseCallbacks = [];\n        this.currentTimeCallbacks = [];\n        this.audioTrackSelectedCallbacks = [];\n        this.exitCallbacks = [];\n        this.offsetCallbacks = [];\n        this.playbackRateCallbacks = [];\n        this.popOutToggleCallbacks = [];\n        this.copyCallbacks = [];\n        this.playModeCallbacks = [];\n        this.hideSubtitlePlayerToggleCallbacks = [];\n        this.appBarToggleCallbacks = [];\n        this.fullscreenToggleCallbacks = [];\n        this.ankiDialogRequestCallbacks = [];\n        this.toggleSubtitleTrackInListCallbacks = [];\n\n        const that = this;\n\n        this.protocol.onMessage = (event) => {\n            switch (event.data.command) {\n                case 'ready':\n                    const readyMessage = event.data as ReadyFromVideoMessage;\n\n                    that.duration = readyMessage.duration;\n                    that.isReady = true;\n                    that.audioTracks = readyMessage.audioTracks;\n                    that.selectedAudioTrack = readyMessage.selectedAudioTrack;\n                    that.readyState = 4;\n                    that.time = readyMessage.currentTime;\n                    this._playbackRate = readyMessage.playbackRate;\n\n                    for (let callback of that.readyCallbacks) {\n                        callback(readyMessage.paused);\n                    }\n                    break;\n                case 'readyState':\n                    const readyStateMessage = event.data as ReadyStateFromVideoMessage;\n\n                    that.readyState = readyStateMessage.value;\n                    if (that.readyState === 4) {\n                        that.oncanplay?.(new Event('canplay'));\n                    }\n                    break;\n                case 'play':\n                    const playMessage = event.data as PlayFromVideoMessage;\n\n                    for (let callback of that.playCallbacks) {\n                        callback(playMessage.echo);\n                    }\n                    break;\n                case 'pause':\n                    const pauseMessage = event.data as PauseFromVideoMessage;\n\n                    for (let callback of that.pauseCallbacks) {\n                        callback(pauseMessage.echo);\n                    }\n                    break;\n                case 'audioTrackSelected':\n                    const audioTrackSelectedMessage = event.data as AudioTrackSelectedFromVideoMessage;\n\n                    for (let callback of that.audioTrackSelectedCallbacks) {\n                        that.selectedAudioTrack = audioTrackSelectedMessage.id;\n                        callback(audioTrackSelectedMessage.id);\n                    }\n                    break;\n                case 'currentTime':\n                    const currentTimeMessage = event.data as CurrentTimeFromVideoMessage;\n\n                    for (let callback of that.currentTimeCallbacks) {\n                        callback(currentTimeMessage.value, currentTimeMessage.echo);\n                    }\n                    break;\n                case 'exit':\n                    for (let callback of that.exitCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'offset':\n                    const offsetMessage = event.data as OffsetFromVideoMessage;\n\n                    for (let callback of that.offsetCallbacks) {\n                        callback(offsetMessage.value);\n                    }\n                    break;\n                case 'playbackRate':\n                    const playbackRateMessage = event.data as PlaybackRateFromVideoMessage;\n\n                    for (const callback of that.playbackRateCallbacks) {\n                        callback(playbackRateMessage.value, playbackRateMessage.echo);\n                    }\n                    break;\n                case 'popOutToggle':\n                    for (let callback of that.popOutToggleCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'copy':\n                    for (let callback of that.copyCallbacks) {\n                        const copyMessage = event.data as CopyMessage;\n\n                        callback(\n                            copyMessage.subtitle,\n                            copyMessage.surroundingSubtitles,\n                            copyMessage.audio,\n                            copyMessage.image,\n                            copyMessage.url,\n                            copyMessage.postMineAction ?? PostMineAction.none,\n                            copyMessage.preventDuplicate ?? false,\n                            copyMessage.id\n                        );\n                    }\n                    break;\n                case 'playMode':\n                    for (let callback of that.playModeCallbacks) {\n                        const playModeMessage = event.data as PlayModeMessage;\n                        callback(playModeMessage.playMode);\n                    }\n                    break;\n                case 'hideSubtitlePlayerToggle':\n                    for (let callback of that.hideSubtitlePlayerToggleCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'appBarToggle':\n                    for (let callback of that.appBarToggleCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'fullscreenToggle':\n                    for (const callback of this.fullscreenToggleCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'sync':\n                    // ignore\n                    break;\n                case 'syncv2':\n                    // ignore\n                    break;\n                case 'ankiDialogRequest':\n                    for (let callback of that.ankiDialogRequestCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'toggleSubtitleTrackInList':\n                    const toggleSubtitleTrackInListMessage = event.data as ToggleSubtitleTrackInListFromVideoMessage;\n\n                    for (const callback of that.toggleSubtitleTrackInListCallbacks) {\n                        callback(toggleSubtitleTrackInListMessage.track);\n                    }\n                    break;\n                default:\n                    console.error('Unrecognized event ' + event.data.command);\n            }\n        };\n    }\n\n    get currentTime() {\n        return this.time;\n    }\n\n    set currentTime(value: number) {\n        this.time = value;\n        this.readyState = 3;\n        const message: CurrentTimeToVideoMessage = { command: 'currentTime', value: this.time };\n        this.protocol.postMessage(message);\n    }\n\n    get playbackRate() {\n        return this._playbackRate;\n    }\n\n\n    set playbackRate(playbackRate: number) {\n        const message: PlaybackRateToVideoMessage = { command: 'playbackRate', value: playbackRate };\n        this.protocol.postMessage(message);\n    }\n\n    onReady(callback: (paused: boolean) => void) {\n        if (this.isReady) {\n            callback(false);\n        }\n        this.readyCallbacks.push(callback);\n    }\n\n    onPlay(callback: (echo: boolean) => void) {\n        this.playCallbacks.push(callback);\n    }\n\n    onPause(callback: (echo: boolean) => void) {\n        this.pauseCallbacks.push(callback);\n    }\n\n    onCurrentTime(callback: (currentTime: number, echo: boolean) => void) {\n        this.currentTimeCallbacks.push(callback);\n    }\n\n    onAudioTrackSelected(callback: (id: string) => void) {\n        this.audioTrackSelectedCallbacks.push(callback);\n    }\n\n    onExit(callback: () => void) {\n        this.exitCallbacks.push(callback);\n    }\n\n    onOffset(callback: (offset: number) => void) {\n        this.offsetCallbacks.push(callback);\n    }\n\n    onPlaybackRate(callback: (playbackRate: number, echo: boolean) => void) {\n        this.playbackRateCallbacks.push(callback);\n    }\n\n    onPopOutToggle(callback: () => void) {\n        this.popOutToggleCallbacks.push(callback);\n    }\n\n    onCopy(\n        callback: (\n            subtitle: SubtitleModel,\n            surroundingSubtitles: SubtitleModel[],\n            audio: AudioModel | undefined,\n            image: ImageModel | undefined,\n            url: string | undefined,\n            postMineAction: PostMineAction,\n            preventDuplicate: boolean,\n            id: string | undefined\n        ) => void\n    ) {\n        this.copyCallbacks.push(callback);\n    }\n\n    onPlayMode(callback: (playMode: PlayMode) => void) {\n        this.playModeCallbacks.push(callback);\n    }\n\n    onHideSubtitlePlayerToggle(callback: () => void) {\n        this.hideSubtitlePlayerToggleCallbacks.push(callback);\n    }\n\n    onAppBarToggle(callback: () => void) {\n        this.appBarToggleCallbacks.push(callback);\n    }\n\n    onFullscreenToggle(callback: () => void) {\n        this.fullscreenToggleCallbacks.push(callback);\n    }\n\n    onAnkiDialogRequest(callback: () => void) {\n        this.ankiDialogRequestCallbacks.push(callback);\n    }\n\n    onToggleSubtitleTrackInList(callback: (track: number) => void) {\n        this.toggleSubtitleTrackInListCallbacks.push(callback);\n    }\n\n    ready(duration: number, videoFileName?: string) {\n        const message: ReadyToVideoMessage = { command: 'ready', duration, videoFileName };\n        this.protocol.postMessage(message);\n    }\n\n    init() {\n        this.protocol.postMessage({ command: 'init' });\n    }\n\n    // Return a promise to implement the analogous HTMLMediaElement method\n    play(): Promise<void> {\n        this.protocol.postMessage({ command: 'play' });\n        return new Promise((resolve, reject) => resolve());\n    }\n\n    pause() {\n        this.protocol.postMessage({ command: 'pause' });\n    }\n\n    audioTrackSelected(id: string) {\n        const message: AudioTrackSelectedToVideoMessage = { command: 'audioTrackSelected', id: id };\n        this.protocol.postMessage(message);\n    }\n\n    subtitles(subtitles: SubtitleModel[], subtitleFileNames: string[]) {\n        this.protocol.postMessage({\n            command: 'subtitles',\n            value: subtitles,\n            name: subtitleFileNames.length > 0 ? subtitleFileNames[0] : null,\n            names: subtitleFileNames,\n        } as SubtitlesToVideoMessage);\n    }\n\n    offset(offset: number) {\n        const message: OffsetToVideoMessage = { command: 'offset', value: offset };\n        this.protocol.postMessage(message);\n    }\n\n    subtitleSettings(settings: SubtitleSettings) {\n        const message: SubtitleSettingsToVideoMessage = { command: 'subtitleSettings', value: settings };\n        this.protocol.postMessage(message);\n    }\n\n    playMode(playMode: PlayMode) {\n        const message: PlayModeMessage = {\n            command: 'playMode',\n            playMode: playMode,\n        };\n        this.protocol.postMessage(message);\n    }\n\n    hideSubtitlePlayerToggle(hidden: boolean) {\n        const message: HideSubtitlePlayerToggleToVideoMessage = {\n            command: 'hideSubtitlePlayerToggle',\n            value: hidden,\n        };\n        this.protocol.postMessage(message);\n    }\n\n    appBarToggle(hidden: boolean) {\n        const message: AppBarToggleMessageToVideoMessage = {\n            command: 'appBarToggle',\n            value: hidden,\n        };\n        this.protocol.postMessage(message);\n    }\n\n    fullscreenToggle(fullscreen: boolean) {\n        const message: FullscreenToggleMessageToVideoMessage = {\n            command: 'fullscreenToggle',\n            value: fullscreen,\n        };\n        this.protocol.postMessage(message);\n    }\n\n    ankiSettings(settings: AnkiSettings) {\n        const message: AnkiSettingsToVideoMessage = { command: 'ankiSettings', value: settings };\n        this.protocol.postMessage(message);\n    }\n\n    miscSettings(settings: MiscSettings) {\n        const message: MiscSettingsToVideoMessage = { command: 'miscSettings', value: settings };\n        this.protocol.postMessage(message);\n    }\n\n    alert(message: string, severity: string) {\n        const msg: AlertMessage = { command: 'alert', message, severity };\n        this.protocol.postMessage(msg);\n    }\n\n    close() {\n        this.protocol.postMessage({ command: 'close' });\n        this.protocol.close();\n        this.readyCallbacks = [];\n        this.playCallbacks = [];\n        this.pauseCallbacks = [];\n        this.currentTimeCallbacks = [];\n        this.audioTrackSelectedCallbacks = [];\n        this.exitCallbacks = [];\n        this.offsetCallbacks = [];\n        this.playbackRateCallbacks = [];\n        this.popOutToggleCallbacks = [];\n        this.copyCallbacks = [];\n        this.playModeCallbacks = [];\n        this.hideSubtitlePlayerToggleCallbacks = [];\n        this.appBarToggleCallbacks = [];\n        this.fullscreenToggleCallbacks = [];\n        this.ankiDialogRequestCallbacks = [];\n        this.toggleSubtitleTrackInListCallbacks = [];\n    }\n}\n","import React, { useEffect, useState, useMemo, useCallback, useRef, MutableRefObject } from 'react';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport { v4 as uuidv4 } from 'uuid';\nimport {\n    AsbplayerSettingsProvider,\n    AudioModel,\n    AudioTrackModel,\n    AutoPausePreference,\n    ImageModel,\n    KeyBinder,\n    mockSurroundingSubtitles,\n    PlayMode,\n    PostMineAction,\n    SubtitleCollection,\n    SubtitleModel,\n    VideoTabModel,\n} from '@project/common';\nimport { timeDurationDisplay } from '../services/util';\nimport BroadcastChannelVideoProtocol from '../services/BroadcastChannelVideoProtocol';\nimport ChromeTabVideoProtocol from '../services/ChromeTabVideoProtocol';\nimport Clock from '../services/Clock';\nimport Controls, { Point } from './Controls';\nimport Grid from '@material-ui/core/Grid';\nimport MediaAdapter, { MediaElement } from '../services/MediaAdapter';\nimport SubtitlePlayer, { DisplaySubtitleModel } from './SubtitlePlayer';\nimport VideoChannel from '../services/VideoChannel';\nimport ChromeExtension from '../services/ChromeExtension';\nimport SubtitleReader from '../services/SubtitleReader';\nimport PlaybackPreferences from '../services/PlaybackPreferences';\nimport lte from 'semver/functions/lte';\nimport gte from 'semver/functions/gte';\n\ninterface StylesProps {\n    appBarHidden: boolean;\n}\n\nconst useStyles = makeStyles<Theme, StylesProps>({\n    root: ({ appBarHidden }) => ({\n        height: appBarHidden ? '100vh' : 'calc(100vh - 64px)',\n        position: 'relative',\n        overflowX: 'hidden',\n    }),\n    container: {\n        width: '100%',\n        height: '100%',\n    },\n    videoFrame: {\n        width: '100%',\n        height: '100%',\n        border: 0,\n        display: 'block',\n    },\n});\n\nfunction trackLength(\n    audioRef: MutableRefObject<HTMLAudioElement | null>,\n    videoRef: MutableRefObject<MediaElement | undefined>,\n    subtitles: SubtitleModel[] | undefined,\n    useOffset?: boolean\n) {\n    let subtitlesLength;\n    if (subtitles && subtitles.length > 0) {\n        if (useOffset) {\n            subtitlesLength = subtitles[subtitles.length - 1].end;\n        } else {\n            subtitlesLength = subtitles[subtitles.length - 1].originalEnd;\n        }\n    } else {\n        subtitlesLength = 0;\n    }\n\n    const audioLength = audioRef.current && audioRef.current.duration ? 1000 * audioRef.current.duration : 0;\n\n    const videoLength = videoRef.current && videoRef.current.duration ? 1000 * videoRef.current.duration : 0;\n\n    return Math.max(videoLength, Math.max(subtitlesLength, audioLength));\n}\n\nexport interface MediaSources {\n    subtitleFiles: File[];\n    audioFile?: File;\n    audioFileUrl?: string;\n    videoFile?: File;\n    videoFileUrl?: string;\n}\n\nexport interface AnkiDialogFinishedRequest {\n    resume: boolean;\n    timestamp: number;\n}\n\ninterface PlayerProps {\n    sources: MediaSources;\n    subtitleReader: SubtitleReader;\n    settingsProvider: AsbplayerSettingsProvider;\n    playbackPreferences: PlaybackPreferences;\n    keyBinder: KeyBinder;\n    extension: ChromeExtension;\n    videoFrameRef: MutableRefObject<HTMLIFrameElement | null>;\n    videoChannelRef: MutableRefObject<VideoChannel | null>;\n    drawerOpen: boolean;\n    appBarHidden: boolean;\n    videoFullscreen: boolean;\n    hideSubtitlePlayer: boolean;\n    videoPopOut: boolean;\n    tab?: VideoTabModel;\n    availableTabs: VideoTabModel[];\n    ankiDialogRequested: boolean;\n    ankiDialogFinishedRequest: AnkiDialogFinishedRequest;\n    onError: (error: string) => void;\n    onUnloadAudio: (url: string) => void;\n    onUnloadVideo: (url: string) => void;\n    onCopy: (\n        subtitle: SubtitleModel,\n        surroundingSubtitles: SubtitleModel[],\n        audioFile: File | undefined,\n        videoFile: File | undefined,\n        subtitleFile: File | undefined,\n        mediaTimestamp: number | undefined,\n        audioTrack: string | undefined,\n        filePlaybackRate: number | undefined,\n        audio: AudioModel | undefined,\n        image: ImageModel | undefined,\n        url: string | undefined,\n        postMineAction: PostMineAction | undefined,\n        preventDuplicate: boolean | undefined,\n        id: string | undefined\n    ) => void;\n    onLoaded: () => void;\n    onTabSelected: (tab: VideoTabModel) => void;\n    onAnkiDialogRequest: () => void;\n    onAppBarToggle: () => void;\n    onFullscreenToggle: () => void;\n    onHideSubtitlePlayer: () => void;\n    onVideoPopOut: () => void;\n    onPlayModeChangedViaBind: (oldPlayMode: PlayMode, newPlayMode: PlayMode) => void;\n    disableKeyEvents: boolean;\n    jumpToSubtitle?: SubtitleModel;\n    rewindSubtitle?: SubtitleModel;\n}\n\nexport default function Player({\n    sources: { subtitleFiles, audioFile, audioFileUrl, videoFile, videoFileUrl },\n    subtitleReader,\n    settingsProvider,\n    playbackPreferences,\n    keyBinder,\n    extension,\n    videoFrameRef,\n    videoChannelRef,\n    drawerOpen,\n    appBarHidden,\n    videoFullscreen,\n    hideSubtitlePlayer,\n    videoPopOut,\n    tab,\n    availableTabs,\n    ankiDialogRequested,\n    ankiDialogFinishedRequest,\n    onError,\n    onUnloadAudio,\n    onUnloadVideo,\n    onCopy,\n    onLoaded,\n    onTabSelected,\n    onAnkiDialogRequest,\n    onAppBarToggle,\n    onFullscreenToggle,\n    onHideSubtitlePlayer,\n    onVideoPopOut,\n    onPlayModeChangedViaBind,\n    disableKeyEvents,\n    jumpToSubtitle,\n    rewindSubtitle,\n}: PlayerProps) {\n    const [playMode, setPlayMode] = useState<PlayMode>(PlayMode.normal);\n    const playModeRef = useRef<PlayMode>();\n    playModeRef.current = playMode;\n    const [subtitles, setSubtitles] = useState<DisplaySubtitleModel[]>();\n    const subtitleCollection = useMemo<SubtitleCollection<DisplaySubtitleModel>>(\n        () =>\n            new SubtitleCollection(subtitles ?? [], {\n                returnLastShown: true,\n                returnNextToShow: playMode === PlayMode.condensed,\n                showingCheckRadiusMs: 100,\n            }),\n        [subtitles, playMode]\n    );\n    const subtitlesRef = useRef<SubtitleModel[]>();\n    subtitlesRef.current = subtitles;\n    const playModeEnabled = subtitles && subtitles.length > 0 && Boolean(videoFileUrl || audioFileUrl);\n    const [loadingSubtitles, setLoadingSubtitles] = useState<boolean>(false);\n    const [playing, setPlaying] = useState<boolean>(false);\n    const [lastJumpToTopTimestamp, setLastJumpToTopTimestamp] = useState<number>(0);\n    const [offset, setOffset] = useState<number>(0);\n    const [playbackRate, setPlaybackRate] = useState<number>(1);\n    const playingRef = useRef<boolean>();\n    playingRef.current = playing;\n    const [, updateState] = useState<any>();\n    const [audioTracks, setAudioTracks] = useState<AudioTrackModel[]>();\n    const [selectedAudioTrack, setSelectedAudioTrack] = useState<string>();\n    const [channelId, setChannelId] = useState<string>();\n    const [, setResumeOnFinishedAnkiDialogRequest] = useState<boolean>(false);\n    const hideSubtitlePlayerRef = useRef<boolean>();\n    hideSubtitlePlayerRef.current = hideSubtitlePlayer;\n    const [disabledSubtitleTracks, setDisabledSubtitleTracks] = useState<{ [track: number]: boolean }>({});\n    const forceUpdate = useCallback(() => updateState({}), []);\n    const mousePositionRef = useRef<Point>({ x: 0, y: 0 });\n    const audioRef = useRef<HTMLAudioElement>(null);\n    const videoRef = useRef<MediaElement>();\n    const mediaAdapter = useMemo(() => {\n        if (audioFileUrl) {\n            return new MediaAdapter(audioRef);\n        } else if (videoFileUrl || tab) {\n            return new MediaAdapter(videoRef);\n        }\n\n        return new MediaAdapter({ current: null });\n    }, [audioFileUrl, videoFileUrl, tab]);\n    const clock = useMemo<Clock>(() => new Clock(), []);\n    const classes = useStyles({ appBarHidden });\n    const lengthRef = useRef<number>(0);\n    lengthRef.current = trackLength(audioRef, videoRef, subtitles, true);\n\n    const seek = useCallback(\n        async (time: number, clock: Clock, forwardToMedia: boolean) => {\n            clock.setTime(time);\n            forceUpdate();\n\n            if (forwardToMedia) {\n                await mediaAdapter.seek(time / 1000);\n            }\n        },\n        [forceUpdate, mediaAdapter]\n    );\n\n    const updatePlaybackRate = useCallback(\n        (playbackRate: number, forwardToMedia: boolean) => {\n            clock.rate = playbackRate;\n            setPlaybackRate(playbackRate);\n\n            if (forwardToMedia) {\n                mediaAdapter.playbackRate(playbackRate);\n            }\n        },\n        [clock, mediaAdapter]\n    );\n\n    const applyOffset = useCallback(\n        (offset: number, forwardToVideo: boolean) => {\n            setOffset(offset);\n            setSubtitles((subtitles) => {\n                if (!subtitles) {\n                    return;\n                }\n\n                const length = subtitles.length > 0 ? subtitles[subtitles.length - 1].end + offset : 0;\n\n                const newSubtitles = subtitles.map((s, i) => ({\n                    text: s.text,\n                    textImage: s.textImage,\n                    start: s.originalStart + offset,\n                    originalStart: s.originalStart,\n                    end: s.originalEnd + offset,\n                    originalEnd: s.originalEnd,\n                    displayTime: timeDurationDisplay(s.originalStart + offset, length),\n                    track: s.track,\n                    index: i,\n                }));\n\n                if (forwardToVideo) {\n                    if (videoRef.current instanceof VideoChannel) {\n                        videoRef.current.offset(offset);\n\n                        // Older versions of extension don't support the offset message\n                        if (tab !== undefined && extension.installed && lte(extension.version, '0.22.0')) {\n                            videoRef.current.subtitles(\n                                newSubtitles,\n                                subtitleFiles.map((f) => f.name)\n                            );\n                        }\n                    }\n                }\n\n                return newSubtitles;\n            });\n            playbackPreferences.offset = offset;\n        },\n        [subtitleFiles, extension, playbackPreferences, tab]\n    );\n\n    useEffect(() => {\n        let channel: VideoChannel | undefined = undefined;\n        let channelClosed = false;\n\n        async function init() {\n            if (videoRef.current instanceof VideoChannel) {\n                videoRef.current.close();\n            }\n            videoRef.current = undefined;\n            videoChannelRef.current = null;\n            clock.setTime(0);\n            clock.stop();\n            const offset = playbackPreferences.offset;\n            setOffset(offset);\n            setPlaying(false);\n            setAudioTracks(undefined);\n            setSelectedAudioTrack(undefined);\n            setPlayMode(PlayMode.normal);\n\n            if (audioRef.current) {\n                audioRef.current.currentTime = 0;\n                audioRef.current.pause();\n            }\n\n            let subtitles: DisplaySubtitleModel[] | undefined;\n\n            if (subtitleFiles.length > 0) {\n                setLoadingSubtitles(true);\n\n                try {\n                    const nodes = await subtitleReader.subtitles(subtitleFiles);\n                    const length = nodes.length > 0 ? nodes[nodes.length - 1].end + offset : 0;\n\n                    subtitles = nodes.map((s, i) => ({\n                        text: s.text,\n                        textImage: s.textImage,\n                        start: s.start + offset,\n                        originalStart: s.start,\n                        end: s.end + offset,\n                        originalEnd: s.end,\n                        displayTime: timeDurationDisplay(s.start + offset, length),\n                        track: s.track,\n                        index: i,\n                    }));\n\n                    setSubtitles(subtitles);\n                    setLastJumpToTopTimestamp(Date.now());\n                } catch (e) {\n                    if (e instanceof Error) {\n                        onError(e.message);\n                    } else {\n                        onError(String(e));\n                    }\n                } finally {\n                    setLoadingSubtitles(false);\n                }\n            } else {\n                subtitles = undefined;\n            }\n\n            if (audioFileUrl) {\n                await mediaAdapter.onReady();\n                forceUpdate();\n            } else if (videoFileUrl || tab) {\n                if (channelClosed) {\n                    return;\n                }\n\n                if (videoFileUrl) {\n                    const channelId = uuidv4();\n                    channel = new VideoChannel(new BroadcastChannelVideoProtocol(channelId));\n                    setChannelId(channelId);\n                } else if (tab) {\n                    channel = new VideoChannel(new ChromeTabVideoProtocol(tab.id, tab.src, extension));\n                    channel.init();\n                } else {\n                    // Not possible\n                    // But throw error so typescript recognizes channel as defined\n                    throw new Error('Unreachable code');\n                }\n\n                videoRef.current = channel;\n                videoChannelRef.current = channel;\n                let subscribed = false;\n\n                channel.onExit(() => videoFileUrl && onUnloadVideo(videoFileUrl));\n                channel.onPopOutToggle(() => onVideoPopOut());\n                channel.onHideSubtitlePlayerToggle(() => {\n                    onHideSubtitlePlayer();\n                });\n                channel.onAppBarToggle(() => {\n                    onAppBarToggle();\n                });\n                channel.onFullscreenToggle(() => {\n                    onFullscreenToggle();\n                });\n                channel.onReady((paused) => {\n                    lengthRef.current = trackLength(audioRef, videoRef, subtitlesRef.current);\n                    channel?.ready(lengthRef.current, videoFile?.name);\n\n                    if (subtitlesRef.current) {\n                        channel?.subtitleSettings(settingsProvider.subtitleSettings);\n                        channel?.subtitles(\n                            subtitlesRef.current,\n                            subtitleFiles.map((f) => f.name)\n                        );\n                    }\n\n                    channel?.ankiSettings(settingsProvider.ankiSettings);\n                    channel?.miscSettings(settingsProvider.miscSettings);\n                    channel?.playMode(playModeRef.current!);\n                    channel?.hideSubtitlePlayerToggle(hideSubtitlePlayerRef.current ?? false);\n\n                    if (channel?.audioTracks && channel?.audioTracks?.length > 1) {\n                        setAudioTracks(channel?.audioTracks);\n                        setSelectedAudioTrack(channel?.selectedAudioTrack);\n                    } else {\n                        setAudioTracks(undefined);\n                        setSelectedAudioTrack(undefined);\n                    }\n\n                    if (videoRef.current) {\n                        clock.setTime(videoRef.current.currentTime * 1000);\n                    }\n\n                    if (paused) {\n                        clock.stop();\n                    } else {\n                        clock.start();\n                    }\n\n                    setPlaying(!paused);\n\n                    if (channel?.playbackRate) {\n                        clock.rate = channel.playbackRate;\n                        setPlaybackRate(channel.playbackRate);\n                    }\n\n                    if (!subscribed) {\n                        channel?.onPlay((forwardToMedia) => play(clock, mediaAdapter, forwardToMedia));\n                        channel?.onPause((forwardToMedia) => pause(clock, mediaAdapter, forwardToMedia));\n                        channel?.onOffset((offset) => applyOffset(Math.max(-lengthRef.current ?? 0, offset), false));\n                        channel?.onPlaybackRate((playbackRate, forwardToMedia) =>\n                            updatePlaybackRate(playbackRate, forwardToMedia)\n                        );\n                        channel?.onCopy(\n                            (subtitle, surroundingSubtitles, audio, image, url, postMineAction, preventDuplicate, id) =>\n                                onCopy(\n                                    subtitle,\n                                    surroundingSubtitles,\n                                    audioFile,\n                                    videoFile,\n                                    subtitle ? subtitleFiles[subtitle.track] : undefined,\n                                    clock.time(lengthRef.current),\n                                    channel?.selectedAudioTrack,\n                                    channel?.playbackRate,\n                                    audio,\n                                    image,\n                                    url,\n                                    postMineAction,\n                                    preventDuplicate,\n                                    id\n                                )\n                        );\n                        channel?.onPlayMode((playMode) => {\n                            setPlayMode(playMode);\n                            channel?.playMode(playMode);\n                        });\n                        channel?.onCurrentTime(async (currentTime, forwardToMedia) => {\n                            if (playingRef.current) {\n                                clock.stop();\n                            }\n\n                            await seek(currentTime * 1000, clock, forwardToMedia);\n\n                            if (playingRef.current) {\n                                clock.start();\n                            }\n                        });\n                        channel?.onAudioTrackSelected(async (id) => {\n                            if (playingRef.current) {\n                                clock.stop();\n                            }\n\n                            await mediaAdapter.onReady();\n                            if (playingRef.current) {\n                                clock.start();\n                            }\n\n                            setSelectedAudioTrack(id);\n                        });\n                        channel?.onAnkiDialogRequest(() => onAnkiDialogRequest());\n                        channel?.onToggleSubtitleTrackInList((track) =>\n                            setDisabledSubtitleTracks((tracks) => {\n                                const newTracks = { ...tracks };\n                                newTracks[track] = !tracks[track];\n                                return newTracks;\n                            })\n                        );\n\n                        subscribed = true;\n                    }\n                });\n            }\n        }\n\n        init().then(() => onLoaded());\n\n        return () => {\n            channel?.close();\n            channelClosed = true;\n        };\n    }, [\n        subtitleReader,\n        extension,\n        settingsProvider,\n        playbackPreferences,\n        clock,\n        mediaAdapter,\n        seek,\n        onLoaded,\n        onError,\n        onUnloadVideo,\n        onCopy,\n        onAnkiDialogRequest,\n        onHideSubtitlePlayer,\n        onAppBarToggle,\n        onFullscreenToggle,\n        onVideoPopOut,\n        subtitleFiles,\n        audioFile,\n        audioFileUrl,\n        videoFile,\n        videoFileUrl,\n        tab,\n        forceUpdate,\n        videoFrameRef,\n        videoChannelRef,\n        applyOffset,\n        updatePlaybackRate,\n    ]);\n\n    function play(clock: Clock, mediaAdapter: MediaAdapter, forwardToMedia: boolean) {\n        setPlaying(true);\n        clock.start();\n\n        if (forwardToMedia) {\n            mediaAdapter.play();\n        }\n    }\n\n    function pause(clock: Clock, mediaAdapter: MediaAdapter, forwardToMedia: boolean) {\n        setPlaying(false);\n        clock.stop();\n\n        if (forwardToMedia) {\n            mediaAdapter.pause();\n        }\n    }\n\n    useEffect(() => {\n        if (ankiDialogFinishedRequest && ankiDialogFinishedRequest.timestamp > 0) {\n            setResumeOnFinishedAnkiDialogRequest((resumeOnFinishedAnkiDialogRequest) => {\n                if (resumeOnFinishedAnkiDialogRequest && ankiDialogFinishedRequest.resume) {\n                    play(clock, mediaAdapter, true);\n                }\n\n                return false;\n            });\n        }\n    }, [ankiDialogFinishedRequest, clock, mediaAdapter]);\n\n    useEffect(() => {\n        if (ankiDialogRequested && playingRef.current) {\n            pause(clock, mediaAdapter, true);\n            setResumeOnFinishedAnkiDialogRequest(true);\n        }\n    }, [ankiDialogRequested, clock, mediaAdapter]);\n\n    useEffect(() => {\n        if (playMode !== PlayMode.condensed) {\n            return;\n        }\n\n        if (!subtitles || subtitles.length === 0) {\n            return;\n        }\n\n        let seeking = false;\n        let expectedSeekTime = 1000;\n\n        const interval = setInterval(async () => {\n            const length = lengthRef.current;\n\n            if (!length) {\n                return;\n            }\n\n            const timestamp = clock.time(length);\n            const slice = subtitleCollection.subtitlesAt(timestamp);\n\n            if (slice.nextToShow && slice.nextToShow.length > 0) {\n                const nextSubtitle = slice.nextToShow[0];\n\n                if (nextSubtitle.start - timestamp < expectedSeekTime + 500) {\n                    return;\n                }\n\n                if (playingRef.current) {\n                    clock.stop();\n                }\n\n                if (!seeking) {\n                    seeking = true;\n                    const t0 = Date.now();\n                    await seek(nextSubtitle.start, clock, true);\n                    expectedSeekTime = Date.now() - t0;\n                    seeking = false;\n                }\n\n                if (playingRef.current) {\n                    clock.start();\n                }\n            }\n        }, 100);\n\n        return () => clearInterval(interval);\n    }, [subtitles, subtitleCollection, playMode, clock, seek]);\n\n    const handleOnStartedShowingSubtitle = useCallback(() => {\n        if (\n            playMode !== PlayMode.autoPause ||\n            settingsProvider.autoPausePreference !== AutoPausePreference.atStart ||\n            videoFileUrl // Let VideoPlayer do the auto-pausing\n        ) {\n            return;\n        }\n\n        pause(clock, mediaAdapter, true);\n    }, [playMode, clock, mediaAdapter, videoFileUrl, settingsProvider]);\n\n    const handleOnWillStopShowingSubtitle = useCallback(() => {\n        if (\n            playMode !== PlayMode.autoPause ||\n            settingsProvider.autoPausePreference !== AutoPausePreference.atEnd ||\n            videoFileUrl // Let VideoPlayer do the auto-pausing\n        ) {\n            return;\n        }\n\n        pause(clock, mediaAdapter, true);\n    }, [playMode, clock, mediaAdapter, videoFileUrl, settingsProvider]);\n\n    useEffect(() => {\n        if (videoPopOut && channelId && videoFileUrl) {\n            window.open(\n                process.env.PUBLIC_URL +\n                    '/?video=' +\n                    encodeURIComponent(videoFileUrl) +\n                    '&channel=' +\n                    channelId +\n                    '&popout=true',\n                'asbplayer-video-' + videoFileUrl,\n                'resizable,width=800,height=450'\n            );\n        }\n\n        setLastJumpToTopTimestamp(Date.now());\n    }, [videoPopOut, channelId, videoFileUrl, videoFrameRef]);\n\n    const handlePlay = useCallback(() => play(clock, mediaAdapter, true), [clock, mediaAdapter]);\n    const handlePause = useCallback(() => pause(clock, mediaAdapter, true), [clock, mediaAdapter]);\n    const handleSeek = useCallback(\n        async (progress: number) => {\n            if (!lengthRef.current) {\n                return;\n            }\n\n            if (playingRef.current) {\n                clock.stop();\n            }\n\n            await seek(progress * lengthRef.current, clock, true);\n\n            if (playingRef.current) {\n                clock.start();\n            }\n        },\n        [clock, seek]\n    );\n\n    const handleSeekToSubtitle = useCallback(\n        async (time: number, shouldPlay: boolean) => {\n            if (!shouldPlay) {\n                pause(clock, mediaAdapter, true);\n            }\n\n            if (playingRef.current) {\n                clock.stop();\n            }\n\n            await seek(time, clock, true);\n\n            if (shouldPlay && !playingRef.current) {\n                // play method will start the clock again\n                play(clock, mediaAdapter, true);\n            }\n        },\n        [clock, seek, mediaAdapter]\n    );\n\n    const handleCopyFromSubtitlePlayer = useCallback(\n        (\n            subtitle: SubtitleModel,\n            surroundingSubtitles: SubtitleModel[],\n            postMineAction: PostMineAction,\n            preventDuplicate: boolean\n        ) => {\n            onCopy(\n                subtitle,\n                surroundingSubtitles,\n                audioFile,\n                videoFile,\n                subtitleFiles[subtitle.track],\n                clock.time(lengthRef.current),\n                selectedAudioTrack,\n                playbackRate,\n                undefined,\n                undefined,\n                undefined,\n                postMineAction,\n                preventDuplicate,\n                undefined\n            );\n        },\n        [clock, onCopy, audioFile, videoFile, subtitleFiles, selectedAudioTrack, playbackRate]\n    );\n\n    const handleMouseMove = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n        mousePositionRef.current.x = e.screenX;\n        mousePositionRef.current.y = e.screenY;\n    }, []);\n\n    const handleAudioTrackSelected = useCallback(\n        async (id: string) => {\n            if (videoRef.current instanceof VideoChannel) {\n                videoRef.current.audioTrackSelected(id);\n            }\n\n            pause(clock, mediaAdapter, true);\n\n            await seek(0, clock, true);\n\n            if (playingRef.current) {\n                play(clock, mediaAdapter, true);\n            }\n        },\n        [clock, mediaAdapter, seek]\n    );\n\n    const handleOffsetChange = useCallback(\n        (offset: number) => {\n            applyOffset(Math.max(-lengthRef.current ?? 0, offset), true);\n        },\n        [applyOffset]\n    );\n\n    const handleVolumeChange = useCallback((volume: number) => {\n        if (audioRef.current instanceof HTMLMediaElement) {\n            audioRef.current.volume = volume;\n        }\n    }, []);\n\n    const handlePlaybackRateChange = useCallback(\n        (playbackRate: number) => {\n            updatePlaybackRate(playbackRate, true);\n        },\n        [updatePlaybackRate]\n    );\n\n    const handlePlayMode = useCallback((playMode: PlayMode) => setPlayMode(playMode), []);\n\n    const handleToggleSubtitleTrack = useCallback(\n        (track: number) =>\n            setDisabledSubtitleTracks((tracks) => {\n                const newTracks = { ...tracks };\n                newTracks[track] = !tracks[track];\n                return newTracks;\n            }),\n        []\n    );\n\n    useEffect(() => {\n        if (tab) {\n            return;\n        }\n\n        const interval = setInterval(async () => {\n            const length = lengthRef.current;\n            const progress = clock.progress(length);\n\n            if (progress >= 1) {\n                pause(clock, mediaAdapter, true);\n                await seek(0, clock, true);\n                setLastJumpToTopTimestamp(Date.now());\n            }\n        }, 1000);\n\n        return () => clearInterval(interval);\n    }, [clock, subtitles, mediaAdapter, seek, tab]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindPlay(\n            (event) => {\n                event.preventDefault();\n\n                if (playing) {\n                    pause(clock, mediaAdapter, true);\n                } else {\n                    play(clock, mediaAdapter, true);\n                }\n            },\n            () => disableKeyEvents\n        );\n\n        return () => unbind();\n    }, [keyBinder, playing, clock, mediaAdapter, disableKeyEvents]);\n\n    useEffect(() => {\n        return keyBinder.bindAdjustPlaybackRate(\n            (event, increase) => {\n                event.preventDefault();\n                if (increase) {\n                    updatePlaybackRate(Math.min(5, playbackRate + 0.1), true);\n                } else {\n                    updatePlaybackRate(Math.max(0.1, playbackRate - 0.1), true);\n                }\n            },\n            () => disableKeyEvents\n        );\n    }, [updatePlaybackRate, playbackRate, disableKeyEvents, keyBinder]);\n\n    const togglePlayMode = useCallback(\n        (event: KeyboardEvent, togglePlayMode: PlayMode) => {\n            if (!playModeEnabled) {\n                return;\n            }\n\n            event.preventDefault();\n            const newPlayMode = playMode === togglePlayMode ? PlayMode.normal : togglePlayMode;\n            setPlayMode(newPlayMode);\n            onPlayModeChangedViaBind(playMode, newPlayMode);\n\n            if (videoRef.current instanceof VideoChannel) {\n                videoRef.current.playMode(newPlayMode);\n            }\n        },\n        [playMode, playModeEnabled, onPlayModeChangedViaBind]\n    );\n\n    useEffect(() => {\n        return keyBinder.bindAutoPause(\n            (event) => togglePlayMode(event, PlayMode.autoPause),\n            () => disableKeyEvents\n        );\n    }, [togglePlayMode, keyBinder, disableKeyEvents]);\n\n    useEffect(() => {\n        return keyBinder.bindCondensedPlayback(\n            (event) => togglePlayMode(event, PlayMode.condensed),\n            () => disableKeyEvents\n        );\n    }, [togglePlayMode, keyBinder, disableKeyEvents]);\n\n    useEffect(() => {\n        if ((audioFile || videoFile) && (!subtitles || subtitles.length === 0)) {\n            const unbindCopy = keyBinder.bindCopy(\n                (event, subtitle) => {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    const surroundingSubtitles = mockSurroundingSubtitles(subtitle, lengthRef.current, 5000);\n                    onCopy(\n                        subtitle,\n                        surroundingSubtitles,\n                        audioFile,\n                        videoFile,\n                        undefined,\n                        clock.time(lengthRef.current),\n                        selectedAudioTrack,\n                        playbackRate,\n                        undefined,\n                        undefined,\n                        undefined,\n                        undefined,\n                        undefined,\n                        undefined\n                    );\n                },\n                () => disableKeyEvents,\n                () => {\n                    if (!lengthRef.current) {\n                        return undefined;\n                    }\n\n                    const timestamp = clock.time(lengthRef.current);\n                    const end = Math.min(timestamp + 5000, lengthRef.current);\n\n                    return {\n                        text: '',\n                        start: timestamp,\n                        originalStart: timestamp,\n                        end: end,\n                        originalEnd: end,\n                        track: 0,\n                    };\n                }\n            );\n\n            const unbindAnkiExport = keyBinder.bindAnkiExport(\n                (event) => {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    const timestamp = clock.time(lengthRef.current);\n                    const end = Math.min(timestamp + 5000, lengthRef.current);\n                    const subtitle = {\n                        text: '',\n                        start: timestamp,\n                        originalStart: timestamp,\n                        end: end,\n                        originalEnd: end,\n                        track: 0,\n                    };\n                    const surroundingSubtitles = mockSurroundingSubtitles(subtitle, lengthRef.current, 5000);\n                    onCopy(\n                        subtitle,\n                        surroundingSubtitles,\n                        audioFile,\n                        videoFile,\n                        undefined,\n                        timestamp,\n                        selectedAudioTrack,\n                        playbackRate,\n                        undefined,\n                        undefined,\n                        undefined,\n                        PostMineAction.showAnkiDialog,\n                        undefined,\n                        undefined\n                    );\n                },\n                () => false\n            );\n\n            return () => {\n                unbindCopy();\n                unbindAnkiExport();\n            };\n        }\n    }, [\n        keyBinder,\n        audioFile,\n        videoFile,\n        subtitles,\n        clock,\n        playbackRate,\n        selectedAudioTrack,\n        disableKeyEvents,\n        onCopy,\n        onAnkiDialogRequest,\n    ]);\n\n    useEffect(() => {\n        if (videoRef.current instanceof VideoChannel) {\n            videoRef.current.appBarToggle(appBarHidden);\n        }\n    }, [appBarHidden]);\n\n    useEffect(() => {\n        if (videoRef.current instanceof VideoChannel) {\n            videoRef.current.hideSubtitlePlayerToggle(hideSubtitlePlayer);\n        }\n    }, [hideSubtitlePlayer]);\n\n    useEffect(() => {\n        if (videoRef.current instanceof VideoChannel) {\n            videoRef.current.fullscreenToggle(videoFullscreen);\n        }\n    }, [videoFullscreen]);\n\n    useEffect(() => {\n        if (!rewindSubtitle) {\n            return;\n        }\n\n        if (playingRef.current) {\n            clock.stop();\n        }\n\n        handleSeekToSubtitle(rewindSubtitle.start, false);\n    }, [clock, rewindSubtitle, handleSeekToSubtitle]);\n\n    const length = lengthRef.current;\n    const loaded = audioFileUrl || videoFileUrl || subtitles;\n    const videoInWindow = Boolean(loaded && videoFileUrl && !videoPopOut);\n\n    return (\n        <div onMouseMove={handleMouseMove} className={classes.root}>\n            <Grid container direction=\"row\" wrap=\"nowrap\" className={classes.container}>\n                {videoInWindow && (\n                    <Grid item style={{ flexGrow: 1, minWidth: 600 }}>\n                        <iframe\n                            ref={videoFrameRef}\n                            className={classes.videoFrame}\n                            src={\n                                process.env.PUBLIC_URL +\n                                '/?video=' +\n                                encodeURIComponent(videoFileUrl!) +\n                                '&channel=' +\n                                channelId +\n                                '&popout=false'\n                            }\n                            title=\"asbplayer\"\n                        />\n                    </Grid>\n                )}\n                {(!videoInWindow || (subtitles && subtitles?.length > 0)) && (\n                    <Grid\n                        item\n                        style={{\n                            flexGrow: videoInWindow ? 0 : 1,\n                            width: videoInWindow && hideSubtitlePlayer ? 0 : 'auto',\n                        }}\n                    >\n                        {loaded && !(videoFileUrl && !videoPopOut) && (\n                            <Controls\n                                mousePositionRef={mousePositionRef}\n                                playing={playing}\n                                clock={clock}\n                                length={length}\n                                displayLength={trackLength(audioRef, videoRef, subtitles, false)}\n                                audioTracks={audioTracks}\n                                selectedAudioTrack={selectedAudioTrack}\n                                tabs={(!videoFileUrl && !audioFileUrl && availableTabs) || undefined}\n                                selectedTab={tab}\n                                audioFile={audioFile?.name}\n                                videoFile={videoFile?.name}\n                                offsetEnabled={true}\n                                offset={offset}\n                                playbackRate={playbackRate}\n                                playbackRateEnabled={tab && extension.installed && gte(extension.version, '0.24.0')}\n                                onPlaybackRateChange={handlePlaybackRateChange}\n                                volumeEnabled={Boolean(audioFileUrl)}\n                                playModeEnabled={playModeEnabled}\n                                playMode={playMode}\n                                onPlay={handlePlay}\n                                onPause={handlePause}\n                                onSeek={handleSeek}\n                                onAudioTrackSelected={handleAudioTrackSelected}\n                                onTabSelected={onTabSelected}\n                                onUnloadAudio={() => audioFileUrl && onUnloadAudio(audioFileUrl)}\n                                onUnloadVideo={() => videoFileUrl && onUnloadVideo(videoFileUrl)}\n                                onOffsetChange={handleOffsetChange}\n                                onVolumeChange={handleVolumeChange}\n                                onPlayMode={handlePlayMode}\n                                disableKeyEvents={disableKeyEvents}\n                                playbackPreferences={playbackPreferences}\n                                showOnMouseMovement={true}\n                            />\n                        )}\n                        <SubtitlePlayer\n                            playing={playing}\n                            subtitles={subtitles}\n                            subtitleCollection={subtitleCollection}\n                            clock={clock}\n                            length={length}\n                            jumpToSubtitle={jumpToSubtitle}\n                            drawerOpen={drawerOpen}\n                            appBarHidden={appBarHidden}\n                            compressed={Boolean(videoFileUrl && !videoPopOut)}\n                            copyButtonEnabled={tab === undefined}\n                            loading={loadingSubtitles}\n                            displayHelp={audioFile?.name || (videoPopOut && videoFile?.name) || undefined}\n                            disableKeyEvents={disableKeyEvents}\n                            lastJumpToTopTimestamp={lastJumpToTopTimestamp}\n                            hidden={videoInWindow && hideSubtitlePlayer}\n                            disabledSubtitleTracks={disabledSubtitleTracks}\n                            onSeek={handleSeekToSubtitle}\n                            onCopy={handleCopyFromSubtitlePlayer}\n                            onOffsetChange={handleOffsetChange}\n                            onToggleSubtitleTrack={handleToggleSubtitleTrack}\n                            onStartedShowing={handleOnStartedShowingSubtitle}\n                            onWillStopShowing={handleOnWillStopShowingSubtitle}\n                            settingsProvider={settingsProvider}\n                            keyBinder={keyBinder}\n                        />\n                    </Grid>\n                )}\n            </Grid>\n            <audio ref={audioRef} src={audioFileUrl} />\n        </div>\n    );\n}\n","import { useState, useEffect } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\ninterface Props {\n    open: boolean;\n    onProceed: (fieldName: string) => void;\n    onCancel: () => void;\n    existingCustomFieldNames: string[];\n}\n\nexport default function CustomFieldDialog({ open, onProceed, onCancel, existingCustomFieldNames }: Props) {\n    const [fieldName, setFieldName] = useState<string>('');\n\n    useEffect(() => {\n        setFieldName('');\n    }, [open]);\n\n    const fieldExists = [\n        ...existingCustomFieldNames,\n        'Sentence',\n        'Word',\n        'Definition',\n        'Source',\n        'Image',\n        'Audio',\n    ].includes(fieldName);\n\n    return (\n        <Dialog\n            open={open}\n            disableEnforceFocus\n            fullWidth\n            maxWidth=\"xs\"\n            onClose={onCancel}\n        >\n            <DialogTitle>New Custom Field</DialogTitle>\n            <DialogContent>\n                <form>\n                    <TextField\n                        error={fieldExists}\n                        helperText={fieldExists && `Field ${fieldName} already exists`}\n                        variant=\"filled\"\n                        fullWidth\n                        label=\"Field Name\"\n                        value={fieldName}\n                        color=\"secondary\"\n                        onChange={(e) => setFieldName(e.target.value)}\n                    />\n                </form>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={() => onCancel()}>Cancel</Button>\n                <Button disabled={fieldExists || fieldName.trim() === ''} onClick={() => onProceed(fieldName.trim())}>\n                    Create\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n","import React, { useCallback, useState, useEffect, useMemo, ChangeEvent, ReactNode, useRef } from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport { computeStyles } from '../services/util';\nimport Button from '@material-ui/core/Button';\nimport CustomFieldDialog from './CustomFieldDialog';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport EditIcon from '@material-ui/icons/Edit';\nimport InfoIcon from '@material-ui/icons/Info';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Grid from '@material-ui/core/Grid';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Link from '@material-ui/core/Link';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Radio from '@material-ui/core/Radio';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport Select from '@material-ui/core/Select';\nimport TextField from '@material-ui/core/TextField';\nimport { Theme } from '@material-ui/core/styles';\nimport { Anki, AsbplayerSettings, AutoPausePreference, KeyBindSet, KeyBindName } from '@project/common';\nimport { TagsTextField } from '@project/common/components';\nimport hotkeys from 'hotkeys-js';\nimport Typography from '@material-ui/core/Typography';\nimport ChromeExtension from '../services/ChromeExtension';\nimport { isMacOs } from 'react-device-detect';\nimport Switch from '@material-ui/core/Switch';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nconst useStyles = makeStyles<Theme>((theme) => ({\n    root: {\n        '& .MuiTextField-root': {\n            marginTop: theme.spacing(1),\n            marginBottom: theme.spacing(1),\n        },\n    },\n    subtitleSetting: {\n        '& .MuiTextField-root': {\n            marginTop: theme.spacing(1),\n            marginBottom: theme.spacing(1),\n        },\n    },\n    subtitlePreview: {\n        backgroundImage: `linear-gradient(45deg, ${theme.palette.action.disabledBackground} 25%, transparent 25%), linear-gradient(-45deg, ${theme.palette.action.disabledBackground} 25%, transparent 25%), linear-gradient(45deg, transparent 75%, ${theme.palette.action.disabledBackground} 75%), linear-gradient(-45deg, transparent 75%,${theme.palette.action.disabledBackground} 75%)`,\n        backgroundSize: '20px 20px',\n        backgroundPosition: '0 0, 0 10px, 10px -10px, -10px 0px',\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n        maxWidth: '100%',\n        padding: 10,\n    },\n    subtitlePreviewInput: {\n        border: 'none',\n        width: '100%',\n        textAlign: 'center',\n        backgroundColor: 'rgba(0,0,0,0)',\n        '&:focus': {\n            outline: 'none',\n        },\n    },\n    addFieldButton: {\n        width: '100%',\n    },\n    switchLabel: {\n        justifyContent: 'space-between',\n        marginLeft: 0,\n    },\n}));\n\nconst useSelectableSettingStyles = makeStyles<Theme>((theme) => ({\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n    },\n    root: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'end',\n        alignItems: 'flex-end',\n    },\n}));\n\ninterface SelectableSettingProps {\n    label: string;\n    value: string;\n    selections?: string[];\n    removable?: boolean;\n    onChange: (event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => void;\n    onSelectionChange: (event: ChangeEvent<{ name?: string | undefined; value: unknown }>, child: ReactNode) => void;\n    onRemoval?: () => void;\n}\n\nfunction SelectableSetting({\n    label,\n    value,\n    selections,\n    removable,\n    onChange,\n    onSelectionChange,\n    onRemoval,\n}: SelectableSettingProps) {\n    const classes = useSelectableSettingStyles();\n\n    return (\n        <div className={classes.root}>\n            <TextField\n                label={label}\n                value={value}\n                onChange={onChange}\n                fullWidth\n                color=\"secondary\"\n                InputProps={{\n                    endAdornment: removable && (\n                        <InputAdornment position=\"end\">\n                            <IconButton onClick={(e) => onRemoval?.()}>\n                                <DeleteIcon />\n                            </IconButton>\n                        </InputAdornment>\n                    ),\n                }}\n            />\n            <FormControl className={classes.formControl}>\n                <InputLabel></InputLabel>\n                <Select value={value} disabled={!selections} color=\"secondary\" onChange={onSelectionChange}>\n                    {selections &&\n                        selections.map((s) => (\n                            <MenuItem key={s} value={s}>\n                                {s}\n                            </MenuItem>\n                        ))}\n                </Select>\n            </FormControl>\n        </div>\n    );\n}\n\ninterface KeyBindProperties {\n    label: string;\n    extensionOverridden: boolean;\n}\n\nconst keyBindProperties: { [key in KeyBindName]: KeyBindProperties } = {\n    copySubtitle: { label: 'Mine current subtitle', extensionOverridden: true },\n    ankiExport: { label: 'Mine current subtitle and open Anki dialog', extensionOverridden: true },\n    updateLastCard: {\n        label: 'Update last-created Anki card with asbplayer-captured screenshot, audio, etc.',\n        extensionOverridden: true,\n    },\n    togglePlay: { label: 'Play/pause', extensionOverridden: false },\n    toggleAutoPause: { label: 'Toggle auto-pause', extensionOverridden: false },\n    toggleCondensedPlayback: { label: 'Toggle condensed playback', extensionOverridden: false },\n    toggleSubtitles: { label: 'Toggle subtitles', extensionOverridden: false },\n    toggleVideoSubtitleTrack1: { label: 'Toggle subtitle track 1 in video', extensionOverridden: false },\n    toggleVideoSubtitleTrack2: { label: 'Toggle subtitle track 2 in video', extensionOverridden: false },\n    toggleAsbplayerSubtitleTrack1: { label: 'Toggle subtitle track 1 in asbplayer', extensionOverridden: false },\n    toggleAsbplayerSubtitleTrack2: { label: 'Toggle subtitle track 2 in asbplayer', extensionOverridden: false },\n    seekBackward: { label: 'Seek backward 10 seconds', extensionOverridden: false },\n    seekForward: { label: 'Seek forward 10 seconds', extensionOverridden: false },\n    seekToPreviousSubtitle: { label: 'Seek to previous subtitle', extensionOverridden: false },\n    seekToNextSubtitle: { label: 'Seek to next subtitle', extensionOverridden: false },\n    seekToBeginningOfCurrentSubtitle: { label: 'Seek to beginning of current subtitle', extensionOverridden: false },\n    adjustOffsetToPreviousSubtitle: {\n        label: 'Adjust subtitle offset so that previous subtitle is at current timestamp',\n        extensionOverridden: false,\n    },\n    adjustOffsetToNextSubtitle: {\n        label: 'Adjust subtitle offset so that next subtitle is at current timestamp',\n        extensionOverridden: false,\n    },\n    increaseOffset: { label: 'Adjust subtitle offset by +100ms', extensionOverridden: false },\n    decreaseOffset: { label: 'Adjust subtitle offset by -100ms', extensionOverridden: false },\n    increasePlaybackRate: { label: 'Adjust playback rate by +0.1', extensionOverridden: false },\n    decreasePlaybackRate: { label: 'Adjust playback rate by -0.1', extensionOverridden: false },\n};\n\n// hotkeys only returns strings for a Mac while requiring the OS-specific keys for the actual binds\nconst modifierKeyReplacements: { [key: string]: string } = isMacOs\n    ? {}\n    : {\n          '⌃': 'ctrl',\n          '⇧': 'shift',\n          '⌥': 'alt',\n      };\n\nconst modifierKeys = ['⌃', '⇧', '⌥', 'ctrl', 'shift', 'alt', 'option', 'control', 'command', '⌘'];\n\nconst useKeyBindFieldStyles = makeStyles<Theme>((theme) => ({\n    container: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n    },\n    labelItem: {},\n}));\n\ninterface KeyBindFieldProps {\n    label: string;\n    keys: string;\n    extensionOverridden: boolean;\n    onKeysChange: (keys: string) => void;\n    onOpenExtensionShortcuts: () => void;\n}\n\nfunction KeyBindField({ label, keys, extensionOverridden, onKeysChange, onOpenExtensionShortcuts }: KeyBindFieldProps) {\n    const classes = useKeyBindFieldStyles();\n    const [currentKeyString, setCurrentKeyString] = useState<string>(keys);\n    const currentKeyStringRef = useRef<string>();\n    currentKeyStringRef.current = currentKeyString;\n    const onKeysChangeRef = useRef<(keys: string) => void>();\n    onKeysChangeRef.current = onKeysChange;\n    const [editing, setEditing] = useState<boolean>(false);\n\n    useEffect(() => setCurrentKeyString(keys), [keys]);\n\n    const handleEditKeyBinding = useCallback(\n        (event: React.MouseEvent) => {\n            if (event.nativeEvent.detail === 0) {\n                return;\n            }\n\n            if (extensionOverridden) {\n                onOpenExtensionShortcuts();\n                return;\n            }\n\n            setCurrentKeyString('');\n            setEditing(true);\n        },\n        [onOpenExtensionShortcuts, extensionOverridden]\n    );\n\n    const ref = useRef<HTMLButtonElement>(null);\n\n    useEffect(() => {\n        if (!editing) {\n            return;\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (event.type === 'keydown') {\n                // The ts declaration is missing getPressedKeyString()\n                // @ts-ignore\n                const pressed = hotkeys.getPressedKeyString() as string[];\n                setCurrentKeyString(\n                    pressed\n                        .map((key) => {\n                            return modifierKeyReplacements[key] ?? key;\n                        })\n                        .sort((a, b) => {\n                            const isAModifier = modifierKeys.includes(a);\n                            const isBModifier = modifierKeys.includes(b);\n\n                            if (isAModifier && !isBModifier) {\n                                return -1;\n                            }\n\n                            if (!isAModifier && isBModifier) {\n                                return 1;\n                            }\n\n                            return 0;\n                        })\n                        .join('+')\n                );\n            } else if (event.type === 'keyup') {\n                setEditing(false);\n\n                // Need to use refs because hotkeys returns the wrong keys\n                // if the handler is bound/unbound.\n                if (currentKeyStringRef.current) {\n                    onKeysChangeRef.current!(currentKeyStringRef.current);\n                }\n            }\n        };\n\n        hotkeys('*', { keyup: true }, handler);\n        return () => hotkeys.unbind('*', handler);\n    }, [editing]);\n\n    useEffect(() => {\n        const handler = (event: MouseEvent) => {\n            if (editing && !ref.current?.contains(event.target as Node)) {\n                setEditing(false);\n                setCurrentKeyString('');\n                onKeysChange('');\n            }\n        };\n        window.document.addEventListener('click', handler);\n        return () => window.document.removeEventListener('click', handler);\n    }, [editing, onKeysChange]);\n\n    let placeholder: string;\n\n    if (editing) {\n        placeholder = 'Recording';\n    } else if (extensionOverridden) {\n        placeholder = 'Overridden';\n    } else {\n        placeholder = 'Unbound';\n    }\n\n    return (\n        <Grid container className={classes.container} wrap={'nowrap'} spacing={1}>\n            <Grid item className={classes.labelItem} xs={6}>\n                <Typography>{label}</Typography>\n            </Grid>\n            <Grid item xs={6}>\n                <TextField\n                    placeholder={placeholder}\n                    size=\"small\"\n                    contentEditable={false}\n                    disabled={extensionOverridden}\n                    helperText={extensionOverridden ? 'Extension shortcut' : undefined}\n                    value={currentKeyString}\n                    color=\"secondary\"\n                    InputProps={{\n                        endAdornment: (\n                            <InputAdornment position=\"end\">\n                                <IconButton ref={ref} onClick={handleEditKeyBinding}>\n                                    <EditIcon />\n                                </IconButton>\n                            </InputAdornment>\n                        ),\n                    }}\n                />\n            </Grid>\n        </Grid>\n    );\n}\n\ninterface Props {\n    anki: Anki;\n    extension: ChromeExtension;\n    open: boolean;\n    settings: AsbplayerSettings;\n    scrollToId?: string;\n    onClose: (settings: AsbplayerSettings) => void;\n}\n\nexport default function SettingsDialog({ anki, extension, open, settings, scrollToId, onClose }: Props) {\n    const classes = useStyles();\n    const [ankiConnectUrl, setAnkiConnectUrl] = useState<string>(settings.ankiConnectUrl);\n    const [ankiConnectUrlError, setAnkiConnectUrlError] = useState<string>();\n    const [ankiConnectUrlChangeTimestamp, setAnkiConnectUrlChangeTimestamp] = useState<number>(0);\n    const [deck, setDeck] = useState<string>(settings.deck || '');\n    const [deckNames, setDeckNames] = useState<string[]>();\n    const [noteType, setNoteType] = useState<string>(settings.noteType || '');\n    const [modelNames, setModelNames] = useState<string[]>();\n    const [sentenceField, setSentenceField] = useState<string>(settings.sentenceField || '');\n    const [definitionField, setDefinitionField] = useState<string>(settings.definitionField || '');\n    const [audioField, setAudioField] = useState<string>(settings.audioField || '');\n    const [imageField, setImageField] = useState<string>(settings.imageField || '');\n    const [wordField, setWordField] = useState<string>(settings.wordField || '');\n    const [sourceField, setSourceField] = useState<string>(settings.sourceField || '');\n    const [urlField, setUrlField] = useState<string>(settings.urlField || '');\n    const [customFields, setCustomFields] = useState<{ [key: string]: string }>(settings.customAnkiFields);\n    const [tags, setTags] = useState<string[]>(settings.tags);\n    const [preferMp3, setPreferMp3] = useState<boolean>(settings.preferMp3);\n    const [fieldNames, setFieldNames] = useState<string[]>();\n    const [customFieldDialogOpen, setCustomFieldDialogOpen] = useState<boolean>(false);\n    const [audioPaddingStart, setAudioPaddingStart] = useState<number>(settings.audioPaddingStart);\n    const [audioPaddingEnd, setAudioPaddingEnd] = useState<number>(settings.audioPaddingEnd);\n    const [maxImageWidth, setMaxImageWidth] = useState<number>(settings.maxImageWidth);\n    const [maxImageHeight, setMaxImageHeight] = useState<number>(settings.maxImageHeight);\n    const [surroundingSubtitlesCountRadius, setSurroundingSubtitlesCountRadius] = useState<number>(\n        settings.surroundingSubtitlesCountRadius\n    );\n    const [surroundingSubtitlesTimeRadius, setSurroundingSubtitlesTimeRadius] = useState<number>(\n        settings.surroundingSubtitlesTimeRadius\n    );\n    const [subtitleColor, setSubtitleColor] = useState<string>(settings.subtitleColor);\n    const [subtitleSize, setSubtitleSize] = useState<number>(settings.subtitleSize);\n    const [subtitleOutlineColor, setSubtitleOutlineColor] = useState<string>(settings.subtitleOutlineColor);\n    const [subtitleOutlineThickness, setSubtitleOutlineThickness] = useState<number>(settings.subtitleOutlineThickness);\n    const [subtitleBackgroundColor, setSubtitleBackgroundColor] = useState<string>(settings.subtitleBackgroundColor);\n    const [subtitleBackgroundOpacity, setSubtitleBackgroundOpacity] = useState<number>(\n        settings.subtitleBackgroundOpacity\n    );\n    const [subtitleFontFamily, setSubtitleFontFamily] = useState<string>(settings.subtitleFontFamily);\n    const [imageBasedSubtitleScaleFactor, setImageBasedSubtitleScaleFactor] = useState<number>(\n        settings.imageBasedSubtitleScaleFactor\n    );\n    const [subtitlePreview, setSubtitlePreview] = useState<string>(settings.subtitlePreview);\n    const [themeType, setThemeType] = useState<'dark' | 'light'>(settings.themeType);\n    const [copyToClipboardOnMine, setCopyToClipboardOnMine] = useState<boolean>(settings.copyToClipboardOnMine);\n    const [autoPausePreference, setAutoPausePreference] = useState<AutoPausePreference>(settings.autoPausePreference);\n    const [keyBindSet, setKeyBindSet] = useState<KeyBindSet>(settings.keyBindSet);\n    const [rememberSubtitleOffset, setRememberSubtitleOffset] = useState<boolean>(settings.rememberSubtitleOffset);\n\n    const handleAnkiConnectUrlChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n        setAnkiConnectUrl(e.target.value);\n        setAnkiConnectUrlChangeTimestamp(Date.now());\n    }, []);\n\n    const handleRetryAnkiConnectUrl = useCallback(\n        (e: React.MouseEvent<HTMLButtonElement>) => setAnkiConnectUrlChangeTimestamp(Date.now()),\n        []\n    );\n    const handleDeckChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setDeck(e.target.value),\n        []\n    );\n    const handleDeckSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setDeck(e.target.value as string),\n        []\n    );\n    const handleNoteTypeChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setNoteType(e.target.value),\n        []\n    );\n    const handleNoteTypeSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setNoteType(e.target.value as string),\n        []\n    );\n    const handleSentenceFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSentenceField(e.target.value),\n        []\n    );\n    const handleSentenceFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setSentenceField(e.target.value as string),\n        []\n    );\n    const handleDefinitionFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setDefinitionField(e.target.value),\n        []\n    );\n    const handleDefinitionFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setDefinitionField(e.target.value as string),\n        []\n    );\n    const handleAudioFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setAudioField(e.target.value),\n        []\n    );\n    const handleAudioFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setAudioField(e.target.value as string),\n        []\n    );\n    const handleImageFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setImageField(e.target.value),\n        []\n    );\n    const handleImageFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setImageField(e.target.value as string),\n        []\n    );\n    const handleWordFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setWordField(e.target.value),\n        []\n    );\n    const handleWordFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setWordField(e.target.value as string),\n        []\n    );\n    const handleSourceFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSourceField(e.target.value),\n        []\n    );\n    const handleSourceFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setSourceField(e.target.value as string),\n        []\n    );\n    const handleUrlFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setUrlField(e.target.value),\n        []\n    );\n    const handleUrlFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setUrlField(e.target.value as string),\n        []\n    );\n    const handleAudioPaddingStart = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setAudioPaddingStart(Number(e.target.value)),\n        []\n    );\n    const handleAudioPaddingEnd = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setAudioPaddingEnd(Number(e.target.value)),\n        []\n    );\n    const handleMaxImageWidth = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setMaxImageWidth(Number(e.target.value)),\n        []\n    );\n    const handleMaxImageHeight = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setMaxImageHeight(Number(e.target.value)),\n        []\n    );\n    const handleSurroundingSubtitlesCountRadius = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) =>\n            setSurroundingSubtitlesCountRadius(Number(e.target.value)),\n        []\n    );\n    const handleSurroundingSubtitlesTimeRadius = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) =>\n            setSurroundingSubtitlesTimeRadius(Number(e.target.value)),\n        []\n    );\n    const handleSubtitleColorChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleColor(e.target.value),\n        []\n    );\n    const handleSubtitleSizeChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleSize(Number(e.target.value)),\n        []\n    );\n    const handleSubtitleOutlineColorChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleOutlineColor(e.target.value),\n        []\n    );\n    const handleSubtitleOutlineThicknessChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleOutlineThickness(Number(e.target.value)),\n        []\n    );\n    const handleSubtitleBackgroundColorChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleBackgroundColor(e.target.value),\n        []\n    );\n    const handleSubtitleBackgroundOpacityChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) =>\n            setSubtitleBackgroundOpacity(Number(e.target.value)),\n        []\n    );\n    const handleSubtitleFontFamilyChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleFontFamily(e.target.value),\n        []\n    );\n    const handleSubtitlePreviewChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitlePreview(e.target.value),\n        []\n    );\n    const handleImageBasedSubtitleScaleFactorChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) =>\n            setImageBasedSubtitleScaleFactor(Number(e.target.value)),\n        []\n    );\n    const handleAddCustomField = useCallback((customFieldName: string) => {\n        setCustomFields((oldCustomFields: { [key: string]: string }) => {\n            const newCustomFields: { [key: string]: string } = {};\n            Object.assign(newCustomFields, oldCustomFields);\n            newCustomFields[customFieldName] = '';\n            return newCustomFields;\n        });\n        setCustomFieldDialogOpen(false);\n    }, []);\n    const handleCustomFieldChange = useCallback((customFieldName: string, value: string) => {\n        setCustomFields((oldCustomFields: { [key: string]: string }) => {\n            const newCustomFields: { [key: string]: string } = {};\n            Object.assign(newCustomFields, oldCustomFields);\n            newCustomFields[customFieldName] = value;\n            return newCustomFields;\n        });\n    }, []);\n    const handleCustomFieldRemoval = useCallback(\n        (customFieldName: string) =>\n            setCustomFields((oldCustomFields: { [key: string]: string }) => {\n                const newCustomFields: { [key: string]: string } = {};\n                Object.assign(newCustomFields, oldCustomFields);\n                delete newCustomFields[customFieldName];\n                return newCustomFields;\n            }),\n        []\n    );\n    const handleTagsChange = useCallback((newTags: string[]) => {\n        setTags(newTags);\n    }, []);\n    const handlePreferMp3Change = useCallback((e: ChangeEvent<HTMLInputElement>) => setPreferMp3(e.target.checked), []);\n    const handleThemeTypeChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        if (e.target.value !== 'dark' && e.target.value !== 'light') {\n            throw new Error(`Invalid theme type ${e.target.value}`);\n        }\n\n        setThemeType(e.target.value);\n    }, []);\n    const handleCopyToClipboardOnMine = useCallback(\n        (e: ChangeEvent<HTMLInputElement>) => setCopyToClipboardOnMine(e.target.checked),\n        []\n    );\n    const handleAutoPausePreferenceChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        setAutoPausePreference(Number(e.target.value) as AutoPausePreference);\n    }, []);\n    const handleKeysChange = useCallback((keys: string, keyBindName: KeyBindName) => {\n        setKeyBindSet((keyBindSet) => {\n            const newKeyBindSet = { ...keyBindSet };\n            newKeyBindSet[keyBindName] = { keys };\n            return newKeyBindSet;\n        });\n    }, []);\n    const handleRememberSubtitleOffsetChange = useCallback(\n        (e: ChangeEvent<HTMLInputElement>) => setRememberSubtitleOffset(e.target.checked),\n        []\n    );\n\n    const subtitlePreviewStyles = useMemo(\n        () =>\n            computeStyles({\n                subtitleColor: subtitleColor,\n                subtitleSize: subtitleSize,\n                subtitleOutlineThickness: subtitleOutlineThickness,\n                subtitleOutlineColor: subtitleOutlineColor,\n                subtitleBackgroundOpacity: subtitleBackgroundOpacity,\n                subtitleBackgroundColor: subtitleBackgroundColor,\n                subtitleFontFamily: subtitleFontFamily,\n            }),\n        [\n            subtitleColor,\n            subtitleSize,\n            subtitleOutlineThickness,\n            subtitleOutlineColor,\n            subtitleBackgroundOpacity,\n            subtitleBackgroundColor,\n            subtitleFontFamily,\n        ]\n    );\n\n    useEffect(() => {\n        let canceled = false;\n\n        const timeout = setTimeout(async () => {\n            try {\n                if (canceled) {\n                    return;\n                }\n\n                await anki.requestPermission(ankiConnectUrl);\n                setDeckNames(await anki.deckNames(ankiConnectUrl));\n                setModelNames(await anki.modelNames(ankiConnectUrl));\n                setAnkiConnectUrlError(undefined);\n            } catch (e) {\n                if (canceled) {\n                    return;\n                }\n\n                console.error(e);\n                setDeckNames(undefined);\n                setModelNames(undefined);\n\n                if (e instanceof Error) {\n                    setAnkiConnectUrlError(e.message);\n                } else if (typeof e === 'string') {\n                    setAnkiConnectUrlError(e);\n                } else {\n                    setAnkiConnectUrlError(String(e));\n                }\n            }\n        }, 1000);\n\n        return () => {\n            canceled = true;\n            clearTimeout(timeout);\n        };\n    }, [anki, ankiConnectUrl, ankiConnectUrlChangeTimestamp]);\n\n    useEffect(() => {\n        if (!noteType || ankiConnectUrlError) {\n            return undefined;\n        }\n\n        let canceled = false;\n\n        async function refreshFieldNames() {\n            try {\n                if (canceled) {\n                    return;\n                }\n\n                setFieldNames(['', ...(await anki.modelFieldNames(noteType, ankiConnectUrl))]);\n                setAnkiConnectUrlError(undefined);\n            } catch (e) {\n                if (canceled) {\n                    return;\n                }\n\n                console.error(e);\n                setFieldNames(undefined);\n\n                if (e instanceof Error) {\n                    setAnkiConnectUrlError(e.message);\n                } else if (typeof e === 'string') {\n                    setAnkiConnectUrlError(e);\n                } else {\n                    setAnkiConnectUrlError(String(e));\n                }\n            }\n        }\n\n        refreshFieldNames();\n\n        return () => {\n            canceled = true;\n        };\n    }, [anki, noteType, ankiConnectUrl, ankiConnectUrlError, ankiConnectUrlChangeTimestamp]);\n\n    const handleClose = useCallback(() => {\n        onClose({\n            ankiConnectUrl: ankiConnectUrl,\n            deck: deck,\n            noteType: noteType,\n            sentenceField: sentenceField,\n            definitionField: definitionField,\n            audioField: audioField,\n            imageField: imageField,\n            wordField: wordField,\n            sourceField: sourceField,\n            urlField: urlField,\n            tags: tags.filter((t) => t !== ''),\n            subtitleSize: Number(subtitleSize),\n            subtitleColor: subtitleColor,\n            subtitleOutlineThickness: Number(subtitleOutlineThickness),\n            subtitleOutlineColor: subtitleOutlineColor,\n            subtitleBackgroundColor: subtitleBackgroundColor,\n            subtitleBackgroundOpacity: Number(subtitleBackgroundOpacity),\n            subtitleFontFamily: subtitleFontFamily,\n            subtitlePreview: subtitlePreview,\n            imageBasedSubtitleScaleFactor: imageBasedSubtitleScaleFactor,\n            customAnkiFields: customFields,\n            preferMp3: preferMp3,\n            themeType: themeType,\n            audioPaddingStart: audioPaddingStart,\n            audioPaddingEnd: audioPaddingEnd,\n            maxImageWidth: maxImageWidth,\n            maxImageHeight: maxImageHeight,\n            surroundingSubtitlesCountRadius: surroundingSubtitlesCountRadius,\n            surroundingSubtitlesTimeRadius: surroundingSubtitlesTimeRadius,\n            copyToClipboardOnMine: copyToClipboardOnMine,\n            autoPausePreference: autoPausePreference,\n            keyBindSet: keyBindSet,\n            rememberSubtitleOffset: rememberSubtitleOffset,\n        });\n    }, [\n        onClose,\n        ankiConnectUrl,\n        deck,\n        noteType,\n        sentenceField,\n        definitionField,\n        audioField,\n        imageField,\n        wordField,\n        sourceField,\n        urlField,\n        customFields,\n        tags,\n        preferMp3,\n        subtitleSize,\n        subtitleColor,\n        subtitleOutlineThickness,\n        subtitleOutlineColor,\n        subtitleBackgroundColor,\n        subtitleBackgroundOpacity,\n        subtitleFontFamily,\n        subtitlePreview,\n        imageBasedSubtitleScaleFactor,\n        themeType,\n        audioPaddingStart,\n        audioPaddingEnd,\n        maxImageWidth,\n        maxImageHeight,\n        surroundingSubtitlesCountRadius,\n        surroundingSubtitlesTimeRadius,\n        copyToClipboardOnMine,\n        autoPausePreference,\n        keyBindSet,\n        rememberSubtitleOffset,\n    ]);\n\n    const customFieldInputs = Object.keys(customFields).map((customFieldName) => {\n        return (\n            <SelectableSetting\n                key={customFieldName}\n                label={`${customFieldName} Field`}\n                value={customFields[customFieldName]}\n                selections={fieldNames!}\n                onChange={(e) => handleCustomFieldChange(customFieldName, e.target.value)}\n                onSelectionChange={(e) => handleCustomFieldChange(customFieldName, e.target.value as string)}\n                onRemoval={() => handleCustomFieldRemoval(customFieldName)}\n                removable={true}\n            />\n        );\n    });\n\n    useEffect(() => {\n        if (!scrollToId) {\n            return;\n        }\n\n        setTimeout(() => document.getElementById(scrollToId)?.scrollIntoView({ behavior: 'smooth' }), 0);\n    }, [scrollToId]);\n\n    return (\n        <React.Fragment>\n            <CustomFieldDialog\n                open={customFieldDialogOpen}\n                existingCustomFieldNames={Object.keys(customFields)}\n                onProceed={handleAddCustomField}\n                onCancel={() => setCustomFieldDialogOpen(false)}\n            />\n            <Dialog open={open} maxWidth=\"xs\" fullWidth onClose={handleClose}>\n                <DialogTitle>Settings</DialogTitle>\n                <DialogContent>\n                    <Grid container direction=\"column\" spacing={3}>\n                        <Grid item id=\"anki\">\n                            <FormLabel>Anki</FormLabel>\n                            <FormGroup className={classes.root}>\n                                <TextField\n                                    label=\"Anki Connect URL\"\n                                    value={ankiConnectUrl}\n                                    error={Boolean(ankiConnectUrlError)}\n                                    helperText={ankiConnectUrlError}\n                                    color=\"secondary\"\n                                    onChange={handleAnkiConnectUrlChange}\n                                    InputProps={{\n                                        endAdornment: (\n                                            <InputAdornment position=\"end\">\n                                                <IconButton onClick={handleRetryAnkiConnectUrl}>\n                                                    <RefreshIcon />\n                                                </IconButton>\n                                            </InputAdornment>\n                                        ),\n                                    }}\n                                />\n                                <FormHelperText>\n                                    Ensure that {window.location.protocol + '//' + window.location.hostname} is in the\n                                    webCorsOriginList in your AnkiConnect settings as in this{' '}\n                                    <Link\n                                        color=\"secondary\"\n                                        target=\"_blank\"\n                                        rel=\"noreferrer\"\n                                        href=\"https://youtu.be/Mv7fEVb6PHo?t=44\"\n                                    >\n                                        video\n                                    </Link>\n                                    .\n                                </FormHelperText>\n                                <SelectableSetting\n                                    label=\"Deck\"\n                                    value={deck}\n                                    selections={deckNames}\n                                    onChange={handleDeckChange}\n                                    onSelectionChange={handleDeckSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"Note Type\"\n                                    value={noteType}\n                                    selections={modelNames}\n                                    onChange={handleNoteTypeChange}\n                                    onSelectionChange={handleNoteTypeSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"Sentence Field\"\n                                    value={sentenceField}\n                                    selections={fieldNames}\n                                    onChange={handleSentenceFieldChange}\n                                    onSelectionChange={handleSentenceFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"Definition Field\"\n                                    value={definitionField}\n                                    selections={fieldNames}\n                                    onChange={handleDefinitionFieldChange}\n                                    onSelectionChange={handleDefinitionFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"Word Field\"\n                                    value={wordField}\n                                    selections={fieldNames}\n                                    onChange={handleWordFieldChange}\n                                    onSelectionChange={handleWordFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"Audio Field\"\n                                    value={audioField}\n                                    selections={fieldNames}\n                                    onChange={handleAudioFieldChange}\n                                    onSelectionChange={handleAudioFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"Image Field\"\n                                    value={imageField}\n                                    selections={fieldNames}\n                                    onChange={handleImageFieldChange}\n                                    onSelectionChange={handleImageFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"Source Field\"\n                                    value={sourceField}\n                                    selections={fieldNames}\n                                    onChange={handleSourceFieldChange}\n                                    onSelectionChange={handleSourceFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"URL Field\"\n                                    value={urlField}\n                                    selections={fieldNames}\n                                    onChange={handleUrlFieldChange}\n                                    onSelectionChange={handleUrlFieldSelectionChange}\n                                />\n                                {customFieldInputs}\n                                <Button\n                                    className={classes.addFieldButton}\n                                    onClick={(e) => setCustomFieldDialogOpen(true)}\n                                >\n                                    Add Custom Field\n                                </Button>\n                                <TagsTextField\n                                    label=\"Tags\"\n                                    helperText=\"Comma-separated list of strings\"\n                                    fullWidth\n                                    color=\"secondary\"\n                                    tags={tags}\n                                    onTagsChange={handleTagsChange}\n                                />\n                            </FormGroup>\n                        </Grid>\n                        <Grid item id=\"mining\">\n                            <FormLabel>Mining</FormLabel>\n                            <FormGroup className={classes.root}>\n                                <FormControlLabel\n                                    control={<Switch checked={preferMp3} onChange={handlePreferMp3Change} />}\n                                    label=\"Re-encode audio as mp3 (slower)\"\n                                    labelPlacement=\"start\"\n                                    className={classes.switchLabel}\n                                />\n                                <FormControlLabel\n                                    control={\n                                        <Switch\n                                            checked={copyToClipboardOnMine}\n                                            onChange={handleCopyToClipboardOnMine}\n                                        />\n                                    }\n                                    label=\"Copy mined subtitles to clipboard\"\n                                    labelPlacement=\"start\"\n                                    className={classes.switchLabel}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label=\"Audio Padding Start\"\n                                    fullWidth\n                                    value={audioPaddingStart}\n                                    color=\"secondary\"\n                                    onChange={handleAudioPaddingStart}\n                                    inputProps={{\n                                        min: 0,\n                                        step: 1,\n                                    }}\n                                    InputProps={{\n                                        endAdornment: <InputAdornment position=\"end\">ms</InputAdornment>,\n                                    }}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label=\"Audio Padding End\"\n                                    fullWidth\n                                    value={audioPaddingEnd}\n                                    color=\"secondary\"\n                                    onChange={handleAudioPaddingEnd}\n                                    inputProps={{\n                                        min: 0,\n                                        step: 1,\n                                    }}\n                                    InputProps={{\n                                        endAdornment: <InputAdornment position=\"end\">ms</InputAdornment>,\n                                    }}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label=\"Max Image Width\"\n                                    fullWidth\n                                    value={maxImageWidth}\n                                    color=\"secondary\"\n                                    onChange={handleMaxImageWidth}\n                                    inputProps={{\n                                        min: 0,\n                                        step: 1,\n                                    }}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label=\"Max Image Height\"\n                                    fullWidth\n                                    value={maxImageHeight}\n                                    color=\"secondary\"\n                                    onChange={handleMaxImageHeight}\n                                    inputProps={{\n                                        min: 0,\n                                        step: 1,\n                                    }}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label=\"Surrounding Subtitles Count Radius\"\n                                    fullWidth\n                                    value={surroundingSubtitlesCountRadius}\n                                    color=\"secondary\"\n                                    onChange={handleSurroundingSubtitlesCountRadius}\n                                    inputProps={{\n                                        min: 1,\n                                        step: 1,\n                                    }}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label=\"Surrounding Subtitles Time Radius\"\n                                    fullWidth\n                                    value={surroundingSubtitlesTimeRadius}\n                                    color=\"secondary\"\n                                    onChange={handleSurroundingSubtitlesTimeRadius}\n                                    inputProps={{\n                                        min: 0,\n                                        step: 1,\n                                    }}\n                                    InputProps={{\n                                        endAdornment: <InputAdornment position=\"end\">ms</InputAdornment>,\n                                    }}\n                                />\n                            </FormGroup>\n                        </Grid>\n                        <Grid item id=\"playback\">\n                            <FormLabel>Playback</FormLabel>\n                            <FormGroup>\n                                <FormControlLabel\n                                    control={\n                                        <Switch\n                                            checked={rememberSubtitleOffset}\n                                            onChange={handleRememberSubtitleOffsetChange}\n                                        />\n                                    }\n                                    label=\"Remember subtitle offset\"\n                                    labelPlacement=\"start\"\n                                    className={classes.switchLabel}\n                                />\n                            </FormGroup>\n                        </Grid>\n                        <Grid item id=\"auto-pause\">\n                            <Grid container direction=\"row\" spacing={1}>\n                                <Grid item>\n                                    <FormLabel>Auto-pause Preference</FormLabel>\n                                </Grid>\n                                <Grid item>\n                                    <Tooltip\n                                        title=\"Does not enable auto-pause. Sets the preference for when to pause when auto-pause is\n                                    enabled.\"\n                                        placement=\"top\"\n                                    >\n                                        <InfoIcon fontSize=\"small\" />\n                                    </Tooltip>\n                                </Grid>\n                            </Grid>\n                            <RadioGroup row>\n                                <FormControlLabel\n                                    control={\n                                        <Radio\n                                            checked={autoPausePreference === AutoPausePreference.atStart}\n                                            value={AutoPausePreference.atStart}\n                                            onChange={handleAutoPausePreferenceChange}\n                                        />\n                                    }\n                                    label=\"At Subtitle Start\"\n                                />\n                                <FormControlLabel\n                                    control={\n                                        <Radio\n                                            checked={autoPausePreference === AutoPausePreference.atEnd}\n                                            value={AutoPausePreference.atEnd}\n                                            onChange={handleAutoPausePreferenceChange}\n                                        />\n                                    }\n                                    label=\"At Subtitle End\"\n                                />\n                            </RadioGroup>\n                        </Grid>\n                        <Grid item id=\"video-subtitle-appearance\">\n                            <FormLabel>Video Subtitle Appearance</FormLabel>\n                            <FormGroup className={classes.root}>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"color\"\n                                        label=\"Subtitle Color\"\n                                        fullWidth\n                                        value={subtitleColor}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleColorChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"number\"\n                                        label=\"Subtitle Size\"\n                                        fullWidth\n                                        value={subtitleSize}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleSizeChange}\n                                        inputProps={{\n                                            min: 1,\n                                            step: 1,\n                                        }}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"color\"\n                                        label=\"Subtitle Outline Color\"\n                                        fullWidth\n                                        value={subtitleOutlineColor}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleOutlineColorChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"number\"\n                                        label=\"Subtitle Outline Thickness\"\n                                        fullWidth\n                                        value={subtitleOutlineThickness}\n                                        onChange={handleSubtitleOutlineThicknessChange}\n                                        inputProps={{\n                                            min: 0,\n                                            step: 1,\n                                        }}\n                                        color=\"secondary\"\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"color\"\n                                        label=\"Subtitle Background Color\"\n                                        fullWidth\n                                        value={subtitleBackgroundColor}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleBackgroundColorChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"number\"\n                                        label=\"Subtitle Background Opacity\"\n                                        fullWidth\n                                        inputProps={{\n                                            min: 0,\n                                            max: 1,\n                                            step: 0.1,\n                                        }}\n                                        value={subtitleBackgroundOpacity}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleBackgroundOpacityChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"text\"\n                                        label=\"Subtitle Font Family\"\n                                        placeholder=\"Inherited\"\n                                        fullWidth\n                                        value={subtitleFontFamily}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleFontFamilyChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"number\"\n                                        label=\"Image-based Subtitle Scale Factor\"\n                                        placeholder=\"Inherited\"\n                                        fullWidth\n                                        inputProps={{\n                                            min: 0,\n                                            max: 1,\n                                            step: 0.1,\n                                        }}\n                                        value={imageBasedSubtitleScaleFactor}\n                                        color=\"secondary\"\n                                        onChange={handleImageBasedSubtitleScaleFactorChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitlePreview}>\n                                    <input\n                                        value={subtitlePreview}\n                                        className={classes.subtitlePreviewInput}\n                                        onChange={handleSubtitlePreviewChange}\n                                        style={subtitlePreviewStyles}\n                                    />\n                                </div>\n                            </FormGroup>\n                        </Grid>\n                        <Grid item id=\"theme\">\n                            <FormLabel>Theme</FormLabel>\n                            <div>\n                                <FormControlLabel\n                                    control={\n                                        <Radio\n                                            checked={themeType === 'light'}\n                                            value=\"light\"\n                                            onChange={handleThemeTypeChange}\n                                        />\n                                    }\n                                    label=\"Light\"\n                                />\n                                <FormControlLabel\n                                    control={\n                                        <Radio\n                                            checked={themeType === 'dark'}\n                                            value=\"dark\"\n                                            onChange={handleThemeTypeChange}\n                                        />\n                                    }\n                                    label=\"Dark\"\n                                />\n                            </div>\n                        </Grid>\n                        <Grid item id=\"keyboard-shortcuts\">\n                            <FormLabel>Keyboard Shortcuts</FormLabel>\n                            <FormGroup>\n                                {Object.keys(keyBindProperties).map((key) => {\n                                    const keyBindName = key as KeyBindName;\n                                    const properties = keyBindProperties[keyBindName];\n                                    return (\n                                        <KeyBindField\n                                            key={key}\n                                            label={properties.label}\n                                            keys={\n                                                extension.installed && properties.extensionOverridden\n                                                    ? extension.extensionCommands[keyBindName] ?? ''\n                                                    : keyBindSet[keyBindName].keys\n                                            }\n                                            extensionOverridden={extension.installed && properties.extensionOverridden}\n                                            onKeysChange={(keys) => handleKeysChange(keys, keyBindName)}\n                                            onOpenExtensionShortcuts={() => extension.openShortcuts()}\n                                        />\n                                    );\n                                })}\n                            </FormGroup>\n                        </Grid>\n                    </Grid>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose}>OK</Button>\n                </DialogActions>\n            </Dialog>\n        </React.Fragment>\n    );\n}\n","import {\n    AsbplayerSettings,\n    AsbplayerSettingsProvider,\n    AutoPausePreference,\n    KeyBindName,\n    KeyBindSet,\n} from '@project/common';\nimport { isMacOs } from 'react-device-detect';\n\nconst defaultAnkiConnectUrl = 'http://127.0.0.1:8765';\nconst defaultSubtitleSize = 36;\nconst defaultSubtitleColor = '#ffffff';\nconst defaultSubtitleOutlineThickness = 0;\nconst defaultSubtitleOutlineColor = '#000000';\nconst defaultSubtitleBackgroundColor = '#000000';\nconst defaultSubtitleBackgroundOpacity = 0.5;\nconst defaultSubtitleFontFamily = '';\nconst defaultSubtitlePreview = 'アあ安';\nconst defaultAudioPaddingStart = 0;\nconst defaultAudioPaddingEnd = 500;\nconst defaultMaxImageWidth = 0;\nconst defaultMaxImageHeight = 0;\nconst defaultSurroundingSubtitlesCountRadius = 2;\nconst defaultSurroundingSubtitlesTimeRadius = 10000;\nconst defaultAutoPausePreference = AutoPausePreference.atEnd;\nconst defaultKeyBindSet: KeyBindSet = {\n    togglePlay: { keys: 'space' },\n    toggleAutoPause: { keys: isMacOs ? '⇧+P' : 'shift+P' },\n    toggleCondensedPlayback: { keys: isMacOs ? '⇧+O' : 'shift+O' },\n    toggleSubtitles: { keys: 'S' },\n    toggleVideoSubtitleTrack1: { keys: '1' },\n    toggleVideoSubtitleTrack2: { keys: '2' },\n    toggleAsbplayerSubtitleTrack1: { keys: 'W+1' },\n    toggleAsbplayerSubtitleTrack2: { keys: 'W+2' },\n    seekBackward: { keys: 'A' },\n    seekForward: { keys: 'D' },\n    seekToPreviousSubtitle: { keys: 'left' },\n    seekToNextSubtitle: { keys: 'right' },\n    seekToBeginningOfCurrentSubtitle: { keys: 'down' },\n    adjustOffsetToPreviousSubtitle: { keys: isMacOs ? '⇧+left' : 'ctrl+left' },\n    adjustOffsetToNextSubtitle: { keys: isMacOs ? '⇧+right' : 'ctrl+right' },\n    decreaseOffset: { keys: isMacOs ? '⇧+⌃+right' : 'ctrl+shift+right' },\n    increaseOffset: { keys: isMacOs ? '⇧+⌃+left' : 'ctrl+shift+left' },\n    copySubtitle: { keys: isMacOs ? '⇧+⌃+Z' : 'ctrl+shift+Z' },\n    ankiExport: { keys: isMacOs ? '⇧+⌃+X' : 'ctrl+shift+X' },\n    updateLastCard: { keys: isMacOs ? '⇧+⌃+U' : 'ctrl+shift+U' },\n    decreasePlaybackRate: { keys: isMacOs ? '⇧+⌃+[' : 'ctrl+shift+[' },\n    increasePlaybackRate: { keys: isMacOs ? '⇧+⌃+]' : 'ctrl+shift+]' },\n};\n\nconst ankiConnectUrlKey = 'ankiConnectUrl';\nconst deckKey = 'deck';\nconst noteTypeKey = 'noteType';\nconst sentenceFieldKey = 'sentenceField';\nconst definitionFieldKey = 'definitionField';\nconst audioFieldKey = 'audioField';\nconst imageFieldKey = 'imageField';\nconst wordFieldKey = 'wordField';\nconst sourceFieldKey = 'sourceField';\nconst urlFieldKey = 'urlField';\nconst customAnkiFieldsKey = 'customAnkiFields';\nconst tagsKey = 'tags';\nconst subtitleSizeKey = 'subtitleSize';\nconst subtitleColorKey = 'subtitleColor';\nconst subtitleOutlineThicknessKey = 'subtitleOutlineThickness';\nconst subtitleOutlineColorKey = 'subtitleOutlineColor';\nconst subtitleBackgroundColorKey = 'subtitleBackgroundColor';\nconst subtitleBackgroundOpacityKey = 'subtitleBackgroundOpacity';\nconst subtitleFontFamilyKey = 'subtitleFontFamily';\nconst subtitlePreviewKey = 'subtitlePreview';\nconst imageBasedSubtitleScaleFactorKey = 'imageBasedSubtitleScaleFactor';\nconst audioPaddingStartKey = 'audioPaddingStart';\nconst audioPaddingEndKey = 'audioPaddingEnd';\nconst maxImageWidthKey = 'maxImageWidth';\nconst maxImageHeightKey = 'maxImageHeight';\nconst surroundingSubtitlesCountRadiusKey = 'surroundingSubtitlesCountRadius';\nconst surroundingSubtitlesTimeRadiusKey = 'surroundingSubtitlesTimeRadius';\nconst preferMp3Key = 'preferMp3';\nconst themeTypeKey = 'themeType';\nconst copyToClipboardOnMineKey = 'copyToClipboardOnMine';\nconst autoPausePreferenceKey = 'autoPausePreference';\nconst keyBindSetKey = 'keyBindSet';\nconst rememberSubtitleOffsetKey = 'rememberSubtitleOffset';\n\nexport default class SettingsProvider implements AsbplayerSettingsProvider {\n    private _tags?: string[];\n    private _keyBindSet?: KeyBindSet;\n\n    constructor() {\n        // Cache for use in useEffect dependencies\n        this._tags = this.tags;\n        this._keyBindSet = this.keyBindSet;\n    }\n\n    get settings(): AsbplayerSettings {\n        return {\n            ankiConnectUrl: this.ankiConnectUrl,\n            deck: this.deck,\n            noteType: this.noteType,\n            sentenceField: this.sentenceField,\n            definitionField: this.definitionField,\n            audioField: this.audioField,\n            imageField: this.imageField,\n            wordField: this.wordField,\n            urlField: this.urlField,\n            customAnkiFields: this.customAnkiFields,\n            tags: this.tags,\n            sourceField: this.sourceField,\n            subtitleSize: this.subtitleSize,\n            subtitleColor: this.subtitleColor,\n            subtitleOutlineThickness: this.subtitleOutlineThickness,\n            subtitleOutlineColor: this.subtitleOutlineColor,\n            subtitleBackgroundColor: this.subtitleBackgroundColor,\n            subtitleBackgroundOpacity: this.subtitleBackgroundOpacity,\n            subtitleFontFamily: this.subtitleFontFamily,\n            subtitlePreview: this.subtitlePreview,\n            imageBasedSubtitleScaleFactor: this.imageBasedSubtitleScaleFactor,\n            preferMp3: this.preferMp3,\n            themeType: this.themeType,\n            audioPaddingStart: this.audioPaddingStart,\n            audioPaddingEnd: this.audioPaddingEnd,\n            maxImageWidth: this.maxImageWidth,\n            maxImageHeight: this.maxImageHeight,\n            surroundingSubtitlesCountRadius: this.surroundingSubtitlesCountRadius,\n            surroundingSubtitlesTimeRadius: this.surroundingSubtitlesTimeRadius,\n            copyToClipboardOnMine: this.copyToClipboardOnMine,\n            autoPausePreference: this.autoPausePreference,\n            keyBindSet: this.keyBindSet,\n            rememberSubtitleOffset: this.rememberSubtitleOffset,\n        };\n    }\n\n    set settings(newSettings: AsbplayerSettings) {\n        this.ankiConnectUrl = newSettings.ankiConnectUrl;\n        this.deck = newSettings.deck;\n        this.noteType = newSettings.noteType;\n        this.sentenceField = newSettings.sentenceField;\n        this.definitionField = newSettings.definitionField;\n        this.audioField = newSettings.audioField;\n        this.imageField = newSettings.imageField;\n        this.wordField = newSettings.wordField;\n        this.sourceField = newSettings.sourceField;\n        this.urlField = newSettings.urlField;\n        this.tags = newSettings.tags;\n        this.subtitleSize = newSettings.subtitleSize;\n        this.subtitleColor = newSettings.subtitleColor;\n        this.subtitleOutlineThickness = newSettings.subtitleOutlineThickness;\n        this.subtitleOutlineColor = newSettings.subtitleOutlineColor;\n        this.subtitleBackgroundColor = newSettings.subtitleBackgroundColor;\n        this.subtitleBackgroundOpacity = newSettings.subtitleBackgroundOpacity;\n        this.subtitleFontFamily = newSettings.subtitleFontFamily;\n        this.subtitlePreview = newSettings.subtitlePreview;\n        this.imageBasedSubtitleScaleFactor = newSettings.imageBasedSubtitleScaleFactor;\n        this.customAnkiFields = newSettings.customAnkiFields;\n        this.preferMp3 = newSettings.preferMp3;\n        this.themeType = newSettings.themeType;\n        this.audioPaddingStart = newSettings.audioPaddingStart;\n        this.audioPaddingEnd = newSettings.audioPaddingEnd;\n        this.maxImageWidth = newSettings.maxImageWidth;\n        this.maxImageHeight = newSettings.maxImageHeight;\n        this.surroundingSubtitlesCountRadius = newSettings.surroundingSubtitlesCountRadius;\n        this.surroundingSubtitlesTimeRadius = newSettings.surroundingSubtitlesTimeRadius;\n        this.copyToClipboardOnMine = newSettings.copyToClipboardOnMine;\n        this.autoPausePreference = newSettings.autoPausePreference;\n        this.keyBindSet = newSettings.keyBindSet;\n        this.rememberSubtitleOffset = newSettings.rememberSubtitleOffset;\n    }\n\n    get subtitleSettings() {\n        return {\n            subtitleSize: this.subtitleSize,\n            subtitleColor: this.subtitleColor,\n            subtitleOutlineThickness: this.subtitleOutlineThickness,\n            subtitleOutlineColor: this.subtitleOutlineColor,\n            subtitleBackgroundColor: this.subtitleBackgroundColor,\n            subtitleBackgroundOpacity: this.subtitleBackgroundOpacity,\n            subtitleFontFamily: this.subtitleFontFamily,\n            imageBasedSubtitleScaleFactor: this.imageBasedSubtitleScaleFactor,\n        };\n    }\n\n    get ankiSettings() {\n        return {\n            ankiConnectUrl: this.ankiConnectUrl,\n            deck: this.deck,\n            noteType: this.noteType,\n            sentenceField: this.sentenceField,\n            definitionField: this.definitionField,\n            audioField: this.audioField,\n            imageField: this.imageField,\n            wordField: this.wordField,\n            sourceField: this.sourceField,\n            urlField: this.urlField,\n            customAnkiFields: this.customAnkiFields,\n            tags: this.tags,\n            preferMp3: this.preferMp3,\n            audioPaddingStart: this.audioPaddingStart,\n            audioPaddingEnd: this.audioPaddingEnd,\n            maxImageWidth: this.maxImageWidth,\n            maxImageHeight: this.maxImageHeight,\n            surroundingSubtitlesCountRadius: this.surroundingSubtitlesCountRadius,\n            surroundingSubtitlesTimeRadius: this.surroundingSubtitlesTimeRadius,\n        };\n    }\n\n    get miscSettings() {\n        return {\n            themeType: this.themeType,\n            copyToClipboardOnMine: this.copyToClipboardOnMine,\n            autoPausePreference: this.autoPausePreference,\n            keyBindSet: this.keyBindSet,\n            rememberSubtitleOffset: this.rememberSubtitleOffset,\n        };\n    }\n\n    _getNumberItem(key: string, defaultValue: number) {\n        const value = localStorage.getItem(key);\n\n        if (value === null) {\n            return defaultValue;\n        }\n\n        return Number(value);\n    }\n\n    _setOptionalItem(key: string, value?: string) {\n        if (typeof value === 'undefined') {\n            localStorage.removeItem(key);\n        } else {\n            localStorage.setItem(key, value);\n        }\n    }\n\n    get ankiConnectUrl() {\n        return localStorage.getItem(ankiConnectUrlKey) || defaultAnkiConnectUrl;\n    }\n\n    set ankiConnectUrl(url) {\n        localStorage.setItem(ankiConnectUrlKey, url);\n    }\n\n    get deck() {\n        return localStorage.getItem(deckKey) ?? undefined;\n    }\n\n    set deck(deck) {\n        this._setOptionalItem(deckKey, deck);\n    }\n\n    get noteType() {\n        return localStorage.getItem(noteTypeKey) ?? undefined;\n    }\n\n    set noteType(noteType) {\n        this._setOptionalItem(noteTypeKey, noteType);\n    }\n\n    get sentenceField() {\n        return localStorage.getItem(sentenceFieldKey) ?? undefined;\n    }\n\n    set sentenceField(sentenceField) {\n        this._setOptionalItem(sentenceFieldKey, sentenceField);\n    }\n\n    get definitionField() {\n        return localStorage.getItem(definitionFieldKey) ?? undefined;\n    }\n\n    set definitionField(definitionField) {\n        this._setOptionalItem(definitionFieldKey, definitionField);\n    }\n\n    get audioField() {\n        return localStorage.getItem(audioFieldKey) ?? undefined;\n    }\n\n    set audioField(audioField) {\n        this._setOptionalItem(audioFieldKey, audioField);\n    }\n\n    get imageField() {\n        return localStorage.getItem(imageFieldKey) ?? undefined;\n    }\n\n    set imageField(imageField) {\n        this._setOptionalItem(imageFieldKey, imageField);\n    }\n\n    get wordField() {\n        return localStorage.getItem(wordFieldKey) ?? undefined;\n    }\n\n    set wordField(wordField) {\n        this._setOptionalItem(wordFieldKey, wordField);\n    }\n\n    get sourceField() {\n        return localStorage.getItem(sourceFieldKey) ?? undefined;\n    }\n\n    set sourceField(sourceField) {\n        this._setOptionalItem(sourceFieldKey, sourceField);\n    }\n\n    get urlField() {\n        return localStorage.getItem(urlFieldKey) ?? undefined;\n    }\n\n    set urlField(urlField) {\n        this._setOptionalItem(urlFieldKey, urlField);\n    }\n\n    get customAnkiFields() {\n        const ankiFieldsString = localStorage.getItem(customAnkiFieldsKey);\n\n        if (ankiFieldsString) {\n            return JSON.parse(ankiFieldsString);\n        }\n\n        return {};\n    }\n\n    set customAnkiFields(customAnkiFields) {\n        localStorage.setItem(customAnkiFieldsKey, JSON.stringify(customAnkiFields));\n    }\n\n    get tags() {\n        if (typeof this._tags !== 'undefined') {\n            return this._tags;\n        }\n\n        const tagsString = localStorage.getItem(tagsKey);\n\n        if (tagsString) {\n            this._tags = JSON.parse(tagsString) as string[];\n            return this._tags;\n        }\n\n        return [];\n    }\n\n    set tags(tags) {\n        localStorage.setItem(tagsKey, JSON.stringify(tags));\n        this._tags = undefined;\n    }\n\n    get subtitleColor() {\n        return localStorage.getItem(subtitleColorKey) || defaultSubtitleColor;\n    }\n\n    set subtitleColor(subtitleColor) {\n        localStorage.setItem(subtitleColorKey, subtitleColor);\n    }\n\n    get subtitleSize() {\n        return this._getNumberItem(subtitleSizeKey, defaultSubtitleSize);\n    }\n\n    set subtitleSize(subtitleSize) {\n        localStorage.setItem(subtitleSizeKey, String(subtitleSize));\n    }\n\n    get subtitleOutlineColor() {\n        return localStorage.getItem(subtitleOutlineColorKey) || defaultSubtitleOutlineColor;\n    }\n\n    set subtitleOutlineColor(subtitleOutlineColor) {\n        localStorage.setItem(subtitleOutlineColorKey, subtitleOutlineColor);\n    }\n\n    get subtitleOutlineThickness() {\n        return this._getNumberItem(subtitleOutlineThicknessKey, defaultSubtitleOutlineThickness);\n    }\n\n    set subtitleOutlineThickness(subtitleOutlineThickness) {\n        localStorage.setItem(subtitleOutlineThicknessKey, String(subtitleOutlineThickness));\n    }\n\n    get subtitleBackgroundColor() {\n        return localStorage.getItem(subtitleBackgroundColorKey) || defaultSubtitleBackgroundColor;\n    }\n\n    set subtitleBackgroundColor(subtitleBackgroundColor) {\n        localStorage.setItem(subtitleBackgroundColorKey, subtitleBackgroundColor);\n    }\n\n    get subtitleBackgroundOpacity() {\n        return this._getNumberItem(subtitleBackgroundOpacityKey, defaultSubtitleBackgroundOpacity);\n    }\n\n    set subtitleBackgroundOpacity(subtitleBackgroundOpacity) {\n        localStorage.setItem(subtitleBackgroundOpacityKey, String(subtitleBackgroundOpacity));\n    }\n\n    get subtitleFontFamily() {\n        return localStorage.getItem(subtitleFontFamilyKey) || defaultSubtitleFontFamily;\n    }\n\n    set subtitleFontFamily(subtitleFontFamily) {\n        localStorage.setItem(subtitleFontFamilyKey, subtitleFontFamily);\n    }\n\n    get subtitlePreview() {\n        return localStorage.getItem(subtitlePreviewKey) || defaultSubtitlePreview;\n    }\n\n    set subtitlePreview(subtitlePreview) {\n        localStorage.setItem(subtitlePreviewKey, subtitlePreview);\n    }\n\n    get imageBasedSubtitleScaleFactor() {\n        return this._getNumberItem(imageBasedSubtitleScaleFactorKey, 1);\n    }\n\n    set imageBasedSubtitleScaleFactor(imageBasedSubtitleScaleFactor: number) {\n        localStorage.setItem(imageBasedSubtitleScaleFactorKey, String(imageBasedSubtitleScaleFactor));\n    }\n\n    get preferMp3() {\n        return localStorage.getItem(preferMp3Key) === 'true' || false;\n    }\n\n    set preferMp3(preferMp3) {\n        localStorage.setItem(preferMp3Key, String(preferMp3));\n    }\n\n    get themeType() {\n        const themeType = localStorage.getItem(themeTypeKey) as 'dark' | 'light' | null;\n\n        if (themeType === null) {\n            return 'dark';\n        }\n\n        return themeType;\n    }\n\n    set themeType(themeType: 'dark' | 'light') {\n        localStorage.setItem(themeTypeKey, themeType);\n    }\n\n    get audioPaddingStart() {\n        const value = localStorage.getItem(audioPaddingStartKey);\n\n        if (!value) {\n            return defaultAudioPaddingStart;\n        }\n\n        return Number(value);\n    }\n\n    set audioPaddingStart(audioPaddingStart) {\n        localStorage.setItem(audioPaddingStartKey, String(audioPaddingStart));\n    }\n\n    get audioPaddingEnd() {\n        return this._getNumberItem(audioPaddingEndKey, defaultAudioPaddingEnd);\n    }\n\n    set audioPaddingEnd(audioPaddingEnd) {\n        localStorage.setItem(audioPaddingEndKey, String(audioPaddingEnd));\n    }\n\n    get maxImageWidth() {\n        const value = localStorage.getItem(maxImageWidthKey);\n\n        if (!value) {\n            return defaultMaxImageWidth;\n        }\n\n        return Number(value);\n    }\n\n    set maxImageWidth(maxImageWidth) {\n        localStorage.setItem(maxImageWidthKey, String(maxImageWidth));\n    }\n\n    get maxImageHeight() {\n        return this._getNumberItem(maxImageHeightKey, defaultMaxImageHeight);\n    }\n\n    set maxImageHeight(maxImageHeight) {\n        localStorage.setItem(maxImageHeightKey, String(maxImageHeight));\n    }\n\n    get surroundingSubtitlesCountRadius() {\n        return this._getNumberItem(surroundingSubtitlesCountRadiusKey, defaultSurroundingSubtitlesCountRadius);\n    }\n\n    set surroundingSubtitlesCountRadius(surroundingSubtitlesCountRadius) {\n        localStorage.setItem(surroundingSubtitlesCountRadiusKey, String(surroundingSubtitlesCountRadius));\n    }\n\n    get surroundingSubtitlesTimeRadius() {\n        return this._getNumberItem(surroundingSubtitlesTimeRadiusKey, defaultSurroundingSubtitlesTimeRadius);\n    }\n\n    set surroundingSubtitlesTimeRadius(surroundingSubtitlesTimeRadius) {\n        localStorage.setItem(surroundingSubtitlesTimeRadiusKey, String(surroundingSubtitlesTimeRadius));\n    }\n\n    get copyToClipboardOnMine() {\n        return localStorage.getItem(copyToClipboardOnMineKey) === 'true' || false;\n    }\n\n    set copyToClipboardOnMine(copyToClipboardOnMine) {\n        localStorage.setItem(copyToClipboardOnMineKey, String(copyToClipboardOnMine));\n    }\n\n    get autoPausePreference() {\n        return this._getNumberItem(autoPausePreferenceKey, defaultAutoPausePreference);\n    }\n\n    set autoPausePreference(autoPausePreference) {\n        localStorage.setItem(autoPausePreferenceKey, String(autoPausePreference));\n    }\n\n    get keyBindSet() {\n        if (this._keyBindSet !== undefined) {\n            return this._keyBindSet;\n        }\n\n        let serialized = localStorage.getItem(keyBindSetKey);\n\n        if (serialized === null) {\n            this._keyBindSet = defaultKeyBindSet;\n            return defaultKeyBindSet;\n        }\n\n        const keyBindSet = JSON.parse(serialized);\n\n        for (const key of Object.keys(defaultKeyBindSet)) {\n            const keyBindName = key as KeyBindName;\n\n            if (keyBindSet[keyBindName] === undefined) {\n                keyBindSet[keyBindName] = defaultKeyBindSet[keyBindName];\n            }\n        }\n\n        this._keyBindSet = keyBindSet;\n        return keyBindSet as KeyBindSet;\n    }\n\n    set keyBindSet(keyBindSet) {\n        localStorage.setItem(keyBindSetKey, JSON.stringify(keyBindSet));\n        this._keyBindSet = undefined;\n    }\n\n    get rememberSubtitleOffset() {\n        return localStorage.getItem(rememberSubtitleOffsetKey) === 'true' || false;\n    }\n\n    set rememberSubtitleOffset(rememberSubtitleOffset) {\n        localStorage.setItem(rememberSubtitleOffsetKey, String(rememberSubtitleOffset));\n    }\n}\n","import {\n    AlertMessage,\n    AnkiDialogRequestFromVideoMessage,\n    AnkiSettings,\n    AnkiSettingsToVideoMessage,\n    AppBarToggleMessageToVideoMessage,\n    AudioTrackModel,\n    AudioTrackSelectedFromVideoMessage,\n    AudioTrackSelectedToVideoMessage,\n    CopyMessage,\n    CurrentTimeToVideoMessage,\n    FullscreenToggleMessageToVideoMessage,\n    HideSubtitlePlayerToggleToVideoMessage,\n    MiscSettings,\n    MiscSettingsToVideoMessage,\n    OffsetFromVideoMessage,\n    OffsetToVideoMessage,\n    PauseFromVideoMessage,\n    PlaybackRateFromVideoMessage,\n    PlaybackRateToVideoMessage,\n    PlayFromVideoMessage,\n    PlayMode,\n    PlayModeMessage,\n    PostMineAction,\n    ReadyFromVideoMessage,\n    ReadyStateFromVideoMessage,\n    ReadyToVideoMessage,\n    SubtitleModel,\n    SubtitleSettings,\n    SubtitleSettingsToVideoMessage,\n    SubtitlesToVideoMessage,\n    ToggleSubtitleTrackInListFromVideoMessage,\n} from '@project/common';\n\nexport default class PlayerChannel {\n    private channel?: BroadcastChannel;\n    private readyCallbacks: ((duration: number, videoFileName?: string) => void)[];\n    private playCallbacks: (() => void)[];\n    private pauseCallbacks: (() => void)[];\n    private currentTimeCallbacks: ((currentTime: number) => void)[];\n    private audioTrackSelectedCallbacks: ((id: string) => void)[];\n    private closeCallbacks: (() => void)[];\n    private subtitlesCallbacks: ((subtitles: SubtitleModel[]) => void)[];\n    private offsetCallbacks: ((offset: number) => void)[];\n    private playbackRateCallbacks: ((playbackRate: number) => void)[];\n    private playModeCallbacks: ((playMode: PlayMode) => void)[];\n    private hideSubtitlePlayerToggleCallbacks: ((hidden: boolean) => void)[];\n    private appBarToggleCallbacks: ((hidden: boolean) => void)[];\n    private fullscreenToggleCallbacks: ((hidden: boolean) => void)[];\n    private subtitleSettingsCallbacks: ((subtitleSettings: SubtitleSettings) => void)[];\n    private miscSettingsCallbacks: ((miscSettings: MiscSettings) => void)[];\n    private ankiSettingsCallbacks: ((ankiSettings: AnkiSettings) => void)[];\n    private alertCallbacks: ((message: string, severity: string) => void)[];\n\n    constructor(channel: string) {\n        this.channel = new BroadcastChannel(channel);\n        this.playCallbacks = [];\n        this.pauseCallbacks = [];\n        this.currentTimeCallbacks = [];\n        this.audioTrackSelectedCallbacks = [];\n        this.closeCallbacks = [];\n        this.readyCallbacks = [];\n        this.subtitlesCallbacks = [];\n        this.offsetCallbacks = [];\n        this.playbackRateCallbacks = [];\n        this.playModeCallbacks = [];\n        this.hideSubtitlePlayerToggleCallbacks = [];\n        this.appBarToggleCallbacks = [];\n        this.fullscreenToggleCallbacks = [];\n        this.subtitleSettingsCallbacks = [];\n        this.miscSettingsCallbacks = [];\n        this.ankiSettingsCallbacks = [];\n        this.alertCallbacks = [];\n\n        const that = this;\n\n        this.channel.onmessage = (event) => {\n            switch (event.data.command) {\n                case 'init':\n                    // ignore, this is for the chrome extension\n                    break;\n                case 'ready':\n                    const readyMessage = event.data as ReadyToVideoMessage;\n\n                    for (let callback of that.readyCallbacks) {\n                        callback(readyMessage.duration, readyMessage.videoFileName);\n                    }\n                    break;\n                case 'play':\n                    for (let callback of that.playCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'pause':\n                    for (let callback of that.pauseCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'currentTime':\n                    const currentTimeMessage = event.data as CurrentTimeToVideoMessage;\n\n                    for (let callback of that.currentTimeCallbacks) {\n                        callback(currentTimeMessage.value);\n                    }\n                    break;\n                case 'audioTrackSelected':\n                    const audioTrackSelectedMessage = event.data as AudioTrackSelectedToVideoMessage;\n\n                    for (let callback of that.audioTrackSelectedCallbacks) {\n                        callback(audioTrackSelectedMessage.id);\n                    }\n                    break;\n                case 'close':\n                    for (let callback of that.closeCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'subtitles':\n                    const subtitlesMessage = event.data as SubtitlesToVideoMessage;\n\n                    for (let callback of that.subtitlesCallbacks) {\n                        callback(subtitlesMessage.value);\n                    }\n                    break;\n                case 'offset':\n                    const offsetMessage = event.data as OffsetToVideoMessage;\n\n                    for (const callback of that.offsetCallbacks) {\n                        callback(offsetMessage.value);\n                    }\n                    break;\n                case 'playbackRate':\n                    const playbackRateMessage = event.data as PlaybackRateToVideoMessage;\n\n                    for (const callback of that.playbackRateCallbacks) {\n                        callback(playbackRateMessage.value);\n                    }\n                    break;\n                case 'subtitleSettings':\n                    const subtitleSettingsMessage = event.data as SubtitleSettingsToVideoMessage;\n\n                    for (let callback of that.subtitleSettingsCallbacks) {\n                        callback(subtitleSettingsMessage.value);\n                    }\n                    break;\n                case 'playMode':\n                    const playModeMessage = event.data as PlayModeMessage;\n\n                    for (let callback of that.playModeCallbacks) {\n                        callback(playModeMessage.playMode);\n                    }\n                    break;\n                case 'hideSubtitlePlayerToggle':\n                    const hideSubtitlePlayerToggleMessage = event.data as HideSubtitlePlayerToggleToVideoMessage;\n\n                    for (let callback of that.hideSubtitlePlayerToggleCallbacks) {\n                        callback(hideSubtitlePlayerToggleMessage.value);\n                    }\n                    break;\n                case 'appBarToggle':\n                    const appBarToggleMessage = event.data as AppBarToggleMessageToVideoMessage;\n\n                    for (let callback of that.appBarToggleCallbacks) {\n                        callback(appBarToggleMessage.value);\n                    }\n                    break;\n                case 'fullscreenToggle':\n                    const fullscreenToggleMessage = event.data as FullscreenToggleMessageToVideoMessage;\n\n                    for (const callback of that.fullscreenToggleCallbacks) {\n                        callback(fullscreenToggleMessage.value);\n                    }\n                    break;\n                case 'ankiSettings':\n                    const ankiSettingsMessage = event.data as AnkiSettingsToVideoMessage;\n\n                    for (let callback of that.ankiSettingsCallbacks) {\n                        callback(ankiSettingsMessage.value);\n                    }\n                    break;\n                case 'miscSettings':\n                    const miscSettingsMessage = event.data as MiscSettingsToVideoMessage;\n\n                    for (let callback of that.miscSettingsCallbacks) {\n                        callback(miscSettingsMessage.value);\n                    }\n                    break;\n                case 'alert':\n                    const alertMessage = event.data as AlertMessage;\n\n                    for (const callback of that.alertCallbacks) {\n                        callback(alertMessage.message, alertMessage.severity);\n                    }\n                    break;\n                default:\n                    console.error('Unrecognized event ' + event.data.command);\n            }\n        };\n    }\n\n    set currentTime(value: number) {\n        this.channel?.postMessage({ command: 'currentTime', value: value, echo: true });\n    }\n\n    onPlay(callback: () => void) {\n        this.playCallbacks.push(callback);\n    }\n\n    onPause(callback: () => void) {\n        this.pauseCallbacks.push(callback);\n    }\n\n    onCurrentTime(callback: (currentTime: number) => void) {\n        this.currentTimeCallbacks.push(callback);\n    }\n\n    onAudioTrackSelected(callback: (id: string) => void) {\n        this.audioTrackSelectedCallbacks.push(callback);\n    }\n\n    onClose(callback: () => void) {\n        this.closeCallbacks.push(callback);\n    }\n\n    onReady(callback: (duration: number, videoFileName?: string) => void) {\n        this.readyCallbacks.push(callback);\n    }\n\n    onSubtitles(callback: (subtitles: SubtitleModel[]) => void) {\n        this.subtitlesCallbacks.push(callback);\n    }\n\n    onOffset(callback: (offset: number) => void) {\n        this.offsetCallbacks.push(callback);\n    }\n\n    onPlaybackRate(callback: (playbackRate: number) => void) {\n        this.playbackRateCallbacks.push(callback);\n    }\n\n    onPlayMode(callback: (playMode: PlayMode) => void) {\n        this.playModeCallbacks.push(callback);\n    }\n\n    onHideSubtitlePlayerToggle(callback: (hidden: boolean) => void) {\n        this.hideSubtitlePlayerToggleCallbacks.push(callback);\n    }\n\n    onAppBarToggle(callback: (hidden: boolean) => void) {\n        this.appBarToggleCallbacks.push(callback);\n    }\n\n    onFullscreenToggle(callback: (fullscreen: boolean) => void) {\n        this.fullscreenToggleCallbacks.push(callback);\n    }\n\n    onSubtitleSettings(callback: (subtitleSettings: SubtitleSettings) => void) {\n        this.subtitleSettingsCallbacks.push(callback);\n    }\n\n    onMiscSettings(callback: (miscSettings: MiscSettings) => void) {\n        this.miscSettingsCallbacks.push(callback);\n    }\n\n    onAnkiSettings(callback: (ankiSettings: AnkiSettings) => void) {\n        this.ankiSettingsCallbacks.push(callback);\n    }\n\n    onAlert(callback: (message: string, severity: string) => void) {\n        this.alertCallbacks.push(callback);\n    }\n\n    ready(\n        duration: number,\n        paused: boolean,\n        playbackRate: number,\n        audioTracks: AudioTrackModel[] | undefined,\n        selectedAudioTrack: string | undefined\n    ) {\n        const message: ReadyFromVideoMessage = {\n            command: 'ready',\n            duration: duration,\n            paused: paused,\n            currentTime: 0,\n            audioTracks: audioTracks,\n            selectedAudioTrack: selectedAudioTrack,\n            playbackRate: playbackRate,\n        };\n\n        this.channel?.postMessage(message);\n    }\n\n    readyState(readyState: number) {\n        const message: ReadyStateFromVideoMessage = { command: 'readyState', value: readyState };\n        this.channel?.postMessage(message);\n    }\n\n    play() {\n        const message: PlayFromVideoMessage = { command: 'play', echo: true };\n        this.channel?.postMessage(message);\n    }\n\n    pause() {\n        const message: PauseFromVideoMessage = { command: 'pause', echo: true };\n        this.channel?.postMessage(message);\n    }\n\n    audioTrackSelected(id: string) {\n        const message: AudioTrackSelectedFromVideoMessage = { command: 'audioTrackSelected', id: id };\n        this.channel?.postMessage(message);\n    }\n\n    offset(offset: number) {\n        const message: OffsetFromVideoMessage = { command: 'offset', value: offset };\n        this.channel?.postMessage(message);\n    }\n\n    playbackRate(playbackRate: number) {\n        const message: PlaybackRateFromVideoMessage = { command: 'playbackRate', value: playbackRate, echo: true };\n        this.channel?.postMessage(message);\n    }\n\n    popOutToggle() {\n        this.channel?.postMessage({ command: 'popOutToggle' });\n    }\n\n    copy(\n        subtitle: SubtitleModel,\n        surroundingSubtitles: SubtitleModel[],\n        postMineAction: PostMineAction,\n        preventDuplicate?: boolean\n    ) {\n        const message: CopyMessage = {\n            command: 'copy',\n            subtitle: subtitle,\n            surroundingSubtitles: surroundingSubtitles,\n            preventDuplicate: preventDuplicate,\n            postMineAction: postMineAction,\n        };\n\n        this.channel?.postMessage(message);\n    }\n\n    playMode(playMode: PlayMode) {\n        this.channel?.postMessage({ command: 'playMode', playMode: playMode });\n    }\n\n    hideSubtitlePlayerToggle() {\n        this.channel?.postMessage({ command: 'hideSubtitlePlayerToggle' });\n    }\n\n    appBarToggle() {\n        this.channel?.postMessage({ command: 'appBarToggle' });\n    }\n\n    fullscreenToggle() {\n        this.channel?.postMessage({ command: 'fullscreenToggle' });\n    }\n\n    ankiDialogRequest(forwardToVideo: boolean) {\n        const message: AnkiDialogRequestFromVideoMessage = {\n            command: 'ankiDialogRequest',\n        };\n        this.channel?.postMessage(message);\n    }\n\n    toggleSubtitleTrackInList(track: number) {\n        const message: ToggleSubtitleTrackInListFromVideoMessage = {\n            command: 'toggleSubtitleTrackInList',\n            track: track,\n        };\n        this.channel?.postMessage(message);\n    }\n\n    close() {\n        if (this.channel) {\n            this.channel.postMessage({ command: 'exit' });\n            this.channel.close();\n            this.channel = undefined;\n            this.playCallbacks = [];\n            this.pauseCallbacks = [];\n            this.currentTimeCallbacks = [];\n            this.audioTrackSelectedCallbacks = [];\n            this.closeCallbacks = [];\n            this.readyCallbacks = [];\n            this.subtitlesCallbacks = [];\n            this.offsetCallbacks = [];\n            this.playbackRateCallbacks = [];\n            this.playModeCallbacks = [];\n            this.hideSubtitlePlayerToggleCallbacks = [];\n            this.appBarToggleCallbacks = [];\n            this.fullscreenToggleCallbacks = [];\n            this.subtitleSettingsCallbacks = [];\n            this.miscSettingsCallbacks = [];\n            this.ankiSettingsCallbacks = [];\n            this.alertCallbacks = [];\n        }\n    }\n}\n","import { CopySubtitleMessage, DefaultKeyBinder, KeyBinder, PostMineAction, SubtitleModel } from '@project/common';\nimport ChromeExtension, { ExtensionMessage } from './ChromeExtension';\n\nexport default class AppKeyBinder implements KeyBinder {\n    private readonly defaultKeyBinder: DefaultKeyBinder;\n    private readonly extension: ChromeExtension;\n    private readonly copyHandlers: ((event: KeyboardEvent) => void)[] = [];\n    private readonly ankiExportHandlers: ((event: KeyboardEvent) => void)[] = [];\n    private readonly updateLastCardHandlers: ((event: KeyboardEvent) => void)[] = [];\n    private readonly onExtensionMessage: (message: ExtensionMessage) => void;\n\n    constructor(keyBinder: DefaultKeyBinder, extension: ChromeExtension) {\n        this.defaultKeyBinder = keyBinder;\n        this.extension = extension;\n\n        this.onExtensionMessage = (message: ExtensionMessage) => {\n            if (message.data.command === 'copy-subtitle') {\n                const command = message.data as CopySubtitleMessage;\n                let handlers: ((event: KeyboardEvent) => void)[] | undefined;\n\n                switch (command.postMineAction) {\n                    case PostMineAction.none:\n                        handlers = this.copyHandlers;\n                        break;\n                    case PostMineAction.showAnkiDialog:\n                        handlers = this.ankiExportHandlers;\n                        break;\n                    case PostMineAction.updateLastCard:\n                        handlers = this.updateLastCardHandlers;\n                        break;\n                    default:\n                        console.error('Unknown post mine action ' + command.postMineAction);\n                }\n\n                for (const h of handlers!) {\n                    h(new KeyboardEvent('mock'));\n                }\n            }\n        };\n        extension.subscribe(this.onExtensionMessage);\n    }\n\n    bindCopy<T extends SubtitleModel = SubtitleModel>(\n        onCopy: (event: KeyboardEvent, subtitle: T) => void,\n        disabledGetter: () => boolean,\n        subtitleGetter: () => T | undefined,\n        useCapture?: boolean | undefined\n    ): () => void {\n        if (this.extension.installed) {\n            const handler = this.defaultKeyBinder.copyHandler(onCopy, disabledGetter, subtitleGetter);\n            this.copyHandlers.push(handler);\n            return () => {\n                this._remove(handler, this.copyHandlers);\n            };\n        }\n\n        return this.defaultKeyBinder.bindCopy(onCopy, disabledGetter, subtitleGetter, useCapture);\n    }\n\n    bindAnkiExport(\n        onAnkiExport: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        if (this.extension.installed) {\n            const handler = this.defaultKeyBinder.ankiExportHandler(onAnkiExport, disabledGetter);\n            this.ankiExportHandlers.push(handler);\n            return () => {\n                this._remove(handler, this.ankiExportHandlers);\n            };\n        }\n\n        return this.defaultKeyBinder.bindAnkiExport(onAnkiExport, disabledGetter, useCapture);\n    }\n\n    bindUpdateLastCard(\n        onUpdateLastCard: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        if (this.extension.installed) {\n            const handler = this.defaultKeyBinder.updateLastCardHandler(onUpdateLastCard, disabledGetter);\n            this.updateLastCardHandlers.push(handler);\n            return () => {\n                this._remove(handler, this.updateLastCardHandlers);\n            };\n        }\n\n        return this.defaultKeyBinder.bindUpdateLastCard(onUpdateLastCard, disabledGetter, useCapture);\n    }\n\n    private _remove(callback: (event: KeyboardEvent) => void, list: ((event: KeyboardEvent) => void)[]) {\n        for (let i = list.length - 1; i >= 0; --i) {\n            if (callback === list[i]) {\n                list.splice(i, 1);\n                break;\n            }\n        }\n    }\n\n    bindSeekToSubtitle(\n        onSeekToSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindSeekToSubtitle(\n            onSeekToSubtitle,\n            disabledGetter,\n            timeGetter,\n            subtitlesGetter,\n            useCapture\n        );\n    }\n\n    bindSeekToBeginningOfCurrentSubtitle(\n        onSeekToBeginningOfCurrentSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindSeekToBeginningOfCurrentSubtitle(\n            onSeekToBeginningOfCurrentSubtitle,\n            disabledGetter,\n            timeGetter,\n            subtitlesGetter,\n            useCapture\n        );\n    }\n\n    bindSeekBackwardOrForward(\n        onSeekBackwardOrForward: (event: KeyboardEvent, forward: boolean) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindSeekBackwardOrForward(onSeekBackwardOrForward, disabledGetter, useCapture);\n    }\n\n    bindOffsetToSubtitle(\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindOffsetToSubtitle(\n            onOffsetChange,\n            disabledGetter,\n            timeGetter,\n            subtitlesGetter,\n            useCapture\n        );\n    }\n\n    bindAdjustOffset(\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\n        disabledGetter: () => boolean,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindAdjustOffset(onOffsetChange, disabledGetter, subtitlesGetter, useCapture);\n    }\n\n    bindAdjustPlaybackRate(\n        onAdjustPlaybackRate: (event: KeyboardEvent, increase: boolean) => void,\n        disabledGetter: () => boolean,\n        useCapture = false\n    ) {\n        return this.defaultKeyBinder.bindAdjustPlaybackRate(onAdjustPlaybackRate, disabledGetter, useCapture);\n    }\n\n    bindToggleSubtitles(\n        onToggleSubtitles: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindToggleSubtitles(onToggleSubtitles, disabledGetter, useCapture);\n    }\n\n    bindToggleSubtitleTrackInVideo(\n        onToggleSubtitleTrack: (event: KeyboardEvent, extra: any) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindToggleSubtitleTrackInVideo(onToggleSubtitleTrack, disabledGetter, useCapture);\n    }\n\n    bindToggleSubtitleTrackInList(\n        onToggleSubtitleTrackInList: (event: KeyboardEvent, extra: any) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindToggleSubtitleTrackInList(\n            onToggleSubtitleTrackInList,\n            disabledGetter,\n            useCapture\n        );\n    }\n\n    bindPlay(\n        onPlay: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindPlay(onPlay, disabledGetter, useCapture);\n    }\n\n    bindAutoPause(\n        onAutoPause: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindAutoPause(onAutoPause, disabledGetter, useCapture);\n    }\n\n    bindCondensedPlayback(\n        onCondensedPlayback: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindCondensedPlayback(onCondensedPlayback, disabledGetter, useCapture);\n    }\n}\n","import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { isMobile } from 'react-device-detect';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useWindowSize } from '../hooks/useWindowSize';\nimport { arrayEquals, computeStyles } from '../services/util';\nimport {\n    surroundingSubtitles,\n    mockSurroundingSubtitles,\n    SubtitleModel,\n    AudioTrackModel,\n    PostMineAction,\n    PlayMode,\n    MiscSettings,\n    SubtitleSettings,\n    DefaultKeyBinder,\n    AnkiSettings,\n    SubtitleCollection,\n    AutoPausePreference,\n} from '@project/common';\nimport { SubtitleTextImage } from '@project/common/components';\nimport Clock from '../services/Clock';\nimport Controls, { Point } from './Controls';\nimport PlayerChannel from '../services/PlayerChannel';\nimport SettingsProvider from '../services/SettingsProvider';\nimport AppKeyBinder from '../services/AppKeyBinder';\nimport ChromeExtension from '../services/ChromeExtension';\nimport PlaybackPreferences from '../services/PlaybackPreferences';\nimport { AnkiDialogFinishedRequest } from './Player';\nimport { Color } from '@material-ui/lab/Alert';\nimport Alert from './Alert';\n\ninterface ExperimentalHTMLVideoElement extends HTMLVideoElement {\n    readonly audioTracks: any;\n}\n\nconst useStyles = makeStyles({\n    root: {\n        position: 'relative',\n        backgroundColor: 'black',\n        height: '100vh',\n        overflow: 'hidden',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    video: {\n        margin: 'auto',\n    },\n    cursorHidden: {\n        cursor: 'none',\n    },\n    subtitleContainer: {\n        position: 'absolute',\n        paddingLeft: 20,\n        paddingRight: 20,\n        bottom: 100,\n        textAlign: 'center',\n        whiteSpace: 'pre-wrap',\n        lineHeight: 'normal',\n    },\n});\n\nfunction notifyReady(\n    element: ExperimentalHTMLVideoElement,\n    playerChannel: PlayerChannel,\n    setAudioTracks: React.Dispatch<React.SetStateAction<AudioTrackModel[] | undefined>>,\n    setSelectedAudioTrack: React.Dispatch<React.SetStateAction<string | undefined>>\n) {\n    if (window.outerWidth && element.videoWidth > 0 && element.videoHeight > 0) {\n        const availWidth = window.screen.availWidth - (window.outerWidth - window.innerWidth);\n        const availHeight = window.screen.availHeight - (window.outerHeight - window.innerHeight);\n        const resizeRatio = Math.min(1, Math.min(availWidth / element.videoWidth, availHeight / element.videoHeight));\n\n        window.resizeTo(\n            resizeRatio * element.videoWidth + (window.outerWidth - window.innerWidth),\n            resizeRatio * element.videoHeight + (window.outerHeight - window.innerHeight)\n        );\n    }\n\n    let tracks: AudioTrackModel[] | undefined;\n    let selectedTrack: string | undefined;\n\n    if (element.audioTracks) {\n        tracks = [];\n\n        for (let t of element.audioTracks) {\n            tracks.push({\n                id: t.id,\n                label: t.label,\n                language: t.language,\n            });\n\n            if (t.enabled) {\n                selectedTrack = t.id;\n            }\n        }\n    } else {\n        tracks = undefined;\n        selectedTrack = undefined;\n    }\n\n    setAudioTracks(tracks);\n    setSelectedAudioTrack(selectedTrack);\n    playerChannel.ready(element.duration, element.paused, element.playbackRate, tracks, selectedTrack);\n}\n\nfunction errorMessage(element: HTMLVideoElement) {\n    let error;\n    switch (element.error?.code) {\n        case 1:\n            error = 'Aborted';\n            break;\n        case 2:\n            error = 'Network error';\n            break;\n        case 3:\n            error = 'Decoding error';\n            break;\n        case 4:\n            error = 'Source not supported';\n            break;\n        default:\n            error = 'Unknown error';\n            break;\n    }\n\n    return error + ': ' + (element.error?.message || '<details missing>');\n}\n\ninterface Props {\n    settingsProvider: SettingsProvider;\n    playbackPreferences: PlaybackPreferences;\n    extension: ChromeExtension;\n    videoFile: string;\n    channel: string;\n    popOut: boolean;\n    ankiDialogFinishedRequest: AnkiDialogFinishedRequest;\n    onAnkiDialogRequest: (\n        videoFileUrl: string,\n        videoFileName: string,\n        selectedAudioTrack: string | undefined,\n        playbackRate: number,\n        subtitle: SubtitleModel,\n        surroundingSubtitles: SubtitleModel[],\n        timestamp: number\n    ) => void;\n    onError: (error: string) => void;\n    onPlayModeChangedViaBind: (oldPlayMode: PlayMode, newPlayMode: PlayMode) => void;\n}\n\ninterface IndexedSubtitleModel extends SubtitleModel {\n    index: number;\n}\n\nexport default function VideoPlayer({\n    settingsProvider,\n    playbackPreferences,\n    extension,\n    videoFile,\n    channel,\n    popOut,\n    ankiDialogFinishedRequest,\n    onAnkiDialogRequest,\n    onError,\n    onPlayModeChangedViaBind,\n}: Props) {\n    const classes = useStyles();\n    const poppingInRef = useRef<boolean>();\n    const videoRef = useRef<ExperimentalHTMLVideoElement>();\n    const [windowWidth, windowHeight] = useWindowSize(true);\n    if (videoRef.current) {\n        videoRef.current.width = windowWidth;\n        videoRef.current.height = windowHeight;\n    }\n    const playerChannel = useMemo(() => new PlayerChannel(channel), [channel]);\n    const [playing, setPlaying] = useState<boolean>(false);\n    const [fullscreen, setFullscreen] = useState<boolean>(false);\n    const playingRef = useRef<boolean>();\n    playingRef.current = playing;\n    const [length, setLength] = useState<number>(0);\n    const [videoFileName, setVideoFileName] = useState<string>();\n    const [offset, setOffset] = useState<number>(0);\n    const [playbackRate, setPlaybackRate] = useState<number>(1);\n    const [audioTracks, setAudioTracks] = useState<AudioTrackModel[]>();\n    const [selectedAudioTrack, setSelectedAudioTrack] = useState<string>();\n    const [, setResumeOnFinishedAnkiDialogRequest] = useState<boolean>(false);\n    const [subtitles, setSubtitles] = useState<IndexedSubtitleModel[]>([]);\n    const subtitleCollection = useMemo<SubtitleCollection<IndexedSubtitleModel>>(\n        () =>\n            new SubtitleCollection<IndexedSubtitleModel>(subtitles, {\n                returnLastShown: false,\n                showingCheckRadiusMs: 150,\n            }),\n        [subtitles]\n    );\n    const [showSubtitles, setShowSubtitles] = useState<IndexedSubtitleModel[]>([]);\n    const [startedShowingSubtitle, setStartedShowingSubtitle] = useState<IndexedSubtitleModel>();\n    const [willStopShowingSubtitle, setWillStopShowingSubtitle] = useState<IndexedSubtitleModel>();\n    const [subtitlesEnabled, setSubtitlesEnabled] = useState(true);\n    const [disabledSubtitleTracks, setDisabledSubtitleTracks] = useState<{ [index: number]: boolean }>({});\n    const [playMode, setPlayMode] = useState<PlayMode>(PlayMode.normal);\n    const [subtitlePlayerHidden, setSubtitlePlayerHidden] = useState<boolean>(false);\n    const [appBarHidden, setAppBarHidden] = useState<boolean>(playbackPreferences.theaterMode);\n    const showSubtitlesRef = useRef<IndexedSubtitleModel[]>([]);\n    showSubtitlesRef.current = showSubtitles;\n    const clock = useMemo<Clock>(() => new Clock(), []);\n    const mousePositionRef = useRef<Point>({ x: 0, y: 0 });\n    const [showCursor, setShowCursor] = useState<boolean>(false);\n    const lastMouseMovementTimestamp = useRef<number>(0);\n    const containerRef = useRef<HTMLDivElement>(null);\n    const [miscSettings, setMiscSettings] = useState<MiscSettings>(settingsProvider.miscSettings);\n    const [subtitleSettings, setSubtitleSettings] = useState<SubtitleSettings>(settingsProvider.subtitleSettings);\n    const [ankiSettings, setAnkiSettings] = useState<AnkiSettings>(settingsProvider.ankiSettings);\n    const [alertOpen, setAlertOpen] = useState<boolean>(false);\n    const [alertMessage, setAlertMessage] = useState<string>('');\n    const [alertSeverity, setAlertSeverity] = useState<Color>('info');\n\n    const keyBinder = useMemo<AppKeyBinder>(\n        () => new AppKeyBinder(new DefaultKeyBinder(miscSettings.keyBindSet), extension),\n        [miscSettings.keyBindSet, extension]\n    );\n    const videoRefCallback = useCallback(\n        (element: HTMLVideoElement) => {\n            if (element) {\n                const videoElement = element as ExperimentalHTMLVideoElement;\n                videoRef.current = videoElement;\n\n                if (videoElement.readyState === 4) {\n                    notifyReady(videoElement, playerChannel, setAudioTracks, setSelectedAudioTrack);\n                } else {\n                    videoElement.onloadeddata = (event) => {\n                        notifyReady(videoElement, playerChannel, setAudioTracks, setSelectedAudioTrack);\n                    };\n                }\n\n                videoElement.oncanplay = (event) => {\n                    playerChannel.readyState(4);\n\n                    if (playingRef.current) {\n                        clock.start();\n                    }\n                };\n\n                videoElement.ontimeupdate = (event) => clock.setTime(element.currentTime * 1000);\n\n                videoElement.onerror = (event) => onError(errorMessage(element));\n            }\n        },\n        [clock, playerChannel, onError]\n    );\n\n    function selectAudioTrack(id: string) {\n        const audioTracks = videoRef.current?.audioTracks;\n\n        if (!audioTracks) {\n            return;\n        }\n\n        // @ts-ignore\n        for (const t of audioTracks) {\n            if (t.id === id) {\n                t.enabled = true;\n            } else {\n                t.enabled = false;\n            }\n        }\n    }\n\n    const updateSubtitlesWithOffset = useCallback((offset: number) => {\n        setOffset(offset);\n        setSubtitles((subtitles) =>\n            subtitles.map((s, i) => ({\n                text: s.text,\n                textImage: s.textImage,\n                start: s.originalStart + offset,\n                originalStart: s.originalStart,\n                end: s.originalEnd + offset,\n                originalEnd: s.originalEnd,\n                track: s.track,\n                index: i,\n            }))\n        );\n    }, []);\n\n    const updatePlaybackRate = useCallback(\n        (playbackRate: number, forwardToPlayer: boolean) => {\n            if (videoRef.current) {\n                videoRef.current.playbackRate = playbackRate;\n                clock.rate = playbackRate;\n                setPlaybackRate(playbackRate);\n\n                if (forwardToPlayer) {\n                    playerChannel.playbackRate(playbackRate);\n                }\n            }\n        },\n        [playerChannel, clock]\n    );\n\n    useEffect(() => {\n        playerChannel.onReady((duration, videoFileName) => {\n            setLength(duration);\n            setVideoFileName(videoFileName);\n        });\n\n        playerChannel.onPlay(async () => {\n            await videoRef.current?.play();\n            clock.start();\n            setPlaying(true);\n        });\n\n        playerChannel.onPause(() => {\n            videoRef.current?.pause();\n            clock.stop();\n            setPlaying(false);\n        });\n\n        playerChannel.onCurrentTime((currentTime) => {\n            if (videoRef.current) {\n                videoRef.current.currentTime = currentTime;\n            }\n\n            if (videoRef.current?.readyState === 4) {\n                playerChannel.readyState(4);\n            }\n\n            clock.stop();\n            clock.setTime(currentTime * 1000);\n        });\n\n        playerChannel.onAudioTrackSelected((id) => {\n            selectAudioTrack(id);\n            setSelectedAudioTrack(id);\n            playerChannel.audioTrackSelected(id);\n        });\n\n        playerChannel.onClose(() => {\n            playerChannel.close();\n            window.close();\n        });\n\n        playerChannel.onSubtitles((subtitles) => {\n            setSubtitles(subtitles.map((s, i) => ({ ...s, index: i })));\n\n            if (subtitles && subtitles.length > 0) {\n                const s = subtitles[0];\n                const offset = s.start - s.originalStart;\n                setOffset(offset);\n            }\n        });\n\n        playerChannel.onPlayMode((playMode) => setPlayMode(playMode));\n        playerChannel.onHideSubtitlePlayerToggle((hidden) => setSubtitlePlayerHidden(hidden));\n        playerChannel.onAppBarToggle((hidden) => setAppBarHidden(hidden));\n        playerChannel.onFullscreenToggle((fullscreen) => setFullscreen(fullscreen));\n        playerChannel.onSubtitleSettings(setSubtitleSettings);\n        playerChannel.onMiscSettings(setMiscSettings);\n        playerChannel.onAnkiSettings(setAnkiSettings);\n        playerChannel.onOffset(updateSubtitlesWithOffset);\n        playerChannel.onPlaybackRate((playbackRate) => {\n            updatePlaybackRate(playbackRate, false);\n        });\n        playerChannel.onAlert((message, severity) => {\n            if (popOut) {\n                setAlertOpen(true);\n                setAlertMessage(message);\n                setAlertSeverity(severity as Color);\n            }\n        });\n\n        window.onbeforeunload = (e) => {\n            if (!poppingInRef.current) {\n                playerChannel.close();\n            }\n        };\n\n        return () => playerChannel.close();\n    }, [clock, playerChannel, updateSubtitlesWithOffset, updatePlaybackRate, popOut]);\n\n    const handlePlay = useCallback(() => {\n        if (videoRef.current) {\n            playerChannel.play();\n        }\n    }, [playerChannel]);\n\n    const handlePause = useCallback(() => playerChannel.pause(), [playerChannel]);\n\n    const handleSeek = useCallback(\n        (progress: number) => {\n            if (playingRef.current) {\n                clock.stop();\n            }\n\n            const time = progress * length;\n            playerChannel.currentTime = time / 1000;\n        },\n        [length, clock, playerChannel]\n    );\n\n    function handleMouseMove(e: React.MouseEvent<HTMLDivElement>) {\n        lastMouseMovementTimestamp.current = Date.now();\n\n        if (!containerRef.current) {\n            return;\n        }\n\n        var bounds = containerRef.current.getBoundingClientRect();\n        mousePositionRef.current.x = e.clientX - bounds.left;\n        mousePositionRef.current.y = e.clientY - bounds.top;\n    }\n\n    const handleAudioTrackSelected = useCallback(\n        (id: string) => {\n            if (playingRef.current) {\n                clock.stop();\n                playerChannel.pause();\n            }\n\n            selectAudioTrack(id);\n            setSelectedAudioTrack(id);\n            playerChannel.currentTime = 0;\n            playerChannel.audioTrackSelected(id);\n        },\n        [playerChannel, clock]\n    );\n\n    useEffect(() => {\n        if (!subtitles || subtitles.length === 0) {\n            return;\n        }\n\n        const interval = setInterval(() => {\n            const now = clock.time(length);\n            let showSubtitles = [];\n            const slice = subtitleCollection.subtitlesAt(now);\n\n            for (const s of slice.showing) {\n                if (!disabledSubtitleTracks[s.track]) {\n                    showSubtitles.push(s);\n                }\n            }\n\n            if (playMode === PlayMode.autoPause) {\n                if (miscSettings.autoPausePreference === AutoPausePreference.atStart) {\n                    if (\n                        slice.startedShowing &&\n                        slice.startedShowing !== startedShowingSubtitle &&\n                        !disabledSubtitleTracks[slice.startedShowing.track]\n                    ) {\n                        playerChannel.pause();\n                        setStartedShowingSubtitle(slice.startedShowing);\n                    }\n                } else {\n                    if (\n                        slice.willStopShowing &&\n                        slice.willStopShowing !== willStopShowingSubtitle &&\n                        !disabledSubtitleTracks[slice.willStopShowing.track]\n                    ) {\n                        playerChannel.pause();\n                        setWillStopShowingSubtitle(slice.willStopShowing);\n                    }\n                }\n            }\n\n            showSubtitles = showSubtitles.sort((s1, s2) => s1.track - s2.track);\n\n            if (!arrayEquals(showSubtitles, showSubtitlesRef.current, (s1, s2) => s1.index === s2.index)) {\n                setShowSubtitles(showSubtitles);\n            }\n        }, 100);\n\n        return () => clearTimeout(interval);\n    }, [\n        subtitleCollection,\n        playerChannel,\n        playMode,\n        subtitles,\n        disabledSubtitleTracks,\n        clock,\n        length,\n        miscSettings,\n        startedShowingSubtitle,\n        willStopShowingSubtitle,\n    ]);\n\n    const handleOffsetChange = useCallback(\n        (offset: number) => {\n            updateSubtitlesWithOffset(offset);\n            playerChannel.offset(offset);\n        },\n        [playerChannel, updateSubtitlesWithOffset]\n    );\n\n    const handlePlaybackRateChange = useCallback(\n        (playbackRate: number) => {\n            updatePlaybackRate(playbackRate, true);\n        },\n        [updatePlaybackRate]\n    );\n\n    useEffect(() => {\n        return keyBinder.bindSeekToSubtitle(\n            (event, subtitle) => {\n                event.stopPropagation();\n                event.preventDefault();\n                playerChannel.currentTime = subtitle.start / 1000;\n            },\n            () => !videoRef.current,\n            () => clock.time(length),\n            () => subtitles\n        );\n    }, [keyBinder, playerChannel, subtitles, length, clock]);\n\n    useEffect(() => {\n        return keyBinder.bindSeekToBeginningOfCurrentSubtitle(\n            (event, subtitle) => {\n                event.stopPropagation();\n                event.preventDefault();\n                playerChannel.currentTime = subtitle.start / 1000;\n            },\n            () => !videoRef.current,\n            () => clock.time(length),\n            () => subtitles\n        );\n    }, [keyBinder, playerChannel, subtitles, length, clock]);\n\n    useEffect(() => {\n        return keyBinder.bindSeekBackwardOrForward(\n            (event, forward) => {\n                event.stopPropagation();\n                event.preventDefault();\n                const timestamp = clock.time(length);\n\n                if (forward) {\n                    playerChannel.currentTime = Math.min(length / 1000, (timestamp + 10000) / 1000);\n                } else {\n                    playerChannel.currentTime = Math.max(0, (timestamp - 10000) / 1000);\n                }\n            },\n            () => !videoRef.current\n        );\n    }, [keyBinder, playerChannel, length, clock]);\n\n    const calculateSurroundingSubtitles = useCallback(\n        (index: number) => {\n            return surroundingSubtitles(\n                subtitles,\n                index,\n                ankiSettings.surroundingSubtitlesCountRadius,\n                ankiSettings.surroundingSubtitlesTimeRadius\n            );\n        },\n        [subtitles, ankiSettings.surroundingSubtitlesCountRadius, ankiSettings.surroundingSubtitlesTimeRadius]\n    );\n\n    useEffect(() => {\n        return keyBinder.bindCopy<IndexedSubtitleModel>(\n            (event, subtitle) => {\n                event.stopPropagation();\n                event.preventDefault();\n\n                const noSubtitles = !subtitles || subtitles.length === 0;\n\n                playerChannel.copy(\n                    subtitle,\n                    noSubtitles\n                        ? mockSurroundingSubtitles(subtitle, length, 5000)\n                        : calculateSurroundingSubtitles(subtitle.index),\n                    PostMineAction.none\n                );\n            },\n            () => false,\n            () => {\n                if (!subtitles || subtitles.length === 0) {\n                    const timestamp = clock.time(length);\n                    const end = Math.min(timestamp + 5000, length);\n\n                    return {\n                        text: '',\n                        start: timestamp,\n                        originalStart: timestamp,\n                        end: end,\n                        originalEnd: end,\n                        track: 0,\n                        index: 0,\n                    };\n                }\n\n                if (!showSubtitlesRef.current || showSubtitlesRef.current.length === 0) {\n                    return undefined;\n                }\n\n                return showSubtitlesRef.current[0];\n            }\n        );\n    }, [keyBinder, playerChannel, clock, length, subtitles, calculateSurroundingSubtitles]);\n\n    useEffect(() => {\n        return keyBinder.bindAdjustOffset(\n            (event, offset) => {\n                event.preventDefault();\n                event.stopPropagation();\n                handleOffsetChange(offset);\n            },\n            () => false,\n            () => subtitles\n        );\n    }, [keyBinder, handleOffsetChange, subtitles]);\n\n    useEffect(() => {\n        return keyBinder.bindAdjustPlaybackRate(\n            (event, increase) => {\n                event.preventDefault();\n                if (increase) {\n                    updatePlaybackRate(Math.min(5, playbackRate + 0.1), true);\n                } else {\n                    updatePlaybackRate(Math.max(0.1, playbackRate - 0.1), true);\n                }\n            },\n            () => false\n        );\n    }, [updatePlaybackRate, playbackRate, keyBinder]);\n\n    useEffect(() => {\n        return keyBinder.bindToggleSubtitles(\n            (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n                setSubtitlesEnabled((enabled) => !enabled);\n            },\n            () => false\n        );\n    }, [keyBinder]);\n\n    useEffect(() => {\n        return keyBinder.bindToggleSubtitleTrackInVideo(\n            (event, track) => {\n                event.preventDefault();\n                event.stopPropagation();\n                setDisabledSubtitleTracks((tracks) => {\n                    const newTracks = { ...tracks };\n                    newTracks[track] = !tracks[track];\n                    return newTracks;\n                });\n            },\n            () => false\n        );\n    }, [keyBinder]);\n\n    useEffect(() => {\n        return keyBinder.bindToggleSubtitleTrackInList(\n            (event, track) => {\n                event.preventDefault();\n                event.stopPropagation();\n                playerChannel.toggleSubtitleTrackInList(track);\n            },\n            () => false\n        );\n    }, [keyBinder, playerChannel]);\n\n    useEffect(() => {\n        return keyBinder.bindOffsetToSubtitle(\n            (event, offset) => {\n                event.preventDefault();\n                event.stopPropagation();\n                handleOffsetChange(offset);\n            },\n            () => false,\n            () => clock.time(length),\n            () => subtitles\n        );\n    }, [keyBinder, handleOffsetChange, subtitles, clock, length]);\n\n    const extractSubtitles = useCallback(\n        (\n            noSubtitleCallback: (subtitle: SubtitleModel, surroundingSubtitles: SubtitleModel[]) => void,\n            subtitleCallback: (subtitle: SubtitleModel, surroundingSubtitles: SubtitleModel[]) => void\n        ) => {\n            if (!subtitles || subtitles.length === 0) {\n                const timestamp = clock.time(length);\n                const end = Math.min(timestamp + 5000, length);\n                const subtitle = {\n                    text: '',\n                    start: timestamp,\n                    originalStart: timestamp,\n                    end: end,\n                    originalEnd: end,\n                    track: 0,\n                };\n\n                noSubtitleCallback(subtitle, mockSurroundingSubtitles(subtitle, length, 5000));\n            } else if (showSubtitlesRef.current && showSubtitlesRef.current.length > 0) {\n                const currentSubtitle = showSubtitlesRef.current[0];\n                subtitleCallback(currentSubtitle, calculateSurroundingSubtitles(currentSubtitle.index));\n            }\n        },\n        [subtitles, calculateSurroundingSubtitles, length, clock]\n    );\n\n    useEffect(() => {\n        return keyBinder.bindAnkiExport(\n            (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n\n                if (popOut) {\n                    extractSubtitles(\n                        (subtitle, surroundingSubtitles) => {\n                            playerChannel.copy(subtitle, surroundingSubtitles, PostMineAction.none, false);\n                            onAnkiDialogRequest(\n                                videoFile,\n                                videoFileName ?? '',\n                                selectedAudioTrack,\n                                playbackRate,\n                                subtitle,\n                                surroundingSubtitles,\n                                clock.time(length)\n                            );\n                        },\n                        (subtitle, surroundingSubtitles) => {\n                            playerChannel.copy(subtitle, surroundingSubtitles, PostMineAction.none, true);\n                            onAnkiDialogRequest(\n                                videoFile,\n                                videoFileName ?? '',\n                                selectedAudioTrack,\n                                playbackRate,\n                                subtitle,\n                                surroundingSubtitles,\n                                clock.time(length)\n                            );\n                        }\n                    );\n\n                    if (playing) {\n                        playerChannel.pause();\n                        setResumeOnFinishedAnkiDialogRequest(true);\n                    }\n                } else {\n                    extractSubtitles(\n                        (subtitle, surroundingSubtitles) =>\n                            playerChannel.copy(subtitle, surroundingSubtitles, PostMineAction.showAnkiDialog, false),\n                        (subtitle, surroundingSubtitles) =>\n                            playerChannel.copy(subtitle, surroundingSubtitles, PostMineAction.showAnkiDialog, true)\n                    );\n                }\n            },\n            () => false\n        );\n    }, [\n        keyBinder,\n        playerChannel,\n        extractSubtitles,\n        clock,\n        length,\n        videoFile,\n        videoFileName,\n        selectedAudioTrack,\n        playbackRate,\n        onAnkiDialogRequest,\n        popOut,\n        playing,\n    ]);\n\n    useEffect(() => {\n        if (ankiDialogFinishedRequest && ankiDialogFinishedRequest.timestamp > 0) {\n            setResumeOnFinishedAnkiDialogRequest((resumeOnFinishedAnkiDialogRequest) => {\n                if (resumeOnFinishedAnkiDialogRequest && ankiDialogFinishedRequest.resume) {\n                    playerChannel.play();\n                }\n\n                return false;\n            });\n        }\n    }, [ankiDialogFinishedRequest, playerChannel]);\n\n    useEffect(() => {\n        return keyBinder.bindUpdateLastCard(\n            (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n\n                extractSubtitles(\n                    (subtitle, surroundingSubtitles) =>\n                        playerChannel.copy(subtitle, surroundingSubtitles, PostMineAction.updateLastCard, false),\n                    (subtitle, surroundingSubtitles) =>\n                        playerChannel.copy(subtitle, surroundingSubtitles, PostMineAction.updateLastCard, true)\n                );\n            },\n            () => false\n        );\n    }, [keyBinder, playerChannel, extractSubtitles]);\n\n    useEffect(() => {\n        return keyBinder.bindPlay(\n            (event) => {\n                event.preventDefault();\n\n                if (playing) {\n                    playerChannel.pause();\n                } else {\n                    playerChannel.play();\n                }\n            },\n            () => false\n        );\n    }, [keyBinder, playing, playerChannel]);\n\n    const togglePlayMode = useCallback(\n        (event: KeyboardEvent, togglePlayMode: PlayMode) => {\n            event.preventDefault();\n            const newPlayMode = playMode === togglePlayMode ? PlayMode.normal : togglePlayMode;\n            playerChannel.playMode(newPlayMode);\n            onPlayModeChangedViaBind(playMode, newPlayMode);\n        },\n        [playMode, playerChannel, onPlayModeChangedViaBind]\n    );\n\n    useEffect(() => {\n        return keyBinder.bindAutoPause(\n            (event) => togglePlayMode(event, PlayMode.autoPause),\n            () => false\n        );\n    }, [keyBinder, togglePlayMode]);\n\n    useEffect(() => {\n        return keyBinder.bindCondensedPlayback(\n            (event) => togglePlayMode(event, PlayMode.condensed),\n            () => false\n        );\n    }, [keyBinder, togglePlayMode]);\n\n    const handleSubtitlesToggle = useCallback(() => setSubtitlesEnabled((subtitlesEnabled) => !subtitlesEnabled), []);\n\n    const handleFullscreenToggle = useCallback(() => {\n        if (popOut) {\n            setFullscreen((fullscreen) => {\n                if (fullscreen) {\n                    document.exitFullscreen();\n                } else {\n                    document.documentElement.requestFullscreen();\n                }\n\n                return !fullscreen;\n            });\n        } else {\n            playerChannel.fullscreenToggle();\n        }\n    }, [playerChannel, popOut]);\n\n    const handleVolumeChange = useCallback((volume: number) => {\n        if (videoRef.current) {\n            videoRef.current.volume = volume;\n        }\n    }, []);\n\n    const handlePopOutToggle = useCallback(() => {\n        playerChannel.popOutToggle();\n        if (popOut) {\n            poppingInRef.current = true;\n            window.close();\n        }\n    }, [playerChannel, popOut]);\n\n    const handlePlayMode = useCallback(\n        (playMode: PlayMode) => {\n            playerChannel.playMode(playMode);\n        },\n        [playerChannel]\n    );\n\n    const handleClose = useCallback(() => {\n        playerChannel.close();\n        window.close();\n    }, [playerChannel]);\n\n    const handleHideSubtitlePlayerToggle = useCallback(() => {\n        playerChannel.hideSubtitlePlayerToggle();\n    }, [playerChannel]);\n\n    const handleTheaterModeToggle = useCallback(() => {\n        playerChannel.appBarToggle();\n    }, [playerChannel]);\n\n    const handleClick = useCallback(() => {\n        if (playing) {\n            playerChannel.pause();\n        } else {\n            playerChannel.play();\n        }\n    }, [playerChannel, playing]);\n\n    const handleDoubleClick = useCallback(() => handleFullscreenToggle(), [handleFullscreenToggle]);\n\n    const {\n        subtitleSize,\n        subtitleColor,\n        subtitleOutlineThickness,\n        subtitleOutlineColor,\n        subtitleBackgroundColor,\n        subtitleBackgroundOpacity,\n        subtitleFontFamily,\n        imageBasedSubtitleScaleFactor,\n    } = subtitleSettings;\n    const subtitleStyles = useMemo(\n        () =>\n            computeStyles({\n                subtitleSize,\n                subtitleColor,\n                subtitleOutlineThickness,\n                subtitleOutlineColor,\n                subtitleBackgroundColor,\n                subtitleBackgroundOpacity,\n                subtitleFontFamily,\n            }),\n        [\n            subtitleSize,\n            subtitleColor,\n            subtitleOutlineThickness,\n            subtitleOutlineColor,\n            subtitleBackgroundColor,\n            subtitleBackgroundOpacity,\n            subtitleFontFamily,\n        ]\n    );\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            if (Date.now() - lastMouseMovementTimestamp.current > 300) {\n                if (showCursor) {\n                    setShowCursor(false);\n                }\n            } else if (!showCursor) {\n                setShowCursor(true);\n            }\n        }, 100);\n\n        return () => clearInterval(interval);\n    }, [showCursor]);\n\n    const handleAlertClosed = useCallback(() => setAlertOpen(false), []);\n\n    return (\n        <div ref={containerRef} onMouseMove={handleMouseMove} className={classes.root}>\n            <Alert open={alertOpen} onClose={handleAlertClosed} autoHideDuration={3000} severity={alertSeverity}>\n                {alertMessage}\n            </Alert>\n            <video\n                preload=\"auto\"\n                controls={false}\n                onClick={handleClick}\n                onDoubleClick={handleDoubleClick}\n                className={showCursor ? classes.video : `${classes.cursorHidden} ${classes.video}`}\n                ref={videoRefCallback}\n                src={videoFile}\n            />\n            {subtitlesEnabled && (\n                <div className={classes.subtitleContainer}>\n                    {showSubtitles.map((subtitle, index) => {\n                        let content;\n\n                        if (subtitle.textImage) {\n                            content = (\n                                <SubtitleTextImage\n                                    availableWidth={videoRef.current?.width ?? window.screen.availWidth}\n                                    subtitle={subtitle}\n                                    scale={imageBasedSubtitleScaleFactor}\n                                />\n                            );\n                        } else {\n                            content = <span style={subtitleStyles}>{subtitle.text}</span>;\n                        }\n\n                        if (index < showSubtitles.length - 1) {\n                            return (\n                                <React.Fragment key={subtitle.index}>\n                                    {content}\n                                    <br />\n                                </React.Fragment>\n                            );\n                        }\n\n                        return <React.Fragment key={subtitle.index}>{content}</React.Fragment>;\n                    })}\n                </div>\n            )}\n            <Controls\n                mousePositionRef={mousePositionRef}\n                playing={playing}\n                clock={clock}\n                length={length}\n                audioTracks={audioTracks}\n                selectedAudioTrack={selectedAudioTrack}\n                subtitlesToggle={subtitles && subtitles.length > 0}\n                subtitlesEnabled={subtitlesEnabled}\n                offsetEnabled={true}\n                offset={offset}\n                playbackRate={playbackRate}\n                fullscreenEnabled={true}\n                fullscreen={fullscreen}\n                closeEnabled={!popOut}\n                popOut={popOut}\n                volumeEnabled={true}\n                popOutEnabled={!isMobile}\n                playModeEnabled={subtitles && subtitles.length > 0}\n                playMode={playMode}\n                hideSubtitlePlayerToggleEnabled={subtitles?.length > 0 && !popOut && !fullscreen}\n                subtitlePlayerHidden={subtitlePlayerHidden}\n                onPlay={handlePlay}\n                onPause={handlePause}\n                onSeek={handleSeek}\n                onAudioTrackSelected={handleAudioTrackSelected}\n                onSubtitlesToggle={handleSubtitlesToggle}\n                onFullscreenToggle={handleFullscreenToggle}\n                onVolumeChange={handleVolumeChange}\n                onOffsetChange={handleOffsetChange}\n                onPlaybackRateChange={handlePlaybackRateChange}\n                onPopOutToggle={handlePopOutToggle}\n                onPlayMode={handlePlayMode}\n                onClose={handleClose}\n                onHideSubtitlePlayerToggle={handleHideSubtitlePlayerToggle}\n                playbackPreferences={playbackPreferences}\n                showOnMouseMovement={false}\n                theaterModeToggleEnabled={!popOut && !fullscreen}\n                theaterModeEnabled={appBarHidden}\n                onTheaterModeToggle={handleTheaterModeToggle}\n            />\n        </div>\n    );\n}\n","import {\n    AsbPlayerToVideoCommandV2,\n    ExtensionToAsbPlayerCommand,\n    ExtensionToAsbPlayerCommandTabsCommand,\n    Message,\n    VideoTabModel,\n} from '@project/common';\nimport { gt } from 'semver';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport interface ExtensionMessage {\n    data: Message;\n    tabId?: number;\n    src?: string;\n}\n\nconst id = uuidv4();\n\nexport default class ChromeExtension {\n    readonly version: string;\n    readonly extensionCommands: { [key: string]: string | undefined };\n\n    tabs: VideoTabModel[];\n    installed: boolean;\n\n    private readonly windowEventListener: (event: MessageEvent) => void;\n    private onMessageCallbacks: Array<(message: ExtensionMessage) => void>;\n    private onTabsCallbacks: Array<(tabs: VideoTabModel[]) => void>;\n    private heartbeatStarted = false;\n\n    constructor(version?: string, extensionCommands?: { [key: string]: string | undefined }) {\n        this.onMessageCallbacks = [];\n        this.onTabsCallbacks = [];\n        this.tabs = [];\n        this.installed = version !== undefined;\n        this.version = version ?? '';\n        this.extensionCommands = extensionCommands ?? {};\n        this.windowEventListener = (event: MessageEvent) => {\n            if (event.source !== window) {\n                return;\n            }\n\n            if (event.data.sender !== 'asbplayer-extension-to-player' || !event.data.message) {\n                return;\n            }\n\n            if (event.data.message.command === 'tabs') {\n                const tabsCommand = event.data as ExtensionToAsbPlayerCommandTabsCommand;\n                this.tabs = tabsCommand.message.tabs;\n\n                for (let c of this.onTabsCallbacks) {\n                    c(this.tabs);\n                }\n\n                if (tabsCommand.message.ackRequested) {\n                    window.postMessage(\n                        {\n                            sender: 'asbplayerv2',\n                            message: {\n                                command: 'ackTabs',\n                                id: id,\n                                receivedTabs: this.tabs,\n                            },\n                        },\n                        '*'\n                    );\n                }\n            } else {\n                const command = event.data as ExtensionToAsbPlayerCommand<Message>;\n\n                for (let c of this.onMessageCallbacks) {\n                    c({\n                        data: command.message,\n                        tabId: command.tabId,\n                        src: command.src,\n                    });\n                }\n            }\n        };\n\n        window.addEventListener('message', this.windowEventListener);\n    }\n\n    startHeartbeat(fromVideoPlayer: boolean) {\n        if (!this.installed) {\n            return;\n        }\n\n        if (!this.heartbeatStarted) {\n            if (fromVideoPlayer) {\n                if (gt(this.version, '0.23.0')) {\n                    setInterval(() => this._sendHeartbeat(true), 1000);\n                }\n            } else {\n                setInterval(() => this._sendHeartbeat(false), 1000);\n            }\n\n            this.heartbeatStarted = true;\n        }\n    }\n\n    private _sendHeartbeat(fromVideoPlayer: boolean) {\n        window.postMessage(\n            {\n                sender: 'asbplayerv2',\n                message: {\n                    command: 'heartbeat',\n                    id: id,\n                    receivedTabs: fromVideoPlayer ? [] : this.tabs,\n                    videoPlayer: fromVideoPlayer\n                },\n            },\n            '*'\n        );\n    }\n\n    openShortcuts() {\n        window.postMessage({\n            sender: 'asbplayerv2',\n            message: {\n                command: 'open-extension-shortcuts',\n            },\n        });\n    }\n\n    sendMessage(message: Message, tabId: number, src: string) {\n        const command: AsbPlayerToVideoCommandV2<Message> = {\n            sender: 'asbplayerv2',\n            message: message,\n            tabId: tabId,\n            src: src,\n        };\n        window.postMessage(command, '*');\n    }\n\n    publishMessage(message: Message) {\n        for (const tab of this.tabs) {\n            const command: AsbPlayerToVideoCommandV2<Message> = {\n                sender: 'asbplayerv2',\n                message: message,\n                tabId: tab.id,\n                src: tab.src,\n            };\n            window.postMessage(command, '*');\n        }\n    }\n\n    subscribeTabs(callback: (tabs: VideoTabModel[]) => void) {\n        this.onTabsCallbacks.push(callback);\n        return () => this._remove(callback, this.onTabsCallbacks);\n    }\n\n    subscribe(callback: (message: ExtensionMessage) => void) {\n        this.onMessageCallbacks.push(callback);\n        return () => this._remove(callback, this.onMessageCallbacks);\n    }\n\n    _remove(callback: Function, callbacks: Function[]) {\n        for (let i = callbacks.length - 1; i >= 0; --i) {\n            if (callback === callbacks[i]) {\n                callbacks.splice(i, 1);\n                break;\n            }\n        }\n    }\n\n    unbind() {\n        window.removeEventListener('message', this.windowEventListener);\n        this.onMessageCallbacks = [];\n        this.onTabsCallbacks = [];\n    }\n}\n","import { ExtensionVersionMessage } from '@project/common';\nimport ChromeExtension from './ChromeExtension';\n\nconst keyBindNameMap: any = {\n    'copy-subtitle': 'copySubtitle',\n    'copy-subtitle-with-dialog': 'ankiExport',\n    'update-last-card': 'updateLastCard',\n};\n\nexport class ChromeExtensionProvider {\n    extension: ChromeExtension = new ChromeExtension();\n    private readonly callbacks: ((extension: ChromeExtension) => void)[] = [];\n\n    constructor() {\n        const listener = (event: MessageEvent) => {\n            if (event.source !== window) {\n                return;\n            }\n\n            if (event.data.sender === 'asbplayer-extension-to-player') {\n                if (event.data.message.command === 'version') {\n                    const message = event.data.message as ExtensionVersionMessage;\n\n                    for (const callback of this.callbacks) {\n                        this.extension.unbind();\n                        const translatedCommands: { [key: string]: string | undefined } = {};\n                        const extensionCommands = message.extensionCommands ?? {};\n                        \n                        for (const extensionCommandName of Object.keys(extensionCommands)) {\n                            translatedCommands[keyBindNameMap[extensionCommandName]] =\n                                extensionCommands[extensionCommandName];\n                        }\n\n                        this.extension = new ChromeExtension(message.version, translatedCommands);\n                        callback(this.extension);\n                    }\n\n                    window.removeEventListener('message', listener);\n                }\n            }\n        };\n\n        window.addEventListener('message', listener);\n    }\n\n    onChromeExtension(callback: (extension: ChromeExtension) => void) {\n        this.callbacks.push(callback);\n        callback(this.extension);\n    }\n}\n","import SettingsProvider from './SettingsProvider';\n\nconst volumeKey = 'volume';\nconst theaterModeKey = 'theaterMode';\nconst offsetKey = 'offset';\nconst defaultVolume = 100;\n\nexport default class PlaybackPreferences {\n    private readonly settingsProvider: SettingsProvider;\n\n    constructor(settingsProvider: SettingsProvider) {\n        this.settingsProvider = settingsProvider;\n    }\n\n    get volume() {\n        const value = localStorage.getItem(volumeKey);\n\n        if (value === null) {\n            return defaultVolume;\n        }\n\n        return Number(value);\n    }\n\n    set volume(volume) {\n        localStorage.setItem(volumeKey, String(volume));\n    }\n\n    get theaterMode() {\n        return localStorage.getItem(theaterModeKey) === 'true' || false;\n    }\n\n    set theaterMode(theaterMode) {\n        localStorage.setItem(theaterModeKey, String(theaterMode));\n    }\n\n    get offset(): number {\n        if (!this.settingsProvider.rememberSubtitleOffset) {\n            return 0;\n        }\n\n        const value = localStorage.getItem(offsetKey);\n\n        if (value === null) {\n            return 0;\n        }\n\n        return Number(value);\n    }\n\n    set offset(offset: number) {\n        localStorage.setItem(offsetKey, String(offset));\n    }\n}\n","import React, { useCallback, useEffect, useState, useMemo, useRef } from 'react';\nimport { Route, Navigate, Routes, useLocation, useSearchParams } from 'react-router-dom';\nimport { ThemeProvider, createTheme, makeStyles, Theme } from '@material-ui/core/styles';\nimport { useWindowSize } from '../hooks/useWindowSize';\nimport { red } from '@material-ui/core/colors';\nimport {\n    Anki,\n    AudioClip,\n    Image,\n    humanReadableTime,\n    AnkiDialogSliderContext,\n    SubtitleModel,\n    VideoTabModel,\n    LegacyPlayerSyncMessage,\n    PlayerSyncMessage,\n    AudioModel,\n    ImageModel,\n    AsbplayerSettings,\n    PostMineAction,\n    PlayMode,\n    download,\n} from '@project/common';\nimport { v4 as uuidv4 } from 'uuid';\nimport clsx from 'clsx';\nimport Alert from './Alert';\nimport { AnkiDialog, ImageDialog } from '@project/common/components';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport DragOverlay from './DragOverlay';\nimport SubtitleReader from '../services/SubtitleReader';\nimport Bar from './Bar';\nimport ChromeExtension, { ExtensionMessage } from '../services/ChromeExtension';\nimport CopyHistory, { CopyHistoryItem } from './CopyHistory';\nimport LandingPage from './LandingPage';\nimport Player, { AnkiDialogFinishedRequest, MediaSources } from './Player';\nimport SettingsDialog from './SettingsDialog';\nimport SettingsProvider from '../services/SettingsProvider';\nimport VideoPlayer from './VideoPlayer';\nimport { Color } from '@material-ui/lab';\nimport { AnkiExportMode } from '@project/common';\nimport { DefaultKeyBinder } from '@project/common/src/KeyBinder';\nimport AppKeyBinder from '../services/AppKeyBinder';\nimport VideoChannel from '../services/VideoChannel';\nimport { ChromeExtensionProvider } from '../services/ChromeExtensionProvider';\nimport PlaybackPreferences from '../services/PlaybackPreferences';\n\nconst latestExtensionVersion = '0.23.0';\nconst extensionUrl = 'https://github.com/killergerbah/asbplayer/releases/latest';\n\nconst useContentStyles = makeStyles<Theme, ContentProps>((theme) => ({\n    content: {\n        flexGrow: 1,\n        transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n        marginRight: 0,\n    },\n    contentShift: ({ drawerWidth }) => ({\n        transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n        marginRight: drawerWidth,\n    }),\n}));\n\nfunction extractSources(files: FileList | File[]): MediaSources {\n    let subtitleFiles = [];\n    let audioFile = undefined;\n    let videoFile = undefined;\n\n    for (let i = 0; i < files.length; ++i) {\n        const f = files[i];\n        const extensionStartIndex = f.name.lastIndexOf('.');\n\n        if (extensionStartIndex === -1) {\n            throw new Error('Unable to determine extension of ' + f.name);\n        }\n\n        const extension = f.name.substring(extensionStartIndex + 1, f.name.length);\n        switch (extension) {\n            case 'ass':\n            case 'srt':\n            case 'vtt':\n            case 'nfvtt':\n            case 'sup':\n            case 'ytxml':\n                subtitleFiles.push(f);\n                break;\n            case 'mkv':\n            case 'mp4':\n            case 'avi':\n                if (videoFile) {\n                    throw new Error('Cannot open two video files simultaneously');\n                }\n                videoFile = f;\n                break;\n            case 'mp3':\n            case 'm4a':\n            case 'aac':\n            case 'flac':\n            case 'ogg':\n            case 'wav':\n            case 'opus':\n                if (audioFile) {\n                    throw new Error('Cannot open two audio files simultaneously');\n                }\n                audioFile = f;\n                break;\n            default:\n                throw new Error('Unsupported extension ' + extension);\n        }\n    }\n\n    if (videoFile && audioFile) {\n        throw new Error('Cannot load both an audio and video file simultaneously');\n    }\n\n    return { subtitleFiles: subtitleFiles, audioFile: audioFile, videoFile: videoFile };\n}\n\nfunction audioClipFromItem(\n    item: CopyHistoryItem,\n    sliderContext: AnkiDialogSliderContext | undefined,\n    paddingStart: number,\n    paddingEnd: number\n) {\n    if (item.audio) {\n        const start = item.audio.start ?? item.start;\n        const end = item.audio.end ?? item.end;\n\n        return AudioClip.fromBase64(\n            item.subtitleFile!.name,\n            Math.max(0, start - (item.audio.paddingStart ?? 0)),\n            end + (item.audio.paddingEnd ?? 0),\n            item.audio.playbackRate ?? 1,\n            item.audio.base64,\n            item.audio.extension\n        );\n    }\n\n    if (item.audioFile || item.videoFile) {\n        let start;\n        let end;\n\n        if (sliderContext) {\n            start = sliderContext.subtitleStart;\n            end = sliderContext.subtitleEnd;\n        } else {\n            start = item.start;\n            end = item.end;\n        }\n\n        return AudioClip.fromFile(\n            (item.audioFile || item.videoFile)!,\n            Math.max(0, start - paddingStart),\n            end + paddingEnd,\n            item.filePlaybackRate ?? 1,\n            item.audioTrack\n        );\n    }\n\n    return undefined;\n}\n\nfunction imageFromItem(item: CopyHistoryItem, maxWidth: number, maxHeight: number) {\n    if (item.image) {\n        return Image.fromBase64(item.subtitleFile!.name, item.start, item.image.base64, item.image.extension);\n    }\n\n    if (item.videoFile) {\n        return Image.fromFile(item.videoFile, item.mediaTimestamp ?? item.start, maxWidth, maxHeight);\n    }\n\n    return undefined;\n}\n\nfunction itemSourceString(item: CopyHistoryItem | undefined) {\n    if (!item) {\n        return undefined;\n    }\n\n    const source = item.subtitleFile?.name ?? item.audioFile?.name ?? item.videoFile?.name;\n\n    if (!source) {\n        return undefined;\n    }\n\n    return `${source} (${humanReadableTime(item.start)})`;\n}\n\nfunction itemSliderContext(item: CopyHistoryItem) {\n    if (!item) {\n        return undefined;\n    }\n\n    return {\n        subtitleStart: item.start,\n        subtitleEnd: item.end,\n        subtitles: item.surroundingSubtitles || [\n            { start: item.start, end: item.end, text: item.text, track: item.track },\n        ],\n    };\n}\n\nfunction revokeUrls(sources: MediaSources) {\n    if (sources.audioFileUrl) {\n        URL.revokeObjectURL(sources.audioFileUrl);\n    }\n\n    if (sources.videoFileUrl) {\n        URL.revokeObjectURL(sources.videoFileUrl);\n    }\n}\n\ninterface NavigateToVideoProps {\n    searchParams: URLSearchParams;\n}\n\nfunction NavigateToVideo({ searchParams }: NavigateToVideoProps) {\n    const videoFile = searchParams.get('video')!;\n    const channel = searchParams.get('channel')!;\n    const popOut = searchParams.get('popout')!;\n\n    return (\n        <Navigate to={'/video?video=' + encodeURIComponent(videoFile) + '&channel=' + channel + '&popout=' + popOut} />\n    );\n}\n\ninterface RenderVideoProps {\n    searchParams: URLSearchParams;\n    settingsProvider: SettingsProvider;\n    playbackPreferences: PlaybackPreferences;\n    extension: ChromeExtension;\n    ankiDialogFinishedRequest: AnkiDialogFinishedRequest;\n    onAnkiDialogRequest: (\n        videoFileUrl: string,\n        videoFileName: string,\n        selectedAudioTrack: string | undefined,\n        playbackRate: number,\n        subtitle: SubtitleModel,\n        surroundingSubtitles: SubtitleModel[],\n        timestamp: number\n    ) => void;\n    onError: (error: string) => void;\n    onPlayModeChangedViaBind: (oldPlayMode: PlayMode, newPlayMode: PlayMode) => void;\n}\n\nfunction RenderVideo({\n    searchParams,\n    settingsProvider,\n    playbackPreferences,\n    extension,\n    ankiDialogFinishedRequest,\n    onAnkiDialogRequest,\n    onError,\n    onPlayModeChangedViaBind,\n}: RenderVideoProps) {\n    const videoFile = searchParams.get('video')!;\n    const channel = searchParams.get('channel')!;\n    const popOut = searchParams.get('popout')! === 'true';\n\n    return (\n        <VideoPlayer\n            settingsProvider={settingsProvider}\n            playbackPreferences={playbackPreferences}\n            extension={extension}\n            videoFile={videoFile}\n            popOut={popOut}\n            channel={channel}\n            ankiDialogFinishedRequest={ankiDialogFinishedRequest}\n            onAnkiDialogRequest={onAnkiDialogRequest}\n            onError={onError}\n            onPlayModeChangedViaBind={onPlayModeChangedViaBind}\n        />\n    );\n}\n\ninterface ContentProps {\n    drawerOpen: boolean;\n    drawerWidth: number;\n    children: React.ReactNode[];\n}\n\nfunction Content(props: ContentProps) {\n    const classes = useContentStyles(props);\n\n    return (\n        <main\n            className={clsx(classes.content, {\n                [classes.contentShift]: props.drawerOpen,\n            })}\n        >\n            {props.children}\n        </main>\n    );\n}\n\nfunction App() {\n    const subtitleReader = useMemo<SubtitleReader>(() => new SubtitleReader(), []);\n    const settingsProvider = useMemo<SettingsProvider>(() => new SettingsProvider(), []);\n    const playbackPreferences = useMemo<PlaybackPreferences>(\n        () => new PlaybackPreferences(settingsProvider),\n        [settingsProvider]\n    );\n    const theme = useMemo<Theme>(\n        () =>\n            createTheme({\n                palette: {\n                    primary: {\n                        main: '#49007a',\n                    },\n                    secondary: {\n                        main: '#ff1f62',\n                    },\n                    error: {\n                        main: red.A400,\n                    },\n                    type: settingsProvider.themeType,\n                },\n            }),\n        [settingsProvider.themeType]\n    );\n    const anki = useMemo<Anki>(() => new Anki(settingsProvider), [settingsProvider]);\n    const location = useLocation();\n    const [searchParams] = useSearchParams();\n\n    const inVideoPlayer = location.pathname === '/video' || searchParams.get('video') !== null;\n    const extensionProvider = useMemo(() => new ChromeExtensionProvider(), []);\n    const [extension, setExtension] = useState<ChromeExtension>(extensionProvider.extension);\n    const [videoFullscreen, setVideoFullscreen] = useState<boolean>(false);\n    useEffect(() => extensionProvider.onChromeExtension(setExtension), [extensionProvider]);\n    const keyBinder = useMemo<AppKeyBinder>(\n        () => new AppKeyBinder(new DefaultKeyBinder(settingsProvider.keyBindSet), extension),\n        [settingsProvider.keyBindSet, extension]\n    );\n    const videoFrameRef = useRef<HTMLIFrameElement>(null);\n    const videoChannelRef = useRef<VideoChannel>(null);\n    const [width] = useWindowSize(!inVideoPlayer);\n    const drawerRatio = videoFrameRef.current ? 0.2 : 0.3;\n    const minDrawerSize = videoFrameRef.current ? 150 : 300;\n    const drawerWidth = Math.max(minDrawerSize, width * drawerRatio);\n    const [copiedSubtitles, setCopiedSubtitles] = useState<CopyHistoryItem[]>([]);\n    const copiedSubtitlesRef = useRef<CopyHistoryItem[]>([]);\n    copiedSubtitlesRef.current = copiedSubtitles;\n    const [copyHistoryOpen, setCopyHistoryOpen] = useState<boolean>(false);\n    const [theaterMode, setTheaterMode] = useState<boolean>(playbackPreferences.theaterMode);\n    const [hideSubtitlePlayer, setHideSubtitlePlayer] = useState<boolean>(false);\n    const [videoPopOut, setVideoPopOut] = useState<boolean>(false);\n    const [alert, setAlert] = useState<string>();\n    const [alertOpen, setAlertOpen] = useState<boolean>(false);\n    const [alertSeverity, setAlertSeverity] = useState<Color>();\n    const [jumpToSubtitle, setJumpToSubtitle] = useState<SubtitleModel>();\n    const [rewindSubtitle, setRewindSubtitle] = useState<SubtitleModel>();\n    const [sources, setSources] = useState<MediaSources>({ subtitleFiles: [] });\n    const [loading, setLoading] = useState<boolean>(false);\n    const [dragging, setDragging] = useState<boolean>(false);\n    const dragEnterRef = useRef<Element | null>(null);\n    const [fileName, setFileName] = useState<string>();\n    const [ankiDialogOpen, setAnkiDialogOpen] = useState<boolean>(false);\n    const [ankiDialogDisabled, setAnkiDialogDisabled] = useState<boolean>(false);\n    const [ankiDialogItem, setAnkiDialogItem] = useState<CopyHistoryItem>();\n    const ankiDialogItemSliderContext = useMemo<AnkiDialogSliderContext | undefined>(\n        () => ankiDialogItem && itemSliderContext(ankiDialogItem),\n        [ankiDialogItem]\n    );\n    const ankiDialogAudioClip = useMemo<AudioClip | undefined>(\n        () =>\n            ankiDialogItem &&\n            audioClipFromItem(\n                ankiDialogItem,\n                ankiDialogItemSliderContext,\n                settingsProvider.audioPaddingStart,\n                settingsProvider.audioPaddingEnd\n            ),\n        [\n            ankiDialogItem,\n            ankiDialogItemSliderContext,\n            settingsProvider.audioPaddingStart,\n            settingsProvider.audioPaddingEnd,\n        ]\n    );\n    const ankiDialogImage = useMemo<Image | undefined>(\n        () =>\n            ankiDialogItem &&\n            imageFromItem(ankiDialogItem, settingsProvider.maxImageWidth, settingsProvider.maxImageHeight),\n        [ankiDialogItem, settingsProvider.maxImageWidth, settingsProvider.maxImageHeight]\n    );\n    const [ankiDialogRequested, setAnkiDialogRequested] = useState<boolean>(false);\n    const [ankiDialogFinishedRequest, setAnkiDialogFinishedRequest] = useState<AnkiDialogFinishedRequest>({\n        timestamp: 0,\n        resume: false,\n    });\n    const [settingsDialogOpen, setSettingsDialogOpen] = useState<boolean>(false);\n    const [settingsDialogScrollToId, setSettingsDialogScrollToId] = useState<string>();\n    const [imageDialogOpen, setImageDialogOpen] = useState<boolean>(false);\n    const [disableKeyEvents, setDisableKeyEvents] = useState<boolean>(false);\n    const [image, setImage] = useState<Image>();\n    const [tab, setTab] = useState<VideoTabModel>();\n    const [availableTabs, setAvailableTabs] = useState<VideoTabModel[]>([]);\n    const fileInputRef = useRef<HTMLInputElement>(null);\n    const ankiDialogRequestedRef = useRef<boolean>(false);\n    ankiDialogRequestedRef.current = ankiDialogRequested;\n    const { subtitleFiles } = sources;\n\n    const handleError = useCallback((message: string) => {\n        setAlertSeverity('error');\n        setAlert(message);\n        setAlertOpen(true);\n    }, []);\n\n    const handleAnkiDialogRequest = useCallback((ankiDialogItem?: CopyHistoryItem) => {\n        if (!ankiDialogItem && copiedSubtitlesRef.current!.length === 0) {\n            return;\n        }\n\n        const item = ankiDialogItem ?? copiedSubtitlesRef.current[copiedSubtitlesRef.current.length - 1];\n        setAnkiDialogItem(item);\n        setAnkiDialogOpen(true);\n        setAnkiDialogDisabled(false);\n        setDisableKeyEvents(true);\n        setAnkiDialogRequested(true);\n    }, []);\n\n    const handleAnkiDialogRequestFromVideoPlayer = useCallback(\n        async (\n            videoFileUrl: string,\n            videoFileName: string,\n            selectedAudioTrack: string | undefined,\n            playbackRate: number,\n            subtitle: SubtitleModel,\n            surroundingSubtitles: SubtitleModel[],\n            timestamp: number\n        ) => {\n            const item = {\n                ...subtitle,\n                surroundingSubtitles: surroundingSubtitles,\n                timestamp: Date.now(),\n                id: uuidv4(),\n                name: videoFileName,\n                mediaTimestamp: timestamp,\n                videoFile: await fetch(videoFileUrl)\n                    .then((r) => r.blob())\n                    .then((blobFile) => new File([blobFile], videoFileName)),\n                selectedAudioTrack: selectedAudioTrack,\n                filePlaybackRate: playbackRate,\n            };\n            handleAnkiDialogRequest(item);\n        },\n        [handleAnkiDialogRequest]\n    );\n\n    const handleAnkiDialogProceed = useCallback(\n        async (\n            text: string,\n            definition: string,\n            audioClip: AudioClip | undefined,\n            image: Image | undefined,\n            word: string,\n            source: string,\n            url: string,\n            customFieldValues: { [key: string]: string },\n            tags: string[],\n            mode: AnkiExportMode\n        ) => {\n            setAnkiDialogDisabled(true);\n\n            try {\n                const result = await anki.export(\n                    text,\n                    definition,\n                    audioClip,\n                    image,\n                    word,\n                    source,\n                    url,\n                    customFieldValues,\n                    tags,\n                    mode\n                );\n\n                if (mode !== 'gui') {\n                    if (mode === 'default') {\n                        setAlertSeverity('success');\n                        setAlert('Exported card: ' + result);\n                        setAlertOpen(true);\n                    } else if (mode === 'updateLast') {\n                        setAlertSeverity('success');\n                        setAlert('Updated card: ' + result);\n                        setAlertOpen(true);\n                    }\n\n                    setAnkiDialogOpen(false);\n\n                    // We need the ref to avoid causing a state change that would re-init Player\n                    // It's a future task to make the Player init hook depend on less state\n                    if (ankiDialogRequestedRef.current) {\n                        setAnkiDialogFinishedRequest({ timestamp: Date.now(), resume: true });\n                        setAnkiDialogRequested(false);\n                    }\n                }\n            } catch (e) {\n                console.error(e);\n                if (e instanceof Error) {\n                    handleError(e.message);\n                } else {\n                    handleError(String(e));\n                }\n            } finally {\n                setAnkiDialogDisabled(false);\n                setDisableKeyEvents(false);\n            }\n        },\n        [anki, handleError]\n    );\n\n    const handleCopy = useCallback(\n        (\n            subtitle: SubtitleModel,\n            surroundingSubtitles: SubtitleModel[],\n            audioFile: File | undefined,\n            videoFile: File | undefined,\n            subtitleFile: File | undefined,\n            mediaTimestamp: number | undefined,\n            audioTrack: string | undefined,\n            filePlaybackRate: number | undefined,\n            audio: AudioModel | undefined,\n            image: ImageModel | undefined,\n            url: string | undefined,\n            postMineAction: PostMineAction | undefined,\n            preventDuplicate: boolean | undefined,\n            id: string | undefined\n        ) => {\n            if (subtitle && settingsProvider.copyToClipboardOnMine) {\n                navigator.clipboard.writeText(subtitle.text);\n            }\n\n            const newCopiedSubtitle = {\n                ...subtitle,\n                surroundingSubtitles: surroundingSubtitles,\n                timestamp: Date.now(),\n                id: id || uuidv4(),\n                name: fileName!,\n                subtitleFile: subtitleFile,\n                audioFile: audioFile,\n                videoFile: videoFile,\n                filePlaybackRate: filePlaybackRate,\n                mediaTimestamp: mediaTimestamp,\n                audioTrack: audioTrack,\n                audio: audio,\n                image: image,\n                url: url,\n            };\n\n            setCopiedSubtitles((copiedSubtitles) => {\n                if (preventDuplicate && copiedSubtitles.length > 0) {\n                    const last = copiedSubtitles[copiedSubtitles.length - 1];\n\n                    if (\n                        subtitle.start === last.start &&\n                        subtitle.end === last.end &&\n                        subtitle.text === last.text &&\n                        subtitleFile?.name === last.subtitleFile?.name\n                    ) {\n                        if (mediaTimestamp !== undefined && mediaTimestamp !== last.mediaTimestamp) {\n                            const newCopiedSubtitles = [...copiedSubtitles];\n                            newCopiedSubtitles[newCopiedSubtitles.length - 1] = newCopiedSubtitle;\n                            return newCopiedSubtitles;\n                        }\n\n                        return copiedSubtitles;\n                    }\n                }\n\n                // Note: we are not dealing with the case where an item with the given ID is already in the list\n                return [...copiedSubtitles, newCopiedSubtitle];\n            });\n\n            switch (postMineAction ?? PostMineAction.none) {\n                case PostMineAction.none:\n                    break;\n                case PostMineAction.showAnkiDialog:\n                    handleAnkiDialogRequest(newCopiedSubtitle);\n                    break;\n                case PostMineAction.updateLastCard:\n                    // FIXME: We should really rename the functions below because we're actually skipping the Anki dialog in this case\n                    setAnkiDialogRequested(true);\n                    handleAnkiDialogProceed(\n                        subtitle.text,\n                        '',\n                        audioClipFromItem(\n                            newCopiedSubtitle,\n                            undefined,\n                            settingsProvider.audioPaddingStart,\n                            settingsProvider.audioPaddingEnd\n                        ),\n                        imageFromItem(\n                            newCopiedSubtitle,\n                            settingsProvider.maxImageWidth,\n                            settingsProvider.maxImageHeight\n                        ),\n                        '',\n                        itemSourceString(newCopiedSubtitle) ?? '',\n                        '',\n                        {},\n                        settingsProvider.tags,\n                        'updateLast'\n                    );\n                    break;\n                default:\n                    throw new Error('Unknown post mine action: ' + postMineAction);\n            }\n\n            if (subtitle) {\n                setAlertSeverity('success');\n                setAlert(\n                    subtitle.text === '' ? `Saved ${humanReadableTime(subtitle.start)}` : `Copied: \"${subtitle.text}\"`\n                );\n                setAlertOpen(true);\n            }\n        },\n        [fileName, settingsProvider, handleAnkiDialogProceed, handleAnkiDialogRequest]\n    );\n\n    const handleOpenCopyHistory = useCallback(() => {\n        setCopyHistoryOpen((copyHistoryOpen) => !copyHistoryOpen);\n        setVideoFullscreen(false);\n    }, []);\n    const handleCloseCopyHistory = useCallback(() => setCopyHistoryOpen(false), []);\n    const handleAppBarToggle = useCallback(() => {\n        const newValue = !playbackPreferences.theaterMode;\n        playbackPreferences.theaterMode = newValue;\n        setTheaterMode(newValue);\n        setVideoFullscreen(false);\n    }, [playbackPreferences]);\n    const handleFullscreenToggle = useCallback(() => {\n        setVideoFullscreen((fullscreen) => !fullscreen);\n    }, []);\n    useEffect(() => {\n        if (videoFullscreen) {\n            if (!document.fullscreenElement) {\n                document.documentElement.requestFullscreen();\n            }\n        } else if (document.fullscreenElement) {\n            document.exitFullscreen();\n        }\n    }, [videoFullscreen]);\n    useEffect(() => {\n        const listener = () => {\n            if (!document.fullscreenElement) {\n                setVideoFullscreen(false);\n            }\n        };\n        document.addEventListener('fullscreenchange', listener);\n        return () => document.removeEventListener('fullscreenchange', listener);\n    }, []);\n    const handleHideSubtitlePlayer = useCallback(() => {\n        setHideSubtitlePlayer((hidden) => !hidden);\n    }, []);\n    const handleVideoPopOut = useCallback(() => {\n        setVideoPopOut((videoPopOut) => !videoPopOut);\n    }, []);\n    const handleOpenSettings = useCallback(() => {\n        setDisableKeyEvents(true);\n        setSettingsDialogOpen(true);\n    }, []);\n    const handleAlertClosed = useCallback(() => setAlertOpen(false), []);\n    const handleImageDialogClosed = useCallback(() => setImageDialogOpen(false), []);\n    const handleCloseSettings = useCallback(\n        (newSettings: AsbplayerSettings) => {\n            settingsProvider.settings = newSettings;\n            setSettingsDialogOpen(false);\n            setSettingsDialogScrollToId(undefined);\n\n            // ATM only the Anki dialog may appear under the settings dialog,\n            // so it's the only one we need to check to re-enable key events\n            setDisableKeyEvents(ankiDialogOpen);\n\n            videoChannelRef.current?.subtitleSettings(settingsProvider.subtitleSettings);\n            videoChannelRef.current?.ankiSettings(settingsProvider.ankiSettings);\n            videoChannelRef.current?.miscSettings(settingsProvider.miscSettings);\n        },\n        [settingsProvider, ankiDialogOpen]\n    );\n\n    const handleDeleteCopyHistoryItem = useCallback(\n        (item: CopyHistoryItem) => {\n            const newCopiedSubtitles = [];\n\n            for (let subtitle of copiedSubtitles) {\n                if (item.id !== subtitle.id) {\n                    newCopiedSubtitles.push(subtitle);\n                }\n            }\n\n            setCopiedSubtitles(newCopiedSubtitles);\n        },\n        [copiedSubtitles]\n    );\n\n    const handleUnloadAudio = useCallback(\n        (audioFileUrl: string) => {\n            if (audioFileUrl !== sources.audioFileUrl) {\n                return;\n            }\n\n            setSources((previous) => {\n                URL.revokeObjectURL(audioFileUrl);\n\n                return {\n                    subtitleFiles: previous.subtitleFiles,\n                    audioFile: undefined,\n                    audioFileUrl: undefined,\n                    videoFile: previous.videoFile,\n                    videoFileUrl: previous.videoFileUrl,\n                };\n            });\n        },\n        [sources]\n    );\n\n    const handleUnloadVideo = useCallback(\n        (videoFileUrl: string) => {\n            if (videoFileUrl !== sources.videoFileUrl) {\n                return;\n            }\n\n            setSources((previous) => {\n                URL.revokeObjectURL(videoFileUrl);\n\n                return {\n                    subtitleFiles: previous.subtitleFiles,\n                    audioFile: previous.audioFile,\n                    audioFileUrl: previous.audioFileUrl,\n                    videoFile: undefined,\n                    videoFileUrl: undefined,\n                };\n            });\n            setVideoFullscreen(false);\n        },\n        [sources]\n    );\n\n    const handleClipAudio = useCallback(\n        async (item: CopyHistoryItem) => {\n            try {\n                const clip = await audioClipFromItem(\n                    item,\n                    undefined,\n                    settingsProvider.audioPaddingStart,\n                    settingsProvider.audioPaddingEnd\n                );\n\n                if (settingsProvider.preferMp3) {\n                    clip!.toMp3().download();\n                } else {\n                    clip!.download();\n                }\n            } catch (e) {\n                console.error(e);\n                if (e instanceof Error) {\n                    handleError(e.message);\n                } else {\n                    handleError(String(e));\n                }\n            }\n        },\n        [handleError, settingsProvider]\n    );\n\n    const handleDownloadImage = useCallback(\n        async (item: CopyHistoryItem) => {\n            try {\n                (await imageFromItem(\n                    item,\n                    settingsProvider.maxImageWidth,\n                    settingsProvider.maxImageHeight\n                ))!.download();\n            } catch (e) {\n                console.error(e);\n                if (e instanceof Error) {\n                    handleError(e.message);\n                } else {\n                    handleError(String(e));\n                }\n            }\n        },\n        [handleError, settingsProvider]\n    );\n\n    const handleDownloadCopyHistorySectionAsSrt = useCallback(\n        (name: string, items: CopyHistoryItem[]) => {\n            const deduplicated: SubtitleModel[] = [];\n\n            for (const item of items) {\n                if (\n                    deduplicated.find((i) => i.start === item.start && i.end === item.end && i.text === item.text) ===\n                    undefined\n                ) {\n                    deduplicated.push(item);\n                }\n            }\n\n            download(\n                new Blob([subtitleReader.subtitlesToSrt(deduplicated)], { type: 'text/plain' }),\n                `${name}_MiningHistory_${new Date().toISOString()}.srt`\n            );\n        },\n        [subtitleReader]\n    );\n\n    const handleSelectCopyHistoryItem = useCallback(\n        (item: CopyHistoryItem) => {\n            if (!subtitleFiles.find((f) => f.name === item.subtitleFile?.name)) {\n                handleError('Subtitle file ' + item.subtitleFile?.name + ' is not open.');\n                return;\n            }\n\n            setJumpToSubtitle({\n                text: item.text,\n                start: item.start,\n                end: item.end,\n                originalStart: item.originalStart,\n                originalEnd: item.originalEnd,\n                track: item.track,\n            });\n        },\n        [subtitleFiles, handleError]\n    );\n\n    const handleAnki = useCallback((item: CopyHistoryItem) => {\n        setAnkiDialogItem(item);\n        setAnkiDialogOpen(true);\n        setAnkiDialogDisabled(false);\n        setDisableKeyEvents(true);\n    }, []);\n\n    const handleAnkiDialogCancel = useCallback(() => {\n        setAnkiDialogOpen(false);\n        setAnkiDialogDisabled(false);\n        setDisableKeyEvents(false);\n\n        if (ankiDialogRequested) {\n            setAnkiDialogFinishedRequest({ timestamp: Date.now(), resume: true });\n            setAnkiDialogRequested(false);\n        }\n    }, [ankiDialogRequested]);\n\n    const handleAnkiDialogRewind = useCallback(() => {\n        if (!ankiDialogItem) {\n            return;\n        }\n\n        if (!subtitleFiles.find((f) => f.name === ankiDialogItem.subtitleFile?.name)) {\n            handleError('Subtitle file ' + ankiDialogItem.subtitleFile?.name + ' is not open.');\n            return;\n        }\n\n        const subtitle = {\n            text: ankiDialogItem.text,\n            start: ankiDialogItem.start,\n            end: ankiDialogItem.end,\n            originalStart: ankiDialogItem.originalStart,\n            originalEnd: ankiDialogItem.originalEnd,\n            track: ankiDialogItem.track,\n        };\n        setRewindSubtitle(subtitle);\n        setJumpToSubtitle(subtitle);\n\n        handleAnkiDialogCancel();\n    }, [ankiDialogItem, subtitleFiles, handleAnkiDialogCancel, handleError]);\n\n    const handleViewImage = useCallback((image: Image) => {\n        setImage(image);\n        setImageDialogOpen(true);\n    }, []);\n\n    useEffect(() => {\n        function onTabs(tabs: VideoTabModel[]) {\n            if (tabs.length !== availableTabs.length) {\n                setAvailableTabs(tabs);\n            } else {\n                let update = false;\n\n                for (let i = 0; i < availableTabs.length; ++i) {\n                    const t1 = availableTabs[i];\n                    const t2 = tabs[i];\n                    if (t1.id !== t2.id || t1.title !== t2.title || t1.src !== t2.src) {\n                        update = true;\n                        break;\n                    }\n                }\n\n                if (update) {\n                    setAvailableTabs(tabs);\n                }\n            }\n\n            let selectedTabMissing = tab && tabs.filter((t) => t.id === tab.id && t.src === tab.src).length === 0;\n\n            if (selectedTabMissing) {\n                setTab(undefined);\n                handleError('Lost connection with tab ' + tab!.id + ' ' + tab!.title);\n            }\n        }\n\n        return extension.subscribeTabs(onTabs);\n    }, [availableTabs, tab, extension, handleError]);\n\n    const handleTabSelected = useCallback((tab: VideoTabModel) => setTab(tab), []);\n\n    const handleFiles = useCallback(\n        (files: FileList | File[]) => {\n            try {\n                let { subtitleFiles, audioFile, videoFile } = extractSources(files);\n\n                setSources((previous) => {\n                    setLoading(true);\n\n                    let videoFileUrl = undefined;\n                    let audioFileUrl = undefined;\n\n                    if (videoFile || audioFile) {\n                        revokeUrls(previous);\n\n                        if (videoFile) {\n                            videoFileUrl = URL.createObjectURL(videoFile);\n                        } else if (audioFile) {\n                            audioFileUrl = URL.createObjectURL(audioFile);\n                        }\n\n                        setTab(undefined);\n                    } else {\n                        videoFile = previous.videoFile;\n                        videoFileUrl = previous.videoFileUrl;\n                        audioFile = previous.audioFile;\n                        audioFileUrl = previous.audioFileUrl;\n                    }\n\n                    const sources = {\n                        subtitleFiles: subtitleFiles.length === 0 ? previous.subtitleFiles : subtitleFiles,\n                        audioFile: audioFile,\n                        audioFileUrl: audioFileUrl,\n                        videoFile: videoFile,\n                        videoFileUrl: videoFileUrl,\n                    };\n\n                    return sources;\n                });\n\n                if (subtitleFiles.length > 0) {\n                    const subtitleFileName = subtitleFiles[0].name;\n                    setFileName(subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')));\n                }\n            } catch (e) {\n                console.error(e);\n                if (e instanceof Error) {\n                    handleError(e.message);\n                } else {\n                    handleError(String(e));\n                }\n            }\n        },\n        [handleError]\n    );\n\n    const handleDirectory = useCallback(\n        async (items: DataTransferItemList) => {\n            if (items.length !== 1) {\n                handleError('Cannot load more than one directory at a time');\n                return;\n            }\n\n            const fileSystemEntry = items[0].webkitGetAsEntry();\n\n            if (!fileSystemEntry || !fileSystemEntry.isDirectory) {\n                handleError('Failed to load directory');\n                return;\n            }\n\n            const fileSystemDirectoryEntry = fileSystemEntry as FileSystemDirectoryEntry;\n\n            try {\n                const entries = await new Promise<FileSystemEntry[]>((resolve, reject) =>\n                    fileSystemDirectoryEntry.createReader().readEntries(resolve, reject)\n                );\n\n                if (entries.find((e) => e.isDirectory)) {\n                    handleError('Cannot load a directory with subdirectories');\n                    return;\n                }\n\n                const filePromises = entries.map(\n                    (e) => new Promise<File>((resolve, reject) => (e as FileSystemFileEntry).file(resolve, reject))\n                );\n                const files: File[] = [];\n\n                for (const f of filePromises) {\n                    files.push(await f);\n                }\n\n                handleFiles(files);\n            } catch (e) {\n                console.error(e);\n                if (e instanceof Error) {\n                    handleError(e.message);\n                } else {\n                    handleError(String(e));\n                }\n            }\n        },\n        [handleError, handleFiles]\n    );\n\n    useEffect(() => {\n        if (inVideoPlayer) {\n            extension.startHeartbeat(true);\n            return undefined;\n        }\n\n        async function onMessage(message: ExtensionMessage) {\n            if (message.data.command === 'sync' || message.data.command === 'syncv2') {\n                const tabs = extension.tabs.filter((t) => {\n                    if (t.id !== message.tabId) {\n                        return false;\n                    }\n\n                    return !message.src || t.src === message.src;\n                });\n\n                if (tabs.length === 0) {\n                    if (message.src) {\n                        console.error(\n                            'Received sync request but the requesting tab ID ' +\n                                message.tabId +\n                                ' with src ' +\n                                message.src +\n                                ' was not found'\n                        );\n                    } else {\n                        console.error(\n                            'Received sync request but the requesting tab ID ' + message.tabId + ' was not found'\n                        );\n                    }\n\n                    return;\n                }\n\n                const tab = tabs[0];\n                let subtitleFiles: File[];\n\n                if (message.data.command === 'sync') {\n                    const syncMessage = message.data as LegacyPlayerSyncMessage;\n                    subtitleFiles = [\n                        new File(\n                            [await (await fetch('data:text/plain;base64,' + syncMessage.subtitles.base64)).blob()],\n                            syncMessage.subtitles.name\n                        ),\n                    ];\n                } else if (message.data.command === 'syncv2') {\n                    const syncMessage = message.data as PlayerSyncMessage;\n                    subtitleFiles = await Promise.all(\n                        syncMessage.subtitles.map(\n                            async (s) =>\n                                new File([await (await fetch('data:text/plain;base64,' + s.base64)).blob()], s.name)\n                        )\n                    );\n                } else {\n                    console.error('Unknown message ' + message.data.command);\n                    return;\n                }\n\n                const subtitleFileName = subtitleFiles[0].name;\n                setFileName(subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')));\n                setSources({\n                    subtitleFiles: subtitleFiles,\n                    audioFile: undefined,\n                    audioFileUrl: undefined,\n                    videoFile: undefined,\n                    videoFileUrl: undefined,\n                });\n                setTab(tab);\n            } else if (message.data.command === 'edit-keyboard-shortcuts') {\n                setSettingsDialogOpen(true);\n                setSettingsDialogScrollToId('keyboard-shortcuts');\n            }\n        }\n\n        const unsubscribe = extension.subscribe(onMessage);\n        extension.startHeartbeat(false);\n        return unsubscribe;\n    }, [extension, inVideoPlayer]);\n\n    const handleAutoPauseModeChangedViaBind = useCallback((oldPlayMode: PlayMode, newPlayMode: PlayMode) => {\n        switch (newPlayMode) {\n            case PlayMode.autoPause:\n                setAlert('Auto-pause: On');\n                break;\n            case PlayMode.condensed:\n                setAlert('Condensed playback: On');\n                break;\n            case PlayMode.normal:\n                if (oldPlayMode === PlayMode.autoPause) {\n                    setAlert('Auto-pause: Off');\n                } else if (oldPlayMode === PlayMode.condensed) {\n                    setAlert('Condensed playback: Off');\n                }\n                break;\n        }\n\n        setAlertSeverity('info');\n        setAlertOpen(true);\n    }, []);\n\n    const handleDrop = useCallback(\n        (e: React.DragEvent) => {\n            if (ankiDialogOpen) {\n                return;\n            }\n\n            e.preventDefault();\n\n            if (inVideoPlayer) {\n                handleError('Video player cannot receive dropped files. Drop outside of the video frame instead.');\n                return;\n            }\n\n            setDragging(false);\n            dragEnterRef.current = null;\n\n            function allDirectories(items: DataTransferItemList) {\n                for (let i = 0; i < items.length; ++i) {\n                    if (!items[i].webkitGetAsEntry()?.isDirectory) {\n                        return false;\n                    }\n                }\n\n                return true;\n            }\n\n            if (e.dataTransfer.items && e.dataTransfer.items.length > 0 && allDirectories(e.dataTransfer.items)) {\n                handleDirectory(e.dataTransfer.items);\n            } else if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n                handleFiles(e.dataTransfer.files);\n            }\n        },\n        [inVideoPlayer, handleError, handleFiles, handleDirectory, ankiDialogOpen]\n    );\n\n    const handleFileInputChange = useCallback(() => {\n        const files = fileInputRef.current?.files;\n\n        if (files && files.length > 0) {\n            handleFiles(files);\n        }\n    }, [handleFiles]);\n\n    const handleFileSelector = useCallback(() => fileInputRef.current?.click(), []);\n\n    const handleDownloadSubtitleFilesAsSrt = useCallback(async () => {\n        if (sources.subtitleFiles === undefined) {\n            return;\n        }\n\n        const nonSupSubtitleFiles = sources.subtitleFiles.filter((f) => !f.name.endsWith('.sup'));\n\n        if (nonSupSubtitleFiles.length === 0) {\n            return;\n        }\n\n        download(\n            new Blob([await subtitleReader.filesToSrt(nonSupSubtitleFiles)], {\n                type: 'text/plain',\n            }),\n            `${fileName}.srt`\n        );\n    }, [fileName, sources.subtitleFiles, subtitleReader]);\n\n    const handleDragOver = useCallback(\n        (e: React.DragEvent<HTMLDivElement>) => {\n            if (ankiDialogOpen) {\n                return;\n            }\n\n            e.preventDefault();\n        },\n        [ankiDialogOpen]\n    );\n\n    const handleDragEnter = useCallback(\n        (e: React.DragEvent<HTMLDivElement>) => {\n            if (ankiDialogOpen) {\n                return;\n            }\n\n            e.preventDefault();\n            e.stopPropagation();\n\n            if (!inVideoPlayer) {\n                dragEnterRef.current = e.target as Element;\n                setDragging(true);\n            }\n        },\n        [inVideoPlayer, ankiDialogOpen]\n    );\n\n    const handleDragLeave = useCallback(\n        (e: React.DragEvent<HTMLDivElement>) => {\n            e.nativeEvent.preventDefault();\n            e.nativeEvent.stopPropagation();\n\n            if (!inVideoPlayer && dragEnterRef.current === e.target) {\n                setDragging(false);\n            }\n        },\n        [inVideoPlayer]\n    );\n\n    const handleSourcesLoaded = useCallback(() => setLoading(false), []);\n\n    useEffect(() => {\n        var view = searchParams.get('view');\n        if (view === 'settings') {\n            setSettingsDialogOpen(true);\n\n            if (location.hash && location.hash.startsWith('#')) {\n                const id = location.hash.substring(1, location.hash.length);\n                setSettingsDialogScrollToId(id);\n            }\n        }\n    }, [searchParams, location]);\n\n    useEffect(() => {\n        if (alertOpen && alert && alertSeverity) {\n            videoChannelRef.current?.alert(alert, alertSeverity);\n        }\n    }, [alert, alertSeverity, alertOpen]);\n\n    if (location.pathname === '/' && searchParams.get('video')) {\n        return <NavigateToVideo searchParams={searchParams} />;\n    }\n\n    const nothingLoaded =\n        (loading && !videoFrameRef.current) ||\n        (sources.subtitleFiles.length === 0 && !sources.audioFile && !sources.videoFile);\n    const appBarHidden = sources.videoFile !== undefined && ((theaterMode && !videoPopOut) || videoFullscreen);\n    const effectiveCopyHistoryOpen = copyHistoryOpen && !videoFullscreen;\n\n    return (\n        <ThemeProvider theme={theme}>\n            <CssBaseline />\n            <div\n                onDrop={handleDrop}\n                onDragOver={handleDragOver}\n                onDragEnter={handleDragEnter}\n                onDragLeave={handleDragLeave}\n            >\n                <Alert open={alertOpen} onClose={handleAlertClosed} autoHideDuration={3000} severity={alertSeverity}>\n                    {alert}\n                </Alert>\n                <Routes>\n                    <Route\n                        path=\"/video\"\n                        element={\n                            <>\n                                <RenderVideo\n                                    searchParams={searchParams}\n                                    settingsProvider={settingsProvider}\n                                    playbackPreferences={playbackPreferences}\n                                    extension={extension}\n                                    ankiDialogFinishedRequest={ankiDialogFinishedRequest}\n                                    onAnkiDialogRequest={handleAnkiDialogRequestFromVideoPlayer}\n                                    onError={handleError}\n                                    onPlayModeChangedViaBind={handleAutoPauseModeChangedViaBind}\n                                />\n                                <AnkiDialog\n                                    open={ankiDialogOpen}\n                                    disabled={ankiDialogDisabled}\n                                    audioClip={ankiDialogAudioClip}\n                                    image={ankiDialogImage}\n                                    source={itemSourceString(ankiDialogItem)}\n                                    url={ankiDialogItem?.url}\n                                    sliderContext={ankiDialogItemSliderContext}\n                                    customFields={settingsProvider.customAnkiFields}\n                                    anki={anki}\n                                    settingsProvider={settingsProvider}\n                                    onCancel={handleAnkiDialogCancel}\n                                    onRewind={handleAnkiDialogRewind}\n                                    onProceed={handleAnkiDialogProceed}\n                                    onViewImage={handleViewImage}\n                                />\n                                <ImageDialog open={imageDialogOpen} image={image} onClose={handleImageDialogClosed} />\n                            </>\n                        }\n                    />\n                    <Route\n                        path=\"/\"\n                        element={\n                            <div>\n                                <CopyHistory\n                                    items={copiedSubtitles}\n                                    open={effectiveCopyHistoryOpen}\n                                    drawerWidth={drawerWidth}\n                                    onClose={handleCloseCopyHistory}\n                                    onDelete={handleDeleteCopyHistoryItem}\n                                    onClipAudio={handleClipAudio}\n                                    onDownloadImage={handleDownloadImage}\n                                    onDownloadSectionAsSrt={handleDownloadCopyHistorySectionAsSrt}\n                                    onSelect={handleSelectCopyHistoryItem}\n                                    onAnki={handleAnki}\n                                />\n                                <AnkiDialog\n                                    open={ankiDialogOpen}\n                                    disabled={ankiDialogDisabled}\n                                    audioClip={ankiDialogAudioClip}\n                                    image={ankiDialogImage}\n                                    source={itemSourceString(ankiDialogItem)}\n                                    url={ankiDialogItem?.url}\n                                    sliderContext={ankiDialogItemSliderContext}\n                                    customFields={settingsProvider.customAnkiFields}\n                                    anki={anki}\n                                    settingsProvider={settingsProvider}\n                                    onCancel={handleAnkiDialogCancel}\n                                    onRewind={handleAnkiDialogRewind}\n                                    onProceed={handleAnkiDialogProceed}\n                                    onViewImage={handleViewImage}\n                                    onOpenSettings={handleOpenSettings}\n                                />\n                                <ImageDialog open={imageDialogOpen} image={image} onClose={handleImageDialogClosed} />\n                                <SettingsDialog\n                                    anki={anki}\n                                    extension={extension}\n                                    open={settingsDialogOpen}\n                                    onClose={handleCloseSettings}\n                                    settings={settingsProvider.settings}\n                                    scrollToId={settingsDialogScrollToId}\n                                />\n                                <Bar\n                                    title={fileName || 'asbplayer'}\n                                    drawerWidth={drawerWidth}\n                                    drawerOpen={effectiveCopyHistoryOpen}\n                                    hidden={appBarHidden}\n                                    subtitleFiles={sources.subtitleFiles}\n                                    onOpenCopyHistory={handleOpenCopyHistory}\n                                    onDownloadSubtitleFilesAsSrt={handleDownloadSubtitleFilesAsSrt}\n                                    onOpenSettings={handleOpenSettings}\n                                    onFileSelector={handleFileSelector}\n                                />\n                                <input\n                                    ref={fileInputRef}\n                                    onChange={handleFileInputChange}\n                                    type=\"file\"\n                                    accept=\".srt,.ass,.vtt,.sup,.mp3,.m4a,.aac,.flac,.ogg,.wav,.opus,.mkv,.mp4,.avi\"\n                                    multiple\n                                    hidden\n                                />\n                                <Content drawerWidth={drawerWidth} drawerOpen={effectiveCopyHistoryOpen}>\n                                    {nothingLoaded && (\n                                        <LandingPage\n                                            latestExtensionVersion={latestExtensionVersion}\n                                            extensionUrl={extensionUrl}\n                                            extension={extension}\n                                            loading={loading}\n                                            dragging={dragging}\n                                            appBarHidden={appBarHidden}\n                                            onFileSelector={handleFileSelector}\n                                        />\n                                    )}\n                                    <DragOverlay dragging={dragging} appBarHidden={appBarHidden} loading={loading} />\n                                    <Player\n                                        subtitleReader={subtitleReader}\n                                        settingsProvider={settingsProvider}\n                                        playbackPreferences={playbackPreferences}\n                                        onCopy={handleCopy}\n                                        onError={handleError}\n                                        onUnloadAudio={handleUnloadAudio}\n                                        onUnloadVideo={handleUnloadVideo}\n                                        onLoaded={handleSourcesLoaded}\n                                        onTabSelected={handleTabSelected}\n                                        onAnkiDialogRequest={handleAnkiDialogRequest}\n                                        onAppBarToggle={handleAppBarToggle}\n                                        onFullscreenToggle={handleFullscreenToggle}\n                                        onHideSubtitlePlayer={handleHideSubtitlePlayer}\n                                        onVideoPopOut={handleVideoPopOut}\n                                        onPlayModeChangedViaBind={handleAutoPauseModeChangedViaBind}\n                                        tab={tab}\n                                        availableTabs={availableTabs}\n                                        sources={sources}\n                                        jumpToSubtitle={jumpToSubtitle}\n                                        rewindSubtitle={rewindSubtitle}\n                                        videoFrameRef={videoFrameRef}\n                                        videoChannelRef={videoChannelRef}\n                                        extension={extension}\n                                        drawerOpen={effectiveCopyHistoryOpen}\n                                        appBarHidden={appBarHidden}\n                                        videoFullscreen={videoFullscreen}\n                                        hideSubtitlePlayer={hideSubtitlePlayer || videoFullscreen}\n                                        videoPopOut={videoPopOut}\n                                        disableKeyEvents={disableKeyEvents}\n                                        ankiDialogRequested={ankiDialogRequested}\n                                        ankiDialogFinishedRequest={ankiDialogFinishedRequest}\n                                        keyBinder={keyBinder}\n                                    />\n                                </Content>\n                            </div>\n                        }\n                    />\n                </Routes>\n            </div>\n        </ThemeProvider>\n    );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import '@fontsource/roboto';\nimport { createRoot } from 'react-dom/client';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\n\ncreateRoot(document.querySelector('#root')!).render(\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <App />\n    </BrowserRouter>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}