{"version":3,"sources":["hooks/useWindowSize/index.ts","../../common/src/KeySequence.ts","../../common/src/KeyEvents.ts","../../common/src/KeySequences.ts","../../common/src/KeyBindings.ts","../../common/src/Mp3Encoder.ts","../../common/src/mp3-encoder.js","../../common/src/Util.ts","../../common/src/AudioClip.ts","../../common/src/Model.ts","../../common/src/CanvasResizer.ts","../../common/src/Image.ts","../../common/src/Fetcher.ts","../../common/src/Anki.ts","components/Alert.tsx","../../common/components/src/TagsTextField.tsx","../../common/components/src/ImageDialog.tsx","../../common/components/src/SubtitleTextImage.tsx","../../common/components/src/AnkiDialog.tsx","components/background-colored.png","components/DragOverlay.tsx","services/pgs-parser/segment.ts","services/pgs-parser/buffer.ts","services/pgs-parser/parser.ts","services/SubtitleReader.ts","components/Bar.tsx","services/ChromeExtension.ts","services/Util.ts","components/CopyHistory.tsx","components/LandingPage.tsx","services/BroadcastChannelVideoProtocol.ts","services/ChromeTabVideoProtocol.ts","services/Clock.ts","components/Controls.tsx","services/MediaAdapter.ts","components/SubtitlePlayer.tsx","services/VideoChannel.ts","components/Player.tsx","components/CustomFieldDialog.tsx","components/SettingsDialog.tsx","services/SettingsProvider.ts","services/PlayerChannel.ts","components/VideoPlayer.tsx","components/App.tsx","reportWebVitals.js","index.tsx"],"names":["useWindowSize","enabled","useState","size","setSize","useLayoutEffect","updateSize","window","innerWidth","innerHeight","addEventListener","removeEventListener","KeySequenceTransitionResult","KeyEvents","event","ctrlKey","shiftKey","key","toLowerCase","detectDecreaseOffset","detectIncreaseOffset","detectIncreaseOffsetToPreviousSubtitle","detectDecreaseOffsetToNextSubtitle","detectCopy","KeySequence","up","holding","canceledBy","map","currentlyHolding","canceled","this","result","REJECTED","extra","type","includes","ADVANCED","CANCELED","_holdingAll","COMPLETE","KeySequences","Number","KeyBindings","onCopy","disabledGetter","subtitleGetter","useCapture","_bindDown","subtitle","onAnkiExport","detectAnkiExport","onUpdateLastCard","detectUpdateLastCard","onSeekToSubtitle","timeGetter","subtitlesGetter","subtitles","length","forward","detectPreviousSubtitle","detectNextSubtitle","_adjacentSubtitle","start","end","onSeekToBeginningOfCurrentSubtitle","detectCurrentSubtitle","_currentSubtitle","undefined","time","currentSubtitle","now","minDiff","MAX_SAFE_INTEGER","i","s","diff","onSeekBackwardOrForward","detectSeekBackward","detectSeekForward","onOffsetChange","subtitleStart","originalStart","adjacentSubtitleIndex","Math","max","increase","currentOffset","onToggleSubtitles","onSequenceAdvanced","sequence","toggleSubtitles","handler","reset","transition","accept","unbindDown","unbindUp","_bindUp","onToggleSubtitleTrack","toggleSubtitleTrack","onToggleSubtitleTrackInList","toggleSubtitleTrackInList","onPlay","detectPlay","onAutoPause","detectAutoPause","Mp3Encoder","blob","workerFactory","Promise","resolve","reject","a","reader","FileReader","onload","e","audioContext","AudioContext","target","Error","decodeAudioData","audioBuffer","channels","numberOfChannels","push","getChannelData","worker","postMessage","command","sampleRate","onmessage","Blob","data","buffer","terminate","onerror","error","message","readAsArrayBuffer","Worker_fn","Worker","humanReadableTime","timestamp","seconds","nearestTenth","totalSeconds","floor","round","minutes","hours","String","padStart","surroundingSubtitles","index","countRadius","timeRadius","startIndex","atBoundary","endIndex","slice","mockSurroundingSubtitles","middleSubtitle","maxTimestamp","offset","afterTimestamp","min","text","originalEnd","track","beforeTimestamp","unshift","initialIndex","sign","next","abs","download","name","url","URL","createObjectURL","document","createElement","body","appendChild","style","display","href","sanitize","click","revokeObjectURL","remove","PostMineAction","AutoPausePreference","PlayMode","defaultMp3WorkerFactory","Base64AudioData","baseName","base64","extension","_name","_base64","_extension","cachedBlob","_blob","audio","Audio","src","preload","load","play","setTimeout","pause","fetch","FileAudioData","file","trackId","recorderMimeType","_recorderConfiguration","recorderExtension","readAsDataURL","onloadend","substring","indexOf","_clipAudio","_audioElement","currentTime","_stopAudio","oncanplay","stream","_captureStream","recorder","MediaRecorder","mimeType","chunks","ondataavailable","onstop","stop","getAudioTracks","source","selectTrack","onloadedmetadata","audioTracks","t","id","captureStream","mozCaptureStream","audioStream","MediaStream","getVideoTracks","addTrack","AUDIO_TYPES","Object","keys","filter","isTypeSupported","Mp3AudioData","encode","isSliceable","AudioClip","mp3WorkerFactory","subtitleFileName","lastIndexOf","CanvasResizer","canvas","ctx","maxWidth","maxHeight","widthRatio","width","heightRatio","height","ratio","newWidth","newHeight","createImageBitmap","resizeWidth","resizeHeight","then","sprite","drawImage","catch","Base64ImageData","_dataUrl","FileImageData","_canvas","dataUrl","toDataURL","toBlob","video","_videoElement","videoWidth","videoHeight","getContext","resizer","resize","Image","bitMap","imageName","HttpFetcher","method","JSON","stringify","response","json","ankiQuerySpecialCharacters","Anki","settingsProvider","fetcher","ankiConnectUrl","_executeAction","modelName","word","query","wordField","_escapeQuery","escaped","char","definition","audioClip","image","customFieldValues","tags","mode","fields","_appendField","sentenceField","definitionField","sourceField","urlField","customFieldName","customAnkiFields","params","note","deckName","deck","noteType","options","allowDuplicate","duplicateScope","duplicateScopeOptions","checkChildren","gui","updateLast","audioField","sanitizedName","_sanitizeFileName","_storeMediaFile","fileName","filename","imageField","recentNotes","sort","lastNoteId","notes","infoResponse","noteId","info","value","fieldName","multiline","newValue","split","join","existingValue","replacement","action","version","useAlertStyles","makeStyles","root","justifyContent","position","top","pointerEvents","zIndex","Alert","props","classes","useEffect","open","timeout","onClose","autoHideDuration","clearTimeout","className","Grow","in","severity","children","TagsTextField","onTagsChange","setValue","handleChange","useCallback","currentValue","endsWith","newTags","splitTags","tag","trim","extractTagsFromString","TextField","onChange","useStyles","theme","backgroundSize","ImageDialog","resizeRatio","setDataUrl","setWidth","setHeight","windowWidth","windowHeight","img","fetchImage","Dialog","Card","CardMedia","title","SubtitleTextImage","availableWidth","scale","textImage","screen","alt","marginBottom","spacing","flexGrow","mediaField","cursor","rangeSelectSlider","transform","sliderMarksFromSliderContext","sliderContext","boundary","seenTimestamps","label","mark","sliderValueLabelFormat","ms","subtitleIntersectsTimeInterval","interval","ValueLabelComponent","Tooltip","enterTouchDelay","placement","useTextImageSetStyles","padding","backgroundColor","palette","disabledBackground","TextImageSet","selectedSubtitles","Paper","elevation","TextFieldEndAdornment","withStyles","InputAdornment","AnkiDialog","disabled","initialText","onProceed","onRewind","onCancel","onViewImage","onOpenSettings","onRerecord","initialAudioClip","initialSource","initialUrl","customFields","anki","initialDefinition","initialWord","initialCustomFieldValues","initialSelectedTimestampInterval","timestampInterval","forceInitialTimestampInterval","initialTimestampInterval","initialLastAppliedTimestampIntervalToText","lastAppliedTimestampIntervalToText","initialLastAppliedTimestampIntervalToAudio","lastAppliedTimestampIntervalToAudio","stateRef","setDefinition","setText","setWord","lastSearchedWord","setLastSearchedWord","setSource","setTags","setUrl","duplicateNotes","setDuplicateNotes","wordTimestamp","setWordTimestamp","setCustomFieldValues","setTimestampInterval","setSelectedSubtitles","setInitialTimestampInterval","initialTimestampBoundaryInterval","setInitialTimestampBoundaryInterval","timestampBoundaryInterval","setTimestampBoundaryInterval","timestampMarks","setTimestampMarks","setLastAppliedTimestampIntervalToText","setLastAppliedTimestampIntervalToAudio","setAudioClip","dialogRefCallback","element","getBoundingClientRect","current","subtitleEnd","boundaryIntervalFromSliderContext","newAudioClip","preferMp3","toMp3","audioPaddingStart","audioPaddingEnd","Date","trimmedWord","findNotesWithWord","console","wordHelperText","handlePlayAudio","preventDefault","stopPropagation","handleCustomFieldChange","newCustomFieldValues","assign","handleViewImage","handleTimestampIntervalChange","handleApplyTimestampIntervalToText","newText","handleApplyTimestampIntervalToAudio","handleResetTimestampInterval","handleZoomInTimestampInterval","newTimestampBoundaryInterval","handleCopyImageToClipboard","navigator","clipboard","ClipboardItem","pngBlob","write","disableApplyTextSelection","disableEnforceFocus","fullWidth","Toolbar","Typography","variant","IconButton","edge","onClick","DialogContent","ref","color","maxRows","InputProps","endAdornment","rows","helperText","findNotesWithWordGui","Grid","container","direction","item","Slider","valueLabelFormat","marks","step","valueLabelDisplay","marginTop","DialogActions","Button","dragging","appBarHidden","transparentBackground","content","flexDirection","alignItems","textAlign","backgroundRepeat","backgroundPosition","backgroundImage","coloredBackground","backgroundBlendMode","background","DragOverlay","loading","Fade","SegmentType","Uint8ArrayBuffer","subarray","CompositeBuffer","buffers","previousBuffersLength","bufferIndex","at","startBufferIndex","endBufferIndex","CompositeBufferReader","bytes","accumulated","shift","required","c","BufferGenerator","accumulatedBuffer","requestedBytes","getReader","read","done","add","BufferReader","_index","limit","number","digit","from","CompositionState","segmentTypeValues","values","segmentTypeFromByte","byte","LastInSequenceFlag","compositionStateValues","lastInSequenceFlagValues","RunLengthEncodedBuffer","encodedBuffer","callback","encodedIndex","decodedLineIndex","currentLine","encodedLength","firstByte","runLength","increment","secondByte","thirdByte","x","DisplaySet","presentationCompositionSegment","windowDefinitionSegments","paletteDefinitionSegments","objectDefinitionSegments","endDefinitionSegment","previousDisplaySet","find","ods","lastInSequenceFlag","firstInSequence","firstAndLastInSequence","paletteId","pds","compositionState","normal","paletteDefinitionSegment","firstOds","imageDataArray","Uint8ClampedArray","rgbaPalette","paletteEntries","ycrcbToRgba","objectData","decode","y","paletteIndex","imageDataOffset","r","g","b","ImageData","luminance","cb","colorDifferenceBlue","cr","colorDifferenceRed","clamp","transparency","parseDisplaySets","bufferGenerator","header","segmentType","pcs","wds","parsePcsSegment","parseWdsSegment","parsePdsSegment","parseOdsSegment","lastDisplaySet","magicNumber","readHex","presentationTimestamp","decodingTimestamp","segmentSize","compositionNumber","state","compositionStateFromByte","paletteUpdateFlag","paletteUpdateFlagFromByte","compositionObjectCount","objectId","windowId","objectCroppedFlag","objectCroppedFlagFromByte","objectHorizontalPosition","objectVerticalPosition","objectCroppingHorizontalPosition","objectCroppingVerticalPosition","objectCroppingWidth","objectCroppingHeightPosition","windowCount","windowDefinitions","windowHorizontalPosition","windowVerticalPosition","paletteVersionNumber","paletteEntryId","objectVersionNumber","flag","lastInSequenceFlagFromByte","objectDataLength","readBuffer","tagRegex","RegExp","assNewLineRegex","helperElement","helperCanvas","SubtitleReader","xmlParser","files","all","f","_subtitles","flatMap","nodes","n1","n2","parseSrt","node","cue","replace","isFromNetflix","parser","WebVTT","Parser","StringDecoder","cues","oncue","lines","newLines","line","_fixRTL","onflush","startTime","endTime","parse","flush","parseAss","dialogues","dialogue","slices","fragments","fragment","xml","_xmlParser","textNodes","elm","parseFloat","_decodeHTML","parsePgsDisplaySets","displaySet","currentImageDisplaySet","screenWidth","screenHeight","imageData","putImageData","index1","index2","newLine","innerHTML","childNodes","nodeValue","XMLParser","ignoreAttributes","subtitleNode","writeSrt","format","subtitlesToSrt","leftButton","marginRight","appBar","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","drawerWidth","easeOut","enteringScreen","copyHistoryButton","copyHistoryButtonShift","hide","useCopyHistoryTooltipStyles","tooltip","show","CopyHistoryTooltip","toolTipProps","Bar","drawerOpen","hidden","subtitleFiles","onOpenCopyHistory","onFileSelector","onDownloadSubtitleFilesAsSrt","menuOpen","setMenuOpen","menuAnchorEl","setMenuAnchorEl","canSaveAsSrt","handleFileAction","currentTarget","handleMenuClose","handleOpenFilesFromMenu","handleDownloadSubtitleFilesAsSrt","Popover","anchorEl","anchorOrigin","vertical","horizontal","ListItem","button","AppBar","clsx","disableFocusListener","disableHoverListener","disableTouchListener","component","rel","ChromeExtension","tabs","onMessageCallbacks","onTabsCallbacks","versionPromise","versionResolve","heartbeatStarted","uuidv4","sender","tabsCommand","ackRequested","receivedTabs","tabId","_sendHeartbeat","setInterval","tab","_remove","callbacks","splice","computeStyles","subtitleColor","subtitleSize","subtitleOutlineThickness","subtitleOutlineColor","subtitleBackgroundOpacity","subtitleBackgroundColor","subtitleFontFamily","styles","fontSize","thickness","opacity","hex","exec","parseInt","hexToRgb","timeDurationDisplay","milliseconds","totalMilliseconds","includeMilliseconds","secs","mins","hrs","pad","n","zeros","drawer","flexShrink","drawerPaper","drawerHeader","mixins","toolbar","listContainer","overflowY","overflowX","listItem","hover","listItemGutters","paddingLeft","paddingRight","listItemIconRoot","minWidth","emptyState","emptyText","secondary","Menu","onSelect","onClipAudio","onDownloadImage","onDelete","handleCopy","writeText","handleJumpTo","handleClipAudio","handleDownloadImage","handleDelete","transformOrigin","ListItemText","primaryTypographyProps","primary","videoFile","audioFile","CopyHistory","scrollToBottomRefCallback","scrollIntoView","menuItem","setMenuItem","handleMenu","handleMenuClosed","items","currentKey","lastSeenItemName","itemNameCounters","itemsBySection","ListItemSecondaryAction","onDownloadSectionAsSrt","gutters","ListItemIcon","onAnki","wrap","Fragment","Drawer","anchor","paper","Divider","browseLink","LandingPage","latestExtensionVersion","extensionUrl","installedExtensionVersion","setInstalledExtensionVersion","installedVersion","fetchInstalledExtensionVersion","extensionUpdateAvailable","gt","extensionNotInstalled","Link","BroadcastChannelVideoProtocol","channelId","channel","onMessage","BroadcastChannel","that","close","ChromeTabVideoProtocol","listener","subscribe","sendMessage","unsubscribe","Clock","started","useControlStyles","left","bottom","buttonContainer","timeDisplay","marginLeft","offsetInput","volumeInputContainerShown","short","volumeInputContainerHidden","volumeInputHidden","volumeInputShown","volumeInputThumbHidden","volumeInputThumbShown","subContainer","inactiveButton","inactiveTopButton","progress","margin","topButton","gridContainer","useProgressBarStyles","mouseEventListener","fillContainer","fillContainerThick","easeInOut","fill","handleContainer","handle","borderRadius","handleOn","shortest","VolumeSlider","verticalAlign","thumb","boxShadow","active","displayTime","secondsInMinute","ProgressBar","onSeek","mouseOver","setMouseOver","containerRef","useRef","handleClick","rect","right","pageX","handleMouseOver","handleMouseOut","progressWidth","elementWidth","fillStyle","handleStyle","fillContainerClassName","handleClassName","onMouseOver","onMouseOut","AudioTrackSelector","selectedAudioTrack","onAudioTrackSelected","list","selected","language","TabSelector","selectedTab","onTabSelected","MediaUnloader","onUnload","PlayModeSelector","selectedPlayMode","onPlayMode","condensed","autoPause","Controls","clock","playing","offsetEnabled","displayLength","mousePositionRef","onShow","onPause","onUnloadAudio","onUnloadVideo","onVolumeChange","disableKeyEvents","closeEnabled","volumeEnabled","playMode","playModeEnabled","subtitlesEnabled","subtitlesToggle","onSubtitlesToggle","popOutEnabled","popOut","onPopOutToggle","fullscreenEnabled","fullscreen","onFullscreenToggle","hideSubtitlePlayerToggleEnabled","subtitlePlayerHidden","onHideSubtitlePlayerToggle","showOnMouseMovement","theaterModeToggleEnabled","theaterModeEnabled","onTheaterModeToggle","setShow","audioTrackSelectorOpen","setAudioTrackSelectorOpen","audioTrackSelectorAnchorEl","setAudioTrackSelectorAnchorEl","tabSelectorOpen","setTabSelectorOpen","tabSelectorAnchorEl","setTabSelectorAnchorEl","audioUnloaderOpen","setAudioUnloaderOpen","audioUnloaderAnchorEl","setAudioUnloaderAnchorEl","videoUnloaderOpen","setVideoUnloaderOpen","videoUnloaderAnchorEl","setVideoUnloaderAnchorEl","playModeSelectorOpen","setPlayModeSelectorOpen","playModeSelectorAnchorEl","setPlayModeSelectorAnchorEl","showVolumeBar","setShowVolumeBar","volume","setVolume","lastCommittedVolume","setLastCommittedVolume","lastMousePositionRef","lastShowTimestampRef","lastOffsetInputChangeTimestampRef","lastShowRef","forceShowRef","offsetInputRef","closeButtonRef","updateState","forceUpdate","handleSeek","savedVolume","currentShow","pow","offsetTop","offsetHeight","activeElement","clearInterval","handleKey","isNaN","blur","handleOffsetInputClicked","inputElement","setSelectionRange","offsetSeconds","toFixed","handleAudioTrackSelectorClosed","handleAudioTrackSelectorOpened","handleAudioTrackSelected","handleTabSelectorClosed","handleTabSelectorOpened","handleTabSelected","handleAudioUnloaderClosed","handleAudioUnloaderOpened","handleUnloadAudio","handleVideoUnloaderClosed","handleVideoUnloaderOpened","handleUnloadVideo","handlePlayModeSelectorClosed","handlePlayModeSelectorOpened","handlePlayModeSelected","handleVolumeMouseOut","handleVolumeMouseOver","handleVolumeChange","handleVolumeChangeCommitted","handleVolumeToggle","newVolume","onChangeCommitted","defaultValue","Input","inputRef","disableUnderline","placeholder","MediaAdapter","readyResolves","_onMediaCanPlay","readyState","useSubtitlePlayerStyles","default","compressed","table","noSubtitles","useSubtitleRowStyles","subtitleRow","overflowWrap","whiteSpace","compressedSubtitle","disabledSubtitle","copyButton","SubtitleRow","React","memo","subtitleRef","onClickSubtitle","onCopySubtitle","tableRowProps","textRef","textSelected","setTextSelected","disabledClassName","availWidth","TableRow","onMouseUp","selection","getSelection","isSameNode","anchorNode","parentNode","TableCell","SubtitlePlayer","onStartedShowing","onWillStopShowing","jumpToSubtitle","displayHelp","lastJumpToTopTimestamp","disabledSubtitleTracks","playingRef","clockRef","subtitleListRef","subtitleRefs","useMemo","Array","_","createRef","subtitleRefsRef","disableKeyEventsRef","selectedSubtitleIndexes","setSelectedSubtitleIndexes","selectedSubtitleIndexesRef","lengthRef","hiddenRef","lastScrollTimestampRef","requestAnimationRef","startedShowingSubtitleRef","onStartedShowingRef","willStopShowingSubtitleRef","onWillStopShowingRef","requestAnimationFrame","update","startedShowingSubtitle","willStopShowingSubtitle","smallestIndex","fallbackIndex","startedShowing","willStopShowing","currentSubtitleIndexes","keysAreEqual","scrollToSubtitleRef","allowScroll","block","inline","behavior","cancelAnimationFrame","scrollToCurrentSubtitle","indexes","scrollIfVisible","visibilityState","firstSubtitleRef","unbind","bindAdjustOffset","bindOffsetToSubtitle","bindSeekToSubtitle","bindSeekToBeginningOfCurrentSubtitle","bindSeekBackwardOrForward","handleScroll","jumpToIndex","calculateSurroundingSubtitlesForIndex","surroundingSubtitlesCountRadius","surroundingSubtitlesTimeRadius","calculateSurroundingSubtitles","bindCopy","none","subtitleIndexes","bindToggleSubtitleTrackInList","bindAnkiExport","showAnkiDialog","bindUpdateLastCard","updateLastCard","subtitleTable","TableContainer","Table","TableBody","square","VideoChannel","protocol","isReady","readyCallbacks","playCallbacks","pauseCallbacks","audioTrackSelectedCallbacks","currentTimeCallbacks","exitCallbacks","offsetCallbacks","popOutToggleCallbacks","copyCallbacks","playModeCallbacks","hideSubtitlePlayerToggleCallbacks","appBarToggleCallbacks","ankiDialogRequestCallbacks","toggleSubtitleTrackInListCallbacks","readyMessage","paused","readyStateMessage","Event","playMessage","echo","pauseMessage","audioTrackSelectedMessage","currentTimeMessage","offsetMessage","copyMessage","postMineAction","preventDuplicate","ankiDialogRequestMessage","forwardToVideo","toggleSubtitleTrackInListMessage","subtitleFileNames","names","settings","resume","videoFrame","border","trackLength","audioRef","videoRef","useOffset","subtitlesLength","audioLength","videoLength","Player","sources","audioFileUrl","videoFileUrl","subtitleReader","videoFrameRef","videoPopOut","availableTabs","ankiDialogRequestToVideo","ankiDialogRequested","ankiDialogFinishedRequest","onError","onLoaded","onAnkiDialogRequest","onAppBarToggle","onVideoPopOut","onAutoPauseModeChangedViaBind","rewindSubtitle","setSubtitles","subtitlesRef","loadingSubtitles","setLoadingSubtitles","setPlaying","setLastJumpToTopTimestamp","setOffset","setAudioTracks","setSelectedAudioTrack","setChannelId","setResumeOnFinishedAnkiDialogRequest","hideSubtitlePlayer","setHideSubtitlePlayer","hideSubtitlePlayerRef","setDisabledSubtitleTracks","setPlayMode","playModeRef","mediaAdapter","seek","forwardToMedia","setTime","applyOffset","newSubtitles","channelClosed","onReady","init","subscribed","onExit","hideSubtitlePlayerToggle","ready","subtitleSettings","ankiSettings","miscSettings","onOffset","fromVideo","onCurrentTime","tracks","newTracks","ankiDialogRequest","finishedAnkiDialogRequest","resumeOnFinishedAnkiDialogRequest","seeking","expectedSeekTime","currentOrNextIndex","currentIndex","nextSubtitle","t0","handleOnStartedShowingSubtitle","autoPausePreference","atStart","handleOnWillStopShowingSubtitle","atEnd","process","encodeURIComponent","handlePlay","handlePause","handleSeekToSubtitle","shouldPlay","handleCopyFromSubtitlePlayer","handleMouseMove","screenX","screenY","audioTrackSelected","handleOffsetChange","HTMLMediaElement","handlePlayMode","handleToggleSubtitleTrack","bindPlay","bindAutoPause","newPlayMode","unbindCopy","unbindAnkiExport","appBarToggle","loaded","videoInWindow","Boolean","onMouseMove","CustomFieldDialog","existingCustomFieldNames","setFieldName","fieldExists","DialogTitle","subtitleSetting","subtitlePreview","subtitlePreviewInput","outline","addFieldButton","useSelectableSettingStyles","formControl","SelectableSetting","selections","removable","onSelectionChange","onRemoval","FormControl","InputLabel","Select","MenuItem","SettingsDialog","setAnkiConnectUrl","ankiConnectUrlError","setAnkiConnectUrlError","ankiConnectUrlChangeTimestamp","setAnkiConnectUrlChangeTimestamp","setDeck","deckNames","setDeckNames","setNoteType","modelNames","setModelNames","setSentenceField","setDefinitionField","setAudioField","setImageField","setWordField","setSourceField","setUrlField","setCustomFields","setPreferMp3","fieldNames","setFieldNames","customFieldDialogOpen","setCustomFieldDialogOpen","setAudioPaddingStart","setAudioPaddingEnd","maxImageWidth","setMaxImageWidth","maxImageHeight","setMaxImageHeight","setSubtitleColor","setSubtitleSize","setSubtitleOutlineColor","setSubtitleOutlineThickness","setSubtitleBackgroundColor","setSubtitleBackgroundOpacity","setSubtitleFontFamily","imageBasedSubtitleScaleFactor","setImageBasedSubtitleScaleFactor","setSubtitlePreview","themeType","setThemeType","copyToClipboardOnMine","setCopyToClipboardOnMine","setAutoPausePreference","handleAnkiConnectUrlChange","handleRetryAnkiConnectUrl","handleDeckChange","handleDeckSelectionChange","handleNoteTypeChange","handleNoteTypeSelectionChange","handleSentenceFieldChange","handleSentenceFieldSelectionChange","handleDefinitionFieldChange","handleDefinitionFieldSelectionChange","handleAudioFieldChange","handleAudioFieldSelectionChange","handleImageFieldChange","handleImageFieldSelectionChange","handleWordFieldChange","handleWordFieldSelectionChange","handleSourceFieldChange","handleSourceFieldSelectionChange","handleUrlFieldChange","handleUrlFieldSelectionChange","handleAudioPaddingStart","handleAudioPaddingEnd","handleMaxImageWidth","handleMaxImageHeight","handleSubtitleColorChange","handleSubtitleSizeChange","handleSubtitleOutlineColorChange","handleSubtitleOutlineThicknessChange","handleSubtitleBackgroundColorChange","handleSubtitleBackgroundOpacityChange","handleSubtitleFontFamilyChange","handleSubtitlePreviewChange","handleImageBasedSubtitleScaleFactorChange","handleAddCustomField","oldCustomFields","newCustomFields","handleCustomFieldRemoval","handleTagsChange","handlePreferMp3Change","checked","handleThemeTypeChange","handleCopyToClipboardOnMine","handleAutoPausePreferenceChange","subtitlePreviewStyles","requestPermission","refreshFieldNames","modelFieldNames","handleClose","theaterMode","customFieldInputs","FormLabel","FormGroup","FormHelperText","location","hostname","FormControlLabel","control","Checkbox","inputProps","Radio","defaultAutoPausePreference","ankiConnectUrlKey","deckKey","noteTypeKey","sentenceFieldKey","definitionFieldKey","audioFieldKey","imageFieldKey","wordFieldKey","sourceFieldKey","urlFieldKey","customAnkiFieldsKey","tagsKey","subtitleSizeKey","subtitleColorKey","subtitleOutlineThicknessKey","subtitleOutlineColorKey","subtitleBackgroundColorKey","subtitleBackgroundOpacityKey","subtitleFontFamilyKey","subtitlePreviewKey","imageBasedSubtitleScaleFactorKey","audioPaddingStartKey","audioPaddingEndKey","maxImageWidthKey","maxImageHeightKey","volumeKey","theaterModeKey","preferMp3Key","themeTypeKey","copyToClipboardOnMineKey","autoPausePreferenceKey","SettingsProvider","_tags","newSettings","localStorage","getItem","removeItem","setItem","_setOptionalItem","ankiFieldsString","tagsString","_getNumberItem","PlayerChannel","closeCallbacks","subtitlesCallbacks","finishedAnkiDialogRequestCallbacks","subtitlesMessage","playModeMessage","hideSubtitlePlayerToggleMessage","appBarToggleMessage","finishedAnkiDialogRequestMessage","playbackRate","overflow","cursorHidden","subtitleContainer","lineHeight","notifyReady","playerChannel","outerWidth","availHeight","outerHeight","resizeTo","selectedTrack","VideoPlayer","poppingInRef","fullscreenElement","setFullscreen","useFullscreen","fullscreenRef","setLength","showSubtitles","setShowSubtitles","setSubtitlesEnabled","setSubtitlePlayerHidden","setAppBarHidden","showSubtitlesRef","showCursor","setShowCursor","lastMouseMovementTimestamp","alert","setAlert","alertOpen","setAlertOpen","returnToFullscreenOnFinishedAnkiDialogRequest","setReturnToFullscreenOnFinishedAnkiDialogRequest","returnToFullscreenOnFinishedAnkiDialogRequestRef","videoRefCallback","videoElement","onloadeddata","ontimeupdate","code","errorMessage","selectAudioTrack","onSubtitles","exitFullscreen","onFinishedAnkiDialogRequest","requestFullscreen","onbeforeunload","equals","arrayEquals","s1","s2","copy","bindToggleSubtitles","bindToggleSubtitleTrackInVideo","extractSubtitles","noSubtitleCallback","subtitleCallback","handleSubtitlesToggle","handleFullscreenToggle","handlePopOutToggle","popOutToggle","handleHideSubtitlePlayerToggle","handleTheaterModeToggle","handleDoubleClick","handleAlertClosed","subtitleStyles","bounds","clientX","clientY","controls","onDoubleClick","isMobile","useContentStyles","contentShift","audioClipFromItem","paddingStart","paddingEnd","fromBase64","subtitleFile","fromFile","audioTrack","imageFromItem","mediaTimestamp","itemSourceString","NavigateToVideo","searchParams","get","to","RenderVideo","Content","App","createTheme","main","red","A400","useLocation","useSearchParams","inVideoPlayer","pathname","drawerRatio","minDrawerSize","copiedSubtitles","setCopiedSubtitles","copiedSubtitlesRef","copyHistoryOpen","setCopyHistoryOpen","setTheaterMode","setVideoPopOut","alertSeverity","setAlertSeverity","setJumpToSubtitle","setRewindSubtitle","setSources","setLoading","setDragging","dragEnterRef","setFileName","ankiDialogOpen","setAnkiDialogOpen","ankiDialogDisabled","setAnkiDialogDisabled","ankiDialogItem","setAnkiDialogItem","ankiDialogItemSliderContext","itemSliderContext","ankiDialogAudioClip","ankiDialogImage","setAnkiDialogRequestToVideo","setAnkiDialogRequested","setAnkiDialogFinishedRequest","settingsDialogOpen","setSettingsDialogOpen","imageDialogOpen","setImageDialogOpen","setDisableKeyEvents","setImage","setTab","setAvailableTabs","fileInputRef","ankiDialogRequestedRef","handleError","handleAnkiDialogRequest","handleAnkiDialogProceed","export","newCopiedSubtitle","last","newCopiedSubtitles","handleOpenCopyHistory","handleCloseCopyHistory","handleAppBarToggle","handleVideoPopOut","handleOpenSettings","handleImageDialogClosed","handleCloseSettings","subtitleSettingsMessage","ankiSettingsMessage","miscSettingsMessage","publishMessage","handleDeleteCopyHistoryItem","previous","clip","handleDownloadCopyHistorySectionAsSrt","deduplicated","toISOString","handleSelectCopyHistoryItem","handleAnki","handleAnkiDialogCancel","handleAnkiDialogRewind","onTabs","t1","t2","subscribeTabs","unsubscribeTabs","handleFiles","extensionStartIndex","extractSources","revokeUrls","handleDirectory","fileSystemEntry","webkitGetAsEntry","isDirectory","fileSystemDirectoryEntry","createReader","readEntries","entries","filePromises","startHeartbeat","syncMessage","File","handleAutoPauseModeChangedViaBind","handleDrop","dataTransfer","allDirectories","handleFileInputChange","handleFileSelector","nonSupSubtitleFiles","filesToSrt","handleDragOver","handleDragEnter","handleDragLeave","nativeEvent","handleSourcesLoaded","nothingLoaded","ThemeProvider","CssBaseline","onDrop","onDragOver","onDragEnter","onDragLeave","path","multiple","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","createRoot","querySelector","render","basename"],"mappings":"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","file":"static/js/main.5df5ed1e.chunk.js","sourcesContent":["import { useLayoutEffect, useState } from 'react';\n\n// https://stackoverflow.com/questions/19014250/rerender-view-on-browser-resize-with-react\nexport function useWindowSize(enabled: boolean) {\n    const [size, setSize] = useState([0, 0]);\n\n    useLayoutEffect(() => {\n        function updateSize() {\n            if (enabled) {\n                setSize([window.innerWidth, window.innerHeight]);\n            }\n        }\n\n        window.addEventListener('resize', updateSize);\n        updateSize();\n\n        return () => window.removeEventListener('resize', updateSize);\n    }, [enabled]);\n\n    return size;\n}\n","export enum KeySequenceTransitionResult {\n    REJECTED = 0,\n    CANCELED = 1,\n    ADVANCED = 2,\n    COMPLETE = 3,\n}\n\nexport interface KeySequenceOptions {\n    up?: string[];\n    holding?: string[];\n    canceledBy?: string[];\n    map?: (event: KeyboardEvent) => any;\n}\n\nexport interface KeySequenceTransition {\n    result: KeySequenceTransitionResult;\n    extra?: any;\n}\n\nexport default class KeySequence {\n    private up: string[];\n    private holding: string[];\n    private canceledBy: string[];\n    private map: (event: KeyboardEvent) => any;\n    private currentlyHolding: { [key: string]: boolean };\n    private canceled: boolean;\n\n    constructor({ up, holding, canceledBy, map }: KeySequenceOptions) {\n        this.up = up || [];\n        this.holding = holding || [];\n        this.canceledBy = canceledBy || [];\n        this.map = map || ((event: KeyboardEvent) => true);\n        this.currentlyHolding = {};\n        this.canceled = false;\n    }\n\n    reset() {\n        this.currentlyHolding = {};\n        this.canceled = false;\n    }\n\n    accept(event: KeyboardEvent): KeySequenceTransition {\n        let result = KeySequenceTransitionResult.REJECTED;\n        let extra = null;\n\n        if (event.type === 'keydown') {\n            const key = event.key.toLowerCase();\n\n            if (this.holding.includes(key)) {\n                this.currentlyHolding[key] = true;\n                this.canceled = false;\n                result = KeySequenceTransitionResult.ADVANCED;\n            }\n\n            if (this.canceledBy.includes(key)) {\n                this.canceled = true;\n                result = KeySequenceTransitionResult.CANCELED;\n            }\n\n            if (this.up.includes(key)) {\n                this.canceled = false;\n                result = KeySequenceTransitionResult.ADVANCED;\n            }\n        }\n\n        if (event.type === 'keyup') {\n            const key = event.key.toLowerCase();\n            delete this.currentlyHolding[key];\n\n            if (this.up.includes(key) && this._holdingAll() && !this.canceled) {\n                extra = this.map(event);\n                result = KeySequenceTransitionResult.COMPLETE;\n            }\n        }\n\n        return { result: result, extra: extra };\n    }\n\n    _holdingAll() {\n        for (const key of this.holding) {\n            if (!(key in this.currentlyHolding)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n","export default class KeyEvents {\n    static detectCopy(event: KeyboardEvent) {\n        // Ctrl + Shift + A\n        return event.ctrlKey && event.shiftKey && event.key.toLowerCase() === 'a';\n    }\n\n    static detectDecreaseOffset(event: KeyboardEvent) {\n        // Ctrl + Shift + Right\n        return event.ctrlKey && event.shiftKey && event.key === 'ArrowRight';\n    }\n\n    static detectAnkiExport(event: KeyboardEvent) {\n        // Ctrl + Shift + Q\n        return event.ctrlKey && event.shiftKey && event.key.toLowerCase() === 'q';\n    }\n\n    static detectUpdateLastCard(event: KeyboardEvent) {\n        // Ctrl + Shift + Y\n        return event.ctrlKey && event.shiftKey && event.key.toLowerCase() === 'y';\n    }\n\n    static detectIncreaseOffset(event: KeyboardEvent) {\n        // Ctrl + Shift + Left\n        return event.ctrlKey && event.shiftKey && event.key === 'ArrowLeft';\n    }\n\n    static detectDecreaseOffsetToNextSubtitle(event: KeyboardEvent) {\n        // Ctrl + Right\n        return (\n            !KeyEvents.detectDecreaseOffset(event) && (event.ctrlKey || event.shiftKey) && event.key === 'ArrowRight'\n        );\n    }\n\n    static detectIncreaseOffsetToPreviousSubtitle(event: KeyboardEvent) {\n        // Ctrl + Left\n        return !KeyEvents.detectIncreaseOffset(event) && (event.ctrlKey || event.shiftKey) && event.key === 'ArrowLeft';\n    }\n\n    static detectPreviousSubtitle(event: KeyboardEvent) {\n        // Left\n        return (\n            !KeyEvents.detectIncreaseOffset(event) &&\n            !KeyEvents.detectIncreaseOffsetToPreviousSubtitle(event) &&\n            event.key === 'ArrowLeft'\n        );\n    }\n\n    static detectNextSubtitle(event: KeyboardEvent) {\n        // Right\n        return (\n            !KeyEvents.detectDecreaseOffset(event) &&\n            !KeyEvents.detectDecreaseOffsetToNextSubtitle(event) &&\n            event.key === 'ArrowRight'\n        );\n    }\n\n    static detectCurrentSubtitle(event: KeyboardEvent) {\n        // Down\n        return event.key === 'ArrowDown';\n    }\n\n    static detectSeekBackward(event: KeyboardEvent) {\n        // A\n        return !KeyEvents.detectCopy(event) && event.key.toLowerCase() === 'a';\n    }\n\n    static detectSeekForward(event: KeyboardEvent) {\n        // D\n        return event.key.toLowerCase() === 'd';\n    }\n\n    static detectPlay(event: KeyboardEvent) {\n        // Space\n        return event.key === ' ';\n    }\n\n    static detectAutoPause(event: KeyboardEvent) {\n        // Shift + P\n        return event.shiftKey && event.key.toLowerCase() === 'p';\n    }\n}\n","import KeySequence from './KeySequence';\n\nexport default class KeySequences {\n    static toggleSubtitles() {\n        // Up S, canceled by 1...9\n        return new KeySequence({ up: ['s'], canceledBy: ['1', '2', '3', '4', '5', '6', '7', '8', '9'] });\n    }\n\n    static toggleSubtitleTrack() {\n        // Holding S, up 1...9\n        return new KeySequence({\n            holding: ['s'],\n            up: ['1', '2', '3', '4', '5', '6', '7', '8', '9'],\n            map: (event) => Number(event.key) - 1,\n        });\n    }\n\n    static toggleSubtitleTrackInList() {\n        // Holding W, up 1...9\n        return new KeySequence({\n            holding: ['w'],\n            up: ['1', '2', '3', '4', '5', '6', '7', '8', '9'],\n            map: (event) => Number(event.key) - 1,\n        });\n    }\n\n    static togglePlay() {\n        // Space\n        return new KeySequence({\n            up: [' '],\n            canceledBy: ['a', 'd'],\n        });\n    }\n}\n","import { SubtitleModel } from './Model';\nimport KeyEvents from './KeyEvents';\nimport { KeySequenceTransitionResult } from './KeySequence';\nimport KeySequences from './KeySequences';\n\nexport default class KeyBindings {\n    static bindCopy<T extends SubtitleModel = SubtitleModel>(\n        onCopy: (event: KeyboardEvent, subtitle: T) => void,\n        disabledGetter: () => boolean,\n        subtitleGetter: () => T | undefined,\n        useCapture = false\n    ) {\n        return KeyBindings._bindDown((event) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            if (!KeyEvents.detectCopy(event)) {\n                return;\n            }\n\n            const subtitle = subtitleGetter();\n\n            if (!subtitle) {\n                return;\n            }\n\n            onCopy(event, subtitle);\n        }, useCapture);\n    }\n\n    static bindAnkiExport(\n        onAnkiExport: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture = false\n    ) {\n        return KeyBindings._bindDown((event) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            if (!KeyEvents.detectAnkiExport(event)) {\n                return;\n            }\n\n            onAnkiExport(event);\n        }, useCapture);\n    }\n\n    static bindUpdateLastCard(\n        onUpdateLastCard: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture = false\n    ) {\n        return KeyBindings._bindDown((event) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            if (!KeyEvents.detectUpdateLastCard(event)) {\n                return;\n            }\n\n            onUpdateLastCard(event);\n        }, useCapture);\n    }\n\n    static bindSeekToSubtitle(\n        onSeekToSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture = false\n    ) {\n        return KeyBindings._bindDown((event) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            const subtitles = subtitlesGetter();\n\n            if (!subtitles || subtitles.length === 0) {\n                return;\n            }\n\n            let forward;\n\n            if (KeyEvents.detectPreviousSubtitle(event)) {\n                forward = false;\n            } else if (KeyEvents.detectNextSubtitle(event)) {\n                forward = true;\n            } else {\n                return;\n            }\n\n            const subtitle = KeyBindings._adjacentSubtitle(forward, timeGetter(), subtitles);\n\n            if (subtitle !== null && subtitle.start >= 0 && subtitle.end >= 0) {\n                onSeekToSubtitle(event, subtitle);\n            }\n        }, useCapture);\n    }\n\n    static bindSeekToBeginningOfCurrentSubtitle(\n        onSeekToBeginningOfCurrentSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture = false\n    ) {\n        return KeyBindings._bindDown((event) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            if (!KeyEvents.detectCurrentSubtitle(event)) {\n                return;\n            }\n\n            const subtitles = subtitlesGetter();\n\n            if (!subtitles || subtitles.length === 0) {\n                return;\n            }\n\n            const subtitle = KeyBindings._currentSubtitle(timeGetter(), subtitles);\n\n            if (subtitle !== undefined && subtitle.start >= 0 && subtitle.end >= 0) {\n                onSeekToBeginningOfCurrentSubtitle(event, subtitle);\n            }\n        }, useCapture);\n    }\n\n    static _currentSubtitle(time: number, subtitles: SubtitleModel[]) {\n        const now = time;\n        let currentSubtitle: SubtitleModel | undefined;\n        let minDiff = Number.MAX_SAFE_INTEGER;\n\n        for (let i = 0; i < subtitles.length; ++i) {\n            const s = subtitles[i];\n\n            if (s.start < 0 || s.end < 0) {\n                continue;\n            }\n\n            const diff = now - s.start;\n\n            if (now >= s.start && now < s.end) {\n                if (diff < minDiff) {\n                    currentSubtitle = s;\n                    minDiff = diff;\n                }\n            }\n        }\n\n        return currentSubtitle;\n    }\n\n    static bindSeekBackwardOrForward(\n        onSeekBackwardOrForward: (event: KeyboardEvent, forward: boolean) => void,\n        disabledGetter: () => boolean,\n        useCapture = false\n    ) {\n        return KeyBindings._bindDown((event) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            let forward: boolean;\n\n            if (KeyEvents.detectSeekBackward(event)) {\n                forward = false;\n            } else if (KeyEvents.detectSeekForward(event)) {\n                forward = true;\n            } else {\n                return;\n            }\n\n            onSeekBackwardOrForward(event, forward);\n        }, useCapture);\n    }\n\n    static bindOffsetToSubtitle(\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture = false\n    ) {\n        return KeyBindings._bindDown((event) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            const subtitles = subtitlesGetter();\n\n            if (!subtitles || subtitles.length === 0) {\n                return;\n            }\n\n            let forward;\n\n            if (KeyEvents.detectIncreaseOffsetToPreviousSubtitle(event)) {\n                forward = false;\n            } else if (KeyEvents.detectDecreaseOffsetToNextSubtitle(event)) {\n                forward = true;\n            } else {\n                return;\n            }\n\n            const time = timeGetter();\n            const subtitle = KeyBindings._adjacentSubtitle(forward, time, subtitles);\n\n            if (subtitle !== null) {\n                const subtitleStart = subtitle.originalStart;\n                const newOffset = time - subtitleStart;\n                onOffsetChange(event, newOffset);\n            }\n        }, useCapture);\n    }\n\n    static _adjacentSubtitle(forward: boolean, time: number, subtitles: SubtitleModel[]) {\n        const now = time;\n        let adjacentSubtitleIndex = -1;\n        let minDiff = Number.MAX_SAFE_INTEGER;\n\n        for (let i = 0; i < subtitles.length; ++i) {\n            const s = subtitles[i];\n            const diff = forward ? s.start - now : now - s.start;\n\n            if (minDiff <= diff) {\n                continue;\n            }\n\n            if (forward && now < s.start) {\n                minDiff = diff;\n                adjacentSubtitleIndex = i;\n            } else if (!forward && now > s.start) {\n                minDiff = diff;\n                adjacentSubtitleIndex = now < s.end ? Math.max(0, i - 1) : i;\n            }\n        }\n\n        if (adjacentSubtitleIndex !== -1) {\n            return subtitles[adjacentSubtitleIndex];\n        }\n\n        return null;\n    }\n\n    static bindAdjustOffset(\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\n        disabledGetter: () => boolean,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture = false\n    ) {\n        return KeyBindings._bindDown((event) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            const subtitles = subtitlesGetter();\n\n            if (!subtitles || subtitles.length === 0) {\n                return;\n            }\n\n            let increase;\n\n            if (KeyEvents.detectDecreaseOffset(event)) {\n                increase = false;\n            } else if (KeyEvents.detectIncreaseOffset(event)) {\n                increase = true;\n            } else {\n                return;\n            }\n\n            const currentOffset = subtitles[0].start - subtitles[0].originalStart;\n            const newOffset = currentOffset + (increase ? 100 : -100);\n            onOffsetChange(event, newOffset);\n        }, useCapture);\n    }\n\n    static bindToggleSubtitles(\n        onToggleSubtitles: (event: KeyboardEvent) => void,\n        onSequenceAdvanced: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture = false\n    ) {\n        const sequence = KeySequences.toggleSubtitles();\n        const handler = (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                sequence.reset();\n                return;\n            }\n\n            const transition = sequence.accept(event);\n\n            if (transition.result === KeySequenceTransitionResult.ADVANCED) {\n                onSequenceAdvanced(event);\n            } else if (transition.result === KeySequenceTransitionResult.COMPLETE) {\n                onToggleSubtitles(event);\n            }\n        };\n        const unbindDown = KeyBindings._bindDown(handler, useCapture);\n        const unbindUp = KeyBindings._bindUp(handler, useCapture);\n\n        return () => {\n            unbindDown();\n            unbindUp();\n        };\n    }\n\n    static bindToggleSubtitleTrackInVideo(\n        onToggleSubtitleTrack: (event: KeyboardEvent, extra: any) => void,\n        onSequenceAdvanced: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture = false\n    ) {\n        const sequence = KeySequences.toggleSubtitleTrack();\n        const handler = (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                sequence.reset();\n                return;\n            }\n\n            const transition = sequence.accept(event);\n\n            if (transition.result === KeySequenceTransitionResult.ADVANCED) {\n                onSequenceAdvanced(event);\n            } else if (transition.result === KeySequenceTransitionResult.COMPLETE) {\n                onToggleSubtitleTrack(event, transition.extra);\n            }\n        };\n        const unbindDown = KeyBindings._bindDown(handler, useCapture);\n        const unbindUp = KeyBindings._bindUp(handler, useCapture);\n\n        return () => {\n            unbindDown();\n            unbindUp();\n        };\n    }\n\n    static bindToggleSubtitleTrackInList(\n        onToggleSubtitleTrackInList: (event: KeyboardEvent, extra: any) => void,\n        onSequenceAdvanced: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture = false\n    ) {\n        const sequence = KeySequences.toggleSubtitleTrackInList();\n        const handler = (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                sequence.reset();\n                return;\n            }\n\n            const transition = sequence.accept(event);\n\n            if (transition.result === KeySequenceTransitionResult.ADVANCED) {\n                onSequenceAdvanced(event);\n            } else if (transition.result === KeySequenceTransitionResult.COMPLETE) {\n                onToggleSubtitleTrackInList(event, transition.extra);\n            }\n        };\n        const unbindDown = KeyBindings._bindDown(handler, useCapture);\n        const unbindUp = KeyBindings._bindUp(handler, useCapture);\n\n        return () => {\n            unbindDown();\n            unbindUp();\n        };\n    }\n\n    static bindPlay(onPlay: (event: KeyboardEvent) => void, disabledGetter: () => boolean, useCapture = false) {\n        return KeyBindings._bindDown((event) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            if (!KeyEvents.detectPlay(event)) {\n                return;\n            }\n\n            onPlay(event);\n        }, useCapture);\n    }\n\n    static bindAutoPause(\n        onAutoPause: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture = false\n    ) {\n        return KeyBindings._bindDown((event) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            if (!KeyEvents.detectAutoPause(event)) {\n                return;\n            }\n\n            onAutoPause(event);\n        }, useCapture);\n    }\n\n    static _bindDown(handler: (event: KeyboardEvent) => void, useCapture: boolean) {\n        window.addEventListener('keydown', handler, useCapture);\n\n        return () => window.removeEventListener('keydown', handler, useCapture);\n    }\n\n    static _bindUp(handler: (event: KeyboardEvent) => void, useCapture: boolean) {\n        window.addEventListener('keyup', handler, useCapture);\n\n        return () => window.removeEventListener('keyup', handler, useCapture);\n    }\n}\n","export default class Mp3Encoder {\n    static async encode(blob: Blob, workerFactory: () => Worker): Promise<Blob> {\n        return new Promise(async (resolve, reject) => {\n            var reader = new FileReader();\n            reader.onload = async (e) => {\n                try {\n                    const audioContext = new AudioContext();\n\n                    if (e.target === null) {\n                        reject(new Error(\"Could not obtain buffer to encode\"));\n                        return;\n                    }\n\n                    const audioBuffer = await audioContext.decodeAudioData(e.target.result as ArrayBuffer);\n                    const channels = [];\n\n                    for (let i = 0; i < audioBuffer.numberOfChannels; ++i) {\n                        channels.push(audioBuffer.getChannelData(i));\n                    }\n\n                    const worker = workerFactory();\n                    worker.postMessage({\n                        command: 'encode',\n                        audioBuffer: {\n                            channels: channels,\n                            numberOfChannels: audioBuffer.numberOfChannels,\n                            length: audioBuffer.length,\n                            sampleRate: audioBuffer.sampleRate,\n                        },\n                    });\n                    worker.onmessage = (e) => {\n                        resolve(new Blob(e.data.buffer, { type: 'audio/mp3' }));\n                        worker.terminate();\n                    };\n                    worker.onerror = (e) => {\n                        const error = e?.error ?? new Error('MP3 encoding failed: ' + e?.message);\n                        reject(error);\n                        worker.terminate();\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            };\n            reader.readAsArrayBuffer(blob);\n        });\n    }\n}\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/mp3-encoder.7f842300.worker.js\");\n}\n","import sanitize from 'sanitize-filename';\nimport { SubtitleModel } from './Model';\n\nexport function humanReadableTime(timestamp: number, nearestTenth = false): string {\n    const totalSeconds = Math.floor(timestamp / 1000);\n    let seconds;\n\n    if (nearestTenth) {\n        seconds = Math.round(((timestamp / 1000) % 60) * 10) / 10;\n    } else {\n        seconds = totalSeconds % 60;\n    }\n\n    const minutes = Math.floor(totalSeconds / 60) % 60;\n    const hours = Math.floor(totalSeconds / 3600);\n\n    if (hours > 0) {\n        return hours + 'h' + String(minutes).padStart(2, '0') + 'm' + String(seconds).padStart(2, '0') + 's';\n    }\n\n    return minutes + 'm' + String(seconds).padStart(2, '0') + 's';\n}\n\nexport function surroundingSubtitles(\n    subtitles: SubtitleModel[],\n    index: number,\n    countRadius: number,\n    timeRadius: number\n): SubtitleModel[] {\n    let startIndex = index;\n\n    for (let i = index; i >= 0; --i) {\n        startIndex = i;\n\n        if (atBoundary(subtitles, startIndex, index, countRadius, timeRadius, false)) {\n            break;\n        }\n    }\n\n    let endIndex = startIndex;\n\n    for (let i = index; i <= subtitles.length - 1; ++i) {\n        endIndex = i;\n\n        if (atBoundary(subtitles, endIndex, index, countRadius, timeRadius, true)) {\n            break;\n        }\n    }\n\n    return subtitles.slice(startIndex, endIndex + 1);\n}\n\nexport function mockSurroundingSubtitles(\n    middleSubtitle: SubtitleModel,\n    maxTimestamp: number,\n    timeRadius: number\n): SubtitleModel[] {\n    const subtitles = [middleSubtitle];\n    const offset = middleSubtitle.start - middleSubtitle.originalStart;\n\n    if (middleSubtitle.end < maxTimestamp) {\n        const afterTimestamp = Math.min(maxTimestamp, middleSubtitle.end + timeRadius);\n        subtitles.push({\n            text: '',\n            start: middleSubtitle.end,\n            end: afterTimestamp,\n            originalStart: middleSubtitle.end - offset,\n            originalEnd: afterTimestamp - offset,\n            track: middleSubtitle.track,\n        });\n    }\n\n    if (middleSubtitle.start > 0) {\n        const beforeTimestamp = Math.max(0, middleSubtitle.start - timeRadius);\n        subtitles.unshift({\n            text: '',\n            start: beforeTimestamp,\n            end: middleSubtitle.start,\n            originalStart: beforeTimestamp - offset,\n            originalEnd: middleSubtitle.start - offset,\n            track: middleSubtitle.track,\n        });\n    }\n\n    return subtitles;\n}\n\nfunction atBoundary(\n    subtitles: SubtitleModel[],\n    index: number,\n    initialIndex: number,\n    countRadius: number,\n    timeRadius: number,\n    sign: boolean\n): boolean {\n    let next;\n\n    if (sign) {\n        next = index + 1 < subtitles.length ? subtitles[index + 1] : null;\n    } else {\n        next = index - 1 >= 0 ? subtitles[index - 1] : null;\n    }\n\n    if (\n        Math.abs(initialIndex - index) >= countRadius &&\n        (next === null || Math.abs(next.start - subtitles[initialIndex].start) >= timeRadius)\n    ) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function download(blob: Blob, name: string) {\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    document.body.appendChild(a);\n    a.style.display = 'none';\n    a.href = url;\n    a.download = sanitize(name);\n    a.click();\n    URL.revokeObjectURL(url);\n    a.remove();\n}\n","import Mp3Encoder from './Mp3Encoder';\n// eslint-disable-next-line\n// @ts-ignore\nimport Worker from 'worker-loader!./mp3-encoder.js';\nimport { download } from './Util';\nconst defaultMp3WorkerFactory = () => new Worker();\n\ninterface ExperimentalAudioElement extends HTMLAudioElement {\n    audioTracks: any;\n    captureStream?: () => MediaStream;\n    mozCaptureStream?: () => MediaStream;\n}\n\ninterface AudioData {\n    name: string;\n    extension: string;\n    play: () => Promise<void>;\n    blob: () => Promise<Blob>;\n    base64: () => Promise<string>;\n    slice: (start: number, end: number) => AudioData;\n    isSliceable: (start: number, end: number) => boolean;\n}\n\nclass Base64AudioData implements AudioData {\n    private readonly _name: string;\n    private readonly start: number;\n    private readonly end: number;\n    private readonly _base64: string;\n    private readonly _extension: string;\n\n    private cachedBlob?: Blob;\n\n    constructor(baseName: string, start: number, end: number, base64: string, extension: string) {\n        this._name = baseName + '_' + Math.floor(start) + '_' + Math.floor(end);\n        this.start = start;\n        this.end = end;\n        this._base64 = base64;\n        this._extension = extension;\n    }\n\n    get name(): string {\n        return this._name;\n    }\n\n    get extension(): string {\n        return this._extension;\n    }\n\n    async base64() {\n        return this._base64;\n    }\n\n    async blob() {\n        return await this._blob();\n    }\n\n    async play(): Promise<void> {\n        const blob = await this._blob();\n        const audio = new Audio();\n        audio.src = URL.createObjectURL(blob);\n        audio.preload = 'none';\n        audio.load();\n\n        await audio.play();\n\n        return new Promise((resolve, reject) => {\n            setTimeout(() => {\n                audio.pause();\n                const src = audio.src;\n                audio.src = '';\n                URL.revokeObjectURL(src);\n                resolve(undefined);\n            }, this.end - this.start + 1000);\n        });\n    }\n\n    async _blob() {\n        if (!this.cachedBlob) {\n            this.cachedBlob = await (await fetch('data:audio/' + this.extension + ';base64,' + this._base64)).blob();\n        }\n\n        return this.cachedBlob;\n    }\n\n    slice(start: number, end: number): AudioData {\n        // Not supported\n        return this;\n    }\n\n    isSliceable(start: number, end: number) {\n        return false;\n    }\n}\n\nclass FileAudioData implements AudioData {\n    private readonly file: File;\n    private readonly _name: string;\n    private readonly start: number;\n    private readonly end: number;\n    private readonly trackId?: string;\n    private readonly _extension: string;\n    private readonly recorderMimeType: string;\n\n    private _blob?: Blob;\n\n    constructor(file: File, start: number, end: number, trackId?: string) {\n        const [recorderMimeType, recorderExtension] = FileAudioData._recorderConfiguration();\n        this.recorderMimeType = recorderMimeType;\n        this.file = file;\n        this._name = file.name + '_' + start + '_' + end;\n        this.start = start;\n        this.end = end;\n        this.trackId = trackId;\n        this._extension = recorderExtension;\n    }\n\n    private static _recorderConfiguration() {\n        const AUDIO_TYPES: { [key: string]: string } = {\n            'audio/ogg;codecs=opus': 'ogg',\n            'audio/webm;codecs=opus': 'webm',\n        };\n        return Object.keys(AUDIO_TYPES)\n            .filter(MediaRecorder.isTypeSupported)\n            .map((t) => [t as string, AUDIO_TYPES[t] as string])[0];\n    }\n\n    get name(): string {\n        return this._name;\n    }\n\n    get extension(): string {\n        return this._extension;\n    }\n\n    async base64() {\n        return new Promise<string>(async (resolve, reject) => {\n            var reader = new FileReader();\n            reader.readAsDataURL(await this.blob());\n            reader.onloadend = () => {\n                const result = reader.result as string;\n                const base64 = result.substring(result.indexOf(',') + 1);\n                resolve(base64);\n            };\n        });\n    }\n\n    async play() {\n        if (!this._blob) {\n            this._blob = await this._clipAudio();\n            return;\n        }\n\n        const audio = await this._audioElement(this._blob, false);\n        audio.currentTime = 0;\n        await audio.play();\n        await this._stopAudio(audio);\n    }\n\n    async blob() {\n        if (!this._blob) {\n            this._blob = await this._clipAudio();\n        }\n\n        return this._blob;\n    }\n\n    async _clipAudio(): Promise<Blob> {\n        return new Promise(async (resolve, reject) => {\n            const audio = await this._audioElement(this.file, true);\n\n            audio.oncanplay = async (e) => {\n                audio.play();\n                const stream = this._captureStream(audio);\n                const recorder = new MediaRecorder(stream, { mimeType: this.recorderMimeType });\n                const chunks: BlobPart[] = [];\n\n                recorder.ondataavailable = (e) => {\n                    chunks.push(e.data);\n                };\n\n                recorder.onstop = (e) => {\n                    resolve(new Blob(chunks, { type: this.recorderMimeType }));\n                };\n\n                recorder.start();\n                await this._stopAudio(audio);\n                recorder.stop();\n                for (const track of stream.getAudioTracks()) {\n                    track.stop();\n                }\n            };\n        });\n    }\n\n    _audioElement(source: Blob, selectTrack: boolean): Promise<ExperimentalAudioElement> {\n        const audio = new Audio() as ExperimentalAudioElement;\n        audio.src = URL.createObjectURL(source);\n\n        return new Promise((resolve, reject) => {\n            audio.onloadedmetadata = (e) => {\n                if (selectTrack && this.trackId && audio.audioTracks && audio.audioTracks.length > 0) {\n                    // @ts-ignore\n                    for (const t of audio.audioTracks) {\n                        t.enabled = this.trackId === t.id;\n                    }\n                }\n\n                audio.currentTime = this.start / 1000;\n                resolve(audio);\n            };\n        });\n    }\n\n    _captureStream(audio: ExperimentalAudioElement) {\n        let stream: MediaStream | undefined;\n\n        if (typeof audio.captureStream === 'function') {\n            stream = audio.captureStream();\n        }\n\n        if (typeof audio.mozCaptureStream === 'function') {\n            stream = audio.mozCaptureStream();\n        }\n\n        if (stream === undefined) {\n            throw new Error('Unable to capture stream from audio');\n        }\n\n        const audioStream = new MediaStream();\n\n        for (const track of stream.getVideoTracks()) {\n            track.stop();\n        }\n\n        for (const track of stream.getAudioTracks()) {\n            if (track.enabled) {\n                audioStream.addTrack(track);\n            }\n        }\n\n        return audioStream;\n    }\n\n    async _stopAudio(audio: ExperimentalAudioElement): Promise<void> {\n        return new Promise((resolve, reject) => {\n            setTimeout(() => {\n                audio.pause();\n                const src = audio.src;\n                audio.src = '';\n                URL.revokeObjectURL(src);\n                resolve(undefined);\n            }, this.end - this.start + 100);\n        });\n    }\n\n    slice(start: number, end: number) {\n        return new FileAudioData(this.file, start, end, this.trackId);\n    }\n\n    isSliceable(start: number, end: number) {\n        return true;\n    }\n}\n\nclass Mp3AudioData implements AudioData {\n    private readonly data: AudioData;\n    private readonly workerFactory: () => Worker;\n    private _blob?: Blob;\n\n    constructor(data: AudioData, workerFactory: () => Worker) {\n        this.data = data;\n        this.workerFactory = workerFactory;\n    }\n\n    get name() {\n        return this.data.name;\n    }\n\n    get extension() {\n        return 'mp3';\n    }\n\n    async base64() {\n        return new Promise<string>(async (resolve, reject) => {\n            try {\n                var reader = new FileReader();\n                reader.readAsDataURL(await this.blob());\n                reader.onloadend = () => {\n                    const result = reader.result as string;\n                    const base64 = result.substring(result.indexOf(',') + 1);\n                    resolve(base64);\n                };\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    async play() {\n        await this.data.play();\n    }\n\n    async blob() {\n        if (!this._blob) {\n            this._blob = await Mp3Encoder.encode(await this.data.blob(), this.workerFactory);\n        }\n\n        return this._blob;\n    }\n\n    slice(start: number, end: number) {\n        return new Mp3AudioData(this.data.slice(start, end), this.workerFactory);\n    }\n\n    isSliceable(start: number, end: number) {\n        return this.data.isSliceable(start, end);\n    }\n}\n\nexport default class AudioClip {\n    private readonly data: AudioData;\n\n    constructor(data: AudioData) {\n        this.data = data;\n    }\n\n    static fromBase64(subtitleFileName: string, start: number, end: number, base64: string, extension: string) {\n        return new AudioClip(\n            new Base64AudioData(\n                subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')),\n                start,\n                end,\n                base64,\n                extension\n            )\n        );\n    }\n\n    static fromFile(file: File, start: number, end: number, trackId?: string) {\n        return new AudioClip(new FileAudioData(file, start, end, trackId));\n    }\n\n    get name() {\n        return this.data.name + '.' + this.data.extension;\n    }\n\n    async play() {\n        await this.data.play();\n    }\n\n    async base64() {\n        return await this.data.base64();\n    }\n\n    async download() {\n        const blob = await this.data.blob();\n        download(blob, this.name);\n    }\n\n    toMp3(mp3WorkerFactory = defaultMp3WorkerFactory) {\n        if (this.data instanceof Mp3AudioData) {\n            return this;\n        }\n\n        if (this.data.extension === 'mp3') {\n            return this;\n        }\n\n        return new AudioClip(new Mp3AudioData(this.data, mp3WorkerFactory));\n    }\n\n    slice(start: number, end: number) {\n        return new AudioClip(this.data.slice(start, end));\n    }\n\n    isSliceable(start: number, end: number) {\n        return this.data.isSliceable(start, end);\n    }\n}\n","import { AnkiSettings } from './Settings';\n\nexport interface RectModel {\n    readonly left: number;\n    readonly top: number;\n    readonly width: number;\n    readonly height: number;\n}\n\nexport interface DimensionsModel {\n    readonly width: number;\n    readonly height: number;\n}\n\nexport interface SubtitleTextImage {\n    readonly dataUrl: string;\n    readonly screen: DimensionsModel;\n    readonly image: DimensionsModel;\n}\n\nexport interface SubtitleModel {\n    readonly text: string;\n    readonly textImage?: SubtitleTextImage;\n    readonly start: number;\n    readonly end: number;\n    readonly originalStart: number;\n    readonly originalEnd: number;\n    readonly track: number;\n}\n\nexport interface CopiedSubtitleModel extends SubtitleModel {\n    surroundingSubtitles: SubtitleModel[];\n    timestamp: number;\n    id: string;\n    name: string;\n    subtitleFile?: File;\n    audioFile?: File;\n    videoFile?: File;\n    audioTrack?: number;\n    audio?: AudioModel;\n    image?: ImageModel;\n}\n\nexport interface ImageModel {\n    readonly base64: string;\n    readonly extension: 'jpeg';\n}\n\nexport interface AudioModel {\n    readonly base64: string;\n    readonly extension: 'webm' | 'mp3';\n    readonly paddingStart: number;\n    readonly paddingEnd: number;\n    readonly start?: number;\n    readonly end?: number;\n}\n\nexport interface AnkiDialogSliderContext {\n    subtitleStart: number;\n    subtitleEnd: number;\n    subtitles: SubtitleModel[];\n}\n\nexport interface AnkiUiState {\n    readonly type: 'initial' | 'resume';\n    readonly open: boolean;\n    readonly settingsProvider: AnkiSettings;\n    readonly subtitle: SubtitleModel;\n    readonly url: string;\n    readonly source: string;\n    readonly image?: ImageModel;\n    readonly audio?: AudioModel;\n    readonly themeType: string;\n    readonly dialogRequestedTimestamp: number;\n}\n\nexport interface AnkiUiInitialState extends AnkiUiState {\n    readonly type: 'initial';\n    readonly surroundingSubtitles: SubtitleModel[];\n}\n\nexport interface AnkiUiResumeState extends AnkiUiState {\n    readonly type: 'resume';\n\n    readonly text: string;\n    readonly initialTimestampInterval: number[];\n    readonly timestampInterval: number[];\n    readonly sliderContext: AnkiDialogSliderContext;\n    readonly definition: string;\n    readonly word: string;\n    readonly customFieldValues: { [key: string]: string };\n    readonly lastAppliedTimestampIntervalToText: number[];\n    readonly lastAppliedTimestampIntervalToAudio?: number[];\n}\n\nexport interface AnkiUiSavedState {\n    subtitle: SubtitleModel;\n    text: string;\n    sliderContext: AnkiDialogSliderContext;\n    definition: string;\n    image?: ImageModel;\n    audio?: AudioModel;\n    word: string;\n    source: string;\n    url: string;\n    customFieldValues: { [key: string]: string };\n    timestampInterval: number[];\n    initialTimestampInterval: number[];\n    lastAppliedTimestampIntervalToText: number[];\n    lastAppliedTimestampIntervalToAudio?: number[];\n    dialogRequestedTimestamp: number;\n}\n\nexport interface VideoDataSubtitleTrack {\n    label: string;\n    language: string;\n    url: string;\n}\n\nexport interface ConfirmedVideoDataSubtitleTrack {\n    name: string;\n    language: string;\n    subtitleUrl: string;\n}\n\nexport interface VideoData {\n    basename: string;\n    error?: string;\n    subtitles: VideoDataSubtitleTrack[];\n    extension: string;\n}\n\nexport interface VideoDataUiState {\n    open?: boolean;\n    isLoading?: boolean;\n    suggestedName?: string;\n    subtitles?: VideoDataSubtitleTrack[];\n    error?: string;\n    themeType?: string;\n    selectedSubtitle?: string;\n    showSubSelect?: boolean;\n}\n\nexport interface VideoTabModel {\n    id: number; // Actually the tab ID\n    title?: string;\n    src: string; // Video src\n}\n\nexport interface Rgb {\n    r: number;\n    g: number;\n    b: number;\n}\n\nexport interface AudioTrackModel {\n    id: string;\n    label: string;\n    language: string;\n}\n\nexport enum PostMineAction {\n    none = 0,\n    showAnkiDialog = 1,\n    updateLastCard = 2,\n}\n\nexport enum AutoPausePreference {\n    atStart = 1,\n    atEnd = 2,\n}\n\nexport enum PlayMode {\n    normal = 1,\n    condensed = 2,\n    autoPause = 3,\n}\n","export default class CanvasResizer {\n    resize(\n        canvas: HTMLCanvasElement,\n        ctx: CanvasRenderingContext2D,\n        maxWidth: number,\n        maxHeight: number\n    ): Promise<HTMLCanvasElement> {\n        return new Promise((resolve, reject) => {\n            const widthRatio = maxWidth <= 0 ? 1 : maxWidth / canvas.width;\n            const heightRatio = maxHeight <= 0 ? 1 : maxHeight / canvas.height;\n            const ratio = Math.min(1, Math.min(widthRatio, heightRatio));\n\n            if (ratio < 1) {\n                const newWidth = canvas.width * ratio;\n                const newHeight = canvas.height * ratio;\n                createImageBitmap(canvas, { resizeWidth: newWidth, resizeHeight: newHeight })\n                    .then((sprite) => {\n                        canvas.width = newWidth;\n                        canvas.height = newHeight;\n                        ctx.drawImage(sprite, 0, 0);\n                        resolve(canvas);\n                    })\n                    .catch((e) => reject(e));\n            } else {\n                resolve(canvas);\n            }\n        });\n    }\n}\n","import { resolveConfig } from 'prettier';\nimport sanitize from 'sanitize-filename';\nimport CanvasResizer from './CanvasResizer';\nimport { download } from './Util';\n\nclass Base64ImageData implements ImageData {\n    private readonly _name: string;\n    private readonly _base64: string;\n    private readonly _extension: string;\n\n    private cachedBlob?: Blob;\n\n    constructor(name: string, base64: string, extension: string) {\n        this._name = name;\n        this._base64 = base64;\n        this._extension = extension;\n    }\n\n    get name() {\n        return this._name;\n    }\n\n    get extension() {\n        return this._extension;\n    }\n\n    async base64() {\n        return this._base64;\n    }\n\n    async blob() {\n        return await this._blob();\n    }\n\n    async _blob() {\n        if (!this.cachedBlob) {\n            this.cachedBlob = await (await fetch(this._dataUrl())).blob();\n        }\n\n        return this.cachedBlob;\n    }\n\n    async dataUrl() {\n        return this._dataUrl();\n    }\n\n    _dataUrl() {\n        return 'data:image/' + this.extension + ';base64,' + this._base64;\n    }\n}\n\nclass FileImageData implements ImageData {\n    private readonly file: File;\n    private readonly timestamp: number;\n    private readonly maxWidth: number;\n    private readonly maxHeight: number;\n    private readonly _name: string;\n\n    constructor(file: File, timestamp: number, maxWidth: number, maxHeight: number) {\n        this.file = file;\n        this._name = file.name + '_' + Math.floor(timestamp) + '.jpeg';\n        this.timestamp = timestamp;\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n    }\n\n    get name() {\n        return this._name;\n    }\n\n    get extension() {\n        return 'jpeg';\n    }\n\n    async base64(): Promise<string> {\n        return new Promise(async (resolve, reject) => {\n            const canvas = await this._canvas();\n            const dataUrl = canvas.toDataURL('image/jpeg');\n            resolve(dataUrl.substring(dataUrl.indexOf(',') + 1));\n        });\n    }\n\n    async blob(): Promise<Blob> {\n        return new Promise(async (resolve, reject) => {\n            const canvas = await this._canvas();\n            canvas.toBlob((blob) => {\n                if (blob === null) {\n                    reject(new Error('Could not obtain blob'));\n                } else {\n                    resolve(blob);\n                }\n            }, 'image/jpeg');\n        });\n    }\n\n    async dataUrl() {\n        const canvas = await this._canvas();\n        return canvas.toDataURL();\n    }\n\n    async _canvas(): Promise<HTMLCanvasElement> {\n        return new Promise(async (resolve, reject) => {\n            const video = this._videoElement(this.file);\n\n            video.oncanplay = async (e) => {\n                const canvas = document.createElement('canvas');\n                canvas.width = video.videoWidth;\n                canvas.height = video.videoHeight;\n                const ctx = canvas.getContext('2d');\n                ctx!.drawImage(video, 0, 0, canvas.width, canvas.height);\n                if (this.maxWidth > 0 || this.maxHeight > 0) {\n                    const resizer = new CanvasResizer();\n                    await resizer.resize(canvas, ctx!, this.maxWidth, this.maxHeight);\n                    resolve(canvas);\n                } else {\n                    resolve(canvas);\n                }\n                URL.revokeObjectURL(video.src);\n            };\n        });\n    }\n\n    _videoElement(source: File) {\n        const video = document.createElement('video');\n        video.src = URL.createObjectURL(source);\n        video.preload = 'none';\n        video.currentTime = this.timestamp / 1000;\n        video.load();\n\n        return video;\n    }\n}\n\ninterface ImageData {\n    name: string;\n    extension: string;\n    base64: () => Promise<string>;\n    dataUrl: () => Promise<string>;\n    blob: () => Promise<Blob>;\n}\n\nexport default class Image {\n    private readonly data: ImageData;\n\n    constructor(data: ImageData) {\n        this.data = data;\n    }\n\n    static fromBase64(subtitleFileName: string, timestamp: number, base64: string, extension: string) {\n        const imageName =\n            subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')) +\n            '_' +\n            Math.floor(timestamp) +\n            '.' +\n            extension;\n        return new Image(new Base64ImageData(imageName, base64, extension));\n    }\n\n    static fromFile(file: File, timestamp: number, maxWidth: number, maxHeight: number) {\n        return new Image(new FileImageData(file, timestamp, maxWidth, maxHeight));\n    }\n\n    get name() {\n        return this.data.name;\n    }\n\n    get extension() {\n        return this.data.extension;\n    }\n\n    async base64() {\n        return await this.data.base64();\n    }\n\n    async dataUrl() {\n        return await this.data.dataUrl();\n    }\n\n    async blob() {\n        return await this.data.blob();\n    }\n\n    async pngBlob() {\n        return new Promise<Blob>(async (resolve, reject) => {\n            try {\n                createImageBitmap(await this.blob()).then((bitMap) => {\n                    const canvas = document.createElement('canvas');\n                    canvas.width = bitMap.width;\n                    canvas.height = bitMap.height;\n                    canvas.getContext('2d')!.drawImage(bitMap, 0, 0);\n                    canvas.toBlob((blob) => {\n                        if (blob) {\n                            resolve(blob);\n                        } else {\n                            reject('Failed to convert to PNG');\n                        }\n                    }, 'image/png');\n                });\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    async download() {\n        const blob = await this.data.blob();\n        download(blob, this.data.name);\n    }\n}\n","export interface Fetcher {\n    fetch: (url: string, body: any) => Promise<any>;\n}\n\nexport class HttpFetcher implements Fetcher {\n    async fetch(url: string, body: any) {\n        const response = await fetch(url, {\n            method: 'POST',\n            body: JSON.stringify(body),\n        });\n        return await response.json();\n    }\n}\n","import AudioClip from './AudioClip';\nimport Image from './Image';\nimport { HttpFetcher, Fetcher } from './Fetcher';\nimport { AnkiSettings } from './Settings';\nimport sanitize from 'sanitize-filename';\n\nconst ankiQuerySpecialCharacters = ['\"', '*', '_', '\\\\', ':'];\n\nexport type AnkiExportMode = 'gui' | 'updateLast' | 'default';\n\nexport class Anki {\n    private readonly settingsProvider: AnkiSettings;\n    private readonly fetcher: Fetcher;\n\n    constructor(settingsProvider: AnkiSettings, fetcher = new HttpFetcher()) {\n        this.settingsProvider = settingsProvider;\n        this.fetcher = fetcher;\n    }\n\n    async deckNames(ankiConnectUrl?: string) {\n        const response = await this._executeAction('deckNames', null, ankiConnectUrl);\n        return response.result;\n    }\n\n    async modelNames(ankiConnectUrl?: string) {\n        const response = await this._executeAction('modelNames', null, ankiConnectUrl);\n        return response.result;\n    }\n\n    async modelFieldNames(modelName: string, ankiConnectUrl?: string) {\n        const response = await this._executeAction('modelFieldNames', { modelName: modelName }, ankiConnectUrl);\n        return response.result;\n    }\n\n    async findNotesWithWord(word: string, ankiConnectUrl?: string) {\n        const response = await this._executeAction(\n            'findNotes',\n            { query: this.settingsProvider.wordField + ':' + this._escapeQuery(word) },\n            ankiConnectUrl\n        );\n        return response.result;\n    }\n\n    async findNotesWithWordGui(word: string, ankiConnectUrl?: string) {\n        const response = await this._executeAction(\n            'guiBrowse',\n            { query: this.settingsProvider.wordField + ':' + this._escapeQuery(word) },\n            ankiConnectUrl\n        );\n        return response.result;\n    }\n\n    _escapeQuery(query: string) {\n        let escaped = '';\n\n        for (let i = 0; i < query.length; ++i) {\n            const char = query[i];\n            if (ankiQuerySpecialCharacters.includes(char)) {\n                escaped += `\\\\${char}`;\n            } else {\n                escaped += char;\n            }\n        }\n\n        return `\"${escaped}\"`;\n    }\n\n    async requestPermission(ankiConnectUrl?: string) {\n        const response = await this._executeAction('requestPermission', null, ankiConnectUrl);\n        return response.result;\n    }\n\n    async export(\n        text: string | undefined,\n        definition: string | undefined,\n        audioClip: AudioClip | undefined,\n        image: Image | undefined,\n        word: string | undefined,\n        source: string | undefined,\n        url: string | undefined,\n        customFieldValues: { [key: string]: string },\n        tags: string[],\n        mode: AnkiExportMode,\n        ankiConnectUrl?: string\n    ) {\n        const fields = {};\n\n        this._appendField(fields, this.settingsProvider.sentenceField, text, true);\n        this._appendField(fields, this.settingsProvider.definitionField, definition, true);\n        this._appendField(fields, this.settingsProvider.wordField, word, false);\n        this._appendField(fields, this.settingsProvider.sourceField, source, false);\n        this._appendField(fields, this.settingsProvider.urlField, url, false);\n\n        if (customFieldValues) {\n            for (const customFieldName of Object.keys(customFieldValues)) {\n                this._appendField(\n                    fields,\n                    this.settingsProvider.customAnkiFields[customFieldName],\n                    customFieldValues[customFieldName],\n                    true\n                );\n            }\n        }\n\n        const params: any = {\n            note: {\n                deckName: this.settingsProvider.deck,\n                modelName: this.settingsProvider.noteType,\n                tags: tags,\n                options: {\n                    allowDuplicate: false,\n                    duplicateScope: 'deck',\n                    duplicateScopeOptions: {\n                        deckName: this.settingsProvider.deck,\n                        checkChildren: false,\n                    },\n                },\n            },\n        };\n\n        const gui = mode === 'gui';\n        const updateLast = mode === 'updateLast';\n\n        if (this.settingsProvider.audioField && audioClip) {\n            const sanitizedName = this._sanitizeFileName(audioClip.name);\n\n            if (gui || updateLast) {\n                const fileName = (await this._storeMediaFile(sanitizedName, await audioClip.base64(), ankiConnectUrl))\n                    .result;\n                this._appendField(fields, this.settingsProvider.audioField, `[sound:${fileName}]`, false);\n            } else {\n                params.note['audio'] = {\n                    filename: sanitizedName,\n                    data: await audioClip.base64(),\n                    fields: [this.settingsProvider.audioField],\n                };\n            }\n        }\n\n        if (this.settingsProvider.imageField && image) {\n            const sanitizedName = this._sanitizeFileName(image.name);\n\n            if (gui || updateLast) {\n                const fileName = (await this._storeMediaFile(sanitizedName, await image.base64(), ankiConnectUrl))\n                    .result;\n                this._appendField(\n                    fields,\n                    this.settingsProvider.imageField,\n                    `<div><img src=\"${fileName}\"></div>`,\n                    false\n                );\n            } else {\n                params.note['picture'] = {\n                    filename: sanitizedName,\n                    data: await image.base64(),\n                    fields: [this.settingsProvider.imageField],\n                };\n            }\n        }\n\n        params.note['fields'] = fields;\n\n        switch (mode) {\n            case 'gui':\n                return (await this._executeAction('guiAddCards', params, ankiConnectUrl)).result;\n            case 'updateLast':\n                const recentNotes = (\n                    await this._executeAction('findNotes', { query: 'added:1' }, ankiConnectUrl)\n                ).result.sort();\n\n                if (recentNotes.length === 0) {\n                    throw new Error('Could not find note to update');\n                }\n\n                const lastNoteId = recentNotes[recentNotes.length - 1];\n                params.note['id'] = lastNoteId;\n                const infoResponse = await this._executeAction('notesInfo', { notes: [lastNoteId] });\n\n                if (infoResponse.result.length > 0 && infoResponse.result[0].noteId === lastNoteId) {\n                    const info = infoResponse.result[0];\n                    await this._executeAction('updateNoteFields', params, ankiConnectUrl);\n\n                    if (!this.settingsProvider.wordField || !info.fields) {\n                        return info.noteId;\n                    }\n\n                    const wordField = info.fields[this.settingsProvider.wordField];\n\n                    if (!wordField || !wordField.value) {\n                        return info.noteId;\n                    }\n\n                    return wordField.value;\n                }\n\n                throw new Error('Could not update last card because the card info could not be fetched');\n            case 'default':\n                return (await this._executeAction('addNote', params, ankiConnectUrl)).result;\n            default:\n                throw new Error('Unknown export mode: ' + mode);\n        }\n    }\n\n    _appendField(fields: any, fieldName: string | undefined, value: string | undefined, multiline: boolean) {\n        if (!fieldName || !value) {\n            return;\n        }\n\n        let newValue = multiline ? value.split('\\n').join('<br>') : value;\n        const existingValue = fields[fieldName];\n\n        if (existingValue) {\n            newValue = existingValue + '<br>' + newValue;\n        }\n\n        fields[fieldName] = newValue;\n    }\n\n    _sanitizeFileName(name: string) {\n        return sanitize(name, { replacement: '_' });\n    }\n\n    async _storeMediaFile(name: string, base64: string, ankiConnectUrl?: string) {\n        return this._executeAction('storeMediaFile', { filename: name, data: base64 }, ankiConnectUrl);\n    }\n\n    async _executeAction(action: string, params: any, ankiConnectUrl?: string) {\n        const body: any = {\n            action: action,\n            version: 6,\n        };\n\n        if (params) {\n            body['params'] = params;\n        }\n\n        const json = await this.fetcher.fetch(ankiConnectUrl || this.settingsProvider.ankiConnectUrl, body);\n\n        if (json.error) {\n            throw new Error(json.error);\n        }\n\n        return json;\n    }\n}\n","import { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport MuiAlert, { Color } from '@material-ui/lab/Alert';\nimport Grow from '@material-ui/core/Grow';\n\nconst useAlertStyles = makeStyles({\n    root: {\n        display: 'flex',\n        justifyContent: 'center',\n        position: 'fixed',\n        top: 80,\n        width: '100%',\n        pointerEvents: 'none',\n        zIndex: 2000,\n    },\n});\n\ninterface Props {\n    open: boolean;\n    autoHideDuration: number;\n    onClose: () => void;\n    severity: Color | undefined;\n    children: React.ReactNode\n}\n\nexport default function Alert(props: Props) {\n    const classes = useAlertStyles();\n\n    useEffect(() => {\n        if (props.open) {\n            const timeout = setTimeout(props.onClose, props.autoHideDuration);\n            return () => clearTimeout(timeout);\n        }\n    }, [props.open, props.autoHideDuration, props.onClose]);\n\n    return (\n        <div className={classes.root}>\n            <Grow in={props.open}>\n                <MuiAlert severity={props.severity}>{props.children}</MuiAlert>\n            </Grow>\n        </div>\n    );\n}\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport { TextField, TextFieldProps } from \"@material-ui/core\";\n\nfunction extractTagsFromString(value: string) {\n    const splitTags = value.split(' ').join('').split(',');\n    const tags = [];\n\n    for (const tag of splitTags) {\n        tags.push(tag.trim());\n    }\n\n    return tags;\n}\n\nexport interface Props {\n    tags: string[];\n    onTagsChange: (tags: string[]) => void;\n}\n\nexport default function TagsTextField({tags, onTagsChange, ...props}: Props & TextFieldProps) {\n    const [value, setValue] = useState('');\n\n    useEffect(() => {\n        const tagsString = tags.join(', ');\n\n        if (tagsString !== value) {\n            setValue(tags.join(', '));\n        }\n    }, [value, tags]);\n\n    const handleChange = useCallback((e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        let currentValue = e.target.value;\n\n        if (\n            value.length > currentValue.length &&\n            value.includes(currentValue) &&\n            currentValue.endsWith(',')\n        ) {\n            // Detected a backspace at the last comma, move cursor back enough to remove the comma\n            currentValue = currentValue.substring(0, currentValue.length - 1);\n        }\n\n        // Decompose string into individual tags by removing all spaces and splitting on \",\"\n        const newTags = extractTagsFromString(currentValue);\n        setValue(newTags.join(', '));\n        onTagsChange(newTags);\n    }, [value, onTagsChange]);\n\n    return (\n        <TextField\n            {...props}\n            value={value}\n            onChange={handleChange}\n        />\n    );\n}\n","import React, { useEffect, useState, useLayoutEffect } from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport Card from '@material-ui/core/Card';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Dialog from '@material-ui/core/Dialog';\nimport { Image as CommonImage } from '@project/common';\n\ninterface ImageDimensions {\n    width: number;\n    height: number;\n}\n\nconst useStyles = makeStyles((theme) => ({\n    image: ({ width, height }: ImageDimensions) => ({\n        width: width,\n        height: height,\n        backgroundSize: 'contain',\n    }),\n}));\n\n// https://stackoverflow.com/questions/19014250/rerender-view-on-browser-resize-with-react\nfunction useWindowSize() {\n    const [size, setSize] = useState([0, 0]);\n\n    useLayoutEffect(() => {\n        function updateSize() {\n            setSize([window.innerWidth, window.innerHeight]);\n        }\n\n        window.addEventListener('resize', updateSize);\n        updateSize();\n\n        return () => window.removeEventListener('resize', updateSize);\n    }, []);\n\n    return size;\n}\n\ninterface Props {\n    open: boolean;\n    image?: CommonImage;\n    onClose: () => void;\n}\n\nexport default function ImageDialog({ open, image, onClose }: Props) {\n    const [dataUrl, setDataUrl] = useState<string>();\n    const [width, setWidth] = useState<number>(0);\n    const [height, setHeight] = useState<number>(0);\n    const [windowWidth, windowHeight] = useWindowSize();\n\n    let resizeRatio;\n\n    if (width > 0 && height > 0) {\n        resizeRatio = Math.min(1, Math.min(windowWidth / (2 * width), windowHeight / (2 * height)));\n    } else {\n        resizeRatio = 1;\n    }\n\n    const classes = useStyles({ width: width * resizeRatio, height: height * resizeRatio });\n\n    useEffect(() => {\n        setDataUrl(undefined);\n        async function fetchImage() {\n            if (!image) {\n                return;\n            }\n\n            const dataUrl = await image.dataUrl();\n            const img = new Image();\n            img.onload = () => {\n                setWidth(img.width);\n                setHeight(img.height);\n                setDataUrl(dataUrl);\n            };\n            img.src = dataUrl;\n        }\n\n        fetchImage();\n    }, [image]);\n\n    if (!image || !dataUrl) {\n        return null;\n    }\n\n    return (\n        <Dialog open={open} onClose={onClose} maxWidth=\"lg\">\n            <Card>\n                <CardMedia\n                    className={classes.image}\n                    image={dataUrl}\n                    title={image.name}\n                    style={{ width: width * resizeRatio, height: height * resizeRatio }}\n                />\n            </Card>\n        </Dialog>\n    );\n}\n","import React from 'react';\nimport { SubtitleModel } from '../..';\n\ninterface Props {\n    subtitle: SubtitleModel;\n    availableWidth: number;\n    scale: number;\n}\n\nexport default function SubtitleTextImage({ subtitle, availableWidth, scale }: Props) {\n    if (subtitle.textImage === undefined) {\n        return null;\n    }\n\n    const imageScale = (scale * availableWidth) / subtitle.textImage.screen.width;\n    const width = imageScale * subtitle.textImage.image.width;\n\n    return (\n        <div style={{ maxWidth: width }}>\n            <img style={{ width: '100%' }} alt=\"subtitle\" src={subtitle.textImage.dataUrl} />\n        </div>\n    );\n}\n","import React, { MutableRefObject, useCallback, useState, useEffect } from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport {\n    Anki,\n    AnkiDialogSliderContext,\n    AudioClip,\n    Image,\n    humanReadableTime,\n    AnkiSettings,\n    SubtitleModel,\n} from '@project/common';\nimport Button from '@material-ui/core/Button';\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DoneIcon from '@material-ui/icons/Done';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Paper from '@material-ui/core/Paper';\nimport RestoreIcon from '@material-ui/icons/Restore';\nimport SearchIcon from '@material-ui/icons/Search';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport Slider, { Mark } from '@material-ui/core/Slider';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport ZoomInIcon from '@material-ui/icons/ZoomIn';\nimport SubtitleTextImage from './SubtitleTextImage';\nimport TagsTextField from './TagsTextField';\nimport { AnkiExportMode } from '@project/common';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& .MuiTextField-root': {\n            marginBottom: theme.spacing(1),\n        },\n    },\n    title: {\n        flexGrow: 1,\n    },\n    mediaField: {\n        cursor: 'pointer',\n        '& input': {\n            cursor: 'pointer',\n        },\n    },\n    rangeSelectSlider: {\n        '& .MuiSlider-markLabel': {\n            transform: 'translateX(-3%)',\n        },\n    },\n}));\n\nfunction boundaryIntervalFromSliderContext(sliderContext: AnkiDialogSliderContext) {\n    let min = null;\n    let max = null;\n\n    for (const s of sliderContext.subtitles) {\n        if (min === null || s.start < min) {\n            min = s.start;\n        }\n\n        if (max === null || s.end > max) {\n            max = s.end;\n        }\n    }\n\n    return min !== null && max !== null && [min, max];\n}\n\nfunction sliderMarksFromSliderContext(sliderContext: AnkiDialogSliderContext, boundary: number[]): Mark[] {\n    const seenTimestamps: any = {};\n\n    return sliderContext.subtitles\n        .filter((s) => s.text.trim() !== '' || s.textImage !== undefined)\n        .map((s) => {\n            if (s.start in seenTimestamps) {\n                return null;\n            }\n\n            seenTimestamps[s.start] = true;\n\n            return {\n                value: s.start,\n                label: `${s.text.trim().substring(0, Math.min(s.text.length, 3))}...`,\n            };\n        })\n        .filter((mark: Mark | null) => mark !== null)\n        .filter((mark: Mark | null) => mark!.value >= boundary[0] && mark!.value <= boundary[1]) as Mark[];\n}\n\nfunction sliderValueLabelFormat(ms: number) {\n    return humanReadableTime(ms, true);\n}\n\nfunction subtitleIntersectsTimeInterval(subtitle: SubtitleModel, interval: number[]) {\n    return (\n        (subtitle.start >= interval[0] && subtitle.start <= interval[1]) ||\n        (subtitle.end >= interval[0] && subtitle.end <= interval[1]) ||\n        (interval[0] >= subtitle.start && interval[0] <= subtitle.end) ||\n        (interval[1] >= subtitle.start && interval[1] <= subtitle.end)\n    );\n}\n\ninterface ValueLabelComponentProps {\n    children: React.ReactElement;\n    open: boolean;\n    value: number;\n}\n\nfunction ValueLabelComponent({ children, open, value }: ValueLabelComponentProps) {\n    return (\n        <Tooltip open={open} enterTouchDelay={0} placement=\"top\" title={value}>\n            {children}\n        </Tooltip>\n    );\n}\n\ninterface TextImageSetProps {\n    selectedSubtitles: SubtitleModel[];\n    width: number;\n}\n\nconst useTextImageSetStyles = makeStyles((theme) => ({\n    root: {\n        marginBottom: theme.spacing(1),\n        padding: theme.spacing(1),\n        backgroundColor: theme.palette.action.disabledBackground,\n    },\n}));\n\nfunction TextImageSet({ selectedSubtitles, width }: TextImageSetProps) {\n    const classes = useTextImageSetStyles();\n\n    if (selectedSubtitles.length === 0 || width <= 0) {\n        return null;\n    }\n\n    return (\n        <Paper elevation={0} className={classes.root}>\n            {selectedSubtitles.map((s, index) => {\n                return <SubtitleTextImage key={index} availableWidth={width} subtitle={s} scale={1} />;\n            })}\n        </Paper>\n    );\n}\n\nconst TextFieldEndAdornment = withStyles({\n    // Hack to recenter TextField end adornment\n    root: {\n        transform: 'translateY(-8px)',\n    },\n})(InputAdornment);\n\nexport interface AnkiDialogState {\n    text: string;\n    sliderContext?: AnkiDialogSliderContext;\n    definition: string;\n    word: string;\n    source: string;\n    url: string;\n    customFieldValues: { [key: string]: string };\n    lastAppliedTimestampIntervalToText?: number[];\n    lastAppliedTimestampIntervalToAudio?: number[];\n    initialTimestampInterval?: number[];\n    timestampInterval?: number[];\n}\n\ninterface AnkiDialogProps {\n    open: boolean;\n    disabled: boolean;\n    text?: string;\n    onProceed: (\n        text: string,\n        definition: string,\n        audioClip: AudioClip | undefined,\n        image: Image | undefined,\n        word: string,\n        source: string,\n        url: string,\n        customFieldValues: { [key: string]: string },\n        tags: string[],\n        mode: AnkiExportMode\n    ) => void;\n    onRerecord?: () => void;\n    onRewind: () => void;\n    onCancel: () => void;\n    onViewImage: (image: Image) => void;\n    onOpenSettings?: () => void;\n    audioClip?: AudioClip;\n    image?: Image;\n    source?: string;\n    url?: string;\n    sliderContext?: AnkiDialogSliderContext;\n    settingsProvider: AnkiSettings;\n    anki: Anki;\n    definition?: string;\n    word?: string;\n    customFields: { [key: string]: string };\n    customFieldValues?: { [key: string]: string };\n    initialTimestampInterval?: number[];\n    timestampInterval?: number[];\n    lastAppliedTimestampIntervalToText?: number[];\n    lastAppliedTimestampIntervalToAudio?: number[];\n    stateRef?: MutableRefObject<AnkiDialogState | undefined>;\n}\n\nexport function AnkiDialog({\n    open,\n    disabled,\n    text: initialText,\n    onProceed,\n    onRewind,\n    onCancel,\n    onViewImage,\n    onOpenSettings,\n    onRerecord,\n    audioClip: initialAudioClip,\n    image,\n    source: initialSource,\n    url: initialUrl,\n    sliderContext,\n    customFields,\n    settingsProvider,\n    anki,\n    definition: initialDefinition,\n    word: initialWord,\n    customFieldValues: initialCustomFieldValues,\n    timestampInterval: initialSelectedTimestampInterval,\n    initialTimestampInterval: forceInitialTimestampInterval,\n    lastAppliedTimestampIntervalToText: initialLastAppliedTimestampIntervalToText,\n    lastAppliedTimestampIntervalToAudio: initialLastAppliedTimestampIntervalToAudio,\n    stateRef,\n}: AnkiDialogProps) {\n    const classes = useStyles();\n    const [definition, setDefinition] = useState<string>('');\n    const [text, setText] = useState<string>('');\n    const [word, setWord] = useState<string>('');\n    const [lastSearchedWord, setLastSearchedWord] = useState<string>();\n    const [source, setSource] = useState<string>(initialSource ?? '');\n    const [tags, setTags] = useState<string[]>(settingsProvider.tags);\n    const [url, setUrl] = useState<string>(initialUrl ?? '');\n    const [duplicateNotes, setDuplicateNotes] = useState<any[]>([]);\n    const [wordTimestamp, setWordTimestamp] = useState<number>(0);\n    const [customFieldValues, setCustomFieldValues] = useState<{ [key: string]: string }>({});\n    const [timestampInterval, setTimestampInterval] = useState<number[]>();\n    const [selectedSubtitles, setSelectedSubtitles] = useState<SubtitleModel[]>([]);\n    const [initialTimestampInterval, setInitialTimestampInterval] = useState<number[]>();\n    const [initialTimestampBoundaryInterval, setInitialTimestampBoundaryInterval] = useState<number[]>();\n    const [timestampBoundaryInterval, setTimestampBoundaryInterval] = useState<number[]>();\n    const [timestampMarks, setTimestampMarks] = useState<Mark[]>();\n    const [lastAppliedTimestampIntervalToText, setLastAppliedTimestampIntervalToText] = useState<number[]>();\n    const [lastAppliedTimestampIntervalToAudio, setLastAppliedTimestampIntervalToAudio] = useState<number[]>();\n    const [width, setWidth] = useState<number>(0);\n    const [audioClip, setAudioClip] = useState<AudioClip>();\n    const dialogRefCallback = useCallback((element: HTMLElement) => {\n        setWidth(element?.getBoundingClientRect().width ?? 0);\n    }, []);\n\n    if (stateRef) {\n        stateRef.current = {\n            text,\n            sliderContext,\n            definition,\n            word,\n            source,\n            url,\n            customFieldValues,\n            initialTimestampInterval,\n            lastAppliedTimestampIntervalToText,\n            lastAppliedTimestampIntervalToAudio,\n            timestampInterval,\n        };\n    }\n\n    useEffect(() => {\n        setText(initialText ?? '');\n        setDefinition(initialDefinition ?? '');\n        setWord(initialWord ?? '');\n        setSource(initialSource ?? '');\n        setUrl(initialUrl ?? '');\n        setDuplicateNotes([]);\n        setCustomFieldValues(initialCustomFieldValues ?? {});\n    }, [initialText, initialSource, initialDefinition, initialWord, initialCustomFieldValues, initialUrl]);\n\n    useEffect(() => {\n        setTags(settingsProvider.tags);\n    }, [settingsProvider.tags]);\n\n    useEffect(() => {\n        const timestampInterval =\n            initialSelectedTimestampInterval ||\n            (sliderContext && [sliderContext.subtitleStart, sliderContext.subtitleEnd]) ||\n            undefined;\n        const timestampBoundaryInterval =\n            (sliderContext && boundaryIntervalFromSliderContext(sliderContext)) || undefined;\n        const timestampMarks =\n            (sliderContext && sliderMarksFromSliderContext(sliderContext, timestampBoundaryInterval!)) || undefined;\n        const selectedSubtitles =\n            sliderContext === undefined || timestampInterval === undefined\n                ? []\n                : sliderContext.subtitles.filter((s) => subtitleIntersectsTimeInterval(s, timestampInterval));\n\n        setTimestampInterval(timestampInterval);\n        setSelectedSubtitles(selectedSubtitles);\n        setInitialTimestampInterval(forceInitialTimestampInterval || timestampInterval);\n        setLastAppliedTimestampIntervalToText(initialLastAppliedTimestampIntervalToText || timestampInterval);\n        setLastAppliedTimestampIntervalToAudio(initialLastAppliedTimestampIntervalToAudio || timestampInterval);\n        setTimestampBoundaryInterval(timestampBoundaryInterval);\n        setInitialTimestampBoundaryInterval(timestampBoundaryInterval);\n        setTimestampMarks(timestampMarks);\n    }, [\n        sliderContext,\n        forceInitialTimestampInterval,\n        initialSelectedTimestampInterval,\n        initialLastAppliedTimestampIntervalToText,\n        initialLastAppliedTimestampIntervalToAudio,\n    ]);\n\n    useEffect(() => {\n        if (!initialAudioClip) {\n            setAudioClip(undefined);\n            return;\n        }\n\n        let newAudioClip = initialAudioClip;\n\n        if (settingsProvider.preferMp3) {\n            newAudioClip = newAudioClip.toMp3();\n        }\n\n        if (lastAppliedTimestampIntervalToAudio) {\n            newAudioClip = newAudioClip.slice(\n                Math.max(0, Math.round(lastAppliedTimestampIntervalToAudio[0]) - settingsProvider.audioPaddingStart),\n                Math.round(lastAppliedTimestampIntervalToAudio[1]) + settingsProvider.audioPaddingEnd\n            );\n        }\n\n        setAudioClip(newAudioClip);\n    }, [\n        initialAudioClip,\n        settingsProvider.preferMp3,\n        lastAppliedTimestampIntervalToAudio,\n        settingsProvider.audioPaddingStart,\n        settingsProvider.audioPaddingEnd,\n    ]);\n\n    useEffect(() => {\n        setWordTimestamp(Date.now());\n    }, [word]);\n\n    useEffect(() => {\n        if (!word || !settingsProvider.wordField) {\n            return;\n        }\n\n        const trimmedWord = word.trim();\n\n        if (trimmedWord === '' || trimmedWord === lastSearchedWord) {\n            return;\n        }\n\n        const timeout = setTimeout(async () => {\n            try {\n                setDuplicateNotes(await anki.findNotesWithWord(trimmedWord));\n                setLastSearchedWord(trimmedWord);\n            } catch (e) {\n                console.error(e);\n            }\n        }, 500);\n\n        return () => clearTimeout(timeout);\n    }, [word, wordTimestamp, lastSearchedWord, anki, settingsProvider.wordField]);\n\n    const handlePlayAudio = useCallback(\n        (e: React.MouseEvent<HTMLDivElement>) => {\n            e.preventDefault();\n            e.stopPropagation();\n            audioClip!.play();\n        },\n        [audioClip]\n    );\n\n    const handleCustomFieldChange = useCallback(\n        (customFieldName: string, value: string) => {\n            const newCustomFieldValues: { [fieldName: string]: string } = {};\n            Object.assign(newCustomFieldValues, customFieldValues);\n            newCustomFieldValues[customFieldName] = value;\n            setCustomFieldValues(newCustomFieldValues);\n        },\n        [customFieldValues]\n    );\n\n    let wordHelperText;\n\n    if (word && word.trim() === lastSearchedWord && settingsProvider.wordField) {\n        wordHelperText =\n            duplicateNotes.length > 0\n                ? `Found ${duplicateNotes.length} notes with word \"${word}\" in field \"${settingsProvider.wordField}\"`\n                : `No notes found with word \"${word.trim()}\" in field \"${settingsProvider.wordField}\"`;\n    } else {\n        wordHelperText = '';\n    }\n\n    const handleViewImage = useCallback(\n        (e: React.MouseEvent<HTMLDivElement>) => {\n            e.preventDefault();\n            e.stopPropagation();\n            onViewImage(image!);\n        },\n        [image, onViewImage]\n    );\n\n    const handleTimestampIntervalChange = useCallback(\n        (e: React.ChangeEvent<{}>, newValue: number | number[]) => {\n            const timestampInterval = newValue as number[];\n            setTimestampInterval(timestampInterval);\n            const selectedSubtitles = sliderContext!.subtitles.filter((s) =>\n                subtitleIntersectsTimeInterval(s, timestampInterval)\n            );\n            setSelectedSubtitles(selectedSubtitles);\n        },\n        [sliderContext]\n    );\n\n    const handleApplyTimestampIntervalToText = useCallback(() => {\n        const interval = timestampInterval!;\n        const newText = sliderContext!.subtitles\n            .filter((s) => subtitleIntersectsTimeInterval(s, interval))\n            .map((s) => s.text)\n            .join('\\n');\n\n        setText(newText);\n        setLastAppliedTimestampIntervalToText(timestampInterval);\n    }, [timestampInterval, sliderContext]);\n\n    const handleApplyTimestampIntervalToAudio = useCallback(\n        (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n            if (onRerecord) {\n                e.stopPropagation();\n                onRerecord();\n            } else {\n                setLastAppliedTimestampIntervalToAudio(timestampInterval);\n            }\n        },\n        [onRerecord, timestampInterval]\n    );\n\n    const handleResetTimestampInterval = useCallback(() => {\n        if (!initialTimestampBoundaryInterval) {\n            return;\n        }\n\n        const selectedSubtitles =\n            sliderContext === undefined || initialTimestampInterval === undefined\n                ? []\n                : sliderContext.subtitles.filter((s) => subtitleIntersectsTimeInterval(s, initialTimestampInterval));\n        setSelectedSubtitles(selectedSubtitles);\n        setTimestampInterval(initialTimestampInterval);\n        setTimestampBoundaryInterval(initialTimestampBoundaryInterval);\n        setTimestampMarks(\n            sliderContext && sliderMarksFromSliderContext(sliderContext, initialTimestampBoundaryInterval)\n        );\n    }, [initialTimestampInterval, initialTimestampBoundaryInterval, sliderContext]);\n\n    const handleZoomInTimestampInterval = useCallback(() => {\n        if (!timestampBoundaryInterval || !timestampInterval) {\n            return;\n        }\n\n        const newMin = (timestampBoundaryInterval[0] + timestampInterval[0]) / 2;\n        const newMax = (timestampBoundaryInterval[1] + timestampInterval[1]) / 2;\n        const newTimestampBoundaryInterval = [newMin, newMax];\n        setTimestampBoundaryInterval(newTimestampBoundaryInterval);\n        setTimestampMarks(sliderContext && sliderMarksFromSliderContext(sliderContext, newTimestampBoundaryInterval));\n    }, [timestampBoundaryInterval, timestampInterval, sliderContext]);\n\n    const handleCopyImageToClipboard = useCallback(\n        async (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n            e.stopPropagation();\n\n            if (!image) {\n                return;\n            }\n\n            navigator.clipboard.write([new ClipboardItem({ 'image/png': await image.pngBlob() })]);\n        },\n        [image]\n    );\n\n    const disableApplyTextSelection =\n        !sliderContext || sliderContext.subtitles.filter((s) => s.text.trim() !== '').length === 0;\n\n    return (\n        <Dialog open={open} disableEnforceFocus fullWidth maxWidth=\"sm\" onClose={onCancel}>\n            <Toolbar>\n                <Typography variant=\"h6\" className={classes.title}>\n                    Anki Export\n                </Typography>\n                {onOpenSettings && (\n                    <IconButton edge=\"end\" onClick={() => onOpenSettings()}>\n                        <SettingsIcon />\n                    </IconButton>\n                )}\n            </Toolbar>\n            <DialogContent ref={dialogRefCallback}>\n                <form className={classes.root}>\n                    {sliderContext && timestampInterval && (\n                        <TextImageSet\n                            selectedSubtitles={selectedSubtitles.filter((s) => s.textImage !== undefined)}\n                            width={width}\n                        />\n                    )}\n                    <TextField\n                        variant=\"filled\"\n                        color=\"secondary\"\n                        multiline\n                        fullWidth\n                        maxRows={8}\n                        label=\"Sentence\"\n                        value={text}\n                        onChange={(e) => setText(e.target.value)}\n                        InputProps={{\n                            endAdornment: timestampInterval && (\n                                <TextFieldEndAdornment position=\"end\">\n                                    <Tooltip title=\"Apply Selection\">\n                                        <span>\n                                            <IconButton\n                                                disabled={\n                                                    !timestampInterval ||\n                                                    !lastAppliedTimestampIntervalToText ||\n                                                    (timestampInterval[0] === lastAppliedTimestampIntervalToText[0] &&\n                                                        timestampInterval[1] ===\n                                                            lastAppliedTimestampIntervalToText[1]) ||\n                                                    disableApplyTextSelection\n                                                }\n                                                onClick={handleApplyTimestampIntervalToText}\n                                                edge=\"end\"\n                                            >\n                                                <DoneIcon />\n                                            </IconButton>\n                                        </span>\n                                    </Tooltip>\n                                </TextFieldEndAdornment>\n                            ),\n                        }}\n                    />\n                    <TextField\n                        variant=\"filled\"\n                        color=\"secondary\"\n                        multiline\n                        fullWidth\n                        rows={8}\n                        label=\"Definition\"\n                        value={definition}\n                        onChange={(e) => setDefinition(e.target.value)}\n                    />\n                    <TextField\n                        variant=\"filled\"\n                        color=\"secondary\"\n                        fullWidth\n                        label=\"Word\"\n                        value={word}\n                        onChange={(e) => setWord(e.target.value)}\n                        helperText={wordHelperText}\n                        InputProps={{\n                            endAdornment: (\n                                <InputAdornment position=\"end\">\n                                    <Tooltip title=\"Search in Anki\">\n                                        <span>\n                                            <IconButton\n                                                disabled={\n                                                    disabled ||\n                                                    !settingsProvider.wordField ||\n                                                    !word ||\n                                                    word.trim() === ''\n                                                }\n                                                onClick={() => anki.findNotesWithWordGui(word.trim())}\n                                                edge=\"end\"\n                                            >\n                                                <SearchIcon />\n                                            </IconButton>\n                                        </span>\n                                    </Tooltip>\n                                </InputAdornment>\n                            ),\n                        }}\n                    />\n                    {Object.keys(customFields).map((customFieldName) => (\n                        <TextField\n                            key={customFieldName}\n                            variant=\"filled\"\n                            color=\"secondary\"\n                            fullWidth\n                            multiline\n                            maxRows={8}\n                            label={customFieldName}\n                            value={customFieldValues[customFieldName] || ''}\n                            onChange={(e) => handleCustomFieldChange(customFieldName, e.target.value)}\n                        />\n                    ))}\n                    {audioClip && (\n                        <div className={classes.mediaField} onClick={handlePlayAudio}>\n                            <TextField\n                                variant=\"filled\"\n                                color=\"secondary\"\n                                fullWidth\n                                value={audioClip.name}\n                                label=\"Audio\"\n                                InputProps={{\n                                    endAdornment: timestampInterval && (\n                                        <InputAdornment position=\"end\">\n                                            {onRerecord ? (\n                                                <Tooltip title=\"Apply Selection (rerecord)\">\n                                                    <span>\n                                                        <IconButton\n                                                            disabled={\n                                                                !timestampInterval ||\n                                                                !lastAppliedTimestampIntervalToAudio ||\n                                                                (timestampInterval[0] ===\n                                                                    lastAppliedTimestampIntervalToAudio[0] &&\n                                                                    timestampInterval[1] ===\n                                                                        lastAppliedTimestampIntervalToAudio[1])\n                                                            }\n                                                            onClick={handleApplyTimestampIntervalToAudio}\n                                                            edge=\"end\"\n                                                        >\n                                                            <DoneIcon />\n                                                        </IconButton>\n                                                    </span>\n                                                </Tooltip>\n                                            ) : (\n                                                <Tooltip title={'Apply Selection'}>\n                                                    <span>\n                                                        <IconButton\n                                                            disabled={\n                                                                !lastAppliedTimestampIntervalToAudio ||\n                                                                (timestampInterval[0] ===\n                                                                    lastAppliedTimestampIntervalToAudio[0] &&\n                                                                    timestampInterval[1] ===\n                                                                        lastAppliedTimestampIntervalToAudio[1]) ||\n                                                                !audioClip.isSliceable(\n                                                                    timestampInterval[0],\n                                                                    timestampInterval[1]\n                                                                )\n                                                            }\n                                                            onClick={handleApplyTimestampIntervalToAudio}\n                                                            edge=\"end\"\n                                                        >\n                                                            <DoneIcon />\n                                                        </IconButton>\n                                                    </span>\n                                                </Tooltip>\n                                            )}\n                                        </InputAdornment>\n                                    ),\n                                }}\n                            />\n                        </div>\n                    )}\n                    {image && (\n                        <div className={classes.mediaField} onClick={handleViewImage}>\n                            <TextField\n                                variant=\"filled\"\n                                color=\"secondary\"\n                                fullWidth\n                                value={image.name}\n                                label=\"Image\"\n                                InputProps={{\n                                    endAdornment: (\n                                        <InputAdornment position=\"end\">\n                                            <Tooltip title=\"Copy to Clipboard\">\n                                                <span>\n                                                    <IconButton onClick={handleCopyImageToClipboard} edge=\"end\">\n                                                        <FileCopyIcon />\n                                                    </IconButton>\n                                                </span>\n                                            </Tooltip>\n                                        </InputAdornment>\n                                    ),\n                                }}\n                            />\n                        </div>\n                    )}\n                    <TextField\n                        variant=\"filled\"\n                        color=\"secondary\"\n                        fullWidth\n                        label=\"Source\"\n                        value={source}\n                        onChange={(e) => setSource(e.target.value)}\n                    />\n                    {initialUrl && (\n                        <TextField\n                            variant=\"filled\"\n                            color=\"secondary\"\n                            fullWidth\n                            label=\"URL\"\n                            value={url}\n                            onChange={(e) => setUrl(e.target.value)}\n                        />\n                    )}\n                    {settingsProvider.tags.length > 0 && (\n                        <TagsTextField\n                            variant=\"filled\"\n                            label=\"Tags\"\n                            helperText=\"Comma-separated list of strings\"\n                            fullWidth\n                            color=\"secondary\"\n                            tags={tags}\n                            onTagsChange={(newTags) => setTags(newTags)}\n                        />\n                    )}\n                    {timestampInterval && timestampBoundaryInterval && timestampMarks && (\n                        <Grid container direction=\"row\">\n                            <Grid item style={{ flexGrow: 1 }}>\n                                <Slider\n                                    ValueLabelComponent={ValueLabelComponent}\n                                    value={timestampInterval}\n                                    valueLabelFormat={sliderValueLabelFormat}\n                                    onChange={handleTimestampIntervalChange}\n                                    min={timestampBoundaryInterval[0]}\n                                    max={timestampBoundaryInterval[1]}\n                                    marks={timestampMarks}\n                                    step={1}\n                                    valueLabelDisplay=\"auto\"\n                                    className={classes.rangeSelectSlider}\n                                    color=\"secondary\"\n                                />\n                            </Grid>\n                            <Grid item>\n                                <Tooltip title=\"Reset\">\n                                    <span>\n                                        <IconButton\n                                            edge=\"end\"\n                                            style={{ marginTop: -8 }}\n                                            onClick={handleResetTimestampInterval}\n                                        >\n                                            <RestoreIcon />\n                                        </IconButton>\n                                    </span>\n                                </Tooltip>\n                            </Grid>\n                            <Grid item>\n                                <Tooltip title=\"Zoom In\">\n                                    <span>\n                                        <IconButton\n                                            edge=\"end\"\n                                            style={{ marginTop: -8 }}\n                                            onClick={handleZoomInTimestampInterval}\n                                        >\n                                            <ZoomInIcon />\n                                        </IconButton>\n                                    </span>\n                                </Tooltip>\n                            </Grid>\n                        </Grid>\n                    )}\n                </form>\n            </DialogContent>\n            <DialogActions>\n                <Button disabled={disabled} onClick={() => onCancel()}>\n                    Cancel\n                </Button>\n                {sliderContext && (\n                    <Button disabled={disabled} onClick={() => onRewind()}>\n                        Rewind\n                    </Button>\n                )}\n                <Button\n                    disabled={disabled}\n                    onClick={() =>\n                        onProceed(\n                            text,\n                            definition,\n                            audioClip,\n                            image,\n                            word,\n                            source ?? '',\n                            url ?? '',\n                            customFieldValues,\n                            tags,\n                            'gui'\n                        )\n                    }\n                >\n                    Open in Anki\n                </Button>\n                <Button\n                    disabled={disabled}\n                    onClick={() =>\n                        onProceed(\n                            text,\n                            definition,\n                            audioClip,\n                            image,\n                            word,\n                            source ?? '',\n                            url ?? '',\n                            customFieldValues,\n                            tags,\n                            'updateLast'\n                        )\n                    }\n                >\n                    Update Last Card\n                </Button>\n                <Button\n                    disabled={disabled}\n                    onClick={() =>\n                        onProceed(\n                            text,\n                            definition,\n                            audioClip,\n                            image,\n                            word,\n                            source ?? '',\n                            url ?? '',\n                            customFieldValues,\n                            tags,\n                            'default'\n                        )\n                    }\n                >\n                    Export\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n","export default __webpack_public_path__ + \"static/media/background-colored.cbc50e45.png\";","import { makeStyles } from '@material-ui/styles';\nimport Fade from '@material-ui/core/Fade';\nimport coloredBackground from './background-colored.png';\nimport { Theme } from '@material-ui/core';\n\ninterface StylesProps {\n    dragging: boolean;\n    appBarHidden: boolean;\n}\n\ninterface Props {\n    dragging: boolean;\n    appBarHidden: boolean;\n    loading: boolean;\n}\n\nconst useStyles = makeStyles<Theme, StylesProps>((theme) => ({\n    root: ({ dragging, appBarHidden }) => ({\n        position: 'absolute',\n        height: appBarHidden ? '100%' : 'calc(100% - 64px)',\n        width: '100%',\n        zIndex: 101,\n        pointerEvents: dragging ? 'auto' : 'none',\n    }),\n    transparentBackground: ({ appBarHidden }) => ({\n        '&::before': {\n            content: \"' '\",\n            position: 'absolute',\n            height: appBarHidden ? '100vh' : 'calc(100vh - 64px)',\n            width: '100%',\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            alignItems: 'center',\n            textAlign: 'center',\n            backgroundSize: '300px 300px',\n            backgroundRepeat: 'no-repeat',\n            backgroundPosition: 'center',\n            backgroundImage: `url(${coloredBackground})`,\n            backgroundBlendMode: 'overlay',\n            background: 'rgba(0, 0, 0, .3)',\n            filter: 'drop-shadow(10px 10px 10px rgb(0, 0, 0, .4))',\n        },\n        width: '100%',\n        height: '100%',\n    }),\n}));\n\nexport default function DragOverlay({ dragging, appBarHidden, loading }: Props) {\n    const classes = useStyles({ dragging, appBarHidden });\n\n    return (\n        <div className={classes.root}>\n            <Fade in={dragging || loading}>\n                <div className={classes.transparentBackground} />\n            </Fade>\n        </div>\n    );\n}\n","import { BufferAdapter } from \"./buffer\";\n\nexport enum SegmentType {\n    pds = 20,\n    ods = 21,\n    pcs = 22,\n    wds = 23,\n    end = 128,\n}\n\nconst segmentTypeValues = Object.values(SegmentType);\n\nexport function segmentTypeFromByte(byte: number) {\n    for (const type of segmentTypeValues) {\n        if (byte === type) {\n            return type;\n        }\n    }\n\n    throw new Error(`Invalid segment type byte: ${byte}`);\n}\n\nexport enum CompositionState {\n    normal = 0,\n    acquisitionState = 64,\n    epochStart = 128,\n}\n\nconst compositionStateValues = Object.values(CompositionState);\n\nexport function compositionStateFromByte(byte: number) {\n    for (const state of compositionStateValues) {\n        if (byte === state) {\n            return state;\n        }\n    }\n\n    throw new Error(`Invalid composition state byte: ${byte}`);\n}\n\nexport function paletteUpdateFlagFromByte(byte: number) {\n    switch (byte) {\n        case 0:\n            return false;\n        case 128:\n            return true;\n        default:\n            throw new Error(`Invalid palette update flag byte: ${byte}`);\n    }\n}\n\nexport function objectCroppedFlagFromByte(byte: number) {\n    switch (byte) {\n        case 0:\n            return false;\n        case 64:\n            return true;\n        default:\n            throw new Error(`Invalid object cropped flag byte: ${byte}`);\n    }\n}\n\nexport enum LastInSequenceFlag {\n    lastInSequence = 64,\n    firstInSequence = 128,\n    firstAndLastInSequence = 192,\n}\n\nconst lastInSequenceFlagValues = Object.values(LastInSequenceFlag);\n\nexport function lastInSequenceFlagFromByte(byte: number) {\n    for (const flag of lastInSequenceFlagValues) {\n        if (byte === flag) {\n            return flag;\n        }\n    }\n\n    throw new Error(`Invalid last in sequence flag byte: ${byte}`);\n}\n\nexport interface SegmentHeader {\n    presentationTimestamp: number;\n    decodingTimestamp: number;\n    segmentType: SegmentType;\n    segmentSize: number;\n}\n\nexport interface Segment {\n    readonly header: SegmentHeader;\n}\n\nexport interface PresentationCompositionSegment extends Segment {\n    readonly width: number;\n    readonly height: number;\n    readonly compositionNumber: number;\n    readonly compositionState: CompositionState;\n    readonly paletteUpdateFlag: boolean;\n    readonly paletteId: number;\n    readonly compositionObjectCount: number;\n    readonly objectId: number;\n    readonly windowId: number;\n    readonly objectCroppedFlag: boolean;\n    readonly objectHorizontalPosition: number;\n    readonly objectVerticalPosition: number;\n    readonly objectCroppingHorizontalPosition: number;\n    readonly objectCroppingVerticalPosition: number;\n    readonly objectCroppingWidth: number;\n    readonly objectCroppingHeightPosition: number;\n}\n\nexport interface WindowDefinition {\n    readonly windowId: number;\n    readonly windowHorizontalPosition: number;\n    readonly windowVerticalPosition: number;\n    readonly windowWidth: number;\n    readonly windowHeight: number;\n}\n\nexport interface WindowDefinitionSegment extends Segment {\n    readonly windowCount: number;\n    readonly windowDefinitions: WindowDefinition[];\n}\n\nexport interface PaletteEntry {\n    readonly paletteEntryId: number;\n    readonly luminance: number;\n    readonly colorDifferenceRed: number;\n    readonly colorDifferenceBlue: number;\n    readonly transparency: number;\n}\n\nexport interface PaletteDefinitionSegment extends Segment {\n    readonly paletteId: number;\n    readonly paletteVersionNumber: number;\n    readonly paletteEntries: PaletteEntry[];\n}\n\nexport interface ObjectDefinitionSegment extends Segment {\n    readonly objectId: number;\n    readonly objectVersionNumber: number;\n    readonly lastInSequenceFlag: LastInSequenceFlag;\n    readonly objectDataLength: number;\n    readonly width?: number;\n    readonly height?: number;\n    readonly objectData: BufferAdapter;\n}\n","export interface BufferAdapter {\n    length: number;\n    at(index: number): number;\n    subarray(start: number, end: number): BufferAdapter;\n}\n\nexport class Uint8ArrayBuffer implements BufferAdapter {\n    private readonly buffer: Uint8Array;\n\n    constructor(buffer: Uint8Array) {\n        this.buffer = buffer;\n    }\n\n    get length() {\n        return this.buffer.length;\n    }\n\n    at(index: number): number {\n        return this.buffer[index];\n    }\n\n    subarray(start: number, end: number) {\n        return new Uint8ArrayBuffer(this.buffer.subarray(start, end));\n    }\n}\n\nexport class CompositeBuffer implements BufferAdapter {\n    private readonly buffers: BufferAdapter[] = [];\n\n    constructor(buffers: BufferAdapter[]) {\n        this.buffers = buffers;\n    }\n\n    get length(): number {\n        let length = 0;\n        for (const b of this.buffers) {\n            length += b.length;\n        }\n\n        return length;\n    }\n\n    at(index: number): number {\n        let previousBuffersLength = 0;\n\n        for (const buffer of this.buffers) {\n            const bufferIndex = index - previousBuffersLength;\n\n            if (bufferIndex < buffer.length) {\n                return buffer.at(bufferIndex);\n            }\n\n            previousBuffersLength += buffer.length;\n        }\n\n        throw new Error('Out of bounds');\n    }\n\n    subarray(start: number, end: number): BufferAdapter {\n        const chunks: BufferAdapter[] = [];\n        let previousBuffersLength = 0;\n\n        for (const buffer of this.buffers) {\n            const startBufferIndex = Math.max(0, start - previousBuffersLength);\n            const endBufferIndex = Math.min(buffer.length, end - previousBuffersLength);\n\n            if (endBufferIndex > 0 && startBufferIndex < endBufferIndex) {\n                chunks.push(buffer.subarray(startBufferIndex, endBufferIndex));\n            }\n\n            previousBuffersLength += buffer.length;\n        }\n\n        return new CompositeBuffer(chunks);\n    }\n}\n\nexport class CompositeBufferReader {\n    private buffers: Uint8Array[] = [];\n\n    add(buffer: Uint8Array) {\n        this.buffers.push(buffer);\n    }\n\n    get length(): number {\n        let length = 0;\n\n        for (const buffer of this.buffers) {\n            length += buffer.length;\n        }\n\n        return length;\n    }\n\n    read(bytes: number): BufferAdapter {\n        if (bytes === 0) {\n            return new CompositeBuffer([]);\n        }\n\n        const chunks: Uint8Array[] = [];\n        let accumulated = 0;\n\n        while (true) {\n            if (this.buffers.length === 0) {\n                throw new Error('Trying to read more bytes than available');\n            }\n\n            const buffer = this.buffers.shift()!;\n            const required = bytes - accumulated;\n\n            if (buffer.length === required) {\n                chunks.push(buffer);\n                break;\n            } else if (buffer.length > required) {\n                chunks.push(buffer.subarray(0, required));\n                this.buffers.unshift(buffer.subarray(required, buffer.length));\n                break;\n            }\n\n            accumulated += buffer.length;\n            chunks.push(buffer);\n        }\n\n        return new CompositeBuffer(chunks.map(c => new Uint8ArrayBuffer(c)));\n    }\n}\n\nexport class BufferGenerator {\n    private stream: ReadableStream;\n    private accumulatedBuffer: CompositeBufferReader = new CompositeBufferReader();\n\n    requestedBytes: number = 0;\n\n    constructor(stream: ReadableStream) {\n        this.stream = stream;\n    }\n\n    async *buffers() {\n        const reader = this.stream.getReader();\n\n        while (true) {\n            if (this.accumulatedBuffer.length >= this.requestedBytes) {\n                yield this.accumulatedBuffer.read(this.requestedBytes);\n            } else {\n                const result = await reader.read();\n\n                if (result.done) {\n                    break;\n                }\n\n                this.accumulatedBuffer.add(result.value as Uint8Array);\n            }\n        }\n    }\n}\n\nexport class BufferReader {\n    private buffer: BufferAdapter;\n    private _index: number = 0;\n\n    constructor(bytes: BufferAdapter) {\n        this.buffer = bytes;\n    }\n\n    get index() {\n        return this._index;\n    }\n\n    get hasNext() {\n        return this._index < this.buffer.length;\n    }\n\n    readHex(bytes: number, limit?: number) {\n        if (limit !== undefined && this._index + bytes > limit) {\n            return 0;\n        }\n\n        let number = 0;\n        let digit = 0;\n        const from = this._index;\n        const to = this._index + bytes - 1;\n\n        for (let i = to; i >= from; --i) {\n            number += this.buffer.at(i) << (8 * digit);\n            ++digit;\n        }\n\n        this._index += bytes;\n        return number;\n    }\n\n    readBuffer(bytes: number) {\n        const buffer = this.buffer.subarray(this.index, this.index + bytes);\n        this._index += bytes;\n        return buffer;\n    }\n}\n","import { BufferAdapter, BufferGenerator, BufferReader, CompositeBuffer } from './buffer';\nimport {\n    CompositionState,\n    compositionStateFromByte,\n    LastInSequenceFlag,\n    lastInSequenceFlagFromByte,\n    objectCroppedFlagFromByte,\n    ObjectDefinitionSegment,\n    PaletteDefinitionSegment,\n    PaletteEntry,\n    paletteUpdateFlagFromByte,\n    PresentationCompositionSegment,\n    Segment,\n    SegmentHeader,\n    SegmentType,\n    segmentTypeFromByte,\n    WindowDefinitionSegment,\n} from './segment';\n\nconst pgMagicNumber = 20551; // 0x5047\n\nexport class RunLengthEncodedBuffer {\n    private readonly encodedBuffer: BufferAdapter;\n\n    constructor(encodedBuffer: BufferAdapter) {\n        this.encodedBuffer = encodedBuffer;\n    }\n\n    decode(callback: (x: number, y: number, color: number) => void) {\n        let encodedIndex = 0;\n        let decodedLineIndex = 0;\n        let currentLine = 0;\n        const encodedLength = this.encodedBuffer.length;\n\n        while (encodedIndex < encodedLength) {\n            const firstByte = this.encodedBuffer.at(encodedIndex);\n            let runLength;\n            let color;\n            let increment;\n\n            // Deal with each possible code\n            if (firstByte > 0) {\n                // CCCCCCCC\t- One pixel in color C\n                color = firstByte;\n                runLength = 1;\n                increment = 1;\n            } else {\n                const secondByte = this.encodedBuffer.at(encodedIndex + 1);\n\n                if (secondByte === 0) {\n                    // 00000000 00000000 - End of line\n                    color = 0;\n                    runLength = 0;\n                    increment = 2;\n                    decodedLineIndex = 0;\n                    ++currentLine;\n                } else if (secondByte < 64) {\n                    // 00000000 00LLLLLL - L pixels in color 0 (L between 1 and 63)\n                    color = 0;\n                    runLength = secondByte;\n                    increment = 2;\n                } else if (secondByte < 128) {\n                    // 00000000 01LLLLLL LLLLLLLL - L pixels in color 0 (L between 64 and 16383)\n                    const thirdByte = this.encodedBuffer.at(encodedIndex + 2);\n                    color = 0;\n                    runLength = ((secondByte - 64) << 8) + thirdByte;\n                    increment = 3;\n                } else if (secondByte < 192) {\n                    // 00000000 10LLLLLL CCCCCCCC - L pixels in color C (L between 3 and 63)\n                    const thirdByte = this.encodedBuffer.at(encodedIndex + 2);\n                    color = thirdByte;\n                    runLength = secondByte - 128;\n                    increment = 3;\n                } else {\n                    // 00000000 11LLLLLL LLLLLLLL CCCCCCCC - L pixels in color C (L between 64 and 16383)\n                    const thirdByte = this.encodedBuffer.at(encodedIndex + 2);\n                    const fourthByte = this.encodedBuffer.at(encodedIndex + 3);\n                    color = fourthByte;\n                    runLength = ((secondByte - 192) << 8) + thirdByte;\n                    increment = 4;\n                }\n            }\n\n            if (runLength > 0) {\n                for (let x = decodedLineIndex; x < decodedLineIndex + runLength; ++x) {\n                    callback(x, currentLine, color);\n                }\n                // decodedLine.fill(color, decodedLineIndex, decodedLineIndex + runLength);\n                decodedLineIndex += runLength;\n            }\n\n            encodedIndex += increment;\n        }\n    }\n}\n\nexport class DisplaySet {\n    readonly presentationCompositionSegment: PresentationCompositionSegment;\n    readonly windowDefinitionSegments: WindowDefinitionSegment[];\n    readonly paletteDefinitionSegments: PaletteDefinitionSegment[];\n    readonly objectDefinitionSegments: ObjectDefinitionSegment[];\n    readonly endDefinitionSegment: Segment;\n\n    private readonly previousDisplaySet?: DisplaySet;\n\n    constructor(\n        presentationCompositionSegment: PresentationCompositionSegment,\n        windowDefinitionSegments: WindowDefinitionSegment[],\n        paletteDefinitionSegments: PaletteDefinitionSegment[],\n        objectDefinitionSegments: ObjectDefinitionSegment[],\n        endDefinitionSegment: Segment,\n        previousDisplaySet?: DisplaySet\n    ) {\n        this.presentationCompositionSegment = presentationCompositionSegment;\n        this.windowDefinitionSegments = windowDefinitionSegments;\n        this.paletteDefinitionSegments = paletteDefinitionSegments;\n        this.objectDefinitionSegments = objectDefinitionSegments;\n        this.endDefinitionSegment = endDefinitionSegment;\n        this.previousDisplaySet = previousDisplaySet;\n    }\n\n    get firstOds() {\n        return this.objectDefinitionSegments.find(\n            (ods) =>\n                ods.lastInSequenceFlag === LastInSequenceFlag.firstInSequence ||\n                ods.lastInSequenceFlag === LastInSequenceFlag.firstAndLastInSequence\n        );\n    }\n\n    protected paletteDefinitionSegment(paletteId: number): PaletteDefinitionSegment | undefined {\n        const pds = this.paletteDefinitionSegments.find((s) => s.paletteId === paletteId);\n\n        if (pds === undefined) {\n            if (this.presentationCompositionSegment.compositionState !== CompositionState.normal) {\n                throw new Error(`PCS references invalid PDS and composition state is not 'normal'`);\n            }\n\n            if (this.previousDisplaySet === undefined) {\n                throw new Error(`PCS references invalid PDS and no previous display set to fallback to`);\n            }\n\n            return this.previousDisplaySet.paletteDefinitionSegment(paletteId);\n        }\n\n        return pds;\n    }\n\n    imageData(buffer?: Uint8ClampedArray) {\n        const pds = this.paletteDefinitionSegment(this.presentationCompositionSegment.paletteId);\n\n        if (pds === undefined) {\n            throw new Error(`PCS references invalid PDS`);\n        }\n\n        const firstOds = this.firstOds;\n\n        if (firstOds === undefined || firstOds.width === undefined || firstOds.height === undefined) {\n            throw new Error(`Missing first ODS with defined width and height`);\n        }\n\n        const imageDataArray = buffer ?? new Uint8ClampedArray(firstOds.width * firstOds.height * 4);\n        const rgbaPalette = pds.paletteEntries.map((palette) => this.ycrcbToRgba(palette));\n        const width = firstOds.width;\n\n        new RunLengthEncodedBuffer(\n            new CompositeBuffer(this.objectDefinitionSegments.map((ods) => ods.objectData))\n        ).decode((x, y, paletteIndex) => {\n            const pixelIndex = y * width + x;\n            const imageDataOffset = pixelIndex * 4;\n\n            if (paletteIndex >= rgbaPalette.length) {\n                imageDataArray[imageDataOffset] = 0;\n                imageDataArray[imageDataOffset + 1] = 0;\n                imageDataArray[imageDataOffset + 2] = 0;\n                imageDataArray[imageDataOffset + 3] = 0;\n            } else {\n                const color = rgbaPalette[paletteIndex];\n                imageDataArray[imageDataOffset] = color.r;\n                imageDataArray[imageDataOffset + 1] = color.g;\n                imageDataArray[imageDataOffset + 2] = color.b;\n                imageDataArray[imageDataOffset + 3] = color.a;\n            }\n        });\n\n        return new ImageData(\n            imageDataArray.subarray(0, 4 * firstOds.width * firstOds.height),\n            firstOds.width,\n            firstOds.height\n        );\n    }\n\n    // https://stackoverflow.com/questions/21264648/javascript-convert-yuv-to-rgb\n    private ycrcbToRgba(palette: PaletteEntry) {\n        const y = palette.luminance;\n        const cb = palette.colorDifferenceBlue;\n        const cr = palette.colorDifferenceRed;\n\n        const r = this.clamp(Math.floor(y + 1.4075 * (cr - 128)), 0, 255);\n        const g = this.clamp(Math.floor(y - 0.3455 * (cb - 128) - 0.7169 * (cr - 128)), 0, 255);\n        const b = this.clamp(Math.floor(y + 1.779 * (cb - 128)), 0, 255);\n        return { r, g, b, a: palette.transparency };\n    }\n\n    private clamp(number: number, min: number, max: number) {\n        return Math.max(min, Math.min(max, number));\n    }\n}\n\nexport async function* parseDisplaySets(s: ReadableStream) {\n    const bufferGenerator = new BufferGenerator(s);\n    bufferGenerator.requestedBytes = 13;\n\n    let header: SegmentHeader | undefined;\n    let lastDisplaySet: DisplaySet | undefined;\n    let presentationCompositionSegment: PresentationCompositionSegment | undefined;\n    let windowDefinitionSegments: WindowDefinitionSegment[] = [];\n    let paletteDefinitionSegments: PaletteDefinitionSegment[] = [];\n    let objectDefinitionSegments: ObjectDefinitionSegment[] = [];\n\n    for await (const buffer of bufferGenerator.buffers()) {\n        const reader = new BufferReader(buffer);\n\n        if (header) {\n            switch (header.segmentType) {\n                case SegmentType.pcs:\n                    if (presentationCompositionSegment !== undefined) {\n                        throw new Error(`Unexpected PDS`);\n                    }\n\n                    presentationCompositionSegment = parsePcsSegment(reader, header);\n                    break;\n                case SegmentType.wds:\n                    if (presentationCompositionSegment === undefined) {\n                        throw new Error(`Unexpected WDS`);\n                    }\n\n                    windowDefinitionSegments.push(parseWdsSegment(reader, header));\n                    break;\n                case SegmentType.pds:\n                    if (presentationCompositionSegment === undefined) {\n                        throw new Error(`Unexpected PDS`);\n                    }\n\n                    paletteDefinitionSegments.push(parsePdsSegment(reader, header));\n                    break;\n                case SegmentType.ods:\n                    if (presentationCompositionSegment === undefined) {\n                        throw new Error(`Unexpected ODS`);\n                    }\n\n                    const ods = parseOdsSegment(reader, header);\n                    objectDefinitionSegments.push(ods);\n                    break;\n                case SegmentType.end:\n                    if (presentationCompositionSegment === undefined) {\n                        throw new Error(`Unexpected end segment`);\n                    }\n\n                    const endDefinitionSegment = { header };\n                    lastDisplaySet = new DisplaySet(\n                        presentationCompositionSegment,\n                        windowDefinitionSegments,\n                        paletteDefinitionSegments,\n                        objectDefinitionSegments,\n                        endDefinitionSegment,\n                        lastDisplaySet\n                    );\n\n                    yield lastDisplaySet;\n\n                    presentationCompositionSegment = undefined;\n                    windowDefinitionSegments = [];\n                    paletteDefinitionSegments = [];\n                    objectDefinitionSegments = [];\n                    break;\n                default:\n                    throw new Error(`Unknown segment type: ${header.segmentType}`);\n            }\n\n            header = undefined;\n            bufferGenerator.requestedBytes = 13;\n        } else {\n            const magicNumber = reader.readHex(2);\n\n            if (magicNumber !== pgMagicNumber) {\n                throw new Error(`Invalid magic number: ${magicNumber}`);\n            }\n\n            const presentationTimestamp = reader.readHex(4);\n            const decodingTimestamp = reader.readHex(4);\n            const segmentType = segmentTypeFromByte(reader.readHex(1));\n            const segmentSize = reader.readHex(2);\n            header = { presentationTimestamp, decodingTimestamp, segmentType, segmentSize };\n            bufferGenerator.requestedBytes = segmentSize;\n        }\n    }\n}\n\nfunction parsePcsSegment(reader: BufferReader, header: SegmentHeader): PresentationCompositionSegment {\n    const limit = reader.index + header.segmentSize;\n    const width = reader.readHex(2, limit);\n    const height = reader.readHex(2, limit);\n    reader.readHex(1); // ignore frame rate\n    const compositionNumber = reader.readHex(2, limit);\n    const compositionState = compositionStateFromByte(reader.readHex(1, limit));\n    const paletteUpdateFlag = paletteUpdateFlagFromByte(reader.readHex(1, limit));\n    const paletteId = reader.readHex(1, limit);\n    const compositionObjectCount = reader.readHex(1, limit);\n    const objectId = reader.readHex(2, limit);\n    const windowId = reader.readHex(1, limit);\n    const objectCroppedFlag = objectCroppedFlagFromByte(reader.readHex(1, limit));\n    const objectHorizontalPosition = reader.readHex(2, limit);\n    const objectVerticalPosition = reader.readHex(2, limit);\n    const objectCroppingHorizontalPosition = reader.readHex(2, limit);\n    const objectCroppingVerticalPosition = reader.readHex(2, limit);\n    const objectCroppingWidth = reader.readHex(2, limit);\n    const objectCroppingHeightPosition = reader.readHex(2, limit);\n\n    return {\n        header,\n        width,\n        height,\n        compositionNumber,\n        compositionState,\n        paletteUpdateFlag,\n        paletteId,\n        compositionObjectCount,\n        objectId,\n        windowId,\n        objectCroppedFlag,\n        objectHorizontalPosition,\n        objectVerticalPosition,\n        objectCroppingHorizontalPosition,\n        objectCroppingVerticalPosition,\n        objectCroppingWidth,\n        objectCroppingHeightPosition,\n    };\n}\n\nfunction parseWdsSegment(reader: BufferReader, header: SegmentHeader): WindowDefinitionSegment {\n    const limit = reader.index + header.segmentSize;\n    const windowCount = reader.readHex(1, limit);\n    const windowDefinitions = [];\n\n    for (let i = 0; i < windowCount; ++i) {\n        const windowId = reader.readHex(1, limit);\n        const windowHorizontalPosition = reader.readHex(2, limit);\n        const windowVerticalPosition = reader.readHex(2, limit);\n        const windowWidth = reader.readHex(2, limit);\n        const windowHeight = reader.readHex(2, limit);\n\n        windowDefinitions.push({\n            windowId,\n            windowHorizontalPosition,\n            windowVerticalPosition,\n            windowWidth,\n            windowHeight,\n        });\n    }\n\n    return {\n        header,\n        windowCount,\n        windowDefinitions,\n    };\n}\n\nfunction parsePdsSegment(reader: BufferReader, header: SegmentHeader): PaletteDefinitionSegment {\n    const limit = reader.index + header.segmentSize;\n    const paletteId = reader.readHex(1, limit);\n    const paletteVersionNumber = reader.readHex(1, limit);\n    const paletteEntries: PaletteEntry[] = [];\n\n    while (reader.index < limit) {\n        const paletteEntryId = reader.readHex(1, limit);\n        const luminance = reader.readHex(1, limit);\n        const colorDifferenceRed = reader.readHex(1, limit);\n        const colorDifferenceBlue = reader.readHex(1, limit);\n        const transparency = reader.readHex(1, limit);\n        paletteEntries.push({ paletteEntryId, luminance, colorDifferenceRed, colorDifferenceBlue, transparency });\n    }\n\n    return {\n        header,\n        paletteId,\n        paletteVersionNumber,\n        paletteEntries,\n    };\n}\n\nfunction parseOdsSegment(reader: BufferReader, header: SegmentHeader): ObjectDefinitionSegment {\n    const objectId = reader.readHex(2);\n    const objectVersionNumber = reader.readHex(1);\n    const lastInSequenceFlag = lastInSequenceFlagFromByte(reader.readHex(1));\n    const objectDataLength = reader.readHex(3);\n    let width: number | undefined;\n    let height: number | undefined;\n    let objectData: BufferAdapter;\n\n    if (\n        lastInSequenceFlag === LastInSequenceFlag.firstInSequence ||\n        lastInSequenceFlag === LastInSequenceFlag.firstAndLastInSequence\n    ) {\n        width = reader.readHex(2);\n        height = reader.readHex(2);\n        objectData = reader.readBuffer(objectDataLength - 4);\n    } else {\n        objectData = reader.readBuffer(objectDataLength);\n    }\n\n    return {\n        header,\n        objectId,\n        objectVersionNumber,\n        lastInSequenceFlag,\n        objectDataLength,\n        width,\n        height,\n        objectData: objectData,\n    };\n}\n","import { compile as parseAss } from 'ass-compiler';\nimport { Cue, Node, parseSync as parseSrt, stringifySync as writeSrt } from 'subtitle';\nimport { WebVTT } from 'vtt.js';\nimport { XMLParser } from 'fast-xml-parser';\nimport { DisplaySet, parseDisplaySets as parsePgsDisplaySets } from './pgs-parser';\nimport { SubtitleTextImage } from '@project/common';\n\nconst tagRegex = RegExp('</?([^>]*)>', 'ig');\nconst assNewLineRegex = RegExp(/\\\\[nN]/, 'ig');\nconst helperElement = document.createElement('div');\nconst helperCanvas = document.createElement('canvas');\n\ninterface SubtitleNode {\n    start: number;\n    end: number;\n    text: string;\n    textImage?: SubtitleTextImage;\n    track: number;\n}\n\nexport default class SubtitleReader {\n    private xmlParser?: XMLParser;\n\n    async subtitles(files: File[]) {\n        return (await Promise.all(files.map((f, i) => this._subtitles(f, i))))\n            .flatMap((nodes) => nodes)\n            .sort((n1, n2) => n1.start - n2.start);\n    }\n\n    async _subtitles(file: File, track: number): Promise<SubtitleNode[]> {\n        if (file.name.endsWith('.srt')) {\n            const nodes = parseSrt(await file.text());\n            return nodes\n                .filter((node) => node.type === 'cue')\n                .map((node) => {\n                    const cue = node.data as Cue;\n                    return {\n                        start: cue.start,\n                        end: cue.end,\n                        text: cue.text.replace(tagRegex, ''),\n                        track: track,\n                    };\n                });\n        }\n\n        if (file.name.endsWith('.vtt') || file.name.endsWith('.nfvtt')) {\n            return new Promise(async (resolve, reject) => {\n                const isFromNetflix = file.name.endsWith('.nfvtt');\n                const parser = new WebVTT.Parser(window, WebVTT.StringDecoder());\n                const cues: any[] = [];\n                parser.oncue = (c: any) => {\n                    if (isFromNetflix) {\n                        c.text = c.text.replace(tagRegex, '');\n\n                        const lines = c.text.split('\\n');\n                        const newLines = [];\n\n                        for (const line of lines) {\n                            newLines.push(this._fixRTL(line));\n                        }\n\n                        c.text = newLines.join('\\n');\n                    }\n                    cues.push(c);\n                };\n                parser.onflush = () =>\n                    resolve(\n                        cues.map((c) => ({\n                            start: Math.floor(c.startTime * 1000),\n                            end: Math.floor(c.endTime * 1000),\n                            text: c.text as string,\n                            track: track,\n                        }))\n                    );\n                parser.parse(await file.text());\n                parser.flush();\n            });\n        }\n\n        if (file.name.endsWith('.ass')) {\n            const nodes = parseAss(await file.text(), {});\n            return nodes.dialogues.map((dialogue) => {\n                return {\n                    start: Math.round(dialogue.start * 1000),\n                    end: Math.round(dialogue.end * 1000),\n                    text: dialogue.slices\n                        .flatMap((slice) => slice.fragments.map((fragment) => fragment.text))\n                        .join('')\n                        .replace(assNewLineRegex, '\\n'),\n                    track: track,\n                };\n            });\n        }\n\n        if (file.name.endsWith('.ytxml')) {\n            const text = await file.text();\n            const xml = this._xmlParser().parse(text);\n\n            if (Object.keys(xml).length === 0) {\n                return [];\n            }\n\n            const textNodes = xml['transcript']['text'];\n            const subtitles = [];\n\n            for (let index = 0, length = textNodes.length; index < length; index++) {\n                const elm = textNodes[index];\n\n                if (!('#text' in elm) || !('@_dur' in elm) || !('@_start' in elm)) {\n                    continue;\n                }\n\n                const start = parseFloat(elm['@_start']);\n\n                subtitles.push({\n                    start: Math.floor(start * 1000),\n                    end: Math.floor((start + parseFloat(elm['@_dur'])) * 1000),\n                    text: this._decodeHTML(String(elm['#text']).replace(tagRegex, '')),\n                    track,\n                });\n            }\n\n            return subtitles;\n        }\n\n        if (file.name.endsWith('.sup')) {\n            let imageDataArray: Uint8ClampedArray | undefined;\n            const subtitles = [];\n            let currentImageDisplaySet: DisplaySet | undefined;\n\n            // FIXME: Figure out how to remove conflicts with @types/node ReadableStream\n            // @ts-ignore\n            for await (const displaySet of parsePgsDisplaySets(file.stream())) {\n                if (displaySet.objectDefinitionSegments.length > 0) {\n                    if (currentImageDisplaySet === undefined) {\n                        currentImageDisplaySet = displaySet;\n                    }\n                } else if (currentImageDisplaySet !== undefined) {\n                    const screenWidth = currentImageDisplaySet.presentationCompositionSegment.width;\n                    const screenHeight = currentImageDisplaySet.presentationCompositionSegment.height;\n                    imageDataArray =\n                        imageDataArray === undefined || imageDataArray.length < screenHeight * screenWidth * 4\n                            ? new Uint8ClampedArray(screenWidth * screenHeight * 4)\n                            : imageDataArray;\n                    const imageData = currentImageDisplaySet.imageData(imageDataArray);\n                    helperCanvas.width = imageData.width;\n                    helperCanvas.height = imageData.height;\n                    const context = helperCanvas.getContext('2d')!;\n                    context.putImageData(imageData, 0, 0);\n                    subtitles.push({\n                        start:\n                            currentImageDisplaySet.objectDefinitionSegments[0].header.presentationTimestamp / 90 ?? 0,\n                        end: displaySet.endDefinitionSegment.header.presentationTimestamp / 90,\n                        text: '',\n                        textImage: {\n                            dataUrl: helperCanvas.toDataURL('image/png'),\n                            image: {\n                                width: imageData.width,\n                                height: imageData.height,\n                            },\n                            screen: {\n                                width: currentImageDisplaySet.presentationCompositionSegment.width,\n                                height: currentImageDisplaySet.presentationCompositionSegment.height,\n                            },\n                        },\n                        track,\n                    });\n\n                    currentImageDisplaySet = undefined;\n                }\n            }\n\n            return subtitles;\n        }\n\n        throw new Error('Unsupported subtitle file format');\n    }\n\n    _fixRTL(line: string): string {\n        const index1 = line.indexOf('&lrm;');\n        const index2 = line.indexOf('&rlm;');\n        let newLine = '';\n\n        if (index1 > -1) {\n            newLine = line.substring(0, index1) + '\\u202a' + line.substring(index1 + 5) + '\\u202c';\n            return this._fixRTL(newLine);\n        } else if (index2 > -1) {\n            newLine = line.substring(0, index2) + '\\u202b' + line.substring(index2 + 5) + '\\u202c';\n            return this._fixRTL(newLine);\n        }\n\n        return line;\n    }\n\n    _decodeHTML(text: string): string {\n        helperElement.innerHTML = text;\n        return helperElement.childNodes.length === 0 ? '' : helperElement.childNodes[0].nodeValue!;\n    }\n\n    _xmlParser() {\n        if (this.xmlParser === undefined) {\n            this.xmlParser = new XMLParser({ ignoreAttributes: false });\n        }\n\n        return this.xmlParser;\n    }\n\n    subtitlesToSrt(subtitles: SubtitleNode[]) {\n        const nodes: Node[] = subtitles.map((subtitleNode) => {\n            return {\n                type: 'cue',\n                data: {\n                    start: subtitleNode.start,\n                    end: subtitleNode.end,\n                    text: subtitleNode.text,\n                },\n            };\n        });\n        return writeSrt(nodes, { format: 'SRT' });\n    }\n\n    async filesToSrt(files: File[]) {\n        return this.subtitlesToSrt(await this.subtitles(files));\n    }\n}\n","import { makeStyles, Theme } from '@material-ui/core/styles';\nimport clsx from 'clsx';\nimport AppBar from '@material-ui/core/AppBar';\nimport BugReportIcon from '@material-ui/icons/BugReport';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport HelpIcon from '@material-ui/icons/Help';\nimport FolderIcon from '@material-ui/icons/Folder';\nimport IconButton from '@material-ui/core/IconButton';\nimport ListIcon from '@material-ui/icons/List';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Tooltip, { TooltipProps } from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Popover from '@material-ui/core/Popover';\nimport { useCallback, useState } from 'react';\n\ninterface BarProps {\n    drawerWidth: number;\n    drawerOpen: boolean;\n    hidden: boolean;\n    title: string;\n    subtitleFiles?: File[];\n    onFileSelector: () => void;\n    onDownloadSubtitleFilesAsSrt: () => void;\n    onOpenSettings: () => void;\n    onOpenCopyHistory: () => void;\n}\n\ninterface StyleProps {\n    drawerWidth: number;\n}\n\nconst useStyles = makeStyles<Theme, StyleProps, string>((theme) => ({\n    title: {\n        flexGrow: 1,\n    },\n    leftButton: {\n        marginRight: theme.spacing(1),\n    },\n    appBar: {\n        transition: theme.transitions.create(['margin', 'width'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n    },\n    appBarShift: {\n        width: ({ drawerWidth }) => `calc(100% - ${drawerWidth}px)`,\n        transition: theme.transitions.create(['margin', 'width'], {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n        marginRight: ({ drawerWidth }) => drawerWidth,\n    },\n    copyHistoryButton: {\n        transform: 'scaleX(1)',\n        width: 48,\n        padding: 12,\n        transition: theme.transitions.create(['transform', 'padding', 'width'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n    },\n    copyHistoryButtonShift: {\n        transform: 'scaleX(0)',\n        width: 0,\n        padding: 5,\n        transition: theme.transitions.create(['transform', 'padding', 'width'], {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    hide: {\n        display: 'none',\n    },\n}));\n\ninterface CopyHistoryTooltipStylesProps {\n    show: boolean;\n}\n\ninterface CopyHistoryTooltipProps extends TooltipProps {\n    show: boolean;\n}\n\nconst useCopyHistoryTooltipStyles = makeStyles<Theme, CopyHistoryTooltipStylesProps, string>((theme) => ({\n    tooltip: ({ show }) => ({\n        display: show ? 'block' : 'none',\n    }),\n}));\n\nfunction CopyHistoryTooltip({ show, ...toolTipProps }: CopyHistoryTooltipProps) {\n    const classes = useCopyHistoryTooltipStyles({ show: show });\n    return <Tooltip classes={classes} {...toolTipProps} />;\n}\n\nexport default function Bar({\n    drawerWidth,\n    drawerOpen,\n    hidden,\n    title,\n    subtitleFiles,\n    onOpenSettings,\n    onOpenCopyHistory,\n    onFileSelector,\n    onDownloadSubtitleFilesAsSrt,\n}: BarProps) {\n    const classes = useStyles({ drawerWidth });\n    const [menuOpen, setMenuOpen] = useState<boolean>(false);\n    const [menuAnchorEl, setMenuAnchorEl] = useState<HTMLElement>();\n    const canSaveAsSrt =\n        subtitleFiles !== undefined && subtitleFiles.find((f) => !f.name.endsWith('.sup')) !== undefined;\n\n    const handleFileAction = useCallback(\n        (event: React.MouseEvent<HTMLButtonElement>) => {\n            if (canSaveAsSrt) {\n                setMenuAnchorEl(event.currentTarget);\n                setMenuOpen(true);\n            } else {\n                onFileSelector();\n            }\n        },\n        [onFileSelector, canSaveAsSrt]\n    );\n\n    const handleMenuClose = useCallback(() => {\n        setMenuOpen(false);\n    }, []);\n\n    const handleOpenFilesFromMenu = useCallback(() => {\n        setMenuOpen(false);\n        onFileSelector();\n    }, [onFileSelector]);\n\n    const handleDownloadSubtitleFilesAsSrt = useCallback(() => {\n        setMenuOpen(false);\n        onDownloadSubtitleFilesAsSrt();\n    }, [onDownloadSubtitleFilesAsSrt]);\n\n    return (\n        <>\n            {canSaveAsSrt && (\n                <Popover\n                    open={menuOpen}\n                    anchorEl={menuAnchorEl}\n                    onClose={handleMenuClose}\n                    anchorOrigin={{\n                        vertical: 'bottom',\n                        horizontal: 'center',\n                    }}\n                >\n                    <List>\n                        <ListItem button onClick={handleOpenFilesFromMenu}>\n                            Open Files\n                        </ListItem>\n                        <ListItem button onClick={handleDownloadSubtitleFilesAsSrt}>\n                            Download Subtitles as SRT\n                        </ListItem>\n                    </List>\n                </Popover>\n            )}\n            <AppBar\n                position=\"static\"\n                elevation={0}\n                className={clsx(classes.appBar, {\n                    [classes.appBarShift]: drawerOpen,\n                    [classes.hide]: hidden,\n                })}\n            >\n                <Toolbar>\n                    <Tooltip\n                        disableFocusListener={canSaveAsSrt}\n                        disableHoverListener={canSaveAsSrt}\n                        disableTouchListener={canSaveAsSrt}\n                        title=\"Open Files\"\n                    >\n                        <IconButton\n                            edge=\"start\"\n                            color=\"inherit\"\n                            className={classes.leftButton}\n                            onClick={handleFileAction}\n                        >\n                            <FolderIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        {title}\n                    </Typography>\n                    <Tooltip title=\"Donate\">\n                        <IconButton\n                            edge=\"end\"\n                            color=\"inherit\"\n                            component=\"a\"\n                            href=\"https://github.com/killergerbah/asbplayer#supporters\"\n                            target=\"_blank\"\n                            rel=\"noreferrer\"\n                        >\n                            <FavoriteIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title=\"Submit Issue\">\n                        <IconButton\n                            edge=\"end\"\n                            color=\"inherit\"\n                            component=\"a\"\n                            href=\"https://github.com/killergerbah/asbplayer/issues\"\n                            target=\"_blank\"\n                            rel=\"noreferrer\"\n                        >\n                            <BugReportIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title=\"Help\">\n                        <IconButton\n                            edge=\"end\"\n                            color=\"inherit\"\n                            component=\"a\"\n                            href=\"https://github.com/killergerbah/asbplayer#usage\"\n                            target=\"_blank\"\n                            rel=\"noreferrer\"\n                        >\n                            <HelpIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title=\"Settings\">\n                        <IconButton edge=\"end\" color=\"inherit\" onClick={onOpenSettings}>\n                            <SettingsIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <CopyHistoryTooltip title=\"Mining History\" show={!drawerOpen}>\n                        <IconButton\n                            edge=\"end\"\n                            color=\"inherit\"\n                            aria-label=\"menu\"\n                            className={clsx(classes.copyHistoryButton, {\n                                [classes.copyHistoryButtonShift]: drawerOpen,\n                            })}\n                            onClick={onOpenCopyHistory}\n                        >\n                            <ListIcon />\n                        </IconButton>\n                    </CopyHistoryTooltip>\n                </Toolbar>\n            </AppBar>\n        </>\n    );\n}\n","import { AsbPlayerToVideoCommandV2, ExtensionToAsbPlayerCommandTabsCommand, Message, VideoTabModel } from '@project/common';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport interface ExtensionMessage {\n    data: Message;\n    tabId: number;\n    src: string;\n}\n\nexport default class ChromeExtension {\n    tabs: VideoTabModel[];\n\n    private readonly onMessageCallbacks: Array<(message: ExtensionMessage) => void>;\n    private readonly onTabsCallbacks: Array<(tabs: VideoTabModel[]) => void>;\n    private readonly versionPromise: Promise<string>;\n    private readonly id: string;\n\n    private versionResolve?: (value: string | PromiseLike<string>) => void;\n    private heartbeatStarted = false;\n\n    constructor() {\n        this.onMessageCallbacks = [];\n        this.onTabsCallbacks = [];\n        this.tabs = [];\n        this.versionPromise = new Promise((resolve, reject) => {\n            this.versionResolve = resolve;\n        });\n        this.id = uuidv4();\n\n        window.addEventListener('message', (event) => {\n            if (event.source !== window) {\n                return;\n            }\n\n            if (event.data.sender === 'asbplayer-extension-to-player') {\n                if (event.data.message) {\n                    if (event.data.message.command === 'tabs') {\n                        const tabsCommand = event.data as ExtensionToAsbPlayerCommandTabsCommand;\n                        this.tabs = tabsCommand.message.tabs;\n\n                        for (let c of this.onTabsCallbacks) {\n                            c(this.tabs);\n                        }\n\n                        if (tabsCommand.message.ackRequested) {\n                            window.postMessage(\n                                {\n                                    sender: 'asbplayerv2',\n                                    message: {\n                                        command: 'ackTabs',\n                                        id: this.id,\n                                        receivedTabs: this.tabs,\n                                    },\n                                },\n                                '*'\n                            );\n                        }\n\n                        return;\n                    }\n\n                    if (event.data.message.command === 'version') {\n                        this.versionResolve!(event.data.message.version);\n                        return;\n                    }\n\n                    for (let c of this.onMessageCallbacks) {\n                        c({\n                            data: event.data.message,\n                            tabId: event.data.tabId,\n                            src: event.data.src,\n                        });\n                    }\n                }\n            }\n        });\n    }\n\n    startHeartbeat() {\n        if (!this.heartbeatStarted) {\n            this._sendHeartbeat();\n            setInterval(() => this._sendHeartbeat(), 1000);\n            this.heartbeatStarted = true;\n        }\n    }\n\n    _sendHeartbeat() {\n        window.postMessage(\n            {\n                sender: 'asbplayerv2',\n                message: {\n                    command: 'heartbeat',\n                    id: this.id,\n                    receivedTabs: this.tabs,\n                },\n            },\n            '*'\n        );\n    }\n\n    async installedVersion(): Promise<string> {\n        return await this.versionPromise;\n    }\n\n    sendMessage(message: Message, tabId: number, src: string) {\n        const command: AsbPlayerToVideoCommandV2<Message> = {\n            sender: 'asbplayerv2',\n            message: message,\n            tabId: tabId,\n            src: src,\n        };\n        window.postMessage(command, '*');\n    }\n\n    publishMessage(message: Message) {\n        for (const tab of this.tabs) {\n            const command: AsbPlayerToVideoCommandV2<Message> = {\n                sender: 'asbplayerv2',\n                message: message,\n                tabId: tab.id,\n                src: tab.src,\n            };\n            window.postMessage(command, '*');\n        }\n    }\n\n    subscribeTabs(callback: (tabs: VideoTabModel[]) => void) {\n        this.onTabsCallbacks.push(callback);\n    }\n\n    unsubscribeTabs(callback: (tabs: VideoTabModel[]) => void) {\n        this._remove(callback, this.onTabsCallbacks);\n    }\n\n    subscribe(callback: (message: ExtensionMessage) => void) {\n        this.onMessageCallbacks.push(callback);\n    }\n\n    unsubscribe(callback: (message: ExtensionMessage) => void) {\n        this._remove(callback, this.onMessageCallbacks);\n    }\n\n    _remove(callback: Function, callbacks: Function[]) {\n        for (let i = callbacks.length - 1; i >= 0; --i) {\n            if (callback === callbacks[i]) {\n                callbacks.splice(i, 1);\n                break;\n            }\n        }\n    }\n}\n","import { Rgb } from '@project/common';\n\nexport function arrayEquals(a: any[], b: any[], equals = (a: any, b: any) => a === b) {\n    if (a.length !== b.length) {\n        return false;\n    }\n\n    for (let i = 0; i < a.length; ++i) {\n        if (!equals(a[i], b[i])) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nexport function keysAreEqual(a: any, b: any) {\n    for (let key in a) {\n        if (!(key in b)) {\n            return false;\n        }\n    }\n\n    for (let key in b) {\n        if (!(key in a)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n// https://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb\nfunction hexToRgb(hex: string): Rgb {\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)!;\n    return {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16),\n    };\n}\n\ninterface SubtitleStyle {\n    subtitleColor: string;\n    subtitleSize: number;\n    subtitleOutlineThickness: number;\n    subtitleOutlineColor: string;\n    subtitleBackgroundOpacity: number;\n    subtitleBackgroundColor: string;\n    subtitleFontFamily: string;\n}\n\nexport function computeStyles({\n    subtitleColor,\n    subtitleSize,\n    subtitleOutlineThickness,\n    subtitleOutlineColor,\n    subtitleBackgroundOpacity,\n    subtitleBackgroundColor,\n    subtitleFontFamily,\n}: SubtitleStyle) {\n    const styles: any = {\n        color: subtitleColor,\n        fontSize: Number(subtitleSize),\n    };\n\n    if (subtitleOutlineThickness > 0) {\n        const thickness = subtitleOutlineThickness;\n        const color = subtitleOutlineColor;\n        styles[\n            'textShadow'\n        ] = `0 0 ${thickness}px ${color}, 0 0 ${thickness}px ${color}, 0 0 ${thickness}px ${color}, 0 0 ${thickness}px ${color}`;\n    }\n\n    if (subtitleBackgroundOpacity > 0) {\n        const opacity = subtitleBackgroundOpacity;\n        const color = subtitleBackgroundColor;\n        const { r, g, b } = hexToRgb(color);\n        styles['backgroundColor'] = `rgba(${r}, ${g}, ${b}, ${opacity})`;\n    }\n\n    if (subtitleFontFamily && subtitleFontFamily.length > 0) {\n        styles['fontFamily'] = subtitleFontFamily;\n    }\n\n    return styles;\n}\n\nexport function timeDurationDisplay(\n    milliseconds: number,\n    totalMilliseconds: number,\n    includeMilliseconds = true\n): string {\n    if (milliseconds < 0) {\n        return timeDurationDisplay(0, totalMilliseconds);\n    }\n\n    milliseconds = Math.round(milliseconds);\n    const ms = milliseconds % 1000;\n    milliseconds = (milliseconds - ms) / 1000;\n    const secs = milliseconds % 60;\n    milliseconds = (milliseconds - secs) / 60;\n    const mins = milliseconds % 60;\n\n    if (totalMilliseconds >= 3600000) {\n        const hrs = (milliseconds - mins) / 60;\n\n        if (includeMilliseconds) {\n            return pad(hrs) + ':' + pad(mins) + ':' + pad(secs) + '.' + pad(ms, 3);\n        }\n\n        return pad(hrs) + ':' + pad(mins) + ':' + pad(secs);\n    }\n\n    if (includeMilliseconds) {\n        return pad(mins) + ':' + pad(secs) + '.' + pad(ms, 3);\n    }\n\n    return pad(mins) + ':' + pad(secs);\n}\n\nfunction pad(n: number, zeros: number = 2) {\n    return String(n).padStart(zeros, '0');\n}\n","import React, { useCallback, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { timeDurationDisplay } from '../services/Util';\nimport { ListItemSecondaryAction, Theme } from '@material-ui/core';\nimport Divider from '@material-ui/core/Divider';\nimport Drawer from '@material-ui/core/Drawer';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Popover from '@material-ui/core/Popover';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport StarIcon from '@material-ui/icons/Star';\nimport SaveAltIcon from '@material-ui/icons/SaveAlt';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport { AudioModel, ImageModel, SubtitleModel } from '@project/common';\n\nexport interface CopyHistoryItem extends SubtitleModel {\n    name: string;\n    id: string;\n    timestamp: number;\n    surroundingSubtitles: SubtitleModel[];\n    audioFile?: File;\n    audioTrack?: string;\n    videoFile?: File;\n    subtitleFile?: File;\n    mediaTimestamp?: number;\n    audio?: AudioModel;\n    image?: ImageModel;\n    url?: string;\n}\n\ninterface CopyHistoryProps {\n    open: boolean;\n    drawerWidth: number;\n    items: CopyHistoryItem[];\n    onClose: () => void;\n    onDelete: (item: CopyHistoryItem) => void;\n    onAnki: (item: CopyHistoryItem) => void;\n    onSelect: (item: CopyHistoryItem) => void;\n    onClipAudio: (item: CopyHistoryItem) => void;\n    onDownloadImage: (item: CopyHistoryItem) => void;\n    onDownloadSectionAsSrt: (name: string, items: CopyHistoryItem[]) => void;\n}\n\nconst useStyles = makeStyles<Theme, CopyHistoryProps, string>((theme) => ({\n    drawer: {\n        width: ({ drawerWidth }) => drawerWidth,\n        flexShrink: 0,\n    },\n    drawerPaper: {\n        width: ({ drawerWidth }) => drawerWidth,\n    },\n    drawerHeader: {\n        display: 'flex',\n        alignItems: 'center',\n        position: 'static',\n        padding: theme.spacing(0, 1),\n        // necessary for content to be below app bar\n        ...theme.mixins.toolbar,\n        justifyContent: 'flex-start',\n    },\n    listContainer: {\n        position: 'relative',\n        height: '100%',\n        overflowY: 'auto',\n        overflowX: 'hidden',\n    },\n    listItem: {\n        '&:hover': {\n            backgroundColor: theme.palette.action.hover,\n        },\n    },\n    listItemGutters: {\n        paddingLeft: 5,\n        paddingRight: 5,\n    },\n    listItemIconRoot: {\n        minWidth: 20,\n    },\n    emptyState: {\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        textAlign: 'center',\n        height: '100%',\n        padding: 15,\n    },\n    text: {\n        flexGrow: 1,\n    },\n    emptyText: {\n        flexGrow: 1,\n        color: theme.palette.text.secondary,\n    },\n    timestamp: {\n        paddingRight: 15,\n        paddingLeft: 15,\n        color: theme.palette.text.secondary,\n    },\n}));\n\ninterface MenuProps {\n    open: boolean;\n    item?: CopyHistoryItem;\n    anchorEl?: Element;\n    onClose: () => void;\n    onSelect: (item: CopyHistoryItem) => void;\n    onClipAudio: (item: CopyHistoryItem) => void;\n    onDownloadImage: (item: CopyHistoryItem) => void;\n    onDelete: (item: CopyHistoryItem) => void;\n}\n\nfunction Menu({ open, anchorEl, onClose, onSelect, onClipAudio, onDownloadImage, onDelete, item }: MenuProps) {\n    const handleCopy = useCallback(() => {\n        navigator.clipboard.writeText(item!.text);\n        onClose();\n    }, [item, onClose]);\n\n    const handleJumpTo = useCallback(() => {\n        onSelect(item!);\n        onClose();\n    }, [item, onSelect, onClose]);\n\n    const handleClipAudio = useCallback(() => {\n        onClipAudio(item!);\n        onClose();\n    }, [item, onClipAudio, onClose]);\n\n    const handleDownloadImage = useCallback(() => {\n        onDownloadImage(item!);\n        onClose();\n    }, [item, onDownloadImage, onClose]);\n\n    const handleDelete = useCallback(() => {\n        onDelete(item!);\n        onClose();\n    }, [item, onDelete, onClose]);\n\n    if (!item) {\n        return null;\n    }\n\n    return (\n        <Popover\n            disableEnforceFocus={true}\n            open={open}\n            anchorEl={anchorEl}\n            onClose={onClose}\n            anchorOrigin={{\n                vertical: 'center',\n                horizontal: 'center',\n            }}\n            transformOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n            }}\n        >\n            <List>\n                <ListItem button onClick={handleCopy}>\n                    <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Copy\" />\n                </ListItem>\n                <ListItem button onClick={handleJumpTo}>\n                    <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Jump To\" />\n                </ListItem>\n                {(item.videoFile || item.audioFile || item.audio) && (\n                    <ListItem button onClick={handleClipAudio}>\n                        <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Download Audio\" />\n                    </ListItem>\n                )}\n                {(item.videoFile || item.image) && (\n                    <ListItem button onClick={handleDownloadImage}>\n                        <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Download Image\" />\n                    </ListItem>\n                )}\n                <ListItem button onClick={handleDelete}>\n                    <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Delete\" />\n                </ListItem>\n            </List>\n        </Popover>\n    );\n}\n\nexport default function CopyHistory(props: CopyHistoryProps) {\n    const onDelete = props.onDelete;\n    const classes = useStyles(props);\n    const scrollToBottomRefCallback = useCallback((element: HTMLElement | null) => {\n        if (element) {\n            element.scrollIntoView();\n        }\n    }, []);\n    const [menuItem, setMenuItem] = useState<CopyHistoryItem>();\n    const [menuOpen, setMenuOpen] = useState<boolean>(false);\n    const [menuAnchorEl, setMenuAnchorEl] = useState<Element>();\n\n    const handleMenu = useCallback((e: React.MouseEvent, item: CopyHistoryItem) => {\n        setMenuItem(item);\n        setMenuOpen(true);\n        setMenuAnchorEl(e.currentTarget);\n    }, []);\n\n    const handleMenuClosed = useCallback(() => {\n        setMenuItem(undefined);\n        setMenuOpen(false);\n        setMenuAnchorEl(undefined);\n    }, []);\n\n    const handleDelete = useCallback(\n        (item: CopyHistoryItem) => {\n            onDelete(item);\n        },\n        [onDelete]\n    );\n\n    let content;\n\n    if (props.items.length > 0) {\n        const items = [];\n        let lastSeenItemName = null;\n        let i = 0;\n        const itemNameCounters: { [name: string]: number } = {};\n        let itemsBySection: { [key: string]: CopyHistoryItem[] } = {};\n        let currentKey: string | undefined;\n\n        for (const item of props.items) {\n            if (lastSeenItemName === null || lastSeenItemName !== item.name) {\n\n                if (item.name in itemNameCounters) {\n                    itemNameCounters[item.name]++;\n                } else {\n                    itemNameCounters[item.name] = 0;\n                }\n\n                const key = item.name + '-' + itemNameCounters[item.name];\n                itemsBySection[key] = [];\n                lastSeenItemName = item.name;\n                currentKey = key;\n\n                items.push(\n                    <ListItem key={key}>\n                        <Typography color=\"textSecondary\">{item.name}</Typography>\n                        <ListItemSecondaryAction>\n                            <Tooltip title=\"Download as SRT\">\n                                <IconButton\n                                    onClick={() => props.onDownloadSectionAsSrt(item.name, itemsBySection[key])}\n                                    edge=\"end\"\n                                >\n                                    <SaveAltIcon />\n                                </IconButton>\n                            </Tooltip>\n                        </ListItemSecondaryAction>\n                    </ListItem>\n                );\n            }\n\n            itemsBySection[currentKey!].push(item);\n            const ref = i === props.items.length - 1 ? scrollToBottomRefCallback : null;\n\n            items.push(\n                <ListItem\n                    ref={ref}\n                    key={item.id}\n                    className={classes.listItem}\n                    classes={{ gutters: classes.listItemGutters }}\n                >\n                    <ListItemIcon classes={{ root: classes.listItemIconRoot }}>\n                        <Tooltip title=\"Export to Anki\">\n                            <IconButton onClick={() => props.onAnki(item)}>\n                                <StarIcon fontSize=\"small\" />\n                            </IconButton>\n                        </Tooltip>\n                    </ListItemIcon>\n                    <ListItemIcon classes={{ root: classes.listItemIconRoot }}>\n                        <IconButton onClick={(e) => handleMenu(e, item)}>\n                            <MoreVertIcon fontSize=\"small\" />\n                        </IconButton>\n                    </ListItemIcon>\n                    <ListItemText\n                        primary={\n                            <Grid wrap=\"nowrap\" container>\n                                <Grid item className={item.text === '' ? classes.emptyText : classes.text}>\n                                    {item.text === '' ? 'No text' : item.text}\n                                </Grid>\n                                <Grid item className={classes.timestamp}>\n                                    {timeDurationDisplay(item.start, item.start, false)}\n                                </Grid>\n                            </Grid>\n                        }\n                    />\n                </ListItem>\n            );\n\n            ++i;\n        }\n\n        content = (\n            <div className={classes.listContainer}>\n                <List>{items}</List>\n            </div>\n        );\n    } else {\n        content = (\n            <div className={classes.emptyState}>\n                <Typography variant=\"h6\">Mining history is empty.</Typography>\n                <Typography variant=\"caption\">See the help for keyboard shortcuts.</Typography>\n            </div>\n        );\n    }\n\n    return (\n        <React.Fragment>\n            <Drawer\n                variant=\"persistent\"\n                anchor=\"right\"\n                open={props.open}\n                className={classes.drawer}\n                classes={{\n                    paper: classes.drawerPaper,\n                }}\n            >\n                <div className={classes.drawerHeader}>\n                    <IconButton onClick={props.onClose}>\n                        <ChevronRightIcon />\n                    </IconButton>\n                </div>\n                <Divider />\n                {content}\n            </Drawer>\n            <Menu\n                open={props.open && menuOpen}\n                anchorEl={menuAnchorEl}\n                item={menuItem}\n                onClose={handleMenuClosed}\n                onSelect={props.onSelect}\n                onClipAudio={props.onClipAudio}\n                onDownloadImage={props.onDownloadImage}\n                onDelete={handleDelete}\n            />\n        </React.Fragment>\n    );\n}\n","import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport gt from 'semver/functions/gt';\nimport Fade from '@material-ui/core/Fade';\nimport Link from '@material-ui/core/Link';\nimport Typography from '@material-ui/core/Typography';\nimport ChromeExtension from '../services/ChromeExtension';\nimport { Theme } from '@material-ui/core/styles';\n\ninterface StylesProps {\n    appBarHidden: boolean;\n}\n\nconst useStyles = makeStyles<Theme, StylesProps>((theme) => ({\n    background: ({ appBarHidden }) => ({\n        position: 'absolute',\n        height: appBarHidden ? '100vh' : 'calc(100vh - 64px)',\n        width: '100%',\n        zIndex: 100,\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        padding: 15,\n        textAlign: 'center',\n    }),\n    browseLink: {\n        cursor: 'pointer',\n    },\n}));\n\ninterface Props {\n    extension: ChromeExtension;\n    latestExtensionVersion: string;\n    extensionUrl: string;\n    loading: boolean;\n    dragging: boolean;\n    appBarHidden: boolean;\n    onFileSelector: React.MouseEventHandler<HTMLAnchorElement> &\n        React.MouseEventHandler<HTMLSpanElement> &\n        React.MouseEventHandler<HTMLLabelElement>;\n}\n\nexport default function LandingPage({\n    extension,\n    latestExtensionVersion,\n    extensionUrl,\n    loading,\n    dragging,\n    appBarHidden,\n    onFileSelector,\n}: Props) {\n    const classes = useStyles({ appBarHidden });\n    const [installedExtensionVersion, setInstalledExtensionVersion] = useState<string>();\n\n    useEffect(() => {\n        async function fetchInstalledExtensionVersion() {\n            setInstalledExtensionVersion(await extension.installedVersion());\n        }\n\n        fetchInstalledExtensionVersion();\n    }, [extension]);\n\n    const extensionUpdateAvailable = installedExtensionVersion && gt(latestExtensionVersion, installedExtensionVersion);\n    const extensionNotInstalled = !installedExtensionVersion;\n\n    return (\n        <React.Fragment>\n            <Fade in={!loading && !dragging} timeout={500}>\n                <div className={classes.background}>\n                    <Typography variant=\"h6\">\n                        Drag and drop subtitle and media files, or{' '}\n                        <Link\n                            target=\"#\"\n                            className={classes.browseLink}\n                            onClick={onFileSelector}\n                            color=\"secondary\"\n                            component=\"label\"\n                        >\n                            browse\n                        </Link>\n                        .\n                        <br />\n                        {extensionNotInstalled && (\n                            <span>\n                                Install the{' '}\n                                <Link color=\"secondary\" target=\"_blank\" rel=\"noreferrer\" href={extensionUrl}>\n                                    Chrome extension\n                                </Link>{' '}\n                                to sync subtitles with streaming video.\n                            </span>\n                        )}\n                        {extensionUpdateAvailable && (\n                            <span>\n                                An extension{' '}\n                                <Link color=\"secondary\" target=\"_blank\" rel=\"noreferrer\" href={extensionUrl}>\n                                    update\n                                </Link>{' '}\n                                is available.\n                            </span>\n                        )}\n                    </Typography>\n                </div>\n            </Fade>\n        </React.Fragment>\n    );\n}\n","import { Message } from \"@project/common\";\nimport { VideoProtocol, VideoProtocolMessage } from \"./VideoProtocol\";\n\nexport default class BroadcastChannelVideoProtocol implements VideoProtocol {\n    private channel?: BroadcastChannel;\n\n    onMessage?: (message: VideoProtocolMessage) => void;\n    \n    constructor(channelId: string) {\n        this.channel = new BroadcastChannel(channelId);\n        const that = this;\n        this.channel.onmessage = (event) => {\n            that.onMessage?.(event as VideoProtocolMessage);\n        };\n    }\n\n    postMessage(message: Message) {\n        this.channel?.postMessage(message);\n    }\n\n    close() {\n        this.channel?.close();\n        this.channel = undefined;\n    }\n}\n","import { Message } from '@project/common';\nimport ChromeExtension, { ExtensionMessage } from './ChromeExtension';\nimport { VideoProtocol, VideoProtocolMessage } from './VideoProtocol';\n\nexport default class ChromeTabVideoProtocol implements VideoProtocol {\n    private readonly tabId: number;\n    private readonly src: string;\n    private readonly extension: ChromeExtension;\n    private readonly listener: (message: ExtensionMessage) => void;\n\n    onMessage?: (message: VideoProtocolMessage) => void;\n\n    constructor(tabId: number, src: string, extension: ChromeExtension) {\n        this.tabId = tabId;\n        this.src = src;\n        this.listener = (message) => {\n            if (message.tabId === tabId && (!message.src || message.src === src)) {\n                this.onMessage?.({\n                    data: message.data,\n                });\n            }\n        };\n\n        extension.subscribe(this.listener);\n        this.extension = extension;\n    }\n\n    postMessage(message: Message) {\n        this.extension.sendMessage(message, this.tabId, this.src);\n    }\n\n    close() {\n        this.extension.unsubscribe(this.listener);\n    }\n}\n","export default class Clock {\n    private accumulated: number;\n    private started: boolean;\n    private startTime?: number;\n\n    constructor() {\n        this.accumulated = 0;\n        this.started = false;\n    }\n\n    time(max: number) {\n        if (this.started) {\n            return Math.min(max, this.accumulated + Date.now() - this.startTime!);\n        }\n\n        return Math.min(max, this.accumulated);\n    }\n\n    stop() {\n        if (!this.started) {\n            return;\n        }\n\n        this.started = false;\n        this.accumulated += Date.now() - this.startTime!;\n    }\n\n    start() {\n        this.startTime = Date.now();\n        this.started = true;\n    }\n\n    setTime(time: number) {\n        if (this.started) {\n            this.startTime = Date.now();\n            this.accumulated = time;\n        } else {\n            this.accumulated = time;\n        }\n    }\n\n    progress(max: number) {\n        return max === 0 ? 0 : Math.min(1, this.time(max) / max);\n    }\n}\n","import React, { useCallback, useEffect, useState, useRef, MutableRefObject } from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\nimport AudiotrackIcon from '@material-ui/icons/Audiotrack';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Fade from '@material-ui/core/Fade';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport Input from '@material-ui/core/Input';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport OpenInNewIcon from '@material-ui/icons/OpenInNew';\nimport Popover from '@material-ui/core/Popover';\nimport FullscreenIcon from '@material-ui/icons/Fullscreen';\nimport AspectRatioIcon from '@material-ui/icons/AspectRatio';\nimport FullscreenExitIcon from '@material-ui/icons/FullscreenExit';\nimport PauseIcon from '@material-ui/icons/Pause';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport QueueMusicIcon from '@material-ui/icons/QueueMusic';\nimport Slider from '@material-ui/core/Slider';\nimport TuneIcon from '@material-ui/icons/Tune';\nimport SubtitlesIcon from '@material-ui/icons/Subtitles';\nimport VideocamIcon from '@material-ui/icons/Videocam';\nimport VolumeOffIcon from '@material-ui/icons/VolumeOff';\nimport VolumeUpIcon from '@material-ui/icons/VolumeUp';\nimport { AsbplayerSettingsProvider, AudioTrackModel, PlayMode, VideoTabModel } from '@project/common';\nimport Clock from '../services/Clock';\n\nconst useControlStyles = makeStyles((theme) => ({\n    container: {\n        position: 'absolute',\n        left: '50%',\n        width: '50%',\n        bottom: 0,\n        pointerEvents: 'none',\n        color: '#fff',\n    },\n    buttonContainer: {\n        flexDirection: 'row',\n    },\n    timeDisplay: {\n        color: '#fff',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        height: '100%',\n        cursor: 'default',\n        fontSize: 20,\n        marginLeft: 10,\n    },\n    offsetInput: {\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        fontSize: 20,\n        marginLeft: 10,\n        width: 100,\n        color: '#fff',\n        pointerEvents: 'auto',\n    },\n    volumeInputContainerShown: {\n        transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.short,\n        }),\n        marginRight: 5,\n        pointerEvents: 'auto',\n    },\n    volumeInputContainerHidden: {\n        transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.short,\n        }),\n        marginRight: 0,\n        pointerEvents: 'auto',\n    },\n    volumeInputHidden: {\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.short,\n        }),\n        width: 0,\n        pointerEvents: 'auto',\n    },\n    volumeInputShown: {\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.short,\n        }),\n        width: 100,\n        pointerEvents: 'auto',\n    },\n    volumeInputThumbHidden: {\n        transition: theme.transitions.create('visibility', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.short,\n        }),\n        opacity: 0,\n        pointerEvents: 'auto',\n    },\n    volumeInputThumbShown: {\n        transition: theme.transitions.create('visibility', {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.short,\n        }),\n        opacity: 1,\n        pointerEvents: 'auto',\n    },\n    subContainer: {\n        background: 'linear-gradient(to bottom, rgba(0, 0, 0, 0), rgba(0, 0, 0, .4) 40%, rgba(0, 0, 0, 0.7))',\n        position: 'relative',\n        left: '-100%',\n        width: '200%',\n        zIndex: 10,\n    },\n    button: {\n        pointerEvents: 'auto',\n    },\n    inactiveButton: {\n        color: 'rgba(72, 72, 72, 0.7)',\n        pointerEvents: 'auto',\n    },\n    inactiveTopButton: {\n        color: 'rgba(255, 255, 255, 0.5)',\n        pointerEvents: 'auto',\n    },\n    progress: {\n        margin: 5,\n    },\n    topButton: {\n        pointerEvents: 'auto',\n        color: '#fff',\n    },\n    gridContainer: {\n        pointerEvents: 'auto',\n        padding: 2,\n    },\n}));\n\nconst useProgressBarStyles = makeStyles((theme) => ({\n    root: {\n        height: 10,\n    },\n    container: {\n        height: 10,\n        pointerEvents: 'auto',\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        position: 'absolute',\n        width: 'calc(100% - 20px)',\n        marginLeft: 10,\n    },\n    mouseEventListener: {\n        zIndex: 1,\n        height: 10,\n        cursor: 'pointer',\n        pointerEvents: 'auto',\n        position: 'absolute',\n        width: '100%',\n    },\n    fillContainer: {\n        background: 'rgba(30,30,30,0.7)',\n        width: '100%',\n        height: 5,\n        position: 'relative',\n    },\n    fillContainerThick: {\n        transition: theme.transitions.create('height', {\n            easing: theme.transitions.easing.easeInOut,\n            duration: 50,\n        }),\n        height: 8,\n    },\n    fill: {\n        background: 'linear-gradient(to left, #ff1f62, #49007a)',\n        height: '100%',\n    },\n    handleContainer: {\n        position: 'absolute',\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        height: '100%',\n        bottom: 0,\n    },\n    handle: {\n        borderRadius: '50%',\n        width: 16,\n        height: 16,\n        opacity: 0,\n        left: -8,\n        background: 'white',\n        position: 'absolute',\n    },\n    handleOn: {\n        opacity: 1,\n        transition: theme.transitions.create('opacity', {\n            easing: theme.transitions.easing.easeInOut,\n            duration: theme.transitions.duration.shortest,\n        }),\n    },\n}));\n\nconst VolumeSlider = withStyles((theme) => ({\n    root: {\n        color: 'white',\n        verticalAlign: 'middle',\n    },\n    thumb: {\n        backgroundColor: 'white',\n        color: 'white',\n        '&:focus': {\n            boxShadow: 'inherit',\n        },\n        '&:hover, &$active': {\n            boxShadow: '0px 0px 0px 8px rgba(255, 255, 255, 0.1)',\n        },\n    },\n    active: {\n        color: 'white',\n    },\n}))(Slider);\n\nfunction displayTime(milliseconds: number) {\n    const seconds = Math.floor(milliseconds / 1000);\n    const minutes = Math.floor(seconds / 60);\n    const secondsInMinute = seconds % 60;\n    return String(minutes) + ':' + String(secondsInMinute).padStart(2, '0');\n}\n\nfunction elementWidth(element: HTMLElement) {\n    const rect = element.getBoundingClientRect();\n    return rect.right - rect.left;\n}\n\ninterface ProgressBarProps {\n    onSeek: (progress: number) => void;\n    value: number;\n}\n\nfunction ProgressBar({ onSeek, value }: ProgressBarProps) {\n    const classes = useProgressBarStyles();\n    const [mouseOver, setMouseOver] = useState(false);\n    const containerRef = useRef(null);\n\n    const handleClick = useCallback(\n        (e: React.MouseEvent<HTMLDivElement>) => {\n            const rect = e.currentTarget.getBoundingClientRect();\n            // Account for margins by subtracting 10 from left/right sides\n            const width = rect.right - rect.left - 20;\n            const progress = Math.min(1, Math.max(0, (e.pageX - rect.left - 10) / width));\n            onSeek(progress);\n        },\n        [onSeek]\n    );\n\n    const handleMouseOver = useCallback(() => setMouseOver(true), []);\n    const handleMouseOut = useCallback(() => setMouseOver(false), []);\n    const progressWidth = containerRef.current ? (elementWidth(containerRef.current) * value) / 100 : 0;\n    const fillStyle = { width: progressWidth };\n    const handleStyle = { marginLeft: progressWidth };\n    const fillContainerClassName = mouseOver\n        ? classes.fillContainer + ' ' + classes.fillContainerThick\n        : classes.fillContainer;\n    const handleClassName = mouseOver ? classes.handle + ' ' + classes.handleOn : classes.handle;\n\n    return (\n        <div className={classes.root}>\n            <div ref={containerRef} className={classes.container}>\n                <div className={fillContainerClassName}>\n                    <div className={classes.fill} style={fillStyle}></div>\n                    <div className={classes.handleContainer}>\n                        <div className={handleClassName} style={handleStyle} />\n                    </div>\n                </div>\n            </div>\n            <div\n                className={classes.mouseEventListener}\n                onClick={handleClick}\n                onMouseOver={handleMouseOver}\n                onMouseOut={handleMouseOut}\n            ></div>\n        </div>\n    );\n}\n\ninterface AudioTrackSelectorProps {\n    open: boolean;\n    anchorEl?: Element;\n    audioTracks?: AudioTrackModel[];\n    selectedAudioTrack?: string;\n    onAudioTrackSelected: (id: string) => void;\n    onClose: () => void;\n}\n\nfunction AudioTrackSelector({\n    open,\n    anchorEl,\n    audioTracks,\n    selectedAudioTrack,\n    onAudioTrackSelected,\n    onClose,\n}: AudioTrackSelectorProps) {\n    if (!audioTracks || audioTracks.length === 0) {\n        return null;\n    }\n\n    const list = audioTracks.map((t) => {\n        return (\n            <ListItem\n                key={t.id}\n                selected={t.id === selectedAudioTrack}\n                button\n                onClick={() => onAudioTrackSelected(t.id)}\n            >\n                {t.language} {t.label}\n            </ListItem>\n        );\n    });\n\n    return (\n        <div>\n            <Popover\n                disableEnforceFocus={true}\n                open={open}\n                anchorEl={anchorEl}\n                onClose={onClose}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n            >\n                <List>{list}</List>\n            </Popover>\n        </div>\n    );\n}\n\ninterface TabSelectorProps {\n    open: boolean;\n    anchorEl?: Element;\n    tabs?: VideoTabModel[];\n    selectedTab?: VideoTabModel;\n    onTabSelected: (tab: VideoTabModel) => void;\n    onClose: () => void;\n}\n\nfunction TabSelector({ open, anchorEl, onClose, tabs, selectedTab, onTabSelected }: TabSelectorProps) {\n    if (!tabs || tabs.length === 0) {\n        return null;\n    }\n\n    const list = tabs.map((t) => {\n        return (\n            <ListItem\n                key={t.id}\n                selected={selectedTab && t.id === selectedTab.id && t.src === selectedTab.src}\n                button\n                onClick={() => onTabSelected(t)}\n            >\n                {t.id} {t.title} {t.src}\n            </ListItem>\n        );\n    });\n\n    return (\n        <div>\n            <Popover\n                disableEnforceFocus={true}\n                open={open}\n                anchorEl={anchorEl}\n                onClose={onClose}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n            >\n                <List>{list}</List>\n            </Popover>\n        </div>\n    );\n}\n\ninterface MediaUnloaderProps {\n    open: boolean;\n    anchorEl?: Element;\n    file?: string;\n    onUnload: () => void;\n    onClose: () => void;\n}\n\nfunction MediaUnloader({ open, anchorEl, onUnload, onClose, file }: MediaUnloaderProps) {\n    return (\n        <div>\n            <Popover\n                disableEnforceFocus={true}\n                open={open}\n                anchorEl={anchorEl}\n                onClose={onClose}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n            >\n                <List>\n                    <ListItem button onClick={(e) => onUnload()}>\n                        Unload {file}\n                    </ListItem>\n                </List>\n            </Popover>\n        </div>\n    );\n}\n\ninterface PlayModeSelectorProps {\n    open: boolean;\n    anchorEl?: Element;\n    selectedPlayMode?: PlayMode;\n    onPlayMode: (playMode: PlayMode) => void;\n    onClose: () => void;\n}\n\nfunction PlayModeSelector({ open, anchorEl, selectedPlayMode, onPlayMode, onClose }: PlayModeSelectorProps) {\n    return (\n        <div>\n            <Popover\n                disableEnforceFocus={true}\n                open={open}\n                anchorEl={anchorEl}\n                onClose={onClose}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n            >\n                <List>\n                    <ListItem\n                        selected={selectedPlayMode === PlayMode.normal}\n                        button\n                        onClick={(e) => onPlayMode(PlayMode.normal)}\n                    >\n                        Normal\n                    </ListItem>\n                    <ListItem\n                        selected={selectedPlayMode === PlayMode.condensed}\n                        button\n                        onClick={(e) => onPlayMode(PlayMode.condensed)}\n                    >\n                        Condensed\n                    </ListItem>\n                    <ListItem\n                        selected={selectedPlayMode === PlayMode.autoPause}\n                        button\n                        onClick={(e) => onPlayMode(PlayMode.autoPause)}\n                    >\n                        Auto-pause\n                    </ListItem>\n                </List>\n            </Popover>\n        </div>\n    );\n}\n\nexport interface Point {\n    x: number;\n    y: number;\n}\n\ninterface ControlsProps {\n    clock: Clock;\n    playing: boolean;\n    length: number;\n    offsetEnabled?: boolean;\n    displayLength?: number;\n    offset: number;\n    onAudioTrackSelected: (id: string) => void;\n    onSeek: (progress: number) => void;\n    mousePositionRef: MutableRefObject<Point>;\n    onShow?: (show: boolean) => void;\n    onPause: () => void;\n    onPlay: () => void;\n    onTabSelected?: (tab: VideoTabModel) => void;\n    onUnloadAudio?: () => void;\n    onUnloadVideo?: () => void;\n    onOffsetChange: (offset: number) => void;\n    onVolumeChange: (volume: number) => void;\n    disableKeyEvents?: boolean;\n    settingsProvider: AsbplayerSettingsProvider;\n    closeEnabled?: boolean;\n    onClose?: () => void;\n    volumeEnabled?: boolean;\n    playMode?: PlayMode;\n    playModeEnabled?: boolean;\n    onPlayMode?: (playMode: PlayMode) => void;\n    subtitlesEnabled?: boolean;\n    subtitlesToggle?: boolean;\n    onSubtitlesToggle?: () => void;\n    videoFile?: string;\n    audioFile?: string;\n    audioTracks?: AudioTrackModel[];\n    selectedAudioTrack?: string;\n    tabs?: VideoTabModel[];\n    selectedTab?: VideoTabModel;\n    popOutEnabled?: boolean;\n    popOut?: boolean;\n    onPopOutToggle?: () => void;\n    fullscreenEnabled?: boolean;\n    fullscreen?: boolean;\n    onFullscreenToggle?: () => void;\n    hideSubtitlePlayerToggleEnabled?: boolean;\n    subtitlePlayerHidden?: boolean;\n    onHideSubtitlePlayerToggle?: () => void;\n    showOnMouseMovement: boolean;\n    theaterModeToggleEnabled?: boolean;\n    theaterModeEnabled?: boolean;\n    onTheaterModeToggle?: () => void;\n}\n\nexport default function Controls({\n    clock,\n    playing,\n    length,\n    offsetEnabled,\n    displayLength,\n    offset,\n    onAudioTrackSelected,\n    onSeek,\n    mousePositionRef,\n    onShow,\n    onPause,\n    onPlay,\n    onTabSelected,\n    onUnloadAudio,\n    onUnloadVideo,\n    onOffsetChange,\n    onVolumeChange,\n    disableKeyEvents,\n    settingsProvider,\n    closeEnabled,\n    onClose,\n    volumeEnabled,\n    playMode,\n    playModeEnabled,\n    onPlayMode,\n    subtitlesEnabled,\n    subtitlesToggle,\n    onSubtitlesToggle,\n    videoFile,\n    audioFile,\n    audioTracks,\n    selectedAudioTrack,\n    tabs,\n    selectedTab,\n    popOutEnabled,\n    popOut,\n    onPopOutToggle,\n    fullscreenEnabled,\n    fullscreen,\n    onFullscreenToggle,\n    hideSubtitlePlayerToggleEnabled,\n    subtitlePlayerHidden,\n    onHideSubtitlePlayerToggle,\n    showOnMouseMovement,\n    theaterModeToggleEnabled,\n    theaterModeEnabled,\n    onTheaterModeToggle,\n}: ControlsProps) {\n    const classes = useControlStyles();\n    const [show, setShow] = useState<boolean>(true);\n    const [audioTrackSelectorOpen, setAudioTrackSelectorOpen] = useState<boolean>(false);\n    const [audioTrackSelectorAnchorEl, setAudioTrackSelectorAnchorEl] = useState<Element>();\n    const [tabSelectorOpen, setTabSelectorOpen] = useState<boolean>(false);\n    const [tabSelectorAnchorEl, setTabSelectorAnchorEl] = useState<Element>();\n    const [audioUnloaderOpen, setAudioUnloaderOpen] = useState<boolean>(false);\n    const [audioUnloaderAnchorEl, setAudioUnloaderAnchorEl] = useState<Element>();\n    const [videoUnloaderOpen, setVideoUnloaderOpen] = useState<boolean>(false);\n    const [videoUnloaderAnchorEl, setVideoUnloaderAnchorEl] = useState<Element>();\n    const [playModeSelectorOpen, setPlayModeSelectorOpen] = useState<boolean>(false);\n    const [playModeSelectorAnchorEl, setPlayModeSelectorAnchorEl] = useState<Element>();\n    const [showVolumeBar, setShowVolumeBar] = useState<boolean>(false);\n    const [volume, setVolume] = useState<number>(100);\n    const [lastCommittedVolume, setLastCommittedVolume] = useState<number>(100);\n    const lastMousePositionRef = useRef<Point>({ x: 0, y: 0 });\n    const lastShowTimestampRef = useRef<number>(Date.now());\n    const lastOffsetInputChangeTimestampRef = useRef<number>(Date.now());\n    const lastShowRef = useRef<boolean>(true);\n    const forceShowRef = useRef<boolean>(false);\n    const offsetInputRef = useRef<HTMLInputElement>();\n    const containerRef = useRef<HTMLDivElement>(null);\n    const closeButtonRef = useRef<HTMLButtonElement>(null);\n    const [, updateState] = useState<any>();\n    const forceUpdate = useCallback(() => updateState({}), []);\n\n    const handleSeek = useCallback(\n        (progress: number) => {\n            onSeek(progress);\n        },\n        [onSeek]\n    );\n\n    function handleMouseOver() {\n        forceShowRef.current = true;\n    }\n\n    function handleMouseOut() {\n        forceShowRef.current = false;\n    }\n\n    useEffect(() => {\n        const savedVolume = Number(settingsProvider.volume);\n        setVolume(savedVolume);\n        onVolumeChange(savedVolume / 100);\n\n        if (savedVolume > 0) {\n            setLastCommittedVolume(savedVolume);\n        }\n    }, [settingsProvider, onVolumeChange]);\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            let currentShow: boolean;\n\n            if (showOnMouseMovement) {\n                currentShow =\n                    Date.now() - lastShowTimestampRef.current < 2000 ||\n                    Math.pow(mousePositionRef.current.x - lastMousePositionRef.current.x, 2) +\n                        Math.pow(mousePositionRef.current.y - lastMousePositionRef.current.y, 2) >\n                        100;\n            } else {\n                currentShow =\n                    ((containerRef.current && mousePositionRef.current.y > containerRef.current.offsetTop - 20) ||\n                        (closeButtonRef.current &&\n                            mousePositionRef.current.y < closeButtonRef.current.offsetHeight + 20)) ??\n                    false;\n            }\n\n            currentShow =\n                currentShow ||\n                forceShowRef.current ||\n                offsetInputRef.current === document.activeElement ||\n                Date.now() - lastOffsetInputChangeTimestampRef.current < 2000;\n\n            if (currentShow && !lastShowRef.current) {\n                lastShowTimestampRef.current = Date.now();\n                setShow(currentShow);\n            } else if (!currentShow && lastShowRef.current) {\n                setShow(currentShow);\n            }\n\n            lastShowRef.current = currentShow;\n            lastMousePositionRef.current.x = mousePositionRef.current.x;\n            lastMousePositionRef.current.y = mousePositionRef.current.y;\n        }, 100);\n        return () => clearInterval(interval);\n    }, [mousePositionRef, showOnMouseMovement]);\n\n    useEffect(() => onShow?.(show), [onShow, show]);\n\n    useEffect(() => {\n        if (disableKeyEvents) {\n            return;\n        }\n\n        function handleKey(event: KeyboardEvent) {\n            if (event.key === 'Enter') {\n                if (offsetInputRef.current === document.activeElement) {\n                    const offset = Number(offsetInputRef.current.value);\n\n                    if (Number.isNaN(offset)) {\n                        return;\n                    }\n\n                    onOffsetChange(offset * 1000);\n                    offsetInputRef.current.blur();\n                }\n            }\n        }\n\n        window.addEventListener('keydown', handleKey);\n\n        return () => {\n            window.removeEventListener('keydown', handleKey);\n        };\n    }, [onOffsetChange, disableKeyEvents]);\n\n    const handleOffsetInputClicked = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n        const inputElement = e.target as HTMLInputElement;\n        inputElement.setSelectionRange(0, inputElement.value?.length || 0);\n    }, []);\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            forceUpdate();\n        }, 100);\n\n        return () => clearInterval(interval);\n    }, [forceUpdate]);\n\n    useEffect(() => {\n        if (offsetInputRef.current) {\n            if (offset === 0) {\n                offsetInputRef.current.value = '';\n            } else {\n                const offsetSeconds = offset / 1000;\n                const value = offsetSeconds >= 0 ? '+' + offsetSeconds.toFixed(2) : String(offsetSeconds.toFixed(2));\n                offsetInputRef.current.value = value;\n                lastOffsetInputChangeTimestampRef.current = Date.now();\n            }\n        }\n    }, [offset]);\n\n    const handleAudioTrackSelectorClosed = useCallback(() => {\n        setAudioTrackSelectorAnchorEl(undefined);\n        setAudioTrackSelectorOpen(false);\n    }, []);\n\n    const handleAudioTrackSelectorOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setAudioTrackSelectorAnchorEl(e.currentTarget);\n        setAudioTrackSelectorOpen(true);\n    }, []);\n\n    const handleAudioTrackSelected = useCallback(\n        (id: string) => {\n            onAudioTrackSelected(id);\n            setAudioTrackSelectorAnchorEl(undefined);\n            setAudioTrackSelectorOpen(false);\n        },\n        [onAudioTrackSelected]\n    );\n\n    const handleTabSelectorClosed = useCallback(() => {\n        setTabSelectorAnchorEl(undefined);\n        setTabSelectorOpen(false);\n    }, []);\n\n    const handleTabSelectorOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setTabSelectorAnchorEl(e.currentTarget);\n        setTabSelectorOpen(true);\n    }, []);\n\n    const handleTabSelected = useCallback(\n        (tab: VideoTabModel) => {\n            onTabSelected?.(tab);\n            setTabSelectorAnchorEl(undefined);\n            setTabSelectorOpen(false);\n        },\n        [onTabSelected]\n    );\n\n    const handleAudioUnloaderClosed = useCallback(() => {\n        setAudioUnloaderAnchorEl(undefined);\n        setAudioUnloaderOpen(false);\n    }, []);\n\n    const handleAudioUnloaderOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setAudioUnloaderAnchorEl(e.currentTarget);\n        setAudioUnloaderOpen(true);\n    }, []);\n\n    const handleUnloadAudio = useCallback(() => {\n        onUnloadAudio?.();\n        setAudioUnloaderOpen(false);\n    }, [onUnloadAudio]);\n\n    const handleVideoUnloaderClosed = useCallback(() => {\n        setVideoUnloaderAnchorEl(undefined);\n        setVideoUnloaderOpen(false);\n    }, []);\n\n    const handleVideoUnloaderOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setVideoUnloaderAnchorEl(e.currentTarget);\n        setVideoUnloaderOpen(true);\n    }, []);\n\n    const handleUnloadVideo = useCallback(() => {\n        onUnloadVideo?.();\n        setVideoUnloaderOpen(false);\n    }, [onUnloadVideo]);\n\n    const handlePlayModeSelectorClosed = useCallback(() => {\n        setPlayModeSelectorAnchorEl(undefined);\n        setPlayModeSelectorOpen(false);\n    }, []);\n\n    const handlePlayModeSelectorOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setPlayModeSelectorAnchorEl(e.currentTarget);\n        setPlayModeSelectorOpen(true);\n    }, []);\n\n    const handlePlayModeSelected = useCallback(\n        (playMode: PlayMode) => {\n            onPlayMode?.(playMode);\n            setPlayModeSelectorAnchorEl(undefined);\n            setPlayModeSelectorOpen(false);\n        },\n        [onPlayMode]\n    );\n\n    const handleVolumeMouseOut = useCallback(() => setShowVolumeBar(false), []);\n    const handleVolumeMouseOver = useCallback(() => setShowVolumeBar(true), []);\n\n    const handleVolumeChange = useCallback(\n        (e: React.ChangeEvent<{}>, value: number | number[]) => {\n            if (typeof value !== 'number') {\n                return;\n            }\n\n            setVolume(value);\n            onVolumeChange(value / 100);\n        },\n        [onVolumeChange]\n    );\n\n    const handleVolumeChangeCommitted = useCallback(\n        (e: React.ChangeEvent<{}>, value: number | number[]) => {\n            if (typeof value !== 'number') {\n                return;\n            }\n\n            if (value > 0) {\n                setLastCommittedVolume(value);\n            }\n\n            settingsProvider.volume = value;\n        },\n        [settingsProvider]\n    );\n\n    const handleVolumeToggle = useCallback(() => {\n        setVolume((volume) => {\n            const newVolume = volume > 0 ? 0 : lastCommittedVolume;\n            onVolumeChange(newVolume / 100);\n            return newVolume;\n        });\n    }, [onVolumeChange, lastCommittedVolume]);\n\n    const progress = clock.progress(length);\n\n    return (\n        <React.Fragment>\n            <Fade in={show} timeout={200}>\n                <Grid container style={{ position: 'absolute', top: 0 }}>\n                    <Grid item style={{ flexGrow: 1 }}>\n                        {closeEnabled && (\n                            <IconButton\n                                ref={closeButtonRef}\n                                color=\"inherit\"\n                                className={classes.topButton}\n                                onClick={onClose}\n                                onMouseOver={handleMouseOver}\n                                onMouseOut={handleMouseOut}\n                            >\n                                <CloseIcon />\n                            </IconButton>\n                        )}\n                    </Grid>\n                    <Grid item>\n                        {theaterModeToggleEnabled && (\n                            <IconButton\n                                color=\"inherit\"\n                                className={theaterModeEnabled ? classes.topButton : classes.inactiveTopButton}\n                                onClick={onTheaterModeToggle}\n                                onMouseOver={handleMouseOver}\n                                onMouseOut={handleMouseOut}\n                            >\n                                <AspectRatioIcon />\n                            </IconButton>\n                        )}\n                        {hideSubtitlePlayerToggleEnabled && (\n                            <IconButton\n                                color=\"inherit\"\n                                className={classes.topButton}\n                                onClick={onHideSubtitlePlayerToggle}\n                                onMouseOver={handleMouseOver}\n                                onMouseOut={handleMouseOut}\n                            >\n                                {subtitlePlayerHidden ? <ArrowBackIcon /> : <ArrowForwardIcon />}\n                            </IconButton>\n                        )}\n                    </Grid>\n                </Grid>\n            </Fade>\n            <div\n                ref={containerRef}\n                className={classes.container}\n                onMouseOver={handleMouseOver}\n                onMouseOut={handleMouseOut}\n            >\n                <Fade in={show} timeout={200}>\n                    <div className={classes.subContainer}>\n                        <ProgressBar onSeek={handleSeek} value={progress * 100} />\n                        <Grid container className={classes.gridContainer} direction=\"row\">\n                            <Grid item>\n                                <IconButton color=\"inherit\" onClick={() => (playing ? onPause() : onPlay())}>\n                                    {playing ? (\n                                        <PauseIcon className={classes.button} />\n                                    ) : (\n                                        <PlayArrowIcon className={classes.button} />\n                                    )}\n                                </IconButton>\n                            </Grid>\n                            {volumeEnabled && (\n                                <Grid\n                                    item\n                                    onMouseOver={handleVolumeMouseOver}\n                                    onMouseOut={handleVolumeMouseOut}\n                                    className={\n                                        showVolumeBar\n                                            ? classes.volumeInputContainerShown\n                                            : classes.volumeInputContainerHidden\n                                    }\n                                >\n                                    <IconButton color=\"inherit\" onClick={handleVolumeToggle}>\n                                        {volume === 0 ? <VolumeOffIcon /> : <VolumeUpIcon />}\n                                    </IconButton>\n                                    <VolumeSlider\n                                        onChange={handleVolumeChange}\n                                        onChangeCommitted={handleVolumeChangeCommitted}\n                                        value={volume}\n                                        defaultValue={100}\n                                        classes={{\n                                            root: showVolumeBar ? classes.volumeInputShown : classes.volumeInputHidden,\n                                            thumb: showVolumeBar\n                                                ? classes.volumeInputThumbShown\n                                                : classes.volumeInputThumbHidden,\n                                        }}\n                                    />\n                                </Grid>\n                            )}\n                            <Grid item>\n                                <div className={classes.timeDisplay}>\n                                    {displayTime(progress * length)} / {displayTime(displayLength || length)}\n                                </div>\n                            </Grid>\n                            {offsetEnabled && (\n                                <Grid item>\n                                    <Input\n                                        inputRef={offsetInputRef}\n                                        disableUnderline={true}\n                                        className={classes.offsetInput}\n                                        placeholder={'±' + Number(0).toFixed(2)}\n                                        onClick={handleOffsetInputClicked}\n                                    />\n                                </Grid>\n                            )}\n                            <Grid item style={{ flexGrow: 1 }}></Grid>\n                            {subtitlesToggle && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={onSubtitlesToggle}>\n                                        <SubtitlesIcon\n                                            className={subtitlesEnabled ? classes.button : classes.inactiveButton}\n                                        />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {videoFile && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={handleVideoUnloaderOpened}>\n                                        <VideocamIcon className={classes.button} />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {audioFile && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={handleAudioUnloaderOpened}>\n                                        <AudiotrackIcon className={classes.button} />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {audioTracks && audioTracks.length > 1 && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={handleAudioTrackSelectorOpened}>\n                                        <QueueMusicIcon className={classes.button} />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {tabs && tabs.length > 0 && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={handleTabSelectorOpened}>\n                                        <VideocamIcon\n                                            className={selectedTab ? classes.button : classes.inactiveButton}\n                                        />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {playModeEnabled && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={handlePlayModeSelectorOpened}>\n                                        <TuneIcon\n                                            className={playModeEnabled ? classes.button : classes.inactiveButton}\n                                        />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {popOutEnabled && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={onPopOutToggle}>\n                                        <OpenInNewIcon\n                                            className={classes.button}\n                                            style={popOut ? { transform: 'rotateX(180deg)' } : {}}\n                                        />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {fullscreenEnabled && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={onFullscreenToggle}>\n                                        {fullscreen ? (\n                                            <FullscreenExitIcon className={classes.button} />\n                                        ) : (\n                                            <FullscreenIcon className={classes.button} />\n                                        )}\n                                    </IconButton>\n                                </Grid>\n                            )}\n                        </Grid>\n                    </div>\n                </Fade>\n                <TabSelector\n                    open={tabSelectorOpen && show}\n                    anchorEl={tabSelectorAnchorEl}\n                    tabs={tabs}\n                    selectedTab={selectedTab}\n                    onClose={handleTabSelectorClosed}\n                    onTabSelected={handleTabSelected}\n                />\n                <AudioTrackSelector\n                    open={audioTrackSelectorOpen && show}\n                    anchorEl={audioTrackSelectorAnchorEl}\n                    audioTracks={audioTracks}\n                    selectedAudioTrack={selectedAudioTrack}\n                    onClose={handleAudioTrackSelectorClosed}\n                    onAudioTrackSelected={handleAudioTrackSelected}\n                />\n                <MediaUnloader\n                    open={audioUnloaderOpen}\n                    anchorEl={audioUnloaderAnchorEl}\n                    file={audioFile}\n                    onClose={handleAudioUnloaderClosed}\n                    onUnload={handleUnloadAudio}\n                />\n                <MediaUnloader\n                    open={videoUnloaderOpen}\n                    anchorEl={videoUnloaderAnchorEl}\n                    file={videoFile}\n                    onClose={handleVideoUnloaderClosed}\n                    onUnload={handleUnloadVideo}\n                />\n                <PlayModeSelector\n                    open={playModeSelectorOpen && show}\n                    anchorEl={playModeSelectorAnchorEl}\n                    selectedPlayMode={playMode}\n                    onClose={handlePlayModeSelectorClosed}\n                    onPlayMode={handlePlayModeSelected}\n                />\n            </div>\n        </React.Fragment>\n    );\n}\n","import { RefObject } from \"react\";\n\nexport interface MediaElement {\n    currentTime: number;\n    readyState: number;\n    oncanplay: ((ev: Event) => void) | null;\n    play: () => Promise<void>;\n    pause: () => void;\n    duration: number;\n}\n\nexport default class MediaAdapter {\n    private readonly ref: RefObject<MediaElement | undefined>;\n    private readonly readyResolves: (() => void)[];\n\n    constructor(ref: RefObject<MediaElement | undefined>) {\n        this.ref = ref;\n        this.readyResolves = [];\n    }\n\n    async seek(time: number) {\n        return new Promise((resolve, reject) => {\n            if (this.ref.current) {\n                this.ref.current.currentTime = time;\n                this._onMediaCanPlay(() => resolve(undefined));\n            } else {\n                resolve(undefined);\n            }\n        });\n    }\n\n    async onReady() {\n        return new Promise((resolve, reject) => {\n            if (this.ref.current) {\n                this._onMediaCanPlay(() => resolve(undefined));\n            } else {\n                resolve(undefined);\n            }\n        });\n    }\n\n    _onMediaCanPlay(callback: () => void) {\n        if (this.ref.current?.readyState === 4) {\n            callback();\n            return;\n        }\n\n        if (this.ref.current && !this.ref.current.oncanplay) {\n            this.ref.current.oncanplay = (e) => {\n                for (const resolve of this.readyResolves) {\n                    resolve();\n                }\n\n                this.readyResolves.length = 0;\n\n                if (this.ref.current) {\n                    this.ref.current.oncanplay = null;\n                }\n            };\n        }\n\n        this.readyResolves.push(callback);\n    }\n\n    play() {\n        this.ref.current?.play();\n    }\n\n    pause() {\n        this.ref.current?.pause();\n    }\n}\n","import React, { useCallback, useEffect, useState, useMemo, useRef, createRef, RefObject } from 'react';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport { keysAreEqual } from '../services/Util';\nimport { useWindowSize } from '../hooks/useWindowSize';\nimport {\n    AsbplayerSettingsProvider,\n    KeyBindings,\n    PostMineAction,\n    surroundingSubtitles,\n    SubtitleModel,\n} from '@project/common';\nimport { SubtitleTextImage } from '@project/common/components';\nimport FileCopy from '@material-ui/icons/FileCopy';\nimport IconButton from '@material-ui/core/IconButton';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableRow, { TableRowProps } from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\nimport Clock from '../services/Clock';\n\ninterface StylesProps {\n    compressed: boolean;\n    appBarHidden: boolean;\n    windowWidth: number;\n}\n\nconst useSubtitlePlayerStyles = makeStyles<Theme, StylesProps, string>((theme) => ({\n    container: {\n        height: ({ appBarHidden }) => (appBarHidden ? '100vh' : 'calc(100vh - 64px)'),\n        position: 'relative',\n        overflowX: 'hidden',\n        backgroundColor: theme.palette.background.default,\n        width: ({ compressed, windowWidth }) => (compressed ? Math.max(350, 0.25 * windowWidth) : '100%'),\n    },\n    table: {\n        backgroundColor: theme.palette.background.default,\n        marginBottom: 75, // so the last row doesn't collide with controls\n    },\n    noSubtitles: {\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        padding: 15,\n        textAlign: 'center',\n    },\n}));\n\nconst useSubtitleRowStyles = makeStyles((theme) => ({\n    subtitleRow: {\n        '&:hover': {\n            backgroundColor: theme.palette.action.hover,\n        },\n    },\n    subtitle: {\n        fontSize: 20,\n        paddingRight: 0,\n        minWidth: 200,\n        width: '100%',\n        overflowWrap: 'anywhere',\n        whiteSpace: 'pre-wrap',\n    },\n    compressedSubtitle: {\n        fontSize: 16,\n        paddingRight: 0,\n        minWidth: 200,\n        width: '100%',\n        overflowWrap: 'anywhere',\n        whiteSpace: 'pre-wrap',\n    },\n    disabledSubtitle: {\n        color: 'transparent',\n        backgroundColor: theme.palette.action.disabledBackground,\n        borderRadius: 5,\n    },\n    timestamp: {\n        fontSize: 14,\n        color: '#aaaaaa',\n        textAlign: 'right',\n        paddingRight: 15,\n        paddingLeft: 5,\n    },\n    copyButton: {\n        textAlign: 'right',\n        padding: 0,\n    },\n}));\n\nexport interface DisplaySubtitleModel extends SubtitleModel {\n    displayTime: string;\n}\n\ninterface SubtitleRowProps extends TableRowProps {\n    index: number;\n    compressed: boolean;\n    selected: boolean;\n    disabled: boolean;\n    subtitle: DisplaySubtitleModel;\n    subtitleRef: RefObject<HTMLTableRowElement>;\n    onClickSubtitle: (index: number) => void;\n    onCopySubtitle: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>, index: number) => void;\n}\n\nconst SubtitleRow = React.memo((props: SubtitleRowProps) => {\n    const {\n        index,\n        selected,\n        subtitleRef,\n        onClickSubtitle,\n        onCopySubtitle,\n        compressed,\n        disabled,\n        subtitle,\n        ...tableRowProps\n    } = props;\n    const classes = useSubtitleRowStyles();\n    const textRef = useRef<HTMLSpanElement>(null);\n    const [textSelected, setTextSelected] = useState<boolean>(false);\n    let className = compressed ? classes.compressedSubtitle : classes.subtitle;\n    let disabledClassName = disabled ? classes.disabledSubtitle : '';\n\n    if (subtitle.start < 0 || subtitle.end < 0) {\n        return null;\n    }\n\n    function handleMouseUp() {\n        const selection = document.getSelection();\n        const selected =\n            selection?.type === 'Range' && textRef.current?.isSameNode(selection.anchorNode?.parentNode ?? null);\n        setTextSelected(selected ?? false);\n    }\n\n    const content = subtitle.textImage ? (\n        <SubtitleTextImage availableWidth={window.screen.availWidth / 2} subtitle={subtitle} scale={1} />\n    ) : (\n        <span ref={textRef} className={disabledClassName}>\n            {subtitle.text}\n        </span>\n    );\n\n    return (\n        <TableRow\n            onClick={() => !textSelected && onClickSubtitle(index)}\n            onMouseUp={handleMouseUp}\n            ref={subtitleRef}\n            className={classes.subtitleRow}\n            selected={selected}\n            {...tableRowProps}\n        >\n            <TableCell className={className}>{content}</TableCell>\n            <TableCell className={classes.copyButton}>\n                <IconButton onClick={(e) => onCopySubtitle(e, index)}>\n                    <FileCopy fontSize={compressed ? 'small' : 'medium'} />\n                </IconButton>\n            </TableCell>\n            <TableCell className={classes.timestamp}>{subtitle.displayTime}</TableCell>\n        </TableRow>\n    );\n});\n\ninterface SubtitlePlayerProps {\n    clock: Clock;\n    onSeek: (progress: number, shouldPlay: boolean) => void;\n    onCopy: (\n        subtitle: SubtitleModel,\n        surroundingSubtitles: SubtitleModel[],\n        postMineAction: PostMineAction,\n        preventDuplicate: boolean\n    ) => void;\n    onOffsetChange: (offset: number) => void;\n    onToggleSubtitleTrack: (track: number) => void;\n    onStartedShowing?: () => void;\n    onWillStopShowing?: () => void;\n    playing: boolean;\n    subtitles?: DisplaySubtitleModel[];\n    length: number;\n    jumpToSubtitle?: SubtitleModel;\n    compressed: boolean;\n    loading: boolean;\n    drawerOpen: boolean;\n    appBarHidden: boolean;\n    displayHelp?: string;\n    disableKeyEvents: boolean;\n    lastJumpToTopTimestamp: number;\n    hidden: boolean;\n    disabledSubtitleTracks: { [track: number]: boolean };\n    settingsProvider: AsbplayerSettingsProvider;\n}\n\nexport default function SubtitlePlayer({\n    clock,\n    onSeek,\n    onCopy,\n    onOffsetChange,\n    onToggleSubtitleTrack,\n    onStartedShowing,\n    onWillStopShowing,\n    playing,\n    subtitles,\n    length,\n    jumpToSubtitle,\n    compressed,\n    loading,\n    drawerOpen,\n    appBarHidden,\n    displayHelp,\n    disableKeyEvents,\n    lastJumpToTopTimestamp,\n    hidden,\n    disabledSubtitleTracks,\n    settingsProvider,\n}: SubtitlePlayerProps) {\n    const playingRef = useRef<boolean>();\n    playingRef.current = playing;\n    const clockRef = useRef<Clock>(clock);\n    clockRef.current = clock;\n    const subtitleListRef = useRef<DisplaySubtitleModel[]>();\n    subtitleListRef.current = subtitles;\n    const subtitleRefs = useMemo<RefObject<HTMLTableRowElement>[]>(\n        () =>\n            subtitles\n                ? Array(subtitles.length)\n                      .fill(undefined)\n                      .map((_) => createRef<HTMLTableRowElement>())\n                : [],\n        [subtitles]\n    );\n    const subtitleRefsRef = useRef<RefObject<HTMLTableRowElement>[]>([]);\n    subtitleRefsRef.current = subtitleRefs;\n    const disableKeyEventsRef = useRef<boolean>();\n    disableKeyEventsRef.current = disableKeyEvents;\n    const [selectedSubtitleIndexes, setSelectedSubtitleIndexes] = useState<{ [index: number]: boolean }>({});\n    const selectedSubtitleIndexesRef = useRef<{ [index: number]: boolean }>({});\n    const lengthRef = useRef<number>(0);\n    lengthRef.current = length;\n    const hiddenRef = useRef<boolean>(false);\n    hiddenRef.current = hidden;\n    const lastScrollTimestampRef = useRef<number>(0);\n    const requestAnimationRef = useRef<number>();\n    const containerRef = useRef<HTMLElement>();\n    const drawerOpenRef = useRef<boolean>();\n    drawerOpenRef.current = drawerOpen;\n    const [windowWidth] = useWindowSize(true);\n    const classes = useSubtitlePlayerStyles({ compressed, windowWidth, appBarHidden });\n    const startedShowingSubtitleRef = useRef<SubtitleModel>();\n    const onStartedShowingRef = useRef<() => void>();\n    onStartedShowingRef.current = onStartedShowing;\n    const willStopShowingSubtitleRef = useRef<SubtitleModel>();\n    const onWillStopShowingRef = useRef<() => void>();\n    onWillStopShowingRef.current = onWillStopShowing;\n\n    // This effect should be scheduled only once as re-scheduling seems to cause performance issues.\n    // Therefore all of the state it operates on is contained in refs.\n    useEffect(() => {\n        const update = () => {\n            const subtitles = subtitleListRef.current || [];\n            const subtitleRefs = subtitleRefsRef.current;\n            const length = lengthRef.current;\n            const clock = clockRef.current;\n            const progress = clock.progress(lengthRef.current);\n\n            let smallestIndex = Number.MAX_SAFE_INTEGER;\n            let fallbackIndex = -1;\n            let startedShowing = false;\n            let startedShowingSubtitle: SubtitleModel | undefined;\n            let willStopShowing = false;\n            let willStopShowingSubtitle: SubtitleModel | undefined;\n            const currentSubtitleIndexes: { [index: number]: boolean } = {};\n\n            for (let i = subtitles.length - 1; i >= 0; --i) {\n                const s = subtitles[i];\n                const start = s.start / length;\n                const end = s.end / length;\n\n                if (progress >= start) {\n                    if (progress < end) {\n                        smallestIndex = i < smallestIndex ? i : smallestIndex;\n                        currentSubtitleIndexes[i] = true;\n                        const nextProgress = progress + 100 / length;\n\n                        if (!willStopShowing && nextProgress >= end) {\n                            willStopShowing = true;\n                            willStopShowingSubtitle = s;\n                        }\n\n                        // Add slight buffer to ensure sub is displaying on video\n                        if (!startedShowing && progress >= start + 100 / length && progress < start + 500 / length) {\n                            startedShowing = true;\n                            startedShowingSubtitle = s;\n                        }\n                    }\n\n                    if (fallbackIndex === -1) {\n                        fallbackIndex = i;\n                    }\n                } else if (smallestIndex !== Number.MAX_SAFE_INTEGER) {\n                    break;\n                }\n            }\n\n            // Attempt to highlight *something* if no subtitles were found at the current timestamp\n            if (smallestIndex === Number.MAX_SAFE_INTEGER && fallbackIndex !== -1) {\n                currentSubtitleIndexes[fallbackIndex] = true;\n            }\n\n            if (!keysAreEqual(currentSubtitleIndexes, selectedSubtitleIndexesRef.current)) {\n                selectedSubtitleIndexesRef.current = currentSubtitleIndexes;\n                setSelectedSubtitleIndexes(currentSubtitleIndexes);\n\n                if (smallestIndex !== Number.MAX_SAFE_INTEGER) {\n                    const scrollToSubtitleRef = subtitleRefs[smallestIndex];\n                    const allowScroll = !hiddenRef.current && Date.now() - lastScrollTimestampRef.current > 5000;\n\n                    if (scrollToSubtitleRef?.current && allowScroll) {\n                        scrollToSubtitleRef.current.scrollIntoView({\n                            block: 'center',\n                            inline: 'nearest',\n                            behavior: 'smooth',\n                        });\n                    }\n                }\n            }\n\n            if (startedShowing && startedShowingSubtitleRef.current !== startedShowingSubtitle) {\n                onStartedShowingRef.current?.();\n                startedShowingSubtitleRef.current = startedShowingSubtitle;\n            }\n\n            if (willStopShowing && willStopShowingSubtitleRef.current !== willStopShowingSubtitle) {\n                onWillStopShowingRef.current?.();\n                willStopShowingSubtitleRef.current = willStopShowingSubtitle;\n            }\n\n            requestAnimationRef.current = requestAnimationFrame(update);\n        };\n\n        requestAnimationRef.current = requestAnimationFrame(update);\n\n        return () => {\n            if (requestAnimationRef.current !== undefined) {\n                cancelAnimationFrame(requestAnimationRef.current);\n            }\n        };\n    }, []);\n\n    const scrollToCurrentSubtitle = useCallback(() => {\n        const selectedSubtitleIndexes = selectedSubtitleIndexesRef.current;\n\n        if (!selectedSubtitleIndexes) {\n            return;\n        }\n\n        const indexes = Object.keys(selectedSubtitleIndexes);\n\n        if (indexes.length === 0) {\n            return;\n        }\n\n        const scrollToSubtitleRef = subtitleRefs[Number(indexes[0])];\n\n        scrollToSubtitleRef?.current?.scrollIntoView({\n            block: 'center',\n            inline: 'nearest',\n            behavior: 'smooth',\n        });\n    }, [subtitleRefs]);\n\n    useEffect(() => {\n        if (hidden) {\n            return;\n        }\n\n        function scrollIfVisible() {\n            if (document.visibilityState === 'visible') {\n                scrollToCurrentSubtitle();\n            }\n        }\n\n        document.addEventListener('visibilitychange', scrollIfVisible);\n\n        return () => document.removeEventListener('visibilitychange', scrollIfVisible);\n    }, [hidden, selectedSubtitleIndexes, subtitleRefs, scrollToCurrentSubtitle]);\n\n    useEffect(() => {\n        if (!hidden) {\n            scrollToCurrentSubtitle();\n        }\n    }, [hidden, scrollToCurrentSubtitle]);\n\n    useEffect(() => {\n        if (hiddenRef.current) {\n            return;\n        }\n\n        const subtitleRefs = subtitleRefsRef.current;\n\n        if (!subtitleRefs || subtitleRefs.length === 0) {\n            return;\n        }\n\n        const firstSubtitleRef = subtitleRefs[0];\n        firstSubtitleRef?.current?.scrollIntoView({\n            block: 'center',\n            inline: 'nearest',\n            behavior: 'smooth',\n        });\n    }, [lastJumpToTopTimestamp]);\n\n    useEffect(() => {\n        const unbind = KeyBindings.bindAdjustOffset(\n            (event, offset) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onOffsetChange(offset);\n            },\n            () => disableKeyEvents,\n            () => subtitles\n        );\n\n        return () => unbind();\n    }, [onOffsetChange, disableKeyEvents, subtitles]);\n\n    useEffect(() => {\n        const unbind = KeyBindings.bindOffsetToSubtitle(\n            (event, offset) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onOffsetChange(offset);\n            },\n            () => disableKeyEvents,\n            () => clock.time(length),\n            () => subtitles\n        );\n\n        return () => unbind();\n    }, [onOffsetChange, disableKeyEvents, clock, subtitles, length]);\n\n    useEffect(() => {\n        const unbind = KeyBindings.bindSeekToSubtitle(\n            (event, subtitle) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onSeek(subtitle.start, false);\n            },\n            () => disableKeyEvents,\n            () => clock.time(length),\n            () => subtitles\n        );\n\n        return () => unbind();\n    }, [onSeek, subtitles, disableKeyEvents, clock, length]);\n\n    useEffect(() => {\n        const unbind = KeyBindings.bindSeekToBeginningOfCurrentSubtitle(\n            (event, subtitle) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onSeek(subtitle.start, false);\n            },\n            () => disableKeyEvents,\n            () => clock.time(length),\n            () => subtitles\n        );\n\n        return () => unbind();\n    }, [onSeek, subtitles, disableKeyEvents, clock, length]);\n\n    useEffect(() => {\n        const unbind = KeyBindings.bindSeekBackwardOrForward(\n            (event, forward) => {\n                event.stopPropagation();\n                event.preventDefault();\n                if (forward) {\n                    onSeek(Math.min(length, clock.time(length) + 10000), false);\n                } else {\n                    onSeek(Math.max(0, clock.time(length) - 10000), false);\n                }\n            },\n            () => disableKeyEvents\n        );\n\n        return () => unbind();\n    }, [clock, length, disableKeyEvents, onSeek]);\n\n    useEffect(() => {\n        function handleScroll() {\n            lastScrollTimestampRef.current = Date.now();\n        }\n\n        const table = containerRef.current;\n        table?.addEventListener('wheel', handleScroll);\n\n        return () => table?.removeEventListener('wheel', handleScroll);\n    }, [containerRef, lastScrollTimestampRef]);\n\n    useEffect(() => {\n        if (hidden) {\n            return;\n        }\n\n        if (!jumpToSubtitle || !subtitles) {\n            return;\n        }\n\n        let jumpToIndex = -1;\n        let i = 0;\n\n        for (let s of subtitles) {\n            if (s.originalStart === jumpToSubtitle.originalStart && s.text === jumpToSubtitle.text) {\n                jumpToIndex = i;\n                break;\n            }\n\n            ++i;\n        }\n\n        if (jumpToIndex !== -1) {\n            subtitleRefs[jumpToIndex]?.current?.scrollIntoView({\n                block: 'center',\n                inline: 'nearest',\n                behavior: 'smooth',\n            });\n        }\n    }, [hidden, jumpToSubtitle, subtitles, subtitleRefs]);\n\n    const calculateSurroundingSubtitlesForIndex = useCallback(\n        (index: number) => {\n            if (!selectedSubtitleIndexesRef.current || !subtitles) {\n                return [];\n            }\n\n            return surroundingSubtitles(\n                subtitles,\n                index,\n                settingsProvider.surroundingSubtitlesCountRadius,\n                settingsProvider.surroundingSubtitlesTimeRadius\n            );\n        },\n        [subtitles, settingsProvider.surroundingSubtitlesCountRadius, settingsProvider.surroundingSubtitlesTimeRadius]\n    );\n\n    const calculateSurroundingSubtitles = useCallback(() => {\n        if (!selectedSubtitleIndexesRef.current) {\n            return [];\n        }\n        const index = Math.min(...Object.keys(selectedSubtitleIndexesRef.current).map((i) => Number(i)));\n        return calculateSurroundingSubtitlesForIndex(index);\n    }, [calculateSurroundingSubtitlesForIndex]);\n\n    useEffect(() => {\n        const unbind = KeyBindings.bindCopy(\n            (event, subtitle) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onCopy(subtitle, calculateSurroundingSubtitles(), PostMineAction.none, false);\n            },\n            () => disableKeyEventsRef.current ?? false,\n            () => {\n                const subtitleIndexes = Object.keys(selectedSubtitleIndexesRef.current).map((i) => Number(i));\n\n                if (!subtitles || !subtitleIndexes || subtitleIndexes.length === 0) {\n                    return undefined;\n                }\n\n                const index = Math.min(...subtitleIndexes);\n                return subtitles[index];\n            }\n        );\n\n        return () => unbind();\n    }, [subtitles, calculateSurroundingSubtitles, onCopy]);\n\n    useEffect(() => {\n        const unbind = KeyBindings.bindToggleSubtitleTrackInList(\n            (event, track) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onToggleSubtitleTrack(track);\n            },\n            () => {},\n            () => disableKeyEvents\n        );\n\n        return () => unbind();\n    }, [disableKeyEvents, onToggleSubtitleTrack]);\n\n    useEffect(() => {\n        const unbind = KeyBindings.bindAnkiExport(\n            (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n                const subtitleIndexes = Object.keys(selectedSubtitleIndexesRef.current).map((i) => Number(i));\n\n                if (subtitles && subtitleIndexes && subtitleIndexes.length > 0) {\n                    const index = Math.min(...subtitleIndexes);\n                    onCopy(\n                        subtitles[index],\n                        calculateSurroundingSubtitlesForIndex(index),\n                        PostMineAction.showAnkiDialog,\n                        true\n                    );\n                }\n            },\n            () => !subtitles || subtitles.length === 0 || disableKeyEvents\n        );\n\n        return () => unbind();\n    }, [onCopy, disableKeyEvents, subtitles, calculateSurroundingSubtitlesForIndex]);\n\n    useEffect(() => {\n        const unbind = KeyBindings.bindUpdateLastCard(\n            (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n                const subtitleIndexes = Object.keys(selectedSubtitleIndexesRef.current).map((i) => Number(i));\n\n                if (subtitles && subtitleIndexes && subtitleIndexes.length > 0) {\n                    const index = Math.min(...subtitleIndexes);\n                    onCopy(\n                        subtitles[index],\n                        calculateSurroundingSubtitlesForIndex(index),\n                        PostMineAction.updateLastCard,\n                        true\n                    );\n                }\n            },\n            () => !subtitles || subtitles.length === 0 || disableKeyEvents\n        );\n\n        return () => unbind();\n    }, [onCopy, disableKeyEvents, subtitles, calculateSurroundingSubtitlesForIndex]);\n\n    const handleClick = useCallback(\n        (index: number) => {\n            if (!subtitles) {\n                return;\n            }\n\n            const selectedSubtitleIndexes = selectedSubtitleIndexesRef.current || {};\n            onSeek(subtitles[index].start, !playingRef.current && index in selectedSubtitleIndexes);\n        },\n        [subtitles, onSeek]\n    );\n\n    const handleCopy = useCallback(\n        (e: React.MouseEvent<HTMLButtonElement, MouseEvent>, index: number) => {\n            e.preventDefault();\n            e.stopPropagation();\n\n            if (!subtitles) {\n                return;\n            }\n\n            onCopy(subtitles[index], calculateSurroundingSubtitlesForIndex(index), PostMineAction.none, false);\n        },\n        [subtitles, calculateSurroundingSubtitlesForIndex, onCopy]\n    );\n\n    let subtitleTable = null;\n\n    if (!subtitles || subtitles.length === 0) {\n        if (!loading && displayHelp) {\n            subtitleTable = !loading && displayHelp && (\n                <div className={classes.noSubtitles}>\n                    <Typography variant=\"h6\">{displayHelp}</Typography>\n                </div>\n            );\n        } else if (subtitles && subtitles.length === 0) {\n            subtitleTable = (\n                <div className={classes.noSubtitles}>\n                    <Typography variant=\"h6\">No subtitles</Typography>\n                </div>\n            );\n        }\n    } else {\n        subtitleTable = (\n            <TableContainer className={classes.table}>\n                <Table>\n                    <TableBody>\n                        {subtitles.map((s: SubtitleModel, index: number) => {\n                            const selected = index in selectedSubtitleIndexes;\n\n                            return (\n                                <SubtitleRow\n                                    key={index}\n                                    index={index}\n                                    compressed={compressed}\n                                    selected={selected}\n                                    disabled={disabledSubtitleTracks[s.track]}\n                                    subtitle={subtitles[index]}\n                                    subtitleRef={subtitleRefs[index]}\n                                    onClickSubtitle={handleClick}\n                                    onCopySubtitle={handleCopy}\n                                />\n                            );\n                        })}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        );\n    }\n\n    return (\n        <Paper square elevation={0} ref={containerRef} className={classes.container}>\n            {subtitleTable}\n        </Paper>\n    );\n}\n","import {\n    AnkiDialogRequestFromVideoMessage,\n    AnkiSettings,\n    AnkiSettingsToVideoMessage,\n    AppBarToggleMessageToVideoMessage,\n    AudioModel,\n    AudioTrackModel,\n    AudioTrackSelectedFromVideoMessage,\n    AudioTrackSelectedToVideoMessage,\n    CopyMessage,\n    CurrentTimeFromVideoMessage,\n    CurrentTimeToVideoMessage,\n    FinishedAnkiDialogRequestToVideoMessage,\n    HideSubtitlePlayerToggleToVideoMessage,\n    ImageModel,\n    MiscSettings,\n    MiscSettingsToVideoMessage,\n    OffsetFromVideoMessage,\n    PauseFromVideoMessage,\n    PlayFromVideoMessage,\n    PlayMode,\n    PlayModeMessage,\n    PostMineAction,\n    ReadyFromVideoMessage,\n    ReadyStateFromVideoMessage,\n    ReadyToVideoMessage,\n    SubtitleModel,\n    SubtitleSettings,\n    SubtitleSettingsToVideoMessage,\n    SubtitlesToVideoMessage,\n    ToggleSubtitleTrackInListFromVideoMessage,\n} from '@project/common';\nimport { VideoProtocol } from './VideoProtocol';\n\nexport default class VideoChannel {\n    private readonly protocol: VideoProtocol;\n    private time: number;\n    private isReady: boolean;\n    private readyCallbacks: ((paused: boolean) => void)[];\n    private playCallbacks: ((echo: boolean) => void)[];\n    private pauseCallbacks: ((echo: boolean) => void)[];\n    private audioTrackSelectedCallbacks: ((audioTrack: string) => void)[];\n    private currentTimeCallbacks: ((currentTime: number, echo: boolean) => void)[];\n    private exitCallbacks: (() => void)[];\n    private offsetCallbacks: ((offset: number) => void)[];\n    private popOutToggleCallbacks: (() => void)[];\n    private copyCallbacks: ((\n        subtitle: SubtitleModel,\n        surroundingSubtitles: SubtitleModel[],\n        audio: AudioModel | undefined,\n        image: ImageModel | undefined,\n        url: string | undefined,\n        postMineAction: PostMineAction,\n        fromVideo: boolean,\n        preventDuplicate: boolean,\n        id: string | undefined\n    ) => void)[];\n    private playModeCallbacks: ((mode: PlayMode) => void)[];\n    private hideSubtitlePlayerToggleCallbacks: (() => void)[];\n    private appBarToggleCallbacks: (() => void)[];\n    private ankiDialogRequestCallbacks: ((forwardToVideo: boolean) => void)[];\n    private toggleSubtitleTrackInListCallbacks: ((track: number) => void)[];\n\n    readyState: number;\n    oncanplay: ((ev: Event) => void) | null = null;\n    audioTracks?: AudioTrackModel[];\n    selectedAudioTrack?: string;\n    duration: number;\n\n    constructor(protocol: VideoProtocol) {\n        this.protocol = protocol;\n        this.time = 0;\n        this.duration = 0;\n        this.isReady = false;\n        this.readyState = 0;\n        this.selectedAudioTrack = undefined;\n        this.readyCallbacks = [];\n        this.playCallbacks = [];\n        this.pauseCallbacks = [];\n        this.currentTimeCallbacks = [];\n        this.audioTrackSelectedCallbacks = [];\n        this.exitCallbacks = [];\n        this.offsetCallbacks = [];\n        this.popOutToggleCallbacks = [];\n        this.copyCallbacks = [];\n        this.playModeCallbacks = [];\n        this.hideSubtitlePlayerToggleCallbacks = [];\n        this.appBarToggleCallbacks = [];\n        this.ankiDialogRequestCallbacks = [];\n        this.toggleSubtitleTrackInListCallbacks = [];\n\n        const that = this;\n\n        this.protocol.onMessage = (event) => {\n            switch (event.data.command) {\n                case 'ready':\n                    const readyMessage = event.data as ReadyFromVideoMessage;\n\n                    that.duration = readyMessage.duration;\n                    that.isReady = true;\n                    that.audioTracks = readyMessage.audioTracks;\n                    that.selectedAudioTrack = readyMessage.selectedAudioTrack;\n                    that.readyState = 4;\n                    that.time = readyMessage.currentTime;\n\n                    for (let callback of that.readyCallbacks) {\n                        callback(readyMessage.paused);\n                    }\n                    break;\n                case 'readyState':\n                    const readyStateMessage = event.data as ReadyStateFromVideoMessage;\n\n                    that.readyState = readyStateMessage.value;\n                    if (that.readyState === 4) {\n                        that.oncanplay?.(new Event('canplay'));\n                    }\n                    break;\n                case 'play':\n                    const playMessage = event.data as PlayFromVideoMessage;\n\n                    for (let callback of that.playCallbacks) {\n                        callback(playMessage.echo);\n                    }\n                    break;\n                case 'pause':\n                    const pauseMessage = event.data as PauseFromVideoMessage;\n\n                    for (let callback of that.pauseCallbacks) {\n                        callback(pauseMessage.echo);\n                    }\n                    break;\n                case 'audioTrackSelected':\n                    const audioTrackSelectedMessage = event.data as AudioTrackSelectedFromVideoMessage;\n\n                    for (let callback of that.audioTrackSelectedCallbacks) {\n                        that.selectedAudioTrack = audioTrackSelectedMessage.id;\n                        callback(audioTrackSelectedMessage.id);\n                    }\n                    break;\n                case 'currentTime':\n                    const currentTimeMessage = event.data as CurrentTimeFromVideoMessage;\n\n                    for (let callback of that.currentTimeCallbacks) {\n                        callback(currentTimeMessage.value, currentTimeMessage.echo);\n                    }\n                    break;\n                case 'exit':\n                    for (let callback of that.exitCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'offset':\n                    const offsetMessage = event.data as OffsetFromVideoMessage;\n\n                    for (let callback of that.offsetCallbacks) {\n                        callback(offsetMessage.value);\n                    }\n                    break;\n                case 'popOutToggle':\n                    for (let callback of that.popOutToggleCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'copy':\n                    for (let callback of that.copyCallbacks) {\n                        const copyMessage = event.data as CopyMessage;\n\n                        callback(\n                            copyMessage.subtitle,\n                            copyMessage.surroundingSubtitles,\n                            copyMessage.audio,\n                            copyMessage.image,\n                            copyMessage.url,\n                            copyMessage.postMineAction ?? PostMineAction.none,\n                            true,\n                            copyMessage.preventDuplicate ?? false,\n                            copyMessage.id\n                        );\n                    }\n                    break;\n                case 'playMode':\n                    for (let callback of that.playModeCallbacks) {\n                        const playModeMessage = event.data as PlayModeMessage;\n                        callback(playModeMessage.playMode);\n                    }\n                    break;\n                case 'hideSubtitlePlayerToggle':\n                    for (let callback of that.hideSubtitlePlayerToggleCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'appBarToggle':\n                    for (let callback of that.appBarToggleCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'sync':\n                    // ignore\n                    break;\n                case 'syncv2':\n                    // ignore\n                    break;\n                case 'ankiDialogRequest':\n                    const ankiDialogRequestMessage = event.data as AnkiDialogRequestFromVideoMessage;\n\n                    for (let callback of that.ankiDialogRequestCallbacks) {\n                        callback(ankiDialogRequestMessage.forwardToVideo);\n                    }\n                    break;\n                case 'toggleSubtitleTrackInList':\n                    const toggleSubtitleTrackInListMessage = event.data as ToggleSubtitleTrackInListFromVideoMessage;\n\n                    for (const callback of that.toggleSubtitleTrackInListCallbacks) {\n                        callback(toggleSubtitleTrackInListMessage.track);\n                    }\n                    break;\n                case 'playbackRate':\n                    // ignore for now\n                    break;\n                default:\n                    console.error('Unrecognized event ' + event.data.command);\n            }\n        };\n    }\n\n    get currentTime() {\n        return this.time;\n    }\n\n    set currentTime(value: number) {\n        this.time = value;\n        this.readyState = 3;\n        const message: CurrentTimeToVideoMessage = { command: 'currentTime', value: this.time };\n        this.protocol.postMessage(message);\n    }\n\n    onReady(callback: (paused: boolean) => void) {\n        if (this.isReady) {\n            callback(false);\n        }\n        this.readyCallbacks.push(callback);\n    }\n\n    onPlay(callback: (echo: boolean) => void) {\n        this.playCallbacks.push(callback);\n    }\n\n    onPause(callback: (echo: boolean) => void) {\n        this.pauseCallbacks.push(callback);\n    }\n\n    onCurrentTime(callback: (currentTime: number, echo: boolean) => void) {\n        this.currentTimeCallbacks.push(callback);\n    }\n\n    onAudioTrackSelected(callback: (id: string) => void) {\n        this.audioTrackSelectedCallbacks.push(callback);\n    }\n\n    onExit(callback: () => void) {\n        this.exitCallbacks.push(callback);\n    }\n\n    onOffset(callback: (offset: number) => void) {\n        this.offsetCallbacks.push(callback);\n    }\n\n    onPopOutToggle(callback: () => void) {\n        this.popOutToggleCallbacks.push(callback);\n    }\n\n    onCopy(\n        callback: (\n            subtitle: SubtitleModel,\n            surroundingSubtitles: SubtitleModel[],\n            audio: AudioModel | undefined,\n            image: ImageModel | undefined,\n            url: string | undefined,\n            postMineAction: PostMineAction,\n            fromVideo: boolean,\n            preventDuplicate: boolean,\n            id: string | undefined\n        ) => void\n    ) {\n        this.copyCallbacks.push(callback);\n    }\n\n    onPlayMode(callback: (playMode: PlayMode) => void) {\n        this.playModeCallbacks.push(callback);\n    }\n\n    onHideSubtitlePlayerToggle(callback: () => void) {\n        this.hideSubtitlePlayerToggleCallbacks.push(callback);\n    }\n\n    onAppBarToggle(callback: () => void) {\n        this.appBarToggleCallbacks.push(callback);\n    }\n\n    onAnkiDialogRequest(callback: (forwardToVideo: boolean) => void) {\n        this.ankiDialogRequestCallbacks.push(callback);\n    }\n\n    onToggleSubtitleTrackInList(callback: (track: number) => void) {\n        this.toggleSubtitleTrackInListCallbacks.push(callback);\n    }\n\n    ready(duration: number) {\n        const message: ReadyToVideoMessage = { command: 'ready', duration: duration };\n        this.protocol.postMessage(message);\n    }\n\n    init() {\n        this.protocol.postMessage({ command: 'init' });\n    }\n\n    // Return a promise to implement the analogous HTMLMediaElement method\n    play(): Promise<void> {\n        this.protocol.postMessage({ command: 'play' });\n        return new Promise((resolve, reject) => resolve());\n    }\n\n    pause() {\n        this.protocol.postMessage({ command: 'pause' });\n    }\n\n    audioTrackSelected(id: string) {\n        const message: AudioTrackSelectedToVideoMessage = { command: 'audioTrackSelected', id: id };\n        this.protocol.postMessage(message);\n    }\n\n    subtitles(subtitles: SubtitleModel[], subtitleFileNames: string[]) {\n        this.protocol.postMessage({\n            command: 'subtitles',\n            value: subtitles,\n            name: subtitleFileNames.length > 0 ? subtitleFileNames[0] : null,\n            names: subtitleFileNames,\n        } as SubtitlesToVideoMessage);\n    }\n\n    subtitleSettings(settings: SubtitleSettings) {\n        const message: SubtitleSettingsToVideoMessage = { command: 'subtitleSettings', value: settings };\n        this.protocol.postMessage(message);\n    }\n\n    playMode(playMode: PlayMode) {\n        const message: PlayModeMessage = {\n            command: 'playMode',\n            playMode: playMode,\n        };\n        this.protocol.postMessage(message);\n    }\n\n    hideSubtitlePlayerToggle(hidden: boolean) {\n        const message: HideSubtitlePlayerToggleToVideoMessage = {\n            command: 'hideSubtitlePlayerToggle',\n            value: hidden,\n        };\n        this.protocol.postMessage(message);\n    }\n\n    appBarToggle(hidden: boolean) {\n        const message: AppBarToggleMessageToVideoMessage = {\n            command: 'appBarToggle',\n            value: hidden,\n        };\n        this.protocol.postMessage(message);\n    }\n\n    ankiDialogRequest() {\n        this.protocol.postMessage({ command: 'ankiDialogRequest' });\n    }\n\n    finishedAnkiDialogRequest(resume: boolean) {\n        const message: FinishedAnkiDialogRequestToVideoMessage = {\n            command: 'finishedAnkiDialogRequest',\n            resume: resume,\n        };\n        this.protocol.postMessage(message);\n    }\n\n    ankiSettings(settings: AnkiSettings) {\n        const message: AnkiSettingsToVideoMessage = { command: 'ankiSettings', value: settings };\n        this.protocol.postMessage(message);\n    }\n\n    miscSettings(settings: MiscSettings) {\n        const message: MiscSettingsToVideoMessage = { command: 'miscSettings', value: settings };\n        this.protocol.postMessage(message);\n    }\n\n    close() {\n        this.protocol.postMessage({ command: 'close' });\n        this.protocol.close();\n        this.readyCallbacks = [];\n        this.playCallbacks = [];\n        this.pauseCallbacks = [];\n        this.currentTimeCallbacks = [];\n        this.audioTrackSelectedCallbacks = [];\n        this.exitCallbacks = [];\n        this.offsetCallbacks = [];\n        this.popOutToggleCallbacks = [];\n        this.copyCallbacks = [];\n        this.playModeCallbacks = [];\n        this.hideSubtitlePlayerToggleCallbacks = [];\n        this.appBarToggleCallbacks = [];\n        this.ankiDialogRequestCallbacks = [];\n        this.toggleSubtitleTrackInListCallbacks = [];\n    }\n}\n","import React, { useEffect, useState, useMemo, useCallback, useRef, MutableRefObject } from 'react';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport { v4 as uuidv4 } from 'uuid';\nimport {\n    AsbplayerSettingsProvider,\n    AudioModel,\n    AudioTrackModel,\n    AutoPausePreference,\n    ImageModel,\n    KeyBindings,\n    mockSurroundingSubtitles,\n    PlayMode,\n    PostMineAction,\n    SubtitleModel,\n    VideoTabModel,\n} from '@project/common';\nimport { timeDurationDisplay } from '../services/Util';\nimport BroadcastChannelVideoProtocol from '../services/BroadcastChannelVideoProtocol';\nimport ChromeTabVideoProtocol from '../services/ChromeTabVideoProtocol';\nimport Clock from '../services/Clock';\nimport Controls, { Point } from './Controls';\nimport Grid from '@material-ui/core/Grid';\nimport MediaAdapter, { MediaElement } from '../services/MediaAdapter';\nimport SubtitlePlayer, { DisplaySubtitleModel } from './SubtitlePlayer';\nimport VideoChannel from '../services/VideoChannel';\nimport ChromeExtension from '../services/ChromeExtension';\nimport SubtitleReader from '../services/SubtitleReader';\n\ninterface StylesProps {\n    appBarHidden: boolean;\n}\n\nconst useStyles = makeStyles<Theme, StylesProps>({\n    root: ({ appBarHidden }) => ({\n        height: appBarHidden ? '100vh' : 'calc(100vh - 64px)',\n        position: 'relative',\n        overflowX: 'hidden',\n    }),\n    container: {\n        width: '100%',\n        height: '100%',\n    },\n    videoFrame: {\n        width: '100%',\n        height: '100%',\n        border: 0,\n        display: 'block',\n    },\n});\n\nfunction trackLength(\n    audioRef: MutableRefObject<HTMLAudioElement | null>,\n    videoRef: MutableRefObject<MediaElement | undefined>,\n    subtitles: SubtitleModel[] | undefined,\n    useOffset?: boolean\n) {\n    let subtitlesLength;\n    if (subtitles && subtitles.length > 0) {\n        if (useOffset) {\n            subtitlesLength = subtitles[subtitles.length - 1].end;\n        } else {\n            subtitlesLength = subtitles[subtitles.length - 1].originalEnd;\n        }\n    } else {\n        subtitlesLength = 0;\n    }\n\n    const audioLength = audioRef.current && audioRef.current.duration ? 1000 * audioRef.current.duration : 0;\n\n    const videoLength = videoRef.current && videoRef.current.duration ? 1000 * videoRef.current.duration : 0;\n\n    return Math.max(videoLength, Math.max(subtitlesLength, audioLength));\n}\n\nexport interface MediaSources {\n    subtitleFiles: File[];\n    audioFile?: File;\n    audioFileUrl?: string;\n    videoFile?: File;\n    videoFileUrl?: string;\n}\n\nexport interface AnkiDialogFinishedRequest {\n    resume: boolean;\n    timestamp: number;\n}\n\ninterface PlayerProps {\n    sources: MediaSources;\n    subtitleReader: SubtitleReader;\n    settingsProvider: AsbplayerSettingsProvider;\n    extension: ChromeExtension;\n    videoFrameRef: MutableRefObject<HTMLIFrameElement | null>;\n    drawerOpen: boolean;\n    appBarHidden: boolean;\n    videoPopOut: boolean;\n    tab?: VideoTabModel;\n    availableTabs: VideoTabModel[];\n    ankiDialogRequestToVideo?: number;\n    ankiDialogRequested: boolean;\n    ankiDialogFinishedRequest: AnkiDialogFinishedRequest;\n    onError: (error: string) => void;\n    onUnloadAudio: (url: string) => void;\n    onUnloadVideo: (url: string) => void;\n    onCopy: (\n        subtitle: SubtitleModel,\n        surroundingSubtitles: SubtitleModel[],\n        audioFile: File | undefined,\n        videoFile: File | undefined,\n        subtitleFile: File | undefined,\n        mediaTimestamp: number | undefined,\n        audioTrack: string | undefined,\n        audio: AudioModel | undefined,\n        image: ImageModel | undefined,\n        url: string | undefined,\n        postMineAction: PostMineAction | undefined,\n        fromVideo: boolean | undefined,\n        preventDuplicate: boolean | undefined,\n        id: string | undefined\n    ) => void;\n    onLoaded: () => void;\n    onTabSelected: (tab: VideoTabModel) => void;\n    onAnkiDialogRequest: (forwardToVideo?: boolean) => void;\n    onAppBarToggle: () => void;\n    onVideoPopOut: () => void;\n    onAutoPauseModeChangedViaBind: (playMode: PlayMode) => void;\n    disableKeyEvents: boolean;\n    jumpToSubtitle?: SubtitleModel;\n    rewindSubtitle?: SubtitleModel;\n}\n\nexport default function Player({\n    sources: { subtitleFiles, audioFile, audioFileUrl, videoFile, videoFileUrl },\n    subtitleReader,\n    settingsProvider,\n    extension,\n    videoFrameRef,\n    drawerOpen,\n    appBarHidden,\n    videoPopOut,\n    tab,\n    availableTabs,\n    ankiDialogRequestToVideo,\n    ankiDialogRequested,\n    ankiDialogFinishedRequest,\n    onError,\n    onUnloadAudio,\n    onUnloadVideo,\n    onCopy,\n    onLoaded,\n    onTabSelected,\n    onAnkiDialogRequest,\n    onAppBarToggle,\n    onVideoPopOut,\n    onAutoPauseModeChangedViaBind,\n    disableKeyEvents,\n    jumpToSubtitle,\n    rewindSubtitle,\n}: PlayerProps) {\n    const [subtitles, setSubtitles] = useState<DisplaySubtitleModel[]>();\n    const subtitlesRef = useRef<SubtitleModel[]>();\n    subtitlesRef.current = subtitles;\n    const [loadingSubtitles, setLoadingSubtitles] = useState<boolean>(false);\n    const [playing, setPlaying] = useState<boolean>(false);\n    const [lastJumpToTopTimestamp, setLastJumpToTopTimestamp] = useState<number>(0);\n    const [offset, setOffset] = useState<number>(0);\n    const playingRef = useRef<boolean>();\n    playingRef.current = playing;\n    const [, updateState] = useState<any>();\n    const [audioTracks, setAudioTracks] = useState<AudioTrackModel[]>();\n    const [selectedAudioTrack, setSelectedAudioTrack] = useState<string>();\n    const [channelId, setChannelId] = useState<string>();\n    const [, setResumeOnFinishedAnkiDialogRequest] = useState<boolean>(false);\n    const [hideSubtitlePlayer, setHideSubtitlePlayer] = useState<boolean>(false);\n    const hideSubtitlePlayerRef = useRef<boolean>();\n    hideSubtitlePlayerRef.current = hideSubtitlePlayer;\n    const [disabledSubtitleTracks, setDisabledSubtitleTracks] = useState<{ [track: number]: boolean }>({});\n    const [playMode, setPlayMode] = useState<PlayMode>(PlayMode.normal);\n    const playModeRef = useRef<PlayMode>();\n    playModeRef.current = playMode;\n    const forceUpdate = useCallback(() => updateState({}), []);\n    const mousePositionRef = useRef<Point>({ x: 0, y: 0 });\n    const audioRef = useRef<HTMLAudioElement>(null);\n    const videoRef = useRef<MediaElement>();\n    const mediaAdapter = useMemo(() => {\n        if (audioFileUrl) {\n            return new MediaAdapter(audioRef);\n        } else if (videoFileUrl || tab) {\n            return new MediaAdapter(videoRef);\n        }\n\n        return new MediaAdapter({ current: null });\n    }, [audioFileUrl, videoFileUrl, tab]);\n    const clock = useMemo<Clock>(() => new Clock(), []);\n    const classes = useStyles({ appBarHidden });\n    const lengthRef = useRef<number>(0);\n    lengthRef.current = trackLength(audioRef, videoRef, subtitles, true);\n\n    const seek = useCallback(\n        async (time: number, clock: Clock, forwardToMedia: boolean) => {\n            clock.setTime(time);\n            forceUpdate();\n\n            if (forwardToMedia) {\n                await mediaAdapter.seek(time / 1000);\n            }\n        },\n        [forceUpdate, mediaAdapter]\n    );\n\n    const applyOffset = useCallback(\n        (offset: number, forwardToVideo: boolean) => {\n            setOffset(offset);\n\n            setSubtitles((subtitles) => {\n                if (!subtitles) {\n                    return;\n                }\n\n                const length = subtitles.length > 0 ? subtitles[subtitles.length - 1].end + offset : 0;\n\n                const newSubtitles = subtitles.map((s) => ({\n                    text: s.text,\n                    textImage: s.textImage,\n                    start: s.originalStart + offset,\n                    originalStart: s.originalStart,\n                    end: s.originalEnd + offset,\n                    originalEnd: s.originalEnd,\n                    displayTime: timeDurationDisplay(s.originalStart + offset, length),\n                    track: s.track,\n                }));\n\n                if (forwardToVideo) {\n                    if (videoRef.current instanceof VideoChannel) {\n                        videoRef.current.subtitles(\n                            newSubtitles,\n                            subtitleFiles.map((f) => f.name)\n                        );\n                    }\n                }\n\n                return newSubtitles;\n            });\n        },\n        [subtitleFiles]\n    );\n\n    useEffect(() => {\n        let channel: VideoChannel | undefined = undefined;\n        let channelClosed = false;\n\n        async function init() {\n            if (videoRef.current instanceof VideoChannel) {\n                videoRef.current.close();\n            }\n            videoRef.current = undefined;\n            clock.setTime(0);\n            clock.stop();\n            setOffset(0);\n            setPlaying(false);\n            setAudioTracks(undefined);\n            setSelectedAudioTrack(undefined);\n            setPlayMode(PlayMode.normal);\n\n            if (audioRef.current) {\n                audioRef.current.currentTime = 0;\n                audioRef.current.pause();\n            }\n\n            let subtitles: DisplaySubtitleModel[] | undefined;\n\n            if (subtitleFiles.length > 0) {\n                setLoadingSubtitles(true);\n\n                try {\n                    const nodes = await subtitleReader.subtitles(subtitleFiles);\n                    const length = nodes.length > 0 ? nodes[nodes.length - 1].end : 0;\n                    subtitles = nodes.map((s) => ({\n                        text: s.text,\n                        textImage: s.textImage,\n                        start: s.start,\n                        originalStart: s.start,\n                        end: s.end,\n                        originalEnd: s.end,\n                        displayTime: timeDurationDisplay(s.start, length),\n                        track: s.track,\n                    }));\n\n                    setSubtitles(subtitles);\n                    setLastJumpToTopTimestamp(Date.now());\n                } catch (e) {\n                    if (e instanceof Error) {\n                        onError(e.message);\n                    } else {\n                        onError(String(e));\n                    }\n                } finally {\n                    setLoadingSubtitles(false);\n                }\n            } else {\n                subtitles = undefined;\n            }\n\n            if (audioFileUrl) {\n                await mediaAdapter.onReady();\n                forceUpdate();\n            } else if (videoFileUrl || tab) {\n                if (channelClosed) {\n                    return;\n                }\n\n                if (videoFileUrl) {\n                    const channelId = uuidv4();\n                    channel = new VideoChannel(new BroadcastChannelVideoProtocol(channelId));\n                    setChannelId(channelId);\n                } else if (tab) {\n                    channel = new VideoChannel(new ChromeTabVideoProtocol(tab.id, tab.src, extension));\n                    channel.init();\n                } else {\n                    // Not possible\n                    // But throw error so typescript recognizes channel as defined\n                    throw new Error('Unreachable code');\n                }\n\n                videoRef.current = channel;\n                let subscribed = false;\n\n                channel.onExit(() => videoFileUrl && onUnloadVideo(videoFileUrl));\n                channel.onPopOutToggle(() => onVideoPopOut());\n                channel.onHideSubtitlePlayerToggle(() => {\n                    setHideSubtitlePlayer((hidden) => {\n                        channel?.hideSubtitlePlayerToggle(!hidden);\n                        return !hidden;\n                    });\n                });\n                channel.onAppBarToggle(() => {\n                    onAppBarToggle();\n                });\n                channel.onReady((paused) => {\n                    lengthRef.current = trackLength(audioRef, videoRef, subtitlesRef.current);\n                    channel?.ready(lengthRef.current);\n\n                    if (subtitlesRef.current) {\n                        channel?.subtitleSettings(settingsProvider.subtitleSettings);\n                        channel?.subtitles(\n                            subtitlesRef.current,\n                            subtitleFiles.map((f) => f.name)\n                        );\n                    }\n\n                    channel?.ankiSettings(settingsProvider.ankiSettings);\n                    channel?.miscSettings(settingsProvider.miscSettings);\n                    channel?.playMode(playModeRef.current!);\n                    channel?.hideSubtitlePlayerToggle(hideSubtitlePlayerRef.current ?? false);\n\n                    if (channel?.audioTracks && channel?.audioTracks?.length > 1) {\n                        setAudioTracks(channel?.audioTracks);\n                        setSelectedAudioTrack(channel?.selectedAudioTrack);\n                    } else {\n                        setAudioTracks(undefined);\n                        setSelectedAudioTrack(undefined);\n                    }\n\n                    if (videoRef.current) {\n                        clock.setTime(videoRef.current.currentTime * 1000);\n                    }\n\n                    if (paused) {\n                        clock.stop();\n                    } else {\n                        clock.start();\n                    }\n\n                    setPlaying(!paused);\n\n                    if (!subscribed) {\n                        channel?.onPlay((forwardToMedia) => play(clock, mediaAdapter, forwardToMedia));\n                        channel?.onPause((forwardToMedia) => pause(clock, mediaAdapter, forwardToMedia));\n                        channel?.onOffset((offset) => applyOffset(Math.max(-lengthRef.current ?? 0, offset), false));\n                        channel?.onCopy(\n                            (\n                                subtitle,\n                                surroundingSubtitles,\n                                audio,\n                                image,\n                                url,\n                                postMineAction,\n                                fromVideo,\n                                preventDuplicate,\n                                id\n                            ) =>\n                                onCopy(\n                                    subtitle,\n                                    surroundingSubtitles,\n                                    audioFile,\n                                    videoFile,\n                                    subtitle ? subtitleFiles[subtitle.track] : undefined,\n                                    clock.time(lengthRef.current),\n                                    channel?.selectedAudioTrack,\n                                    audio,\n                                    image,\n                                    url,\n                                    postMineAction,\n                                    fromVideo,\n                                    preventDuplicate,\n                                    id\n                                )\n                        );\n                        channel?.onPlayMode((playMode) => {\n                            setPlayMode(playMode);\n                            channel?.playMode(playMode);\n                        });\n                        channel?.onCurrentTime(async (currentTime, forwardToMedia) => {\n                            if (playingRef.current) {\n                                clock.stop();\n                            }\n\n                            await seek(currentTime * 1000, clock, forwardToMedia);\n\n                            if (playingRef.current) {\n                                clock.start();\n                            }\n                        });\n                        channel?.onAudioTrackSelected(async (id) => {\n                            if (playingRef.current) {\n                                clock.stop();\n                            }\n\n                            await mediaAdapter.onReady();\n                            if (playingRef.current) {\n                                clock.start();\n                            }\n\n                            setSelectedAudioTrack(id);\n                        });\n                        channel?.onAnkiDialogRequest((forwardToVideo) => onAnkiDialogRequest(forwardToVideo));\n                        channel?.onToggleSubtitleTrackInList((track) =>\n                            setDisabledSubtitleTracks((tracks) => {\n                                const newTracks = { ...tracks };\n                                newTracks[track] = !tracks[track];\n                                return newTracks;\n                            })\n                        );\n\n                        subscribed = true;\n                    }\n                });\n            }\n        }\n\n        init().then(() => onLoaded());\n\n        return () => {\n            channel?.close();\n            channelClosed = true;\n        };\n    }, [\n        subtitleReader,\n        extension,\n        settingsProvider,\n        clock,\n        mediaAdapter,\n        seek,\n        onLoaded,\n        onError,\n        onUnloadVideo,\n        onCopy,\n        onAnkiDialogRequest,\n        onAppBarToggle,\n        onVideoPopOut,\n        subtitleFiles,\n        audioFile,\n        audioFileUrl,\n        videoFile,\n        videoFileUrl,\n        tab,\n        forceUpdate,\n        videoFrameRef,\n        applyOffset,\n    ]);\n\n    function play(clock: Clock, mediaAdapter: MediaAdapter, forwardToMedia: boolean) {\n        setPlaying(true);\n        clock.start();\n\n        if (forwardToMedia) {\n            mediaAdapter.play();\n        }\n    }\n\n    function pause(clock: Clock, mediaAdapter: MediaAdapter, forwardToMedia: boolean) {\n        setPlaying(false);\n        clock.stop();\n\n        if (forwardToMedia) {\n            mediaAdapter.pause();\n        }\n    }\n\n    useEffect(() => {\n        if (ankiDialogRequestToVideo && videoRef.current instanceof VideoChannel) {\n            videoRef.current.ankiDialogRequest();\n        }\n    }, [ankiDialogRequestToVideo]);\n\n    useEffect(() => {\n        if (ankiDialogFinishedRequest && ankiDialogFinishedRequest.timestamp > 0) {\n            if (videoRef.current instanceof VideoChannel) {\n                videoRef.current.finishedAnkiDialogRequest(ankiDialogFinishedRequest.resume);\n            }\n\n            setResumeOnFinishedAnkiDialogRequest((resumeOnFinishedAnkiDialogRequest) => {\n                if (resumeOnFinishedAnkiDialogRequest && ankiDialogFinishedRequest.resume) {\n                    play(clock, mediaAdapter, true);\n                }\n\n                return false;\n            });\n        }\n    }, [ankiDialogFinishedRequest, clock, mediaAdapter]);\n\n    useEffect(() => {\n        if (ankiDialogRequested && playingRef.current) {\n            pause(clock, mediaAdapter, true);\n            setResumeOnFinishedAnkiDialogRequest(true);\n        }\n    }, [ankiDialogRequested, clock, mediaAdapter]);\n\n    useEffect(() => {\n        if (playMode !== PlayMode.condensed) {\n            return;\n        }\n\n        if (!subtitles || subtitles.length === 0) {\n            return;\n        }\n\n        let seeking = false;\n        let expectedSeekTime = 1000;\n\n        const interval = setInterval(async () => {\n            const length = lengthRef.current;\n\n            if (!length) {\n                return;\n            }\n\n            const progress = clock.progress(length);\n\n            let currentOrNextIndex = 0;\n            let currentIndex = -1;\n\n            for (let i = subtitles.length - 1; i >= 0; --i) {\n                const s = subtitles[i];\n                const start = s.start / length;\n                const end = s.end / length;\n\n                if (progress >= start) {\n                    if (progress < end) {\n                        currentIndex = i;\n                        currentOrNextIndex = i;\n                    } else {\n                        currentOrNextIndex = Math.min(subtitles.length - 1, i + 1);\n                    }\n\n                    break;\n                }\n            }\n\n            if (currentIndex !== currentOrNextIndex) {\n                const nextSubtitle = subtitles[currentOrNextIndex];\n\n                if (nextSubtitle.start - progress * length < expectedSeekTime + 500) {\n                    return;\n                }\n\n                if (playingRef.current) {\n                    clock.stop();\n                }\n\n                if (!seeking) {\n                    seeking = true;\n                    const t0 = Date.now();\n                    await seek(nextSubtitle.start, clock, true);\n                    expectedSeekTime = Date.now() - t0;\n                    seeking = false;\n                }\n\n                if (playingRef.current) {\n                    clock.start();\n                }\n            }\n        }, 100);\n\n        return () => clearInterval(interval);\n    }, [subtitles, playMode, clock, seek]);\n\n    const handleOnStartedShowingSubtitle = useCallback(() => {\n        if (playMode !== PlayMode.autoPause || settingsProvider.autoPausePreference !== AutoPausePreference.atStart) {\n            return;\n        }\n\n        pause(clock, mediaAdapter, true);\n    }, [playMode, clock, mediaAdapter, settingsProvider]);\n\n    const handleOnWillStopShowingSubtitle = useCallback(() => {\n        if (playMode !== PlayMode.autoPause || settingsProvider.autoPausePreference !== AutoPausePreference.atEnd) {\n            return;\n        }\n\n        pause(clock, mediaAdapter, true);\n    }, [playMode, clock, mediaAdapter, settingsProvider]);\n\n    useEffect(() => {\n        if (videoPopOut && channelId && videoFileUrl) {\n            window.open(\n                process.env.PUBLIC_URL +\n                    '/?video=' +\n                    encodeURIComponent(videoFileUrl) +\n                    '&channel=' +\n                    channelId +\n                    '&popout=true',\n                'asbplayer-video-' + videoFileUrl,\n                'resizable,width=800,height=450'\n            );\n        }\n\n        setLastJumpToTopTimestamp(Date.now());\n    }, [videoPopOut, channelId, videoFileUrl, videoFrameRef]);\n\n    const handlePlay = useCallback(() => play(clock, mediaAdapter, true), [clock, mediaAdapter]);\n    const handlePause = useCallback(() => pause(clock, mediaAdapter, true), [clock, mediaAdapter]);\n    const handleSeek = useCallback(\n        async (progress: number) => {\n            if (!lengthRef.current) {\n                return;\n            }\n\n            if (playingRef.current) {\n                clock.stop();\n            }\n\n            await seek(progress * lengthRef.current, clock, true);\n\n            if (playingRef.current) {\n                clock.start();\n            }\n        },\n        [clock, seek]\n    );\n\n    const handleSeekToSubtitle = useCallback(\n        async (time: number, shouldPlay: boolean) => {\n            if (!shouldPlay) {\n                pause(clock, mediaAdapter, true);\n            }\n\n            if (playingRef.current) {\n                clock.stop();\n            }\n\n            await seek(time, clock, true);\n\n            if (shouldPlay && !playingRef.current) {\n                // play method will start the clock again\n                play(clock, mediaAdapter, true);\n            }\n        },\n        [clock, seek, mediaAdapter]\n    );\n\n    const handleCopyFromSubtitlePlayer = useCallback(\n        (\n            subtitle: SubtitleModel,\n            surroundingSubtitles: SubtitleModel[],\n            postMineAction: PostMineAction,\n            preventDuplicate: boolean\n        ) => {\n            onCopy(\n                subtitle,\n                surroundingSubtitles,\n                audioFile,\n                videoFile,\n                subtitleFiles[subtitle.track],\n                clock.time(lengthRef.current),\n                selectedAudioTrack,\n                undefined,\n                undefined,\n                undefined,\n                postMineAction,\n                false,\n                preventDuplicate,\n                undefined\n            );\n        },\n        [clock, onCopy, audioFile, videoFile, subtitleFiles, selectedAudioTrack]\n    );\n\n    const handleMouseMove = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n        mousePositionRef.current.x = e.screenX;\n        mousePositionRef.current.y = e.screenY;\n    }, []);\n\n    const handleAudioTrackSelected = useCallback(\n        async (id: string) => {\n            if (videoRef.current instanceof VideoChannel) {\n                videoRef.current.audioTrackSelected(id);\n            }\n\n            pause(clock, mediaAdapter, true);\n\n            await seek(0, clock, true);\n\n            if (playingRef.current) {\n                play(clock, mediaAdapter, true);\n            }\n        },\n        [clock, mediaAdapter, seek]\n    );\n\n    const handleOffsetChange = useCallback(\n        (offset: number) => {\n            applyOffset(Math.max(-lengthRef.current ?? 0, offset), true);\n        },\n        [applyOffset]\n    );\n\n    const handleVolumeChange = useCallback((volume: number) => {\n        if (audioRef.current instanceof HTMLMediaElement) {\n            audioRef.current.volume = volume;\n        }\n    }, []);\n\n    const handlePlayMode = useCallback((playMode: PlayMode) => setPlayMode(playMode), []);\n\n    const handleToggleSubtitleTrack = useCallback(\n        (track: number) =>\n            setDisabledSubtitleTracks((tracks) => {\n                const newTracks = { ...tracks };\n                newTracks[track] = !tracks[track];\n                return newTracks;\n            }),\n        []\n    );\n\n    useEffect(() => {\n        if (tab) {\n            return;\n        }\n\n        const interval = setInterval(async () => {\n            const length = lengthRef.current;\n            const progress = clock.progress(length);\n\n            if (progress >= 1) {\n                pause(clock, mediaAdapter, true);\n                await seek(0, clock, true);\n                setLastJumpToTopTimestamp(Date.now());\n            }\n        }, 1000);\n\n        return () => clearInterval(interval);\n    }, [clock, subtitles, mediaAdapter, seek, tab]);\n\n    useEffect(() => {\n        const unbind = KeyBindings.bindPlay(\n            (event) => {\n                event.preventDefault();\n\n                if (playing) {\n                    pause(clock, mediaAdapter, true);\n                } else {\n                    play(clock, mediaAdapter, true);\n                }\n            },\n            () => disableKeyEvents\n        );\n\n        return () => unbind();\n    }, [playing, clock, mediaAdapter, disableKeyEvents]);\n\n    useEffect(() => {\n        return KeyBindings.bindAutoPause(\n            (event) => {\n                if (tab) {\n                    return;\n                }\n\n                event.preventDefault();\n                const newPlayMode = playMode === PlayMode.autoPause ? PlayMode.normal : PlayMode.autoPause;\n                setPlayMode(newPlayMode);\n                onAutoPauseModeChangedViaBind(newPlayMode);\n            },\n            () => disableKeyEvents\n        );\n    }, [disableKeyEvents, settingsProvider, playMode, tab, onAutoPauseModeChangedViaBind]);\n\n    useEffect(() => {\n        if ((audioFile || videoFile) && (!subtitles || subtitles.length === 0)) {\n            const unbindCopy = KeyBindings.bindCopy(\n                (event, subtitle) => {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    const surroundingSubtitles = mockSurroundingSubtitles(subtitle, lengthRef.current, 5000);\n                    onCopy(\n                        subtitle,\n                        surroundingSubtitles,\n                        audioFile,\n                        videoFile,\n                        undefined,\n                        clock.time(lengthRef.current),\n                        selectedAudioTrack,\n                        undefined,\n                        undefined,\n                        undefined,\n                        undefined,\n                        undefined,\n                        undefined,\n                        undefined\n                    );\n                },\n                () => disableKeyEvents,\n                () => {\n                    if (!lengthRef.current) {\n                        return undefined;\n                    }\n\n                    const timestamp = clock.time(lengthRef.current);\n                    const end = Math.min(timestamp + 5000, lengthRef.current);\n\n                    return {\n                        text: '',\n                        start: timestamp,\n                        originalStart: timestamp,\n                        end: end,\n                        originalEnd: end,\n                        track: 0,\n                    };\n                }\n            );\n\n            const unbindAnkiExport = KeyBindings.bindAnkiExport(\n                (event) => {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    const timestamp = clock.time(lengthRef.current);\n                    const end = Math.min(timestamp + 5000, lengthRef.current);\n                    const subtitle = {\n                        text: '',\n                        start: timestamp,\n                        originalStart: timestamp,\n                        end: end,\n                        originalEnd: end,\n                        track: 0,\n                    };\n                    const surroundingSubtitles = mockSurroundingSubtitles(subtitle, lengthRef.current, 5000);\n                    onCopy(\n                        subtitle,\n                        surroundingSubtitles,\n                        audioFile,\n                        videoFile,\n                        undefined,\n                        timestamp,\n                        selectedAudioTrack,\n                        undefined,\n                        undefined,\n                        undefined,\n                        PostMineAction.showAnkiDialog,\n                        false,\n                        undefined,\n                        undefined\n                    );\n                },\n                () => false\n            );\n\n            return () => {\n                unbindCopy();\n                unbindAnkiExport();\n            };\n        }\n    }, [audioFile, videoFile, subtitles, clock, selectedAudioTrack, disableKeyEvents, onCopy, onAnkiDialogRequest]);\n\n    useEffect(() => {\n        if (videoRef.current instanceof VideoChannel) {\n            videoRef.current.appBarToggle(appBarHidden);\n        }\n    }, [appBarHidden]);\n\n    useEffect(() => {\n        if (!rewindSubtitle) {\n            return;\n        }\n\n        if (playingRef.current) {\n            clock.stop();\n        }\n\n        handleSeekToSubtitle(rewindSubtitle.start, false);\n    }, [clock, rewindSubtitle, handleSeekToSubtitle]);\n\n    const length = lengthRef.current;\n    const loaded = audioFileUrl || videoFileUrl || subtitles;\n    const videoInWindow = Boolean(loaded && videoFileUrl && !videoPopOut);\n\n    return (\n        <div onMouseMove={handleMouseMove} className={classes.root}>\n            <Grid container direction=\"row\" wrap=\"nowrap\" className={classes.container}>\n                {videoInWindow && (\n                    <Grid item style={{ flexGrow: 1, minWidth: 600 }}>\n                        <iframe\n                            ref={videoFrameRef}\n                            className={classes.videoFrame}\n                            src={\n                                process.env.PUBLIC_URL +\n                                '/?video=' +\n                                encodeURIComponent(videoFileUrl!) +\n                                '&channel=' +\n                                channelId +\n                                '&popout=false'\n                            }\n                            title=\"asbplayer\"\n                        />\n                    </Grid>\n                )}\n                {(!videoInWindow || (subtitles && subtitles?.length > 0)) && (\n                    <Grid\n                        item\n                        style={{\n                            flexGrow: videoInWindow ? 0 : 1,\n                            width: videoInWindow && hideSubtitlePlayer ? 0 : 'auto',\n                        }}\n                    >\n                        {loaded && !(videoFileUrl && !videoPopOut) && (\n                            <Controls\n                                mousePositionRef={mousePositionRef}\n                                playing={playing}\n                                clock={clock}\n                                length={length}\n                                displayLength={trackLength(audioRef, videoRef, subtitles, false)}\n                                audioTracks={audioTracks}\n                                selectedAudioTrack={selectedAudioTrack}\n                                tabs={(!videoFileUrl && !audioFileUrl && availableTabs) || undefined}\n                                selectedTab={tab}\n                                audioFile={audioFile?.name}\n                                videoFile={videoFile?.name}\n                                offsetEnabled={true}\n                                offset={offset}\n                                volumeEnabled={Boolean(audioFileUrl)}\n                                playModeEnabled={Boolean(videoFileUrl || audioFileUrl)}\n                                playMode={playMode}\n                                onPlay={handlePlay}\n                                onPause={handlePause}\n                                onSeek={handleSeek}\n                                onAudioTrackSelected={handleAudioTrackSelected}\n                                onTabSelected={onTabSelected}\n                                onUnloadAudio={() => audioFileUrl && onUnloadAudio(audioFileUrl)}\n                                onUnloadVideo={() => videoFileUrl && onUnloadVideo(videoFileUrl)}\n                                onOffsetChange={handleOffsetChange}\n                                onVolumeChange={handleVolumeChange}\n                                onPlayMode={handlePlayMode}\n                                disableKeyEvents={disableKeyEvents}\n                                settingsProvider={settingsProvider}\n                                showOnMouseMovement={true}\n                            />\n                        )}\n                        <SubtitlePlayer\n                            playing={playing}\n                            subtitles={subtitles}\n                            clock={clock}\n                            length={length}\n                            jumpToSubtitle={jumpToSubtitle}\n                            drawerOpen={drawerOpen}\n                            appBarHidden={appBarHidden}\n                            compressed={Boolean(videoFileUrl && !videoPopOut)}\n                            loading={loadingSubtitles}\n                            displayHelp={audioFile?.name || (videoPopOut && videoFile?.name) || undefined}\n                            disableKeyEvents={disableKeyEvents}\n                            lastJumpToTopTimestamp={lastJumpToTopTimestamp}\n                            hidden={videoInWindow && hideSubtitlePlayer}\n                            disabledSubtitleTracks={disabledSubtitleTracks}\n                            onSeek={handleSeekToSubtitle}\n                            onCopy={handleCopyFromSubtitlePlayer}\n                            onOffsetChange={handleOffsetChange}\n                            onToggleSubtitleTrack={handleToggleSubtitleTrack}\n                            onStartedShowing={handleOnStartedShowingSubtitle}\n                            onWillStopShowing={handleOnWillStopShowingSubtitle}\n                            settingsProvider={settingsProvider}\n                        />\n                    </Grid>\n                )}\n            </Grid>\n            <audio ref={audioRef} src={audioFileUrl} />\n        </div>\n    );\n}\n","import { useState, useEffect } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\ninterface Props {\n    open: boolean;\n    onProceed: (fieldName: string) => void;\n    onCancel: () => void;\n    existingCustomFieldNames: string[];\n}\n\nexport default function CustomFieldDialog({ open, onProceed, onCancel, existingCustomFieldNames }: Props) {\n    const [fieldName, setFieldName] = useState<string>('');\n\n    useEffect(() => {\n        setFieldName('');\n    }, [open]);\n\n    const fieldExists = [\n        ...existingCustomFieldNames,\n        'Sentence',\n        'Word',\n        'Definition',\n        'Source',\n        'Image',\n        'Audio',\n    ].includes(fieldName);\n\n    return (\n        <Dialog\n            open={open}\n            disableEnforceFocus\n            fullWidth\n            maxWidth=\"xs\"\n            onClose={onCancel}\n        >\n            <DialogTitle>New Custom Field</DialogTitle>\n            <DialogContent>\n                <form>\n                    <TextField\n                        error={fieldExists}\n                        helperText={fieldExists && `Field ${fieldName} already exists`}\n                        variant=\"filled\"\n                        fullWidth\n                        label=\"Field Name\"\n                        value={fieldName}\n                        color=\"secondary\"\n                        onChange={(e) => setFieldName(e.target.value)}\n                    />\n                </form>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={() => onCancel()}>Cancel</Button>\n                <Button disabled={fieldExists || fieldName.trim() === ''} onClick={() => onProceed(fieldName.trim())}>\n                    Create\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n","import React, { useCallback, useState, useEffect, useMemo, ChangeEvent, ReactNode } from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport { computeStyles } from '../services/Util';\nimport Button from '@material-ui/core/Button';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport CustomFieldDialog from './CustomFieldDialog';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Grid from '@material-ui/core/Grid';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Link from '@material-ui/core/Link';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Radio from '@material-ui/core/Radio';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport Select from '@material-ui/core/Select';\nimport TextField from '@material-ui/core/TextField';\nimport { Theme } from '@material-ui/core/styles';\nimport { Anki, AsbplayerSettings, AutoPausePreference } from '@project/common';\nimport { TagsTextField } from '@project/common/components';\n\nconst useStyles = makeStyles<Theme>((theme) => ({\n    root: {\n        '& .MuiTextField-root': {\n            marginTop: theme.spacing(1),\n            marginBottom: theme.spacing(1),\n        },\n    },\n    subtitleSetting: {\n        '& .MuiTextField-root': {\n            marginTop: theme.spacing(1),\n            marginBottom: theme.spacing(1),\n        },\n    },\n    subtitlePreview: {\n        backgroundImage: `linear-gradient(45deg, ${theme.palette.action.disabledBackground} 25%, transparent 25%), linear-gradient(-45deg, ${theme.palette.action.disabledBackground} 25%, transparent 25%), linear-gradient(45deg, transparent 75%, ${theme.palette.action.disabledBackground} 75%), linear-gradient(-45deg, transparent 75%,${theme.palette.action.disabledBackground} 75%)`,\n        backgroundSize: '20px 20px',\n        backgroundPosition: '0 0, 0 10px, 10px -10px, -10px 0px',\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n        maxWidth: '100%',\n        padding: 10,\n    },\n    subtitlePreviewInput: {\n        border: 'none',\n        width: '100%',\n        textAlign: 'center',\n        backgroundColor: 'rgba(0,0,0,0)',\n        '&:focus': {\n            outline: 'none',\n        },\n    },\n    addFieldButton: {\n        width: '100%',\n    },\n}));\n\nconst useSelectableSettingStyles = makeStyles<Theme>((theme) => ({\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n    },\n    root: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'end',\n        alignItems: 'flex-end',\n    },\n}));\n\ninterface SelectableSettingProps {\n    label: string;\n    value: string;\n    selections?: string[];\n    removable?: boolean;\n    onChange: (event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => void;\n    onSelectionChange: (event: ChangeEvent<{ name?: string | undefined; value: unknown }>, child: ReactNode) => void;\n    onRemoval?: () => void;\n}\n\nfunction SelectableSetting({\n    label,\n    value,\n    selections,\n    removable,\n    onChange,\n    onSelectionChange,\n    onRemoval,\n}: SelectableSettingProps) {\n    const classes = useSelectableSettingStyles();\n\n    return (\n        <div className={classes.root}>\n            <TextField\n                label={label}\n                value={value}\n                onChange={onChange}\n                fullWidth\n                color=\"secondary\"\n                InputProps={{\n                    endAdornment: removable && (\n                        <InputAdornment position=\"end\">\n                            <IconButton onClick={(e) => onRemoval?.()}>\n                                <DeleteIcon />\n                            </IconButton>\n                        </InputAdornment>\n                    ),\n                }}\n            />\n            <FormControl className={classes.formControl}>\n                <InputLabel></InputLabel>\n                <Select value={value} disabled={!selections} color=\"secondary\" onChange={onSelectionChange}>\n                    {selections &&\n                        selections.map((s) => (\n                            <MenuItem key={s} value={s}>\n                                {s}\n                            </MenuItem>\n                        ))}\n                </Select>\n            </FormControl>\n        </div>\n    );\n}\n\ninterface Props {\n    anki: Anki;\n    open: boolean;\n    settings: AsbplayerSettings;\n    onClose: (settings: AsbplayerSettings) => void;\n}\n\nexport default function SettingsDialog({ anki, open, settings, onClose }: Props) {\n    const classes = useStyles();\n    const [ankiConnectUrl, setAnkiConnectUrl] = useState<string>(settings.ankiConnectUrl);\n    const [ankiConnectUrlError, setAnkiConnectUrlError] = useState<string>();\n    const [ankiConnectUrlChangeTimestamp, setAnkiConnectUrlChangeTimestamp] = useState<number>(0);\n    const [deck, setDeck] = useState<string>(settings.deck || '');\n    const [deckNames, setDeckNames] = useState<string[]>();\n    const [noteType, setNoteType] = useState<string>(settings.noteType || '');\n    const [modelNames, setModelNames] = useState<string[]>();\n    const [sentenceField, setSentenceField] = useState<string>(settings.sentenceField || '');\n    const [definitionField, setDefinitionField] = useState<string>(settings.definitionField || '');\n    const [audioField, setAudioField] = useState<string>(settings.audioField || '');\n    const [imageField, setImageField] = useState<string>(settings.imageField || '');\n    const [wordField, setWordField] = useState<string>(settings.wordField || '');\n    const [sourceField, setSourceField] = useState<string>(settings.sourceField || '');\n    const [urlField, setUrlField] = useState<string>(settings.urlField || '');\n    const [customFields, setCustomFields] = useState<{ [key: string]: string }>(settings.customAnkiFields);\n    const [tags, setTags] = useState<string[]>(settings.tags);\n    const [preferMp3, setPreferMp3] = useState<boolean>(settings.preferMp3);\n    const [fieldNames, setFieldNames] = useState<string[]>();\n    const [customFieldDialogOpen, setCustomFieldDialogOpen] = useState<boolean>(false);\n    const [audioPaddingStart, setAudioPaddingStart] = useState<number>(settings.audioPaddingStart);\n    const [audioPaddingEnd, setAudioPaddingEnd] = useState<number>(settings.audioPaddingEnd);\n    const [maxImageWidth, setMaxImageWidth] = useState<number>(settings.maxImageWidth);\n    const [maxImageHeight, setMaxImageHeight] = useState<number>(settings.maxImageHeight);\n    const [subtitleColor, setSubtitleColor] = useState<string>(settings.subtitleColor);\n    const [subtitleSize, setSubtitleSize] = useState<number>(settings.subtitleSize);\n    const [subtitleOutlineColor, setSubtitleOutlineColor] = useState<string>(settings.subtitleOutlineColor);\n    const [subtitleOutlineThickness, setSubtitleOutlineThickness] = useState<number>(settings.subtitleOutlineThickness);\n    const [subtitleBackgroundColor, setSubtitleBackgroundColor] = useState<string>(settings.subtitleBackgroundColor);\n    const [subtitleBackgroundOpacity, setSubtitleBackgroundOpacity] = useState<number>(\n        settings.subtitleBackgroundOpacity\n    );\n    const [subtitleFontFamily, setSubtitleFontFamily] = useState<string>(settings.subtitleFontFamily);\n    const [imageBasedSubtitleScaleFactor, setImageBasedSubtitleScaleFactor] = useState<number>(\n        settings.imageBasedSubtitleScaleFactor\n    );\n    const [subtitlePreview, setSubtitlePreview] = useState<string>(settings.subtitlePreview);\n    const [themeType, setThemeType] = useState<'dark' | 'light'>(settings.themeType);\n    const [copyToClipboardOnMine, setCopyToClipboardOnMine] = useState<boolean>(settings.copyToClipboardOnMine);\n    const [autoPausePreference, setAutoPausePreference] = useState<AutoPausePreference>(settings.autoPausePreference);\n\n    const handleAnkiConnectUrlChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n        setAnkiConnectUrl(e.target.value);\n        setAnkiConnectUrlChangeTimestamp(Date.now());\n    }, []);\n\n    const handleRetryAnkiConnectUrl = useCallback(\n        (e: React.MouseEvent<HTMLButtonElement>) => setAnkiConnectUrlChangeTimestamp(Date.now()),\n        []\n    );\n    const handleDeckChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setDeck(e.target.value),\n        []\n    );\n    const handleDeckSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setDeck(e.target.value as string),\n        []\n    );\n    const handleNoteTypeChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setNoteType(e.target.value),\n        []\n    );\n    const handleNoteTypeSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setNoteType(e.target.value as string),\n        []\n    );\n    const handleSentenceFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSentenceField(e.target.value),\n        []\n    );\n    const handleSentenceFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setSentenceField(e.target.value as string),\n        []\n    );\n    const handleDefinitionFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setDefinitionField(e.target.value),\n        []\n    );\n    const handleDefinitionFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setDefinitionField(e.target.value as string),\n        []\n    );\n    const handleAudioFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setAudioField(e.target.value),\n        []\n    );\n    const handleAudioFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setAudioField(e.target.value as string),\n        []\n    );\n    const handleImageFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setImageField(e.target.value),\n        []\n    );\n    const handleImageFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setImageField(e.target.value as string),\n        []\n    );\n    const handleWordFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setWordField(e.target.value),\n        []\n    );\n    const handleWordFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setWordField(e.target.value as string),\n        []\n    );\n    const handleSourceFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSourceField(e.target.value),\n        []\n    );\n    const handleSourceFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setSourceField(e.target.value as string),\n        []\n    );\n    const handleUrlFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setUrlField(e.target.value),\n        []\n    );\n    const handleUrlFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setUrlField(e.target.value as string),\n        []\n    );\n    const handleAudioPaddingStart = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setAudioPaddingStart(Number(e.target.value)),\n        []\n    );\n    const handleAudioPaddingEnd = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setAudioPaddingEnd(Number(e.target.value)),\n        []\n    );\n    const handleMaxImageWidth = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setMaxImageWidth(Number(e.target.value)),\n        []\n    );\n    const handleMaxImageHeight = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setMaxImageHeight(Number(e.target.value)),\n        []\n    );\n    const handleSubtitleColorChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleColor(e.target.value),\n        []\n    );\n    const handleSubtitleSizeChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleSize(Number(e.target.value)),\n        []\n    );\n    const handleSubtitleOutlineColorChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleOutlineColor(e.target.value),\n        []\n    );\n    const handleSubtitleOutlineThicknessChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleOutlineThickness(Number(e.target.value)),\n        []\n    );\n    const handleSubtitleBackgroundColorChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleBackgroundColor(e.target.value),\n        []\n    );\n    const handleSubtitleBackgroundOpacityChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) =>\n            setSubtitleBackgroundOpacity(Number(e.target.value)),\n        []\n    );\n    const handleSubtitleFontFamilyChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleFontFamily(e.target.value),\n        []\n    );\n    const handleSubtitlePreviewChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitlePreview(e.target.value),\n        []\n    );\n    const handleImageBasedSubtitleScaleFactorChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) =>\n            setImageBasedSubtitleScaleFactor(Number(e.target.value)),\n        []\n    );\n    const handleAddCustomField = useCallback((customFieldName: string) => {\n        setCustomFields((oldCustomFields: { [key: string]: string }) => {\n            const newCustomFields: { [key: string]: string } = {};\n            Object.assign(newCustomFields, oldCustomFields);\n            newCustomFields[customFieldName] = '';\n            return newCustomFields;\n        });\n        setCustomFieldDialogOpen(false);\n    }, []);\n    const handleCustomFieldChange = useCallback((customFieldName: string, value: string) => {\n        setCustomFields((oldCustomFields: { [key: string]: string }) => {\n            const newCustomFields: { [key: string]: string } = {};\n            Object.assign(newCustomFields, oldCustomFields);\n            newCustomFields[customFieldName] = value;\n            return newCustomFields;\n        });\n    }, []);\n    const handleCustomFieldRemoval = useCallback(\n        (customFieldName: string) =>\n            setCustomFields((oldCustomFields: { [key: string]: string }) => {\n                const newCustomFields: { [key: string]: string } = {};\n                Object.assign(newCustomFields, oldCustomFields);\n                delete newCustomFields[customFieldName];\n                return newCustomFields;\n            }),\n        []\n    );\n    const handleTagsChange = useCallback((newTags: string[]) => {\n        setTags(newTags);\n    }, []);\n    const handlePreferMp3Change = useCallback((e: ChangeEvent<HTMLInputElement>) => setPreferMp3(e.target.checked), []);\n    const handleThemeTypeChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        if (e.target.value !== 'dark' && e.target.value !== 'light') {\n            throw new Error(`Invalid theme type ${e.target.value}`);\n        }\n\n        setThemeType(e.target.value);\n    }, []);\n    const handleCopyToClipboardOnMine = useCallback(\n        (e: ChangeEvent<HTMLInputElement>) => setCopyToClipboardOnMine(e.target.checked),\n        []\n    );\n    const handleAutoPausePreferenceChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        setAutoPausePreference(Number(e.target.value) as AutoPausePreference);\n    }, []);\n    const subtitlePreviewStyles = useMemo(\n        () =>\n            computeStyles({\n                subtitleColor: subtitleColor,\n                subtitleSize: subtitleSize,\n                subtitleOutlineThickness: subtitleOutlineThickness,\n                subtitleOutlineColor: subtitleOutlineColor,\n                subtitleBackgroundOpacity: subtitleBackgroundOpacity,\n                subtitleBackgroundColor: subtitleBackgroundColor,\n                subtitleFontFamily: subtitleFontFamily,\n            }),\n        [\n            subtitleColor,\n            subtitleSize,\n            subtitleOutlineThickness,\n            subtitleOutlineColor,\n            subtitleBackgroundOpacity,\n            subtitleBackgroundColor,\n            subtitleFontFamily,\n        ]\n    );\n\n    useEffect(() => {\n        let canceled = false;\n\n        const timeout = setTimeout(async () => {\n            try {\n                if (canceled) {\n                    return;\n                }\n\n                await anki.requestPermission(ankiConnectUrl);\n                setDeckNames(await anki.deckNames(ankiConnectUrl));\n                setModelNames(await anki.modelNames(ankiConnectUrl));\n                setAnkiConnectUrlError(undefined);\n            } catch (e) {\n                if (canceled) {\n                    return;\n                }\n\n                console.error(e);\n                setDeckNames(undefined);\n                setModelNames(undefined);\n\n                if (e instanceof Error) {\n                    setAnkiConnectUrlError(e.message);\n                } else if (typeof e === 'string') {\n                    setAnkiConnectUrlError(e);\n                } else {\n                    setAnkiConnectUrlError(String(e));\n                }\n            }\n        }, 1000);\n\n        return () => {\n            canceled = true;\n            clearTimeout(timeout);\n        };\n    }, [anki, ankiConnectUrl, ankiConnectUrlChangeTimestamp]);\n\n    useEffect(() => {\n        if (!noteType || ankiConnectUrlError) {\n            return undefined;\n        }\n\n        let canceled = false;\n\n        async function refreshFieldNames() {\n            try {\n                if (canceled) {\n                    return;\n                }\n\n                setFieldNames(['', ...(await anki.modelFieldNames(noteType, ankiConnectUrl))]);\n                setAnkiConnectUrlError(undefined);\n            } catch (e) {\n                if (canceled) {\n                    return;\n                }\n\n                console.error(e);\n                setFieldNames(undefined);\n\n                if (e instanceof Error) {\n                    setAnkiConnectUrlError(e.message);\n                } else if (typeof e === 'string') {\n                    setAnkiConnectUrlError(e);\n                } else {\n                    setAnkiConnectUrlError(String(e));\n                }\n            }\n        }\n\n        refreshFieldNames();\n\n        return () => {\n            canceled = true;\n        };\n    }, [anki, noteType, ankiConnectUrl, ankiConnectUrlError, ankiConnectUrlChangeTimestamp]);\n\n    const handleClose = useCallback(() => {\n        onClose({\n            ankiConnectUrl: ankiConnectUrl,\n            deck: deck,\n            noteType: noteType,\n            sentenceField: sentenceField,\n            definitionField: definitionField,\n            audioField: audioField,\n            imageField: imageField,\n            wordField: wordField,\n            sourceField: sourceField,\n            urlField: urlField,\n            tags: tags.filter((t) => t !== ''),\n            subtitleSize: Number(subtitleSize),\n            subtitleColor: subtitleColor,\n            subtitleOutlineThickness: Number(subtitleOutlineThickness),\n            subtitleOutlineColor: subtitleOutlineColor,\n            subtitleBackgroundColor: subtitleBackgroundColor,\n            subtitleBackgroundOpacity: Number(subtitleBackgroundOpacity),\n            subtitleFontFamily: subtitleFontFamily,\n            subtitlePreview: subtitlePreview,\n            imageBasedSubtitleScaleFactor: imageBasedSubtitleScaleFactor,\n            customAnkiFields: customFields,\n            preferMp3: preferMp3,\n            themeType: themeType,\n            audioPaddingStart: audioPaddingStart,\n            audioPaddingEnd: audioPaddingEnd,\n            maxImageWidth: maxImageWidth,\n            maxImageHeight: maxImageHeight,\n            surroundingSubtitlesCountRadius: settings.surroundingSubtitlesCountRadius,\n            surroundingSubtitlesTimeRadius: settings.surroundingSubtitlesTimeRadius,\n            volume: settings.volume,\n            theaterMode: settings.theaterMode,\n            copyToClipboardOnMine: copyToClipboardOnMine,\n            autoPausePreference: autoPausePreference,\n        });\n    }, [\n        onClose,\n        ankiConnectUrl,\n        deck,\n        noteType,\n        sentenceField,\n        definitionField,\n        audioField,\n        imageField,\n        wordField,\n        sourceField,\n        urlField,\n        customFields,\n        tags,\n        preferMp3,\n        subtitleSize,\n        subtitleColor,\n        subtitleOutlineThickness,\n        subtitleOutlineColor,\n        subtitleBackgroundColor,\n        subtitleBackgroundOpacity,\n        subtitleFontFamily,\n        subtitlePreview,\n        imageBasedSubtitleScaleFactor,\n        themeType,\n        audioPaddingStart,\n        audioPaddingEnd,\n        maxImageWidth,\n        maxImageHeight,\n        settings.surroundingSubtitlesCountRadius,\n        settings.surroundingSubtitlesTimeRadius,\n        settings.volume,\n        settings.theaterMode,\n        copyToClipboardOnMine,\n        autoPausePreference,\n    ]);\n\n    const customFieldInputs = Object.keys(customFields).map((customFieldName) => {\n        return (\n            <SelectableSetting\n                key={customFieldName}\n                label={`${customFieldName} Field`}\n                value={customFields[customFieldName]}\n                selections={fieldNames!}\n                onChange={(e) => handleCustomFieldChange(customFieldName, e.target.value)}\n                onSelectionChange={(e) => handleCustomFieldChange(customFieldName, e.target.value as string)}\n                onRemoval={() => handleCustomFieldRemoval(customFieldName)}\n                removable={true}\n            />\n        );\n    });\n\n    return (\n        <React.Fragment>\n            <CustomFieldDialog\n                open={customFieldDialogOpen}\n                existingCustomFieldNames={Object.keys(customFields)}\n                onProceed={handleAddCustomField}\n                onCancel={() => setCustomFieldDialogOpen(false)}\n            />\n            <Dialog open={open} maxWidth=\"xs\" fullWidth onClose={handleClose}>\n                <DialogTitle>Settings</DialogTitle>\n                <DialogContent>\n                    <Grid container direction=\"column\" spacing={3}>\n                        <Grid item>\n                            <FormLabel>Anki</FormLabel>\n                            <FormGroup className={classes.root}>\n                                <TextField\n                                    label=\"Anki Connect URL\"\n                                    value={ankiConnectUrl}\n                                    error={Boolean(ankiConnectUrlError)}\n                                    helperText={ankiConnectUrlError}\n                                    color=\"secondary\"\n                                    onChange={handleAnkiConnectUrlChange}\n                                    InputProps={{\n                                        endAdornment: (\n                                            <InputAdornment position=\"end\">\n                                                <IconButton onClick={handleRetryAnkiConnectUrl}>\n                                                    <RefreshIcon />\n                                                </IconButton>\n                                            </InputAdornment>\n                                        ),\n                                    }}\n                                />\n                                <FormHelperText>\n                                    Ensure that {window.location.protocol + '//' + window.location.hostname} is in the\n                                    webCorsOriginList in your AnkiConnect settings as in this{' '}\n                                    <Link\n                                        color=\"secondary\"\n                                        target=\"_blank\"\n                                        rel=\"noreferrer\"\n                                        href=\"https://youtu.be/Mv7fEVb6PHo?t=44\"\n                                    >\n                                        video\n                                    </Link>\n                                    .\n                                </FormHelperText>\n                                <SelectableSetting\n                                    label=\"Deck\"\n                                    value={deck}\n                                    selections={deckNames}\n                                    onChange={handleDeckChange}\n                                    onSelectionChange={handleDeckSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"Note Type\"\n                                    value={noteType}\n                                    selections={modelNames}\n                                    onChange={handleNoteTypeChange}\n                                    onSelectionChange={handleNoteTypeSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"Sentence Field\"\n                                    value={sentenceField}\n                                    selections={fieldNames}\n                                    onChange={handleSentenceFieldChange}\n                                    onSelectionChange={handleSentenceFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"Definition Field\"\n                                    value={definitionField}\n                                    selections={fieldNames}\n                                    onChange={handleDefinitionFieldChange}\n                                    onSelectionChange={handleDefinitionFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"Word Field\"\n                                    value={wordField}\n                                    selections={fieldNames}\n                                    onChange={handleWordFieldChange}\n                                    onSelectionChange={handleWordFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"Audio Field\"\n                                    value={audioField}\n                                    selections={fieldNames}\n                                    onChange={handleAudioFieldChange}\n                                    onSelectionChange={handleAudioFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"Image Field\"\n                                    value={imageField}\n                                    selections={fieldNames}\n                                    onChange={handleImageFieldChange}\n                                    onSelectionChange={handleImageFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"Source Field\"\n                                    value={sourceField}\n                                    selections={fieldNames}\n                                    onChange={handleSourceFieldChange}\n                                    onSelectionChange={handleSourceFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"URL Field\"\n                                    value={urlField}\n                                    selections={fieldNames}\n                                    onChange={handleUrlFieldChange}\n                                    onSelectionChange={handleUrlFieldSelectionChange}\n                                />\n                                {customFieldInputs}\n                                <Button\n                                    className={classes.addFieldButton}\n                                    onClick={(e) => setCustomFieldDialogOpen(true)}\n                                >\n                                    Add Custom Field\n                                </Button>\n                                <TagsTextField\n                                    label=\"Tags\"\n                                    helperText=\"Comma-separated list of strings\"\n                                    fullWidth\n                                    color=\"secondary\"\n                                    tags={tags}\n                                    onTagsChange={handleTagsChange}\n                                />\n                            </FormGroup>\n                        </Grid>\n                        <Grid item>\n                            <FormLabel>Mining</FormLabel>\n                            <FormGroup className={classes.root}>\n                                <FormControlLabel\n                                    control={<Checkbox checked={preferMp3} onChange={handlePreferMp3Change} />}\n                                    label=\"Re-encode audio as mp3 (slower)\"\n                                />\n                                <FormControlLabel\n                                    control={\n                                        <Checkbox\n                                            checked={copyToClipboardOnMine}\n                                            onChange={handleCopyToClipboardOnMine}\n                                        />\n                                    }\n                                    label=\"Copy mined subtitles to clipboard\"\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label=\"Audio Padding Start\"\n                                    fullWidth\n                                    value={audioPaddingStart}\n                                    color=\"secondary\"\n                                    onChange={handleAudioPaddingStart}\n                                    inputProps={{\n                                        min: 0,\n                                        step: 1,\n                                    }}\n                                    InputProps={{\n                                        endAdornment: <InputAdornment position=\"end\">ms</InputAdornment>,\n                                    }}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label=\"Audio Padding End\"\n                                    fullWidth\n                                    value={audioPaddingEnd}\n                                    color=\"secondary\"\n                                    onChange={handleAudioPaddingEnd}\n                                    inputProps={{\n                                        min: 0,\n                                        step: 1,\n                                    }}\n                                    InputProps={{\n                                        endAdornment: <InputAdornment position=\"end\">ms</InputAdornment>,\n                                    }}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label=\"Max Image Width\"\n                                    fullWidth\n                                    value={maxImageWidth}\n                                    color=\"secondary\"\n                                    onChange={handleMaxImageWidth}\n                                    inputProps={{\n                                        min: 0,\n                                        step: 1,\n                                    }}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label=\"Max Image Height\"\n                                    fullWidth\n                                    value={maxImageHeight}\n                                    color=\"secondary\"\n                                    onChange={handleMaxImageHeight}\n                                    inputProps={{\n                                        min: 0,\n                                        step: 1,\n                                    }}\n                                />\n                            </FormGroup>\n                        </Grid>\n                        <Grid item>\n                            <FormLabel>Auto-pause Preference</FormLabel>\n                            <div>\n                                <FormControlLabel\n                                    control={\n                                        <Radio\n                                            checked={autoPausePreference === AutoPausePreference.atStart}\n                                            value={AutoPausePreference.atStart}\n                                            onChange={handleAutoPausePreferenceChange}\n                                        />\n                                    }\n                                    label=\"At Subtitle Start\"\n                                />\n                                <FormControlLabel\n                                    control={\n                                        <Radio\n                                            checked={autoPausePreference === AutoPausePreference.atEnd}\n                                            value={AutoPausePreference.atEnd}\n                                            onChange={handleAutoPausePreferenceChange}\n                                        />\n                                    }\n                                    label=\"At Subtitle End\"\n                                />\n                                <FormHelperText>\n                                    Does not enable auto-pause. Sets the preference for when to pause when auto-pause is\n                                    enabled.\n                                </FormHelperText>\n                            </div>\n                        </Grid>\n                        <Grid item>\n                            <FormLabel>Video Subtitle Appearance</FormLabel>\n                            <FormGroup>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"color\"\n                                        label=\"Subtitle Color\"\n                                        fullWidth\n                                        value={subtitleColor}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleColorChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"number\"\n                                        label=\"Subtitle Size\"\n                                        fullWidth\n                                        value={subtitleSize}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleSizeChange}\n                                        inputProps={{\n                                            min: 1,\n                                            step: 1,\n                                        }}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"color\"\n                                        label=\"Subtitle Outline Color\"\n                                        fullWidth\n                                        value={subtitleOutlineColor}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleOutlineColorChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"number\"\n                                        label=\"Subtitle Outline Thickness\"\n                                        fullWidth\n                                        value={subtitleOutlineThickness}\n                                        onChange={handleSubtitleOutlineThicknessChange}\n                                        inputProps={{\n                                            min: 0,\n                                            step: 1,\n                                        }}\n                                        color=\"secondary\"\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"color\"\n                                        label=\"Subtitle Background Color\"\n                                        fullWidth\n                                        value={subtitleBackgroundColor}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleBackgroundColorChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"number\"\n                                        label=\"Subtitle Background Opacity\"\n                                        fullWidth\n                                        inputProps={{\n                                            min: 0,\n                                            max: 1,\n                                            step: 0.1,\n                                        }}\n                                        value={subtitleBackgroundOpacity}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleBackgroundOpacityChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"text\"\n                                        label=\"Subtitle Font Family\"\n                                        placeholder=\"Inherited\"\n                                        fullWidth\n                                        value={subtitleFontFamily}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleFontFamilyChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"number\"\n                                        label=\"Image-based Subtitle Scale Factor\"\n                                        placeholder=\"Inherited\"\n                                        fullWidth\n                                        inputProps={{\n                                            min: 0,\n                                            max: 1,\n                                            step: 0.1,\n                                        }}\n                                        value={imageBasedSubtitleScaleFactor}\n                                        color=\"secondary\"\n                                        onChange={handleImageBasedSubtitleScaleFactorChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitlePreview}>\n                                    <input\n                                        value={subtitlePreview}\n                                        className={classes.subtitlePreviewInput}\n                                        onChange={handleSubtitlePreviewChange}\n                                        style={subtitlePreviewStyles}\n                                    />\n                                </div>\n                            </FormGroup>\n                        </Grid>\n                        <Grid item>\n                            <FormLabel>Theme</FormLabel>\n                            <div>\n                                <FormControlLabel\n                                    control={\n                                        <Radio\n                                            checked={themeType === 'light'}\n                                            value=\"light\"\n                                            onChange={handleThemeTypeChange}\n                                        />\n                                    }\n                                    label=\"Light\"\n                                />\n                                <FormControlLabel\n                                    control={\n                                        <Radio\n                                            checked={themeType === 'dark'}\n                                            value=\"dark\"\n                                            onChange={handleThemeTypeChange}\n                                        />\n                                    }\n                                    label=\"Dark\"\n                                />\n                            </div>\n                        </Grid>\n                    </Grid>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose}>OK</Button>\n                </DialogActions>\n            </Dialog>\n        </React.Fragment>\n    );\n}\n","import { AsbplayerSettings, AsbplayerSettingsProvider, AutoPausePreference } from '@project/common';\n\nconst defaultAnkiConnectUrl = 'http://127.0.0.1:8765';\nconst defaultSubtitleSize = 36;\nconst defaultSubtitleColor = '#ffffff';\nconst defaultSubtitleOutlineThickness = 0;\nconst defaultSubtitleOutlineColor = '#000000';\nconst defaultSubtitleBackgroundColor = '#000000';\nconst defaultSubtitleBackgroundOpacity = 0.5;\nconst defaultSubtitleFontFamily = '';\nconst defaultSubtitlePreview = 'アあ安';\nconst defaultVolume = 100;\nconst defaultAudioPaddingStart = 0;\nconst defaultAudioPaddingEnd = 500;\nconst defaultMaxImageWidth = 0;\nconst defaultMaxImageHeight = 0;\nconst defaultSurroundingSubtitlesCountRadius = 1;\nconst defaultSurroundingSubtitlesTimeRadius = 5000;\nconst defaultAutoPausePreference = AutoPausePreference.atEnd;\n\nconst ankiConnectUrlKey = 'ankiConnectUrl';\nconst deckKey = 'deck';\nconst noteTypeKey = 'noteType';\nconst sentenceFieldKey = 'sentenceField';\nconst definitionFieldKey = 'definitionField';\nconst audioFieldKey = 'audioField';\nconst imageFieldKey = 'imageField';\nconst wordFieldKey = 'wordField';\nconst sourceFieldKey = 'sourceField';\nconst urlFieldKey = 'urlField';\nconst customAnkiFieldsKey = 'customAnkiFields';\nconst tagsKey = 'tags';\nconst subtitleSizeKey = 'subtitleSize';\nconst subtitleColorKey = 'subtitleColor';\nconst subtitleOutlineThicknessKey = 'subtitleOutlineThickness';\nconst subtitleOutlineColorKey = 'subtitleOutlineColor';\nconst subtitleBackgroundColorKey = 'subtitleBackgroundColor';\nconst subtitleBackgroundOpacityKey = 'subtitleBackgroundOpacity';\nconst subtitleFontFamilyKey = 'subtitleFontFamily';\nconst subtitlePreviewKey = 'subtitlePreview';\nconst imageBasedSubtitleScaleFactorKey = 'imageBasedSubtitleScaleFactor';\nconst audioPaddingStartKey = 'audioPaddingStart';\nconst audioPaddingEndKey = 'audioPaddingEnd';\nconst maxImageWidthKey = 'maxImageWidth';\nconst maxImageHeightKey = 'maxImageHeight';\nconst volumeKey = 'volume';\nconst theaterModeKey = 'theaterMode';\nconst preferMp3Key = 'preferMp3';\nconst themeTypeKey = 'themeType';\nconst copyToClipboardOnMineKey = 'copyToClipboardOnMine';\nconst autoPausePreferenceKey = 'autoPausePreference';\n\nexport default class SettingsProvider implements AsbplayerSettingsProvider {\n    private _tags?: string[];\n\n    constructor() {\n        // Cache tags so that it can be used in useEffect dependencies\n        this._tags = this.tags;\n    }\n\n    get settings(): AsbplayerSettings {\n        return {\n            ankiConnectUrl: this.ankiConnectUrl,\n            deck: this.deck,\n            noteType: this.noteType,\n            sentenceField: this.sentenceField,\n            definitionField: this.definitionField,\n            audioField: this.audioField,\n            imageField: this.imageField,\n            wordField: this.wordField,\n            urlField: this.urlField,\n            customAnkiFields: this.customAnkiFields,\n            tags: this.tags,\n            sourceField: this.sourceField,\n            subtitleSize: this.subtitleSize,\n            subtitleColor: this.subtitleColor,\n            subtitleOutlineThickness: this.subtitleOutlineThickness,\n            subtitleOutlineColor: this.subtitleOutlineColor,\n            subtitleBackgroundColor: this.subtitleBackgroundColor,\n            subtitleBackgroundOpacity: this.subtitleBackgroundOpacity,\n            subtitleFontFamily: this.subtitleFontFamily,\n            subtitlePreview: this.subtitlePreview,\n            imageBasedSubtitleScaleFactor: this.imageBasedSubtitleScaleFactor,\n            preferMp3: this.preferMp3,\n            themeType: this.themeType,\n            audioPaddingStart: this.audioPaddingStart,\n            audioPaddingEnd: this.audioPaddingEnd,\n            maxImageWidth: this.maxImageWidth,\n            maxImageHeight: this.maxImageHeight,\n            surroundingSubtitlesCountRadius: this.surroundingSubtitlesCountRadius,\n            surroundingSubtitlesTimeRadius: this.surroundingSubtitlesTimeRadius,\n            volume: this.volume,\n            theaterMode: this.theaterMode,\n            copyToClipboardOnMine: this.copyToClipboardOnMine,\n            autoPausePreference: this.autoPausePreference,\n        };\n    }\n\n    set settings(newSettings: AsbplayerSettings) {\n        this.ankiConnectUrl = newSettings.ankiConnectUrl;\n        this.deck = newSettings.deck;\n        this.noteType = newSettings.noteType;\n        this.sentenceField = newSettings.sentenceField;\n        this.definitionField = newSettings.definitionField;\n        this.audioField = newSettings.audioField;\n        this.imageField = newSettings.imageField;\n        this.wordField = newSettings.wordField;\n        this.sourceField = newSettings.sourceField;\n        this.urlField = newSettings.urlField;\n        this.tags = newSettings.tags;\n        this.subtitleSize = newSettings.subtitleSize;\n        this.subtitleColor = newSettings.subtitleColor;\n        this.subtitleOutlineThickness = newSettings.subtitleOutlineThickness;\n        this.subtitleOutlineColor = newSettings.subtitleOutlineColor;\n        this.subtitleBackgroundColor = newSettings.subtitleBackgroundColor;\n        this.subtitleBackgroundOpacity = newSettings.subtitleBackgroundOpacity;\n        this.subtitleFontFamily = newSettings.subtitleFontFamily;\n        this.subtitlePreview = newSettings.subtitlePreview;\n        this.imageBasedSubtitleScaleFactor = newSettings.imageBasedSubtitleScaleFactor;\n        this.customAnkiFields = newSettings.customAnkiFields;\n        this.preferMp3 = newSettings.preferMp3;\n        this.themeType = newSettings.themeType;\n        this.audioPaddingStart = newSettings.audioPaddingStart;\n        this.audioPaddingEnd = newSettings.audioPaddingEnd;\n        this.maxImageWidth = newSettings.maxImageWidth;\n        this.maxImageHeight = newSettings.maxImageHeight;\n        this.volume = newSettings.volume;\n        this.theaterMode = newSettings.theaterMode;\n        this.copyToClipboardOnMine = newSettings.copyToClipboardOnMine;\n        this.autoPausePreference = newSettings.autoPausePreference;\n    }\n\n    get subtitleSettings() {\n        return {\n            subtitleSize: this.subtitleSize,\n            subtitleColor: this.subtitleColor,\n            subtitleOutlineThickness: this.subtitleOutlineThickness,\n            subtitleOutlineColor: this.subtitleOutlineColor,\n            subtitleBackgroundColor: this.subtitleBackgroundColor,\n            subtitleBackgroundOpacity: this.subtitleBackgroundOpacity,\n            subtitleFontFamily: this.subtitleFontFamily,\n            imageBasedSubtitleScaleFactor: this.imageBasedSubtitleScaleFactor,\n        };\n    }\n\n    get ankiSettings() {\n        return {\n            ankiConnectUrl: this.ankiConnectUrl,\n            deck: this.deck,\n            noteType: this.noteType,\n            sentenceField: this.sentenceField,\n            definitionField: this.definitionField,\n            audioField: this.audioField,\n            imageField: this.imageField,\n            wordField: this.wordField,\n            sourceField: this.sourceField,\n            urlField: this.urlField,\n            customAnkiFields: this.customAnkiFields,\n            tags: this.tags,\n            preferMp3: this.preferMp3,\n            audioPaddingStart: this.audioPaddingStart,\n            audioPaddingEnd: this.audioPaddingEnd,\n            maxImageWidth: this.maxImageWidth,\n            maxImageHeight: this.maxImageHeight,\n            surroundingSubtitlesCountRadius: this.surroundingSubtitlesCountRadius,\n            surroundingSubtitlesTimeRadius: this.surroundingSubtitlesTimeRadius,\n        };\n    }\n\n    get miscSettings() {\n        return {\n            themeType: this.themeType,\n            copyToClipboardOnMine: this.copyToClipboardOnMine,\n            autoPausePreference: this.autoPausePreference,\n        };\n    }\n\n    _getNumberItem(key: string, defaultValue: number) {\n        const value = localStorage.getItem(key);\n\n        if (value === null) {\n            return defaultValue;\n        }\n\n        return Number(value);\n    }\n\n    _setOptionalItem(key: string, value?: string) {\n        if (typeof value === 'undefined') {\n            localStorage.removeItem(key);\n        } else {\n            localStorage.setItem(key, value);\n        }\n    }\n\n    get ankiConnectUrl() {\n        return localStorage.getItem(ankiConnectUrlKey) || defaultAnkiConnectUrl;\n    }\n\n    set ankiConnectUrl(url) {\n        localStorage.setItem(ankiConnectUrlKey, url);\n    }\n\n    get deck() {\n        return localStorage.getItem(deckKey) ?? undefined;\n    }\n\n    set deck(deck) {\n        this._setOptionalItem(deckKey, deck);\n    }\n\n    get noteType() {\n        return localStorage.getItem(noteTypeKey) ?? undefined;\n    }\n\n    set noteType(noteType) {\n        this._setOptionalItem(noteTypeKey, noteType);\n    }\n\n    get sentenceField() {\n        return localStorage.getItem(sentenceFieldKey) ?? undefined;\n    }\n\n    set sentenceField(sentenceField) {\n        this._setOptionalItem(sentenceFieldKey, sentenceField);\n    }\n\n    get definitionField() {\n        return localStorage.getItem(definitionFieldKey) ?? undefined;\n    }\n\n    set definitionField(definitionField) {\n        this._setOptionalItem(definitionFieldKey, definitionField);\n    }\n\n    get audioField() {\n        return localStorage.getItem(audioFieldKey) ?? undefined;\n    }\n\n    set audioField(audioField) {\n        this._setOptionalItem(audioFieldKey, audioField);\n    }\n\n    get imageField() {\n        return localStorage.getItem(imageFieldKey) ?? undefined;\n    }\n\n    set imageField(imageField) {\n        this._setOptionalItem(imageFieldKey, imageField);\n    }\n\n    get wordField() {\n        return localStorage.getItem(wordFieldKey) ?? undefined;\n    }\n\n    set wordField(wordField) {\n        this._setOptionalItem(wordFieldKey, wordField);\n    }\n\n    get sourceField() {\n        return localStorage.getItem(sourceFieldKey) ?? undefined;\n    }\n\n    set sourceField(sourceField) {\n        this._setOptionalItem(sourceFieldKey, sourceField);\n    }\n\n    get urlField() {\n        return localStorage.getItem(urlFieldKey) ?? undefined;\n    }\n\n    set urlField(urlField) {\n        this._setOptionalItem(urlFieldKey, urlField);\n    }\n\n    get customAnkiFields() {\n        const ankiFieldsString = localStorage.getItem(customAnkiFieldsKey);\n\n        if (ankiFieldsString) {\n            return JSON.parse(ankiFieldsString);\n        }\n\n        return {};\n    }\n\n    set customAnkiFields(customAnkiFields) {\n        localStorage.setItem(customAnkiFieldsKey, JSON.stringify(customAnkiFields));\n    }\n\n    get tags() {\n        if (typeof this._tags !== 'undefined') {\n            return this._tags;\n        }\n\n        const tagsString = localStorage.getItem(tagsKey);\n\n        if (tagsString) {\n            this._tags = JSON.parse(tagsString) as string[];\n            return this._tags;\n        }\n\n        return [];\n    }\n\n    set tags(tags) {\n        localStorage.setItem(tagsKey, JSON.stringify(tags));\n        this._tags = undefined;\n    }\n\n    get subtitleColor() {\n        return localStorage.getItem(subtitleColorKey) || defaultSubtitleColor;\n    }\n\n    set subtitleColor(subtitleColor) {\n        localStorage.setItem(subtitleColorKey, subtitleColor);\n    }\n\n    get subtitleSize() {\n        return this._getNumberItem(subtitleSizeKey, defaultSubtitleSize);\n    }\n\n    set subtitleSize(subtitleSize) {\n        localStorage.setItem(subtitleSizeKey, String(subtitleSize));\n    }\n\n    get subtitleOutlineColor() {\n        return localStorage.getItem(subtitleOutlineColorKey) || defaultSubtitleOutlineColor;\n    }\n\n    set subtitleOutlineColor(subtitleOutlineColor) {\n        localStorage.setItem(subtitleOutlineColorKey, subtitleOutlineColor);\n    }\n\n    get subtitleOutlineThickness() {\n        return this._getNumberItem(subtitleOutlineThicknessKey, defaultSubtitleOutlineThickness);\n    }\n\n    set subtitleOutlineThickness(subtitleOutlineThickness) {\n        localStorage.setItem(subtitleOutlineThicknessKey, String(subtitleOutlineThickness));\n    }\n\n    get subtitleBackgroundColor() {\n        return localStorage.getItem(subtitleBackgroundColorKey) || defaultSubtitleBackgroundColor;\n    }\n\n    set subtitleBackgroundColor(subtitleBackgroundColor) {\n        localStorage.setItem(subtitleBackgroundColorKey, subtitleBackgroundColor);\n    }\n\n    get subtitleBackgroundOpacity() {\n        return this._getNumberItem(subtitleBackgroundOpacityKey, defaultSubtitleBackgroundOpacity);\n    }\n\n    set subtitleBackgroundOpacity(subtitleBackgroundOpacity) {\n        localStorage.setItem(subtitleBackgroundOpacityKey, String(subtitleBackgroundOpacity));\n    }\n\n    get subtitleFontFamily() {\n        return localStorage.getItem(subtitleFontFamilyKey) || defaultSubtitleFontFamily;\n    }\n\n    set subtitleFontFamily(subtitleFontFamily) {\n        localStorage.setItem(subtitleFontFamilyKey, subtitleFontFamily);\n    }\n\n    get subtitlePreview() {\n        return localStorage.getItem(subtitlePreviewKey) || defaultSubtitlePreview;\n    }\n\n    set subtitlePreview(subtitlePreview) {\n        localStorage.setItem(subtitlePreviewKey, subtitlePreview);\n    }\n\n    get imageBasedSubtitleScaleFactor() {\n        return this._getNumberItem(imageBasedSubtitleScaleFactorKey, 1);\n    }\n\n    set imageBasedSubtitleScaleFactor(imageBasedSubtitleScaleFactor: number) {\n        localStorage.setItem(imageBasedSubtitleScaleFactorKey, String(imageBasedSubtitleScaleFactor));\n    }\n\n    get volume() {\n        return this._getNumberItem(volumeKey, defaultVolume);\n    }\n\n    set volume(volume) {\n        localStorage.setItem(volumeKey, String(volume));\n    }\n\n    get theaterMode() {\n        return localStorage.getItem(theaterModeKey) === 'true' || false;\n    }\n\n    set theaterMode(theaterMode) {\n        localStorage.setItem(theaterModeKey, String(theaterMode));\n    }\n\n    get preferMp3() {\n        return localStorage.getItem(preferMp3Key) === 'true' || false;\n    }\n\n    set preferMp3(preferMp3) {\n        localStorage.setItem(preferMp3Key, String(preferMp3));\n    }\n\n    get themeType() {\n        const themeType = localStorage.getItem(themeTypeKey) as 'dark' | 'light' | null;\n\n        if (themeType === null) {\n            return 'dark';\n        }\n\n        return themeType;\n    }\n\n    set themeType(themeType: 'dark' | 'light') {\n        localStorage.setItem(themeTypeKey, themeType);\n    }\n\n    get audioPaddingStart() {\n        const value = localStorage.getItem(audioPaddingStartKey);\n\n        if (!value) {\n            return defaultAudioPaddingStart;\n        }\n\n        return Number(value);\n    }\n\n    set audioPaddingStart(audioPaddingStart) {\n        localStorage.setItem(audioPaddingStartKey, String(audioPaddingStart));\n    }\n\n    get audioPaddingEnd() {\n        return this._getNumberItem(audioPaddingEndKey, defaultAudioPaddingEnd);\n    }\n\n    set audioPaddingEnd(audioPaddingEnd) {\n        localStorage.setItem(audioPaddingEndKey, String(audioPaddingEnd));\n    }\n\n    get maxImageWidth() {\n        const value = localStorage.getItem(maxImageWidthKey);\n\n        if (!value) {\n            return defaultMaxImageWidth;\n        }\n\n        return Number(value);\n    }\n\n    set maxImageWidth(maxImageWidth) {\n        localStorage.setItem(maxImageWidthKey, String(maxImageWidth));\n    }\n\n    get maxImageHeight() {\n        return this._getNumberItem(maxImageHeightKey, defaultMaxImageHeight);\n    }\n\n    set maxImageHeight(maxImageHeight) {\n        localStorage.setItem(maxImageHeightKey, String(maxImageHeight));\n    }\n\n    get surroundingSubtitlesCountRadius() {\n        // For now, not configurable\n        return defaultSurroundingSubtitlesCountRadius;\n    }\n\n    get surroundingSubtitlesTimeRadius() {\n        // For now, not configurable\n        return defaultSurroundingSubtitlesTimeRadius;\n    }\n\n    get copyToClipboardOnMine() {\n        return localStorage.getItem(copyToClipboardOnMineKey) === 'true' || false;\n    }\n\n    set copyToClipboardOnMine(copyToClipboardOnMine) {\n        localStorage.setItem(copyToClipboardOnMineKey, String(copyToClipboardOnMine));\n    }\n\n    get autoPausePreference() {\n        return this._getNumberItem(autoPausePreferenceKey, defaultAutoPausePreference);\n    }\n\n    set autoPausePreference(autoPausePreference) {\n        localStorage.setItem(autoPausePreferenceKey, String(autoPausePreference));\n    }\n}\n","import {\n    AnkiDialogRequestFromVideoMessage,\n    AppBarToggleMessageToVideoMessage,\n    AudioTrackModel,\n    AudioTrackSelectedFromVideoMessage,\n    AudioTrackSelectedToVideoMessage,\n    CopyMessage,\n    CurrentTimeToVideoMessage,\n    FinishedAnkiDialogRequestToVideoMessage,\n    HideSubtitlePlayerToggleToVideoMessage,\n    OffsetFromVideoMessage,\n    PauseFromVideoMessage,\n    PlayFromVideoMessage,\n    PlayMode,\n    PlayModeMessage,\n    PostMineAction,\n    ReadyFromVideoMessage,\n    ReadyStateFromVideoMessage,\n    ReadyToVideoMessage,\n    SubtitleModel,\n    SubtitlesToVideoMessage,\n    ToggleSubtitleTrackInListFromVideoMessage,\n} from '@project/common';\n\nexport default class PlayerChannel {\n    private channel?: BroadcastChannel;\n    private time: number;\n    private duration: number;\n    private readyCallbacks: ((duration: number) => void)[];\n    private playCallbacks: (() => void)[];\n    private pauseCallbacks: (() => void)[];\n    private currentTimeCallbacks: ((currentTime: number) => void)[];\n    private audioTrackSelectedCallbacks: ((id: string) => void)[];\n    private closeCallbacks: (() => void)[];\n    private subtitlesCallbacks: ((subtitles: SubtitleModel[]) => void)[];\n    private playModeCallbacks: ((playMode: PlayMode) => void)[];\n    private hideSubtitlePlayerToggleCallbacks: ((hidden: boolean) => void)[];\n    private appBarToggleCallbacks: ((hidden: boolean) => void)[];\n    private ankiDialogRequestCallbacks: (() => void)[];\n    private finishedAnkiDialogRequestCallbacks: ((resume: boolean) => void)[];\n\n    constructor(channel: string) {\n        this.channel = new BroadcastChannel(channel);\n        this.time = 0;\n        this.duration = 0;\n        this.playCallbacks = [];\n        this.pauseCallbacks = [];\n        this.currentTimeCallbacks = [];\n        this.audioTrackSelectedCallbacks = [];\n        this.closeCallbacks = [];\n        this.readyCallbacks = [];\n        this.subtitlesCallbacks = [];\n        this.playModeCallbacks = [];\n        this.hideSubtitlePlayerToggleCallbacks = [];\n        this.appBarToggleCallbacks = [];\n        this.ankiDialogRequestCallbacks = [];\n        this.finishedAnkiDialogRequestCallbacks = [];\n\n        const that = this;\n\n        this.channel.onmessage = (event) => {\n            switch (event.data.command) {\n                case 'init':\n                    // ignore, this is for the chrome extension\n                    break;\n                case 'ready':\n                    const readyMessage = event.data as ReadyToVideoMessage;\n\n                    for (let callback of that.readyCallbacks) {\n                        callback(readyMessage.duration);\n                    }\n                    break;\n                case 'play':\n                    for (let callback of that.playCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'pause':\n                    for (let callback of that.pauseCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'currentTime':\n                    const currentTimeMessage = event.data as CurrentTimeToVideoMessage;\n\n                    for (let callback of that.currentTimeCallbacks) {\n                        callback(currentTimeMessage.value);\n                    }\n                    break;\n                case 'audioTrackSelected':\n                    const audioTrackSelectedMessage = event.data as AudioTrackSelectedToVideoMessage;\n\n                    for (let callback of that.audioTrackSelectedCallbacks) {\n                        callback(audioTrackSelectedMessage.id);\n                    }\n                    break;\n                case 'close':\n                    for (let callback of that.closeCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'subtitles':\n                    const subtitlesMessage = event.data as SubtitlesToVideoMessage;\n\n                    for (let callback of that.subtitlesCallbacks) {\n                        callback(subtitlesMessage.value);\n                    }\n                    break;\n                case 'subtitleSettings':\n                    // ignore\n                    break;\n                case 'playMode':\n                    const playModeMessage = event.data as PlayModeMessage;\n\n                    for (let callback of that.playModeCallbacks) {\n                        callback(playModeMessage.playMode);\n                    }\n                    break;\n                case 'hideSubtitlePlayerToggle':\n                    const hideSubtitlePlayerToggleMessage = event.data as HideSubtitlePlayerToggleToVideoMessage;\n\n                    for (let callback of that.hideSubtitlePlayerToggleCallbacks) {\n                        callback(hideSubtitlePlayerToggleMessage.value);\n                    }\n                    break;\n                case 'appBarToggle':\n                    const appBarToggleMessage = event.data as AppBarToggleMessageToVideoMessage;\n\n                    for (let callback of that.appBarToggleCallbacks) {\n                        callback(appBarToggleMessage.value);\n                    }\n                    break;\n                case 'ankiDialogRequest':\n                    for (let callback of that.ankiDialogRequestCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'finishedAnkiDialogRequest':\n                    const finishedAnkiDialogRequestMessage = event.data as FinishedAnkiDialogRequestToVideoMessage;\n\n                    for (let callback of that.finishedAnkiDialogRequestCallbacks) {\n                        callback(finishedAnkiDialogRequestMessage.resume);\n                    }\n                    break;\n                case 'ankiSettings':\n                    // ignore\n                    break;\n                case 'miscSettings':\n                    // ignore\n                    break;\n                default:\n                    console.error('Unrecognized event ' + event.data.command);\n            }\n        };\n    }\n\n    set currentTime(value: number) {\n        this.time = value;\n        this.channel?.postMessage({ command: 'currentTime', value: this.time, echo: true });\n    }\n\n    onPlay(callback: () => void) {\n        this.playCallbacks.push(callback);\n    }\n\n    onPause(callback: () => void) {\n        this.pauseCallbacks.push(callback);\n    }\n\n    onCurrentTime(callback: (currentTime: number) => void) {\n        this.currentTimeCallbacks.push(callback);\n    }\n\n    onAudioTrackSelected(callback: (id: string) => void) {\n        this.audioTrackSelectedCallbacks.push(callback);\n    }\n\n    onClose(callback: () => void) {\n        this.closeCallbacks.push(callback);\n    }\n\n    onReady(callback: (duration: number) => void) {\n        this.readyCallbacks.push(callback);\n    }\n\n    onSubtitles(callback: (subtitles: SubtitleModel[]) => void) {\n        this.subtitlesCallbacks.push(callback);\n    }\n\n    onPlayMode(callback: (playMode: PlayMode) => void) {\n        this.playModeCallbacks.push(callback);\n    }\n\n    onHideSubtitlePlayerToggle(callback: (hidden: boolean) => void) {\n        this.hideSubtitlePlayerToggleCallbacks.push(callback);\n    }\n\n    onAppBarToggle(callback: (hidden: boolean) => void) {\n        this.appBarToggleCallbacks.push(callback);\n    }\n\n    onAnkiDialogRequest(callback: () => void) {\n        this.ankiDialogRequestCallbacks.push(callback);\n    }\n\n    onFinishedAnkiDialogRequest(callback: (resume: boolean) => void) {\n        this.finishedAnkiDialogRequestCallbacks.push(callback);\n    }\n\n    ready(\n        duration: number,\n        paused: boolean,\n        audioTracks: AudioTrackModel[] | undefined,\n        selectedAudioTrack: string | undefined\n    ) {\n        const message: ReadyFromVideoMessage = {\n            command: 'ready',\n            duration: duration,\n            paused: paused,\n            currentTime: 0,\n            audioTracks: audioTracks,\n            selectedAudioTrack: selectedAudioTrack,\n            playbackRate: 1,\n        };\n\n        this.channel?.postMessage(message);\n    }\n\n    readyState(readyState: number) {\n        const message: ReadyStateFromVideoMessage = { command: 'readyState', value: readyState };\n        this.channel?.postMessage(message);\n    }\n\n    play() {\n        const message: PlayFromVideoMessage = { command: 'play', echo: true };\n        this.channel?.postMessage(message);\n    }\n\n    pause() {\n        const message: PauseFromVideoMessage = { command: 'pause', echo: true };\n        this.channel?.postMessage(message);\n    }\n\n    audioTrackSelected(id: string) {\n        const message: AudioTrackSelectedFromVideoMessage = { command: 'audioTrackSelected', id: id };\n        this.channel?.postMessage(message);\n    }\n\n    offset(offset: number) {\n        const message: OffsetFromVideoMessage = { command: 'offset', value: offset };\n        this.channel?.postMessage(message);\n    }\n\n    popOutToggle() {\n        this.channel?.postMessage({ command: 'popOutToggle' });\n    }\n\n    copy(\n        subtitle: SubtitleModel,\n        surroundingSubtitles: SubtitleModel[],\n        postMineAction: PostMineAction,\n        preventDuplicate?: boolean\n    ) {\n        const message: CopyMessage = {\n            command: 'copy',\n            subtitle: subtitle,\n            surroundingSubtitles: surroundingSubtitles,\n            preventDuplicate: preventDuplicate,\n            postMineAction: postMineAction,\n        };\n\n        this.channel?.postMessage(message);\n    }\n\n    playMode(playMode: PlayMode) {\n        this.channel?.postMessage({ command: 'playMode', playMode: playMode });\n    }\n\n    hideSubtitlePlayerToggle() {\n        this.channel?.postMessage({ command: 'hideSubtitlePlayerToggle' });\n    }\n\n    appBarToggle() {\n        this.channel?.postMessage({ command: 'appBarToggle' });\n    }\n\n    ankiDialogRequest(forwardToVideo: boolean) {\n        const message: AnkiDialogRequestFromVideoMessage = {\n            command: 'ankiDialogRequest',\n            forwardToVideo: forwardToVideo,\n        };\n        this.channel?.postMessage(message);\n    }\n\n    toggleSubtitleTrackInList(track: number) {\n        const message: ToggleSubtitleTrackInListFromVideoMessage = {\n            command: 'toggleSubtitleTrackInList',\n            track: track,\n        };\n        this.channel?.postMessage(message);\n    }\n\n    close() {\n        if (this.channel) {\n            this.channel.postMessage({ command: 'exit' });\n            this.channel.close();\n            this.channel = undefined;\n            this.playCallbacks = [];\n            this.pauseCallbacks = [];\n            this.currentTimeCallbacks = [];\n            this.audioTrackSelectedCallbacks = [];\n            this.closeCallbacks = [];\n            this.readyCallbacks = [];\n            this.subtitlesCallbacks = [];\n            this.playModeCallbacks = [];\n            this.hideSubtitlePlayerToggleCallbacks = [];\n            this.appBarToggleCallbacks = [];\n            this.ankiDialogRequestCallbacks = [];\n            this.finishedAnkiDialogRequestCallbacks = [];\n        }\n    }\n}\n","import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { isMobile } from 'react-device-detect';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useWindowSize } from '../hooks/useWindowSize';\nimport { arrayEquals, computeStyles } from '../services/Util';\nimport {\n    KeyBindings,\n    surroundingSubtitles,\n    mockSurroundingSubtitles,\n    humanReadableTime,\n    SubtitleModel,\n    AudioTrackModel,\n    PostMineAction,\n    PlayMode,\n} from '@project/common';\nimport { SubtitleTextImage } from '@project/common/components';\nimport Alert from './Alert';\nimport Clock from '../services/Clock';\nimport Controls, { Point } from './Controls';\nimport PlayerChannel from '../services/PlayerChannel';\nimport SettingsProvider from '../services/SettingsProvider';\n\ninterface ExperimentalHTMLVideoElement extends HTMLVideoElement {\n    readonly audioTracks: any;\n}\n\nconst useStyles = makeStyles({\n    root: {\n        position: 'relative',\n        backgroundColor: 'black',\n        height: '100vh',\n        overflow: 'hidden',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    video: {\n        margin: 'auto',\n    },\n    cursorHidden: {\n        cursor: 'none',\n    },\n    subtitleContainer: {\n        position: 'absolute',\n        paddingLeft: 20,\n        paddingRight: 20,\n        bottom: 100,\n        textAlign: 'center',\n        whiteSpace: 'pre-wrap',\n        lineHeight: 'normal',\n    },\n});\n\nfunction notifyReady(\n    element: ExperimentalHTMLVideoElement,\n    playerChannel: PlayerChannel,\n    setAudioTracks: React.Dispatch<React.SetStateAction<AudioTrackModel[] | undefined>>,\n    setSelectedAudioTrack: React.Dispatch<React.SetStateAction<string | undefined>>\n) {\n    if (window.outerWidth && element.videoWidth > 0 && element.videoHeight > 0) {\n        const availWidth = window.screen.availWidth - (window.outerWidth - window.innerWidth);\n        const availHeight = window.screen.availHeight - (window.outerHeight - window.innerHeight);\n        const resizeRatio = Math.min(1, Math.min(availWidth / element.videoWidth, availHeight / element.videoHeight));\n\n        window.resizeTo(\n            resizeRatio * element.videoWidth + (window.outerWidth - window.innerWidth),\n            resizeRatio * element.videoHeight + (window.outerHeight - window.innerHeight)\n        );\n    }\n\n    let tracks: AudioTrackModel[] | undefined;\n    let selectedTrack: string | undefined;\n\n    if (element.audioTracks) {\n        tracks = [];\n\n        for (let t of element.audioTracks) {\n            tracks.push({\n                id: t.id,\n                label: t.label,\n                language: t.language,\n            });\n\n            if (t.enabled) {\n                selectedTrack = t.id;\n            }\n        }\n    } else {\n        tracks = undefined;\n        selectedTrack = undefined;\n    }\n\n    setAudioTracks(tracks);\n    setSelectedAudioTrack(selectedTrack);\n    playerChannel.ready(element.duration, element.paused, tracks, selectedTrack);\n}\n\nfunction errorMessage(element: HTMLVideoElement) {\n    let error;\n    switch (element.error?.code) {\n        case 1:\n            error = 'Aborted';\n            break;\n        case 2:\n            error = 'Network error';\n            break;\n        case 3:\n            error = 'Decoding error';\n            break;\n        case 4:\n            error = 'Source not supported';\n            break;\n        default:\n            error = 'Unknown error';\n            break;\n    }\n\n    return error + ': ' + (element.error?.message || '<details missing>');\n}\n\nfunction useFullscreen() {\n    const [fullscreen, setFullscreen] = useState(Boolean(document.fullscreenElement));\n\n    useEffect(() => {\n        const listener = () => setFullscreen(Boolean(document.fullscreenElement));\n        document.addEventListener('fullscreenchange', listener);\n\n        return () => document.removeEventListener('fullscreenchange', listener);\n    }, []);\n\n    return fullscreen;\n}\n\ninterface Props {\n    settingsProvider: SettingsProvider;\n    videoFile: string;\n    channel: string;\n    popOut: boolean;\n    onError: (error: string) => void;\n    onAutoPauseModeChangedViaBind: (playMode: PlayMode) => void;\n}\n\ninterface IndexedSubtitleModel extends SubtitleModel {\n    index: number;\n}\n\nexport default function VideoPlayer(props: Props) {\n    const classes = useStyles();\n    const { settingsProvider, videoFile, channel, popOut, onError, onAutoPauseModeChangedViaBind } = props;\n    const poppingInRef = useRef<boolean>();\n    const videoRef = useRef<ExperimentalHTMLVideoElement>();\n    const [windowWidth, windowHeight] = useWindowSize(true);\n    if (videoRef.current) {\n        videoRef.current.width = windowWidth;\n        videoRef.current.height = windowHeight;\n    }\n    const playerChannel = useMemo(() => new PlayerChannel(channel), [channel]);\n    const [playing, setPlaying] = useState<boolean>(false);\n    const fullscreen = useFullscreen();\n    const fullscreenRef = useRef<boolean>();\n    fullscreenRef.current = fullscreen;\n    const playingRef = useRef<boolean>();\n    playingRef.current = playing;\n    const [length, setLength] = useState<number>(0);\n    const [offset, setOffset] = useState<number>(0);\n    const [audioTracks, setAudioTracks] = useState<AudioTrackModel[]>();\n    const [selectedAudioTrack, setSelectedAudioTrack] = useState<string>();\n    const [subtitles, setSubtitles] = useState<SubtitleModel[]>([]);\n    const [showSubtitles, setShowSubtitles] = useState<IndexedSubtitleModel[]>([]);\n    const [subtitlesEnabled, setSubtitlesEnabled] = useState(true);\n    const [disabledSubtitleTracks, setDisabledSubtitleTracks] = useState<{ [index: number]: boolean }>({});\n    const [playMode, setPlayMode] = useState<PlayMode>(PlayMode.normal);\n    const [subtitlePlayerHidden, setSubtitlePlayerHidden] = useState<boolean>(false);\n    const [appBarHidden, setAppBarHidden] = useState<boolean>(settingsProvider.theaterMode);\n    const showSubtitlesRef = useRef<IndexedSubtitleModel[]>([]);\n    showSubtitlesRef.current = showSubtitles;\n    const clock = useMemo<Clock>(() => new Clock(), []);\n    const mousePositionRef = useRef<Point>({ x: 0, y: 0 });\n    const [showCursor, setShowCursor] = useState<boolean>(false);\n    const lastMouseMovementTimestamp = useRef<number>(0);\n    const containerRef = useRef<HTMLDivElement>(null);\n    const [alert, setAlert] = useState<string>();\n    const [alertOpen, setAlertOpen] = useState<boolean>(false);\n    const [returnToFullscreenOnFinishedAnkiDialogRequest, setReturnToFullscreenOnFinishedAnkiDialogRequest] =\n        useState<boolean>(false);\n    const returnToFullscreenOnFinishedAnkiDialogRequestRef = useRef<boolean>();\n    returnToFullscreenOnFinishedAnkiDialogRequestRef.current = returnToFullscreenOnFinishedAnkiDialogRequest;\n\n    const videoRefCallback = useCallback(\n        (element: HTMLVideoElement) => {\n            if (element) {\n                const videoElement = element as ExperimentalHTMLVideoElement;\n                videoRef.current = videoElement;\n\n                if (videoElement.readyState === 4) {\n                    notifyReady(videoElement, playerChannel, setAudioTracks, setSelectedAudioTrack);\n                } else {\n                    videoElement.onloadeddata = (event) => {\n                        notifyReady(videoElement, playerChannel, setAudioTracks, setSelectedAudioTrack);\n                    };\n                }\n\n                videoElement.oncanplay = (event) => {\n                    playerChannel.readyState(4);\n\n                    if (playingRef.current) {\n                        clock.start();\n                    }\n                };\n\n                videoElement.ontimeupdate = (event) => clock.setTime(element.currentTime * 1000);\n\n                videoElement.onerror = (event) => onError(errorMessage(element));\n            }\n        },\n        [clock, playerChannel, onError]\n    );\n\n    function selectAudioTrack(id: string) {\n        const audioTracks = videoRef.current?.audioTracks;\n\n        if (!audioTracks) {\n            return;\n        }\n\n        // @ts-ignore\n        for (const t of audioTracks) {\n            if (t.id === id) {\n                t.enabled = true;\n            } else {\n                t.enabled = false;\n            }\n        }\n    }\n\n    useEffect(() => {\n        playerChannel.onReady((duration) => setLength(duration));\n\n        playerChannel.onPlay(async () => {\n            await videoRef.current?.play();\n            clock.start();\n            setPlaying(true);\n        });\n\n        playerChannel.onPause(() => {\n            videoRef.current?.pause();\n            clock.stop();\n            setPlaying(false);\n        });\n\n        playerChannel.onCurrentTime((currentTime) => {\n            if (videoRef.current) {\n                videoRef.current.currentTime = currentTime;\n            }\n\n            if (videoRef.current?.readyState === 4) {\n                playerChannel.readyState(4);\n            }\n\n            clock.stop();\n            clock.setTime(currentTime * 1000);\n        });\n\n        playerChannel.onAudioTrackSelected((id) => {\n            selectAudioTrack(id);\n            setSelectedAudioTrack(id);\n            playerChannel.audioTrackSelected(id);\n        });\n\n        playerChannel.onClose(() => {\n            playerChannel.close();\n            window.close();\n        });\n\n        playerChannel.onSubtitles((subtitles) => {\n            setSubtitles(subtitles);\n\n            if (subtitles && subtitles.length > 0) {\n                const s = subtitles[0];\n                const offset = s.start - s.originalStart;\n                setOffset(offset);\n            }\n        });\n\n        playerChannel.onPlayMode((playMode) => setPlayMode(playMode));\n        playerChannel.onHideSubtitlePlayerToggle((hidden) => setSubtitlePlayerHidden(hidden));\n        playerChannel.onAppBarToggle((hidden) => setAppBarHidden(hidden));\n        playerChannel.onAnkiDialogRequest(() => {\n            if (fullscreenRef.current && !popOut) {\n                document.exitFullscreen();\n                setReturnToFullscreenOnFinishedAnkiDialogRequest(true);\n            }\n        });\n\n        playerChannel.onFinishedAnkiDialogRequest(async (resume) => {\n            if (returnToFullscreenOnFinishedAnkiDialogRequestRef.current) {\n                if (resume) {\n                    try {\n                        await containerRef.current?.requestFullscreen();\n                    } catch (e) {\n                        console.error(e);\n                    }\n                }\n\n                setReturnToFullscreenOnFinishedAnkiDialogRequest(false);\n            }\n        });\n\n        window.onbeforeunload = (e) => {\n            if (!poppingInRef.current) {\n                playerChannel.close();\n            }\n        };\n\n        return () => playerChannel.close();\n    }, [clock, playerChannel, popOut]);\n\n    const handlePlay = useCallback(() => {\n        if (videoRef.current) {\n            playerChannel.play();\n        }\n    }, [playerChannel]);\n\n    const handlePause = useCallback(() => playerChannel.pause(), [playerChannel]);\n\n    const handleSeek = useCallback(\n        (progress: number) => {\n            if (playingRef.current) {\n                clock.stop();\n            }\n\n            const time = progress * length;\n            playerChannel.currentTime = time / 1000;\n        },\n        [length, clock, playerChannel]\n    );\n\n    function handleMouseMove(e: React.MouseEvent<HTMLDivElement>) {\n        lastMouseMovementTimestamp.current = Date.now();\n\n        if (!containerRef.current) {\n            return;\n        }\n\n        var bounds = containerRef.current.getBoundingClientRect();\n        mousePositionRef.current.x = e.clientX - bounds.left;\n        mousePositionRef.current.y = e.clientY - bounds.top;\n    }\n\n    const handleAudioTrackSelected = useCallback(\n        (id: string) => {\n            if (playingRef.current) {\n                clock.stop();\n                playerChannel.pause();\n            }\n\n            selectAudioTrack(id);\n            setSelectedAudioTrack(id);\n            playerChannel.currentTime = 0;\n            playerChannel.audioTrackSelected(id);\n        },\n        [playerChannel, clock]\n    );\n\n    useEffect(() => {\n        if (!subtitles || subtitles.length === 0) {\n            return;\n        }\n\n        const interval = setInterval(() => {\n            const now = clock.time(length);\n            let showSubtitles = [];\n\n            for (let i = 0; i < subtitles.length; ++i) {\n                const s = subtitles[i];\n\n                if (now >= s.start && now < s.end && !disabledSubtitleTracks[s.track]) {\n                    showSubtitles.push({ ...s, index: i });\n                }\n\n                if (now < s.start) {\n                    break;\n                }\n            }\n\n            showSubtitles = showSubtitles.sort((s1, s2) => s1.track - s2.track);\n\n            if (!arrayEquals(showSubtitles, showSubtitlesRef.current, (s1, s2) => s1.index === s2.index)) {\n                setShowSubtitles(showSubtitles);\n            }\n        }, 50);\n\n        return () => clearTimeout(interval);\n    }, [subtitles, disabledSubtitleTracks, clock, length]);\n\n    const handleOffsetChange = useCallback(\n        (offset: number) => {\n            setOffset(offset);\n            setSubtitles((subtitles) =>\n                subtitles.map((s) => ({\n                    text: s.text,\n                    textImage: s.textImage,\n                    start: s.originalStart + offset,\n                    originalStart: s.originalStart,\n                    end: s.originalEnd + offset,\n                    originalEnd: s.originalEnd,\n                    track: s.track,\n                }))\n            );\n            playerChannel.offset(offset);\n        },\n        [playerChannel]\n    );\n\n    useEffect(() => {\n        const unbind = KeyBindings.bindSeekToSubtitle(\n            (event, subtitle) => {\n                event.stopPropagation();\n                event.preventDefault();\n                playerChannel.currentTime = subtitle.start / 1000;\n            },\n            () => !videoRef.current,\n            () => clock.time(length),\n            () => subtitles\n        );\n\n        return () => unbind();\n    }, [playerChannel, subtitles, length, clock]);\n\n    useEffect(() => {\n        const unbind = KeyBindings.bindSeekToBeginningOfCurrentSubtitle(\n            (event, subtitle) => {\n                event.stopPropagation();\n                event.preventDefault();\n                playerChannel.currentTime = subtitle.start / 1000;\n            },\n            () => !videoRef.current,\n            () => clock.time(length),\n            () => subtitles\n        );\n\n        return () => unbind();\n    }, [playerChannel, subtitles, length, clock]);\n\n    useEffect(() => {\n        const unbind = KeyBindings.bindSeekBackwardOrForward(\n            (event, forward) => {\n                event.stopPropagation();\n                event.preventDefault();\n                const timestamp = clock.time(length);\n\n                if (forward) {\n                    playerChannel.currentTime = Math.min(length / 1000, (timestamp + 10000) / 1000);\n                } else {\n                    playerChannel.currentTime = Math.max(0, (timestamp - 10000) / 1000);\n                }\n            },\n            () => !videoRef.current\n        );\n\n        return () => unbind();\n    }, [playerChannel, length, clock]);\n\n    const calculateSurroundingSubtitles = useCallback(\n        (index: number) => {\n            return surroundingSubtitles(\n                subtitles,\n                index,\n                settingsProvider.surroundingSubtitlesCountRadius,\n                settingsProvider.surroundingSubtitlesTimeRadius\n            );\n        },\n        [subtitles, settingsProvider.surroundingSubtitlesCountRadius, settingsProvider.surroundingSubtitlesTimeRadius]\n    );\n\n    useEffect(() => {\n        const unbind = KeyBindings.bindCopy<IndexedSubtitleModel>(\n            (event, subtitle) => {\n                event.stopPropagation();\n                event.preventDefault();\n\n                const noSubtitles = !subtitles || subtitles.length === 0;\n\n                playerChannel.copy(\n                    subtitle,\n                    noSubtitles\n                        ? mockSurroundingSubtitles(subtitle, length, 5000)\n                        : calculateSurroundingSubtitles(subtitle.index),\n                    PostMineAction.none\n                );\n\n                if (fullscreen) {\n                    setAlert(\n                        subtitle.text === ''\n                            ? `Saved ${humanReadableTime(subtitle.start)}`\n                            : `Copied: \"${subtitle.text}\"`\n                    );\n                    setAlertOpen(true);\n                }\n            },\n            () => false,\n            () => {\n                if (!subtitles || subtitles.length === 0) {\n                    const timestamp = clock.time(length);\n                    const end = Math.min(timestamp + 5000, length);\n\n                    return {\n                        text: '',\n                        start: timestamp,\n                        originalStart: timestamp,\n                        end: end,\n                        originalEnd: end,\n                        track: 0,\n                        index: 0,\n                    };\n                }\n\n                if (!showSubtitlesRef.current || showSubtitlesRef.current.length === 0) {\n                    return undefined;\n                }\n\n                return showSubtitlesRef.current[0];\n            }\n        );\n\n        return () => unbind();\n    }, [playerChannel, clock, length, subtitles, calculateSurroundingSubtitles, fullscreen]);\n\n    useEffect(() => {\n        const unbind = KeyBindings.bindAdjustOffset(\n            (event, offset) => {\n                event.preventDefault();\n                event.stopPropagation();\n                handleOffsetChange(offset);\n            },\n            () => false,\n            () => subtitles\n        );\n\n        return () => unbind();\n    }, [handleOffsetChange, subtitles]);\n\n    useEffect(() => {\n        const unbind = KeyBindings.bindToggleSubtitles(\n            (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n                setSubtitlesEnabled((enabled) => !enabled);\n            },\n            () => {},\n            () => false\n        );\n\n        return () => unbind();\n    }, []);\n\n    useEffect(() => {\n        const unbind = KeyBindings.bindToggleSubtitleTrackInVideo(\n            (event, track) => {\n                event.preventDefault();\n                event.stopPropagation();\n                setDisabledSubtitleTracks((tracks) => {\n                    const newTracks = { ...tracks };\n                    newTracks[track] = !tracks[track];\n                    return newTracks;\n                });\n            },\n            () => {},\n            () => false\n        );\n\n        return () => unbind();\n    }, []);\n\n    useEffect(() => {\n        const unbind = KeyBindings.bindToggleSubtitleTrackInList(\n            (event, track) => {\n                event.preventDefault();\n                event.stopPropagation();\n                playerChannel.toggleSubtitleTrackInList(track);\n            },\n            () => {},\n            () => false\n        );\n\n        return () => unbind();\n    }, [playerChannel]);\n\n    useEffect(() => {\n        const unbind = KeyBindings.bindOffsetToSubtitle(\n            (event, offset) => {\n                event.preventDefault();\n                event.stopPropagation();\n                handleOffsetChange(offset);\n            },\n            () => false,\n            () => clock.time(length),\n            () => subtitles\n        );\n\n        return () => unbind();\n    }, [handleOffsetChange, subtitles, clock, length]);\n\n    const extractSubtitles = useCallback(\n        (\n            noSubtitleCallback: (subtitle: SubtitleModel, surroundingSubtitles: SubtitleModel[]) => void,\n            subtitleCallback: (subtitle: SubtitleModel, surroundingSubtitles: SubtitleModel[]) => void\n        ) => {\n            if (!subtitles || subtitles.length === 0) {\n                const timestamp = clock.time(length);\n                const end = Math.min(timestamp + 5000, length);\n                const subtitle = {\n                    text: '',\n                    start: timestamp,\n                    originalStart: timestamp,\n                    end: end,\n                    originalEnd: end,\n                    track: 0,\n                };\n\n                noSubtitleCallback(subtitle, mockSurroundingSubtitles(subtitle, length, 5000));\n            } else if (showSubtitlesRef.current && showSubtitlesRef.current.length > 0) {\n                const currentSubtitle = showSubtitlesRef.current[0];\n                subtitleCallback(currentSubtitle, calculateSurroundingSubtitles(currentSubtitle.index));\n            }\n        },\n        [subtitles, calculateSurroundingSubtitles, length, clock]\n    );\n\n    useEffect(() => {\n        return KeyBindings.bindAnkiExport(\n            (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n\n                extractSubtitles(\n                    (subtitle, surroundingSubtitles) =>\n                        playerChannel.copy(subtitle, surroundingSubtitles, PostMineAction.showAnkiDialog, false),\n                    (subtitle, surroundingSubtitles) =>\n                        playerChannel.copy(subtitle, surroundingSubtitles, PostMineAction.showAnkiDialog, true)\n                );\n            },\n            () => false\n        );\n    }, [playerChannel, extractSubtitles, fullscreen]);\n\n    useEffect(() => {\n        return KeyBindings.bindUpdateLastCard(\n            (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n\n                extractSubtitles(\n                    (subtitle, surroundingSubtitles) =>\n                        playerChannel.copy(subtitle, surroundingSubtitles, PostMineAction.updateLastCard, false),\n                    (subtitle, surroundingSubtitles) =>\n                        playerChannel.copy(subtitle, surroundingSubtitles, PostMineAction.updateLastCard, true)\n                );\n            },\n            () => false\n        );\n    }, [playerChannel, extractSubtitles]);\n\n    useEffect(() => {\n        const unbind = KeyBindings.bindPlay(\n            (event) => {\n                event.preventDefault();\n\n                if (playing) {\n                    playerChannel.pause();\n                } else {\n                    playerChannel.play();\n                }\n            },\n            () => false\n        );\n\n        return () => unbind();\n    }, [playing, playerChannel]);\n\n    useEffect(() => {\n        return KeyBindings.bindAutoPause(\n            (event) => {\n                event.preventDefault();\n                const newPlayMode =\n                    playMode === PlayMode.autoPause ? PlayMode.normal : PlayMode.autoPause;\n                playerChannel.playMode(newPlayMode);\n                onAutoPauseModeChangedViaBind(newPlayMode);\n            },\n            () => false\n        );\n    }, [playerChannel, playMode, onAutoPauseModeChangedViaBind]);\n\n    const handleSubtitlesToggle = useCallback(() => setSubtitlesEnabled((subtitlesEnabled) => !subtitlesEnabled), []);\n\n    const handleFullscreenToggle = useCallback(() => {\n        if (fullscreen) {\n            document.exitFullscreen();\n        } else {\n            containerRef.current?.requestFullscreen();\n        }\n    }, [fullscreen]);\n\n    const handleVolumeChange = useCallback((volume: number) => {\n        if (videoRef.current) {\n            videoRef.current.volume = volume;\n        }\n    }, []);\n\n    const handlePopOutToggle = useCallback(() => {\n        playerChannel.popOutToggle();\n        if (popOut) {\n            poppingInRef.current = true;\n            window.close();\n        }\n    }, [playerChannel, popOut]);\n\n    const handlePlayMode = useCallback(\n        (playMode: PlayMode) => {\n            playerChannel.playMode(playMode);\n        },\n        [playerChannel]\n    );\n\n    const handleClose = useCallback(() => {\n        playerChannel.close();\n        window.close();\n    }, [playerChannel]);\n\n    const handleHideSubtitlePlayerToggle = useCallback(() => {\n        playerChannel.hideSubtitlePlayerToggle();\n    }, [playerChannel]);\n\n    const handleTheaterModeToggle = useCallback(() => {\n        playerChannel.appBarToggle();\n    }, [playerChannel]);\n\n    const handleClick = useCallback(() => {\n        if (playing) {\n            playerChannel.pause();\n        } else {\n            playerChannel.play();\n        }\n    }, [playerChannel, playing]);\n\n    const handleDoubleClick = useCallback(() => handleFullscreenToggle(), [handleFullscreenToggle]);\n\n    const handleAlertClosed = useCallback(() => setAlertOpen(false), []);\n    const {\n        subtitleSize,\n        subtitleColor,\n        subtitleOutlineThickness,\n        subtitleOutlineColor,\n        subtitleBackgroundColor,\n        subtitleBackgroundOpacity,\n        subtitleFontFamily,\n        imageBasedSubtitleScaleFactor,\n    } = settingsProvider.subtitleSettings;\n    const subtitleStyles = useMemo(\n        () =>\n            computeStyles({\n                subtitleSize,\n                subtitleColor,\n                subtitleOutlineThickness,\n                subtitleOutlineColor,\n                subtitleBackgroundColor,\n                subtitleBackgroundOpacity,\n                subtitleFontFamily,\n            }),\n        [\n            subtitleSize,\n            subtitleColor,\n            subtitleOutlineThickness,\n            subtitleOutlineColor,\n            subtitleBackgroundColor,\n            subtitleBackgroundOpacity,\n            subtitleFontFamily,\n        ]\n    );\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            if (Date.now() - lastMouseMovementTimestamp.current > 300) {\n                if (showCursor) {\n                    setShowCursor(false);\n                }\n            } else if (!showCursor) {\n                setShowCursor(true);\n            }\n        }, 100);\n\n        return () => clearInterval(interval);\n    }, [showCursor]);\n\n    return (\n        <div ref={containerRef} onMouseMove={handleMouseMove} className={classes.root}>\n            <video\n                preload=\"auto\"\n                controls={false}\n                onClick={handleClick}\n                onDoubleClick={handleDoubleClick}\n                className={showCursor ? classes.video : `${classes.cursorHidden} ${classes.video}`}\n                ref={videoRefCallback}\n                src={videoFile}\n            />\n            {subtitlesEnabled && (\n                <div className={classes.subtitleContainer}>\n                    {showSubtitles.map((subtitle, index) => {\n                        let content;\n\n                        if (subtitle.textImage) {\n                            content = (\n                                <SubtitleTextImage\n                                    availableWidth={videoRef.current?.width ?? window.screen.availWidth}\n                                    subtitle={subtitle}\n                                    scale={imageBasedSubtitleScaleFactor}\n                                />\n                            );\n                        } else {\n                            content = <span style={subtitleStyles}>{subtitle.text}</span>;\n                        }\n\n                        if (index < showSubtitles.length - 1) {\n                            return (\n                                <React.Fragment key={subtitle.index}>\n                                    {content}\n                                    <br />\n                                </React.Fragment>\n                            );\n                        }\n\n                        return <React.Fragment key={subtitle.index}>{content}</React.Fragment>;\n                    })}\n                </div>\n            )}\n            {fullscreen && (\n                <Alert open={alertOpen} onClose={handleAlertClosed} autoHideDuration={3000} severity=\"success\">\n                    {alert}\n                </Alert>\n            )}\n            <Controls\n                mousePositionRef={mousePositionRef}\n                playing={playing}\n                clock={clock}\n                length={length}\n                audioTracks={audioTracks}\n                selectedAudioTrack={selectedAudioTrack}\n                subtitlesToggle={subtitles && subtitles.length > 0}\n                subtitlesEnabled={subtitlesEnabled}\n                offsetEnabled={true}\n                offset={offset}\n                fullscreenEnabled={true}\n                fullscreen={fullscreen}\n                closeEnabled={!popOut}\n                popOut={popOut}\n                volumeEnabled={true}\n                popOutEnabled={!isMobile}\n                playModeEnabled={true}\n                playMode={playMode}\n                hideSubtitlePlayerToggleEnabled={subtitles?.length > 0 && !popOut && !fullscreen}\n                subtitlePlayerHidden={subtitlePlayerHidden}\n                onPlay={handlePlay}\n                onPause={handlePause}\n                onSeek={handleSeek}\n                onAudioTrackSelected={handleAudioTrackSelected}\n                onSubtitlesToggle={handleSubtitlesToggle}\n                onFullscreenToggle={handleFullscreenToggle}\n                onVolumeChange={handleVolumeChange}\n                onOffsetChange={handleOffsetChange}\n                onPopOutToggle={handlePopOutToggle}\n                onPlayMode={handlePlayMode}\n                onClose={handleClose}\n                onHideSubtitlePlayerToggle={handleHideSubtitlePlayerToggle}\n                settingsProvider={settingsProvider}\n                showOnMouseMovement={false}\n                theaterModeToggleEnabled={!popOut}\n                theaterModeEnabled={appBarHidden}\n                onTheaterModeToggle={handleTheaterModeToggle}\n            />\n        </div>\n    );\n}\n","import React, { useCallback, useEffect, useState, useMemo, useRef } from 'react';\nimport { Route, Navigate, Routes, useLocation, useSearchParams } from 'react-router-dom';\nimport { ThemeProvider, createTheme, makeStyles, Theme } from '@material-ui/core/styles';\nimport { useWindowSize } from '../hooks/useWindowSize';\nimport { red } from '@material-ui/core/colors';\nimport {\n    Anki,\n    AudioClip,\n    Image,\n    humanReadableTime,\n    AnkiDialogSliderContext,\n    SubtitleModel,\n    VideoTabModel,\n    SubtitleSettingsToVideoMessage,\n    AnkiSettingsToVideoMessage,\n    MiscSettingsToVideoMessage,\n    LegacyPlayerSyncMessage,\n    PlayerSyncMessage,\n    AudioModel,\n    ImageModel,\n    AsbplayerSettings,\n    PostMineAction,\n    PlayMode,\n    download,\n} from '@project/common';\nimport { v4 as uuidv4 } from 'uuid';\nimport clsx from 'clsx';\nimport Alert from './Alert';\nimport { AnkiDialog, ImageDialog } from '@project/common/components';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport DragOverlay from './DragOverlay';\nimport SubtitleReader from '../services/SubtitleReader';\nimport Bar from './Bar';\nimport ChromeExtension, { ExtensionMessage } from '../services/ChromeExtension';\nimport CopyHistory, { CopyHistoryItem } from './CopyHistory';\nimport LandingPage from './LandingPage';\nimport Player, { AnkiDialogFinishedRequest, MediaSources } from './Player';\nimport SettingsDialog from './SettingsDialog';\nimport SettingsProvider from '../services/SettingsProvider';\nimport VideoPlayer from './VideoPlayer';\nimport { Color } from '@material-ui/lab';\nimport { AnkiExportMode } from '@project/common';\n\nconst latestExtensionVersion = '0.19.0';\nconst extensionUrl = 'https://github.com/killergerbah/asbplayer/releases/latest';\n\nconst useContentStyles = makeStyles<Theme, ContentProps>((theme) => ({\n    content: {\n        flexGrow: 1,\n        transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n        marginRight: 0,\n    },\n    contentShift: ({ drawerWidth }) => ({\n        transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n        marginRight: drawerWidth,\n    }),\n}));\n\nfunction extractSources(files: FileList | File[]): MediaSources {\n    let subtitleFiles = [];\n    let audioFile = undefined;\n    let videoFile = undefined;\n\n    for (let i = 0; i < files.length; ++i) {\n        const f = files[i];\n        const extensionStartIndex = f.name.lastIndexOf('.');\n\n        if (extensionStartIndex === -1) {\n            throw new Error('Unable to determine extension of ' + f.name);\n        }\n\n        const extension = f.name.substring(extensionStartIndex + 1, f.name.length);\n        switch (extension) {\n            case 'ass':\n            case 'srt':\n            case 'vtt':\n                subtitleFiles.push(f);\n                break;\n            case 'sup':\n                subtitleFiles.push(f);\n                break;\n            case 'mkv':\n            case 'mp4':\n            case 'avi':\n                if (videoFile) {\n                    throw new Error('Cannot open two video files simultaneously');\n                }\n                videoFile = f;\n                break;\n            case 'mp3':\n            case 'm4a':\n            case 'aac':\n            case 'flac':\n            case 'ogg':\n            case 'wav':\n            case 'opus':\n                if (audioFile) {\n                    throw new Error('Cannot open two audio files simultaneously');\n                }\n                audioFile = f;\n                break;\n            default:\n                throw new Error('Unsupported extension ' + extension);\n        }\n    }\n\n    if (videoFile && audioFile) {\n        throw new Error('Cannot load both an audio and video file simultaneously');\n    }\n\n    return { subtitleFiles: subtitleFiles, audioFile: audioFile, videoFile: videoFile };\n}\n\nfunction audioClipFromItem(\n    item: CopyHistoryItem,\n    sliderContext: AnkiDialogSliderContext | undefined,\n    paddingStart: number,\n    paddingEnd: number\n) {\n    if (item.audio) {\n        const start = item.audio.start ?? item.start;\n        const end = item.audio.end ?? item.end;\n\n        return AudioClip.fromBase64(\n            item.subtitleFile!.name,\n            Math.max(0, start - (item.audio.paddingStart ?? 0)),\n            end + (item.audio.paddingEnd ?? 0),\n            item.audio.base64,\n            item.audio.extension\n        );\n    }\n\n    if (item.audioFile || item.videoFile) {\n        let start;\n        let end;\n\n        if (sliderContext) {\n            start = sliderContext.subtitleStart;\n            end = sliderContext.subtitleEnd;\n        } else {\n            start = item.start;\n            end = item.end;\n        }\n\n        return AudioClip.fromFile(\n            (item.audioFile || item.videoFile)!,\n            Math.max(0, start - paddingStart),\n            end + paddingEnd,\n            item.audioTrack\n        );\n    }\n\n    return undefined;\n}\n\nfunction imageFromItem(item: CopyHistoryItem, maxWidth: number, maxHeight: number) {\n    if (item.image) {\n        return Image.fromBase64(item.subtitleFile!.name, item.start, item.image.base64, item.image.extension);\n    }\n\n    if (item.videoFile) {\n        return Image.fromFile(item.videoFile, item.mediaTimestamp ?? item.start, maxWidth, maxHeight);\n    }\n\n    return undefined;\n}\n\nfunction itemSourceString(item: CopyHistoryItem | undefined) {\n    if (!item) {\n        return undefined;\n    }\n\n    const source = item.subtitleFile?.name ?? item.audioFile?.name ?? item.videoFile?.name;\n\n    if (!source) {\n        return undefined;\n    }\n\n    return `${source} (${humanReadableTime(item.start)})`;\n}\n\nfunction itemSliderContext(item: CopyHistoryItem) {\n    if (!item) {\n        return undefined;\n    }\n\n    return {\n        subtitleStart: item.start,\n        subtitleEnd: item.end,\n        subtitles: item.surroundingSubtitles || [\n            { start: item.start, end: item.end, text: item.text, track: item.track },\n        ],\n    };\n}\n\nfunction revokeUrls(sources: MediaSources) {\n    if (sources.audioFileUrl) {\n        URL.revokeObjectURL(sources.audioFileUrl);\n    }\n\n    if (sources.videoFileUrl) {\n        URL.revokeObjectURL(sources.videoFileUrl);\n    }\n}\n\ninterface NavigateToVideoProps {\n    searchParams: URLSearchParams;\n}\n\nfunction NavigateToVideo({ searchParams }: NavigateToVideoProps) {\n    const videoFile = searchParams.get('video')!;\n    const channel = searchParams.get('channel')!;\n    const popOut = searchParams.get('popout')!;\n\n    return (\n        <Navigate to={'/video?video=' + encodeURIComponent(videoFile) + '&channel=' + channel + '&popout=' + popOut} />\n    );\n}\n\ninterface RenderVideoProps {\n    searchParams: URLSearchParams;\n    settingsProvider: SettingsProvider;\n    onError: (error: string) => void;\n    onAutoPauseModeChangedViaBind: (playMode: PlayMode) => void;\n}\n\nfunction RenderVideo({ searchParams, settingsProvider, onError, onAutoPauseModeChangedViaBind }: RenderVideoProps) {\n    const videoFile = searchParams.get('video')!;\n    const channel = searchParams.get('channel')!;\n    const popOut = searchParams.get('popout')! === 'true';\n\n    return (\n        <VideoPlayer\n            settingsProvider={settingsProvider}\n            videoFile={videoFile}\n            popOut={popOut}\n            channel={channel}\n            onError={onError}\n            onAutoPauseModeChangedViaBind={onAutoPauseModeChangedViaBind}\n        />\n    );\n}\n\ninterface ContentProps {\n    drawerOpen: boolean;\n    drawerWidth: number;\n    children: React.ReactNode[];\n}\n\nfunction Content(props: ContentProps) {\n    const classes = useContentStyles(props);\n\n    return (\n        <main\n            className={clsx(classes.content, {\n                [classes.contentShift]: props.drawerOpen,\n            })}\n        >\n            {props.children}\n        </main>\n    );\n}\n\nfunction App() {\n    const subtitleReader = useMemo<SubtitleReader>(() => new SubtitleReader(), []);\n    const settingsProvider = useMemo<SettingsProvider>(() => new SettingsProvider(), []);\n    const theme = useMemo<Theme>(\n        () =>\n            createTheme({\n                palette: {\n                    primary: {\n                        main: '#49007a',\n                    },\n                    secondary: {\n                        main: '#ff1f62',\n                    },\n                    error: {\n                        main: red.A400,\n                    },\n                    type: settingsProvider.themeType,\n                },\n            }),\n        [settingsProvider.themeType]\n    );\n    const anki = useMemo<Anki>(() => new Anki(settingsProvider), [settingsProvider]);\n    const location = useLocation();\n    const [searchParams] = useSearchParams();\n\n    const inVideoPlayer = location.pathname === '/video' || searchParams.get('video') !== null;\n    const extension = useMemo<ChromeExtension>(() => new ChromeExtension(), []);\n    const videoFrameRef = useRef<HTMLIFrameElement>(null);\n    const [width] = useWindowSize(!inVideoPlayer);\n    const drawerRatio = videoFrameRef.current ? 0.2 : 0.3;\n    const minDrawerSize = videoFrameRef.current ? 150 : 300;\n    const drawerWidth = Math.max(minDrawerSize, width * drawerRatio);\n    const [copiedSubtitles, setCopiedSubtitles] = useState<CopyHistoryItem[]>([]);\n    const copiedSubtitlesRef = useRef<CopyHistoryItem[]>([]);\n    copiedSubtitlesRef.current = copiedSubtitles;\n    const [copyHistoryOpen, setCopyHistoryOpen] = useState<boolean>(false);\n    const [theaterMode, setTheaterMode] = useState<boolean>(settingsProvider.theaterMode);\n    const [videoPopOut, setVideoPopOut] = useState<boolean>(false);\n    const [alert, setAlert] = useState<string>();\n    const [alertOpen, setAlertOpen] = useState<boolean>(false);\n    const [alertSeverity, setAlertSeverity] = useState<Color>();\n    const [jumpToSubtitle, setJumpToSubtitle] = useState<SubtitleModel>();\n    const [rewindSubtitle, setRewindSubtitle] = useState<SubtitleModel>();\n    const [sources, setSources] = useState<MediaSources>({ subtitleFiles: [] });\n    const [loading, setLoading] = useState<boolean>(false);\n    const [dragging, setDragging] = useState<boolean>(false);\n    const dragEnterRef = useRef<Element | null>(null);\n    const [fileName, setFileName] = useState<string>();\n    const [ankiDialogOpen, setAnkiDialogOpen] = useState<boolean>(false);\n    const [ankiDialogDisabled, setAnkiDialogDisabled] = useState<boolean>(false);\n    const [ankiDialogItem, setAnkiDialogItem] = useState<CopyHistoryItem>();\n    const ankiDialogItemSliderContext = useMemo<AnkiDialogSliderContext | undefined>(\n        () => ankiDialogItem && itemSliderContext(ankiDialogItem),\n        [ankiDialogItem]\n    );\n    const ankiDialogAudioClip = useMemo<AudioClip | undefined>(\n        () =>\n            ankiDialogItem &&\n            audioClipFromItem(\n                ankiDialogItem,\n                ankiDialogItemSliderContext,\n                settingsProvider.audioPaddingStart,\n                settingsProvider.audioPaddingEnd\n            ),\n        [\n            ankiDialogItem,\n            ankiDialogItemSliderContext,\n            settingsProvider.audioPaddingStart,\n            settingsProvider.audioPaddingEnd,\n        ]\n    );\n    const ankiDialogImage = useMemo<Image | undefined>(\n        () =>\n            ankiDialogItem &&\n            imageFromItem(ankiDialogItem, settingsProvider.maxImageWidth, settingsProvider.maxImageHeight),\n        [ankiDialogItem, settingsProvider.maxImageWidth, settingsProvider.maxImageHeight]\n    );\n    const [ankiDialogRequestToVideo, setAnkiDialogRequestToVideo] = useState<number>();\n    const [ankiDialogRequested, setAnkiDialogRequested] = useState<boolean>(false);\n    const [ankiDialogFinishedRequest, setAnkiDialogFinishedRequest] = useState<AnkiDialogFinishedRequest>({\n        timestamp: 0,\n        resume: false,\n    });\n    const [settingsDialogOpen, setSettingsDialogOpen] = useState<boolean>(false);\n    const [imageDialogOpen, setImageDialogOpen] = useState<boolean>(false);\n    const [disableKeyEvents, setDisableKeyEvents] = useState<boolean>(false);\n    const [image, setImage] = useState<Image>();\n    const [tab, setTab] = useState<VideoTabModel>();\n    const [availableTabs, setAvailableTabs] = useState<VideoTabModel[]>([]);\n    const fileInputRef = useRef<HTMLInputElement>(null);\n    const ankiDialogRequestedRef = useRef<boolean>(false);\n    ankiDialogRequestedRef.current = ankiDialogRequested;\n    const { subtitleFiles } = sources;\n\n    const handleError = useCallback((message: string) => {\n        setAlertSeverity('error');\n        setAlert(message);\n        setAlertOpen(true);\n    }, []);\n\n    const handleAnkiDialogRequest = useCallback((forwardToVideo?: boolean, ankiDialogItem?: CopyHistoryItem) => {\n        if (!ankiDialogItem && copiedSubtitlesRef.current!.length === 0) {\n            return;\n        }\n\n        const item = ankiDialogItem ?? copiedSubtitlesRef.current[copiedSubtitlesRef.current.length - 1];\n        setAnkiDialogItem(item);\n        setAnkiDialogOpen(true);\n        setAnkiDialogDisabled(false);\n        setDisableKeyEvents(true);\n        setAnkiDialogRequested(true);\n\n        if (forwardToVideo) {\n            setAnkiDialogRequestToVideo(Date.now());\n        }\n    }, []);\n\n    const handleAnkiDialogProceed = useCallback(\n        async (\n            text: string,\n            definition: string,\n            audioClip: AudioClip | undefined,\n            image: Image | undefined,\n            word: string,\n            source: string,\n            url: string,\n            customFieldValues: { [key: string]: string },\n            tags: string[],\n            mode: AnkiExportMode\n        ) => {\n            setAnkiDialogDisabled(true);\n\n            try {\n                const result = await anki.export(\n                    text,\n                    definition,\n                    audioClip,\n                    image,\n                    word,\n                    source,\n                    url,\n                    customFieldValues,\n                    tags,\n                    mode\n                );\n\n                if (mode !== 'gui') {\n                    if (mode === 'default') {\n                        setAlertSeverity('success');\n                        setAlert('Exported card: ' + result);\n                        setAlertOpen(true);\n                    } else if (mode === 'updateLast') {\n                        setAlertSeverity('success');\n                        setAlert('Updated card: ' + result);\n                        setAlertOpen(true);\n                    }\n\n                    setAnkiDialogOpen(false);\n\n                    // We need the ref to avoid causing a state change that would re-init Player\n                    // It's a future task to make the Player init hook depend on less state\n                    if (ankiDialogRequestedRef.current) {\n                        setAnkiDialogFinishedRequest({ timestamp: Date.now(), resume: true });\n                        setAnkiDialogRequested(false);\n                    }\n                }\n            } catch (e) {\n                console.error(e);\n                if (e instanceof Error) {\n                    handleError(e.message);\n                } else {\n                    handleError(String(e));\n                }\n            } finally {\n                setAnkiDialogDisabled(false);\n                setDisableKeyEvents(false);\n            }\n        },\n        [anki, handleError]\n    );\n\n    const handleCopy = useCallback(\n        (\n            subtitle: SubtitleModel,\n            surroundingSubtitles: SubtitleModel[],\n            audioFile: File | undefined,\n            videoFile: File | undefined,\n            subtitleFile: File | undefined,\n            mediaTimestamp: number | undefined,\n            audioTrack: string | undefined,\n            audio: AudioModel | undefined,\n            image: ImageModel | undefined,\n            url: string | undefined,\n            postMineAction: PostMineAction | undefined,\n            fromVideo: boolean | undefined,\n            preventDuplicate: boolean | undefined,\n            id: string | undefined\n        ) => {\n            if (subtitle && settingsProvider.copyToClipboardOnMine) {\n                navigator.clipboard.writeText(subtitle.text);\n            }\n\n            const newCopiedSubtitle = {\n                ...subtitle,\n                surroundingSubtitles: surroundingSubtitles,\n                timestamp: Date.now(),\n                id: id || uuidv4(),\n                name: fileName!,\n                subtitleFile: subtitleFile,\n                audioFile: audioFile,\n                videoFile: videoFile,\n                mediaTimestamp: mediaTimestamp,\n                audioTrack: audioTrack,\n                audio: audio,\n                image: image,\n                url: url,\n            };\n\n            setCopiedSubtitles((copiedSubtitles) => {\n                if (preventDuplicate && copiedSubtitles.length > 0) {\n                    const last = copiedSubtitles[copiedSubtitles.length - 1];\n\n                    if (\n                        subtitle.start === last.start &&\n                        subtitle.end === last.end &&\n                        subtitle.text === last.text &&\n                        subtitleFile?.name === last.subtitleFile?.name\n                    ) {\n                        if (mediaTimestamp !== undefined && mediaTimestamp !== last.mediaTimestamp) {\n                            const newCopiedSubtitles = [...copiedSubtitles];\n                            newCopiedSubtitles[newCopiedSubtitles.length - 1] = newCopiedSubtitle;\n                            return newCopiedSubtitles;\n                        }\n\n                        return copiedSubtitles;\n                    }\n                }\n\n                // Note: we are not dealing with the case where an item with the given ID is already in the list\n                return [...copiedSubtitles, newCopiedSubtitle];\n            });\n\n            switch (postMineAction ?? PostMineAction.none) {\n                case PostMineAction.none:\n                    break;\n                case PostMineAction.showAnkiDialog:\n                    handleAnkiDialogRequest(fromVideo, newCopiedSubtitle);\n                    break;\n                case PostMineAction.updateLastCard:\n                    // FIXME: We should really rename the functions below because we're actually skipping the Anki dialog in this case\n                    setAnkiDialogRequested(true);\n                    handleAnkiDialogProceed(\n                        subtitle.text,\n                        '',\n                        audioClipFromItem(\n                            newCopiedSubtitle,\n                            undefined,\n                            settingsProvider.audioPaddingStart,\n                            settingsProvider.audioPaddingEnd\n                        ),\n                        imageFromItem(\n                            newCopiedSubtitle,\n                            settingsProvider.maxImageWidth,\n                            settingsProvider.maxImageHeight\n                        ),\n                        '',\n                        itemSourceString(newCopiedSubtitle) ?? '',\n                        '',\n                        {},\n                        settingsProvider.tags,\n                        'updateLast'\n                    );\n                    break;\n                default:\n                    throw new Error('Unknown post mine action: ' + postMineAction);\n            }\n\n            if (subtitle) {\n                setAlertSeverity('success');\n                setAlert(\n                    subtitle.text === '' ? `Saved ${humanReadableTime(subtitle.start)}` : `Copied: \"${subtitle.text}\"`\n                );\n                setAlertOpen(true);\n            }\n        },\n        [fileName, settingsProvider, handleAnkiDialogProceed, handleAnkiDialogRequest]\n    );\n\n    const handleOpenCopyHistory = useCallback(() => setCopyHistoryOpen((copyHistoryOpen) => !copyHistoryOpen), []);\n    const handleCloseCopyHistory = useCallback(() => setCopyHistoryOpen(false), []);\n    const handleAppBarToggle = useCallback(() => {\n        settingsProvider.theaterMode = !settingsProvider.theaterMode;\n        setTheaterMode(settingsProvider.theaterMode);\n    }, [settingsProvider]);\n    const handleVideoPopOut = useCallback(() => {\n        setVideoPopOut((videoPopOut) => !videoPopOut);\n    }, []);\n    const handleOpenSettings = useCallback(() => {\n        setDisableKeyEvents(true);\n        setSettingsDialogOpen(true);\n    }, []);\n    const handleAlertClosed = useCallback(() => setAlertOpen(false), []);\n    const handleImageDialogClosed = useCallback(() => setImageDialogOpen(false), []);\n    const handleCloseSettings = useCallback(\n        (newSettings: AsbplayerSettings) => {\n            settingsProvider.settings = newSettings;\n            setSettingsDialogOpen(false);\n\n            // ATM only the Anki dialog may appear under the settings dialog,\n            // so it's the only one we need to check to re-enable key events\n            setDisableKeyEvents(ankiDialogOpen);\n\n            const subtitleSettingsMessage: SubtitleSettingsToVideoMessage = {\n                command: 'subtitleSettings',\n                value: settingsProvider.subtitleSettings,\n            };\n            const ankiSettingsMessage: AnkiSettingsToVideoMessage = {\n                command: 'ankiSettings',\n                value: settingsProvider.ankiSettings,\n            };\n            const miscSettingsMessage: MiscSettingsToVideoMessage = {\n                command: 'miscSettings',\n                value: settingsProvider.miscSettings,\n            };\n            extension.publishMessage(subtitleSettingsMessage);\n            extension.publishMessage(ankiSettingsMessage);\n            extension.publishMessage(miscSettingsMessage);\n        },\n        [extension, settingsProvider, ankiDialogOpen]\n    );\n\n    const handleDeleteCopyHistoryItem = useCallback(\n        (item: CopyHistoryItem) => {\n            const newCopiedSubtitles = [];\n\n            for (let subtitle of copiedSubtitles) {\n                if (item.id !== subtitle.id) {\n                    newCopiedSubtitles.push(subtitle);\n                }\n            }\n\n            setCopiedSubtitles(newCopiedSubtitles);\n        },\n        [copiedSubtitles]\n    );\n\n    const handleUnloadAudio = useCallback(\n        (audioFileUrl: string) => {\n            if (audioFileUrl !== sources.audioFileUrl) {\n                return;\n            }\n\n            setSources((previous) => {\n                URL.revokeObjectURL(audioFileUrl);\n\n                return {\n                    subtitleFiles: previous.subtitleFiles,\n                    audioFile: undefined,\n                    audioFileUrl: undefined,\n                    videoFile: previous.videoFile,\n                    videoFileUrl: previous.videoFileUrl,\n                };\n            });\n        },\n        [sources]\n    );\n\n    const handleUnloadVideo = useCallback(\n        (videoFileUrl: string) => {\n            if (videoFileUrl !== sources.videoFileUrl) {\n                return;\n            }\n\n            setSources((previous) => {\n                URL.revokeObjectURL(videoFileUrl);\n\n                return {\n                    subtitleFiles: previous.subtitleFiles,\n                    audioFile: previous.audioFile,\n                    audioFileUrl: previous.audioFileUrl,\n                    videoFile: undefined,\n                    videoFileUrl: undefined,\n                };\n            });\n        },\n        [sources]\n    );\n\n    const handleClipAudio = useCallback(\n        async (item: CopyHistoryItem) => {\n            try {\n                const clip = await audioClipFromItem(\n                    item,\n                    undefined,\n                    settingsProvider.audioPaddingStart,\n                    settingsProvider.audioPaddingEnd\n                );\n\n                if (settingsProvider.preferMp3) {\n                    clip!.toMp3().download();\n                } else {\n                    clip!.download();\n                }\n            } catch (e) {\n                console.error(e);\n                if (e instanceof Error) {\n                    handleError(e.message);\n                } else {\n                    handleError(String(e));\n                }\n            }\n        },\n        [handleError, settingsProvider]\n    );\n\n    const handleDownloadImage = useCallback(\n        async (item: CopyHistoryItem) => {\n            try {\n                (await imageFromItem(\n                    item,\n                    settingsProvider.maxImageWidth,\n                    settingsProvider.maxImageHeight\n                ))!.download();\n            } catch (e) {\n                console.error(e);\n                if (e instanceof Error) {\n                    handleError(e.message);\n                } else {\n                    handleError(String(e));\n                }\n            }\n        },\n        [handleError, settingsProvider]\n    );\n\n    const handleDownloadCopyHistorySectionAsSrt = useCallback(\n        (name: string, items: CopyHistoryItem[]) => {\n            const deduplicated: SubtitleModel[] = [];\n\n            for (const item of items) {\n                if (\n                    deduplicated.find(\n                        (i) => i.start === item.start && i.end === item.end && i.text === item.text\n                    ) === undefined\n                ) {\n                    deduplicated.push(item);\n                }\n            }\n\n            download(\n                new Blob([subtitleReader.subtitlesToSrt(deduplicated)], { type: 'text/plain' }),\n                `${name}_MiningHistory_${new Date().toISOString()}.srt`\n            );\n        },\n        [subtitleReader]\n    );\n\n    const handleSelectCopyHistoryItem = useCallback(\n        (item: CopyHistoryItem) => {\n            if (!subtitleFiles.find((f) => f.name === item.subtitleFile?.name)) {\n                handleError('Subtitle file ' + item.subtitleFile?.name + ' is not open.');\n                return;\n            }\n\n            setJumpToSubtitle({\n                text: item.text,\n                start: item.start,\n                end: item.end,\n                originalStart: item.originalStart,\n                originalEnd: item.originalEnd,\n                track: item.track,\n            });\n        },\n        [subtitleFiles, handleError]\n    );\n\n    const handleAnki = useCallback((item: CopyHistoryItem) => {\n        setAnkiDialogItem(item);\n        setAnkiDialogOpen(true);\n        setAnkiDialogDisabled(false);\n        setDisableKeyEvents(true);\n    }, []);\n\n    const handleAnkiDialogCancel = useCallback(() => {\n        setAnkiDialogOpen(false);\n        setAnkiDialogDisabled(false);\n        setDisableKeyEvents(false);\n\n        if (ankiDialogRequested) {\n            setAnkiDialogFinishedRequest({ timestamp: Date.now(), resume: true });\n            setAnkiDialogRequested(false);\n        }\n    }, [ankiDialogRequested]);\n\n    const handleAnkiDialogRewind = useCallback(() => {\n        if (!ankiDialogItem) {\n            return;\n        }\n\n        if (!subtitleFiles.find((f) => f.name === ankiDialogItem.subtitleFile?.name)) {\n            handleError('Subtitle file ' + ankiDialogItem.subtitleFile?.name + ' is not open.');\n            return;\n        }\n\n        const subtitle = {\n            text: ankiDialogItem.text,\n            start: ankiDialogItem.start,\n            end: ankiDialogItem.end,\n            originalStart: ankiDialogItem.originalStart,\n            originalEnd: ankiDialogItem.originalEnd,\n            track: ankiDialogItem.track,\n        };\n        setRewindSubtitle(subtitle);\n        setJumpToSubtitle(subtitle);\n\n        handleAnkiDialogCancel();\n    }, [ankiDialogItem, subtitleFiles, handleAnkiDialogCancel, handleError]);\n\n    const handleViewImage = useCallback((image: Image) => {\n        setImage(image);\n        setImageDialogOpen(true);\n    }, []);\n\n    useEffect(() => {\n        function onTabs(tabs: VideoTabModel[]) {\n            if (tabs.length !== availableTabs.length) {\n                setAvailableTabs(tabs);\n            } else {\n                let update = false;\n\n                for (let i = 0; i < availableTabs.length; ++i) {\n                    const t1 = availableTabs[i];\n                    const t2 = tabs[i];\n                    if (t1.id !== t2.id || t1.title !== t2.title || t1.src !== t2.src) {\n                        update = true;\n                        break;\n                    }\n                }\n\n                if (update) {\n                    setAvailableTabs(tabs);\n                }\n            }\n\n            let selectedTabMissing = tab && tabs.filter((t) => t.id === tab.id && t.src === tab.src).length === 0;\n\n            if (selectedTabMissing) {\n                setTab(undefined);\n                handleError('Lost connection with tab ' + tab!.id + ' ' + tab!.title);\n            }\n        }\n\n        extension.subscribeTabs(onTabs);\n\n        return () => extension.unsubscribeTabs(onTabs);\n    }, [availableTabs, tab, extension, handleError]);\n\n    const handleTabSelected = useCallback((tab: VideoTabModel) => setTab(tab), []);\n\n    const handleFiles = useCallback(\n        (files: FileList | File[]) => {\n            try {\n                let { subtitleFiles, audioFile, videoFile } = extractSources(files);\n\n                setSources((previous) => {\n                    setLoading(true);\n\n                    let videoFileUrl = undefined;\n                    let audioFileUrl = undefined;\n\n                    if (videoFile || audioFile) {\n                        revokeUrls(previous);\n\n                        if (videoFile) {\n                            videoFileUrl = URL.createObjectURL(videoFile);\n                        } else if (audioFile) {\n                            audioFileUrl = URL.createObjectURL(audioFile);\n                        }\n\n                        setTab(undefined);\n                    } else {\n                        videoFile = previous.videoFile;\n                        videoFileUrl = previous.videoFileUrl;\n                        audioFile = previous.audioFile;\n                        audioFileUrl = previous.audioFileUrl;\n                    }\n\n                    const sources = {\n                        subtitleFiles: subtitleFiles.length === 0 ? previous.subtitleFiles : subtitleFiles,\n                        audioFile: audioFile,\n                        audioFileUrl: audioFileUrl,\n                        videoFile: videoFile,\n                        videoFileUrl: videoFileUrl,\n                    };\n\n                    return sources;\n                });\n\n                if (subtitleFiles.length > 0) {\n                    const subtitleFileName = subtitleFiles[0].name;\n                    setFileName(subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')));\n                }\n            } catch (e) {\n                console.error(e);\n                if (e instanceof Error) {\n                    handleError(e.message);\n                } else {\n                    handleError(String(e));\n                }\n            }\n        },\n        [handleError]\n    );\n\n    const handleDirectory = useCallback(\n        async (items: DataTransferItemList) => {\n            if (items.length !== 1) {\n                handleError('Cannot load more than one directory at a time');\n                return;\n            }\n\n            const fileSystemEntry = items[0].webkitGetAsEntry();\n\n            if (!fileSystemEntry || !fileSystemEntry.isDirectory) {\n                handleError('Failed to load directory');\n                return;\n            }\n\n            const fileSystemDirectoryEntry = fileSystemEntry as FileSystemDirectoryEntry;\n\n            try {\n                const entries = await new Promise<FileSystemEntry[]>((resolve, reject) =>\n                    fileSystemDirectoryEntry.createReader().readEntries(resolve, reject)\n                );\n\n                if (entries.find((e) => e.isDirectory)) {\n                    handleError('Cannot load a directory with subdirectories');\n                    return;\n                }\n\n                const filePromises = entries.map(\n                    (e) => new Promise<File>((resolve, reject) => (e as FileSystemFileEntry).file(resolve, reject))\n                );\n                const files: File[] = [];\n\n                for (const f of filePromises) {\n                    files.push(await f);\n                }\n\n                handleFiles(files);\n            } catch (e) {\n                console.error(e);\n                if (e instanceof Error) {\n                    handleError(e.message);\n                } else {\n                    handleError(String(e));\n                }\n            }\n        },\n        [handleError, handleFiles]\n    );\n\n    useEffect(() => {\n        if (inVideoPlayer) {\n            return undefined;\n        }\n\n        async function onMessage(message: ExtensionMessage) {\n            if (message.data.command === 'sync' || message.data.command === 'syncv2') {\n                const tabs = extension.tabs.filter((t) => {\n                    if (t.id !== message.tabId) {\n                        return false;\n                    }\n\n                    return !message.src || t.src === message.src;\n                });\n\n                if (tabs.length === 0) {\n                    if (message.src) {\n                        console.error(\n                            'Received sync request but the requesting tab ID ' +\n                                message.tabId +\n                                ' with src ' +\n                                message.src +\n                                ' was not found'\n                        );\n                    } else {\n                        console.error(\n                            'Received sync request but the requesting tab ID ' + message.tabId + ' was not found'\n                        );\n                    }\n\n                    return;\n                }\n\n                const tab = tabs[0];\n                let subtitleFiles: File[];\n\n                if (message.data.command === 'sync') {\n                    const syncMessage = message.data as LegacyPlayerSyncMessage;\n                    subtitleFiles = [\n                        new File(\n                            [await (await fetch('data:text/plain;base64,' + syncMessage.subtitles.base64)).blob()],\n                            syncMessage.subtitles.name\n                        ),\n                    ];\n                } else if (message.data.command === 'syncv2') {\n                    const syncMessage = message.data as PlayerSyncMessage;\n                    subtitleFiles = await Promise.all(\n                        syncMessage.subtitles.map(\n                            async (s) =>\n                                new File([await (await fetch('data:text/plain;base64,' + s.base64)).blob()], s.name)\n                        )\n                    );\n                } else {\n                    console.error('Unknown message ' + message.data.command);\n                    return;\n                }\n\n                const subtitleFileName = subtitleFiles[0].name;\n                setFileName(subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')));\n                setSources({\n                    subtitleFiles: subtitleFiles,\n                    audioFile: undefined,\n                    audioFileUrl: undefined,\n                    videoFile: undefined,\n                    videoFileUrl: undefined,\n                });\n                setTab(tab);\n            }\n        }\n\n        extension.subscribe(onMessage);\n        extension.startHeartbeat();\n        return () => extension.unsubscribe(onMessage);\n    }, [extension, inVideoPlayer]);\n\n    const handleAutoPauseModeChangedViaBind = useCallback((playMode: PlayMode) => {\n        switch (playMode) {\n            case PlayMode.autoPause:\n                setAlert('Auto-pause: On');\n                setAlertSeverity('info');\n                setAlertOpen(true);\n                break;\n            case PlayMode.normal:\n                setAlert('Auto-pause: Off');\n                setAlertSeverity('info');\n                setAlertOpen(true);\n        }\n    }, []);\n\n    const handleDrop = useCallback(\n        (e: React.DragEvent) => {\n            if (ankiDialogOpen) {\n                return;\n            }\n\n            e.preventDefault();\n\n            if (inVideoPlayer) {\n                handleError('Video player cannot receive dropped files. Drop outside of the video frame instead.');\n                return;\n            }\n\n            setDragging(false);\n            dragEnterRef.current = null;\n\n            function allDirectories(items: DataTransferItemList) {\n                for (let i = 0; i < items.length; ++i) {\n                    if (!items[i].webkitGetAsEntry()?.isDirectory) {\n                        return false;\n                    }\n                }\n\n                return true;\n            }\n\n            if (e.dataTransfer.items && e.dataTransfer.items.length > 0 && allDirectories(e.dataTransfer.items)) {\n                handleDirectory(e.dataTransfer.items);\n            } else if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n                handleFiles(e.dataTransfer.files);\n            }\n        },\n        [inVideoPlayer, handleError, handleFiles, handleDirectory, ankiDialogOpen]\n    );\n\n    const handleFileInputChange = useCallback(() => {\n        const files = fileInputRef.current?.files;\n\n        if (files && files.length > 0) {\n            handleFiles(files);\n        }\n    }, [handleFiles]);\n\n    const handleFileSelector = useCallback(() => fileInputRef.current?.click(), []);\n\n    const handleDownloadSubtitleFilesAsSrt = useCallback(async () => {\n        if (sources.subtitleFiles === undefined) {\n            return;\n        }\n\n        const nonSupSubtitleFiles = sources.subtitleFiles.filter((f) => !f.name.endsWith('.sup'));\n\n        if (nonSupSubtitleFiles.length === 0) {\n            return;\n        }\n\n        download(\n            new Blob([await subtitleReader.filesToSrt(nonSupSubtitleFiles)], {\n                type: 'text/plain',\n            }),\n            `${fileName}.srt`\n        );\n    }, [fileName, sources.subtitleFiles, subtitleReader]);\n\n    const handleDragOver = useCallback(\n        (e: React.DragEvent<HTMLDivElement>) => {\n            if (ankiDialogOpen) {\n                return;\n            }\n\n            e.preventDefault();\n        },\n        [ankiDialogOpen]\n    );\n\n    const handleDragEnter = useCallback(\n        (e: React.DragEvent<HTMLDivElement>) => {\n            if (ankiDialogOpen) {\n                return;\n            }\n\n            e.preventDefault();\n            e.stopPropagation();\n\n            if (!inVideoPlayer) {\n                dragEnterRef.current = e.target as Element;\n                setDragging(true);\n            }\n        },\n        [inVideoPlayer, ankiDialogOpen]\n    );\n\n    const handleDragLeave = useCallback(\n        (e: React.DragEvent<HTMLDivElement>) => {\n            e.nativeEvent.preventDefault();\n            e.nativeEvent.stopPropagation();\n\n            if (!inVideoPlayer && dragEnterRef.current === e.target) {\n                setDragging(false);\n            }\n        },\n        [inVideoPlayer]\n    );\n\n    const handleSourcesLoaded = useCallback(() => setLoading(false), []);\n\n    if (location.pathname === '/' && searchParams.get('video')) {\n        return <NavigateToVideo searchParams={searchParams} />;\n    }\n\n    const nothingLoaded =\n        (loading && !videoFrameRef.current) ||\n        (sources.subtitleFiles.length === 0 && !sources.audioFile && !sources.videoFile);\n    const appBarHidden = sources.videoFile !== undefined && theaterMode && !videoPopOut;\n\n    return (\n        <ThemeProvider theme={theme}>\n            <CssBaseline />\n            <div\n                onDrop={handleDrop}\n                onDragOver={handleDragOver}\n                onDragEnter={handleDragEnter}\n                onDragLeave={handleDragLeave}\n            >\n                <Alert open={alertOpen} onClose={handleAlertClosed} autoHideDuration={3000} severity={alertSeverity}>\n                    {alert}\n                </Alert>\n                <Routes>\n                    <Route\n                        path=\"/video\"\n                        element={\n                            <RenderVideo\n                                searchParams={searchParams}\n                                settingsProvider={settingsProvider}\n                                onError={handleError}\n                                onAutoPauseModeChangedViaBind={handleAutoPauseModeChangedViaBind}\n                            />\n                        }\n                    />\n                    <Route\n                        path=\"/\"\n                        element={\n                            <div>\n                                <CopyHistory\n                                    items={copiedSubtitles}\n                                    open={copyHistoryOpen}\n                                    drawerWidth={drawerWidth}\n                                    onClose={handleCloseCopyHistory}\n                                    onDelete={handleDeleteCopyHistoryItem}\n                                    onClipAudio={handleClipAudio}\n                                    onDownloadImage={handleDownloadImage}\n                                    onDownloadSectionAsSrt={handleDownloadCopyHistorySectionAsSrt}\n                                    onSelect={handleSelectCopyHistoryItem}\n                                    onAnki={handleAnki}\n                                />\n                                <AnkiDialog\n                                    open={ankiDialogOpen}\n                                    disabled={ankiDialogDisabled}\n                                    text={ankiDialogItem?.text}\n                                    audioClip={ankiDialogAudioClip}\n                                    image={ankiDialogImage}\n                                    source={itemSourceString(ankiDialogItem)}\n                                    url={ankiDialogItem?.url}\n                                    sliderContext={ankiDialogItemSliderContext}\n                                    customFields={settingsProvider.customAnkiFields}\n                                    anki={anki}\n                                    settingsProvider={settingsProvider}\n                                    onCancel={handleAnkiDialogCancel}\n                                    onRewind={handleAnkiDialogRewind}\n                                    onProceed={handleAnkiDialogProceed}\n                                    onViewImage={handleViewImage}\n                                    onOpenSettings={handleOpenSettings}\n                                />\n                                <ImageDialog open={imageDialogOpen} image={image} onClose={handleImageDialogClosed} />\n                                <SettingsDialog\n                                    anki={anki}\n                                    open={settingsDialogOpen}\n                                    onClose={handleCloseSettings}\n                                    settings={settingsProvider.settings}\n                                />\n                                <Bar\n                                    title={fileName || 'asbplayer'}\n                                    drawerWidth={drawerWidth}\n                                    drawerOpen={copyHistoryOpen}\n                                    hidden={appBarHidden}\n                                    subtitleFiles={sources.subtitleFiles}\n                                    onOpenCopyHistory={handleOpenCopyHistory}\n                                    onDownloadSubtitleFilesAsSrt={handleDownloadSubtitleFilesAsSrt}\n                                    onOpenSettings={handleOpenSettings}\n                                    onFileSelector={handleFileSelector}\n                                />\n                                <input\n                                    ref={fileInputRef}\n                                    onChange={handleFileInputChange}\n                                    type=\"file\"\n                                    accept=\".srt,.ass,.vtt,.sup,.mp3,.m4a,.aac,.flac,.ogg,.wav,.opus,.mkv,.mp4,.avi\"\n                                    multiple\n                                    hidden\n                                />\n                                <Content drawerWidth={drawerWidth} drawerOpen={copyHistoryOpen}>\n                                    {nothingLoaded && (\n                                        <LandingPage\n                                            latestExtensionVersion={latestExtensionVersion}\n                                            extensionUrl={extensionUrl}\n                                            extension={extension}\n                                            loading={loading}\n                                            dragging={dragging}\n                                            appBarHidden={appBarHidden}\n                                            onFileSelector={handleFileSelector}\n                                        />\n                                    )}\n                                    <DragOverlay dragging={dragging} appBarHidden={appBarHidden} loading={loading} />\n                                    <Player\n                                        subtitleReader={subtitleReader}\n                                        settingsProvider={settingsProvider}\n                                        onCopy={handleCopy}\n                                        onError={handleError}\n                                        onUnloadAudio={handleUnloadAudio}\n                                        onUnloadVideo={handleUnloadVideo}\n                                        onLoaded={handleSourcesLoaded}\n                                        onTabSelected={handleTabSelected}\n                                        onAnkiDialogRequest={handleAnkiDialogRequest}\n                                        onAppBarToggle={handleAppBarToggle}\n                                        onVideoPopOut={handleVideoPopOut}\n                                        onAutoPauseModeChangedViaBind={handleAutoPauseModeChangedViaBind}\n                                        tab={tab}\n                                        availableTabs={availableTabs}\n                                        sources={sources}\n                                        jumpToSubtitle={jumpToSubtitle}\n                                        rewindSubtitle={rewindSubtitle}\n                                        videoFrameRef={videoFrameRef}\n                                        extension={extension}\n                                        drawerOpen={copyHistoryOpen}\n                                        appBarHidden={appBarHidden}\n                                        videoPopOut={videoPopOut}\n                                        disableKeyEvents={disableKeyEvents}\n                                        ankiDialogRequested={ankiDialogRequested}\n                                        ankiDialogRequestToVideo={ankiDialogRequestToVideo}\n                                        ankiDialogFinishedRequest={ankiDialogFinishedRequest}\n                                    />\n                                </Content>\n                            </div>\n                        }\n                    />\n                </Routes>\n            </div>\n        </ThemeProvider>\n    );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import '@fontsource/roboto';\nimport { createRoot } from 'react-dom/client';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\n\ncreateRoot(document.querySelector('#root')!).render(\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <App />\n    </BrowserRouter>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}