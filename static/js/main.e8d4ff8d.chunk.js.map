{"version":3,"sources":["hooks/useWindowSize/index.ts","../../common/src/KeyBinder.ts","../../common/src/Mp3Encoder.ts","../../common/src/mp3-encoder.js","../../common/src/util.ts","../../common/src/AudioClip.ts","../../common/src/CanvasResizer.ts","../../common/src/Image.ts","../../common/src/Fetcher.ts","../../common/src/Anki.ts","../../common/src/Model.ts","../../common/src/SubtitleCollection.ts","../../common/src/AutoPauseContext.ts","components/Alert.tsx","../../common/components/src/TagsTextField.tsx","../../common/components/src/ImageDialog.tsx","../../common/components/src/SubtitleTextImage.tsx","../../common/components/src/AnkiDialog.tsx","components/background-colored.png","components/DragOverlay.tsx","services/SubtitleReader.ts","components/Bar.tsx","services/util.ts","components/CopyHistory.tsx","components/LandingPage.tsx","services/BroadcastChannelVideoProtocol.ts","services/ChromeTabVideoProtocol.ts","services/Clock.ts","components/Controls.tsx","services/MediaAdapter.ts","components/SubtitlePlayer.tsx","services/VideoChannel.ts","components/Player.tsx","components/CustomFieldDialog.tsx","components/SettingsDialog.tsx","services/CachedLocalStorage.ts","services/SettingsProvider.ts","services/PlayerChannel.ts","services/AppKeyBinder.ts","components/VideoPlayer.tsx","services/ChromeExtension.ts","services/ChromeExtensionProvider.ts","services/PlaybackPreferences.ts","services/CopyHistoryRepository.ts","components/App.tsx","reportWebVitals.js","index.tsx"],"names":["useWindowSize","enabled","useState","size","setSize","useLayoutEffect","updateSize","window","innerWidth","innerHeight","addEventListener","removeEventListener","DefaultKeyBinder","keyBindSet","this","onCopy","disabledGetter","subtitleGetter","useCapture","shortcut","copySubtitle","keys","handler","copyHandler","hotkeys","capture","unbind","event","subtitle","onAnkiExport","ankiExport","ankiExportHandler","onUpdateLastCard","updateLastCard","updateLastCardHandler","onSeekToSubtitle","timeGetter","subtitlesGetter","delegate","forward","subtitles","length","_adjacentSubtitle","start","end","previousShortcut","seekToPreviousSubtitle","nextShortcut","seekToNextSubtitle","previousHandler","nextHandler","onSeekToBeginningOfCurrentSubtitle","seekToBeginningOfCurrentSubtitle","_currentSubtitle","undefined","time","currentSubtitle","now","minDiff","Number","MAX_SAFE_INTEGER","i","s","diff","onSeekBackwardOrForward","backShortcut","seekBackward","seekForward","backHandler","onOffsetChange","subtitleStart","originalStart","adjustOffsetToPreviousSubtitle","adjustOffsetToNextSubtitle","adjacentSubtitleIndex","Math","max","increase","currentOffset","decreaseShortcut","decreaseOffset","increaseShortcut","increaseOffset","decreaseHandler","increaseHandler","onResetOffset","resetOffset","onAdjustPlaybackRate","increasePlaybackRate","decreasePlaybackRate","onToggleSubtitles","toggleSubtitles","onToggleSubtitleTrack","shortcuts","toggleVideoSubtitleTrack1","toggleVideoSubtitleTrack2","filter","track","handlers","push","onToggleSubtitleTrackInList","toggleAsbplayerSubtitleTrack1","toggleAsbplayerSubtitleTrack2","onPlay","togglePlay","onAutoPause","toggleAutoPause","toggleCondensedPlayback","Mp3Encoder","blob","workerFactory","Promise","resolve","reject","a","reader","FileReader","onload","e","audioContext","AudioContext","target","Error","decodeAudioData","result","audioBuffer","channels","numberOfChannels","getChannelData","worker","postMessage","command","sampleRate","onmessage","Blob","data","buffer","type","terminate","onerror","error","message","readAsArrayBuffer","Worker_fn","Worker","Direction","humanReadableTime","timestamp","seconds","nearestTenth","totalSeconds","floor","round","minutes","hours","String","padStart","surroundingSubtitles","index","countRadius","timeRadius","startIndex","atBoundary","backward","endIndex","slice","mockSurroundingSubtitles","middleSubtitle","maxTimestamp","offset","afterTimestamp","min","text","originalEnd","beforeTimestamp","unshift","initialIndex","direction","next","abs","subtitleIntersectsTimeInterval","interval","overlapStart","joinSubtitles","trim","map","join","extractText","download","name","url","URL","createObjectURL","document","createElement","body","appendChild","style","display","href","sanitize","click","revokeObjectURL","remove","defaultMp3WorkerFactory","recorderConfiguration","AUDIO_TYPES","Object","MediaRecorder","isTypeSupported","t","Base64AudioData","baseName","playbackRate","base64","extension","_name","_start","_end","_base64","_extension","playingAudio","stopAudioTimeout","cachedBlob","_blob","stopAudio","clearTimeout","audio","Audio","src","preload","load","play","setTimeout","pause","fetch","FileAudioData","file","trackId","recorderMimeType","clippingAudio","clippingAudioReject","stopClippingTimeout","recorderExtension","readAsDataURL","onloadend","substring","indexOf","_clipAudio","_audioElement","currentTime","oncanplay","stream","_captureStream","recorder","mimeType","chunks","ondataavailable","finished","onstop","stop","getAudioTracks","source","selectTrack","onloadedmetadata","audioTracks","id","captureStream","mozCaptureStream","audioStream","MediaStream","getVideoTracks","addTrack","Mp3AudioData","encode","isSliceable","isPlayable","MissingFileAudioData","fileName","AudioClip","mp3WorkerFactory","subtitleFileName","lastIndexOf","CanvasResizer","canvas","ctx","maxWidth","maxHeight","widthRatio","width","heightRatio","height","ratio","newWidth","newHeight","createImageBitmap","resizeWidth","resizeHeight","resizeQuality","then","sprite","drawImage","catch","Base64ImageData","_dataUrl","FileImageData","_canvas","dataUrl","toDataURL","toBlob","video","_videoElement","videoWidth","videoHeight","getContext","resizer","resize","MissingFileImageData","Image","available","bitMap","imageName","HttpFetcher","method","JSON","stringify","response","json","ankiQuerySpecialCharacters","PostMineAction","AutoPausePreference","PlayMode","Anki","settingsProvider","fetcher","ankiConnectUrl","_executeAction","modelName","word","query","wordField","_escapeQuery","escaped","char","includes","definition","audioClip","image","customFieldValues","tags","mode","fields","_appendField","sentenceField","definitionField","sourceField","urlField","customFieldName","customAnkiFields","params","note","deckName","deck","noteType","options","allowDuplicate","duplicateScope","duplicateScopeOptions","checkChildren","gui","updateLast","audioField","sanitizedName","_sanitizeFileName","_storeMediaFile","filename","imageField","recentNotes","sort","lastNoteId","notes","infoResponse","noteId","info","value","_inheritHtmlMarkup","fieldName","multiline","newValue","split","existingValue","replacement","original","markedUp","htmlTagRegex","RegExp","markedUpWithoutBreaklines","replace","inherited","match","exec","action","version","SubtitleCollection","tree","gapsTree","IntervalTree","returnLastShown","returnNextToShow","last","insert","lastShown","nextToShow","startedShowing","willStopShowing","showing","search","gapIntervals","nextStart","high","showingCheckRadiusMs","emptySubtitleCollection","AutoPauseContext","lastStartedShowing","lastWillStopShowing","onStartedShowing","onWillStopShowing","onNextToShow","useAlertStyles","makeStyles","root","justifyContent","position","top","pointerEvents","zIndex","Alert","props","classes","useEffect","open","timeout","onClose","autoHideDuration","className","Grow","in","severity","children","TagsTextField","onTagsChange","setValue","handleChange","useCallback","currentValue","endsWith","newTags","splitTags","tag","extractTagsFromString","TextField","onChange","useStyles","theme","backgroundSize","ImageDialog","resizeRatio","setDataUrl","setWidth","setHeight","windowWidth","windowHeight","img","fetchImage","Dialog","Card","CardMedia","title","SubtitleTextImage","availableWidth","scale","textImage","screen","alt","marginBottom","spacing","flexGrow","mediaField","cursor","rangeSelectSlider","transform","sliderMarksFromSliderContext","sliderContext","boundary","seenTimestamps","label","mark","sliderValueLabelFormat","ms","ValueLabelComponent","Tooltip","enterTouchDelay","placement","useTextImageSetStyles","padding","backgroundColor","palette","disabledBackground","TextImageSet","selectedSubtitles","Paper","elevation","TextFieldEndAdornment","withStyles","InputAdornment","AnkiDialog","disabled","initialText","onProceed","onRewind","onCancel","onViewImage","onOpenSettings","onRerecord","initialAudioClip","initialSource","initialUrl","customFields","anki","initialDefinition","initialWord","initialCustomFieldValues","initialSelectedTimestampInterval","timestampInterval","forceTimestampBoundaryInterval","timestampBoundaryInterval","forceInitialTimestampInterval","initialTimestampInterval","initialLastAppliedTimestampIntervalToText","lastAppliedTimestampIntervalToText","initialLastAppliedTimestampIntervalToAudio","lastAppliedTimestampIntervalToAudio","stateRef","setDefinition","setText","setWord","lastSearchedWord","setLastSearchedWord","setSource","setTags","setUrl","duplicateNotes","setDuplicateNotes","wordTimestamp","setWordTimestamp","setCustomFieldValues","setTimestampInterval","setSelectedSubtitles","setInitialTimestampInterval","initialTimestampBoundaryInterval","setInitialTimestampBoundaryInterval","setTimestampBoundaryInterval","timestampMarks","setTimestampMarks","setLastAppliedTimestampIntervalToText","setLastAppliedTimestampIntervalToAudio","setAudioClip","dialogRefCallback","element","getBoundingClientRect","current","textForTimestampInterval","subtitleEnd","findIndex","subtitlesToDisplay","boundaryIntervalFromSliderContext","newAudioClip","preferMp3","toMp3","audioPaddingStart","audioPaddingEnd","Date","trimmedWord","findNotesWithWord","console","wordHelperText","handlePlayAudio","preventDefault","stopPropagation","handleCustomFieldChange","newCustomFieldValues","assign","audioHelperText","imageHelperText","handleViewImage","handleApplyTimestampIntervalToText","newText","handleTimestampIntervalChange","newTimestampInterval","expectedUnchangedText","handleApplyTimestampIntervalToAudio","handleResetTimestampInterval","handleZoomInTimestampInterval","newTimestampBoundaryInterval","handleZoomOutTimestampInterval","minimumChange","handleCopyImageToClipboard","navigator","clipboard","ClipboardItem","pngBlob","write","disableApplyTextSelection","audioActionElement","IconButton","onClick","edge","disableEnforceFocus","fullWidth","Toolbar","Typography","variant","DialogContent","ref","color","maxRows","InputProps","endAdornment","rows","helperText","findNotesWithWordGui","Grid","container","item","Slider","valueLabelFormat","marks","step","valueLabelDisplay","marginTop","DialogActions","Button","dragging","appBarHidden","transparentBackground","content","flexDirection","alignItems","textAlign","backgroundRepeat","backgroundPosition","backgroundImage","coloredBackground","backgroundBlendMode","background","DragOverlay","loading","Fade","tagRegex","assNewLineRegex","helperElement","helperCanvas","SubtitleReader","textFilter","_textFilter","xmlParser","files","flatten","all","f","_subtitles","flatMap","nodes","n1","n2","parseSrt","node","cue","_filterText","isFromNetflix","parser","WebVTT","Parser","StringDecoder","cues","oncue","c","lines","newLines","line","_fixRTL","onflush","startTime","endTime","parse","flush","parseAss","dialogues","dialogue","slices","fragments","fragment","xml","_xmlParser","textNodes","elm","parseFloat","_decodeHTML","pipeThrough","parseDisplaySets","pipeTo","_displaySetsToSubtitles","DOMParser","doc","parseFromString","_xmlNodePath","documentElement","beginAttribute","getAttribute","endAttribute","textContent","_parseTtmlTimestamp","parts","parent","path","_dropTagNamespace","tagName","colonIndex","imageDataArray","currentImageDisplaySet","WritableStream","displaySet","controller","objectDefinitionSegments","screenWidth","presentationCompositionSegment","screenHeight","Uint8ClampedArray","imageData","putImageData","header","presentationTimestamp","endDefinitionSegment","index1","index2","newLine","innerHTML","innerText","XMLParser","ignoreAttributes","regex","subtitleNode","writeSrt","format","subtitlesToSrt","leftButton","marginRight","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","drawerWidth","easeOut","enteringScreen","copyHistoryButton","copyHistoryButtonShift","hide","useCopyHistoryTooltipStyles","tooltip","show","CopyHistoryTooltip","toolTipProps","Bar","drawerOpen","hidden","subtitleFiles","onOpenCopyHistory","onFileSelector","onDownloadSubtitleFilesAsSrt","menuOpen","setMenuOpen","menuAnchorEl","setMenuAnchorEl","canSaveAsSrt","find","handleFileAction","currentTarget","handleMenuClose","handleOpenFilesFromMenu","handleDownloadSubtitleFilesAsSrt","Popover","anchorEl","anchorOrigin","vertical","horizontal","ListItem","button","AppBar","clsx","disableFocusListener","disableHoverListener","disableTouchListener","component","rel","computeStyles","subtitleColor","subtitleSize","subtitleOutlineThickness","subtitleOutlineColor","subtitleBackgroundOpacity","subtitleBackgroundColor","subtitleFontFamily","styles","fontSize","thickness","opacity","hex","r","parseInt","g","b","hexToRgb","timeDurationDisplay","milliseconds","totalMilliseconds","includeMilliseconds","secs","mins","hrs","pad","n","zeros","drawer","flexShrink","drawerPaper","drawerHeader","mixins","toolbar","listContainer","overflowY","overflowX","listItem","hover","listItemGutters","paddingLeft","paddingRight","listItemIconRoot","minWidth","emptyState","emptyText","secondary","Menu","onSelect","onClipAudio","onDownloadImage","onDelete","handleCopy","writeText","handleJumpTo","handleClipAudio","handleDownloadImage","handleDelete","transformOrigin","ListItemText","primaryTypographyProps","primary","videoFile","audioFile","CopyHistory","scrollToBottomRefCallback","scrollIntoView","menuItem","setMenuItem","handleMenu","handleMenuClosed","items","currentKey","lastSeenItemName","itemNameCounters","itemsBySection","key","ListItemSecondaryAction","onDownloadSectionAsSrt","gutters","ListItemIcon","onAnki","wrap","Fragment","Drawer","anchor","paper","Divider","browseLink","LandingPage","latestExtensionVersion","extensionUrl","installedExtensionVersion","setInstalledExtensionVersion","fetchInstalledExtensionVersion","extensionUpdateAvailable","gt","extensionNotInstalled","Link","BroadcastChannelVideoProtocol","channelId","channel","onMessage","BroadcastChannel","that","close","ChromeTabVideoProtocol","tabId","listener","unsubscribeFromExtension","subscribe","sendMessage","Clock","accumulated","started","_rate","rate","_elapsed","useControlStyles","left","bottom","buttonContainer","timeDisplay","marginLeft","numberInput","volumeInputContainerShown","short","volumeInputContainerHidden","volumeInputHidden","volumeInputShown","volumeInputThumbHidden","volumeInputThumbShown","subContainer","inactiveButton","inactiveTopButton","progress","margin","topButton","gridContainer","useProgressBarStyles","mouseEventListener","fillContainer","fillContainerThick","easeInOut","fill","handleContainer","handle","borderRadius","handleOn","shortest","VolumeSlider","verticalAlign","thumb","boxShadow","active","displayTime","secondsInMinute","ProgressBar","onSeek","mouseOver","setMouseOver","containerRef","useRef","handleClick","rect","right","pageX","handleMouseOver","handleMouseOut","progressWidth","elementWidth","fillStyle","handleStyle","fillContainerClassName","handleClassName","onMouseOver","onMouseOut","AudioTrackSelector","selectedAudioTrack","onAudioTrackSelected","list","selected","language","TabSelector","tabs","selectedTab","onTabSelected","MediaUnloader","onUnload","PlayModeSelector","selectedPlayMode","onPlayMode","normal","condensed","autoPause","Controls","clock","playing","offsetEnabled","displayLength","playbackRateEnabled","mousePositionRef","onShow","onPause","onUnloadAudio","onUnloadVideo","onPlaybackRateChange","onVolumeChange","disableKeyEvents","playbackPreferences","closeEnabled","volumeEnabled","playMode","playModeEnabled","subtitlesEnabled","subtitlesToggle","onSubtitlesToggle","popOutEnabled","popOut","onPopOutToggle","fullscreenEnabled","fullscreen","onFullscreenToggle","hideSubtitlePlayerToggleEnabled","subtitlePlayerHidden","onHideSubtitlePlayerToggle","showOnMouseMovement","theaterModeToggleEnabled","theaterModeEnabled","onTheaterModeToggle","setShow","audioTrackSelectorOpen","setAudioTrackSelectorOpen","audioTrackSelectorAnchorEl","setAudioTrackSelectorAnchorEl","tabSelectorOpen","setTabSelectorOpen","tabSelectorAnchorEl","setTabSelectorAnchorEl","audioUnloaderOpen","setAudioUnloaderOpen","audioUnloaderAnchorEl","setAudioUnloaderAnchorEl","videoUnloaderOpen","setVideoUnloaderOpen","videoUnloaderAnchorEl","setVideoUnloaderAnchorEl","playModeSelectorOpen","setPlayModeSelectorOpen","playModeSelectorAnchorEl","setPlayModeSelectorAnchorEl","showVolumeBar","setShowVolumeBar","volume","setVolume","lastCommittedVolume","setLastCommittedVolume","lastMousePositionRef","x","y","lastShowTimestampRef","lastNumberInputChangeTimestampRef","lastShowRef","forceShowRef","offsetInputWidth","setOffsetInputWidth","playbackRateInputWidth","setPlaybackRateInputWidth","offsetInputRef","playbackRateInputRef","closeButtonRef","updateState","forceUpdate","handleSeek","savedVolume","setInterval","currentShow","pow","offsetTop","offsetHeight","activeElement","clearInterval","updateOffset","offsetSeconds","toFixed","blur","updatePlaybackRate","handleKey","newOffset","isNaN","newPlaybackRate","handleNumberInputClicked","inputElement","setSelectionRange","handleAudioTrackSelectorClosed","handleAudioTrackSelectorOpened","handleAudioTrackSelected","handleTabSelectorClosed","handleTabSelectorOpened","handleTabSelected","tab","handleAudioUnloaderClosed","handleAudioUnloaderOpened","handleUnloadAudio","handleVideoUnloaderClosed","handleVideoUnloaderOpened","handleUnloadVideo","handlePlayModeSelectorClosed","handlePlayModeSelectorOpened","handlePlayModeSelected","handleVolumeMouseOut","handleVolumeMouseOver","handleVolumeChange","handleVolumeChangeCommitted","handleVolumeToggle","newVolume","onChangeCommitted","defaultValue","Input","inputRef","disableUnderline","placeholder","MediaAdapter","readyResolves","_onMediaCanPlay","callback","readyState","useSubtitlePlayerStyles","default","compressed","table","noSubtitles","useSubtitleRowStyles","subtitleRow","overflowWrap","whiteSpace","compressedSubtitle","disabledSubtitle","copyButton","SubtitleRow","React","memo","subtitleRef","onClickSubtitle","onCopySubtitle","copyButtonEnabled","tableRowProps","textRef","textSelected","setTextSelected","disabledClassName","availWidth","TableRow","onMouseUp","selection","getSelection","isSameNode","anchorNode","parentNode","TableCell","SubtitlePlayer","onSubtitlesSelected","autoPauseContext","subtitleCollection","jumpToSubtitle","displayHelp","lastJumpToTopTimestamp","disabledSubtitleTracks","keyBinder","playingRef","clockRef","subtitleRefs","useMemo","Array","_","createRef","subtitleCollectionRef","empty","subtitleRefsRef","disableKeyEventsRef","selectedSubtitleIndexes","setSelectedSubtitleIndexes","selectedSubtitleIndexesRef","lengthRef","hiddenRef","lastScrollTimestampRef","requestAnimationRef","autoPauseContextRef","onSubtitlesSelectedRef","requestAnimationFrame","update","smallestIndex","currentSubtitleIndexes","subtitlesAt","keysAreEqual","scrollToSubtitleRef","allowScroll","block","inline","behavior","cancelAnimationFrame","scrollToCurrentSubtitle","indexes","scrollIfVisible","visibilityState","firstSubtitleRef","bindAdjustOffset","bindResetOffet","bindOffsetToSubtitle","bindSeekToSubtitle","bindSeekToBeginningOfCurrentSubtitle","bindSeekBackwardOrForward","handleScroll","jumpToIndex","calculateSurroundingSubtitlesForIndex","surroundingSubtitlesCountRadius","surroundingSubtitlesTimeRadius","calculateSurroundingSubtitles","calculateCurrentSubtitle","subtitleIndexes","bindCopy","none","bindToggleSubtitleTrackInList","bindAnkiExport","showAnkiDialog","bindUpdateLastCard","subtitleTable","TableContainer","Table","TableBody","square","VideoChannel","protocol","isReady","readyCallbacks","playCallbacks","pauseCallbacks","audioTrackSelectedCallbacks","currentTimeCallbacks","exitCallbacks","offsetCallbacks","playbackRateCallbacks","popOutToggleCallbacks","copyCallbacks","playModeCallbacks","hideSubtitlePlayerToggleCallbacks","appBarToggleCallbacks","fullscreenToggleCallbacks","ankiDialogRequestCallbacks","toggleSubtitleTrackInListCallbacks","_playbackRate","readyMessage","paused","readyStateMessage","Event","playMessage","echo","pauseMessage","audioTrackSelectedMessage","currentTimeMessage","offsetMessage","playbackRateMessage","copyMessage","postMineAction","preventDuplicate","toggleSubtitleTrackInListMessage","videoFileName","subtitleFileNames","names","settings","msg","videoFrame","border","trackLength","audioRef","videoRef","useOffset","subtitlesLength","audioLength","videoLength","Player","sources","flattenSubtitleFiles","audioFileUrl","videoFileUrl","subtitleReader","videoFrameRef","videoChannelRef","videoFullscreen","hideSubtitlePlayer","videoPopOut","availableTabs","ankiDialogRequested","ankiDialogFinishedRequest","onError","onLoaded","onAnkiDialogRequest","onAppBarToggle","onHideSubtitlePlayer","onVideoPopOut","onPlayModeChangedViaBind","rewindSubtitle","setPlayMode","playModeRef","setSubtitles","subtitlesRef","Boolean","loadingSubtitles","setLoadingSubtitles","setPlaying","setLastJumpToTopTimestamp","setOffset","setPlaybackRate","setAudioTracks","setSelectedAudioTrack","setChannelId","setResumeOnFinishedAnkiDialogRequest","hideSubtitlePlayerRef","setDisabledSubtitleTracks","mediaAdapter","handleOnStartedShowingSubtitle","autoPausePreference","atStart","handleOnWillStopShowingSubtitle","atEnd","context","seek","forwardToMedia","setTime","clear","applyOffset","forwardToVideo","newSubtitles","installed","lte","channelClosed","onReady","uuidv4","init","subscribed","onExit","ready","subtitleSettings","ankiSettings","miscSettings","hideSubtitlePlayerToggle","onOffset","onPlaybackRate","onCurrentTime","tracks","newTracks","resumeOnFinishedAnkiDialogRequest","resume","seeking","expectedSeekTime","nextSubtitle","t0","process","encodeURIComponent","handlePlay","handlePause","handleSeekToSubtitle","shouldPlay","handleCopyFromSubtitlePlayer","handleMouseMove","screenX","screenY","audioTrackSelected","handleOffsetChange","HTMLMediaElement","handlePlaybackRateChange","handlePlayMode","handleToggleSubtitleTrack","handleSubtitlesSelected","autoCopyCurrentSubtitle","hasFocus","bindPlay","bindAdjustPlaybackRate","togglePlayMode","newPlayMode","bindAutoPause","bindCondensedPlayback","unbindCopy","unbindAnkiExport","appBarToggle","fullscreenToggle","loaded","videoInWindow","onMouseMove","gte","CustomFieldDialog","existingCustomFieldNames","setFieldName","fieldExists","DialogTitle","subtitleSetting","subtitlePreview","subtitlePreviewInput","outline","addFieldButton","switchLabel","useSelectableSettingStyles","formControl","SelectableSetting","selections","removable","onSelectionChange","onRemoval","FormControl","InputLabel","Select","MenuItem","keyBindProperties","extensionOverridden","modifierKeyReplacements","isMacOs","modifierKeys","useKeyBindFieldStyles","labelItem","KeyBindField","onKeysChange","onOpenExtensionShortcuts","currentKeyString","setCurrentKeyString","currentKeyStringRef","onKeysChangeRef","editing","setEditing","handleEditKeyBinding","nativeEvent","detail","pressed","getPressedKeyString","isAModifier","isBModifier","keyup","contains","xs","contentEditable","SettingsDialog","scrollToId","setAnkiConnectUrl","ankiConnectUrlError","setAnkiConnectUrlError","ankiConnectUrlChangeTimestamp","setAnkiConnectUrlChangeTimestamp","setDeck","deckNames","setDeckNames","setNoteType","modelNames","setModelNames","setSentenceField","setDefinitionField","setAudioField","setImageField","setWordField","setSourceField","setUrlField","setCustomFields","setPreferMp3","fieldNames","setFieldNames","customFieldDialogOpen","setCustomFieldDialogOpen","setAudioPaddingStart","setAudioPaddingEnd","maxImageWidth","setMaxImageWidth","maxImageHeight","setMaxImageHeight","setSurroundingSubtitlesCountRadius","setSurroundingSubtitlesTimeRadius","setSubtitleColor","setSubtitleSize","setSubtitleOutlineColor","setSubtitleOutlineThickness","setSubtitleBackgroundColor","setSubtitleBackgroundOpacity","setSubtitleFontFamily","imageBasedSubtitleScaleFactor","setImageBasedSubtitleScaleFactor","setSubtitlePreview","themeType","setThemeType","copyToClipboardOnMine","setCopyToClipboardOnMine","setAutoPausePreference","setKeyBindSet","rememberSubtitleOffset","setRememberSubtitleOffset","miningHistoryStorageLimit","setMiningHistoryStorageLimit","setAutoCopyCurrentSubtitle","subtitleRegexFilter","setSubtitleRegexFilter","subtitleRegexFilterTextReplacement","setSubtitleRegexFilterTextReplacement","handleAnkiConnectUrlChange","handleRetryAnkiConnectUrl","handleDeckChange","handleDeckSelectionChange","handleNoteTypeChange","handleNoteTypeSelectionChange","handleSentenceFieldChange","handleSentenceFieldSelectionChange","handleDefinitionFieldChange","handleDefinitionFieldSelectionChange","handleAudioFieldChange","handleAudioFieldSelectionChange","handleImageFieldChange","handleImageFieldSelectionChange","handleWordFieldChange","handleWordFieldSelectionChange","handleSourceFieldChange","handleSourceFieldSelectionChange","handleUrlFieldChange","handleUrlFieldSelectionChange","handleAudioPaddingStart","handleAudioPaddingEnd","handleMaxImageWidth","handleMaxImageHeight","handleSurroundingSubtitlesCountRadius","handleSurroundingSubtitlesTimeRadius","handleSubtitleColorChange","handleSubtitleSizeChange","handleSubtitleOutlineColorChange","handleSubtitleOutlineThicknessChange","handleSubtitleBackgroundColorChange","handleSubtitleBackgroundOpacityChange","handleSubtitleFontFamilyChange","handleSubtitlePreviewChange","handleImageBasedSubtitleScaleFactorChange","handleAddCustomField","oldCustomFields","newCustomFields","handleCustomFieldRemoval","handleTagsChange","handlePreferMp3Change","checked","handleThemeTypeChange","handleCopyToClipboardOnMine","handleAutoPausePreferenceChange","handleKeysChange","keyBindName","newKeyBindSet","handleRememberSubtitleOffsetChange","handleAutoCopyCurrentSubtitle","handleMiningHistoryStorageLimit","handleSubtitleRegexFilter","handleSubtitleRegexFilterTextReplacement","subtitlePreviewStyles","canceled","requestPermission","refreshFieldNames","modelFieldNames","handleClose","customFieldInputs","getElementById","validRegex","regexIsValid","FormLabel","FormGroup","FormHelperText","location","hostname","FormControlLabel","control","Switch","labelPlacement","inputProps","RadioGroup","row","Radio","properties","extensionCommands","openShortcuts","CachedLocalStorage","_cache","cached","fromStorage","localStorage","getItem","setItem","removeItem","defaultAutoPausePreference","defaultKeyBindSet","ankiConnectUrlKey","deckKey","noteTypeKey","sentenceFieldKey","definitionFieldKey","audioFieldKey","imageFieldKey","wordFieldKey","sourceFieldKey","urlFieldKey","customAnkiFieldsKey","tagsKey","subtitleSizeKey","subtitleColorKey","subtitleOutlineThicknessKey","subtitleOutlineColorKey","subtitleBackgroundColorKey","subtitleBackgroundOpacityKey","subtitleFontFamilyKey","subtitlePreviewKey","imageBasedSubtitleScaleFactorKey","audioPaddingStartKey","audioPaddingEndKey","maxImageWidthKey","maxImageHeightKey","surroundingSubtitlesCountRadiusKey","surroundingSubtitlesTimeRadiusKey","preferMp3Key","themeTypeKey","copyToClipboardOnMineKey","autoPausePreferenceKey","keyBindSetKey","rememberSubtitleOffsetKey","autoCopyCurrentSubtitleKey","subtitleRegexFilterKey","subtitleRegexFilterTextReplacementKey","miningHistoryStorageLimitKey","SettingsProvider","_tags","_keyBindSet","_storage","newSettings","get","delete","set","_setOptionalItem","ankiFieldsString","tagsString","_getNumberItem","serialized","PlayerChannel","closeCallbacks","subtitlesCallbacks","subtitleSettingsCallbacks","miscSettingsCallbacks","ankiSettingsCallbacks","alertCallbacks","subtitlesMessage","subtitleSettingsMessage","playModeMessage","hideSubtitlePlayerToggleMessage","appBarToggleMessage","fullscreenToggleMessage","ankiSettingsMessage","miscSettingsMessage","alertMessage","AppKeyBinder","defaultKeyBinder","copyHandlers","ankiExportHandlers","updateLastCardHandlers","onExtensionMessage","h","KeyboardEvent","_remove","splice","bindToggleSubtitles","bindToggleSubtitleTrackInVideo","onCondensedPlayback","overflow","cursorHidden","subtitleContainer","lineHeight","notifyReady","playerChannel","outerWidth","availHeight","outerHeight","resizeTo","selectedTrack","VideoPlayer","poppingInRef","setFullscreen","setLength","setVideoFileName","showSubtitles","setShowSubtitles","setSubtitlesEnabled","setSubtitlePlayerHidden","theaterMode","setAppBarHidden","showSubtitlesRef","showCursor","setShowCursor","lastMouseMovementTimestamp","setMiscSettings","setSubtitleSettings","setAnkiSettings","alertOpen","setAlertOpen","setAlertMessage","alertSeverity","setAlertSeverity","videoRefCallback","videoElement","onloadeddata","ontimeupdate","code","errorMessage","selectAudioTrack","updateSubtitlesWithOffset","forwardToPlayer","onSubtitles","onSubtitleSettings","onMiscSettings","onAnkiSettings","onAlert","onbeforeunload","equals","arrayEquals","s1","s2","copy","toggleSubtitleTrackInList","extractSubtitles","noSubtitleCallback","subtitleCallback","handleSubtitlesToggle","handleFullscreenToggle","exitFullscreen","requestFullscreen","handlePopOutToggle","popOutToggle","handleHideSubtitlePlayerToggle","handleTheaterModeToggle","handleDoubleClick","subtitleStyles","handleAlertClosed","bounds","clientX","clientY","controls","onDoubleClick","isMobile","ChromeExtension","windowEventListener","onMessageCallbacks","onTabsCallbacks","heartbeatStarted","sender","tabsCommand","ackRequested","receivedTabs","fromVideoPlayer","_sendHeartbeat","videoPlayer","callbacks","keyBindNameMap","ChromeExtensionProvider","translatedCommands","extensionCommandName","volumeKey","theaterModeKey","offsetKey","PlaybackPreferences","CopyHistoryDatabase","copyHistoryItems","stores","Dexie","CopyHistoryRepository","limit","_db","_limit","count","reverse","toArray","audioTrack","filePlaybackRate","mediaTimestamp","record","audioFileName","put","_prune","lastIndex","where","belowOrEqual","primaryKeys","bulkDelete","useContentStyles","contentShift","audioClipFromItem","paddingStart","paddingEnd","fromBase64","calculateInterval","fromFile","fromMissingFile","imageFromItem","itemSourceString","NavigateToVideo","searchParams","to","RenderVideo","Content","App","createTheme","main","red","A400","useLocation","useSearchParams","inVideoPlayer","pathname","extensionProvider","setExtension","setVideoFullscreen","onChromeExtension","drawerRatio","minDrawerSize","copyHistoryRepository","copiedSubtitles","setCopiedSubtitles","copiedSubtitlesRef","copyHistoryOpen","setCopyHistoryOpen","setTheaterMode","setHideSubtitlePlayer","setVideoPopOut","alert","setAlert","setJumpToSubtitle","setRewindSubtitle","setSources","setLoading","setDragging","dragEnterRef","setFileName","ankiDialogOpen","setAnkiDialogOpen","ankiDialogDisabled","setAnkiDialogDisabled","ankiDialogItem","setAnkiDialogItem","ankiDialogItemSliderContext","itemSliderContext","ankiDialogAudioClip","ankiDialogImage","setAnkiDialogRequested","setAnkiDialogFinishedRequest","settingsDialogOpen","setSettingsDialogOpen","settingsDialogScrollToId","setSettingsDialogScrollToId","imageDialogOpen","setImageDialogOpen","setDisableKeyEvents","setImage","setTab","setAvailableTabs","fileInputRef","ankiDialogRequestedRef","handleError","handleAnkiDialogRequest","handleAnkiDialogRequestFromVideoPlayer","blobFile","File","handleAnkiDialogProceed","export","subtitleFile","newCopiedSubtitle","newCopiedSubtitles","save","handleOpenCopyHistory","handleCloseCopyHistory","handleAppBarToggle","fullscreenElement","handleHideSubtitlePlayer","handleVideoPopOut","handleOpenSettings","handleImageDialogClosed","handleCloseSettings","handleDeleteCopyHistoryItem","previous","clip","handleDownloadCopyHistorySectionAsSrt","deduplicated","toISOString","handleSelectCopyHistoryItem","handleAnki","handleAnkiDialogCancel","handleAnkiDialogRewind","subscribeTabs","t1","t2","handleFiles","extensionStartIndex","extractSources","revokeUrls","handleDirectory","fileSystemEntry","webkitGetAsEntry","isDirectory","fileSystemDirectoryEntry","createReader","readEntries","entries","filePromises","unsubscribe","startHeartbeat","syncMessage","handleAutoPauseModeChangedViaBind","oldPlayMode","handleDrop","dataTransfer","allDirectories","handleFileInputChange","handleFileSelector","nonSupSubtitleFiles","filesToSrt","handleDragOver","handleDragEnter","handleDragLeave","handleSourcesLoaded","hash","startsWith","nothingLoaded","effectiveCopyHistoryOpen","ThemeProvider","CssBaseline","onDrop","onDragOver","onDragEnter","onDragLeave","accept","multiple","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","createRoot","querySelector","render","basename"],"mappings":"+VAGO,SAASA,EAAcC,GAC1B,MAAwBC,mBAAS,CAAC,EAAG,IAArC,mBAAOC,EAAP,KAAaC,EAAb,KAeA,OAbAC,2BAAgB,WACZ,SAASC,IACDL,GACAG,EAAQ,CAACG,OAAOC,WAAYD,OAAOE,cAO3C,OAHAF,OAAOG,iBAAiB,SAAUJ,GAClCA,IAEO,kBAAMC,OAAOI,oBAAoB,SAAUL,MACnD,CAACL,IAEGE,E,qCCwEES,EAAb,WAGI,WAAYC,GAAyB,yBAFpBA,gBAEmB,EAChCC,KAAKD,WAAaA,EAJ1B,4CAMI,SACIE,EACAC,EACAC,GAED,IADCC,EACF,wDACQC,EAAWL,KAAKD,WAAWO,aAAaC,KAE9C,IAAKF,EACD,OAAO,aAGX,IAAMG,EAAUR,KAAKS,YAAYR,EAAQC,EAAgBC,GAEzD,OADAO,YAAQL,EAAU,CAAEM,QAASP,GAAcI,GACpC,kBAAME,IAAQE,OAAOP,EAAUG,MApB9C,yBAuBI,SACIP,EACAC,EACAC,GAEA,OAAO,SAACU,GACJ,IAAIX,IAAJ,CAIA,IAAMY,EAAWX,IAEZW,GAILb,EAAOY,EAAOC,OAvC1B,4BA2CI,SAAeC,EAA8Cb,GAAoD,IAArBE,EAAoB,wDACtGC,EAAWL,KAAKD,WAAWiB,WAAWT,KAE5C,IAAKF,EACD,OAAO,aAGX,IAAMG,EAAUR,KAAKiB,kBAAkBF,EAAcb,GAErD,OADAQ,YAAQL,EAAU,CAAEM,QAASP,GAAcI,GACpC,kBAAME,IAAQE,OAAOP,EAAUG,MApD9C,+BAuDI,SAAkBO,EAA8Cb,GAC5D,OAAO,SAACW,GACAX,KAIJa,EAAaF,MA7DzB,gCAiEI,SACIK,EACAhB,GAED,IADCE,EACF,wDACQC,EAAWL,KAAKD,WAAWoB,eAAeZ,KAEhD,IAAKF,EACD,OAAO,aAGX,IAAMG,EAAUR,KAAKoB,sBAAsBF,EAAkBhB,GAE7D,OADAQ,YAAQL,EAAU,CAAEM,QAASP,GAAcI,GACpC,kBAAME,IAAQE,OAAOP,EAAUG,MA9E9C,mCAiFI,SAAsBU,EAAkDhB,GACpE,OAAO,SAACW,GACAX,KAIJgB,EAAiBL,MAvF7B,gCA2FI,SACIQ,EACAnB,EACAoB,EACAC,GAED,IAAD,OADEnB,EACF,wDACQoB,EAAW,SAACX,EAAsBY,GACpC,IAAIvB,IAAJ,CAIA,IAAMwB,EAAYH,IAElB,GAAKG,GAAkC,IAArBA,EAAUC,OAA5B,CAIA,IAAMb,EAAW,EAAKc,kBAAkBH,EAASH,IAAcI,GAE9C,OAAbZ,GAAqBA,EAASe,OAAS,GAAKf,EAASgB,KAAO,GAC5DT,EAAiBR,EAAOC,MAG1BiB,EAAmB/B,KAAKD,WAAWiC,uBAAuBzB,KAC1D0B,EAAejC,KAAKD,WAAWmC,mBAAmB3B,KAClD4B,EAAkB,SAACtB,GAAD,OAA0BW,EAASX,GAAO,IAC5DuB,EAAc,SAACvB,GAAD,OAA0BW,EAASX,GAAO,IAU9D,OARIkB,GACArB,YAAQqB,EAAkB,CAAEpB,QAASP,GAAc+B,GAGnDF,GACAvB,YAAQuB,EAAc,CAAEtB,QAASP,GAAcgC,GAG5C,WACCL,GACArB,IAAQE,OAAOmB,EAAkBI,GAGjCF,GACAvB,IAAQE,OAAOqB,EAAcG,MAtI7C,kDA2II,SACIC,EACAnC,EACAoB,EACAC,GAED,IAAD,OADEnB,EACF,wDACQC,EAAWL,KAAKD,WAAWuC,iCAAiC/B,KAElE,IAAKF,EACD,OAAO,aAGX,IAAMG,EAAU,SAACK,GACb,IAAIX,IAAJ,CAIA,IAAMwB,EAAYH,IAElB,GAAKG,GAAkC,IAArBA,EAAUC,OAA5B,CAIA,IAAMb,EAAW,EAAKyB,iBAAiBjB,IAAcI,QAEpCc,IAAb1B,GAA0BA,EAASe,OAAS,GAAKf,EAASgB,KAAO,GACjEO,EAAmCxB,EAAOC,MAIlD,OADAJ,YAAQL,EAAU,CAAEM,QAASP,GAAcI,GACpC,kBAAME,IAAQE,OAAOP,EAAUG,MA1K9C,8BA6KI,SAAiBiC,EAAcf,GAK3B,IAJA,IACIgB,EADEC,EAAMF,EAERG,EAAUC,OAAOC,iBAEZC,EAAI,EAAGA,EAAIrB,EAAUC,SAAUoB,EAAG,CACvC,IAAMC,EAAItB,EAAUqB,GAEpB,KAAIC,EAAEnB,MAAQ,GAAKmB,EAAElB,IAAM,GAA3B,CAIA,IAAMmB,EAAON,EAAMK,EAAEnB,MAEjBc,GAAOK,EAAEnB,OAASc,EAAMK,EAAElB,KACtBmB,EAAOL,IACPF,EAAkBM,EAClBJ,EAAUK,IAKtB,OAAOP,IAnMf,uCAsMI,SACIQ,EACAhD,GAED,IADCE,EACF,wDACQoB,EAAW,SAACX,EAAsBY,GAChCvB,KAIJgD,EAAwBrC,EAAOY,IAE7B0B,EAAenD,KAAKD,WAAWqD,aAAa7C,KAC5C0B,EAAejC,KAAKD,WAAWsD,YAAY9C,KAC3C+C,EAAc,SAACzC,GAAD,OAA0BW,EAASX,GAAO,IACxDuB,EAAc,SAACvB,GAAD,OAA0BW,EAASX,GAAO,IAU9D,OARIsC,GACAzC,YAAQyC,EAAc,CAAExC,QAASP,GAAckD,GAG/CrB,GACAvB,YAAQuB,EAAc,CAAEtB,QAASP,GAAcgC,GAG5C,WACCe,GACAzC,IAAQE,OAAOuC,EAAcG,GAG7BrB,GACAvB,IAAQE,OAAOqB,EAAcG,MArO7C,kCA0OI,SACImB,EACArD,EACAoB,EACAC,GAED,IAAD,OADEnB,EACF,wDACQoB,EAAW,SAACX,EAAsBY,GACpC,IAAIvB,IAAJ,CAIA,IAAMwB,EAAYH,IAElB,GAAKG,GAAkC,IAArBA,EAAUC,OAA5B,CAIA,IAAMc,EAAOnB,IACPR,EAAW,EAAKc,kBAAkBH,EAASgB,EAAMf,GAEvD,GAAiB,OAAbZ,EAAmB,CACnB,IAAM0C,EAAgB1C,EAAS2C,cAE/BF,EAAe1C,EADG4B,EAAOe,OAI3BzB,EAAmB/B,KAAKD,WAAW2D,+BAA+BnD,KAClE0B,EAAejC,KAAKD,WAAW4D,2BAA2BpD,KAC1D4B,EAAkB,SAACtB,GAAD,OAA0BW,EAASX,GAAO,IAC5DuB,EAAc,SAACvB,GAAD,OAA0BW,EAASX,GAAO,IAU9D,OARIkB,GACArB,YAAQqB,EAAkB,CAAEpB,QAASP,GAAc+B,GAGnDF,GACAvB,YAAQuB,EAAc,CAAEtB,QAASP,GAAcgC,GAG5C,WACCL,GACArB,IAAQE,OAAOmB,EAAkBI,GAGjCF,GACAvB,IAAQE,OAAOqB,EAAcG,MAxR7C,+BA6RI,SAAkBX,EAAkBgB,EAAcf,GAK9C,IAJA,IAAMiB,EAAMF,EACRmB,GAAyB,EACzBhB,EAAUC,OAAOC,iBAEZC,EAAI,EAAGA,EAAIrB,EAAUC,SAAUoB,EAAG,CACvC,IAAMC,EAAItB,EAAUqB,GACdE,EAAOxB,EAAUuB,EAAEnB,MAAQc,EAAMA,EAAMK,EAAEnB,MAE3Ce,GAAWK,IAIXxB,GAAWkB,EAAMK,EAAEnB,OACnBe,EAAUK,EACVW,EAAwBb,IAChBtB,GAAWkB,EAAMK,EAAEnB,QAC3Be,EAAUK,EACVW,EAAwBjB,EAAMK,EAAElB,IAAM+B,KAAKC,IAAI,EAAGf,EAAI,GAAKA,IAInE,OAA+B,IAA3Ba,EACOlC,EAAUkC,GAGd,OAvTf,8BA0TI,SACIL,EACArD,EACAqB,GAED,IADCnB,EACF,wDACQoB,EAAW,SAACX,EAAsBkD,GACpC,IAAI7D,IAAJ,CAIA,IAAMwB,EAAYH,IAElB,GAAKG,GAAkC,IAArBA,EAAUC,OAA5B,CAIA,IAAMqC,EAAgBtC,EAAU,GAAGG,MAAQH,EAAU,GAAG+B,cAExDF,EAAe1C,EADGmD,GAAiBD,EAAW,KAAO,SAInDE,EAAmBjE,KAAKD,WAAWmE,eAAe3D,KAClD4D,EAAmBnE,KAAKD,WAAWqE,eAAe7D,KAClD8D,EAAkB,SAACxD,GAAD,OAA0BW,EAASX,GAAO,IAC5DyD,EAAkB,SAACzD,GAAD,OAA0BW,EAASX,GAAO,IAIlE,OAFAH,YAAQuD,EAAkB,CAAEtD,QAASP,GAAciE,GACnD3D,YAAQyD,EAAkB,CAAExD,QAASP,GAAckE,GAC5C,WACH5D,IAAQE,OAAOqD,EAAkBI,GACjC3D,IAAQE,OAAOuD,EAAkBG,MAzV7C,4BA6VI,SACIC,EACArE,EACAE,GAEA,IAAMC,EAAWL,KAAKD,WAAWyE,YAAYjE,KAE7C,IAAKF,EACD,OAAO,aAGX,IAAMG,EAAU,SAACK,GACTX,KAIJqE,EAAc1D,IAIlB,OADAH,YAAQL,EAAU,CAAEM,QAASP,GAAcI,GACpC,WACHE,IAAQE,OAAOP,EAAUG,MAlXrC,oCAsXI,SACIiE,EACAvE,GAED,IADCE,EACF,wDACQoB,EAAW,SAACX,EAAsBkD,GAChC7D,KAIJuE,EAAqB5D,EAAOkD,IAE1BI,EAAmBnE,KAAKD,WAAW2E,qBAAqBnE,KACxD0D,EAAmBjE,KAAKD,WAAW4E,qBAAqBpE,KACxD8D,EAAkB,SAACxD,GAAD,OAA0BW,EAASX,GAAO,IAC5DyD,EAAkB,SAACzD,GAAD,OAA0BW,EAASX,GAAO,IAUlE,OARIoD,GACAvD,YAAQuD,EAAkB,CAAEtD,QAASP,GAAciE,GAGnDF,GACAzD,YAAQyD,EAAkB,CAAExD,QAASP,GAAckE,GAGhD,WACCL,GACAvD,IAAQE,OAAOqD,EAAkBI,GAGjCF,GACAzD,IAAQE,OAAOuD,EAAkBG,MArZjD,iCA0ZI,SACIM,EACA1E,GAED,IADCE,EACF,wDACQC,EAAWL,KAAKD,WAAW8E,gBAAgBtE,KAEjD,IAAKF,EACD,OAAO,aAGX,IAAMG,EAAU,SAACK,GACTX,KAIJ0E,EAAkB/D,IAGtB,OADAH,YAAQL,EAAU,CAAEM,QAASP,GAAcI,GACpC,WACHE,IAAQE,OAAOP,EAAUG,MA9arC,4CAkbI,SACIsE,EACA5E,GAED,IADCE,EACF,wDACQ2E,EAAY,CACd/E,KAAKD,WAAWiF,0BAA0BzE,KAC1CP,KAAKD,WAAWkF,0BAA0B1E,MAC5C2E,QAAO,SAAClC,GAAD,OAAOA,KAEhB,GAAyB,IAArB+B,EAAUpD,OACV,OAAO,aAYX,IATA,IAAMH,EAAW,SAACX,EAAsBsE,GAChCjF,KAIJ4E,EAAsBjE,EAAOsE,IAE7BC,EAA+C,GAjBrD,WAmBWrC,GACL,IAAMvC,EAAU,SAACK,GAAD,OAA0BW,EAASX,EAAOkC,IAC1DqC,EAASC,KAAK7E,GACdE,YAAQqE,EAAUhC,GAAI,CAAEpC,QAASP,GAAcI,IAH1CuC,EAAI,EAAGA,EAAIgC,EAAUpD,SAAUoB,EAAI,EAAnCA,GAMT,OAAO,WACH,IAAK,IAAIA,EAAI,EAAGA,EAAIgC,EAAUpD,SAAUoB,EAAG,CACvC,IAAMvC,EAAU4E,EAASrC,GACzBrC,IAAQE,OAAOmE,EAAUhC,GAAIvC,OAld7C,2CAudI,SACI8E,EACApF,GAED,IADCE,EACF,wDACQ2E,EAAY,CACd/E,KAAKD,WAAWwF,8BAA8BhF,KAC9CP,KAAKD,WAAWyF,8BAA8BjF,MAChD2E,QAAO,SAAClC,GAAD,OAAOA,KAEhB,GAAyB,IAArB+B,EAAUpD,OACV,OAAO,aAaX,IAVA,IAAMH,EAAW,SAACX,EAAsBsE,GAChCjF,KAIJoF,EAA4BzE,EAAOsE,IAGnCC,EAA+C,GAlBrD,WAoBWrC,GACL,IAAMvC,EAAU,SAACK,GAAD,OAA0BW,EAASX,EAAOkC,IAC1DqC,EAASC,KAAK7E,GACdE,YAAQqE,EAAUhC,GAAI,CAAEpC,QAASP,GAAcI,IAH1CuC,EAAI,EAAGA,EAAI,IAAKA,EAAI,EAApBA,GAMT,OAAO,WACH,IAAK,IAAIA,EAAI,EAAGA,EAAI,IAAKA,EAAG,CACxB,IAAMvC,EAAU4E,EAASrC,GACzBrC,IAAQE,OAAOmE,EAAUhC,GAAIvC,OAxf7C,sBA6fI,SAASiF,EAAwCvF,GAAoD,IAArBE,EAAoB,wDAC1FC,EAAWL,KAAKD,WAAW2F,WAAWnF,KAE5C,IAAKF,EACD,OAAO,aAGX,IAAMG,EAAU,SAACK,GACTX,KAIJuF,EAAO5E,IAIX,OADAH,YAAQL,EAAU,CAAEM,QAASP,GAAcI,GACpC,WACHE,IAAQE,OAAOP,EAAUG,MA9gBrC,2BAkhBI,SAAcmF,EAA6CzF,GAAoD,IAArBE,EAAoB,wDACpGC,EAAWL,KAAKD,WAAW6F,gBAAgBrF,KAEjD,IAAKF,EACD,OAAO,aAGX,IAAMG,EAAU,SAACK,GACTX,KAIJyF,EAAY9E,IAGhB,OADAH,YAAQL,EAAU,CAAEM,QAASP,GAAcI,GACpC,WACHE,IAAQE,OAAOP,EAAUG,MAliBrC,mCAsiBI,SACImF,EACAzF,GAED,IADCE,EACF,wDACQC,EAAWL,KAAKD,WAAW8F,wBAAwBtF,KAEzD,IAAKF,EACD,OAAO,aAGX,IAAMG,EAAU,SAACK,GACTX,KAIJyF,EAAY9E,IAGhB,OADAH,YAAQL,EAAU,CAAEM,QAASP,GAAcI,GACpC,WACHE,IAAQE,OAAOP,EAAUG,QA1jBrC,KC3FqBsF,E,kIACjB,WAAoBC,EAAYC,GAAhC,0FACW,IAAIC,QAAJ,uCAAY,WAAOC,EAASC,GAAhB,eAAAC,EAAA,uDACXC,EAAS,IAAIC,YACVC,OAAP,uCAAgB,WAAOC,GAAP,uBAAAJ,EAAA,kEAEFK,EAAe,IAAIC,aAER,OAAbF,EAAEG,OAJE,uBAKJR,EAAO,IAAIS,MAAM,sCALb,0CASkBH,EAAaI,gBAAgBL,EAAEG,OAAOG,QATxD,OAYR,IAHMC,EATE,OAUFC,EAAW,GAERjE,EAAI,EAAGA,EAAIgE,EAAYE,mBAAoBlE,EAChDiE,EAAS3B,KAAK0B,EAAYG,eAAenE,KAGvCoE,EAASnB,KACRoB,YAAY,CACfC,QAAS,SACTN,YAAa,CACTC,SAAUA,EACVC,iBAAkBF,EAAYE,iBAC9BtF,OAAQoF,EAAYpF,OACpB2F,WAAYP,EAAYO,cAGhCH,EAAOI,UAAY,SAACf,GAChBN,EAAQ,IAAIsB,KAAKhB,EAAEiB,KAAKC,OAAQ,CAAEC,KAAM,eACxCR,EAAOS,aAEXT,EAAOU,QAAU,SAACrB,GAAO,IAAD,EACdsB,EAAK,iBAAGtB,QAAH,IAAGA,OAAH,EAAGA,EAAGsB,aAAN,QAAe,IAAIlB,MAAM,gCAA0BJ,QAA1B,IAA0BA,OAA1B,EAA0BA,EAAGuB,UACjE5B,EAAO2B,GACPX,EAAOS,aAjCH,kDAoCRzB,EAAO,EAAD,IApCE,0DAAhB,sDAuCAE,EAAO2B,kBAAkBjC,GAzCV,2CAAZ,0DADX,2C,gECDW,SAASkC,IACtB,OAAO,IAAIC,OAAO,IAA0B,4C,IC+JzCC,E,kBA7JE,SAASC,EAAkBC,GAAkD,IAE5EC,EAF6CC,EAA8B,wDACzEC,EAAe3E,KAAK4E,MAAMJ,EAAY,KAIxCC,EADAC,EACU1E,KAAK6E,MAAQL,EAAY,IAAQ,GAAM,IAAM,GAE7CG,EAAe,GAG7B,IAAMG,EAAU9E,KAAK4E,MAAMD,EAAe,IAAM,GAC1CI,EAAQ/E,KAAK4E,MAAMD,EAAe,MAExC,OAAII,EAAQ,EACDA,EAAQ,IAAMC,OAAOF,GAASG,SAAS,EAAG,KAAO,IAAMD,OAAOP,GAASQ,SAAS,EAAG,KAAO,IAG9FH,EAAU,IAAME,OAAOP,GAASQ,SAAS,EAAG,KAAO,IAGvD,SAASC,EACZrH,EACAsH,EACAC,EACAC,GAIA,IAFA,IAAIC,EAAaH,EAERjG,EAAIiG,EAAOjG,GAAK,IAGjBqG,EAAW1H,EAFfyH,EAAapG,EAEyBiG,EAAOC,EAAaC,EAAYf,EAAUkB,YAHtDtG,GAU9B,IAFA,IAAIuG,EAAWH,EAENpG,EAAIiG,EAAOjG,GAAKrB,EAAUC,OAAS,IAGpCyH,EAAW1H,EAFf4H,EAAWvG,EAEyBiG,EAAOC,EAAaC,EAAYf,EAAU1G,WAHjCsB,GAQjD,OAAOrB,EAAU6H,MAAMJ,EAAYG,EAAW,GA4E3C,SAASE,EACZC,EACAC,EACAR,GAEA,IAAMxH,EAAY,CAAC+H,GACbE,EAASF,EAAe5H,MAAQ4H,EAAehG,cAErD,GAAIgG,EAAe3H,IAAM4H,EAAc,CACnC,IAAME,EAAiB/F,KAAKgG,IAAIH,EAAcD,EAAe3H,IAAMoH,GACnExH,EAAU2D,KAAK,CACXyE,KAAM,GACNjI,MAAO4H,EAAe3H,IACtBA,IAAK8H,EACLnG,cAAegG,EAAe3H,IAAM6H,EACpCI,YAAaH,EAAiBD,EAC9BxE,MAAOsE,EAAetE,QAI9B,GAAIsE,EAAe5H,MAAQ,EAAG,CAC1B,IAAMmI,EAAkBnG,KAAKC,IAAI,EAAG2F,EAAe5H,MAAQqH,GAC3DxH,EAAUuI,QAAQ,CACdH,KAAM,GACNjI,MAAOmI,EACPlI,IAAK2H,EAAe5H,MACpB4B,cAAeuG,EAAkBL,EACjCI,YAAaN,EAAe5H,MAAQ8H,EACpCxE,MAAOsE,EAAetE,QAI9B,OAAOzD,EAQX,SAAS0H,EACL1H,EACAsH,EACAkB,EACAjB,EACAC,EACAiB,GAEA,IAAIC,EAQJ,OALIA,EADAD,GAAahC,EAAU1G,QAChBuH,EAAQ,EAAItH,EAAUC,OAASD,EAAUsH,EAAQ,GAAK,KAEtDA,EAAQ,GAAK,EAAItH,EAAUsH,EAAQ,GAAK,KAI/CnF,KAAKwG,IAAIH,EAAelB,IAAUC,IACxB,OAATmB,GAAiBvG,KAAKwG,IAAID,EAAKvI,MAAQH,EAAUwI,GAAcrI,QAAUqH,GAyB3E,SAASoB,EAA+BxJ,EAAyByJ,GACpE,IAAM5I,EAASkC,KAAKC,IAAI,EAAGhD,EAASgB,IAAMhB,EAASe,OAEnD,GAAe,IAAXF,EACA,OAAO,EAGX,IAAM6I,EAAe3G,KAAKC,IAAIhD,EAASe,MAAO0I,EAAS,IAGvD,OAFmB1G,KAAKgG,IAAI/I,EAASgB,IAAKyI,EAAS,IAE/BC,GAAgB7I,EAAS,EAG1C,SAAS8I,EAAc/I,GAC1B,OAAOA,EACFwD,QAAO,SAAClC,GAAD,MAAyB,KAAlBA,EAAE8G,KAAKY,UACrBC,KAAI,SAAC3H,GAAD,OAAOA,EAAE8G,QACbc,KAAK,MAGP,SAASC,EAAY/J,EAAyBiI,GACjD,GAAoC,IAAhCA,EAAqBpH,OACrB,OAAOb,EAASgJ,KAGpB,IAAMS,EAAW,CAACzJ,EAASe,MAAOf,EAASgB,KAC3C,OAAO2I,EAAc1B,EAAqB7D,QAAO,SAAClC,GAAD,OAAOsH,EAA+BtH,EAAGuH,OAGvF,SAASO,EAAS/E,EAAYgF,GACjC,IAAMC,EAAMvL,OAAOwL,IAAIC,gBAAgBnF,GACjCK,EAAI+E,SAASC,cAAc,KACjCD,SAASE,KAAKC,YAAYlF,GAC1BA,EAAEmF,MAAMC,QAAU,OAClBpF,EAAEqF,KAAOT,EACT5E,EAAE0E,SAAWY,IAASX,GACtB3E,EAAEuF,QACFV,IAAIW,gBAAgBZ,GACpB5E,EAAEyF,U,SAtFD1D,O,qBAAAA,I,wBAAAA,M,KC3JL,IAAM2D,EAA0B,kBAAM,IAAI5D,GAqB1C,SAAS6D,IACL,IAAMC,EAAyC,CAC3C,wBAAyB,MACzB,yBAA0B,QAE9B,OAAOC,OAAO1L,KAAKyL,GACd9G,OAAOgH,cAAcC,iBACrBxB,KAAI,SAACyB,GAAD,MAAO,CAACA,EAAaJ,EAAYI,OAAe,G,IAGvDC,E,WAYF,WAAYC,EAAkBzK,EAAeC,EAAayK,EAAsBC,EAAgBC,GAAoB,yBAXnGC,WAWkG,OAVlGC,YAUkG,OATlGC,UASkG,OARlGL,kBAQkG,OAPlGM,aAOkG,OANlGC,gBAMkG,OAJ3GC,kBAI2G,OAH3GC,sBAG2G,OAF3GC,gBAE2G,EAC/GjN,KAAK0M,MAAQJ,EAAW,IAAMzI,KAAK4E,MAAM5G,GAAS,IAAMgC,KAAK4E,MAAM3G,GACnE9B,KAAK2M,OAAS9K,EACd7B,KAAK4M,KAAO9K,EACZ9B,KAAKuM,aAAeA,EACpBvM,KAAK6M,QAAUL,EACfxM,KAAK8M,WAAaL,E,sCAGtB,WACI,OAAOzM,KAAK0M,Q,qBAGhB,WACI,OAAO1M,KAAK8M,a,iBAGhB,WACI,OAAO9M,KAAK2M,S,eAGhB,WACI,OAAO3M,KAAK4M,O,2DAGhB,sBAAAxG,EAAA,+EACWpG,KAAK6M,SADhB,gD,+GAIA,sBAAAzG,EAAA,sEACiBpG,KAAKkN,QADtB,wF,+GAIA,qCAAA9G,EAAA,0DACQpG,KAAK+M,aADb,uBAEQ/M,KAAKmN,UAAUnN,KAAK+M,cACpBK,aAAapN,KAAKgN,kBAClBhN,KAAK+M,kBAAevK,EACpBxC,KAAKgN,sBAAmBxK,EALhC,0CASuBxC,KAAKkN,QAT5B,cASUnH,EATV,QAUUsH,EAAQ,IAAIC,OACZC,IAAMtC,IAAIC,gBAAgBnF,GAChCsH,EAAMG,QAAU,OAChBH,EAAMI,OACNzN,KAAK+M,aAAeM,EAdxB,UAgBUA,EAAMK,OAhBhB,QAkBI1N,KAAKgN,iBAAmBW,YAAW,WAC/B,EAAKR,UAAUE,GACf,EAAKN,kBAAevK,EACpB,EAAKwK,sBAAmBxK,KACxBxC,KAAK4M,KAAO5M,KAAK2M,QAAU3M,KAAKuM,aAAe,KAtBvD,iD,6EAyBA,SAAkBc,GACdA,EAAMO,QACN,IAAML,EAAMF,EAAME,IAClBF,EAAME,IAAM,GACZtC,IAAIW,gBAAgB2B,K,0DAGxB,sBAAAnH,EAAA,yDACSpG,KAAKiN,WADd,gCAEuCY,MAAM,cAAgB7N,KAAKyM,UAAY,WAAazM,KAAK6M,SAFhG,8BAE0G9G,OAF1G,OAEQ/F,KAAKiN,WAFb,uCAKWjN,KAAKiN,YALhB,gD,yEAQA,SAAMpL,EAAeC,GAEjB,OAAO9B,O,yBAGX,WACI,OAAO,I,wBAGX,WACI,OAAO,M,KAIT8N,E,WAmBF,WAAYC,EAAYlM,EAAeC,EAAayK,EAAsByB,GAAmB,yBAlB5ED,UAkB2E,OAjB3ErB,WAiB2E,OAhB3EC,YAgB2E,OAf3EC,UAe2E,OAd3EL,kBAc2E,OAb3EyB,aAa2E,OAZ3ElB,gBAY2E,OAX3EmB,sBAW2E,OATpFC,mBASoF,OARpFC,yBAQoF,OAPpFC,yBAOoF,OALpFrB,kBAKoF,OAJpFC,sBAIoF,OAFpFE,WAEoF,EACxF,MAA8CnB,IAA9C,mBAAOkC,EAAP,KAAyBI,EAAzB,KACArO,KAAKiO,iBAAmBA,EACxBjO,KAAK+N,KAAOA,EACZ/N,KAAK0M,MAAQqB,EAAKhD,KAAO,IAAMlJ,EAAQ,IAAMC,EAC7C9B,KAAK2M,OAAS9K,EACd7B,KAAK4M,KAAO9K,EACZ9B,KAAKuM,aAAeA,EACpBvM,KAAKgO,QAAUA,EACfhO,KAAK8M,WAAauB,E,sCAGtB,WACI,OAAOrO,KAAK0M,Q,qBAGhB,WACI,OAAO1M,KAAK8M,a,iBAGhB,WACI,OAAO9M,KAAK2M,S,eAGhB,WACI,OAAO3M,KAAK4M,O,2DAGhB,iCAAAxG,EAAA,+EACW,IAAIH,QAAJ,uCAAoB,WAAOC,EAASC,GAAhB,iBAAAC,EAAA,6DACnBC,EAAS,IAAIC,WADM,SAEJ,EAAKP,OAFD,YAIVvD,KAFPuD,EAFiB,QAKnBI,EAAO,kCAEPE,EAAOiI,cAAcvI,GACrBM,EAAOkI,UAAY,WACf,IAAMzH,EAAST,EAAOS,OAChB0F,EAAS1F,EAAO0H,UAAU1H,EAAO2H,QAAQ,KAAO,GACtDvI,EAAQsG,KAXO,2CAApB,0DADX,2C,+GAkBA,mCAAApG,EAAA,yDACSpG,KAAKkN,MADd,gCAE2BlN,KAAK0O,aAFhC,cAEQ1O,KAAKkN,MAFb,qCAMQlN,KAAK+M,aANb,wBAOQ/M,KAAKmN,UAAUnN,KAAK+M,cACpBK,aAAapN,KAAKgN,kBAClBhN,KAAK+M,kBAAevK,EACpBxC,KAAKgN,sBAAmBxK,EAVhC,4CAcwBxC,KAAK2O,cAAc3O,KAAKkN,OAAO,GAdvD,eAcUG,EAdV,QAeUuB,YAAc,EAfxB,UAgBUvB,EAAMK,OAhBhB,QAiBI1N,KAAK+M,aAAeM,EACpBrN,KAAKgN,iBAAmBW,YAAW,WAC/B,EAAKR,UAAUE,GACf,EAAKL,sBAAmBxK,EACxB,EAAKuK,kBAAevK,KACpBxC,KAAK4M,KAAO5M,KAAK2M,QAAU3M,KAAKuM,aAAe,KAtBvD,iD,+GAyBA,sBAAAnG,EAAA,yDACSpG,KAAKkN,MADd,gCAE2BlN,KAAK0O,aAFhC,OAEQ1O,KAAKkN,MAFb,sBAKuB1K,IAAfxC,KAAKkN,MALb,sBAMc,IAAItG,MAAM,iCANxB,gCASW5G,KAAKkN,OAThB,gD,qHAYA,mCAAA9G,EAAA,0DACQpG,KAAKkO,cADb,uBAEQlO,KAAKmN,UAAUnN,KAAKkO,eACpBd,aAAapN,KAAKoO,qBAClB,UAAApO,KAAKmO,2BAAL,cAAAnO,KAA2B,iCAC3BA,KAAKkO,mBAAgB1L,EACrBxC,KAAKoO,yBAAsB5L,EAC3BxC,KAAKmO,yBAAsB3L,EAPnC,uBAQeA,GARf,gCAWW,IAAIyD,QAAJ,uCAAY,WAAOC,EAASC,GAAhB,eAAAC,EAAA,+EAES,EAAKuI,cAAc,EAAKZ,MAAM,GAFvC,QAELV,EAFK,QAGLwB,UAAN,+BAAAzI,EAAA,MAAkB,WAAOI,GAAP,qBAAAJ,EAAA,sDACdiH,EAAMK,OACAoB,EAAS,EAAKC,eAAe1B,GAC7B2B,EAAW,IAAI9C,cAAc4C,EAAQ,CAAEG,SAAU,EAAKhB,mBACtDiB,EAAqB,GAE3BF,EAASG,gBAAkB,SAAC3I,GACxB0I,EAAO7J,KAAKmB,EAAEiB,OAGd2H,GAAW,EAEfJ,EAASK,OAAS,SAAC7I,GACX4I,GACAlJ,EAAQ,IAAIsB,KAAK0H,EAAQ,CAAEvH,KAAM,EAAKsG,qBAI9Ce,EAASnN,QAET,EAAKsM,oBAAsBhI,EAC3B,EAAK+H,cAAgBb,EACrB,EAAKe,oBAAsBT,YAAW,WAClC,EAAKR,UAAUE,GACf,EAAKa,mBAAgB1L,EACrB,EAAK4L,yBAAsB5L,EAC3B,EAAK2L,yBAAsB3L,EAC3B4M,GAAW,EACXJ,EAASM,OAN+B,oBAOpBR,EAAOS,kBAPa,IAOxC,2BAA6C,SACnCD,QAR8B,kCAUxC,EAAK1C,KAAO,EAAKD,QAAU,EAAKJ,aAAe,KAhCrC,4CAAlB,sDAHW,gDAsCXpG,EAAO,EAAD,IAtCK,yDAAZ,0DAXX,gD,iFAsDA,SAAsBqJ,EAAcC,GAA0D,IAAD,OACnFpC,EAAQ,IAAIC,MAGlB,OAFAD,EAAME,IAAMtC,IAAIC,gBAAgBsE,GAEzB,IAAIvJ,SAAQ,SAACC,EAASC,GACzBkH,EAAMqC,iBAAmB,SAAClJ,GACtB,GAAIiJ,GAAe,EAAKzB,SAAWX,EAAMsC,aAAetC,EAAMsC,YAAYhO,OAAS,EAAG,qBAElE0L,EAAMsC,aAF4D,IAElF,2BAAmC,CAAC,IAAzBvD,EAAwB,QAC/BA,EAAEjN,QAAU,EAAK6O,UAAY5B,EAAEwD,IAH+C,+BAOtFvC,EAAMuB,YAAc,EAAKjC,OAAS,IAClCU,EAAMd,aAAe,EAAKA,aAC1BrG,EAAQmH,S,uBAKpB,SAAkBA,GACdA,EAAMO,QACN,IAAML,EAAMF,EAAME,IAClBF,EAAME,IAAM,GACZtC,IAAIW,gBAAgB2B,K,4BAGxB,SAAuBF,GACnB,IAAIyB,EAUJ,GARmC,oBAAxBzB,EAAMwC,gBACbf,EAASzB,EAAMwC,iBAGmB,oBAA3BxC,EAAMyC,mBACbhB,EAASzB,EAAMyC,yBAGJtN,IAAXsM,EACA,MAAM,IAAIlI,MAAM,uCAGpB,IAfoD,EAe9CmJ,EAAc,IAAIC,YAf4B,cAiBhClB,EAAOmB,kBAjByB,IAiBpD,2BAA6C,SACnCX,QAlB0C,kDAqBhCR,EAAOS,kBArByB,IAqBpD,2BAA6C,CAAC,IAAnCpK,EAAkC,QACrCA,EAAMhG,SACN4Q,EAAYG,SAAS/K,IAvBuB,8BA2BpD,OAAO4K,I,mBAGX,SAAMlO,EAAeC,GACjB,OAAO,IAAIgM,EAAc9N,KAAK+N,KAAMlM,EAAOC,EAAK9B,KAAKuM,aAAcvM,KAAKgO,W,yBAG5E,WACI,OAAO,I,wBAGX,WACI,OAAO,M,KAITmC,E,WAKF,WAAY1I,EAAiBzB,GAA8B,yBAJ1CyB,UAIyC,OAHzCzB,mBAGyC,OAFlDkH,WAEkD,EACtDlN,KAAKyH,KAAOA,EACZzH,KAAKgG,cAAgBA,E,sCAGzB,WACI,OAAOhG,KAAKyH,KAAKsD,O,qBAGrB,WACI,MAAO,Q,iBAGX,WACI,OAAO/K,KAAKyH,KAAK5F,Q,eAGrB,WACI,OAAO7B,KAAKyH,KAAK3F,M,2DAGrB,iCAAAsE,EAAA,+EACW,IAAIH,QAAJ,uCAAoB,WAAOC,EAASC,GAAhB,eAAAC,EAAA,sEAEfC,EAAS,IAAIC,WAFE,KAGnBD,EAHmB,SAGQ,EAAKN,OAHb,wBAGZuI,cAHY,gBAInBjI,EAAOkI,UAAY,WACf,IAAMzH,EAAST,EAAOS,OAChB0F,EAAS1F,EAAO0H,UAAU1H,EAAO2H,QAAQ,KAAO,GACtDvI,EAAQsG,IAPO,kDAUnBrG,EAAO,EAAD,IAVa,0DAApB,0DADX,2C,+GAgBA,sBAAAC,EAAA,sEACUpG,KAAKyH,KAAKiG,OADpB,gD,+GAIA,sBAAAtH,EAAA,yDACSpG,KAAKkN,MADd,4BAE2BpH,EAF3B,SAEmD9F,KAAKyH,KAAK1B,OAF7D,+BAEqE/F,KAAKgG,cAF1E,cAEsCoK,OAFtC,4BAEQpQ,KAAKkN,MAFb,uCAKWlN,KAAKkN,OALhB,iD,yEAQA,SAAMrL,EAAeC,GACjB,OAAO,IAAIqO,EAAanQ,KAAKyH,KAAK8B,MAAM1H,EAAOC,GAAM9B,KAAKgG,iB,yBAG9D,WACI,OAAOhG,KAAKyH,KAAK4I,gB,wBAGrB,WACI,OAAOrQ,KAAKyH,KAAK6I,iB,KAInBC,E,WAMF,WAAYC,EAAkB3O,EAAeC,GAAc,yBAL1C4K,WAKyC,OAJzCC,YAIyC,OAHzCC,UAGyC,OAFzCE,gBAEyC,EACtD9M,KAAK0M,MAAL,UAAgB8D,EAAhB,YAA4B3O,EAA5B,YAAqCC,GACrC9B,KAAK2M,OAAS9K,EACd7B,KAAK4M,KAAO9K,EAH0C,MAIhCiK,IAJgC,mBAInD/L,KAAK8M,WAJ8C,K,sCAO1D,WACI,OAAO9M,KAAK0M,Q,qBAGhB,WACI,OAAO1M,KAAK8M,a,iBAGhB,WACI,OAAO9M,KAAK2M,S,eAGhB,WACI,OAAO3M,KAAK4M,O,2DAGhB,sBAAAxG,EAAA,4DACU,IAAIQ,MAAM,iBADpB,2C,+GAIA,sBAAAR,EAAA,4DACU,IAAIQ,MAAM,iBADpB,2C,+GAIA,sBAAAR,EAAA,4DACU,IAAIQ,MAAM,iBADpB,2C,yEAIA,SAAM/E,EAAeC,GAEjB,OAAO9B,O,yBAGX,WACI,OAAO,I,wBAGX,WACI,OAAO,M,KAIMyQ,E,WAGjB,WAAYhJ,GAAkB,yBAFbA,UAEY,EACzBzH,KAAKyH,KAAOA,E,uCA+BhB,WACI,OAAOzH,KAAKyH,KAAK5F,Q,eAGrB,WACI,OAAO7B,KAAKyH,KAAK3F,M,gBAGrB,WACI,OAAO9B,KAAKyH,KAAKsD,KAAO,IAAM/K,KAAKyH,KAAKgF,Y,yDAG5C,sBAAArG,EAAA,sEACUpG,KAAKyH,KAAKiG,OADpB,gD,iHAIA,sBAAAtH,EAAA,sEACiBpG,KAAKyH,KAAK+E,SAD3B,wF,mHAIA,sBAAApG,EAAA,sEACuBpG,KAAKyH,KAAK1B,OADjC,OAEI+E,EAFJ,OAEmB9K,KAAK+K,MAFxB,gD,yEAKA,WAAmD,IAA7C2F,EAA4C,uDAAzB5E,EACrB,OAAI9L,KAAKyH,gBAAgB0I,GAIG,QAAxBnQ,KAAKyH,KAAKgF,UAHHzM,KAOJ,IAAIyQ,EAAU,IAAIN,EAAanQ,KAAKyH,KAAMiJ,M,mBAGrD,SAAM7O,EAAeC,GACjB,OAAO,IAAI2O,EAAUzQ,KAAKyH,KAAK8B,MAAM1H,EAAOC,M,yBAGhD,WACI,OAAO9B,KAAKyH,KAAK4I,gB,wBAGrB,WACI,OAAOrQ,KAAKyH,KAAK6I,gB,yBA1ErB,SACIK,EACA9O,EACAC,EACAyK,EACAC,EACAC,GAEA,OAAO,IAAIgE,EACP,IAAIpE,EACAsE,EAAiBnC,UAAU,EAAGmC,EAAiBC,YAAY,MAC3D/O,EACAC,EACAyK,EACAC,EACAC,M,sBAKZ,SAAgBsB,EAAYlM,EAAeC,EAAayK,EAAsByB,GAC1E,OAAO,IAAIyC,EAAU,IAAI3C,EAAcC,EAAMlM,EAAOC,EAAKyK,EAAcyB,M,6BAG3E,SAAuBwC,EAAkB3O,EAAeC,GACpD,OAAO,IAAI2O,EAAU,IAAIF,EAAqBC,EAAU3O,EAAOC,Q,KCngBlD+O,E,sFACjB,SACIC,EACAC,EACAC,EACAC,GAEA,OAAO,IAAIhL,SAAQ,SAACC,EAASC,GACzB,IAAM+K,EAAaF,GAAY,EAAI,EAAIA,EAAWF,EAAOK,MACnDC,EAAcH,GAAa,EAAI,EAAIA,EAAYH,EAAOO,OACtDC,EAAQzN,KAAKgG,IAAI,EAAGhG,KAAKgG,IAAIqH,EAAYE,IAE/C,GAAIE,EAAQ,EAAG,CACX,IAAMC,EAAWT,EAAOK,MAAQG,EAC1BE,EAAYV,EAAOO,OAASC,EAClCG,kBAAkBX,EAAQ,CAAEY,YAAaH,EAAUI,aAAcH,EAAWI,cAAe,SACtFC,MAAK,SAACC,GACHhB,EAAOK,MAAQI,EACfT,EAAOO,OAASG,EAChBT,EAAIgB,UAAUD,EAAQ,EAAG,GACzB5L,EAAQ4K,MAEXkB,OAAM,SAACxL,GAAD,OAAOL,EAAOK,WAEzBN,EAAQ4K,U,KCrBlBmB,E,WAOF,WAAYlH,EAAcyB,EAAgBC,GAAoB,yBAN7CC,WAM4C,OAL5CG,aAK4C,OAJ5CC,gBAI4C,OAFrDG,gBAEqD,EACzDjN,KAAK0M,MAAQ3B,EACb/K,KAAK6M,QAAUL,EACfxM,KAAK8M,WAAaL,E,sCAGtB,WACI,OAAOzM,KAAK0M,Q,qBAGhB,WACI,OAAO1M,KAAK8M,a,qBAGhB,WACI,OAAO,I,2DAGX,sBAAA1G,EAAA,+EACWpG,KAAK6M,SADhB,gD,+GAIA,sBAAAzG,EAAA,sEACiBpG,KAAKkN,QADtB,wF,gHAIA,sBAAA9G,EAAA,yDACSpG,KAAKiN,WADd,gCAEuCY,MAAM7N,KAAKkS,YAFlD,8BAE+DnM,OAF/D,OAEQ/F,KAAKiN,WAFb,uCAKWjN,KAAKiN,YALhB,gD,kHAQA,sBAAA7G,EAAA,+EACWpG,KAAKkS,YADhB,gD,4EAIA,WACI,MAAO,cAAgBlS,KAAKyM,UAAY,WAAazM,KAAK6M,Y,KAI5DsF,E,WAOF,WAAYpE,EAAY1F,EAAmB2I,EAAkBC,GAAoB,yBANhElD,UAM+D,OAL/D1F,eAK+D,OAJ/D2I,cAI+D,OAH/DC,eAG+D,OAF/DvE,WAE+D,EAC5E1M,KAAK+N,KAAOA,EACZ/N,KAAK0M,MAAQqB,EAAKhD,KAAO,IAAMlH,KAAK4E,MAAMJ,GAAa,QACvDrI,KAAKqI,UAAYA,EACjBrI,KAAKgR,SAAWA,EAChBhR,KAAKiR,UAAYA,E,sCAGrB,WACI,OAAOjR,KAAK0M,Q,qBAGhB,WACI,MAAO,S,qBAGX,WACI,OAAO,I,2DAGX,iCAAAtG,EAAA,+EACW,IAAIH,QAAJ,uCAAY,WAAOC,EAASC,GAAhB,iBAAAC,EAAA,sEACM,EAAKgM,UADX,OACTtB,EADS,OAETuB,EAAUvB,EAAOwB,UAAU,cACjCpM,EAAQmM,EAAQ7D,UAAU6D,EAAQ5D,QAAQ,KAAO,IAHlC,2CAAZ,0DADX,2C,+GAQA,iCAAArI,EAAA,+EACW,IAAIH,QAAJ,uCAAY,WAAOC,EAASC,GAAhB,SAAAC,EAAA,sEACM,EAAKgM,UADX,cAERG,QAAO,SAACxM,GACE,OAATA,EACAI,EAAO,IAAIS,MAAM,0BAEjBV,EAAQH,KAEb,cARY,2CAAZ,0DADX,2C,kHAaA,4BAAAK,EAAA,sEACyBpG,KAAKoS,UAD9B,cACUtB,EADV,yBAEWA,EAAOwB,aAFlB,gD,kHAKA,iCAAAlM,EAAA,+EACW,IAAIH,QAAJ,uCAAY,WAAOC,EAASC,GAAhB,eAAAC,EAAA,uDACToM,EAAQ,EAAKC,cAAc,EAAK1E,OAEhCc,UAAN,uCAAkB,WAAOrI,GAAP,mBAAAJ,EAAA,0DACR0K,EAAS3F,SAASC,cAAc,WAC/B+F,MAAQqB,EAAME,WACrB5B,EAAOO,OAASmB,EAAMG,aAChB5B,EAAMD,EAAO8B,WAAW,OACzBb,UAAUS,EAAO,EAAG,EAAG1B,EAAOK,MAAOL,EAAOO,UAC7C,EAAKL,SAAW,GAAK,EAAKC,UAAY,GAN5B,wBAOJ4B,EAAU,IAAIhC,EAPV,SAQJgC,EAAQC,OAAOhC,EAAQC,EAAM,EAAKC,SAAU,EAAKC,WAR7C,OASV/K,EAAQ4K,GATE,wBAWV5K,EAAQ4K,GAXE,QAad7F,IAAIW,gBAAgB4G,EAAMjF,KAbZ,4CAAlB,sDAHe,2CAAZ,0DADX,2C,iFAsBA,SAAciC,GACV,IAAMgD,EAAQrH,SAASC,cAAc,SAMrC,OALAoH,EAAMjF,IAAMtC,IAAIC,gBAAgBsE,GAChCgD,EAAMhF,QAAU,OAChBgF,EAAM5D,YAAc5O,KAAKqI,UAAY,IACrCmK,EAAM/E,OAEC+E,M,KAITO,E,WAGF,WAAYvC,EAAkBnI,GAAoB,yBAFjCqE,WAEgC,EAC7C1M,KAAK0M,MAAL,UAAgB8D,EAAhB,YAA4B3M,KAAK4E,MAAMJ,I,sCAG3C,WACI,OAAOrI,KAAK0M,Q,qBAGhB,WACI,MAAO,S,qBAGX,WACI,OAAO,I,oBAGX,WACI,MAAM,IAAI9F,MAAM,mB,qBAGpB,WACI,MAAM,IAAIA,MAAM,mB,kBAGpB,WACI,MAAM,IAAIA,MAAM,qB,KAaHoM,E,WAGjB,WAAYvL,GAAkB,yBAFbA,UAEY,EACzBzH,KAAKyH,KAAOA,E,sCAqBhB,WACI,OAAOzH,KAAKyH,KAAKsD,O,qBAGrB,WACI,OAAO/K,KAAKyH,KAAKgF,Y,qBAGrB,WACI,OAAOzM,KAAKyH,KAAKwL,Y,2DAGrB,sBAAA7M,EAAA,sEACiBpG,KAAKyH,KAAK+E,SAD3B,wF,kHAIA,sBAAApG,EAAA,sEACiBpG,KAAKyH,KAAK4K,UAD3B,wF,+GAIA,sBAAAjM,EAAA,sEACiBpG,KAAKyH,KAAK1B,OAD3B,wF,kHAIA,iCAAAK,EAAA,+EACW,IAAIH,QAAJ,uCAAkB,WAAOC,EAASC,GAAhB,SAAAC,EAAA,2EAEjBqL,kBAFiB,SAEO,EAAK1L,OAFZ,kCAEoB8L,MAAK,SAACqB,GACvC,IAAMpC,EAAS3F,SAASC,cAAc,UACtC0F,EAAOK,MAAQ+B,EAAO/B,MACtBL,EAAOO,OAAS6B,EAAO7B,OACvBP,EAAO8B,WAAW,MAAOb,UAAUmB,EAAQ,EAAG,GAC9CpC,EAAOyB,QAAO,SAACxM,GACPA,EACAG,EAAQH,GAERI,EAAO,8BAEZ,gBAbU,gDAgBjBA,EAAO,EAAD,IAhBW,yDAAlB,0DADX,2C,mHAsBA,sBAAAC,EAAA,sEACuBpG,KAAKyH,KAAK1B,OADjC,OAEI+E,EAFJ,OAEmB9K,KAAKyH,KAAKsD,MAF7B,gD,gFAhEA,SAAkB4F,EAA0BtI,EAAmBmE,EAAgBC,GAC3E,IAAM0G,EACFxC,EAAiBnC,UAAU,EAAGmC,EAAiBC,YAAY,MAC3D,IACA/M,KAAK4E,MAAMJ,GACX,IACAoE,EACJ,OAAO,IAAIuG,EAAM,IAAIf,EAAgBkB,EAAW3G,EAAQC,M,sBAG5D,SAAgBsB,EAAY1F,EAAmB2I,EAAkBC,GAC7D,OAAO,IAAI+B,EAAM,IAAIb,EAAcpE,EAAM1F,EAAW2I,EAAUC,M,6BAGlE,SAAuBT,EAAkBnI,GACrC,OAAO,IAAI2K,EAAM,IAAID,EAAqBvC,EAAUnI,Q,KCtM/C+K,EAAb,4OACI,WAAYpI,EAAaK,GAAzB,eAAAjF,EAAA,sEAC2ByH,MAAM7C,EAAK,CAC9BqI,OAAQ,OACRhI,KAAMiI,KAAKC,UAAUlI,KAH7B,cACUmI,EADV,gBAKiBA,EAASC,OAL1B,mFADJ,iECIMC,EAA6B,CAAC,IAAK,IAAK,IAAK,KAAM,KA0ClD,ICsHKC,EAMAC,EAKAC,GDjICC,GAAb,WAII,WAAYC,GAA8D,IAA9BC,EAA6B,uDAAnB,IAAIZ,EAAe,yBAHxDW,sBAGwD,OAFxDC,aAEwD,EACrEhU,KAAK+T,iBAAmBA,EACxB/T,KAAKgU,QAAUA,EANvB,oFASI,WAAgBC,GAAhB,eAAA7N,EAAA,sEAC2BpG,KAAKkU,eAAe,YAAa,KAAMD,GADlE,cACUT,EADV,yBAEWA,EAAS1M,QAFpB,gDATJ,sHAcI,WAAiBmN,GAAjB,eAAA7N,EAAA,sEAC2BpG,KAAKkU,eAAe,aAAc,KAAMD,GADnE,cACUT,EADV,yBAEWA,EAAS1M,QAFpB,gDAdJ,2HAmBI,WAAsBqN,EAAmBF,GAAzC,eAAA7N,EAAA,sEAC2BpG,KAAKkU,eAAe,kBAAmB,CAAEC,UAAWA,GAAaF,GAD5F,cACUT,EADV,yBAEWA,EAAS1M,QAFpB,gDAnBJ,+HAwBI,WAAwBsN,EAAcH,GAAtC,eAAA7N,EAAA,sEAC2BpG,KAAKkU,eACxB,YACA,CAAEG,MAAOrU,KAAK+T,iBAAiBO,UAAY,IAAMtU,KAAKuU,aAAaH,IACnEH,GAJR,cACUT,EADV,yBAMWA,EAAS1M,QANpB,gDAxBJ,kIAiCI,WAA2BsN,EAAcH,GAAzC,eAAA7N,EAAA,sEAC2BpG,KAAKkU,eACxB,YACA,CAAEG,MAAOrU,KAAK+T,iBAAiBO,UAAY,IAAMtU,KAAKuU,aAAaH,IACnEH,GAJR,cACUT,EADV,yBAMWA,EAAS1M,QANpB,gDAjCJ,mFA0CI,SAAqBuN,GAGjB,IAFA,IAAIG,EAAU,GAELzR,EAAI,EAAGA,EAAIsR,EAAM1S,SAAUoB,EAAG,CACnC,IAAM0R,EAAOJ,EAAMtR,GACf2Q,EAA2BgB,SAASD,GACpCD,GAAO,YAASC,GAEhBD,GAAWC,EAInB,MAAM,IAAN,OAAWD,EAAX,OAtDR,sEAyDI,WAAwBP,GAAxB,eAAA7N,EAAA,sEAC2BpG,KAAKkU,eAAe,oBAAqB,KAAMD,GAD1E,cACUT,EADV,yBAEWA,EAAS1M,QAFpB,gDAzDJ,kHA8DI,WACIgD,EACA6K,EACAC,EACAC,EACAT,EACA5E,EACAxE,EACA8J,EACAC,EACAC,EACAf,GAXJ,+CAAA7N,EAAA,sDAqBI,GARM6O,EAAS,GAEfjV,KAAKkV,aAAaD,EAAQjV,KAAK+T,iBAAiBoB,cAAerL,GAAM,GACrE9J,KAAKkV,aAAaD,EAAQjV,KAAK+T,iBAAiBqB,gBAAiBT,GAAY,GAC7E3U,KAAKkV,aAAaD,EAAQjV,KAAK+T,iBAAiBO,UAAWF,GAAM,GACjEpU,KAAKkV,aAAaD,EAAQjV,KAAK+T,iBAAiBsB,YAAa7F,GAAQ,GACrExP,KAAKkV,aAAaD,EAAQjV,KAAK+T,iBAAiBuB,SAAUtK,GAAK,GAE3D8J,EACA,UAA8B7I,OAAO1L,KAAKuU,GAA1C,eAAWS,EAAmD,KAC1DvV,KAAKkV,aACDD,EACAjV,KAAK+T,iBAAiByB,iBAAiBD,GACvCT,EAAkBS,IAClB,GA3BhB,GAgCUE,EAAc,CAChBC,KAAM,CACFC,SAAU3V,KAAK+T,iBAAiB6B,KAChCzB,UAAWnU,KAAK+T,iBAAiB8B,SACjCd,KAAMA,EACNe,QAAS,CACLC,gBAAgB,EAChBC,eAAgB,OAChBC,sBAAuB,CACnBN,SAAU3V,KAAK+T,iBAAiB6B,KAChCM,eAAe,MAMzBC,EAAe,QAATnB,EACNoB,EAAsB,eAATpB,GAEfhV,KAAK+T,iBAAiBsC,aAAczB,EAnD5C,oBAoDc0B,EAAgBtW,KAAKuW,kBAAkB3B,EAAU7J,OAEnDoL,IAAOC,EAtDnB,6BAuDoCpW,KAvDpC,KAuDyDsW,EAvDzD,UAuD8E1B,EAAUpI,SAvDxF,gCAuDkGyH,EAvDlG,eAuDyCuC,gBAvDzC,kCAuDkBhG,EAvDlB,OAwDiB1J,OACL9G,KAAKkV,aAAaD,EAAQjV,KAAK+T,iBAAiBsC,WAAhD,iBAAsE7F,EAAtE,MAAmF,GAzD/F,oCA4D0B8F,EA5D1B,UA6D4B1B,EAAUpI,SA7DtC,yBA8DwB,CAACxM,KAAK+T,iBAAiBsC,YAHnCZ,EAAOC,KAAP,MA3DZ,CA4DgBe,SA5DhB,KA6DgBhP,KA7DhB,KA8DgBwN,OA9DhB,kBAmEQjV,KAAK+T,iBAAiB2C,aAAc7B,EAnE5C,oBAoEcyB,EAAgBtW,KAAKuW,kBAAkB1B,EAAM9J,OAE/CoL,IAAOC,EAtEnB,6BAuEoCpW,KAvEpC,KAuEyDsW,EAvEzD,UAuE8EzB,EAAMrI,SAvEpF,iCAuE8FyH,EAvE9F,eAuEyCuC,gBAvEzC,mCAuEkBhG,EAvElB,OAwEiB1J,OACL9G,KAAKkV,aACDD,EACAjV,KAAK+T,iBAAiB2C,WAF1B,yBAGsBlG,EAHtB,aAII,GA7EhB,qCAiF0B8F,EAjF1B,UAkF4BzB,EAAMrI,SAlFlC,2BAmFwB,CAACxM,KAAK+T,iBAAiB2C,YAHnCjB,EAAOC,KAAP,QAhFZ,CAiFgBe,SAjFhB,MAkFgBhP,KAlFhB,MAmFgBwN,OAnFhB,eAwFIQ,EAAOC,KAAP,OAAwBT,EAxF5B,MA0FYD,EA1FZ,OA2Fa,QA3Fb,SA6Fa,eA7Fb,SAyIa,YAzIb,2CA4F0BhV,KAAKkU,eAAe,cAAeuB,EAAQxB,GA5FrE,wCA4FsFnN,QA5FtF,yBA+FsB9G,KAAKkU,eAAe,YAAa,CAAEG,MAAO,WAAaJ,GA/F7E,WAkGuC,KAJrB0C,EA9FlB,OAgGc7P,OAAO8P,QAEOjV,OAlG5B,uBAmGsB,IAAIiF,MAAM,iCAnGhC,eAsGkBiQ,EAAaF,EAAYA,EAAYhV,OAAS,GACpD8T,EAAOC,KAAP,GAAoBmB,EAvGhC,UAwGuC7W,KAAKkU,eAAe,YAAa,CAAE4C,MAAO,CAACD,KAxGlF,cAwGkBE,EAxGlB,QA0G6BjQ,OAAOnF,OAAS,GAAKoV,EAAajQ,OAAO,GAAGkQ,SAAWH,GA1GpF,wBA2GsBI,EAAOF,EAAajQ,OAAO,GAG7B9G,KAAK+T,iBAAiBoB,eACtB8B,EAAKhC,QAC8D,kBAAnE,UAAOgC,EAAKhC,OAAOjV,KAAK+T,iBAAiBoB,sBAAzC,aAAO,EAAkD+B,QACU,kBAA5DzB,EAAOC,KAAKT,OAAOjV,KAAK+T,iBAAiBoB,iBAEhDM,EAAOC,KAAKT,OAAOjV,KAAK+T,iBAAiBoB,eAAiBnV,KAAKmX,mBAC3D1B,EAAOC,KAAKT,OAAOjV,KAAK+T,iBAAiBoB,eACzC8B,EAAKhC,OAAOjV,KAAK+T,iBAAiBoB,eAAe+B,QArHzE,UAyHsBlX,KAAKkU,eAAe,mBAAoBuB,EAAQxB,GAzHtE,WA2HqBjU,KAAK+T,iBAAiBO,WAAc2C,EAAKhC,OA3H9D,0CA4H2BgC,EAAKD,QA5HhC,YA+HsB1C,EAAY2C,EAAKhC,OAAOjV,KAAK+T,iBAAiBO,aAEjCA,EAAU4C,MAjI7C,0CAkI2BD,EAAKD,QAlIhC,iCAqIuB1C,EAAU4C,OArIjC,cAwIkB,IAAItQ,MAAM,yEAxI5B,yBA0I0B5G,KAAKkU,eAAe,UAAWuB,EAAQxB,GA1IjE,wCA0IkFnN,QA1IlF,cA4IkB,IAAIF,MAAM,wBAA0BoO,GA5ItD,iDA9DJ,qGA8MI,SAAqBC,EAAamC,EAA+BF,EAA2BG,GACxF,GAAKD,GAAcF,EAAnB,CAIA,IAAII,EAAWD,EAAYH,EAAMK,MAAM,MAAM3M,KAAK,QAAUsM,EACtDM,EAAgBvC,EAAOmC,GAEzBI,IACAF,EAAWE,EAAgB,OAASF,GAGxCrC,EAAOmC,GAAaE,KA1N5B,+BA6NI,SAA0BvM,GACtB,OAAOW,IAASX,EAAM,CAAE0M,YAAa,QA9N7C,gCAiOI,SAA2BC,EAAkBC,GAKzC,IAJA,IAAMC,EAAeC,OAAO,uBAAwB,MAC9CC,EAA4BH,EAASI,QAAQ,OAAQ,IACvDC,EAAYN,IAEH,CACT,IAAMO,EAAQL,EAAaM,KAAKJ,GAEhC,GAAc,OAAVG,GAAkBA,EAAMtW,OAAS,EACjC,MAGJqW,EAAYA,EAAUD,QAAQE,EAAM,GAAIA,EAAM,IAGlD,OAAOD,IAhPf,oEAmPI,WAA8BjN,EAAcyB,EAAgByH,GAA5D,0FACWjU,KAAKkU,eAAe,iBAAkB,CAAEuC,SAAU1L,EAAMtD,KAAM+E,GAAUyH,IADnF,gDAnPJ,8HAuPI,WAA6BkE,EAAgB1C,EAAaxB,GAA1D,gFACU5I,EAAY,CACd8M,OAAQA,EACRC,QAAS,GAGT3C,IACApK,EAAI,OAAaoK,GAPzB,SAUuBzV,KAAKgU,QAAQnG,MAAMoG,GAAkBjU,KAAK+T,iBAAiBE,eAAgB5I,GAVlG,YAUUoI,EAVV,QAYa3L,MAZb,sBAac,IAAIlB,MAAM6M,EAAK3L,OAb7B,gCAgBW2L,GAhBX,gDAvPJ,mE,SCsHYE,O,eAAAA,I,mCAAAA,I,oCAAAA,M,cAMAC,O,qBAAAA,I,kBAAAA,M,cAKAC,O,mBAAAA,I,yBAAAA,I,0BAAAA,Q,mBClKCwE,GAAb,WASI,WAAY3W,GAA0D,IAA1CoU,EAAyC,uDAAJ,GAI7D,GAJiE,yBALpDwC,UAKoD,OAHpDC,cAGoD,OAFpDzC,aAEoD,EACjE9V,KAAKsY,KAAO,IAAIE,KAChBxY,KAAK8V,QAAUA,EAEXA,EAAQ2C,iBAAmB3C,EAAQ4C,iBAAkB,CACrD,IAAIC,EACJ3Y,KAAKuY,SAAW,IAAIC,KAEhB9W,EAAUC,OAAS,GAAKD,EAAU,GAAGG,MAAQ,GAC7C7B,KAAKuY,SAASK,OAAO,CAAC,EAAGlX,EAAU,GAAGG,MAAQ,GAAIH,EAAU,IALX,oBAQrCA,GARqC,IAQrD,2BAA2B,CAAC,IAAjBsB,EAAgB,QACvBhD,KAAKsY,KAAKM,OAAO,CAAC5V,EAAEnB,MAAOmB,EAAElB,KAAMkB,QAEtBR,IAATmW,GAAsBA,EAAK7W,IAAMkB,EAAEnB,OACnC7B,KAAKuY,SAASK,OAAO,CAACD,EAAK7W,IAAM,EAAGkB,EAAEnB,MAAQ,GAAI8W,GAGtDA,EAAO3V,GAf0C,mCAiBlD,CAAC,IAAD,gBACatB,GADb,IACH,2BAA2B,CAAC,IAAjBsB,EAAgB,QACvBhD,KAAKsY,KAAKM,OAAO,CAAC5V,EAAEnB,MAAOmB,EAAElB,KAAMkB,IAFpC,gCA9Bf,+CAyCI,SAAYqF,GACR,IAEIwQ,EACAC,EACAC,EACAC,EALEzO,EAAyB,CAAClC,EAAWA,GACrC4Q,EAAUjZ,KAAKsY,KAAKY,OAAO3O,GAMjC,GAAuB,IAAnB0O,EAAQtX,QACR,QAAsBa,IAAlBxC,KAAKuY,SAAwB,CAE7B,IAAMY,EAA2B,GAMjC,GALAN,EAAY7Y,KAAKuY,SAASW,OAAO3O,GAAU,SAACvH,EAAGD,GAE3C,OADAoW,EAAa9T,KAAKtC,GACXC,KAGP6V,EAAUlX,OAAS,GAAK3B,KAAK8V,QAAQ4C,iBAAkB,CACvD,IAAMU,EAAYD,EAAa,GAAGE,KAAO,EACzCP,EAAa9Y,KAAKsY,KAAKY,OAAO,CAACE,EAAWA,WAG/C,QAA0C5W,IAAtCxC,KAAK8V,QAAQwD,qBAAoC,CAAC,IAAD,gBACxCL,GADwC,IACxD,2BAAyB,CAAC,IAAfjW,EAAc,QASrB,QARwBR,IAApBwW,GAAiChW,EAAElB,IAAMuG,EAAYrI,KAAK8V,QAAQwD,uBAClEN,EAAkBhW,QAGCR,IAAnBuW,GAAgC1Q,EAAYrI,KAAK8V,QAAQwD,qBAAuBtW,EAAEnB,QAClFkX,EAAiB/V,QAGER,IAAnBuW,QAAoDvW,IAApBwW,EAChC,OAXgD,+BAgB5D,MAAO,CAAEC,UAASJ,YAAWC,aAAYC,iBAAgBC,sBA/EjE,oBAqCI,WACI,OAAOX,EAAmBkB,4BAtClC,KAAalB,GACFkB,wBAA0B,IAAIlB,GAAmB,I,IChBvCmB,G,iDACTC,wB,OACAC,yB,OAERC,sB,OACAC,uB,OACAC,kB,qDAEA,SAAgB/Y,GAA0B,IAAD,IACjCA,EAASgB,OAAT,UAAiB9B,KAAK0Z,2BAAtB,aAAiB,EAA0B5X,OAI/C,UAAA9B,KAAK4Z,yBAAL,cAAA5Z,MACAA,KAAK0Z,oBAAsB5Y,K,4BAG/B,SAAeA,GAA0B,IAAD,IAChCA,EAASe,SAAT,UAAmB7B,KAAKyZ,0BAAxB,aAAmB,EAAyB5X,SAIhD,UAAA7B,KAAK2Z,wBAAL,cAAA3Z,MACAA,KAAKyZ,mBAAqB3Y,K,mBAG9B,WACId,KAAKyZ,wBAAqBjX,EAC1BxC,KAAK0Z,yBAAsBlX,M,mDCzB7BsX,GAAiBC,YAAW,CAC9BC,KAAM,CACFxO,QAAS,OACTyO,eAAgB,SAChBC,SAAU,QACVC,IAAK,GACLhJ,MAAO,OACPiJ,cAAe,OACfC,OAAQ,OAYD,SAASC,GAAMC,GAC1B,IAAMC,EAAUV,KAShB,OAPAW,qBAAU,WACN,GAAIF,EAAMG,KAAM,CACZ,IAAMC,EAAUhN,WAAW4M,EAAMK,QAASL,EAAMM,kBAChD,OAAO,kBAAMzN,aAAauN,OAE/B,CAACJ,EAAMG,KAAMH,EAAMM,iBAAkBN,EAAMK,UAG1C,sBAAKE,UAAWN,EAAQR,KAAxB,SACI,eAACe,GAAA,EAAD,CAAMC,GAAIT,EAAMG,KAAhB,SACI,eAAC,KAAD,CAAUO,SAAUV,EAAMU,SAA1B,SAAqCV,EAAMW,e,iDClB5C,SAASC,GAAT,GAAgF,IAAxDpG,EAAuD,EAAvDA,KAAMqG,EAAiD,EAAjDA,aAAiBb,EAAgC,mBAC1F,EAA0Bnb,mBAAS,IAAnC,mBAAO8X,EAAP,KAAcmE,EAAd,KAEAZ,qBAAU,WACa1F,EAAKnK,KAAK,QAEVsM,GACfmE,EAAStG,EAAKnK,KAAK,SAExB,CAACsM,EAAOnC,IAEX,IAAMuG,EAAeC,uBAAY,SAAC/U,GAC9B,IAAIgV,EAAehV,EAAEG,OAAOuQ,MAGxBA,EAAMvV,OAAS6Z,EAAa7Z,QAC5BuV,EAAMxC,SAAS8G,IACfA,EAAaC,SAAS,OAGtBD,EAAeA,EAAahN,UAAU,EAAGgN,EAAa7Z,OAAS,IAInE,IAAM+Z,EAxCd,SAA+BxE,GAC3B,IAD0C,EACpCyE,EAAYzE,EAAMK,MAAM,KAAK3M,KAAK,IAAI2M,MAAM,KAC5CxC,EAAO,GAF6B,cAIxB4G,GAJwB,IAI1C,2BAA6B,CAAC,IAAnBC,EAAkB,QACzB7G,EAAK1P,KAAKuW,EAAIlR,SALwB,8BAQ1C,OAAOqK,EAgCa8G,CAAsBL,GACtCH,EAASK,EAAQ9Q,KAAK,OACtBwQ,EAAaM,KACd,CAACxE,EAAOkE,IAEX,OACI,eAACU,GAAA,EAAD,2BACQvB,GADR,IAEIrD,MAAOA,EACP6E,SAAUT,K,4CCzChBU,GAAYjC,cAAW,SAACkC,GAAD,MAAY,CACrCpH,MAAO,kBAAyC,CAC5C1D,MADG,EAAGA,MAENE,OAFG,EAAUA,OAGb6K,eAAgB,gBA4BT,SAASC,GAAT,GAAuD,IAM9DC,EAN8B1B,EAA+B,EAA/BA,KAAM7F,EAAyB,EAAzBA,MAAO+F,EAAkB,EAAlBA,QAC/C,EAA8Bxb,qBAA9B,mBAAOiT,EAAP,KAAgBgK,EAAhB,KACA,EAA0Bjd,mBAAiB,GAA3C,mBAAO+R,EAAP,KAAcmL,EAAd,KACA,EAA4Bld,mBAAiB,GAA7C,mBAAOiS,EAAP,KAAekL,EAAf,KACA,EA3BJ,WACI,MAAwBnd,mBAAS,CAAC,EAAG,IAArC,mBAAOC,EAAP,KAAaC,EAAb,KAaA,OAXAC,2BAAgB,WACZ,SAASC,IACLF,EAAQ,CAACG,OAAOC,WAAYD,OAAOE,cAMvC,OAHAF,OAAOG,iBAAiB,SAAUJ,GAClCA,IAEO,kBAAMC,OAAOI,oBAAoB,SAAUL,MACnD,IAEIH,EAa6BH,GAApC,mBAAOsd,EAAP,KAAoBC,EAApB,KAKIL,EADAjL,EAAQ,GAAKE,EAAS,EACRxN,KAAKgG,IAAI,EAAGhG,KAAKgG,IAAI2S,GAAe,EAAIrL,GAAQsL,GAAgB,EAAIpL,KAEpE,EAGlB,IAAMmJ,EAAUwB,GAAU,CAAE7K,MAAOA,EAAQiL,EAAa/K,OAAQA,EAAS+K,IAsBzE,OApBA3B,qBAAU,WAAM,4CAEZ,8BAAArU,EAAA,yDACSyO,EADT,iEAK0BA,EAAMxC,UALhC,OAKUA,EALV,QAMUqK,EAAM,IAAI1J,OACZzM,OAAS,WACT+V,EAASI,EAAIvL,OACboL,EAAUG,EAAIrL,QACdgL,EAAWhK,IAEfqK,EAAInP,IAAM8E,EAZd,2CAFY,wBACZgK,OAAW7Z,GADC,mCAiBZma,KACD,CAAC9H,IAECA,GAAUxC,EAKX,eAACuK,GAAA,EAAD,CAAQlC,KAAMA,EAAME,QAASA,EAAS5J,SAAS,KAA/C,SACI,eAAC6L,GAAA,EAAD,UACI,eAACC,GAAA,EAAD,CACIhC,UAAWN,EAAQ3F,MACnBA,MAAOxC,EACP0K,MAAOlI,EAAM9J,KACbQ,MAAO,CAAE4F,MAAOA,EAAQiL,EAAa/K,OAAQA,EAAS+K,SAV3D,K,mUCxEA,SAASY,GAAT,GAAwE,IAA3Clc,EAA0C,EAA1CA,SAAUmc,EAAgC,EAAhCA,eAAgBC,EAAgB,EAAhBA,MAClE,QAA2B1a,IAAvB1B,EAASqc,UACT,OAAO,KAGX,IACMhM,EADc+L,EAAQD,EAAkBnc,EAASqc,UAAUC,OAAOjM,MAC7CrQ,EAASqc,UAAUtI,MAAM1D,MAEpD,OACI,sBAAK5F,MAAO,CAAEyF,SAAUG,GAAxB,SACI,sBAAK5F,MAAO,CAAE4F,MAAO,QAAUkM,IAAI,WAAW9P,IAAKzM,EAASqc,UAAU9K,YCqBlF,IAAM2J,GAAYjC,MAAW,SAACkC,GAAD,MAAY,CACrCjC,KAAM,CACF,uBAAwB,CACpBsD,aAAcrB,EAAMsB,QAAQ,KAGpCR,MAAO,CACHS,SAAU,GAEdC,WAAY,CACRC,OAAQ,UACR,UAAW,CACPA,OAAQ,YAGhBC,kBAAmB,CACf,yBAA0B,CACtBC,UAAW,wBAmCvB,SAASC,GAA6BC,EAAwCC,GAC1E,IAAMC,EAAsB,GAE5B,OAAOF,EAAcpc,UAChBwD,QAAO,SAAClC,GAAD,MAAyB,KAAlBA,EAAE8G,KAAKY,aAAiClI,IAAhBQ,EAAEma,aACxCxS,KAAI,SAAC3H,GACF,OAAIA,EAAEnB,SAASmc,EACJ,MAGXA,EAAehb,EAAEnB,QAAS,EAEnB,CACHqV,MAAOlU,EAAEnB,MACToc,MAAM,GAAD,OAAKjb,EAAE8G,KAAKY,OAAO8D,UAAU,EAAG3K,KAAKgG,IAAI7G,EAAE8G,KAAKnI,OAAQ,IAAxD,YAGZuD,QAAO,SAACgZ,GAAD,OAAgC,OAATA,KAC9BhZ,QAAO,SAACgZ,GAAD,OAAuBA,EAAMhH,OAAS6G,EAAS,IAAMG,EAAMhH,OAAS6G,EAAS,MAG7F,SAASI,GAAuBC,GAC5B,OAAOhW,EAAkBgW,GAAI,GASjC,SAASC,GAAT,GAAmF,IAApDnD,EAAmD,EAAnDA,SAAUR,EAAyC,EAAzCA,KAAMxD,EAAmC,EAAnCA,MAC3C,OACI,eAACoH,GAAA,EAAD,CAAS5D,KAAMA,EAAM6D,gBAAiB,EAAGC,UAAU,MAAMzB,MAAO7F,EAAhE,SACKgE,IAUb,IAAMuD,GAAwB1E,MAAW,SAACkC,GAAD,MAAY,CACjDjC,KAAM,CACFsD,aAAcrB,EAAMsB,QAAQ,GAC5BmB,QAASzC,EAAMsB,QAAQ,GACvBoB,gBAAiB1C,EAAM2C,QAAQzG,OAAO0G,wBAI9C,SAASC,GAAT,GAAwE,IAAhDC,EAA+C,EAA/CA,kBAAmB5N,EAA4B,EAA5BA,MACjCqJ,EAAUiE,KAEhB,OAAiC,IAA7BM,EAAkBpd,QAAgBwP,GAAS,EACpC,KAIP,eAAC6N,GAAA,EAAD,CAAOC,UAAW,EAAGnE,UAAWN,EAAQR,KAAxC,SACK+E,EAAkBpU,KAAI,SAAC3H,EAAGgG,GACvB,OAAO,eAACgU,GAAD,CAA+BC,eAAgB9L,EAAOrQ,SAAUkC,EAAGka,MAAO,GAAlDlU,QAM/C,IAAMkW,GAAwBC,KAAW,CAErCnF,KAAM,CACF4D,UAAW,qBAHWuB,CAK3BC,MAyDI,SAASC,GAAT,GA2Bc,IA1BjB3E,EA0BgB,EA1BhBA,KACA4E,EAyBgB,EAzBhBA,SACMC,EAwBU,EAxBhBzV,KACA0V,EAuBgB,EAvBhBA,UACAC,EAsBgB,EAtBhBA,SACAC,EAqBgB,EArBhBA,SACAC,EAoBgB,EApBhBA,YACAC,EAmBgB,EAnBhBA,eACAC,EAkBgB,EAlBhBA,WACWC,EAiBK,EAjBhBlL,UACAC,EAgBgB,EAhBhBA,MACQkL,EAeQ,EAfhBvQ,OACKwQ,EAcW,EAdhBhV,IACA8S,EAagB,EAbhBA,cACAmC,EAYgB,EAZhBA,aACAlM,EAWgB,EAXhBA,iBACAmM,EAUgB,EAVhBA,KACYC,EASI,EAThBxL,WACMyL,EAQU,EARhBhM,KACmBiM,EAOH,EAPhBvL,kBACmBwL,EAMH,EANhBC,kBAC2BC,EAKX,EALhBC,0BAC0BC,EAIV,EAJhBC,yBACoCC,EAGpB,EAHhBC,mCACqCC,EAErB,EAFhBC,oCACAC,EACgB,EADhBA,SAEMxG,EAAUwB,KAChB,EAAoC5c,mBAAiB,IAArD,mBAAOuV,EAAP,KAAmBsM,EAAnB,KACA,EAAwB7hB,mBAAiB,IAAzC,mBAAO0K,EAAP,KAAaoX,EAAb,KACA,EAAwB9hB,mBAAiB,IAAzC,mBAAOgV,EAAP,KAAa+M,EAAb,KACA,EAAgD/hB,qBAAhD,mBAAOgiB,EAAP,KAAyBC,EAAzB,KACA,EAA4BjiB,mBAAQ,OAAS2gB,QAAT,IAASA,IAAiB,IAA9D,mBAAOvQ,GAAP,KAAe8R,GAAf,KACA,GAAwBliB,mBAAmB2U,EAAiBgB,MAA5D,qBAAOA,GAAP,MAAawM,GAAb,MACA,GAAsBniB,mBAAQ,OAAS4gB,QAAT,IAASA,IAAc,IAArD,qBAAOhV,GAAP,MAAYwW,GAAZ,MACA,GAA4CpiB,mBAAgB,IAA5D,qBAAOqiB,GAAP,MAAuBC,GAAvB,MACA,GAA0CtiB,mBAAiB,GAA3D,qBAAOuiB,GAAP,MAAsBC,GAAtB,MACA,GAAkDxiB,mBAAoC,IAAtF,qBAAO0V,GAAP,MAA0B+M,GAA1B,MACA,GAAkDziB,qBAAlD,qBAAOmhB,GAAP,MAA0BuB,GAA1B,MACA,GAAkD1iB,mBAA0B,IAA5E,qBAAO2f,GAAP,MAA0BgD,GAA1B,MACA,GAAgE3iB,qBAAhE,qBAAOuhB,GAAP,MAAiCqB,GAAjC,MACA,GAAgF5iB,qBAAhF,qBAAO6iB,GAAP,MAAyCC,GAAzC,MACA,GAAkE9iB,qBAAlE,qBAAOqhB,GAAP,MAAkC0B,GAAlC,MACA,GAA4C/iB,qBAA5C,qBAAOgjB,GAAP,MAAuBC,GAAvB,MACA,GAAoFjjB,qBAApF,qBAAOyhB,GAAP,MAA2CyB,GAA3C,MACA,GAAsFljB,qBAAtF,qBAAO2hB,GAAP,MAA4CwB,GAA5C,MACA,GAA0BnjB,mBAAiB,GAA3C,qBAAO+R,GAAP,MAAcmL,GAAd,MACA,GAAkCld,qBAAlC,qBAAOwV,GAAP,MAAkB4N,GAAlB,MACMC,GAAoBlH,uBAAY,SAACmH,GAA0B,IAAD,EAC5DpG,GAAQ,iBAACoG,QAAD,IAACA,OAAD,EAACA,EAASC,wBAAwBxR,aAAlC,QAA2C,KACpD,IAEC6P,IACAA,EAAS4B,QAAU,CACf9Y,OACAgU,gBACAnJ,aACAP,OACA5E,UACAxE,OACA8J,qBACA6L,4BACAF,6BACAI,sCACAE,uCACAR,uBAIR,IAAMsC,GAA2BtH,uBAC7B,SAACgF,GACG,OAAO9V,EACHqT,EAAepc,UAAUwD,QAAO,SAAClC,GAAD,OAAOsH,EAA+BtH,EAAGud,SAGjF,CAACzC,IAGLrD,qBAAU,WACNyG,EAAO,OAAC3B,QAAD,IAACA,IAAe,IACvB0B,EAAa,OAACd,QAAD,IAACA,IAAqB,IACnCgB,EAAO,OAACf,QAAD,IAACA,IAAe,IACvBkB,GAAS,OAACvB,QAAD,IAACA,IAAiB,IAC3ByB,GAAM,OAACxB,QAAD,IAACA,IAAc,IACrB0B,GAAkB,IAClBG,GAAoB,OAACxB,QAAD,IAACA,IAA4B,MAClD,CAACd,EAAaQ,EAAeI,EAAmBC,EAAaC,EAA0BL,IAE1FvF,qBAAU,WACN8G,GAAQxN,EAAiBgB,QAC1B,CAAChB,EAAiBgB,OAErB0F,qBAAU,WACN,IAAM8F,EACFD,GACCxC,GAAiB,CAACA,EAActa,cAAesa,EAAcgF,mBAC9DtgB,EACEie,EACD3C,GAhQb,SAA2CA,GACvC,IAAI9U,EAAQ8U,EAAcpc,UAAUqhB,WAAU,SAAC/f,GAAD,OAAOA,EAAEnB,QAAUic,EAActa,iBAC/EwF,GAAmB,IAAXA,EAAe8U,EAAcpc,UAAUC,OAAS,EAAIqH,EAE5D,IAJ+E,EAIzEga,EAAqBja,EACvB+U,EAAcpc,UACdsH,EAToC,EACD,KAanCa,EAAM,KACN/F,EAAM,KAZqE,cAc/Dkf,GAd+D,IAc/E,2BAAoC,CAAC,IAA1BhgB,EAAyB,SACpB,OAAR6G,GAAgB7G,EAAEnB,MAAQgI,KAC1BA,EAAM7G,EAAEnB,QAGA,OAARiC,GAAgBd,EAAElB,IAAMgC,KACxBA,EAAMd,EAAElB,MApB+D,8BAwB/E,OAAe,OAAR+H,GAAwB,OAAR/F,GAAgB,CAAC+F,EAAK/F,GAwOnBmf,CAAkCnF,SAAmBtb,EACrE4f,EACDtE,GAAiBD,GAA6BC,EAAe2C,SAAgCje,EAC5Fuc,OACgBvc,IAAlBsb,QAAqDtb,IAAtB+d,EACzB,GACAzC,EAAcpc,UAAUwD,QAAO,SAAClC,GAAD,OAAOsH,EAA+BtH,EAAGud,MAClFW,EAAO,OAAC3B,QAAD,IAACA,IAAe9U,EAAcsU,IACrC+C,GAAqBvB,GACrBwB,GAAqBhD,GACrBiD,GAA4BtB,GAAiCH,GAC7D+B,GAAsC1B,GAA6CL,GACnFgC,GAAuCzB,GAA8CP,GACrF4B,GAA4B,OAAC3B,QAAD,IAACA,IAAkCC,GAC/DyB,GAAoCzB,GACpC4B,GAAkBD,KACnB,CACCtE,EACA4C,EACAJ,EACAE,EACAI,EACAE,IAGJrG,qBAAU,WACN,GAAKqF,EAAL,CAKA,IAAIoD,EAAepD,EAEf/L,EAAiBoP,YACjBD,EAAeA,EAAaE,SAG5BrC,KACAmC,EAAeA,EAAa3Z,MACxB1F,KAAKC,IAAI,EAAGD,KAAK6E,MAAMqY,GAAoC,IAAMhN,EAAiBsP,mBAClFxf,KAAK6E,MAAMqY,GAAoC,IAAMhN,EAAiBuP,kBAI9Ed,GAAaU,QAjBTV,QAAahgB,KAkBlB,CACCsd,EACA/L,EAAiBoP,UACjBpC,GACAhN,EAAiBsP,kBACjBtP,EAAiBuP,kBAGrB7I,qBAAU,WACNmH,GAAiB2B,KAAK5gB,SACvB,CAACyR,IAEJqG,qBAAU,WACN,GAAKrG,GAASL,EAAiBO,UAA/B,CAIA,IAAMkP,EAAcpP,EAAK1J,OAEzB,GAAoB,KAAhB8Y,GAAsBA,IAAgBpC,EAA1C,CAIA,IAAMzG,EAAUhN,WAAU,sBAAC,sBAAAvH,EAAA,2EAEnBsb,GAFmB,SAEKxB,EAAKuD,kBAAkBD,GAF5B,kCAGnBnC,EAAoBmC,GAHD,gDAKnBE,QAAQ5b,MAAR,MALmB,yDAOxB,KAEH,OAAO,kBAAMsF,aAAauN,QAC3B,CAACvG,EAAMuN,GAAeP,EAAkBlB,EAAMnM,EAAiBO,YAElE,IAuBIqP,GAvBEC,GAAkBrI,uBACpB,SAAC/U,GACO,OAACoO,SAAD,IAACA,OAAWtE,eAIhB9J,EAAEqd,iBACFrd,EAAEsd,kBACFlP,GAAWlH,UAEf,CAACkH,KAGCmP,GAA0BxI,uBAC5B,SAAChG,EAAyB2B,GACtB,IAAM8M,EAAwD,GAC9D/X,OAAOgY,OAAOD,EAAsBlP,IACpCkP,EAAqBzO,GAAmB2B,EACxC2K,GAAqBmC,KAEzB,CAAClP,KAMD6O,GADAvP,GAAQA,EAAK1J,SAAW0W,GAAoBrN,EAAiBO,UAEzDmN,GAAe9f,OAAS,EAAxB,gBACe8f,GAAe9f,OAD9B,6BACyDyS,EADzD,uBAC4EL,EAAiBO,UAD7F,yCAEmCF,EAAK1J,OAFxC,uBAE6DqJ,EAAiBO,UAF9E,KAIa,GAGrB,IAwJI4P,GAUAC,GAlKEC,GAAkB7I,uBACpB,SAAC/U,GACO,OAACqO,QAAD,IAACA,KAAO5B,YAIZzM,EAAEqd,iBACFrd,EAAEsd,kBACFnE,EAAY9K,MAEhB,CAACA,EAAO8K,IAGN0E,GAAqC9I,uBAAY,WACnD,QAA0B/Y,IAAtB+d,GAAJ,CAIA,IAAM+D,EAAUzB,GAAyBtC,IACzCW,EAAQoD,GACRhC,GAAsC/B,OACvC,CAACsC,GAA0BtC,KAExBgE,GAAgChJ,uBAClC,SAAC/U,EAA0B8Q,GACvB,IAAMkN,EAAuBlN,EAC7BwK,GAAqB0C,GACrB,IAAMzF,EAAoBjB,EAAepc,UAAUwD,QAAO,SAAClC,GAAD,OACtDsH,EAA+BtH,EAAGwhB,MAItC,GAFAzC,GAAqBhD,QAEsBvc,IAAvCqe,GAAkD,CAClD,IAAM4D,EAAwB5B,GAAyBhC,IAEvD,GAAI/W,EAAKY,SAAW+Z,EAAsB/Z,OAAQ,CAC9C,IAAM4Z,EAAUzB,GAAyB2B,GACzCtD,EAAQoD,GACRhC,GAAsCkC,SAI3BhiB,IAAfqd,IAAyD,KAApB,OAATjL,SAAS,IAATA,QAAA,EAAAA,GAAWvE,gBACvCkS,GAAuCiC,KAG/C,CAAC1G,EAAehU,EAAM+W,GAAoCgC,KAGxD6B,GAAsCnJ,uBACxC,SAAC/U,GACOqZ,GACArZ,EAAEsd,kBACFjE,KAEA0C,GAAuChC,MAG/C,CAACV,EAAYU,KAGXoE,GAA+BpJ,uBAAY,WAC7C,GAAK0G,GAAL,CAIA,IAAMlD,OACgBvc,IAAlBsb,QAA4Dtb,IAA7Bme,GACzB,GACA7C,EAAcpc,UAAUwD,QAAO,SAAClC,GAAD,OAAOsH,EAA+BtH,EAAG2d,OAClFoB,GAAqBhD,GACrB+C,GAAqBnB,IACrBwB,GAA6BF,IAC7BI,GACIvE,GAAiBD,GAA6BC,EAAemE,QAElE,CAACtB,GAA0BsB,GAAkCnE,IAE1D8G,GAAgCrJ,uBAAY,WAC9C,GAAKkF,IAA8BF,GAAnC,CAIA,IAEMsE,EAA+B,EAFrBpE,GAA0B,GAAKF,GAAkB,IAAM,GACvDE,GAA0B,GAAKF,GAAkB,IAAM,GAEvE4B,GAA6B0C,GAC7BxC,GAAkBvE,GAAiBD,GAA6BC,EAAe+G,OAChF,CAACpE,GAA2BF,GAAmBzC,IAE5CgH,GAAiCvJ,uBAAY,WAC/C,GAAKkF,IAA8BF,GAAnC,CAIA,IACMwE,GADgBtE,GAA0B,GAAKA,GAA0B,IACzC,EAYhCoE,EAA+B,CAXtBhhB,KAAKC,IAChB,EACAD,KAAKgG,IACD4W,GAA0B,GAAKsE,EAC/B,EAAItE,GAA0B,GAAKF,GAAkB,KAG9C1c,KAAKC,IAChB2c,GAA0B,GAAKsE,EAC/B,EAAItE,GAA0B,GAAKF,GAAkB,KAGzD4B,GAA6B0C,GAC7BxC,GAAkBvE,GAAiBD,GAA6BC,EAAe+G,OAChF,CAACpE,GAA2BF,GAAmBzC,IAE5CkH,GAA6BzJ,sBAAW,uCAC1C,WAAO/U,GAAP,SAAAJ,EAAA,yDACII,EAAEsd,kBAEGjP,EAHT,6DAOIoQ,UAAUC,UAPd,KAOmCC,cAPnC,SAOsEtQ,EAAMuQ,UAP5E,yBAOmD,YAPnD,2CAOwBC,MAPxB,4DAD0C,sDAU1C,CAACxQ,IAGCyQ,IACDxH,GAAwF,IAAvEA,EAAcpc,UAAUwD,QAAO,SAAClC,GAAD,MAAyB,KAAlBA,EAAE8G,KAAKY,UAAe/I,OAE9E4jB,QAA8C/iB,EAyClD,YAvCmBA,IAAfqd,IACA0F,GACI,eAACjH,GAAA,EAAD,CAASvB,MAAM,6BAAf,SACI,gCACI,eAACyI,GAAA,EAAD,CACIlG,UACKiB,KACAQ,IACAR,GAAkB,KAAOQ,GAAoC,IAC1DR,GAAkB,KAAOQ,GAAoC,GAErE0E,QAASf,GACTgB,KAAK,MART,SAUI,eAAC,KAAD,WAShB9Q,KACKA,GAAUtE,kBAEW9N,IAAfqd,GAA6BjL,GAAUvE,gBAC9C6T,GAAkB,2DAFlBA,GAAkB,+CAQtBrP,IACKA,EAAM5B,YACPkR,GAAkB,gDAKtB,gBAACvH,GAAA,EAAD,CAAQlC,KAAMA,EAAMiL,qBAAmB,EAACC,WAAS,EAAC5U,SAAS,KAAK4J,QAAS8E,EAAzE,UACI,gBAACmG,GAAA,EAAD,WACI,eAACC,GAAA,EAAD,CAAYC,QAAQ,KAAKjL,UAAWN,EAAQuC,MAA5C,yBAGC6C,GACG,eAAC4F,GAAA,EAAD,CAAYE,KAAK,MAAMD,QAAS,kBAAM7F,KAAtC,SACI,eAAC,KAAD,SAIZ,eAACoG,GAAA,EAAD,CAAeC,IAAKxD,GAApB,SACI,wBAAM3H,UAAWN,EAAQR,KAAzB,UACK8D,GAAiByC,IACd,eAACzB,GAAD,CACIC,kBAAmBA,GAAkB7Z,QAAO,SAAClC,GAAD,YAAuBR,IAAhBQ,EAAEma,aACrDhM,MAAOA,KAGf,eAAC2K,GAAA,EAAD,CACIiK,QAAQ,SACRG,MAAM,YACN7O,WAAS,EACTuO,WAAS,EACTO,QAAS,EACTlI,MAAM,WACN/G,MAAOpN,EACPiS,SAAU,SAACvV,GAAD,OAAO0a,EAAQ1a,EAAEG,OAAOuQ,QAClCkP,WAAY,CACRC,aAAc9F,IACV,eAACrB,GAAD,CAAuBhF,SAAS,MAAhC,SACI,eAACoE,GAAA,EAAD,CAASvB,MAAM,kBAAf,SACI,gCACI,eAACyI,GAAA,EAAD,CACIlG,UACKiB,KACAM,IACAN,GAAkB,KAAOM,GAAmC,IACzDN,GAAkB,KACdM,GAAmC,IAC3CyE,GAEJG,QAASpB,GACTqB,KAAK,MAVT,SAYI,eAAC,KAAD,eAQ5B,eAAC5J,GAAA,EAAD,CACIiK,QAAQ,SACRG,MAAM,YACN7O,WAAS,EACTuO,WAAS,EACTU,KAAM,EACNrI,MAAM,aACN/G,MAAOvC,EACPoH,SAAU,SAACvV,GAAD,OAAOya,EAAcza,EAAEG,OAAOuQ,UAE5C,eAAC4E,GAAA,EAAD,CACIiK,QAAQ,SACRG,MAAM,YACNN,WAAS,EACT3H,MAAM,OACN/G,MAAO9C,EACP2H,SAAU,SAACvV,GAAD,OAAO2a,EAAQ3a,EAAEG,OAAOuQ,QAClCqP,WAAY5C,GACZyC,WAAY,CACRC,aACI,eAACjH,GAAA,EAAD,CAAgBlF,SAAS,MAAzB,SACI,eAACoE,GAAA,EAAD,CAASvB,MAAM,iBAAf,SACI,gCACI,eAACyI,GAAA,EAAD,CACIlG,SACIA,IACCvL,EAAiBO,YACjBF,GACe,KAAhBA,EAAK1J,OAET+a,QAAS,kBAAMvF,EAAKsG,qBAAqBpS,EAAK1J,SAC9Cgb,KAAK,MART,SAUI,eAAC,KAAD,eAQ3BzZ,OAAO1L,KAAK0f,GAActV,KAAI,SAAC4K,GAAD,OAC3B,eAACuG,GAAA,EAAD,CAEIiK,QAAQ,SACRG,MAAM,YACNN,WAAS,EACTvO,WAAS,EACT8O,QAAS,EACTlI,MAAO1I,EACP2B,MAAOpC,GAAkBS,IAAoB,GAC7CwG,SAAU,SAACvV,GAAD,OAAOud,GAAwBxO,EAAiB/O,EAAEG,OAAOuQ,SAR9D3B,MAWZX,IACG,sBAAKkG,UAAWN,EAAQiD,WAAYgI,QAAS7B,GAA7C,SACI,eAAC9H,GAAA,EAAD,CACIiK,QAAQ,SACRG,MAAM,YACNN,WAAS,EACT1O,MAAOtC,GAAU7J,KACjBkT,MAAM,QACNsI,WAAYrC,GACZ5E,UAAW1K,GAAUtE,aACrB8V,WAAY,CACRC,aAAcd,IAAsBhF,IAChC,eAACnB,GAAA,EAAD,CAAgBlF,SAAS,MAAzB,SAAgCqL,UAMnD1Q,GACG,sBAAKiG,UAAWN,EAAQiD,WAAYgI,QAASrB,GAA7C,SACI,eAACtI,GAAA,EAAD,CACIiK,QAAQ,SACRG,MAAM,YACNN,WAAS,EACT1O,MAAOrC,EAAM9J,KACbkT,MAAM,QACNsI,WAAYpC,GACZ7E,UAAWzK,EAAM5B,UACjBmT,WAAY,CACRC,aACI,eAACjH,GAAA,EAAD,CAAgBlF,SAAS,MAAzB,SACI,eAACoE,GAAA,EAAD,CAASvB,MAAM,oBAAf,SACI,gCACI,eAACyI,GAAA,EAAD,CACIlG,UAAWzK,EAAM5B,UACjBwS,QAAST,GACTU,KAAK,MAHT,SAKI,eAAC,KAAD,iBAUpC,eAAC5J,GAAA,EAAD,CACIiK,QAAQ,SACRG,MAAM,YACNN,WAAS,EACT3H,MAAM,SACN/G,MAAO1H,GACPuM,SAAU,SAACvV,GAAD,OAAO8a,GAAU9a,EAAEG,OAAOuQ,UAEvC8I,GACG,eAAClE,GAAA,EAAD,CACIiK,QAAQ,SACRG,MAAM,YACNN,WAAS,EACT3H,MAAM,MACN/G,MAAOlM,GACP+Q,SAAU,SAACvV,GAAD,OAAOgb,GAAOhb,EAAEG,OAAOuQ,UAGxCnD,EAAiBgB,KAAKpT,OAAS,GAC5B,eAACwZ,GAAD,CACI4K,QAAQ,SACR9H,MAAM,OACNsI,WAAW,kCACXX,WAAS,EACTM,MAAM,YACNnR,KAAMA,GACNqG,aAAc,SAACM,GAAD,OAAa6F,GAAQ7F,MAG1C6E,IAAqBE,IAA6B2B,IAC/C,gBAACqE,GAAA,EAAD,CAAMC,WAAS,EAACvc,UAAU,MAA1B,UACI,eAACsc,GAAA,EAAD,CAAME,MAAI,EAACpb,MAAO,CAAEiS,SAAU,GAA9B,SACI,eAACoJ,GAAA,EAAD,CACIvI,oBAAqBA,GACrBnH,MAAOqJ,GACPsG,iBAAkB1I,GAClBpC,SAAUwI,GACV1a,IAAK4W,GAA0B,GAC/B3c,IAAK2c,GAA0B,GAC/BqG,MAAO1E,GACP2E,KAAM,EACNC,kBAAkB,OAClBlM,UAAWN,EAAQmD,kBACnBuI,MAAM,gBAGd,eAACO,GAAA,EAAD,CAAME,MAAI,EAAV,SACI,eAACrI,GAAA,EAAD,CAASvB,MAAM,QAAf,SACI,gCACI,eAACyI,GAAA,EAAD,CACIE,KAAK,MACLna,MAAO,CAAE0b,WAAY,GACrBxB,QAASd,GAHb,SAKI,eAAC,KAAD,YAKhB,eAAC8B,GAAA,EAAD,CAAME,MAAI,EAAV,SACI,eAACrI,GAAA,EAAD,CAASvB,MAAM,UAAf,SACI,gCACI,eAACyI,GAAA,EAAD,CACIE,KAAK,MACLna,MAAO,CAAE0b,WAAY,GACrBxB,QAASb,GAHb,SAKI,eAAC,KAAD,YAKhB,eAAC6B,GAAA,EAAD,CAAME,MAAI,EAAV,SACI,eAACrI,GAAA,EAAD,CAASvB,MAAM,WAAf,SACI,gCACI,eAACyI,GAAA,EAAD,CACIE,KAAK,MACLna,MAAO,CAAE0b,WAAY,GACrBxB,QAASX,GAHb,SAKI,eAAC,KAAD,oBAShC,gBAACoC,GAAA,EAAD,WACI,eAACC,GAAA,EAAD,CAAQ7H,SAAUA,EAAUmG,QAAS,kBAAM/F,KAA3C,oBAGC5B,GACG,eAACqJ,GAAA,EAAD,CAAQ7H,SAAUA,EAAUmG,QAAS,kBAAMhG,KAA3C,oBAIJ,eAAC0H,GAAA,EAAD,CACI7H,SAAUA,EACVmG,QAAS,kBACLjG,EACI1V,EACA6K,EACAC,GACAC,EACAT,EALK,OAML5E,SANK,IAMLA,MAAU,GANL,OAOLxE,SAPK,IAOLA,MAAO,GACP8J,GACAC,GACA,QAbZ,0BAmBA,eAACoS,GAAA,EAAD,CACI7H,SAAUA,EACVmG,QAAS,kBACLjG,EACI1V,EACA6K,EACAC,GACAC,EACAT,EALK,OAML5E,SANK,IAMLA,MAAU,GANL,OAOLxE,SAPK,IAOLA,MAAO,GACP8J,GACAC,GACA,eAbZ,8BAmBA,eAACoS,GAAA,EAAD,CACI7H,SAAUA,EACVmG,QAAS,kBACLjG,EACI1V,EACA6K,EACAC,GACAC,EACAT,EALK,OAML5E,SANK,IAMLA,MAAU,GANL,OAOLxE,SAPK,IAOLA,MAAO,GACP8J,GACAC,GACA,YAbZ,0B,wBCj4BD,OAA0B,+CCgBnCiH,GAAYjC,cAA+B,SAACkC,GAAD,MAAY,CACzDjC,KAAM,gBAAGoN,EAAH,EAAGA,SAAH,MAAiC,CACnClN,SAAU,WACV7I,OAFE,EAAagW,aAEQ,OAAS,oBAChClW,MAAO,OACPkJ,OAAQ,IACRD,cAAegN,EAAW,OAAS,SAEvCE,sBAAuB,kBAAuB,CAC1C,YAAa,CACTC,QAAS,MACTrN,SAAU,WACV7I,OAJe,EAAGgW,aAIK,QAAU,qBACjClW,MAAO,OACP3F,QAAS,OACTgc,cAAe,SACfvN,eAAgB,SAChBwN,WAAY,SACZC,UAAW,SACXxL,eAAgB,cAChByL,iBAAkB,YAClBC,mBAAoB,SACpBC,gBAAgB,OAAD,OAASC,GAAT,KACfC,oBAAqB,UACrBC,WAAY,oBACZ9iB,OAAQ,gDAEZiM,MAAO,OACPE,OAAQ,aAID,SAAS4W,GAAT,GAAkE,IAA3Cb,EAA0C,EAA1CA,SAAUC,EAAgC,EAAhCA,aAAca,EAAkB,EAAlBA,QACpD1N,EAAUwB,GAAU,CAAEoL,WAAUC,iBAEtC,OACI,sBAAKvM,UAAWN,EAAQR,KAAxB,SACI,eAACmO,GAAA,EAAD,CAAMnN,GAAIoM,GAAYc,EAAtB,SACI,sBAAKpN,UAAWN,EAAQ8M,4B,sDC/ClCc,GAAWvQ,OAAO,cAAe,MACjCwQ,GAAkBxQ,OAAO,SAAU,MACnCyQ,GAAgBnd,SAASC,cAAc,OACvCmd,GAAepd,SAASC,cAAc,UAevBod,G,WAIjB,WAAYC,GAA0B,yBAHrBC,iBAGoB,OAF7BC,eAE6B,EACjC3oB,KAAK0oB,YAAcD,E,oFAGvB,WAAgBG,EAAeC,GAA/B,oBAAAziB,EAAA,sEACkBH,QAAQ6iB,IAAIF,EAAMje,KAAI,SAACoe,EAAGhmB,GAAJ,OAAU,EAAKimB,WAAWD,GAAe,IAAZF,EAAmB,EAAI9lB,OAD5F,uCAESkmB,SAAQ,SAACC,GAAD,OAAWA,KACnBtS,MAAK,SAACuS,EAAIC,GAAL,OAAYD,EAAGtnB,MAAQunB,EAAGvnB,UAHxC,2C,wHAMA,WAAiBkM,EAAY5I,GAA7B,gEAAAiB,EAAA,0DACQ2H,EAAKhD,KAAK0Q,SAAS,QAD3B,4BAEsB4N,KAFtB,SAEqCtb,EAAKjE,OAF1C,0BAEcof,GAFd,gCAGeA,EACFhkB,QAAO,SAACokB,GAAD,MAAwB,QAAdA,EAAK3hB,QACtBgD,KAAI,SAAC2e,GACF,IAAMC,EAAMD,EAAK7hB,KACjB,MAAO,CACH5F,MAAO0nB,EAAI1nB,MACXC,IAAKynB,EAAIznB,IACTgI,KAAM,EAAK0f,YAAYD,EAAIzf,MAAMiO,QAAQqQ,GAAU,IACnDjjB,MAAOA,OAX3B,WAgBQ4I,EAAKhD,KAAK0Q,SAAS,UAAW1N,EAAKhD,KAAK0Q,SAAS,UAhBzD,yCAiBe,IAAIxV,QAAJ,uCAAY,WAAOC,EAASC,GAAhB,mBAAAC,EAAA,6DACTqjB,EAAgB1b,EAAKhD,KAAK0Q,SAAS,UACnCiO,EAAS,IAAIC,UAAOC,OAAOnqB,OAAQkqB,UAAOE,iBAC1CC,EAAc,GACpBJ,EAAOK,MAAQ,SAACC,GAGZ,GAFAA,EAAElgB,KAAO,EAAK0f,YAAYQ,EAAElgB,MAAMiO,QAAQqQ,GAAU,IAEhDqB,EAAe,CACf,IADe,EACTQ,EAAQD,EAAElgB,KAAKyN,MAAM,MACrB2S,EAAW,GAFF,cAIID,GAJJ,IAIf,2BAA0B,CAAC,IAAhBE,EAAe,QACtBD,EAAS7kB,KAAK,EAAK+kB,QAAQD,KALhB,8BAQfH,EAAElgB,KAAOogB,EAAStf,KAAK,MAE3Bkf,EAAKzkB,KAAK2kB,IAEdN,EAAOW,QAAU,kBACbnkB,EACI4jB,EAAKnf,KAAI,SAACqf,GAAD,MAAQ,CACbnoB,MAAOgC,KAAK4E,MAAoB,IAAduhB,EAAEM,WACpBxoB,IAAK+B,KAAK4E,MAAkB,IAAZuhB,EAAEO,SAClBzgB,KAAMkgB,EAAElgB,KACR3E,MAAOA,QAzBJ,KA4BfukB,EA5Be,SA4BI3b,EAAKjE,OA5BT,wBA4BR0gB,MA5BQ,gBA6Bfd,EAAOe,QA7BQ,4CAAZ,0DAjBf,WAkDQ1c,EAAKhD,KAAK0Q,SAAS,QAlD3B,6BAmDsBiP,KAnDtB,UAmDqC3c,EAAKjE,OAnD1C,gCAmDkD,GAApCof,GAnDd,qCAoDeA,EAAMyB,UAAUhgB,KAAI,SAACigB,GACxB,MAAO,CACH/oB,MAAOgC,KAAK6E,MAAuB,IAAjBkiB,EAAS/oB,OAC3BC,IAAK+B,KAAK6E,MAAqB,IAAfkiB,EAAS9oB,KACzBgI,KAAM,EAAK0f,YACPoB,EAASC,OAAO5B,SAAQ,SAAC1f,GAAD,OAAWA,EAAMuhB,UAAUngB,KAAI,SAACogB,GAAD,OAAcA,EAASjhB,WAAOc,KAAK,KAC5FmN,QAAQsQ,GAAiB,MAC3BljB,MAAOA,OA3DvB,YAgEQ4I,EAAKhD,KAAK0Q,SAAS,UAhE3B,kCAiE2B1N,EAAKjE,OAjEhC,WAiEcA,EAjEd,OAkEckhB,EAAMhrB,KAAKirB,aAAaT,MAAM1gB,GAEJ,IAA5BmC,OAAO1L,KAAKyqB,GAAKrpB,OApE7B,0CAqEmB,IArEnB,QAwEcupB,EAAYF,EAAG,WAAH,KACZtpB,EAAY,GAETsH,EAAQ,EAAGrH,EAASupB,EAAUvpB,OA3E/C,aA2EuDqH,EAAQrH,GA3E/D,oBA8EkB,UAFAwpB,EAAMD,EAAUliB,KAEK,UAAWmiB,GAAU,YAAaA,EA9EzE,wDAkFkBtpB,EAAQupB,WAAWD,EAAI,YAE7BzpB,EAAU2D,KAAK,CACXxD,MAAOgC,KAAK4E,MAAc,IAAR5G,GAClBC,IAAK+B,KAAK4E,MAA2C,KAApC5G,EAAQupB,WAAWD,EAAI,YACxCrhB,KAAM9J,KAAKwpB,YAAYxpB,KAAKqrB,YAAYxiB,OAAOsiB,EAAI,WAAWpT,QAAQqQ,GAAU,KAChFjjB,UAxFhB,QA2EuE6D,IA3EvE,iDA4FetH,GA5Ff,YA+FQqM,EAAKhD,KAAK0Q,SAAS,QA/F3B,wBAgGc/Z,EAA4B,GAhG1C,UAiGcqM,EACDe,SAGAwc,YAAYC,+BACZC,OAAOxrB,KAAKyrB,wBAAwB/pB,EAAWyD,IAtG5D,iCAwGezD,GAxGf,YA2GQqM,EAAKhD,KAAK0Q,SAAS,WAAY1N,EAAKhD,KAAK0Q,SAAS,SA3G1D,kCA4G2B1N,EAAKjE,OA5GhC,QA4GcA,EA5Gd,OA6Gc4f,EAAS,IAAIgC,UACbC,EAAMjC,EAAOkC,gBAAgB9hB,EAAM,mBACnCof,EAAQlpB,KAAK6rB,aAAaF,EAAIG,gBAAiB,CAAC,OAAQ,QACxDpqB,EAA4B,GAEzBsH,EAAQ,EAAGrH,EAASunB,EAAMvnB,OAlH3C,aAkHmDqH,EAAQrH,GAlH3D,oBAmHkBwpB,EAAMjC,EAAMlgB,GACZ+iB,EAAiBZ,EAAIa,aAAa,SAClCC,EAAed,EAAIa,aAAa,OAEf,OAAnBD,GAA4C,OAAjBE,EAvH3C,wDA2HYvqB,EAAU2D,KAAK,CACXyE,KAAM9J,KAAKwpB,YAAL,UAAiB2B,EAAIe,mBAArB,QAAoC,IAC1CrqB,MAAO7B,KAAKmsB,oBAAoBJ,GAChCjqB,IAAK9B,KAAKmsB,oBAAoBF,GAC9B9mB,UA/HhB,QAkHmE6D,IAlHnE,iDAmIetH,GAnIf,cAsIU,IAAIkF,MAAM,oCAtIpB,iD,0FAyIA,SAA4ByB,GACxB,IAAM+jB,EAAQ/jB,EAAUkP,MAAM,KAK9B,OAJqB1T,KAAK4E,MAA4C,IAAtC2iB,WAAWgB,EAAMA,EAAMzqB,OAAS,KAIhC,KAHhByqB,EAAMzqB,OAAS,EAAI,EAAIkB,OAAOupB,EAAMA,EAAMzqB,OAAS,KAGnB,MAFlCyqB,EAAMzqB,OAAS,EAAI,EAAIkB,OAAOupB,EAAMA,EAAMzqB,OAAS,O,0BAKrE,SAAqB0qB,EAAiBC,GAClC,GAAoB,IAAhBA,EAAK3qB,OAAc,CAGnB,IAFA,IAAMuZ,EAAsB,GAEnBnY,EAAI,EAAGA,EAAIspB,EAAOnR,SAASvZ,SAAUoB,EAAG,CAC7C,IAAMumB,EAAO+C,EAAOnR,SAASnY,GAC7BmY,EAAS7V,KAAKikB,GAGlB,OAAOpO,EAGX,IAAK,IAAInY,EAAI,EAAGA,EAAIspB,EAAOnR,SAASvZ,SAAUoB,EAAG,CAC7C,IAAMumB,EAAO+C,EAAOnR,SAASnY,GAG7B,GAFY/C,KAAKusB,kBAAkBjD,EAAKkD,WAE5BF,EAAK,GACb,OAAOtsB,KAAK6rB,aAAavC,EAAMgD,EAAK/iB,MAAM,IAIlD,MAAM,IAAI3C,MAAM,+B,+BAGpB,SAA0BgV,GACtB,IAAM6Q,EAAa7Q,EAAIhL,YAAY,KAEnC,OAAoB,IAAhB6b,EACO7Q,EAAIpN,UAAUie,EAAa,GAG/B7Q,I,qCAGX,SAAgCla,EAA2ByD,GACvD,IAAIunB,EACAC,EAEJ,OAAO,IAAIC,eAA2B,CAClCvH,MADkC,SAC5BwH,EAAYC,GACd,GAAID,EAAWE,yBAAyBprB,OAAS,OACda,IAA3BmqB,IACAA,EAAyBE,QAE1B,QAA+BrqB,IAA3BmqB,EAAsC,CAAC,IAAD,EACvCK,EAAcL,EAAuBM,+BAA+B9b,MACpE+b,EAAeP,EAAuBM,+BAA+B5b,OAC3Eqb,OACuBlqB,IAAnBkqB,GAAgCA,EAAe/qB,OAASurB,EAAeF,EAAc,EAC/E,IAAIG,kBAAkBH,EAAcE,EAAe,GACnDR,EACV,IAAMU,EAAYT,EAAuBS,UAAUV,GACnDnE,GAAapX,MAAQic,EAAUjc,MAC/BoX,GAAalX,OAAS+b,EAAU/b,OAChBkX,GAAa3V,WAAW,MAChCya,aAAaD,EAAW,EAAG,GACnC1rB,EAAU2D,KAAK,CACXxD,MAAK,UACD8qB,EAAuBI,yBAAyB,GAAGO,OAAOC,sBAAwB,UADjF,QACuF,EAC5FzrB,IAAK+qB,EAAWW,qBAAqBF,OAAOC,sBAAwB,GACpEzjB,KAAM,GACNqT,UAAW,CACP9K,QAASkW,GAAajW,UAAU,aAChCuC,MAAO,CACH1D,MAAOic,EAAUjc,MACjBE,OAAQ+b,EAAU/b,QAEtB+L,OAAQ,CACJjM,MAAOwb,EAAuBM,+BAA+B9b,MAC7DE,OAAQsb,EAAuBM,+BAA+B5b,SAGtElM,UAGJwnB,OAAyBnqB,Q,qBAMzC,SAAgB2nB,GACZ,IAAMsD,EAAStD,EAAK1b,QAAQ,SACtBif,EAASvD,EAAK1b,QAAQ,SACxBkf,EAAU,GAEd,OAAIF,GAAU,GACVE,EAAUxD,EAAK3b,UAAU,EAAGif,GAAU,SAAWtD,EAAK3b,UAAUif,EAAS,GAAK,SACvEztB,KAAKoqB,QAAQuD,IACbD,GAAU,GACjBC,EAAUxD,EAAK3b,UAAU,EAAGkf,GAAU,SAAWvD,EAAK3b,UAAUkf,EAAS,GAAK,SACvE1tB,KAAKoqB,QAAQuD,IAGjBxD,I,yBAGX,SAAoBrgB,GAAuB,IAAD,EAEtC,OADAwe,GAAcsF,UAAY9jB,EAC1B,UAAOwe,GAAc4D,mBAArB,QAAoC5D,GAAcuF,Y,wBAGtD,WAOI,YANuBrrB,IAAnBxC,KAAK2oB,YACL3oB,KAAK2oB,UAAY,IAAImF,aAAU,CAC3BC,kBAAkB,KAInB/tB,KAAK2oB,Y,yBAGhB,SAAoB7e,GAChB,YAAyBtH,IAArBxC,KAAK0oB,YACE5e,EAGJA,EAAKiO,QAAQ/X,KAAK0oB,YAAYsF,MAAOhuB,KAAK0oB,YAAYjR,e,4BAGjE,SAAe/V,GACX,IAAMwnB,EAAmBxnB,EAAUiJ,KAAI,SAACsjB,GACpC,MAAO,CACHtmB,KAAM,MACNF,KAAM,CACF5F,MAAOosB,EAAapsB,MACpBC,IAAKmsB,EAAansB,IAClBgI,KAAMmkB,EAAankB,UAI/B,OAAOokB,aAAShF,EAAO,CAAEiF,OAAQ,U,+DAGrC,WAAiBvF,GAAjB,SAAAxiB,EAAA,kEACWpG,KADX,SACqCA,KAAK0B,UAAUknB,GADpD,iDACgBwF,eADhB,iE,2NC7REpS,GAAYjC,aAAsC,SAACkC,GAAD,MAAY,CAChEc,MAAO,CACHS,SAAU,GAEd6Q,WAAY,CACRC,YAAarS,EAAMsB,QAAQ,IAE/BgR,OAAQ,CACJC,WAAYvS,EAAMwS,YAAYC,OAAO,CAAC,SAAU,SAAU,CACtDC,OAAQ1S,EAAMwS,YAAYE,OAAOC,MACjCC,SAAU5S,EAAMwS,YAAYI,SAASC,iBAG7CC,YAAa,CACT5d,MAAO,gBAAG6d,EAAH,EAAGA,YAAH,4BAAoCA,EAApC,QACPR,WAAYvS,EAAMwS,YAAYC,OAAO,CAAC,SAAU,SAAU,CACtDC,OAAQ1S,EAAMwS,YAAYE,OAAOM,QACjCJ,SAAU5S,EAAMwS,YAAYI,SAASK,iBAEzCZ,YAAa,qBAAGU,cAEpBG,kBAAmB,CACfvR,UAAW,YACXzM,MAAO,GACPuN,QAAS,GACT8P,WAAYvS,EAAMwS,YAAYC,OAAO,CAAC,YAAa,UAAW,SAAU,CACpEC,OAAQ1S,EAAMwS,YAAYE,OAAOC,MACjCC,SAAU5S,EAAMwS,YAAYI,SAASC,iBAG7CM,uBAAwB,CACpBxR,UAAW,YACXzM,MAAO,EACPuN,QAAS,EACT8P,WAAYvS,EAAMwS,YAAYC,OAAO,CAAC,YAAa,UAAW,SAAU,CACpEC,OAAQ1S,EAAMwS,YAAYE,OAAOM,QACjCJ,SAAU5S,EAAMwS,YAAYI,SAASK,kBAG7CG,KAAM,CACF7jB,QAAS,YAYX8jB,GAA8BvV,aAAyD,SAACkC,GAAD,MAAY,CACrGsT,QAAS,kBAAe,CACpB/jB,QADK,EAAGgkB,KACQ,QAAU,aAIlC,SAASC,GAAT,GAAiF,IAAnDD,EAAkD,EAAlDA,KAASE,EAAyC,mBACtElV,EAAU8U,GAA4B,CAAEE,KAAMA,IACpD,OAAO,eAAClR,GAAA,EAAD,aAAS9D,QAASA,GAAakV,IAG3B,SAASC,GAAT,GAUD,IAAD,EATTX,EASS,EATTA,YACAY,EAQS,EARTA,WACAC,EAOS,EAPTA,OACA9S,EAMS,EANTA,MACA+S,EAKS,EALTA,cACAlQ,EAIS,EAJTA,eACAmQ,EAGS,EAHTA,kBACAC,EAES,EAFTA,eACAC,EACS,EADTA,6BAEMzV,EAAUwB,GAAU,CAAEgT,gBAC5B,EAAgC5vB,oBAAkB,GAAlD,mBAAO8wB,EAAP,KAAiBC,EAAjB,KACA,EAAwC/wB,qBAAxC,mBAAOgxB,EAAP,KAAqBC,EAArB,KACMC,OACgB9tB,IAAlBstB,QAAuFttB,IAAxDstB,EAAcS,MAAK,SAACxH,GAAD,OAAQA,EAAEhe,KAAK0Q,SAAS,WAExE+U,EAAmBjV,uBACrB,SAAC1a,GACOyvB,GACAD,EAAgBxvB,EAAM4vB,eACtBN,GAAY,IAEZH,MAGR,CAACA,EAAgBM,IAGfI,EAAkBnV,uBAAY,WAChC4U,GAAY,KACb,IAEGQ,EAA0BpV,uBAAY,WACxC4U,GAAY,GACZH,MACD,CAACA,IAEEY,EAAmCrV,uBAAY,WACjD4U,GAAY,GACZF,MACD,CAACA,IAEJ,OACI,uCACKK,GACG,eAACO,GAAA,EAAD,CACInW,KAAMwV,EACNY,SAAUV,EACVxV,QAAS8V,EACTK,aAAc,CACVC,SAAU,SACVC,WAAY,UANpB,SASI,gBAAC,KAAD,WACI,eAACC,GAAA,EAAD,CAAUC,QAAM,EAAC1L,QAASkL,EAA1B,wBAGA,eAACO,GAAA,EAAD,CAAUC,QAAM,EAAC1L,QAASmL,EAA1B,4CAMZ,eAACQ,GAAA,EAAD,CACIlX,SAAS,SACT+E,UAAW,EACXnE,UAAWuW,aAAK7W,EAAQ+T,QAAT,mBACV/T,EAAQuU,YAAca,GADZ,cAEVpV,EAAQ6U,KAAOQ,GAFL,IAHnB,SAQI,gBAAChK,GAAA,EAAD,WACI,eAACvH,GAAA,EAAD,CACIgT,qBAAsBhB,EACtBiB,qBAAsBjB,EACtBkB,qBAAsBlB,EACtBvT,MAAM,aAJV,SAMI,eAACyI,GAAA,EAAD,CACIE,KAAK,QACLQ,MAAM,UACNpL,UAAWN,EAAQ6T,WACnB5I,QAAS+K,EAJb,SAMI,eAAC,KAAD,QAGR,eAAC1K,GAAA,EAAD,CAAYC,QAAQ,KAAKjL,UAAWN,EAAQuC,MAA5C,SACKA,IAEL,eAACuB,GAAA,EAAD,CAASvB,MAAM,SAAf,SACI,eAACyI,GAAA,EAAD,CACIE,KAAK,MACLQ,MAAM,UACNuL,UAAU,IACVhmB,KAAK,uDACL9E,OAAO,SACP+qB,IAAI,aANR,SAQI,eAAC,KAAD,QAGR,eAACpT,GAAA,EAAD,CAASvB,MAAM,eAAf,SACI,eAACyI,GAAA,EAAD,CACIE,KAAK,MACLQ,MAAM,UACNuL,UAAU,IACVhmB,KAAK,mDACL9E,OAAO,SACP+qB,IAAI,aANR,SAQI,eAAC,KAAD,QAGR,eAACpT,GAAA,EAAD,CAASvB,MAAM,OAAf,SACI,eAACyI,GAAA,EAAD,CACIE,KAAK,MACLQ,MAAM,UACNuL,UAAU,IACVhmB,KAAK,kDACL9E,OAAO,SACP+qB,IAAI,aANR,SAQI,eAAC,KAAD,QAGR,eAACpT,GAAA,EAAD,CAASvB,MAAM,WAAf,SACI,eAACyI,GAAA,EAAD,CAAYE,KAAK,MAAMQ,MAAM,UAAUT,QAAS7F,EAAhD,SACI,eAAC,KAAD,QAGR,eAAC6P,GAAD,CAAoB1S,MAAM,iBAAiByS,MAAOI,EAAlD,SACI,eAACpK,GAAA,EAAD,CACIE,KAAK,MACLQ,MAAM,UACN,aAAW,OACXpL,UAAWuW,aAAK7W,EAAQ2U,kBAAT,eACV3U,EAAQ4U,uBAAyBQ,IAEtCnK,QAASsK,EAPb,SASI,eAAC,KAAD,gBC5LrB,SAAS4B,GAAT,GAQY,IAPfC,EAOc,EAPdA,cACAC,EAMc,EANdA,aACAC,EAKc,EALdA,yBACAC,EAIc,EAJdA,qBACAC,EAGc,EAHdA,0BACAC,EAEc,EAFdA,wBACAC,EACc,EADdA,mBAEMC,EAAc,CAChBjM,MAAO0L,EACPQ,SAAUvvB,OAAOgvB,IAGrB,GAAIC,EAA2B,EAAG,CAC9B,IAAMO,EAAYP,EACZ5L,EAAQ6L,EACdI,EAAM,WAAN,cAEWE,EAFX,cAE0BnM,EAF1B,iBAEwCmM,EAFxC,cAEuDnM,EAFvD,iBAEqEmM,EAFrE,cAEoFnM,EAFpF,iBAEkGmM,EAFlG,cAEiHnM,GAGrH,GAAI8L,EAA4B,EAAG,CAC/B,IAAMM,EAAUN,EAEhB,EA5CR,SAAkBO,GACd,IAAIzrB,EAAS,4CAA4CoR,KAAKqa,GAC9D,MAAO,CACHC,EAAGC,SAAS3rB,EAAO,GAAI,IACvB4rB,EAAGD,SAAS3rB,EAAO,GAAI,IACvB6rB,EAAGF,SAAS3rB,EAAO,GAAI,KAuCH8rB,CADNX,GACNO,EAAR,EAAQA,EAAGE,EAAX,EAAWA,EAAGC,EAAd,EAAcA,EACdR,EAAM,gBAAN,eAAoCK,EAApC,aAA0CE,EAA1C,aAAgDC,EAAhD,aAAsDL,EAAtD,KAOJ,OAJIJ,GAAsBA,EAAmBvwB,OAAS,IAClDwwB,EAAM,WAAiBD,GAGpBC,EAGJ,SAASU,GACZC,EACAC,GAEO,IADPC,IACM,yDACN,GAAIF,EAAe,EACf,OAAOD,GAAoB,EAAGE,GAIlC,IAAM3U,GADN0U,EAAejvB,KAAK6E,MAAMoqB,IACA,IAEpBG,GADNH,GAAgBA,EAAe1U,GAAM,KACT,GAEtB8U,GADNJ,GAAgBA,EAAeG,GAAQ,IACX,GAE5B,GAAIF,GAAqB,KAAS,CAC9B,IAAMI,GAAOL,EAAeI,GAAQ,GAEpC,OAAIF,EACOI,GAAID,GAAO,IAAMC,GAAIF,GAAQ,IAAME,GAAIH,GAAQ,IAAMG,GAAIhV,EAAI,GAGjEgV,GAAID,GAAO,IAAMC,GAAIF,GAAQ,IAAME,GAAIH,GAGlD,OAAID,EACOI,GAAIF,GAAQ,IAAME,GAAIH,GAAQ,IAAMG,GAAIhV,EAAI,GAGhDgV,GAAIF,GAAQ,IAAME,GAAIH,GAGjC,SAASG,GAAIC,GAA+B,IAApBC,EAAmB,uDAAH,EACpC,OAAOzqB,OAAOwqB,GAAGvqB,SAASwqB,EAAO,K,0ICtE/BtX,GAAYjC,aAA4C,SAACkC,GAAD,MAAY,CACtEsX,OAAQ,CACJpiB,MAAO,qBAAG6d,aACVwE,WAAY,GAEhBC,YAAa,CACTtiB,MAAO,qBAAG6d,cAEd0E,aAAa,yBACTloB,QAAS,OACTic,WAAY,SACZvN,SAAU,SACVwE,QAASzC,EAAMsB,QAAQ,EAAG,IAEvBtB,EAAM0X,OAAOC,SANR,IAOR3Z,eAAgB,eAEpB4Z,cAAe,CACX3Z,SAAU,WACV7I,OAAQ,OACRyiB,UAAW,OACXC,UAAW,UAEfC,SAAU,CACN,UAAW,CACPrV,gBAAiB1C,EAAM2C,QAAQzG,OAAO8b,QAG9CC,gBAAiB,CACbC,YAAa,EACbC,aAAc,GAElBC,iBAAkB,CACdC,SAAU,IAEdC,WAAY,CACR/oB,QAAS,OACTyO,eAAgB,SAChBuN,cAAe,SACfE,UAAW,SACXrW,OAAQ,OACRqN,QAAS,IAEb5U,KAAM,CACF0T,SAAU,GAEdgX,UAAW,CACPhX,SAAU,EACV0I,MAAOjK,EAAM2C,QAAQ9U,KAAK2qB,WAE9BpsB,UAAW,CACP+rB,aAAc,GACdD,YAAa,GACbjO,MAAOjK,EAAM2C,QAAQ9U,KAAK2qB,eAelC,SAASC,GAAT,GAA+G,IAA/Fha,EAA8F,EAA9FA,KAAMoW,EAAwF,EAAxFA,SAAUlW,EAA8E,EAA9EA,QAAS+Z,EAAqE,EAArEA,SAAUC,EAA2D,EAA3DA,YAAaC,EAA8C,EAA9CA,gBAAiBC,EAA6B,EAA7BA,SAAUnO,EAAmB,EAAnBA,KACjFoO,EAAaxZ,uBAAY,WAC3B0J,UAAUC,UAAU8P,UAAUrO,EAAM7c,MACpC8Q,MACD,CAAC+L,EAAM/L,IAEJqa,EAAe1Z,uBAAY,WAC7BoZ,EAAShO,GACT/L,MACD,CAAC+L,EAAMgO,EAAU/Z,IAEdsa,EAAkB3Z,uBAAY,WAChCqZ,EAAYjO,GACZ/L,MACD,CAAC+L,EAAMiO,EAAaha,IAEjBua,EAAsB5Z,uBAAY,WACpCsZ,EAAgBlO,GAChB/L,MACD,CAAC+L,EAAMkO,EAAiBja,IAErBwa,EAAe7Z,uBAAY,WAC7BuZ,EAASnO,GACT/L,MACD,CAAC+L,EAAMmO,EAAUla,IAEpB,OAAK+L,EAKD,eAACkK,GAAA,EAAD,CACIlL,qBAAqB,EACrBjL,KAAMA,EACNoW,SAAUA,EACVlW,QAASA,EACTmW,aAAc,CACVC,SAAU,SACVC,WAAY,UAEhBoE,gBAAiB,CACbrE,SAAU,MACVC,WAAY,SAXpB,SAcI,gBAAC,KAAD,WACI,eAACC,GAAA,EAAD,CAAUC,QAAM,EAAC1L,QAASsP,EAA1B,SACI,eAACO,GAAA,EAAD,CAAcC,uBAAwB,CAAExP,QAAS,SAAWyP,QAAQ,WAExE,eAACtE,GAAA,EAAD,CAAUC,QAAM,EAAC1L,QAASwP,EAA1B,SACI,eAACK,GAAA,EAAD,CAAcC,uBAAwB,CAAExP,QAAS,SAAWyP,QAAQ,eAEtE7O,EAAK8O,WAAa9O,EAAK+O,WAAa/O,EAAKtZ,QACvC,eAAC6jB,GAAA,EAAD,CAAUC,QAAM,EAAC1L,QAASyP,EAA1B,SACI,eAACI,GAAA,EAAD,CAAcC,uBAAwB,CAAExP,QAAS,SAAWyP,QAAQ,sBAG1E7O,EAAK8O,WAAa9O,EAAK9R,QACrB,eAACqc,GAAA,EAAD,CAAUC,QAAM,EAAC1L,QAAS0P,EAA1B,SACI,eAACG,GAAA,EAAD,CAAcC,uBAAwB,CAAExP,QAAS,SAAWyP,QAAQ,qBAG5E,eAACtE,GAAA,EAAD,CAAUC,QAAM,EAAC1L,QAAS2P,EAA1B,SACI,eAACE,GAAA,EAAD,CAAcC,uBAAwB,CAAExP,QAAS,SAAWyP,QAAQ,kBApCzE,KA2CA,SAASG,GAAYpb,GAChC,IA8BIgN,EA9BEuN,EAAWva,EAAMua,SACjBta,EAAUwB,GAAUzB,GACpBqb,EAA4Bra,uBAAY,SAACmH,GACvCA,GACAA,EAAQmT,mBAEb,IACH,EAAgCz2B,qBAAhC,mBAAO02B,EAAP,KAAiBC,EAAjB,KACA,EAAgC32B,oBAAkB,GAAlD,mBAAO8wB,EAAP,KAAiBC,EAAjB,KACA,EAAwC/wB,qBAAxC,mBAAOgxB,EAAP,KAAqBC,EAArB,KAEM2F,EAAaza,uBAAY,SAAC/U,EAAqBmgB,GACjDoP,EAAYpP,GACZwJ,GAAY,GACZE,EAAgB7pB,EAAEiqB,iBACnB,IAEGwF,EAAmB1a,uBAAY,WACjCwa,OAAYvzB,GACZ2tB,GAAY,GACZE,OAAgB7tB,KACjB,IAEG4yB,EAAe7Z,uBACjB,SAACoL,GACGmO,EAASnO,KAEb,CAACmO,IAgGL,OA3FIva,EAAM2b,MAAMv0B,OAAS,EAAI,WACzB,IAKIw0B,EANoB,EAClBD,EAAQ,GACVE,EAAmB,KACnBrzB,EAAI,EACFszB,EAA+C,GACjDC,EAAuD,GALnC,cAQL/b,EAAM2b,OARD,yBAQbvP,EARa,QASpB,GAAyB,OAArByP,GAA6BA,IAAqBzP,EAAK5b,KAAM,CACzD4b,EAAK5b,QAAQsrB,EACbA,EAAiB1P,EAAK5b,QAEtBsrB,EAAiB1P,EAAK5b,MAAQ,EAGlC,IAAMwrB,EAAM5P,EAAK5b,KAAO,IAAMsrB,EAAiB1P,EAAK5b,MACpDurB,EAAeC,GAAO,GACtBH,EAAmBzP,EAAK5b,KACxBorB,EAAaI,EAEbL,EAAM7wB,KACF,gBAAC6rB,GAAA,EAAD,WACI,eAACpL,GAAA,EAAD,CAAYI,MAAM,gBAAlB,SAAmCS,EAAK5b,OACxC,eAACyrB,GAAA,EAAD,UACI,eAAClY,GAAA,EAAD,CAASvB,MAAM,kBAAf,SACI,eAACyI,GAAA,EAAD,CACIC,QAAS,kBAAMlL,EAAMkc,uBAAuB9P,EAAK5b,KAAMurB,EAAeC,KACtE7Q,KAAK,MAFT,SAII,eAAC,KAAD,YARD6Q,IAgBvBD,EAAeH,GAAa9wB,KAAKshB,GACjC,IAAMV,EAAMljB,IAAMwX,EAAM2b,MAAMv0B,OAAS,EAAIi0B,EAA4B,KAEvEM,EAAM7wB,KACF,gBAAC6rB,GAAA,EAAD,CACIjL,IAAKA,EAELnL,UAAWN,EAAQwZ,SACnBxZ,QAAS,CAAEkc,QAASlc,EAAQ0Z,iBAJhC,UAMI,eAACyC,GAAA,EAAD,CAAcnc,QAAS,CAAER,KAAMQ,EAAQ6Z,kBAAvC,SACI,eAAC/V,GAAA,EAAD,CAASvB,MAAM,iBAAf,SACI,eAACyI,GAAA,EAAD,CAAYC,QAAS,kBAAMlL,EAAMqc,OAAOjQ,IAAxC,SACI,eAAC,KAAD,CAAayL,SAAS,gBAIlC,eAACuE,GAAA,EAAD,CAAcnc,QAAS,CAAER,KAAMQ,EAAQ6Z,kBAAvC,SACI,eAAC7O,GAAA,EAAD,CAAYC,QAAS,SAACjf,GAAD,OAAOwvB,EAAWxvB,EAAGmgB,IAA1C,SACI,eAAC,KAAD,CAAcyL,SAAS,cAG/B,eAACkD,GAAA,EAAD,CACIE,QACI,gBAAC/O,GAAA,EAAD,CAAMoQ,KAAK,SAASnQ,WAAS,EAA7B,UACI,eAACD,GAAA,EAAD,CAAME,MAAI,EAAC7L,UAAyB,KAAd6L,EAAK7c,KAAc0Q,EAAQga,UAAYha,EAAQ1Q,KAArE,SACmB,KAAd6c,EAAK7c,KAAc,UAAY6c,EAAK7c,OAEzC,eAAC2c,GAAA,EAAD,CAAME,MAAI,EAAC7L,UAAWN,EAAQnS,UAA9B,SACKwqB,GAAoBlM,EAAK9kB,MAAO8kB,EAAK9kB,OAAO,YAvBxD8kB,EAAK/W,OA+BhB7M,GAnEN,2BAAiC,IART,8BA8ExBwkB,EACI,sBAAKzM,UAAWN,EAAQqZ,cAAxB,SACI,eAAC,KAAD,UAAOqC,MAhFU,GAoFzB3O,EACI,sBAAKzM,UAAWN,EAAQ+Z,WAAxB,SACI,eAACzO,GAAA,EAAD,CAAYC,QAAQ,KAApB,wCAMR,gBAAC,IAAM+Q,SAAP,WACI,gBAACC,GAAA,EAAD,CACIhR,QAAQ,aACRiR,OAAO,QACPtc,KAAMH,EAAMG,KACZI,UAAWN,EAAQ+Y,OACnB/Y,QAAS,CACLyc,MAAOzc,EAAQiZ,aANvB,UASI,sBAAK3Y,UAAWN,EAAQkZ,aAAxB,SACI,eAAClO,GAAA,EAAD,CAAYC,QAASlL,EAAMK,QAA3B,SACI,eAAC,KAAD,QAGR,eAACsc,GAAA,EAAD,IACC3P,KAEL,eAACmN,GAAD,CACIha,KAAMH,EAAMG,MAAQwV,EACpBY,SAAUV,EACVzJ,KAAMmP,EACNlb,QAASqb,EACTtB,SAAUpa,EAAMoa,SAChBC,YAAara,EAAMqa,YACnBC,gBAAiBta,EAAMsa,gBACvBC,SAAUM,O,kCCxUpBpZ,GAAYjC,cAA+B,SAACkC,GAAD,MAAY,CACzD+L,WAAY,kBAAuB,CAC/B9N,SAAU,WACV7I,OAFQ,EAAGgW,aAEY,QAAU,qBACjClW,MAAO,OACPkJ,OAAQ,IACR7O,QAAS,OACTgc,cAAe,SACfvN,eAAgB,SAChBwN,WAAY,SACZ/I,QAAS,GACTgJ,UAAW,WAEfyP,WAAY,CACRzZ,OAAQ,eAgBD,SAAS0Z,GAAT,GAQJ,IAPP3qB,EAOM,EAPNA,UACA4qB,EAMM,EANNA,uBACAC,EAKM,EALNA,aACApP,EAIM,EAJNA,QACAd,EAGM,EAHNA,SACAC,EAEM,EAFNA,aACA2I,EACM,EADNA,eAEMxV,EAAUwB,GAAU,CAAEqL,iBAC5B,EAAkEjoB,qBAAlE,mBAAOm4B,EAAP,KAAkCC,EAAlC,KAEA/c,qBAAU,WAAM,4CACZ,sBAAArU,EAAA,sDACIoxB,EAA6B/qB,EAAU2L,SAD3C,4CADY,uBAAC,WAAD,wBAKZqf,KACD,CAAChrB,IAEJ,IAAMirB,EAA2BH,GAA6BI,KAAGN,EAAwBE,GACnFK,GAAyBL,EAE/B,OACI,eAAC,IAAMT,SAAP,UACI,eAAC3O,GAAA,EAAD,CAAMnN,IAAKkN,IAAYd,EAAUzM,QAAS,IAA1C,SACI,sBAAKG,UAAWN,EAAQwN,WAAxB,SACI,gBAAClC,GAAA,EAAD,CAAYC,QAAQ,KAApB,uDAC+C,IAC3C,eAAC8R,GAAA,EAAD,CACIlxB,OAAO,IACPmU,UAAWN,EAAQ2c,WACnB1R,QAASuK,EACT9J,MAAM,YACNuL,UAAU,QALd,oBAFJ,IAYI,wBACCmG,GACG,gDACgB,IACZ,eAACC,GAAA,EAAD,CAAM3R,MAAM,YAAYvf,OAAO,SAAS+qB,IAAI,aAAajmB,KAAM6rB,EAA/D,8BAEQ,IAJZ,6CAQHI,GACG,iDACiB,IACb,eAACG,GAAA,EAAD,CAAM3R,MAAM,YAAYvf,OAAO,SAAS+qB,IAAI,aAAajmB,KAAM6rB,EAA/D,oBAEQ,IAJZ,4B,IC1FPQ,G,WAKjB,WAAYC,GAAoB,yBAJxBC,aAIuB,OAF/BC,eAE+B,EAC3Bj4B,KAAKg4B,QAAU,IAAIE,iBAAiBH,GACpC,IAAMI,EAAOn4B,KACbA,KAAKg4B,QAAQzwB,UAAY,SAAC1G,GAAW,IAAD,EAChC,UAAAs3B,EAAKF,iBAAL,cAAAE,EAAiBt3B,I,+CAIzB,SAAYkH,GAAmB,IAAD,EAC1B,UAAA/H,KAAKg4B,eAAL,SAAc5wB,YAAYW,K,mBAG9B,WAAS,IAAD,EACJ,UAAA/H,KAAKg4B,eAAL,SAAcI,QACdp4B,KAAKg4B,aAAUx1B,M,KClBF61B,G,WASjB,WAAYC,EAAe/qB,EAAad,GAA6B,IAAD,gCARnD6rB,WAQmD,OAPnD/qB,SAOmD,OANnDd,eAMmD,OALnD8rB,cAKmD,OAJnDC,8BAImD,OAFpEP,eAEoE,EAChEj4B,KAAKs4B,MAAQA,EACbt4B,KAAKuN,IAAMA,EACXvN,KAAKu4B,SAAW,SAACxwB,GACwC,IAAD,EAAhDA,EAAQuwB,QAAUA,GAASvwB,EAAQwF,MAAQA,IAC3C,YAAK0qB,iBAAL,gBAAiB,CACbxwB,KAAMM,EAAQN,SAK1BzH,KAAKw4B,yBAA2B/rB,EAAUgsB,UAAUz4B,KAAKu4B,UACzDv4B,KAAKyM,UAAYA,E,+CAGrB,SAAY1E,GACR/H,KAAKyM,UAAUisB,YAAY3wB,EAAS/H,KAAKs4B,MAAOt4B,KAAKuN,O,mBAGzD,WACIvN,KAAKw4B,+B,KCjCQG,G,WAMjB,aAAe,yBALPC,iBAKM,OAJNC,aAIM,OAHNvO,eAGM,OAFNwO,MAAQ,EAGZ94B,KAAK44B,YAAc,EACnB54B,KAAK64B,SAAU,E,sCAGnB,WACI,OAAO74B,KAAK84B,O,IAGhB,SAASC,GACD/4B,KAAK64B,UACL74B,KAAK44B,aAAe54B,KAAKg5B,WACzBh5B,KAAKsqB,UAAY/G,KAAK5gB,OAG1B3C,KAAK84B,MAAQC,I,kBAGjB,SAAKj1B,GACD,OAAI9D,KAAK64B,QACEh1B,KAAKgG,IAAI/F,EAAK9D,KAAK44B,YAAc54B,KAAKg5B,YAG1Cn1B,KAAKgG,IAAI/F,EAAK9D,KAAK44B,e,kBAG9B,WACS54B,KAAK64B,UAIV74B,KAAK64B,SAAU,EACf74B,KAAK44B,aAAe54B,KAAKg5B,c,sBAG7B,WACI,OAAQzV,KAAK5gB,MAAQ3C,KAAKsqB,WAActqB,KAAK84B,Q,mBAGjD,WACI94B,KAAKsqB,UAAY/G,KAAK5gB,MACtB3C,KAAK64B,SAAU,I,qBAGnB,SAAQp2B,GACAzC,KAAK64B,SACL74B,KAAKsqB,UAAY/G,KAAK5gB,MACtB3C,KAAK44B,YAAcn2B,GAEnBzC,KAAK44B,YAAcn2B,I,sBAI3B,SAASqB,GACL,OAAe,IAARA,EAAY,EAAID,KAAKgG,IAAI,EAAG7J,KAAKyC,KAAKqB,GAAOA,O,uWC7BtDm1B,GAAmBlf,aAAW,SAACkC,GAAD,MAAY,CAC5CyK,UAAW,CACPxM,SAAU,WACVgf,KAAM,MACN/nB,MAAO,MACPgoB,OAAQ,EACR/e,cAAe,OACf8L,MAAO,QAEXkT,gBAAiB,CACb5R,cAAe,OAEnB6R,YAAa,CACTnT,MAAO,OACP1a,QAAS,OACTgc,cAAe,SACfvN,eAAgB,SAChB5I,OAAQ,OACRqM,OAAQ,UACR0U,SAAU,GACVkH,WAAY,IAEhBC,YAAa,CACTloB,OAAQ,OACR7F,QAAS,OACTgc,cAAe,SACfvN,eAAgB,SAChBmY,SAAU,GACVkH,WAAY,GACZnoB,MAAO,IACP+U,MAAO,OACP9L,cAAe,QAEnBof,0BAA2B,CACvBhL,WAAYvS,EAAMwS,YAAYC,OAAO,SAAU,CAC3CC,OAAQ1S,EAAMwS,YAAYE,OAAOC,MACjCC,SAAU5S,EAAMwS,YAAYI,SAAS4K,QAEzCnL,YAAa,EACblU,cAAe,QAEnBsf,2BAA4B,CACxBlL,WAAYvS,EAAMwS,YAAYC,OAAO,SAAU,CAC3CC,OAAQ1S,EAAMwS,YAAYE,OAAOC,MACjCC,SAAU5S,EAAMwS,YAAYI,SAAS4K,QAEzCnL,YAAa,EACblU,cAAe,QAEnBuf,kBAAmB,CACfnL,WAAYvS,EAAMwS,YAAYC,OAAO,QAAS,CAC1CC,OAAQ1S,EAAMwS,YAAYE,OAAOC,MACjCC,SAAU5S,EAAMwS,YAAYI,SAAS4K,QAEzCtoB,MAAO,EACPiJ,cAAe,QAEnBwf,iBAAkB,CACdpL,WAAYvS,EAAMwS,YAAYC,OAAO,QAAS,CAC1CC,OAAQ1S,EAAMwS,YAAYE,OAAOM,QACjCJ,SAAU5S,EAAMwS,YAAYI,SAAS4K,QAEzCtoB,MAAO,IACPiJ,cAAe,QAEnByf,uBAAwB,CACpBrL,WAAYvS,EAAMwS,YAAYC,OAAO,aAAc,CAC/CC,OAAQ1S,EAAMwS,YAAYE,OAAOC,MACjCC,SAAU5S,EAAMwS,YAAYI,SAAS4K,QAEzCnH,QAAS,EACTlY,cAAe,QAEnB0f,sBAAuB,CACnBtL,WAAYvS,EAAMwS,YAAYC,OAAO,aAAc,CAC/CC,OAAQ1S,EAAMwS,YAAYE,OAAOM,QACjCJ,SAAU5S,EAAMwS,YAAYI,SAAS4K,QAEzCnH,QAAS,EACTlY,cAAe,QAEnB2f,aAAc,CACV/R,WAAY,0FACZ9N,SAAU,WACVgf,KAAM,QACN/nB,MAAO,OACPkJ,OAAQ,IAEZ8W,OAAQ,CACJ/W,cAAe,QAEnB4f,eAAgB,CACZ9T,MAAO,wBACP9L,cAAe,QAEnB6f,kBAAmB,CACf/T,MAAO,2BACP9L,cAAe,QAEnB8f,SAAU,CACNC,OAAQ,GAEZC,UAAW,CACPhgB,cAAe,OACf8L,MAAO,QAEXmU,cAAe,CACXjgB,cAAe,OACfsE,QAAS,OAIX4b,GAAuBvgB,aAAW,SAACkC,GAAD,MAAY,CAChDjC,KAAM,CACF3I,OAAQ,IAEZqV,UAAW,CACPrV,OAAQ,GACR+I,cAAe,OACf5O,QAAS,OACTyO,eAAgB,SAChBuN,cAAe,SACftN,SAAU,WACV/I,MAAO,oBACPmoB,WAAY,IAEhBiB,mBAAoB,CAChBlgB,OAAQ,EACRhJ,OAAQ,GACRqM,OAAQ,UACRtD,cAAe,OACfF,SAAU,WACV/I,MAAO,QAEXqpB,cAAe,CACXxS,WAAY,qBACZ7W,MAAO,OACPE,OAAQ,EACR6I,SAAU,YAEdugB,mBAAoB,CAChBjM,WAAYvS,EAAMwS,YAAYC,OAAO,SAAU,CAC3CC,OAAQ1S,EAAMwS,YAAYE,OAAO+L,UACjC7L,SAAU,KAEdxd,OAAQ,GAEZspB,KAAM,CACF3S,WAAY,6CACZ3W,OAAQ,QAEZupB,gBAAiB,CACb1gB,SAAU,WACV1O,QAAS,OACTyO,eAAgB,SAChBuN,cAAe,SACfnW,OAAQ,OACR8nB,OAAQ,GAEZ0B,OAAQ,CACJC,aAAc,MACd3pB,MAAO,GACPE,OAAQ,GACRihB,QAAS,EACT4G,MAAO,EACPlR,WAAY,QACZ9N,SAAU,YAEd6gB,SAAU,CACNzI,QAAS,EACT9D,WAAYvS,EAAMwS,YAAYC,OAAO,UAAW,CAC5CC,OAAQ1S,EAAMwS,YAAYE,OAAO+L,UACjC7L,SAAU5S,EAAMwS,YAAYI,SAASmM,gBAK3CC,GAAe9b,cAAW,SAAClD,GAAD,MAAY,CACxCjC,KAAM,CACFkM,MAAO,QACPgV,cAAe,UAEnBC,MAAO,CACHxc,gBAAiB,QACjBuH,MAAO,QACP,UAAW,CACPkV,UAAW,WAEf,oBAAqB,CACjBA,UAAW,6CAGnBC,OAAQ,CACJnV,MAAO,YAhBM/G,CAkBjByH,MAEJ,SAAS0U,GAAYxI,GACjB,IAAMxqB,EAAUzE,KAAK4E,MAAMqqB,EAAe,KACpCnqB,EAAU9E,KAAK4E,MAAMH,EAAU,IAC/BizB,EAAkBjzB,EAAU,GAClC,OAAOO,OAAOF,GAAW,IAAME,OAAO0yB,GAAiBzyB,SAAS,EAAG,KAavE,SAAS0yB,GAAT,GAA2D,IAApCC,EAAmC,EAAnCA,OAAQvkB,EAA2B,EAA3BA,MACrBsD,EAAU8f,KAChB,EAAkCl7B,oBAAS,GAA3C,mBAAOs8B,EAAP,KAAkBC,EAAlB,KACMC,EAAeC,iBAAO,MAEtBC,EAAcvgB,uBAChB,SAAC/U,GACG,IAAMu1B,EAAOv1B,EAAEiqB,cAAc9N,wBAEvBxR,EAAQ4qB,EAAKC,MAAQD,EAAK7C,KAAO,GACjCgB,EAAWr2B,KAAKgG,IAAI,EAAGhG,KAAKC,IAAI,GAAI0C,EAAEy1B,MAAQF,EAAK7C,KAAO,IAAM/nB,IACtEsqB,EAAOvB,KAEX,CAACuB,IAGCS,EAAkB3gB,uBAAY,kBAAMogB,GAAa,KAAO,IACxDQ,EAAiB5gB,uBAAY,kBAAMogB,GAAa,KAAQ,IACxDS,EAAgBR,EAAahZ,QA5BvC,SAAsBF,GAClB,IAAMqZ,EAAOrZ,EAAQC,wBACrB,OAAOoZ,EAAKC,MAAQD,EAAK7C,KA0BqBmD,CAAaT,EAAahZ,SAAW1L,EAAS,IAAM,EAC5FolB,EAAY,CAAEnrB,MAAOirB,GACrBG,EAAc,CAAEjD,WAAY8C,GAC5BI,EAAyBd,EACzBlhB,EAAQggB,cAAgB,IAAMhgB,EAAQigB,mBACtCjgB,EAAQggB,cACRiC,EAAkBf,EAAYlhB,EAAQqgB,OAAS,IAAMrgB,EAAQugB,SAAWvgB,EAAQqgB,OAEtF,OACI,uBAAK/f,UAAWN,EAAQR,KAAxB,UACI,sBAAKiM,IAAK2V,EAAc9gB,UAAWN,EAAQkM,UAA3C,SACI,uBAAK5L,UAAW0hB,EAAhB,UACI,sBAAK1hB,UAAWN,EAAQmgB,KAAMpvB,MAAO+wB,IACrC,sBAAKxhB,UAAWN,EAAQogB,gBAAxB,SACI,sBAAK9f,UAAW2hB,EAAiBlxB,MAAOgxB,WAIpD,sBACIzhB,UAAWN,EAAQ+f,mBACnB9U,QAASqW,EACTY,YAAaR,EACbS,WAAYR,OAe5B,SAASS,GAAT,GAO6B,IANzBliB,EAMwB,EANxBA,KACAoW,EAKwB,EALxBA,SACAnhB,EAIwB,EAJxBA,YACAktB,EAGwB,EAHxBA,mBACAC,EAEwB,EAFxBA,qBACAliB,EACwB,EADxBA,QAEA,IAAKjL,GAAsC,IAAvBA,EAAYhO,OAC5B,OAAO,KAGX,IAAMo7B,EAAOptB,EAAYhF,KAAI,SAACyB,GAC1B,OACI,gBAAC8kB,GAAA,EAAD,CAEI8L,SAAU5wB,EAAEwD,KAAOitB,EACnB1L,QAAM,EACN1L,QAAS,kBAAMqX,EAAqB1wB,EAAEwD,KAJ1C,UAMKxD,EAAE6wB,SANP,IAMkB7wB,EAAE6R,QALX7R,EAAEwD,OAUnB,OACI,+BACI,eAACihB,GAAA,EAAD,CACIlL,qBAAqB,EACrBjL,KAAMA,EACNoW,SAAUA,EACVlW,QAASA,EACTmW,aAAc,CACVC,SAAU,MACVC,WAAY,UAEhBoE,gBAAiB,CACbrE,SAAU,SACVC,WAAY,UAXpB,SAcI,eAAC,KAAD,UAAO8L,QAevB,SAASG,GAAT,GAAuG,IAAhFxiB,EAA+E,EAA/EA,KAAMoW,EAAyE,EAAzEA,SAAUlW,EAA+D,EAA/DA,QAASuiB,EAAsD,EAAtDA,KAAMC,EAAgD,EAAhDA,YAAaC,EAAmC,EAAnCA,cAC/D,IAAKF,GAAwB,IAAhBA,EAAKx7B,OACd,OAAO,KAGX,IAAMo7B,EAAOI,EAAKxyB,KAAI,SAACyB,GACnB,OACI,gBAAC8kB,GAAA,EAAD,CAEI8L,SAAUI,GAAehxB,EAAEwD,KAAOwtB,EAAYxtB,IAAMxD,EAAEmB,MAAQ6vB,EAAY7vB,IAC1E4jB,QAAM,EACN1L,QAAS,kBAAM4X,EAAcjxB,IAJjC,UAMKA,EAAEwD,GANP,IAMYxD,EAAE2Q,MANd,IAMsB3Q,EAAEmB,MANxB,UACYnB,EAAEwD,GADd,YACoBxD,EAAEmB,SAU9B,OACI,+BACI,eAACsjB,GAAA,EAAD,CACIlL,qBAAqB,EACrBjL,KAAMA,EACNoW,SAAUA,EACVlW,QAASA,EACTmW,aAAc,CACVC,SAAU,MACVC,WAAY,UAEhBoE,gBAAiB,CACbrE,SAAU,SACVC,WAAY,UAXpB,SAcI,eAAC,KAAD,UAAO8L,QAcvB,SAASO,GAAT,GAAyF,IAAhE5iB,EAA+D,EAA/DA,KAAMoW,EAAyD,EAAzDA,SAAUyM,EAA+C,EAA/CA,SAAU3iB,EAAqC,EAArCA,QAAS7M,EAA4B,EAA5BA,KACxD,OACI,+BACI,eAAC8iB,GAAA,EAAD,CACIlL,qBAAqB,EACrBjL,KAAMA,EACNoW,SAAUA,EACVlW,QAASA,EACTmW,aAAc,CACVC,SAAU,MACVC,WAAY,UAEhBoE,gBAAiB,CACbrE,SAAU,SACVC,WAAY,UAXpB,SAcI,eAAC,KAAD,UACI,gBAACC,GAAA,EAAD,CAAUC,QAAM,EAAC1L,QAAS,SAACjf,GAAD,OAAO+2B,KAAjC,oBACYxvB,WAgBhC,SAASyvB,GAAT,GAA6G,IAAjF9iB,EAAgF,EAAhFA,KAAMoW,EAA0E,EAA1EA,SAAU2M,EAAgE,EAAhEA,iBAAkBC,EAA8C,EAA9CA,WAAY9iB,EAAkC,EAAlCA,QACtE,OACI,+BACI,eAACiW,GAAA,EAAD,CACIlL,qBAAqB,EACrBjL,KAAMA,EACNoW,SAAUA,EACVlW,QAASA,EACTmW,aAAc,CACVC,SAAU,MACVC,WAAY,UAEhBoE,gBAAiB,CACbrE,SAAU,SACVC,WAAY,UAXpB,SAcI,gBAAC,KAAD,WACI,eAACC,GAAA,EAAD,CACI8L,SAAUS,IAAqB5pB,GAAS8pB,OACxCxM,QAAM,EACN1L,QAAS,SAACjf,GAAD,OAAOk3B,EAAW7pB,GAAS8pB,SAHxC,oBAOA,eAACzM,GAAA,EAAD,CACI8L,SAAUS,IAAqB5pB,GAAS+pB,UACxCzM,QAAM,EACN1L,QAAS,SAACjf,GAAD,OAAOk3B,EAAW7pB,GAAS+pB,YAHxC,uBAOA,eAAC1M,GAAA,EAAD,CACI8L,SAAUS,IAAqB5pB,GAASgqB,UACxC1M,QAAM,EACN1L,QAAS,SAACjf,GAAD,OAAOk3B,EAAW7pB,GAASgqB,YAHxC,+BAuEL,SAASC,GAAT,GAmDI,IAlDfC,EAkDc,EAlDdA,MACAC,EAiDc,EAjDdA,QACAr8B,EAgDc,EAhDdA,OACAs8B,EA+Cc,EA/CdA,cACAC,EA8Cc,EA9CdA,cACAv0B,EA6Cc,EA7CdA,OACA4C,EA4Cc,EA5CdA,aACA4xB,EA2Cc,EA3CdA,oBACArB,EA0Cc,EA1CdA,qBACArB,EAyCc,EAzCdA,OACA2C,EAwCc,EAxCdA,iBACAC,EAuCc,EAvCdA,OACAC,EAsCc,EAtCdA,QACA74B,EAqCc,EArCdA,OACA43B,EAoCc,EApCdA,cACAkB,EAmCc,EAnCdA,cACAC,EAkCc,EAlCdA,cACAj7B,EAiCc,EAjCdA,eACAk7B,EAgCc,EAhCdA,qBACAC,EA+Bc,EA/BdA,eACAC,EA8Bc,EA9BdA,iBACAC,EA6Bc,EA7BdA,oBACAC,EA4Bc,EA5BdA,aACAjkB,EA2Bc,EA3BdA,QACAkkB,EA0Bc,EA1BdA,cACAC,EAyBc,EAzBdA,SACAC,EAwBc,EAxBdA,gBACAtB,EAuBc,EAvBdA,WACAuB,EAsBc,EAtBdA,iBACAC,EAqBc,EArBdA,gBACAC,EAoBc,EApBdA,kBACA1J,EAmBc,EAnBdA,UACAC,EAkBc,EAlBdA,UACA/lB,EAiBc,EAjBdA,YACAktB,EAgBc,EAhBdA,mBACAM,EAec,EAfdA,KACAC,EAcc,EAddA,YACAgC,EAac,EAbdA,cACAC,EAYc,EAZdA,OACAC,EAWc,EAXdA,eACAC,EAUc,EAVdA,kBACAC,EASc,EATdA,WACAC,EAQc,EARdA,mBACAC,EAOc,EAPdA,gCACAC,EAMc,EANdA,qBACAC,EAKc,EALdA,2BACAC,EAIc,EAJdA,oBACAC,EAGc,EAHdA,yBACAC,EAEc,EAFdA,mBACAC,EACc,EADdA,oBAEMxlB,GAAUye,KAChB,GAAwB75B,oBAAkB,GAA1C,qBAAOowB,GAAP,MAAayQ,GAAb,MACA,GAA4D7gC,oBAAkB,GAA9E,qBAAO8gC,GAAP,MAA+BC,GAA/B,MACA,GAAoE/gC,qBAApE,qBAAOghC,GAAP,MAAmCC,GAAnC,MACA,GAA8CjhC,oBAAkB,GAAhE,qBAAOkhC,GAAP,MAAwBC,GAAxB,MACA,GAAsDnhC,qBAAtD,qBAAOohC,GAAP,MAA4BC,GAA5B,MACA,GAAkDrhC,oBAAkB,GAApE,qBAAOshC,GAAP,MAA0BC,GAA1B,MACA,GAA0DvhC,qBAA1D,qBAAOwhC,GAAP,MAA8BC,GAA9B,MACA,GAAkDzhC,oBAAkB,GAApE,qBAAO0hC,GAAP,MAA0BC,GAA1B,MACA,GAA0D3hC,qBAA1D,qBAAO4hC,GAAP,MAA8BC,GAA9B,MACA,GAAwD7hC,oBAAkB,GAA1E,qBAAO8hC,GAAP,MAA6BC,GAA7B,MACA,GAAgE/hC,qBAAhE,qBAAOgiC,GAAP,MAAiCC,GAAjC,MACA,GAA0CjiC,oBAAkB,GAA5D,qBAAOkiC,GAAP,MAAsBC,GAAtB,MACA,GAA4BniC,mBAAiB,KAA7C,qBAAOoiC,GAAP,MAAeC,GAAf,MACA,GAAsDriC,mBAAiB,KAAvE,qBAAOsiC,GAAP,MAA4BC,GAA5B,MAEMC,GAAuB/F,iBAAc,CAAEgG,EAAG,EAAGC,EAAG,IAChDC,GAAuBlG,iBAAetY,KAAK5gB,OAC3Cq/B,GAAoCnG,iBAAetY,KAAK5gB,OACxDs/B,GAAcpG,kBAAgB,GAC9BqG,GAAerG,kBAAgB,GACrC,GAAgDz8B,mBAAiB,GAAjE,qBAAO+iC,GAAP,MAAyBC,GAAzB,MACA,GAA4DhjC,mBAAiB,GAA7E,qBAAOijC,GAAP,MAA+BC,GAA/B,MACMC,GAAiB1G,mBACjB2G,GAAuB3G,mBACvBD,GAAeC,iBAAuB,MACtC4G,GAAiB5G,iBAA0B,MACjD,GAAwBz8B,qBAAfsjC,GAAT,qBACMC,GAAcpnB,uBAAY,kBAAMmnB,GAAY,MAAK,IAEjDE,GAAarnB,uBACf,SAAC2e,GACGuB,EAAOvB,KAEX,CAACuB,IAGL,SAASS,KACLgG,GAAatf,SAAU,EAG3B,SAASuZ,KACL+F,GAAatf,SAAU,EAG3BnI,qBAAU,WACN,IAAMooB,EAAchgC,OAAO+7B,EAAoB4C,QAC/CC,GAAUoB,GACVnE,EAAemE,EAAc,KAEzBA,EAAc,GACdlB,GAAuBkB,KAE5B,CAACjE,EAAqBF,IAEzBjkB,qBAAU,WACN,IAAMlQ,EAAWu4B,aAAY,WACzB,IAAIC,EAQG,EANHlD,EACAkD,EACIxf,KAAK5gB,MAAQo/B,GAAqBnf,QAAU,KAC5C/e,KAAKm/B,IAAI5E,EAAiBxb,QAAQif,EAAID,GAAqBhf,QAAQif,EAAG,GAClEh+B,KAAKm/B,IAAI5E,EAAiBxb,QAAQkf,EAAIF,GAAqBhf,QAAQkf,EAAG,GACtE,IAERiB,EAAW,UACLnH,GAAahZ,SAAWwb,EAAiBxb,QAAQkf,EAAIlG,GAAahZ,QAAQqgB,UAAY,IACnFR,GAAe7f,SACZwb,EAAiBxb,QAAQkf,EAAIW,GAAe7f,QAAQsgB,aAAe,UAHpE,UAOfH,EACIA,GACAb,GAAatf,SACb2f,GAAe3f,UAAYzX,SAASg4B,eACpCX,GAAqB5f,UAAYzX,SAASg4B,eAC1C5f,KAAK5gB,MAAQq/B,GAAkCpf,QAAU,OAEzCqf,GAAYrf,SAC5Bmf,GAAqBnf,QAAUW,KAAK5gB,MACpCs9B,GAAQ8C,KACAA,GAAed,GAAYrf,SACnCqd,GAAQ8C,GAGZd,GAAYrf,QAAUmgB,EACtBnB,GAAqBhf,QAAQif,EAAIzD,EAAiBxb,QAAQif,EAC1DD,GAAqBhf,QAAQkf,EAAI1D,EAAiBxb,QAAQkf,IAC3D,KACH,OAAO,kBAAMsB,cAAc74B,MAC5B,CAAC6zB,EAAkByB,IAEtBplB,qBAAU,yBAAM4jB,QAAN,IAAMA,OAAN,EAAMA,EAAS7O,MAAO,CAAC6O,EAAQ7O,KAEzC,IAAM6T,GAAe9nB,uBAAY,SAAC5R,GAC9B,GAAI44B,GAAe3f,QAAS,CACxB,GAAe,IAAXjZ,EACA44B,GAAe3f,QAAQ1L,MAAQ,GAC/BkrB,GAAoB,OACjB,CACH,IAAMkB,EAAgB35B,EAAS,IACzBuN,EAAQosB,GAAiB,EAAI,IAAMA,EAAcC,QAAQ,GAAK16B,OAAOy6B,EAAcC,QAAQ,IACjGhB,GAAe3f,QAAQ1L,MAAQA,EAC/B8qB,GAAkCpf,QAAUW,KAAK5gB,MACjDy/B,GAAoBlrB,EAAMvV,QAE9B4gC,GAAe3f,QAAQ4gB,UAE5B,IAEGC,GAAqBloB,uBAAY,SAAChP,GACpC,GAAIi2B,GAAqB5f,QAAS,CAC9B,GAAqB,IAAjBrW,EACAi2B,GAAqB5f,QAAQ1L,MAAQ,GACrCorB,GAA0B,OACvB,CACH,IAAMprB,EAAQ,OAAMrO,OAAO0D,EAAag3B,QAAQ,IAChDf,GAAqB5f,QAAQ1L,MAAQA,EACrC8qB,GAAkCpf,QAAUW,KAAK5gB,MACjD2/B,GAA0BprB,EAAMvV,QAEpC6gC,GAAqB5f,QAAQ4gB,UAElC,IAEH/oB,qBAAU,WACN,IAAIkkB,EAsCJ,OAFAl/B,OAAOG,iBAAiB,UAAW8jC,GAE5B,WACHjkC,OAAOI,oBAAoB,UAAW6jC,IAnC1C,SAASA,EAAU7iC,GACf,GAAkB,UAAdA,EAAM01B,IACN,GAAIgM,GAAe3f,UAAYzX,SAASg4B,cAAe,CACnD,IAAMQ,EAAY9gC,OAAO0/B,GAAe3f,QAAQ1L,OAEhD,GAAIysB,IAAch6B,EAEd,YADA05B,GAAa15B,GAIjB,GAAI9G,OAAO+gC,MAAMD,GACb,OAGJpgC,EAA2B,IAAZogC,QACZ,GAAInB,GAAqB5f,UAAYzX,SAASg4B,cAAe,CAChE,IAAMU,EAAkBhhC,OAAO2/B,GAAqB5f,QAAQ1L,OAE5D,GAAI3K,IAAiBs3B,EAEjB,YADAJ,GAAmBl3B,GAIvB,GAAI1J,OAAO+gC,MAAMC,IAAoBA,EAAkB,IAAOA,EAAkB,EAC5E,OAGJpF,EAAqBoF,OAUlC,CACCtgC,EACAk7B,EACA4E,GACAI,GACA95B,EACA4C,EACAoyB,IAGJ,IAAMmF,GAA2BvoB,uBAAY,SAAC/U,GAA2C,IAAD,EAC9Eu9B,EAAev9B,EAAEG,OACvBo9B,EAAaC,kBAAkB,GAAG,UAAAD,EAAa7sB,aAAb,eAAoBvV,SAAU,KACjE,IAEH8Y,qBAAU,WACN,IAAMlQ,EAAWu4B,aAAY,WACzBH,OACD,KAEH,OAAO,kBAAMS,cAAc74B,MAC5B,CAACo4B,KAEJloB,qBAAU,WACN4oB,GAAa15B,KACd,CAACA,EAAQ05B,KAEZ5oB,qBAAU,WACNgpB,GAAmBl3B,KACpB,CAACA,EAAck3B,KAElB,IAAMQ,GAAiC1oB,uBAAY,WAC/C8kB,QAA8B79B,GAC9B29B,IAA0B,KAC3B,IAEG+D,GAAiC3oB,uBAAY,SAAC/U,GAChD65B,GAA8B75B,EAAEiqB,eAChC0P,IAA0B,KAC3B,IAEGgE,GAA2B5oB,uBAC7B,SAAC3L,GACGktB,EAAqBltB,GACrBywB,QAA8B79B,GAC9B29B,IAA0B,KAE9B,CAACrD,IAGCsH,GAA0B7oB,uBAAY,WACxCklB,QAAuBj+B,GACvB+9B,IAAmB,KACpB,IAEG8D,GAA0B9oB,uBAAY,SAAC/U,GACzCi6B,GAAuBj6B,EAAEiqB,eACzB8P,IAAmB,KACpB,IAEG+D,GAAoB/oB,uBACtB,SAACgpB,GACgB,OAAblH,QAAa,IAAbA,KAAgBkH,GAChB9D,QAAuBj+B,GACvB+9B,IAAmB,KAEvB,CAAClD,IAGCmH,GAA4BjpB,uBAAY,WAC1CslB,QAAyBr+B,GACzBm+B,IAAqB,KACtB,IAEG8D,GAA4BlpB,uBAAY,SAAC/U,GAC3Cq6B,GAAyBr6B,EAAEiqB,eAC3BkQ,IAAqB,KACtB,IAEG+D,GAAoBnpB,uBAAY,WACrB,OAAbgjB,QAAa,IAAbA,OACAoC,IAAqB,KACtB,CAACpC,IAEEoG,GAA4BppB,uBAAY,WAC1C0lB,QAAyBz+B,GACzBu+B,IAAqB,KACtB,IAEG6D,GAA4BrpB,uBAAY,SAAC/U,GAC3Cy6B,GAAyBz6B,EAAEiqB,eAC3BsQ,IAAqB,KACtB,IAEG8D,GAAoBtpB,uBAAY,WACrB,OAAbijB,QAAa,IAAbA,OACAuC,IAAqB,KACtB,CAACvC,IAEEsG,GAA+BvpB,uBAAY,WAC7C8lB,QAA4B7+B,GAC5B2+B,IAAwB,KACzB,IAEG4D,GAA+BxpB,uBAAY,SAAC/U,GAC9C66B,GAA4B76B,EAAEiqB,eAC9B0Q,IAAwB,KACzB,IAEG6D,GAAyBzpB,uBAC3B,SAACwjB,GACa,OAAVrB,QAAU,IAAVA,KAAaqB,GACbsC,QAA4B7+B,GAC5B2+B,IAAwB,KAE5B,CAACzD,IAGCuH,GAAuB1pB,uBAAY,kBAAMgmB,IAAiB,KAAQ,IAClE2D,GAAwB3pB,uBAAY,kBAAMgmB,IAAiB,KAAO,IAElE4D,GAAqB5pB,uBACvB,SAAC/U,EAA0B0Q,GACF,kBAAVA,IAIXuqB,GAAUvqB,GACVwnB,EAAexnB,EAAQ,QAE3B,CAACwnB,IAGC0G,GAA8B7pB,uBAChC,SAAC/U,EAA0B0Q,GACF,kBAAVA,IAIPA,EAAQ,GACRyqB,GAAuBzqB,GAG3B0nB,EAAoB4C,OAAStqB,KAEjC,CAAC0nB,IAGCyG,GAAqB9pB,uBAAY,WACnCkmB,IAAU,SAACD,GACP,IAAM8D,EAAY9D,EAAS,EAAI,EAAIE,GAEnC,OADAhD,EAAe4G,EAAY,KACpBA,OAEZ,CAAC5G,EAAgBgD,KAEdxH,GAAW6D,EAAM7D,SAASv4B,GAEhC,OACI,gBAAC,IAAMm1B,SAAP,WACI,eAAC3O,GAAA,EAAD,CAAMnN,GAAIwU,GAAM7U,QAAS,IAAzB,SACI,gBAAC8L,GAAA,EAAD,CAAMC,WAAS,EAACnb,MAAO,CAAE2O,SAAU,WAAYC,IAAK,GAApD,UACI,eAACsM,GAAA,EAAD,CAAME,MAAI,EAACpb,MAAO,CAAEiS,SAAU,GAA9B,SACKqhB,GACG,eAACrZ,GAAA,EAAD,CACIS,IAAKwc,GACLvc,MAAM,UACNpL,UAAWN,GAAQ4f,UACnB3U,QAAS7K,EACT8hB,YAAaR,GACbS,WAAYR,GANhB,SAQI,eAAC,KAAD,QAIZ,gBAAC1V,GAAA,EAAD,CAAME,MAAI,EAAV,UACKmZ,GACG,eAACta,GAAA,EAAD,CACIU,MAAM,UACNpL,UAAWilB,EAAqBvlB,GAAQ4f,UAAY5f,GAAQyf,kBAC5DxU,QAASua,EACTtD,YAAaR,GACbS,WAAYR,GALhB,SAOI,eAAC,KAAD,MAGPuD,GACG,eAACla,GAAA,EAAD,CACIU,MAAM,UACNpL,UAAWN,GAAQ4f,UACnB3U,QAASma,EACTlD,YAAaR,GACbS,WAAYR,GALhB,SAOKwD,EAAuB,eAAC,KAAD,IAAoB,eAAC,KAAD,cAMhE,uBACI1Z,IAAK2V,GACL9gB,UAAWN,GAAQkM,UACnBgW,YAAaR,GACbS,WAAYR,GAJhB,UAMI,eAAChU,GAAA,EAAD,CAAMnN,GAAIwU,GAAM7U,QAAS,IAAzB,SACI,uBAAKG,UAAWN,GAAQuf,aAAxB,UACI,eAACyB,GAAD,CAAaC,OAAQmH,GAAY1rB,MAAkB,IAAXgjB,KACxC,gBAACzT,GAAA,EAAD,CAAMC,WAAS,EAAC5L,UAAWN,GAAQ6f,cAAelwB,UAAU,MAA5D,UACI,eAACsc,GAAA,EAAD,CAAME,MAAI,EAAV,SACI,eAACnB,GAAA,EAAD,CAAYU,MAAM,UAAUT,QAAS,kBAAOuY,EAAUM,IAAY74B,KAAlE,SACKu4B,EACG,eAAC,KAAD,CAAWljB,UAAWN,GAAQ2W,SAE9B,eAAC,KAAD,CAAerW,UAAWN,GAAQ2W,aAI7C2N,GACG,gBAACrY,GAAA,EAAD,CACIE,MAAI,EACJ+V,YAAawI,GACbvI,WAAYsI,GACZnqB,UACIwmB,GACM9mB,GAAQgf,0BACRhf,GAAQkf,2BAPtB,UAUI,eAAClU,GAAA,EAAD,CAAYU,MAAM,UAAUT,QAAS4f,GAArC,SACgB,IAAX7D,GAAe,eAAC,KAAD,IAAoB,eAAC,KAAD,MAExC,eAACvG,GAAD,CACIlf,SAAUopB,GACVI,kBAAmBH,GACnBluB,MAAOsqB,GACPgE,aAAc,IACdhrB,QAAS,CACLR,KAAMsnB,GAAgB9mB,GAAQof,iBAAmBpf,GAAQmf,kBACzDwB,MAAOmG,GACD9mB,GAAQsf,sBACRtf,GAAQqf,6BAK9B,eAACpT,GAAA,EAAD,CAAME,MAAI,EAAV,SACI,uBAAK7L,UAAWN,GAAQ6e,YAAxB,UACKiC,GAAYpB,GAAWv4B,GAD5B,MACwC25B,GAAY4C,GAAiBv8B,QAGxEs8B,GACG,eAACxX,GAAA,EAAD,CAAME,MAAI,EAAV,SACI,eAACrI,GAAA,EAAD,CAASvB,MAAM,kBAAf,SACI,eAAC0oB,GAAA,EAAD,CACIl6B,MAAO,CACH4F,MAAM,GAAD,OAAKgxB,GAAL,OAETuD,SAAUnD,GACVoD,kBAAkB,EAClB7qB,UAAWN,GAAQ+e,YACnBqM,YAAa,OAAM/iC,OAAO,GAAG0gC,QAAQ,GACrC9d,QAASqe,GACT/nB,SAAU,SAACvV,GAAD,OAAO47B,GAAoBv+B,KAAKC,IAAI,EAAG0C,EAAEG,OAAOuQ,MAAMvV,gBAK/Ew8B,GACG,eAAC1X,GAAA,EAAD,CAAME,MAAI,EAAV,SACI,eAACrI,GAAA,EAAD,CAASvB,MAAM,gBAAf,SACI,eAAC0oB,GAAA,EAAD,CACIl6B,MAAO,CACH4F,MAAM,GAAD,OAAKkxB,GAAL,MACL/I,WAAY,GAEhBoM,SAAUlD,GACVmD,kBAAkB,EAClB7qB,UAAWN,GAAQ+e,YACnBqM,YAAa,OAAM/iC,OAAO,GAAG0gC,QAAQ,GACrC9d,QAASqe,GACT/nB,SAAU,SAACvV,GAAD,OACN87B,GAA0Bz+B,KAAKC,IAAI,EAAG0C,EAAEG,OAAOuQ,MAAMvV,gBAMzE,eAAC8kB,GAAA,EAAD,CAAME,MAAI,EAACpb,MAAO,CAAEiS,SAAU,KAC7B0hB,GACG,eAACzY,GAAA,EAAD,CAAME,MAAI,EAAV,SACI,eAACnB,GAAA,EAAD,CAAYU,MAAM,UAAUT,QAAS0Z,EAArC,SACI,eAAC,KAAD,CACIrkB,UAAWmkB,EAAmBzkB,GAAQ2W,OAAS3W,GAAQwf,qBAKtEvE,GACG,eAAChP,GAAA,EAAD,CAAME,MAAI,EAAV,SACI,eAACnB,GAAA,EAAD,CAAYU,MAAM,UAAUT,QAASmf,GAArC,SACI,eAAC,KAAD,CAAc9pB,UAAWN,GAAQ2W,aAI5CuE,GACG,eAACjP,GAAA,EAAD,CAAME,MAAI,EAAV,SACI,eAACnB,GAAA,EAAD,CAAYU,MAAM,UAAUT,QAASgf,GAArC,SACI,eAAC,KAAD,CAAgB3pB,UAAWN,GAAQ2W,aAI9CxhB,GAAeA,EAAYhO,OAAS,GACjC,eAAC8kB,GAAA,EAAD,CAAME,MAAI,EAAV,SACI,eAACnB,GAAA,EAAD,CAAYU,MAAM,UAAUT,QAASye,GAArC,SACI,eAAC,KAAD,CAAgBppB,UAAWN,GAAQ2W,aAI9CgM,GAAQA,EAAKx7B,OAAS,GACnB,eAAC8kB,GAAA,EAAD,CAAME,MAAI,EAAV,SACI,eAACnB,GAAA,EAAD,CAAYU,MAAM,UAAUT,QAAS4e,GAArC,SACI,eAAC,KAAD,CACIvpB,UAAWsiB,EAAc5iB,GAAQ2W,OAAS3W,GAAQwf,qBAKjEgF,GACG,eAACvY,GAAA,EAAD,CAAME,MAAI,EAAV,SACI,eAACnB,GAAA,EAAD,CAAYU,MAAM,UAAUT,QAASsf,GAArC,SACI,eAAC,KAAD,CACIjqB,UAAWkkB,EAAkBxkB,GAAQ2W,OAAS3W,GAAQwf,qBAKrEoF,GACG,eAAC3Y,GAAA,EAAD,CAAME,MAAI,EAAV,SACI,eAACnB,GAAA,EAAD,CAAYU,MAAM,UAAUT,QAAS6Z,EAArC,SACI,eAAC,KAAD,CACIxkB,UAAWN,GAAQ2W,OACnB5lB,MAAO8zB,EAAS,CAAEzhB,UAAW,mBAAsB,SAKlE2hB,GACG,eAAC9Y,GAAA,EAAD,CAAME,MAAI,EAAV,SACI,eAACnB,GAAA,EAAD,CAAYU,MAAM,UAAUT,QAASga,EAArC,SACKD,EACG,eAAC,KAAD,CAAoB1kB,UAAWN,GAAQ2W,SAEvC,eAAC,KAAD,CAAgBrW,UAAWN,GAAQ2W,qBAQ/D,eAAC+L,GAAD,CACIxiB,KAAM4lB,IAAmB9Q,GACzBsB,SAAU0P,GACVrD,KAAMA,EACNC,YAAaA,EACbxiB,QAASwpB,GACT/G,cAAeiH,KAEnB,eAAC1H,GAAD,CACIliB,KAAMwlB,IAA0B1Q,GAChCsB,SAAUsP,GACVzwB,YAAaA,EACbktB,mBAAoBA,EACpBjiB,QAASqpB,GACTnH,qBAAsBqH,KAE1B,eAAC7G,GAAD,CACI5iB,KAAMgmB,GACN5P,SAAU8P,GACV7yB,KAAM2nB,EACN9a,QAAS4pB,GACTjH,SAAUmH,KAEd,eAACpH,GAAD,CACI5iB,KAAMomB,GACNhQ,SAAUkQ,GACVjzB,KAAM0nB,EACN7a,QAAS+pB,GACTpH,SAAUsH,KAEd,eAACrH,GAAD,CACI9iB,KAAMwmB,IAAwB1R,GAC9BsB,SAAUsQ,GACV3D,iBAAkBsB,EAClBnkB,QAASkqB,GACTpH,WAAYsH,W,IC9nCXa,G,WAIjB,WAAY5f,GAA2C,yBAHtCA,SAGqC,OAFrC6f,mBAEqC,EAClD9lC,KAAKimB,IAAMA,EACXjmB,KAAK8lC,cAAgB,G,+EAGzB,WAAWrjC,GAAX,oBAAA2D,EAAA,+EACW,IAAIH,SAAQ,SAACC,EAASC,GACrB,EAAK8f,IAAIrD,SACT,EAAKqD,IAAIrD,QAAQhU,YAAcnM,EAC/B,EAAKsjC,iBAAgB,kBAAM7/B,OAAQ1D,OAEnC0D,OAAQ1D,OANpB,2C,mHAWA,iCAAA4D,EAAA,+EACW,IAAIH,SAAQ,SAACC,EAASC,GACrB,EAAK8f,IAAIrD,QACT,EAAKmjB,iBAAgB,kBAAM7/B,OAAQ1D,MAEnC0D,OAAQ1D,OALpB,2C,mFAUA,SAAgBwjC,GAAuB,IAAD,SACG,KAAjC,UAAAhmC,KAAKimB,IAAIrD,eAAT,eAAkBqjB,aAKlBjmC,KAAKimB,IAAIrD,UAAY5iB,KAAKimB,IAAIrD,QAAQ/T,YACtC7O,KAAKimB,IAAIrD,QAAQ/T,UAAY,SAACrI,GAAO,IAAD,gBACV,EAAKs/B,eADK,IAChC,2BAA0C,EACtC5/B,EADsC,YADV,8BAKhC,EAAK4/B,cAAcnkC,OAAS,EAExB,EAAKskB,IAAIrD,UACT,EAAKqD,IAAIrD,QAAQ/T,UAAY,QAKzC7O,KAAK8lC,cAAczgC,KAAK2gC,IAlBpBA,M,kBAqBR,WAAQ,IAAD,EACH,UAAAhmC,KAAKimB,IAAIrD,eAAT,SAAkBlV,S,mBAGtB,WAAS,IAAD,EACJ,UAAA1N,KAAKimB,IAAIrD,eAAT,SAAkBhV,U,0BAGtB,SAAarB,GACLvM,KAAKimB,IAAIrD,UACT5iB,KAAKimB,IAAIrD,QAAQrW,aAAeA,O,uLC5CtC25B,GAA0BnsB,aAAuC,SAACkC,GAAD,MAAY,CAC/EyK,UAAW,CACPrV,OAAQ,qBAAGgW,aAAmC,QAAU,sBACxDnN,SAAU,WACV6Z,UAAW,SACXpV,gBAAiB1C,EAAM2C,QAAQoJ,WAAWme,QAC1Ch1B,MAAO,gBAAGi1B,EAAH,EAAGA,WAAY5pB,EAAf,EAAeA,YAAf,OAAkC4pB,EAAaviC,KAAKC,IAAI,IAAK,IAAO0Y,GAAe,SAE9F6pB,MAAO,CACH1nB,gBAAiB1C,EAAM2C,QAAQoJ,WAAWme,QAC1C7oB,aAAc,IAElBgpB,YAAa,CACTj1B,OAAQ,OACR7F,QAAS,OACTgc,cAAe,SACfvN,eAAgB,SAChBwN,WAAY,SACZ/I,QAAS,GACTgJ,UAAW,cAIb6e,GAAuBxsB,aAAW,SAACkC,GAAD,MAAY,CAChDuqB,YAAa,CACT,UAAW,CACP7nB,gBAAiB1C,EAAM2C,QAAQzG,OAAO8b,QAG9CnzB,SAAU,CACNsxB,SAAU,GACVgC,aAAc,EACdE,SAAU,IACVnjB,MAAO,OACPs1B,aAAc,WACdC,WAAY,YAEhBC,mBAAoB,CAChBvU,SAAU,GACVgC,aAAc,EACdE,SAAU,IACVnjB,MAAO,OACPs1B,aAAc,WACdC,WAAY,YAEhBE,iBAAkB,CACd1gB,MAAO,cACPvH,gBAAiB1C,EAAM2C,QAAQzG,OAAO0G,mBACtCic,aAAc,GAElBzyB,UAAW,CACP+pB,SAAU,GACVlM,MAAO,UACPwB,UAAW,QACX0M,aAAc,GACdD,YAAa,GAEjB0S,WAAY,CACRnf,UAAW,QACXhJ,QAAS,OAqBXooB,GAAcC,IAAMC,MAAK,SAACzsB,GAC5B,IACIvR,EAUAuR,EAVAvR,MACAg0B,EASAziB,EATAyiB,SACAiK,EAQA1sB,EARA0sB,YACAC,EAOA3sB,EAPA2sB,gBACAC,EAMA5sB,EANA4sB,eACAf,EAKA7rB,EALA6rB,WACA9mB,EAIA/E,EAJA+E,SACAxe,EAGAyZ,EAHAzZ,SACAsmC,EAEA7sB,EAFA6sB,kBACGC,EAVP,aAWI9sB,EAXJ,IAYMC,EAAU+rB,KACVe,EAAUzL,iBAAwB,MACxC,EAAwCz8B,oBAAkB,GAA1D,mBAAOmoC,EAAP,KAAqBC,EAArB,KACI1sB,EAAYsrB,EAAa5rB,EAAQmsB,mBAAqBnsB,EAAQ1Z,SAC9D2mC,EAAoBnoB,EAAW9E,EAAQosB,iBAAmB,GAE9D,GAAI9lC,EAASe,MAAQ,GAAKf,EAASgB,IAAM,EACrC,OAAO,KAUX,IAAMylB,EAAUzmB,EAASqc,UACrB,eAACH,GAAD,CAAmBC,eAAgBxd,OAAO2d,OAAOsqB,WAAa,EAAG5mC,SAAUA,EAAUoc,MAAO,IAE5F,uBAAM+I,IAAKqhB,EAASxsB,UAAW2sB,EAA/B,SACK3mC,EAASgJ,OAIlB,OACI,gBAAC69B,GAAA,EAAD,yBACIliB,QAAS,kBAAO8hB,GAAgBL,EAAgBl+B,IAChD4+B,UAlBR,WAA0B,IAAD,MACfC,EAAY18B,SAAS28B,eACrB9K,EACkB,WAAX,OAAT6K,QAAS,IAATA,OAAA,EAAAA,EAAWlgC,QAAX,UAA+B2/B,EAAQ1kB,eAAvC,aAA+B,EAAiBmlB,WAAjB,oBAA4BF,EAAUG,kBAAtC,aAA4B,EAAsBC,kBAAlD,QAAgE,OACnGT,EAAe,OAACxK,QAAD,IAACA,OAeZ/W,IAAKghB,EACLnsB,UAAWN,EAAQgsB,YACnBxJ,SAAUA,GACNqK,GANR,cAQI,eAACa,GAAA,EAAD,CAAWptB,UAAWA,EAAtB,SAAkCyM,IACjC6f,GACG,eAACc,GAAA,EAAD,CAAWptB,UAAWN,EAAQqsB,WAA9B,SACI,eAACrhB,GAAA,EAAD,CAAYC,QAAS,SAACjf,GAAD,OAAO2gC,EAAe3gC,EAAGwC,IAA9C,SACI,eAAC,KAAD,CAAUopB,SAAUgU,EAAa,QAAU,eAIvD,eAAC8B,GAAA,EAAD,CAAWptB,UAAWN,EAAQnS,UAA9B,SACI,2CAAWvH,EAASw6B,YAApB,iBAsCD,SAAS6M,GAAT,GAyBU,IAxBrBpK,EAwBoB,EAxBpBA,MACAtC,EAuBoB,EAvBpBA,OACAx7B,EAsBoB,EAtBpBA,OACAsD,EAqBoB,EArBpBA,eACAuB,EAoBoB,EApBpBA,sBACAsjC,EAmBoB,EAnBpBA,oBACAC,EAkBoB,EAlBpBA,iBACArK,EAiBoB,EAjBpBA,QACAt8B,EAgBoB,EAhBpBA,UACA4mC,EAeoB,EAfpBA,mBACA3mC,EAcoB,EAdpBA,OACA4mC,EAaoB,EAbpBA,eACAnC,EAYoB,EAZpBA,WACAgB,EAWoB,EAXpBA,kBACAlf,EAUoB,EAVpBA,QACA0H,EASoB,EATpBA,WACAvI,EAQoB,EARpBA,aACAmhB,EAOoB,EAPpBA,YACA7J,EAMoB,EANpBA,iBACA8J,EAKoB,EALpBA,uBACA5Y,EAIoB,EAJpBA,OACA6Y,EAGoB,EAHpBA,uBACA30B,EAEoB,EAFpBA,iBACA40B,EACoB,EADpBA,UAEMC,EAAa/M,mBACnB+M,EAAWhmB,QAAUob,EACrB,IAAM6K,EAAWhN,iBAAckC,GAC/B8K,EAASjmB,QAAUmb,EACKlC,mBACRjZ,QAAUlhB,EAC1B,IAAMonC,EAAeC,mBACjB,kBACIrnC,EACMsnC,MAAMtnC,EAAUC,QACXg5B,UAAKn4B,GACLmI,KAAI,SAACs+B,GAAD,OAAOC,yBAChB,KACV,CAACxnC,IAECynC,EAAwBtN,iBAC1BxjB,GAAmB+wB,SAEvBD,EAAsBvmB,QAAtB,OAAgC0lB,QAAhC,IAAgCA,IAAsBjwB,GAAmB+wB,QACzE,IAAMC,EAAkBxN,iBAAyC,IACjEwN,EAAgBzmB,QAAUkmB,EAC1B,IAAMQ,EAAsBzN,mBAC5ByN,EAAoB1mB,QAAU+b,EAC9B,MAA8Dv/B,mBAAuC,IAArG,mBAAOmqC,EAAP,KAAgCC,EAAhC,KACMC,EAA6B5N,iBAAqC,IAClE6N,EAAY7N,iBAAe,GACjC6N,EAAU9mB,QAAUjhB,EACpB,IAAMgoC,EAAY9N,kBAAgB,GAClC8N,EAAU/mB,QAAUiN,EACpB,IAAM+Z,EAAyB/N,iBAAe,GACxCgO,EAAsBhO,mBACtBD,EAAeC,mBACCA,mBACRjZ,QAAUgN,EACxB,MAAsB1wB,GAAc,GAA7Bsd,EAAP,oBACMhC,EAAU0rB,GAAwB,CAAEE,aAAY5pB,cAAa6K,iBAC7DyiB,EAAsBjO,mBAC5BiO,EAAoBlnB,QAAUylB,EAC9B,IAAM0B,EAAyBlO,mBAC/BkO,EAAuBnnB,QAAUwlB,EAIjC3tB,qBAAU,WAmDN,OAFAovB,EAAoBjnB,QAAUonB,uBAhDf,SAATC,IAAgB,IAAD,EAQbC,EARa,EAkB8D,EAmBvC,EAIC,EAxCnCpB,EAAeO,EAAgBzmB,QAE/BunB,EAAuD,GACvD9hC,EAFQwgC,EAASjmB,QAECngB,KAAKinC,EAAU9mB,SAEnCrZ,EAAQ4/B,EAAsBvmB,QAAQwnB,YAAY/hC,GAChD4Q,EAAmC,IAAzB1P,EAAM0P,QAAQtX,OAAd,UAA6B4H,EAAMsP,iBAAnC,QAAgD,GAAKtP,EAAM0P,QAP1D,cAUDA,GAVC,IAUjB,2BAAyB,CAAC,IAAfjW,EAAc,QACrBmnC,EAAuBnnC,EAAEgG,QAAS,QAEZxG,IAAlB0nC,GAA+BlnC,EAAEgG,MAAQkhC,KACzCA,EAAgBlnC,EAAEgG,QAdT,8BAkBjB,IRrRL,SAAsB5C,EAAQusB,GACjC,IAAK,IAAI4D,KAAOnwB,EACZ,KAAMmwB,KAAO5D,GACT,OAAO,EAIf,IAAK,IAAI4D,KAAO5D,EACZ,KAAM4D,KAAOnwB,GACT,OAAO,EAIf,OAAO,EQwQMikC,CAAaF,EAAwBV,EAA2B7mB,WACjE6mB,EAA2B7mB,QAAUunB,EACrCX,EAA2BW,GAC3B,UAAAJ,EAAuBnnB,eAAvB,cAAAmnB,EAAiC9wB,QAEXzW,IAAlB0nC,GAA6B,CAC7B,IAAMI,EAAsBxB,EAAaoB,GACnCK,GAAeZ,EAAU/mB,SAAWW,KAAK5gB,MAAQinC,EAAuBhnB,QAAU,IAEjE,OAAnB0nB,QAAmB,IAAnBA,KAAqB1nB,SAAW2nB,GAChCD,EAAoB1nB,QAAQiT,eAAe,CACvC2U,MAAO,SACPC,OAAQ,UACRC,SAAU,gBAMGloC,IAAzB+G,EAAMwP,iBACN,UAAA+wB,EAAoBlnB,eAApB,SAA6B7J,eAAexP,EAAMwP,sBAGxBvW,IAA1B+G,EAAMyP,kBACN,UAAA8wB,EAAoBlnB,eAApB,SAA6B5J,gBAAgBzP,EAAMyP,kBAGvD6wB,EAAoBjnB,QAAUonB,sBAAsBC,MAKjD,gBACiCznC,IAAhCqnC,EAAoBjnB,SACpB+nB,qBAAqBd,EAAoBjnB,YAGlD,IAEH,IAAMgoB,EAA0BrvB,uBAAY,WAAO,IAAD,EACxCguB,EAA0BE,EAA2B7mB,QAE3D,GAAK2mB,EAAL,CAIA,IAAMsB,EAAU5+B,OAAO1L,KAAKgpC,GAE5B,GAAuB,IAAnBsB,EAAQlpC,OAAZ,CAIA,IAAM2oC,EAAsBxB,EAAajmC,OAAOgoC,EAAQ,KAErC,OAAnBP,QAAmB,IAAnBA,GAAA,UAAAA,EAAqB1nB,eAArB,SAA8BiT,eAAe,CACzC2U,MAAO,SACPC,OAAQ,UACRC,SAAU,eAEf,CAAC5B,IAEJruB,qBAAU,WACN,IAAIoV,EAYJ,OAFA1kB,SAASvL,iBAAiB,mBAAoBkrC,GAEvC,kBAAM3/B,SAAStL,oBAAoB,mBAAoBirC,IAR9D,SAASA,IAC4B,YAA7B3/B,SAAS4/B,iBACTH,OAOT,CAAC/a,EAAQ0Z,EAAyBT,EAAc8B,IAEnDnwB,qBAAU,WACDoV,GACD+a,MAEL,CAAC/a,EAAQ+a,IAEZnwB,qBAAU,WAAO,IAAD,EACZ,IAAIkvB,EAAU/mB,QAAd,CAIA,IAAMkmB,EAAeO,EAAgBzmB,QAErC,GAAKkmB,GAAwC,IAAxBA,EAAannC,OAAlC,CAIA,IAAMqpC,EAAmBlC,EAAa,GACtB,OAAhBkC,QAAgB,IAAhBA,GAAA,UAAAA,EAAkBpoB,eAAlB,SAA2BiT,eAAe,CACtC2U,MAAO,SACPC,OAAQ,UACRC,SAAU,eAEf,CAACjC,IAEJhuB,qBAAU,WACN,OAAOkuB,EAAUsC,kBACb,SAACpqC,EAAO8I,GACJ9I,EAAMgjB,iBACNhjB,EAAMijB,kBACNvgB,EAAeoG,MAEnB,kBAAMg1B,KACN,kBAAMj9B,OAEX,CAACinC,EAAWplC,EAAgBo7B,EAAkBj9B,IAGjD+Y,qBAAU,WACN,OAAOkuB,EAAUuC,gBACb,SAACrqC,GACGA,EAAMgjB,iBACNhjB,EAAMijB,kBACNvgB,EAAe,MAEnB,kBAAMo7B,OAEX,CAACgK,EAAWplC,EAAgBo7B,IAE/BlkB,qBAAU,WACN,OAAOkuB,EAAUwC,sBACb,SAACtqC,EAAO8I,GACJ9I,EAAMgjB,iBACNhjB,EAAMijB,kBACNvgB,EAAeoG,MAEnB,kBAAMg1B,KACN,kBAAMZ,EAAMt7B,KAAKd,MACjB,kBAAMD,OAEX,CAACinC,EAAWplC,EAAgBo7B,EAAkBZ,EAAOr8B,EAAWC,IAEnE8Y,qBAAU,WACN,OAAOkuB,EAAUyC,oBACb,SAACvqC,EAAOC,GAAc,IAAD,EACjBD,EAAMgjB,iBACNhjB,EAAMijB,kBACN2X,EAAO36B,EAASe,MAAV,UAAiB+mC,EAAWhmB,eAA5B,aAEV,kBAAM+b,KACN,kBAAMZ,EAAMt7B,KAAKd,MACjB,kBAAMD,OAEX,CAACinC,EAAWlN,EAAQ/5B,EAAWi9B,EAAkBZ,EAAOp8B,IAE3D8Y,qBAAU,WACN,OAAOkuB,EAAU0C,sCACb,SAACxqC,EAAOC,GAAc,IAAD,EACjBD,EAAMgjB,iBACNhjB,EAAMijB,kBACN2X,EAAO36B,EAASe,MAAV,UAAiB+mC,EAAWhmB,eAA5B,aAEV,kBAAM+b,KACN,kBAAMZ,EAAMt7B,KAAKd,MACjB,kBAAMD,OAEX,CAACinC,EAAWlN,EAAQ/5B,EAAWi9B,EAAkBZ,EAAOp8B,IAE3D8Y,qBAAU,WACN,OAAOkuB,EAAU2C,2BACb,SAACzqC,EAAOY,GAGU,IAAD,EAEN,GAJPZ,EAAMijB,kBACNjjB,EAAMgjB,iBACFpiB,GACAg6B,EAAO53B,KAAKgG,IAAIlI,EAAQo8B,EAAMt7B,KAAKd,GAAU,KAAvC,UAA+CinC,EAAWhmB,eAA1D,UAEN6Y,EAAO53B,KAAKC,IAAI,EAAGi6B,EAAMt7B,KAAKd,GAAU,KAAlC,UAA0CinC,EAAWhmB,eAArD,aAGd,kBAAM+b,OAEX,CAACgK,EAAW5K,EAAOp8B,EAAQg9B,EAAkBlD,IAEhDhhB,qBAAU,WACN,SAAS8wB,IACL3B,EAAuBhnB,QAAUW,KAAK5gB,MAG1C,IAAM0jC,EAAQzK,EAAahZ,QAG3B,OAFK,OAALyjB,QAAK,IAALA,KAAOzmC,iBAAiB,QAAS2rC,GAE1B,yBAAMlF,QAAN,IAAMA,OAAN,EAAMA,EAAOxmC,oBAAoB,QAAS0rC,MAClD,CAAC3P,EAAcgO,IAElBnvB,qBAAU,WACN,IAAIoV,GAIC0Y,GAAmB7mC,EAAxB,CAIA,IATY,EAqBY,IAZpB8pC,GAAe,EACfzoC,EAAI,EAVI,cAYErB,GAZF,IAYZ,2BAAyB,CAAC,IAAjBsB,EAAgB,QACrB,GAAIA,EAAES,gBAAkB8kC,EAAe9kC,eAAiBT,EAAE8G,OAASy+B,EAAez+B,KAAM,CACpF0hC,EAAczoC,EACd,QAGFA,GAlBM,8BAqBZ,IAAqB,IAAjByoC,EACA,UAAA1C,EAAa0C,UAAb,mBAA2B5oB,eAA3B,SAAoCiT,eAAe,CAC/C2U,MAAO,SACPC,OAAQ,UACRC,SAAU,cAGnB,CAAC7a,EAAQ0Y,EAAgB7mC,EAAWonC,IAEvC,IAAM2C,GAAwClwB,uBAC1C,SAACvS,GACG,OAAKygC,EAA2B7mB,SAAYlhB,EAIrCqH,EACHrH,EACAsH,EACA+K,EAAiB23B,gCACjB33B,EAAiB43B,gCAPV,KAUf,CAACjqC,EAAWqS,EAAiB23B,gCAAiC33B,EAAiB43B,iCAG7EC,GAAgCrwB,uBAAY,WAC9C,IAAKkuB,EAA2B7mB,QAC5B,MAAO,GAEX,IAAM5Z,EAAQnF,KAAKgG,IAAL,MAAAhG,KAAI,YAAQoI,OAAO1L,KAAKkpC,EAA2B7mB,SAASjY,KAAI,SAAC5H,GAAD,OAAOF,OAAOE,QAC5F,OAAO0oC,GAAsCziC,KAC9C,CAACyiC,KAEEI,GAA2BtwB,uBAAY,WACzC,IAAMuwB,EAAkB7/B,OAAO1L,KAAKkpC,EAA2B7mB,SAASjY,KAAI,SAAC5H,GAAD,OAAOF,OAAOE,MAE1F,GAAKrB,GAAcoqC,GAA8C,IAA3BA,EAAgBnqC,OAAtD,CAIA,IAAMqH,EAAQnF,KAAKgG,IAAL,MAAAhG,KAAI,YAAQioC,IAC1B,OAAOpqC,EAAUsH,MAClB,CAACtH,IAEJ+Y,qBAAU,WACN,IAAM7Z,EAAS+nC,EAAUoD,UACrB,SAAClrC,EAAOC,GACJD,EAAMgjB,iBACNhjB,EAAMijB,kBACN7jB,EAAOa,EAAU8qC,KAAiCj4B,EAAeq4B,MAAM,MAE3E,kCAAM1C,EAAoB1mB,eAA1B,YACA,kBAAMipB,QAGV,OAAO,kBAAMjrC,OACd,CAAC+nC,EAAWkD,GAA0BD,GAA+B3rC,IAExEwa,qBAAU,WACN,IAAM7Z,EAAS+nC,EAAUsD,+BACrB,SAACprC,EAAOsE,GACJtE,EAAMgjB,iBACNhjB,EAAMijB,kBACNhf,EAAsBK,MAE1B,kBAAMw5B,KAGV,OAAO,kBAAM/9B,OACd,CAAC+nC,EAAWhK,EAAkB75B,IAEjC2V,qBAAU,WACN,IAAM7Z,EAAS+nC,EAAUuD,gBACrB,SAACrrC,GACGA,EAAMgjB,iBACNhjB,EAAMijB,kBACN,IAAMgoB,EAAkB7/B,OAAO1L,KAAKkpC,EAA2B7mB,SAASjY,KAAI,SAAC5H,GAAD,OAAOF,OAAOE,MAE1F,GAAIrB,GAAaoqC,GAAmBA,EAAgBnqC,OAAS,EAAG,CAC5D,IAAMqH,EAAQnF,KAAKgG,IAAL,MAAAhG,KAAI,YAAQioC,IAC1B7rC,EACIyB,EAAUsH,GACVyiC,GAAsCziC,GACtC2K,EAAew4B,gBACf,OAIZ,kBAAOzqC,GAAkC,IAArBA,EAAUC,QAAgBg9B,KAGlD,OAAO,kBAAM/9B,OACd,CAAC+nC,EAAW1oC,EAAQ0+B,EAAkBj9B,EAAW+pC,KAEpDhxB,qBAAU,WACN,IAAM7Z,EAAS+nC,EAAUyD,oBACrB,SAACvrC,GACGA,EAAMgjB,iBACNhjB,EAAMijB,kBACN,IAAMgoB,EAAkB7/B,OAAO1L,KAAKkpC,EAA2B7mB,SAASjY,KAAI,SAAC5H,GAAD,OAAOF,OAAOE,MAE1F,GAAIrB,GAAaoqC,GAAmBA,EAAgBnqC,OAAS,EAAG,CAC5D,IAAMqH,EAAQnF,KAAKgG,IAAL,MAAAhG,KAAI,YAAQioC,IAC1B7rC,EACIyB,EAAUsH,GACVyiC,GAAsCziC,GACtC2K,EAAexS,gBACf,OAIZ,kBAAOO,GAAkC,IAArBA,EAAUC,QAAgBg9B,KAGlD,OAAO,kBAAM/9B,OACd,CAAC+nC,EAAW1oC,EAAQ0+B,EAAkBj9B,EAAW+pC,KAEpD,IAAM3P,GAAcvgB,uBAChB,SAACvS,GACG,GAAKtH,EAAL,CAIA,IAAM6nC,EAA0BE,EAA2B7mB,SAAW,GACtE6Y,EAAO/5B,EAAUsH,GAAOnH,OAAQ+mC,EAAWhmB,SAAW5Z,KAASugC,MAEnE,CAAC7nC,EAAW+5B,IAGV1G,GAAaxZ,uBACf,SAAC/U,EAAoDwC,GACjDxC,EAAEqd,iBACFrd,EAAEsd,kBAEGpiB,GAILzB,EAAOyB,EAAUsH,GAAQyiC,GAAsCziC,GAAQ2K,EAAeq4B,MAAM,KAEhG,CAACtqC,EAAW+pC,GAAuCxrC,IAGnDosC,GAAgB,KA6CpB,OA3CK3qC,GAAkC,IAArBA,EAAUC,OAexB0qC,GACI,eAACC,GAAA,EAAD,CAAgBxxB,UAAWN,EAAQ6rB,MAAnC,SACI,eAACkG,GAAA,EAAD,UACI,eAACC,GAAA,EAAD,UACK9qC,EAAUiJ,KAAI,SAAC3H,EAAkBgG,GAC9B,IAAMg0B,EAAWh0B,KAASugC,EAE1B,OACI,eAACzC,GAAD,CAEI99B,MAAOA,EACPo9B,WAAYA,EACZpJ,SAAUA,EACVoK,kBAAmBA,EACnB9nB,SAAUopB,EAAuB1lC,EAAEmC,OACnCrE,SAAUY,EAAUsH,GACpBi+B,YAAa6B,EAAa9/B,GAC1Bk+B,gBAAiBpL,GACjBqL,eAAgBpS,IATX/rB,aAvB5Bkf,GAAWsgB,EACZ6D,IAAiBnkB,GAAWsgB,GACxB,sBAAK1tB,UAAWN,EAAQ8rB,YAAxB,SACI,eAACxgB,GAAA,EAAD,CAAYC,QAAQ,KAApB,SAA0ByiB,MAG3B9mC,GAAkC,IAArBA,EAAUC,SAC9B0qC,GACI,sBAAKvxB,UAAWN,EAAQ8rB,YAAxB,SACI,eAACxgB,GAAA,EAAD,CAAYC,QAAQ,KAApB,6BAkCZ,eAAC/G,GAAA,EAAD,CAAOytB,QAAM,EAACxtB,UAAW,EAAGgH,IAAK2V,EAAc9gB,UAAWN,EAAQkM,UAAlE,SACK2lB,K,IClpBQK,G,WAqCjB,WAAYC,GAA0B,IAAD,gCApCpBA,cAoCoB,OAnC7BlqC,UAmC6B,OAlC7BmqC,aAkC6B,OAjC7BC,oBAiC6B,OAhC7BC,mBAgC6B,OA/B7BC,oBA+B6B,OA9B7BC,iCA8B6B,OA7B7BC,0BA6B6B,OA5B7BC,mBA4B6B,OA3B7BC,qBA2B6B,OA1B7BC,2BA0B6B,OAzB7BC,2BAyB6B,OAxB7BC,mBAwB6B,OAd7BC,uBAc6B,OAb7BC,uCAa6B,OAZ7BC,2BAY6B,OAX7BC,+BAW6B,OAV7BC,gCAU6B,OAT7BC,wCAS6B,OAPrC3H,gBAOqC,OANrCp3B,UAA0C,KAML,KALrCc,iBAKqC,OAJrCktB,wBAIqC,OAHrChO,cAGqC,OAFrCgf,mBAEqC,EACjC7tC,KAAK2sC,SAAWA,EAChB3sC,KAAKyC,KAAO,EACZzC,KAAK6uB,SAAW,EAChB7uB,KAAK4sC,SAAU,EACf5sC,KAAKimC,WAAa,EAClBjmC,KAAK6tC,cAAgB,EACrB7tC,KAAK68B,wBAAqBr6B,EAC1BxC,KAAK6sC,eAAiB,GACtB7sC,KAAK8sC,cAAgB,GACrB9sC,KAAK+sC,eAAiB,GACtB/sC,KAAKitC,qBAAuB,GAC5BjtC,KAAKgtC,4BAA8B,GACnChtC,KAAKktC,cAAgB,GACrBltC,KAAKmtC,gBAAkB,GACvBntC,KAAKotC,sBAAwB,GAC7BptC,KAAKqtC,sBAAwB,GAC7BrtC,KAAKstC,cAAgB,GACrBttC,KAAKutC,kBAAoB,GACzBvtC,KAAKwtC,kCAAoC,GACzCxtC,KAAKytC,sBAAwB,GAC7BztC,KAAK0tC,0BAA4B,GACjC1tC,KAAK2tC,2BAA6B,GAClC3tC,KAAK4tC,mCAAqC,GAE1C,IAAMzV,EAAOn4B,KAEbA,KAAK2sC,SAAS1U,UAAY,SAACp3B,GACvB,OAAQA,EAAM4G,KAAKJ,SACf,IAAK,QACD,IAAMymC,EAAejtC,EAAM4G,KAE3B0wB,EAAKtJ,SAAWif,EAAajf,SAC7BsJ,EAAKyU,SAAU,EACfzU,EAAKxoB,YAAcm+B,EAAan+B,YAChCwoB,EAAK0E,mBAAqBiR,EAAajR,mBACvC1E,EAAK8N,WAAa,EAClB9N,EAAK11B,KAAOqrC,EAAal/B,YACzB,EAAKi/B,cAAgBC,EAAavhC,aATtC,oBAWyB4rB,EAAK0U,gBAX9B,IAWI,2BAA0C,EACtC7G,EADsC,SAC7B8H,EAAaC,SAZ9B,8BAcI,MACJ,IAAK,aACD,IAG2B,EAHrBC,EAAoBntC,EAAM4G,KAGhC,GADA0wB,EAAK8N,WAAa+H,EAAkB92B,MACZ,IAApBihB,EAAK8N,WACL,UAAA9N,EAAKtpB,iBAAL,cAAAspB,EAAiB,IAAI8V,MAAM,YAE/B,MACJ,IAAK,OACD,IADJ,EACUC,EAAcrtC,EAAM4G,KAD9B,cAGyB0wB,EAAK2U,eAH9B,IAGI,2BAAyC,EACrC9G,EADqC,SAC5BkI,EAAYC,OAJ7B,8BAMI,MACJ,IAAK,QACD,IADJ,EACUC,EAAevtC,EAAM4G,KAD/B,cAGyB0wB,EAAK4U,gBAH9B,IAGI,2BAA0C,EACtC/G,EADsC,SAC7BoI,EAAaD,OAJ9B,8BAMI,MACJ,IAAK,qBACD,IADJ,EACUE,EAA4BxtC,EAAM4G,KAD5C,cAGyB0wB,EAAK6U,6BAH9B,IAGI,2BAAuD,CAAC,IAA/ChH,EAA8C,QACnD7N,EAAK0E,mBAAqBwR,EAA0Bz+B,GACpDo2B,EAASqI,EAA0Bz+B,KAL3C,8BAOI,MACJ,IAAK,cACD,IADJ,EACU0+B,EAAqBztC,EAAM4G,KADrC,cAGyB0wB,EAAK8U,sBAH9B,IAGI,2BAAgD,EAC5CjH,EAD4C,SACnCsI,EAAmBp3B,MAAOo3B,EAAmBH,OAJ9D,8BAMI,MACJ,IAAK,OAAL,oBACyBhW,EAAK+U,eAD9B,IACI,2BAAyC,EACrClH,EADqC,YAD7C,8BAII,MACJ,IAAK,SACD,IADJ,EACUuI,EAAgB1tC,EAAM4G,KADhC,cAGyB0wB,EAAKgV,iBAH9B,IAGI,2BAA2C,EACvCnH,EADuC,SAC9BuI,EAAcr3B,QAJ/B,8BAMI,MACJ,IAAK,eACD,IADJ,EACUs3B,EAAsB3tC,EAAM4G,KADtC,cAG2B0wB,EAAKiV,uBAHhC,IAGI,2BAAmD,EAC/CpH,EAD+C,SACtCwI,EAAoBt3B,MAAOs3B,EAAoBL,OAJhE,8BAMI,MACJ,IAAK,eAAL,oBACyBhW,EAAKkV,uBAD9B,IACI,2BAAiD,EAC7CrH,EAD6C,YADrD,8BAII,MACJ,IAAK,OAAL,oBACyB7N,EAAKmV,eAD9B,IACI,2BAAyC,CAAC,IAAD,IAAhCtH,EAAgC,QAC/ByI,EAAc5tC,EAAM4G,KAE1Bu+B,EACIyI,EAAY3tC,SACZ2tC,EAAY1lC,qBACZ0lC,EAAYphC,MACZohC,EAAY55B,MACZ45B,EAAYzjC,IALR,UAMJyjC,EAAYC,sBANR,QAM0B/6B,EAAeq4B,KANzC,UAOJyC,EAAYE,wBAPR,SAQJF,EAAY7+B,KAZxB,8BAeI,MACJ,IAAK,WAAL,oBACyBuoB,EAAKoV,mBAD9B,IACI,2BAA6C,EAEzCvH,EAFyC,SACjBnlC,EAAM4G,KACLs3B,WAHjC,8BAKI,MACJ,IAAK,2BAAL,oBACyB5G,EAAKqV,mCAD9B,IACI,2BAA6D,EACzDxH,EADyD,YADjE,8BAII,MACJ,IAAK,eAAL,oBACyB7N,EAAKsV,uBAD9B,IACI,2BAAiD,EAC7CzH,EAD6C,YADrD,8BAII,MACJ,IAAK,mBAAL,oBAC2B,EAAK0H,2BADhC,IACI,2BAAuD,EACnD1H,EADmD,YAD3D,8BAII,MACJ,IAAK,OAGL,IAAK,SAED,MACJ,IAAK,oBAAL,oBACyB7N,EAAKwV,4BAD9B,IACI,2BAAsD,EAClD3H,EADkD,YAD1D,8BAII,MACJ,IAAK,4BACD,IADJ,EACU4I,EAAmC/tC,EAAM4G,KADnD,cAG2B0wB,EAAKyV,oCAHhC,IAGI,2BAAgE,EAC5D5H,EAD4D,SACnD4I,EAAiCzpC,QAJlD,8BAMI,MACJ,QACIue,QAAQ5b,MAAM,sBAAwBjH,EAAM4G,KAAKJ,W,6CAKjE,WACI,OAAOrH,KAAKyC,M,IAGhB,SAAgByU,GACZlX,KAAKyC,KAAOyU,EACZlX,KAAKimC,WAAa,EAClB,IAAMl+B,EAAqC,CAAEV,QAAS,cAAe6P,MAAOlX,KAAKyC,MACjFzC,KAAK2sC,SAASvlC,YAAYW,K,wBAG9B,WACI,OAAO/H,KAAK6tC,e,IAIhB,SAAiBthC,GACb,IAAMxE,EAAsC,CAAEV,QAAS,eAAgB6P,MAAO3K,GAC9EvM,KAAK2sC,SAASvlC,YAAYW,K,qBAG9B,SAAQi+B,GACAhmC,KAAK4sC,SACL5G,GAAS,GAEbhmC,KAAK6sC,eAAexnC,KAAK2gC,K,oBAG7B,SAAOA,GACHhmC,KAAK8sC,cAAcznC,KAAK2gC,K,qBAG5B,SAAQA,GACJhmC,KAAK+sC,eAAe1nC,KAAK2gC,K,2BAG7B,SAAcA,GACVhmC,KAAKitC,qBAAqB5nC,KAAK2gC,K,kCAGnC,SAAqBA,GACjBhmC,KAAKgtC,4BAA4B3nC,KAAK2gC,K,oBAG1C,SAAOA,GACHhmC,KAAKktC,cAAc7nC,KAAK2gC,K,sBAG5B,SAASA,GACLhmC,KAAKmtC,gBAAgB9nC,KAAK2gC,K,4BAG9B,SAAeA,GACXhmC,KAAKotC,sBAAsB/nC,KAAK2gC,K,4BAGpC,SAAeA,GACXhmC,KAAKqtC,sBAAsBhoC,KAAK2gC,K,oBAGpC,SACIA,GAWAhmC,KAAKstC,cAAcjoC,KAAK2gC,K,wBAG5B,SAAWA,GACPhmC,KAAKutC,kBAAkBloC,KAAK2gC,K,wCAGhC,SAA2BA,GACvBhmC,KAAKwtC,kCAAkCnoC,KAAK2gC,K,4BAGhD,SAAeA,GACXhmC,KAAKytC,sBAAsBpoC,KAAK2gC,K,gCAGpC,SAAmBA,GACfhmC,KAAK0tC,0BAA0BroC,KAAK2gC,K,iCAGxC,SAAoBA,GAChBhmC,KAAK2tC,2BAA2BtoC,KAAK2gC,K,yCAGzC,SAA4BA,GACxBhmC,KAAK4tC,mCAAmCvoC,KAAK2gC,K,mBAGjD,SAAMnX,EAAkBggB,GACpB,IAAM9mC,EAA+B,CAAEV,QAAS,QAASwnB,WAAUggB,iBACnE7uC,KAAK2sC,SAASvlC,YAAYW,K,kBAG9B,WACI/H,KAAK2sC,SAASvlC,YAAY,CAAEC,QAAS,W,kBAIzC,WAEI,OADArH,KAAK2sC,SAASvlC,YAAY,CAAEC,QAAS,SAC9B,IAAIpB,SAAQ,SAACC,EAASC,GAAV,OAAqBD,S,mBAG5C,WACIlG,KAAK2sC,SAASvlC,YAAY,CAAEC,QAAS,Y,gCAGzC,SAAmBuI,GACf,IAAM7H,EAA4C,CAAEV,QAAS,qBAAsBuI,GAAIA,GACvF5P,KAAK2sC,SAASvlC,YAAYW,K,uBAG9B,SAAUrG,EAA4BotC,GAClC9uC,KAAK2sC,SAASvlC,YAAY,CACtBC,QAAS,YACT6P,MAAOxV,EACPqJ,KAAM+jC,EAAkBntC,OAAS,EAAImtC,EAAkB,GAAK,KAC5DC,MAAOD,M,mIAIf,SAAOnlC,GACH,IAAM5B,EAAgC,CAAEV,QAAS,SAAU6P,MAAOvN,GAClE3J,KAAK2sC,SAASvlC,YAAYW,O,8BAG9B,SAAiBinC,GACb,IAAMjnC,EAA0C,CAAEV,QAAS,mBAAoB6P,MAAO83B,GACtFhvC,KAAK2sC,SAASvlC,YAAYW,K,qIAG9B,SAASg3B,GACL,IAAMh3B,EAA2B,CAC7BV,QAAS,WACT03B,SAAUA,GAEd/+B,KAAK2sC,SAASvlC,YAAYW,O,sCAG9B,SAAyB8nB,GACrB,IAAM9nB,EAAkD,CACpDV,QAAS,2BACT6P,MAAO2Y,GAEX7vB,KAAK2sC,SAASvlC,YAAYW,K,0BAG9B,SAAa8nB,GACT,IAAM9nB,EAA6C,CAC/CV,QAAS,eACT6P,MAAO2Y,GAEX7vB,KAAK2sC,SAASvlC,YAAYW,K,8BAG9B,SAAiBy3B,GACb,IAAMz3B,EAAiD,CACnDV,QAAS,mBACT6P,MAAOsoB,GAEXx/B,KAAK2sC,SAASvlC,YAAYW,K,0BAG9B,SAAainC,GACT,IAAMjnC,EAAsC,CAAEV,QAAS,eAAgB6P,MAAO83B,GAC9EhvC,KAAK2sC,SAASvlC,YAAYW,K,0BAG9B,SAAainC,GACT,IAAMjnC,EAAsC,CAAEV,QAAS,eAAgB6P,MAAO83B,GAC9EhvC,KAAK2sC,SAASvlC,YAAYW,K,mBAG9B,SAAMA,EAAiBkT,GACnB,IAAMg0B,EAAoB,CAAE5nC,QAAS,QAASU,UAASkT,YACvDjb,KAAK2sC,SAASvlC,YAAY6nC,K,mBAG9B,WACIjvC,KAAK2sC,SAASvlC,YAAY,CAAEC,QAAS,UACrCrH,KAAK2sC,SAASvU,QACdp4B,KAAK6sC,eAAiB,GACtB7sC,KAAK8sC,cAAgB,GACrB9sC,KAAK+sC,eAAiB,GACtB/sC,KAAKitC,qBAAuB,GAC5BjtC,KAAKgtC,4BAA8B,GACnChtC,KAAKktC,cAAgB,GACrBltC,KAAKmtC,gBAAkB,GACvBntC,KAAKotC,sBAAwB,GAC7BptC,KAAKqtC,sBAAwB,GAC7BrtC,KAAKstC,cAAgB,GACrBttC,KAAKutC,kBAAoB,GACzBvtC,KAAKwtC,kCAAoC,GACzCxtC,KAAKytC,sBAAwB,GAC7BztC,KAAK0tC,0BAA4B,GACjC1tC,KAAK2tC,2BAA6B,GAClC3tC,KAAK4tC,mCAAqC,O,6CC1Z5C5xB,GAAYjC,YAA+B,CAC7CC,KAAM,kBAAuB,CACzB3I,OADE,EAAGgW,aACkB,QAAU,qBACjCnN,SAAU,WACV6Z,UAAW,WAEfrN,UAAW,CACPvV,MAAO,OACPE,OAAQ,QAEZ69B,WAAY,CACR/9B,MAAO,OACPE,OAAQ,OACR89B,OAAQ,EACR3jC,QAAS,WAIjB,SAAS4jC,GACLC,EACAC,EACA5tC,EACA6tC,GAEA,IAAIC,EAGIA,EAFJ9tC,GAAaA,EAAUC,OAAS,EAC5B4tC,EACkB7tC,EAAUA,EAAUC,OAAS,GAAGG,IAEhCJ,EAAUA,EAAUC,OAAS,GAAGoI,YAGpC,EAGtB,IAAM0lC,EAAcJ,EAASzsB,SAAWysB,EAASzsB,QAAQiM,SAAW,IAAOwgB,EAASzsB,QAAQiM,SAAW,EAEjG6gB,EAAcJ,EAAS1sB,SAAW0sB,EAAS1sB,QAAQiM,SAAW,IAAOygB,EAAS1sB,QAAQiM,SAAW,EAEvG,OAAOhrB,KAAKC,IAAI4rC,EAAa7rC,KAAKC,IAAI0rC,EAAiBC,IAmE5C,SAASE,GAAT,GAiCE,IAAD,MAhCZC,QAAW9f,EAgCC,EAhCDA,cAAe+f,EAgCd,EAhCcA,qBAAsBna,EAgCpC,EAhCoCA,UAAWoa,EAgC/C,EAhC+CA,aAAcra,EAgC7D,EAhC6DA,UAAWsa,EAgCxE,EAhCwEA,aACpFC,EA+BY,EA/BZA,eACAj8B,EA8BY,EA9BZA,iBACA6qB,EA6BY,EA7BZA,oBACA+J,EA4BY,EA5BZA,UACAl8B,EA2BY,EA3BZA,UACAwjC,EA0BY,EA1BZA,cACAC,EAyBY,EAzBZA,gBACAtgB,EAwBY,EAxBZA,WACAvI,EAuBY,EAvBZA,aACA8oB,EAsBY,EAtBZA,gBACAC,EAqBY,EArBZA,mBACAC,EAoBY,EApBZA,YACA9L,EAmBY,EAnBZA,IACA+L,EAkBY,EAlBZA,cACAC,EAiBY,EAjBZA,oBACAC,EAgBY,EAhBZA,0BACAC,EAeY,EAfZA,QACAlS,EAcY,EAdZA,cACAC,EAaY,EAbZA,cACAv+B,EAYY,EAZZA,OACAywC,EAWY,EAXZA,SACArT,EAUY,EAVZA,cACAsT,EASY,EATZA,oBACAC,EAQY,EARZA,eACAnR,EAOY,EAPZA,mBACAoR,EAMY,EANZA,qBACAC,EAKY,EALZA,cACAC,EAIY,EAJZA,yBACApS,EAGY,EAHZA,iBACA4J,EAEY,EAFZA,eACAyI,EACY,EADZA,eAEA,EAAgC5xC,mBAAmByU,GAAS8pB,QAA5D,mBAAOoB,EAAP,KAAiBkS,EAAjB,KACMC,EAAcrV,mBACpBqV,EAAYtuB,QAAUmc,EACtB,MAAkC3/B,qBAAlC,oBAAOsC,GAAP,MAAkByvC,GAAlB,MACM7I,GAAqBS,mBACvB,kBACI,IAAI1wB,GAAJ,OAAuB3W,SAAvB,IAAuBA,MAAa,GAAI,CACpC+W,iBAAiB,EACjBC,iBAAkBqmB,IAAalrB,GAAS+pB,UACxCtkB,qBAAsB,QAE9B,CAAC5X,GAAWq9B,IAEVqS,GAAevV,mBACrBuV,GAAaxuB,QAAUlhB,GACvB,IAAMs9B,GAAkBt9B,IAAaA,GAAUC,OAAS,GAAK0vC,QAAQtB,GAAgBD,GACrF,GAAgD1wC,oBAAkB,GAAlE,qBAAOkyC,GAAP,MAAyBC,GAAzB,MACA,GAA8BnyC,oBAAkB,GAAhD,qBAAO4+B,GAAP,MAAgBwT,GAAhB,MACA,GAA4DpyC,mBAAiB,GAA7E,qBAAOqpC,GAAP,MAA+BgJ,GAA/B,MACA,GAA4BryC,mBAAiB,GAA7C,qBAAOuK,GAAP,MAAe+nC,GAAf,MACA,GAAwCtyC,mBAAiB,GAAzD,qBAAOmN,GAAP,MAAqBolC,GAArB,MACM/I,GAAa/M,mBACnB+M,GAAWhmB,QAAUob,GACrB,OAAwB5+B,qBAAfsjC,GAAT,qBACA,GAAsCtjC,qBAAtC,qBAAOuQ,GAAP,MAAoBiiC,GAApB,MACA,GAAoDxyC,qBAApD,qBAAOy9B,GAAP,MAA2BgV,GAA3B,MACA,GAAkCzyC,qBAAlC,qBAAO24B,GAAP,MAAkB+Z,GAAlB,MACA,GAAiD1yC,oBAAkB,GAA1D2yC,GAAT,qBACMC,GAAwBnW,mBAC9BmW,GAAsBpvB,QAAUwtB,EAChC,OAA4DhxC,mBAAuC,IAAnG,qBAAOspC,GAAP,MAA+BuJ,GAA/B,MACMtP,GAAcpnB,uBAAY,kBAAMmnB,GAAY,MAAK,IACjDtE,GAAmBvC,iBAAc,CAAEgG,EAAG,EAAGC,EAAG,IAC5CuN,GAAWxT,iBAAyB,MACpCyT,GAAWzT,mBACXqW,GAAenJ,mBAAQ,WACzB,OACW,IAAIlD,GADXiK,EACwBT,GACjBU,GAAgBxL,EACC+K,GAGJ,CAAE1sB,QAAS,SACpC,CAACktB,EAAcC,EAAcxL,IAC1BxG,GAAQgL,mBAAe,kBAAM,IAAIpQ,KAAS,IAC1Cne,GAAUwB,GAAU,CAAEqL,iBACtBqiB,GAAY7N,iBAAe,GACjC6N,GAAU9mB,QAAUwsB,GAAYC,GAAUC,GAAU5tC,IAAW,GAE/D,IAAMywC,GAAiC52B,uBAAY,WAE3CwjB,IAAalrB,GAASgqB,WACtB9pB,EAAiBq+B,sBAAwBx+B,EAAoBy+B,SAC7DtC,GAKJniC,GAAMmwB,GAAOmU,IAAc,KAC5B,CAACnT,EAAUhB,GAAOmU,GAAcnC,EAAch8B,IAE3Cu+B,GAAkC/2B,uBAAY,WAE5CwjB,IAAalrB,GAASgqB,WACtB9pB,EAAiBq+B,sBAAwBx+B,EAAoB2+B,OAC7DxC,GAKJniC,GAAMmwB,GAAOmU,IAAc,KAC5B,CAACnT,EAAUhB,GAAOmU,GAAcnC,EAAch8B,IAE3Cs0B,GAAmBU,mBAAQ,WAC7B,IAAMyJ,EAAU,IAAIh5B,GAGpB,OAFAg5B,EAAQ74B,iBAAmBw4B,GAC3BK,EAAQ54B,kBAAoB04B,GACrBE,IACR,CAACL,GAAgCG,KAC9BxI,GAAsBjO,mBAC5BiO,GAAoBlnB,QAAUylB,GAE9B,IAAMoK,GAAOl3B,sBAAW,uCACpB,WAAO9Y,EAAcs7B,EAAc2U,GAAnC,eAAAtsC,EAAA,yDACI23B,EAAM4U,QAAQlwC,GACdkgC,MAEI+P,EAJR,gCAKcR,GAAaO,KAAKhwC,EAAO,KALvC,OAQI,UAAAqnC,GAAoBlnB,eAApB,SAA6BgwB,QARjC,2CADoB,0DAWpB,CAACjQ,GAAauP,KAGZzO,GAAqBloB,uBACvB,SAAChP,EAAsBmmC,GACnB3U,GAAMhF,KAAOxsB,EACbolC,GAAgBplC,GAEZmmC,GACAR,GAAa3lC,aAAaA,KAGlC,CAACwxB,GAAOmU,KAGNW,GAAct3B,uBAChB,SAAC5R,EAAgBmpC,GACbpB,GAAU/nC,GACVwnC,IAAa,SAACzvC,GACV,GAAKA,EAAL,CAIA,IAAMC,EAASD,EAAUC,OAAS,EAAID,EAAUA,EAAUC,OAAS,GAAGG,IAAM6H,EAAS,EAE/EopC,EAAerxC,EAAUiJ,KAAI,SAAC3H,EAAGD,GAAJ,MAAW,CAC1C+G,KAAM9G,EAAE8G,KACRqT,UAAWna,EAAEma,UACbtb,MAAOmB,EAAES,cAAgBkG,EACzBlG,cAAeT,EAAES,cACjB3B,IAAKkB,EAAE+G,YAAcJ,EACrBI,YAAa/G,EAAE+G,YACfuxB,YAAazI,GAAoB7vB,EAAES,cAAgBkG,EAAQhI,GAC3DwD,MAAOnC,EAAEmC,MACT6D,MAAOjG,MAiBX,OAdI+vC,GACIxD,GAAS1sB,mBAAmB8pB,KAC5B4C,GAAS1sB,QAAQjZ,OAAOA,QAGZnH,IAAR+hC,GAAqB93B,EAAUumC,WAAaC,KAAIxmC,EAAU2L,QAAS,WACnEk3B,GAAS1sB,QAAQlhB,UACbqxC,EACAjjB,EAAcnlB,KAAI,SAACoe,GAAD,OAAOA,EAAEhe,UAMpCgoC,MAEXnU,EAAoBj1B,OAASA,IAEjC,CAACmmB,EAAerjB,EAAWmyB,EAAqB2F,IAwPpD,SAAS72B,GAAKqwB,EAAcmU,EAA4BQ,GACpDlB,IAAW,GACXzT,EAAMl8B,QAEF6wC,GACAR,EAAaxkC,OAIrB,SAASE,GAAMmwB,EAAcmU,EAA4BQ,GACrDlB,IAAW,GACXzT,EAAMzuB,OAEFojC,GACAR,EAAatkC,QAnQrB6M,qBAAU,WACN,IAAIud,OAAoCx1B,EACpC0wC,GAAgB,EAFR,4CAIZ,sCAAA9sC,EAAA,yDACQkpC,GAAS1sB,mBAAmB8pB,IAC5B4C,GAAS1sB,QAAQwV,QAErBkX,GAAS1sB,aAAUpgB,EACnB0tC,EAAgBttB,QAAU,KAC1Bmb,GAAM4U,QAAQ,GACd5U,GAAMzuB,OACA3F,EAASi1B,EAAoBj1B,OACnC+nC,GAAU/nC,GACV6nC,IAAW,GACXI,QAAepvC,GACfqvC,QAAsBrvC,GACtByuC,EAAYp9B,GAAS8pB,QAEjB0R,GAASzsB,UACTysB,GAASzsB,QAAQhU,YAAc,EAC/BygC,GAASzsB,QAAQhV,WAKjBkiB,EAAcnuB,OAAS,GAtB/B,wBAuBQ4vC,IAAoB,GAvB5B,oBA0BgCvB,EAAetuC,UAAUouB,EAAe+f,GA1BxE,QA0BkB3mB,EA1BlB,OA2BkBvnB,EAASunB,EAAMvnB,OAAS,EAAIunB,EAAMA,EAAMvnB,OAAS,GAAGG,IAAM6H,EAAS,EAEzEjI,EAAYwnB,EAAMve,KAAI,SAAC3H,EAAGD,GAAJ,MAAW,CAC7B+G,KAAM9G,EAAE8G,KACRqT,UAAWna,EAAEma,UACbtb,MAAOmB,EAAEnB,MAAQ8H,EACjBlG,cAAeT,EAAEnB,MACjBC,IAAKkB,EAAElB,IAAM6H,EACbI,YAAa/G,EAAElB,IACfw5B,YAAazI,GAAoB7vB,EAAEnB,MAAQ8H,EAAQhI,GACnDwD,MAAOnC,EAAEmC,MACT6D,MAAOjG,MAGXouC,GAAazvC,GACb+vC,GAA0BluB,KAAK5gB,OA1C3C,mDA4CgB,gBAAaiE,MACb6pC,EAAQ,KAAE1oC,SAEV0oC,EAAQ5nC,OAAO,EAAD,KAGlBsoC,GAAa,IAlDzB,yBAoDYI,IAAoB,GApDhC,6CAuDQ7vC,OAAYc,EAvDpB,YA0DQstC,EA1DR,kCA2DcoC,GAAaiB,UA3D3B,QA4DQxQ,KA5DR,4BA6DeoN,IAAgBxL,EA7D/B,qBA8DY2O,EA9DZ,uDAkEYnD,EAlEZ,iBAmEkBhY,EAAYqb,eAClBpb,EAAU,IAAI0U,GAAa,IAAI5U,GAA8BC,IAC7D+Z,GAAa/Z,GArEzB,4BAsEmBwM,EAtEnB,kBAuEYvM,EAAU,IAAI0U,GAAa,IAAIrU,GAAuBkM,EAAI30B,GAAI20B,EAAIh3B,IAAKd,KAC/D4mC,OAxEpB,8BA4EkB,IAAIzsC,MAAM,oBA5E5B,QA+EQ0oC,GAAS1sB,QAAUoV,EACnBkY,EAAgBttB,QAAUoV,EACtBsb,GAAa,EAEjBtb,EAAQub,QAAO,kBAAMxD,GAAgBvR,EAAcuR,MACnD/X,EAAQsH,gBAAe,kBAAMwR,OAC7B9Y,EAAQ4H,4BAA2B,WAC/BiR,OAEJ7Y,EAAQ4Y,gBAAe,WACnBA,OAEJ5Y,EAAQyH,oBAAmB,WACvBA,OAEJzH,EAAQmb,SAAQ,SAACpF,GAAY,IAAD,oBAIE,IAaoC,IAyB7C,qBAzCjBrE,GAAU9mB,QAAUwsB,GAAYC,GAAUC,GAAU8B,GAAaxuB,SAC1D,QAAP,EAAAoV,SAAA,SAASwb,MAAM9J,GAAU9mB,QAAzB,OAAkC6S,QAAlC,IAAkCA,OAAlC,EAAkCA,EAAW1qB,MAEzCqmC,GAAaxuB,WACN,QAAP,EAAAoV,SAAA,SAASyb,iBAAiB1/B,EAAiB0/B,kBACpC,QAAP,EAAAzb,SAAA,SAASt2B,UACL0vC,GAAaxuB,QACbitB,EAAuB,CAAC/f,EAAc,GAAG/kB,MAAQ+kB,EAAcnlB,KAAI,SAACoe,GAAD,OAAOA,EAAEhe,WAI7E,QAAP,EAAAitB,SAAA,SAAS0b,aAAa3/B,EAAiB2/B,cAChC,QAAP,EAAA1b,SAAA,SAAS2b,aAAa5/B,EAAiB4/B,cAChC,QAAP,EAAA3b,SAAA,SAAS+G,SAASmS,EAAYtuB,SACvB,QAAP,EAAAoV,SAAA,SAAS4b,yBAAT,UAAkC5B,GAAsBpvB,eAAxD,UAEW,QAAP,EAAAoV,SAAA,SAASroB,cAAsB,QAAP,EAAAqoB,SAAA,mBAASroB,mBAAT,eAAsBhO,QAAS,IACvDiwC,GAAc,UAAC5Z,SAAD,aAAC,EAASroB,aACxBkiC,GAAqB,UAAC7Z,SAAD,aAAC,EAAS6E,sBAE/B+U,QAAepvC,GACfqvC,QAAsBrvC,KAGtB8sC,GAAS1sB,SACTmb,GAAM4U,QAAuC,IAA/BrD,GAAS1sB,QAAQhU,aAG/Bm/B,EACAhQ,GAAMzuB,OAENyuB,GAAMl8B,QAGV2vC,IAAYzD,GAEZ,UAAI/V,SAAJ,OAAI,EAASzrB,eACTwxB,GAAMhF,KAAOf,EAAQzrB,aACrBolC,GAAgB3Z,EAAQzrB,eAGvB+mC,KACM,QAAP,EAAAtb,SAAA,SAASvyB,QAAO,SAACitC,GAAD,OAAoBhlC,GAAKqwB,GAAOmU,GAAcQ,MACvD,QAAP,EAAA1a,SAAA,SAASsG,SAAQ,SAACoU,GAAD,OAAoB9kC,GAAMmwB,GAAOmU,GAAcQ,MACzD,QAAP,EAAA1a,SAAA,SAAS6b,UAAS,SAAClqC,GAAD,aAAYkpC,GAAYhvC,KAAKC,IAAL,WAAU4lC,GAAU9mB,eAApB,QAA+B,EAAGjZ,IAAS,MAC9E,QAAP,EAAAquB,SAAA,SAAS8b,gBAAe,SAACvnC,EAAcmmC,GAAf,OACpBjP,GAAmBl3B,EAAcmmC,MAE9B,QAAP,EAAA1a,SAAA,SAAS/3B,QACL,SAACa,EAAUiI,EAAsBsE,EAAOwH,EAAO7J,EAAK0jC,EAAgBC,EAAkB/+B,GAAtF,eACI3P,EACIa,EACAiI,EACA2sB,EACAD,EACA30B,EAAWgvB,EAAchvB,EAASqE,YAAS3C,EAC3Cu7B,GAAMt7B,KAAKinC,GAAU9mB,SANnB,UAOFoV,SAPE,aAOF,EAAS6E,mBAPP,UAQF7E,SARE,aAQF,EAASzrB,aACTc,EACAwH,EACA7J,EACA0jC,EACAC,EACA/+B,MAGL,QAAP,EAAAooB,SAAA,SAAS0F,YAAW,SAACqB,GAAc,IAAD,EAC9BkS,EAAYlS,GACL,QAAP,EAAA/G,SAAA,SAAS+G,SAASA,MAEf,QAAP,EAAA/G,SAAA,SAAS+b,cAAT,uCAAuB,WAAOnlC,EAAa8jC,GAApB,SAAAtsC,EAAA,6DACfwiC,GAAWhmB,SACXmb,GAAMzuB,OAFS,SAKbmjC,GAAmB,IAAd7jC,EAAoBmvB,GAAO2U,GALnB,OAOf9J,GAAWhmB,SACXmb,GAAMl8B,QARS,2CAAvB,yDAWO,QAAP,EAAAm2B,SAAA,SAAS8E,qBAAT,uCAA8B,WAAOltB,GAAP,SAAAxJ,EAAA,6DACtBwiC,GAAWhmB,SACXmb,GAAMzuB,OAFgB,SAKpB4iC,GAAaiB,UALO,OAMtBvK,GAAWhmB,SACXmb,GAAMl8B,QAGVgwC,GAAsBjiC,GAVI,2CAA9B,uDAYO,QAAP,EAAAooB,SAAA,SAAS2Y,qBAAoB,kBAAMA,OAC5B,QAAP,EAAA3Y,SAAA,SAAS1yB,6BAA4B,SAACH,GAAD,OACjC8sC,IAA0B,SAAC+B,GACvB,IAAMC,EAAS,eAAQD,GAEvB,OADAC,EAAU9uC,IAAU6uC,EAAO7uC,GACpB8uC,QAIfX,GAAa,MAtM7B,iEAJY,wBAkNZ,OAlNY,0CAgNZD,GAAOxhC,MAAK,kBAAM6+B,OAEX,WAAO,IAAD,EACF,QAAP,EAAA1Y,SAAA,SAASI,QACT8a,GAAgB,KAErB,CACClD,EACAvjC,EACAsH,EACA6qB,EACAb,GACAmU,GACAO,GACA/B,EACAD,EACAjS,EACAv+B,EACA0wC,EACAE,EACAD,EACAnR,EACAqR,EACAhhB,EACA4F,EACAoa,EACAra,EACAsa,EACAxL,EACA5B,GACAsN,EACAC,EACA2C,GACApP,GACAoM,IAqBJp1B,qBAAU,WACF+1B,GAA6BA,EAA0BnoC,UAAY,GACnE0pC,IAAqC,SAACmC,GAKlC,OAJIA,GAAqC1D,EAA0B2D,QAC/DzmC,GAAKqwB,GAAOmU,IAAc,IAGvB,OAGhB,CAAC1B,EAA2BzS,GAAOmU,KAEtCz3B,qBAAU,WACF81B,GAAuB3H,GAAWhmB,UAClChV,GAAMmwB,GAAOmU,IAAc,GAC3BH,IAAqC,MAE1C,CAACxB,EAAqBxS,GAAOmU,KAEhCz3B,qBAAU,WACN,GAAIskB,IAAalrB,GAAS+pB,WAIrBl8B,IAAkC,IAArBA,GAAUC,OAA5B,CAIA,IAAIyyC,GAAU,EACVC,EAAmB,IAEjB9pC,EAAWu4B,YAAW,sBAAC,oCAAA18B,EAAA,yDACnBzE,EAAS+nC,GAAU9mB,QADA,oDAOnBva,EAAY01B,GAAMt7B,KAAKd,MACvB4H,EAAQ++B,GAAmB8B,YAAY/hC,IAEnCyQ,YAAcvP,EAAMuP,WAAWnX,OAAS,GAVzB,uBAWf2yC,EAAe/qC,EAAMuP,WAAW,IAErBjX,MAAQwG,EAAYgsC,EAAmB,KAbnC,oDAiBjBzL,GAAWhmB,SACXmb,GAAMzuB,OAGL8kC,EArBgB,wBAsBjBA,GAAU,EACJG,EAAKhxB,KAAK5gB,MAvBC,UAwBX8vC,GAAK6B,EAAazyC,MAAOk8B,IAAO,GAxBrB,QAyBjBsW,EAAmB9wB,KAAK5gB,MAAQ4xC,EAChCH,GAAU,EA1BO,QA6BjBxL,GAAWhmB,SACXmb,GAAMl8B,QA9BW,4CAiC1B,KAEH,OAAO,kBAAMuhC,cAAc74B,OAC5B,CAAC7I,GAAW4mC,GAAoBvJ,EAAUhB,GAAO0U,KAEpDh4B,qBAAU,WACF41B,GAAetY,IAAagY,GAC5BtwC,OAAOib,KACH85B,qBAEIC,mBAAmB1E,GACnB,YACAhY,GACA,eACJ,mBAAqBgY,EACrB,kCAIR0B,GAA0BluB,KAAK5gB,SAChC,CAAC0tC,EAAatY,GAAWgY,EAAcE,IAE1C,IAAMyE,GAAan5B,uBAAY,kBAAM7N,GAAKqwB,GAAOmU,IAAc,KAAO,CAACnU,GAAOmU,KACxEyC,GAAcp5B,uBAAY,kBAAM3N,GAAMmwB,GAAOmU,IAAc,KAAO,CAACnU,GAAOmU,KAC1EtP,GAAarnB,sBAAW,uCAC1B,WAAO2e,GAAP,SAAA9zB,EAAA,yDACSsjC,GAAU9mB,QADnB,wDAKQgmB,GAAWhmB,SACXmb,GAAMzuB,OANd,SASUmjC,GAAKvY,EAAWwP,GAAU9mB,QAASmb,IAAO,GATpD,OAWQ6K,GAAWhmB,SACXmb,GAAMl8B,QAZd,2CAD0B,sDAgB1B,CAACk8B,GAAO0U,KAGNmC,GAAuBr5B,sBAAW,uCACpC,WAAO9Y,EAAcoyC,GAArB,SAAAzuC,EAAA,6DACSyuC,GACDjnC,GAAMmwB,GAAOmU,IAAc,GAFnC,SAKUO,GAAKhwC,EAAMs7B,IAAO,GAL5B,OAOQ8W,IAAejM,GAAWhmB,SAE1BlV,GAAKqwB,GAAOmU,IAAc,GATlC,2CADoC,wDAapC,CAACnU,GAAO0U,GAAMP,KAGZ4C,GAA+Bv5B,uBACjC,SACIza,EACAiI,EACA2lC,EACAC,GAEA1uC,EACIa,EACAiI,EACA2sB,EACAD,EACA3F,EAAchvB,EAASqE,OACvBrE,EAASe,MACTg7B,GACAtwB,QACA/J,OACAA,OACAA,EACAksC,EACAC,OACAnsC,KAGR,CAACvC,EAAQy1B,EAAWD,EAAW3F,EAAe+M,GAAoBtwB,KAGhEwoC,GAAkBx5B,uBAAY,SAAC/U,GACjC43B,GAAiBxb,QAAQif,EAAIr7B,EAAEwuC,QAC/B5W,GAAiBxb,QAAQkf,EAAIt7B,EAAEyuC,UAChC,IAEG9Q,GAA2B5oB,sBAAW,uCACxC,WAAO3L,GAAP,SAAAxJ,EAAA,6DACQkpC,GAAS1sB,mBAAmB8pB,IAC5B4C,GAAS1sB,QAAQsyB,mBAAmBtlC,GAGxChC,GAAMmwB,GAAOmU,IAAc,GAL/B,SAOUO,GAAK,EAAG1U,IAAO,GAPzB,OASQ6K,GAAWhmB,SACXlV,GAAKqwB,GAAOmU,IAAc,GAVlC,2CADwC,sDAcxC,CAACnU,GAAOmU,GAAcO,KAGpB0C,GAAqB55B,uBACvB,SAAC5R,GAAoB,IAAD,EAChBkpC,GAAYhvC,KAAKC,IAAL,WAAU4lC,GAAU9mB,eAApB,QAA+B,EAAGjZ,IAAS,KAE3D,CAACkpC,KAGC1N,GAAqB5pB,uBAAY,SAACimB,GAChC6N,GAASzsB,mBAAmBwyB,mBAC5B/F,GAASzsB,QAAQ4e,OAASA,KAE/B,IAEG6T,GAA2B95B,uBAC7B,SAAChP,GACGk3B,GAAmBl3B,GAAc,KAErC,CAACk3B,KAGC6R,GAAiB/5B,uBAAY,SAACwjB,GAAD,OAAwBkS,EAAYlS,KAAW,IAE5EwW,GAA4Bh6B,uBAC9B,SAACpW,GAAD,OACI8sC,IAA0B,SAAC+B,GACvB,IAAMC,EAAS,eAAQD,GAEvB,OADAC,EAAU9uC,IAAU6uC,EAAO7uC,GACpB8uC,OAEf,IAGEuB,GAA0Bj6B,uBAC5B,SAAC7Z,GAC4B,IAArBA,EAAUC,QAAiBoS,EAAiB0hC,yBAA4BtqC,SAASuqC,YAIrFzwB,UAAUC,UAAU8P,UAAUtzB,EAAUiJ,KAAI,SAAC3H,GAAD,OAAOA,EAAE8G,QAAMc,KAAK,OAAOoH,OAAM,SAACxL,SAIlF,CAACuN,EAAiB0hC,0BAGtBh7B,qBAAU,WACN,IAAI8pB,EAAJ,CAIA,IAAMh6B,EAAWu4B,YAAW,sBAAC,4BAAA18B,EAAA,yDACnBzE,EAAS+nC,GAAU9mB,UACRmb,GAAM7D,SAASv4B,IAEhB,GAJS,uBAKrBiM,GAAMmwB,GAAOmU,IAAc,GALN,SAMfO,GAAK,EAAG1U,IAAO,GANA,OAOrB0T,GAA0BluB,KAAK5gB,OAPV,2CAS1B,KAEH,OAAO,kBAAMygC,cAAc74B,OAC5B,CAACwzB,GAAOr8B,GAAWwwC,GAAcO,GAAMlO,IAE1C9pB,qBAAU,WACN,IAAM7Z,EAAS+nC,EAAUgN,UACrB,SAAC90C,GACGA,EAAMgjB,iBAEFma,GACApwB,GAAMmwB,GAAOmU,IAAc,GAE3BxkC,GAAKqwB,GAAOmU,IAAc,MAGlC,kBAAMvT,KAGV,OAAO,kBAAM/9B,OACd,CAAC+nC,EAAW3K,GAASD,GAAOmU,GAAcvT,IAE7ClkB,qBAAU,WACN,OAAOkuB,EAAUiN,wBACb,SAAC/0C,EAAOkD,GACJlD,EAAMgjB,iBAEF4f,GADA1/B,EACmBF,KAAKgG,IAAI,EAAG0C,GAAe,IAE3B1I,KAAKC,IAAI,GAAKyI,GAAe,KAFI,MAK5D,kBAAMoyB,OAEX,CAAC8E,GAAoBl3B,GAAcoyB,EAAkBgK,IAExD,IAAMkN,GAAiBt6B,uBACnB,SAAC1a,EAAsBg1C,GACnB,GAAK7W,GAAL,CAIAn+B,EAAMgjB,iBACN,IAAMiyB,EAAc/W,IAAa8W,EAAiBhiC,GAAS8pB,OAASkY,EACpE5E,EAAY6E,GACZ/E,EAAyBhS,EAAU+W,GAE/BxG,GAAS1sB,mBAAmB8pB,IAC5B4C,GAAS1sB,QAAQmc,SAAS+W,MAGlC,CAAC/W,EAAUC,GAAiB+R,IAGhCt2B,qBAAU,WACN,OAAOkuB,EAAUoN,eACb,SAACl1C,GAAD,OAAWg1C,GAAeh1C,EAAOgT,GAASgqB,cAC1C,kBAAMc,OAEX,CAACkX,GAAgBlN,EAAWhK,IAE/BlkB,qBAAU,WACN,OAAOkuB,EAAUqN,uBACb,SAACn1C,GAAD,OAAWg1C,GAAeh1C,EAAOgT,GAAS+pB,cAC1C,kBAAMe,OAEX,CAACkX,GAAgBlN,EAAWhK,IAE/BlkB,qBAAU,WACN,IAAKib,GAAaD,MAAgB/zB,IAAkC,IAArBA,GAAUC,QAAe,CACpE,IAAMs0C,EAAatN,EAAUoD,UACzB,SAAClrC,EAAOC,GACJD,EAAMgjB,iBACNhjB,EAAMijB,kBACN,IAAM/a,EAAuBS,EAAyB1I,EAAU4oC,GAAU9mB,QAAS,KACnF3iB,EACIa,EACAiI,EACA2sB,EACAD,OACAjzB,EACAu7B,GAAMt7B,KAAKinC,GAAU9mB,SACrBia,GACAtwB,QACA/J,OACAA,OACAA,OACAA,OACAA,OACAA,MAGR,kBAAMm8B,KACN,WACI,GAAK+K,GAAU9mB,QAAf,CAIA,IAAMva,EAAY01B,GAAMt7B,KAAKinC,GAAU9mB,SACjC9gB,EAAM+B,KAAKgG,IAAIxB,EAAY,IAAMqhC,GAAU9mB,SAEjD,MAAO,CACH9Y,KAAM,GACNjI,MAAOwG,EACP5E,cAAe4E,EACfvG,IAAKA,EACLiI,YAAajI,EACbqD,MAAO,OAKb+wC,EAAmBvN,EAAUuD,gBAC/B,SAACrrC,GACGA,EAAMgjB,iBACNhjB,EAAMijB,kBACN,IAAMzb,EAAY01B,GAAMt7B,KAAKinC,GAAU9mB,SACjC9gB,EAAM+B,KAAKgG,IAAIxB,EAAY,IAAMqhC,GAAU9mB,SAC3C9hB,EAAW,CACbgJ,KAAM,GACNjI,MAAOwG,EACP5E,cAAe4E,EACfvG,IAAKA,EACLiI,YAAajI,EACbqD,MAAO,GAEL4D,EAAuBS,EAAyB1I,EAAU4oC,GAAU9mB,QAAS,KACnF3iB,EACIa,EACAiI,EACA2sB,EACAD,OACAjzB,EACA6F,EACAw0B,GACAtwB,QACA/J,OACAA,OACAA,EACAmR,EAAew4B,oBACf3pC,OACAA,MAGR,kBAAM,KAGV,OAAO,WACHyzC,IACAC,QAGT,CACCvN,EACAjT,EACAD,EACA/zB,GACAq8B,GACAxxB,GACAswB,GACA8B,EACA1+B,EACA0wC,IAGJl2B,qBAAU,WACF60B,GAAS1sB,mBAAmB8pB,IAC5B4C,GAAS1sB,QAAQuzB,aAAa9uB,KAEnC,CAACA,IAEJ5M,qBAAU,WACF60B,GAAS1sB,mBAAmB8pB,IAC5B4C,GAAS1sB,QAAQgxB,yBAAyBxD,KAE/C,CAACA,IAEJ31B,qBAAU,WACF60B,GAAS1sB,mBAAmB8pB,IAC5B4C,GAAS1sB,QAAQwzB,iBAAiBjG,KAEvC,CAACA,IAEJ11B,qBAAU,WACDu2B,IAIDpI,GAAWhmB,SACXmb,GAAMzuB,OAGVslC,GAAqB5D,EAAenvC,OAAO,MAC5C,CAACk8B,GAAOiT,EAAgB4D,KAE3B,IAAMjzC,GAAS+nC,GAAU9mB,QACnByzB,GAASvG,GAAgBC,GAAgBruC,GACzC40C,GAAgBjF,QAAQgF,IAAUtG,IAAiBM,GAEzD,OACI,uBAAKkG,YAAaxB,GAAiBj6B,UAAWN,GAAQR,KAAtD,UACI,gBAACyM,GAAA,EAAD,CAAMC,WAAS,EAACvc,UAAU,MAAM0sB,KAAK,SAAS/b,UAAWN,GAAQkM,UAAjE,UACK4vB,IACG,eAAC7vB,GAAA,EAAD,CAAME,MAAI,EAACpb,MAAO,CAAEiS,SAAU,EAAG8W,SAAU,KAA3C,SACI,yBACIrO,IAAKgqB,EACLn1B,UAAWN,GAAQ00B,WACnB3hC,IACIinC,qBAEAC,mBAAmB1E,GACnB,YACAhY,GACA,gBAEJhb,MAAM,kBAIfu5B,IAAkB50C,KAAsB,QAAT,EAAAA,UAAA,eAAWC,QAAS,IAClD,gBAAC8kB,GAAA,EAAD,CACIE,MAAI,EACJpb,MAAO,CACHiS,SAAU84B,GAAgB,EAAI,EAC9BnlC,MAAOmlC,IAAiBlG,EAAqB,EAAI,QAJzD,UAOKiG,MAAYtG,IAAiBM,IAC1B,eAACvS,GAAD,CACIM,iBAAkBA,GAClBJ,QAASA,GACTD,MAAOA,GACPp8B,OAAQA,GACRu8B,cAAekR,GAAYC,GAAUC,GAAU5tC,IAAW,GAC1DiO,YAAaA,GACbktB,mBAAoBA,GACpBM,MAAQ4S,IAAiBD,GAAgBQ,QAAkB9tC,EAC3D46B,YAAamH,EACb7O,UAAS,OAAEA,QAAF,IAAEA,OAAF,EAAEA,EAAW3qB,KACtB0qB,UAAS,OAAEA,QAAF,IAAEA,OAAF,EAAEA,EAAW1qB,KACtBkzB,eAAe,EACft0B,OAAQA,GACR4C,aAAcA,GACd4xB,qBAAsBoG,GAAQ93B,EAAUumC,WAAawD,KAAI/pC,EAAU2L,QAAS,UAC5EqmB,qBAAsB4W,GACtBvW,cAAeuS,QAAQvB,GACvB9Q,gBAAiBA,GACjBD,SAAUA,EACVt5B,OAAQivC,GACRpW,QAASqW,GACTlZ,OAAQmH,GACR9F,qBAAsBqH,GACtB9G,cAAeA,EACfkB,cAAe,kBAAMuR,GAAgBvR,EAAcuR,IACnDtR,cAAe,kBAAMuR,GAAgBvR,EAAcuR,IACnDxsC,eAAgB4xC,GAChBzW,eAAgByG,GAChBzH,WAAY4X,GACZ3W,iBAAkBA,EAClBC,oBAAqBA,EACrBiB,qBAAqB,IAG7B,eAACsI,GAAD,CACInK,QAASA,GACTt8B,UAAWA,GACX4mC,mBAAoBA,GACpBvK,MAAOA,GACPp8B,OAAQA,GACR4mC,eAAgBA,EAChB3Y,WAAYA,EACZvI,aAAcA,EACd+e,WAAYiL,QAAQtB,IAAiBM,GACrCjJ,uBAA2B5kC,IAAR+hC,EACnBrc,QAASopB,GACT9I,aAAsB,OAAT9S,QAAS,IAATA,OAAA,EAAAA,EAAW3qB,OAASslC,IAAW,OAAI5a,QAAJ,IAAIA,OAAJ,EAAIA,EAAW1qB,YAASvI,EACpEm8B,iBAAkBA,EAClB8J,uBAAwBA,GACxB5Y,OAAQymB,IAAiBlG,EACzB1H,uBAAwBA,GACxBjN,OAAQmZ,GACR30C,OAAQ60C,GACRvxC,eAAgB4xC,GAChBrwC,sBAAuBywC,GACvBnN,oBAAqBoN,GACrBnN,iBAAkBA,GAClBt0B,iBAAkBA,EAClB40B,UAAWA,UAK3B,wBAAO1iB,IAAKopB,GAAU9hC,IAAKuiC,O,cC3kCxB,SAAS2G,GAAT,GAA4F,IAA/D/7B,EAA8D,EAA9DA,KAAM8E,EAAwD,EAAxDA,UAAWE,EAA6C,EAA7CA,SAAUg3B,EAAmC,EAAnCA,yBACnE,EAAkCt3C,mBAAiB,IAAnD,mBAAOgY,EAAP,KAAkBu/B,EAAlB,KAEAl8B,qBAAU,WACNk8B,EAAa,MACd,CAACj8B,IAEJ,IAAMk8B,EAAc,sBACbF,GADa,CAEhB,WACA,OACA,aACA,SACA,QACA,UACFhiC,SAAS0C,GAEX,OACI,gBAACwF,GAAA,EAAD,CACIlC,KAAMA,EACNiL,qBAAmB,EACnBC,WAAS,EACT5U,SAAS,KACT4J,QAAS8E,EALb,UAOI,eAACm3B,GAAA,EAAD,+BACA,eAAC7wB,GAAA,EAAD,UACI,gCACI,eAAClK,GAAA,EAAD,CACIhU,MAAO8uC,EACPrwB,WAAYqwB,GAAW,gBAAax/B,EAAb,mBACvB2O,QAAQ,SACRH,WAAS,EACT3H,MAAM,aACN/G,MAAOE,EACP8O,MAAM,YACNnK,SAAU,SAACvV,GAAD,OAAOmwC,EAAanwC,EAAEG,OAAOuQ,cAInD,gBAACgQ,GAAA,EAAD,WACI,eAACC,GAAA,EAAD,CAAQ1B,QAAS,kBAAM/F,KAAvB,oBACA,eAACyH,GAAA,EAAD,CAAQ7H,SAAUs3B,GAAoC,KAArBx/B,EAAU1M,OAAe+a,QAAS,kBAAMjG,EAAUpI,EAAU1M,SAA7F,0B,+MCnBVsR,GAAYjC,cAAkB,SAACkC,GAAD,MAAY,CAC5CjC,KAAM,CACF,uBAAwB,CACpBiN,UAAWhL,EAAMsB,QAAQ,GACzBD,aAAcrB,EAAMsB,QAAQ,KAGpCu5B,gBAAiB,CACb,uBAAwB,CACpB7vB,UAAWhL,EAAMsB,QAAQ,GACzBD,aAAcrB,EAAMsB,QAAQ,KAGpCw5B,gBAAiB,CACblvB,gBAAgB,0BAAD,OAA4B5L,EAAM2C,QAAQzG,OAAO0G,mBAAjD,2DAAsH5C,EAAM2C,QAAQzG,OAAO0G,mBAA3I,2EAAgO5C,EAAM2C,QAAQzG,OAAO0G,mBAArP,0DAAyT5C,EAAM2C,QAAQzG,OAAO0G,mBAA9U,SACf3C,eAAgB,YAChB0L,mBAAoB,qCACpBX,UAAWhL,EAAMsB,QAAQ,GACzBD,aAAcrB,EAAMsB,QAAQ,GAC5BvM,SAAU,OACV0N,QAAS,IAEbs4B,qBAAsB,CAClB7H,OAAQ,OACRh+B,MAAO,OACPuW,UAAW,SACX/I,gBAAiB,gBACjB,UAAW,CACPs4B,QAAS,SAGjBC,eAAgB,CACZ/lC,MAAO,QAEXgmC,YAAa,CACTl9B,eAAgB,gBAChBqf,WAAY,OAId8d,GAA6Br9B,cAAkB,SAACkC,GAAD,MAAY,CAC7Do7B,YAAa,CACTld,OAAQle,EAAMsB,QAAQ,GACtB+W,SAAU,KAEdta,KAAM,CACFxO,QAAS,OACTgc,cAAe,MACfvN,eAAgB,MAChBwN,WAAY,gBAuBpB,SAAS6vB,GAAT,GAQ4B,IAPxBr5B,EAOuB,EAPvBA,MACA/G,EAMuB,EANvBA,MACAqgC,EAKuB,EALvBA,WACAC,EAIuB,EAJvBA,UACAz7B,EAGuB,EAHvBA,SACA07B,EAEuB,EAFvBA,kBACAC,EACuB,EADvBA,UAEMl9B,EAAU48B,KAEhB,OACI,uBAAKt8B,UAAWN,EAAQR,KAAxB,UACI,eAAC8B,GAAA,EAAD,CACImC,MAAOA,EACP/G,MAAOA,EACP6E,SAAUA,EACV6J,WAAS,EACTM,MAAM,YACNE,WAAY,CACRC,aAAcmxB,GACV,eAACp4B,GAAA,EAAD,CAAgBlF,SAAS,MAAzB,SACI,eAACsL,GAAA,EAAD,CAAYC,QAAS,SAACjf,GAAD,cAAOkxC,QAAP,IAAOA,OAAP,EAAOA,KAA5B,SACI,eAAC,KAAD,WAMpB,gBAACC,GAAA,EAAD,CAAa78B,UAAWN,EAAQ68B,YAAhC,UACI,eAACO,GAAA,EAAD,IACA,eAACC,GAAA,EAAD,CAAQ3gC,MAAOA,EAAOoI,UAAWi4B,EAAYrxB,MAAM,YAAYnK,SAAU07B,EAAzE,SACKF,GACGA,EAAW5sC,KAAI,SAAC3H,GAAD,OACX,eAAC80C,GAAA,EAAD,CAAkB5gC,MAAOlU,EAAzB,SACKA,GADUA,cAe3C,IAAM+0C,GAAiE,CACnEz3C,aAAc,CAAE2d,MAAO,wBAAyB+5B,qBAAqB,GACrEh3C,WAAY,CAAEid,MAAO,6CAA8C+5B,qBAAqB,GACxF72C,eAAgB,CACZ8c,MAAO,gFACP+5B,qBAAqB,GAEzBtyC,WAAY,CAAEuY,MAAO,aAAc+5B,qBAAqB,GACxDpyC,gBAAiB,CAAEqY,MAAO,oBAAqB+5B,qBAAqB,GACpEnyC,wBAAyB,CAAEoY,MAAO,4BAA6B+5B,qBAAqB,GACpFnzC,gBAAiB,CAAEoZ,MAAO,mBAAoB+5B,qBAAqB,GACnEhzC,0BAA2B,CAAEiZ,MAAO,mCAAoC+5B,qBAAqB,GAC7F/yC,0BAA2B,CAAEgZ,MAAO,mCAAoC+5B,qBAAqB,GAC7FzyC,8BAA+B,CAAE0Y,MAAO,uCAAwC+5B,qBAAqB,GACrGxyC,8BAA+B,CAAEyY,MAAO,uCAAwC+5B,qBAAqB,GACrG50C,aAAc,CAAE6a,MAAO,2BAA4B+5B,qBAAqB,GACxE30C,YAAa,CAAE4a,MAAO,0BAA2B+5B,qBAAqB,GACtEh2C,uBAAwB,CAAEic,MAAO,4BAA6B+5B,qBAAqB,GACnF91C,mBAAoB,CAAE+b,MAAO,wBAAyB+5B,qBAAqB,GAC3E11C,iCAAkC,CAAE2b,MAAO,wCAAyC+5B,qBAAqB,GACzGt0C,+BAAgC,CAC5Bua,MAAO,2EACP+5B,qBAAqB,GAEzBr0C,2BAA4B,CACxBsa,MAAO,uEACP+5B,qBAAqB,GAEzB5zC,eAAgB,CAAE6Z,MAAO,mCAAoC+5B,qBAAqB,GAClF9zC,eAAgB,CAAE+Z,MAAO,mCAAoC+5B,qBAAqB,GAClFxzC,YAAa,CAAEyZ,MAAO,wBAAyB+5B,qBAAqB,GACpEtzC,qBAAsB,CAAEuZ,MAAO,+BAAgC+5B,qBAAqB,GACpFrzC,qBAAsB,CAAEsZ,MAAO,+BAAgC+5B,qBAAqB,IAIlFC,GAAqDC,WACrD,GACA,CACI,SAAK,OACL,SAAK,QACL,SAAK,OAGTC,GAAe,CAAC,SAAK,SAAK,SAAK,OAAQ,QAAS,MAAO,SAAU,UAAW,UAAW,UAEvFC,GAAwBr+B,cAAkB,SAACkC,GAAD,MAAY,CACxDyK,UAAW,CACPO,UAAWhL,EAAMsB,QAAQ,GACzBD,aAAcrB,EAAMsB,QAAQ,IAEhC86B,UAAW,OAWf,SAASC,GAAT,GAAwH,IAAhGr6B,EAA+F,EAA/FA,MAAO1d,EAAwF,EAAxFA,KAAMy3C,EAAkF,EAAlFA,oBAAqBO,EAA6D,EAA7DA,aAAcC,EAA+C,EAA/CA,yBAC9Dh+B,EAAU49B,KAChB,EAAgDh5C,mBAAiBmB,GAAjE,mBAAOk4C,EAAP,KAAyBC,EAAzB,KACMC,EAAsB9c,mBAC5B8c,EAAoB/1B,QAAU61B,EAC9B,IAAMG,EAAkB/c,mBACxB+c,EAAgBh2B,QAAU21B,EAC1B,MAA8Bn5C,oBAAkB,GAAhD,mBAAOy5C,EAAP,KAAgBC,EAAhB,KAEAr+B,qBAAU,kBAAMi+B,EAAoBn4C,KAAO,CAACA,IAE5C,IA6EIqlC,EA7EEmT,EAAuBx9B,uBACzB,SAAC1a,GACoC,IAA7BA,EAAMm4C,YAAYC,SAIlBjB,EACAQ,KAIJE,EAAoB,IACpBI,GAAW,OAEf,CAACN,EAA0BR,IAGzB/xB,EAAM4V,iBAA0B,MAsEtC,OApEAphB,qBAAU,WACN,GAAKo+B,EAAL,CAIA,IAAMr4C,EAAU,SAACK,GACb,GAAmB,YAAfA,EAAM8G,KAAoB,CAG1B,IAAMuxC,EAAUx4C,IAAQy4C,sBACxBT,EACIQ,EACKvuC,KAAI,SAAC4rB,GAAS,IAAD,EACV,iBAAO0hB,GAAwB1hB,UAA/B,QAAuCA,KAE1C3f,MAAK,SAACxQ,EAAGusB,GACN,IAAMymB,EAAcjB,GAAazjC,SAAStO,GACpCizC,EAAclB,GAAazjC,SAASie,GAE1C,OAAIymB,IAAgBC,GACR,GAGPD,GAAeC,EACT,EAGJ,KAEVzuC,KAAK,UAEQ,UAAf/J,EAAM8G,OACbmxC,GAAW,GAIPH,EAAoB/1B,SACpBg2B,EAAgBh2B,QAAS+1B,EAAoB/1B,WAMzD,OADAliB,YAAQ,IAAK,CAAE44C,OAAO,GAAQ94C,GACvB,kBAAME,IAAQE,OAAO,IAAKJ,OAClC,CAACq4C,IAEJp+B,qBAAU,WACN,IAAMja,EAAU,SAACK,GAAuB,IAAD,GAC/Bg4C,GAAW,UAAC5yB,EAAIrD,eAAL,OAAC,EAAa22B,SAAS14C,EAAM8F,UACxCmyC,GAAW,GACXJ,EAAoB,IACpBH,EAAa,MAIrB,OADA94C,OAAO0L,SAASvL,iBAAiB,QAASY,GACnC,kBAAMf,OAAO0L,SAAStL,oBAAoB,QAASW,MAC3D,CAACq4C,EAASN,IAKT3S,EADAiT,EACc,YACPb,EACO,aAEA,UAId,gBAACvxB,GAAA,EAAD,CAAMC,WAAS,EAAC5L,UAAWN,EAAQkM,UAAWmQ,KAAM,SAAUtZ,QAAS,EAAvE,UACI,eAACkJ,GAAA,EAAD,CAAME,MAAI,EAAC7L,UAAWN,EAAQ69B,UAAWmB,GAAI,EAA7C,SACI,eAAC1zB,GAAA,EAAD,UAAa7H,MAEjB,eAACwI,GAAA,EAAD,CAAME,MAAI,EAAC6yB,GAAI,EAAf,SACI,eAAC19B,GAAA,EAAD,CACI8pB,YAAaA,EACbvmC,KAAK,QACLo6C,iBAAiB,EACjBn6B,SAAU04B,EACVzxB,WAAYyxB,EAAsB,0BAAuBx1C,EACzD0U,MAAOuhC,EACPvyB,MAAM,YACNE,WAAY,CACRC,aACI,eAACjH,GAAA,EAAD,CAAgBlF,SAAS,MAAzB,SACI,eAACsL,GAAA,EAAD,CAAYS,IAAKA,EAAKR,QAASszB,EAA/B,SACI,eAAC,KAAD,gBAoBrB,SAASW,GAAT,GAA0F,IAAhEx5B,EAA+D,EAA/DA,KAAMzT,EAAyD,EAAzDA,UAAWiO,EAA8C,EAA9CA,KAAMs0B,EAAwC,EAAxCA,SAAU2K,EAA8B,EAA9BA,WAAY/+B,EAAkB,EAAlBA,QAC5EJ,EAAUwB,KAChB,EAA4C5c,mBAAiB4vC,EAAS/6B,gBAAtE,mBAAOA,EAAP,KAAuB2lC,EAAvB,KACA,EAAsDx6C,qBAAtD,mBAAOy6C,EAAP,KAA4BC,EAA5B,KACA,EAA0E16C,mBAAiB,GAA3F,mBAAO26C,EAAP,KAAsCC,EAAtC,KACA,EAAwB56C,mBAAiB4vC,EAASp5B,MAAQ,IAA1D,mBAAOA,EAAP,KAAaqkC,EAAb,KACA,EAAkC76C,qBAAlC,mBAAO86C,EAAP,KAAkBC,EAAlB,KACA,EAAgC/6C,mBAAiB4vC,EAASn5B,UAAY,IAAtE,mBAAOA,EAAP,KAAiBukC,EAAjB,KACA,EAAoCh7C,qBAApC,mBAAOi7C,EAAP,KAAmBC,EAAnB,KACA,EAA0Cl7C,mBAAiB4vC,EAAS75B,eAAiB,IAArF,mBAAOA,EAAP,KAAsBolC,EAAtB,KACA,EAA8Cn7C,mBAAiB4vC,EAAS55B,iBAAmB,IAA3F,mBAAOA,EAAP,KAAwBolC,EAAxB,KACA,EAAoCp7C,mBAAiB4vC,EAAS34B,YAAc,IAA5E,mBAAOA,GAAP,KAAmBokC,GAAnB,KACA,GAAoCr7C,mBAAiB4vC,EAASt4B,YAAc,IAA5E,qBAAOA,GAAP,MAAmBgkC,GAAnB,MACA,GAAkCt7C,mBAAiB4vC,EAAS16B,WAAa,IAAzE,qBAAOA,GAAP,MAAkBqmC,GAAlB,MACA,GAAsCv7C,mBAAiB4vC,EAAS35B,aAAe,IAA/E,qBAAOA,GAAP,MAAoBulC,GAApB,MACA,GAAgCx7C,mBAAiB4vC,EAAS15B,UAAY,IAAtE,qBAAOA,GAAP,MAAiBulC,GAAjB,MACA,GAAwCz7C,mBAAoC4vC,EAASx5B,kBAArF,qBAAOyK,GAAP,MAAqB66B,GAArB,MACA,GAAwB17C,mBAAmB4vC,EAASj6B,MAApD,qBAAOA,GAAP,MAAawM,GAAb,MACA,GAAkCniB,mBAAkB4vC,EAAS7rB,WAA7D,qBAAOA,GAAP,MAAkB43B,GAAlB,MACA,GAAoC37C,qBAApC,qBAAO47C,GAAP,MAAmBC,GAAnB,MACA,GAA0D77C,oBAAkB,GAA5E,qBAAO87C,GAAP,MAA8BC,GAA9B,MACA,GAAkD/7C,mBAAiB4vC,EAAS3rB,mBAA5E,qBAAOA,GAAP,MAA0B+3B,GAA1B,MACA,GAA8Ch8C,mBAAiB4vC,EAAS1rB,iBAAxE,qBAAOA,GAAP,MAAwB+3B,GAAxB,MACA,GAA0Cj8C,mBAAiB4vC,EAASsM,eAApE,qBAAOA,GAAP,MAAsBC,GAAtB,MACA,GAA4Cn8C,mBAAiB4vC,EAASwM,gBAAtE,qBAAOA,GAAP,MAAuBC,GAAvB,MACA,GAA8Er8C,mBAC1E4vC,EAAStD,iCADb,qBAAOA,GAAP,MAAwCgQ,GAAxC,MAGA,GAA4Et8C,mBACxE4vC,EAASrD,gCADb,qBAAOA,GAAP,MAAuCgQ,GAAvC,MAGA,GAA0Cv8C,mBAAiB4vC,EAASpd,eAApE,qBAAOA,GAAP,MAAsBgqB,GAAtB,MACA,GAAwCx8C,mBAAiB4vC,EAASnd,cAAlE,qBAAOA,GAAP,MAAqBgqB,GAArB,MACA,GAAwDz8C,mBAAiB4vC,EAASjd,sBAAlF,qBAAOA,GAAP,MAA6B+pB,GAA7B,MACA,GAAgE18C,mBAAiB4vC,EAASld,0BAA1F,qBAAOA,GAAP,MAAiCiqB,GAAjC,MACA,GAA8D38C,mBAAiB4vC,EAAS/c,yBAAxF,qBAAOA,GAAP,MAAgC+pB,GAAhC,MACA,GAAkE58C,mBAC9D4vC,EAAShd,2BADb,qBAAOA,GAAP,MAAkCiqB,GAAlC,MAGA,GAAoD78C,mBAAiB4vC,EAAS9c,oBAA9E,qBAAOA,GAAP,MAA2BgqB,GAA3B,MACA,GAA0E98C,mBACtE4vC,EAASmN,+BADb,qBAAOA,GAAP,MAAsCC,GAAtC,MAGA,GAA8Ch9C,mBAAiB4vC,EAAS+H,iBAAxE,qBAAOA,GAAP,MAAwBsF,GAAxB,MACA,GAAkCj9C,mBAA2B4vC,EAASsN,WAAtE,qBAAOA,GAAP,MAAkBC,GAAlB,MACA,GAA0Dn9C,mBAAkB4vC,EAASwN,uBAArF,qBAAOA,GAAP,MAA8BC,GAA9B,MACA,GAAsDr9C,mBAA8B4vC,EAASoD,qBAA7F,qBAAOA,GAAP,MAA4BsK,GAA5B,MACA,GAAoCt9C,mBAAqB4vC,EAASjvC,YAAlE,qBAAOA,GAAP,MAAmB48C,GAAnB,MACA,GAA4Dv9C,mBAAkB4vC,EAAS4N,wBAAvF,qBAAOA,GAAP,MAA+BC,GAA/B,MACA,GAAkEz9C,mBAC9D4vC,EAAS8N,2BADb,qBAAOA,GAAP,MAAkCC,GAAlC,MAGA,GAA8D39C,mBAAkB4vC,EAASyG,yBAAzF,qBAAOA,GAAP,MAAgCuH,GAAhC,MACA,GAAsD59C,mBAAiB4vC,EAASiO,qBAAhF,qBAAOA,GAAP,MAA4BC,GAA5B,MACA,GAAoF99C,mBAChF4vC,EAASmO,oCADb,qBAAOA,GAAP,MAA2CC,GAA3C,MAIMC,GAA6B9hC,uBAAY,SAAC/U,GAC5CozC,EAAkBpzC,EAAEG,OAAOuQ,OAC3B8iC,EAAiCz2B,KAAK5gB,SACvC,IAEG26C,GAA4B/hC,uBAC9B,SAAC/U,GAAD,OAA4CwzC,EAAiCz2B,KAAK5gB,SAClF,IAEE46C,GAAmBhiC,uBACrB,SAAC/U,GAAD,OAA4DyzC,EAAQzzC,EAAEG,OAAOuQ,SAC7E,IAEEsmC,GAA4BjiC,uBAC9B,SAAC/U,GAAD,OAAmEyzC,EAAQzzC,EAAEG,OAAOuQ,SACpF,IAEEumC,GAAuBliC,uBACzB,SAAC/U,GAAD,OAA4D4zC,EAAY5zC,EAAEG,OAAOuQ,SACjF,IAEEwmC,GAAgCniC,uBAClC,SAAC/U,GAAD,OAAmE4zC,EAAY5zC,EAAEG,OAAOuQ,SACxF,IAEEymC,GAA4BpiC,uBAC9B,SAAC/U,GAAD,OAA4D+zC,EAAiB/zC,EAAEG,OAAOuQ,SACtF,IAEE0mC,GAAqCriC,uBACvC,SAAC/U,GAAD,OAAmE+zC,EAAiB/zC,EAAEG,OAAOuQ,SAC7F,IAEE2mC,GAA8BtiC,uBAChC,SAAC/U,GAAD,OAA4Dg0C,EAAmBh0C,EAAEG,OAAOuQ,SACxF,IAEE4mC,GAAuCviC,uBACzC,SAAC/U,GAAD,OAAmEg0C,EAAmBh0C,EAAEG,OAAOuQ,SAC/F,IAEE6mC,GAAyBxiC,uBAC3B,SAAC/U,GAAD,OAA4Di0C,GAAcj0C,EAAEG,OAAOuQ,SACnF,IAEE8mC,GAAkCziC,uBACpC,SAAC/U,GAAD,OAAmEi0C,GAAcj0C,EAAEG,OAAOuQ,SAC1F,IAEE+mC,GAAyB1iC,uBAC3B,SAAC/U,GAAD,OAA4Dk0C,GAAcl0C,EAAEG,OAAOuQ,SACnF,IAEEgnC,GAAkC3iC,uBACpC,SAAC/U,GAAD,OAAmEk0C,GAAcl0C,EAAEG,OAAOuQ,SAC1F,IAEEinC,GAAwB5iC,uBAC1B,SAAC/U,GAAD,OAA4Dm0C,GAAan0C,EAAEG,OAAOuQ,SAClF,IAEEknC,GAAiC7iC,uBACnC,SAAC/U,GAAD,OAAmEm0C,GAAan0C,EAAEG,OAAOuQ,SACzF,IAEEmnC,GAA0B9iC,uBAC5B,SAAC/U,GAAD,OAA4Do0C,GAAep0C,EAAEG,OAAOuQ,SACpF,IAEEonC,GAAmC/iC,uBACrC,SAAC/U,GAAD,OAAmEo0C,GAAep0C,EAAEG,OAAOuQ,SAC3F,IAEEqnC,GAAuBhjC,uBACzB,SAAC/U,GAAD,OAA4Dq0C,GAAYr0C,EAAEG,OAAOuQ,SACjF,IAEEsnC,GAAgCjjC,uBAClC,SAAC/U,GAAD,OAAmEq0C,GAAYr0C,EAAEG,OAAOuQ,SACxF,IAEEunC,GAA0BljC,uBAC5B,SAAC/U,GAAD,OAA4D40C,GAAqBv4C,OAAO2D,EAAEG,OAAOuQ,UACjG,IAEEwnC,GAAwBnjC,uBAC1B,SAAC/U,GAAD,OAA4D60C,GAAmBx4C,OAAO2D,EAAEG,OAAOuQ,UAC/F,IAEEynC,GAAsBpjC,uBACxB,SAAC/U,GAAD,OAA4D+0C,GAAiB14C,OAAO2D,EAAEG,OAAOuQ,UAC7F,IAEE0nC,GAAuBrjC,uBACzB,SAAC/U,GAAD,OAA4Di1C,GAAkB54C,OAAO2D,EAAEG,OAAOuQ,UAC9F,IAEE2nC,GAAwCtjC,uBAC1C,SAAC/U,GAAD,OACIk1C,GAAmC74C,OAAO2D,EAAEG,OAAOuQ,UACvD,IAEE4nC,GAAuCvjC,uBACzC,SAAC/U,GAAD,OACIm1C,GAAkC94C,OAAO2D,EAAEG,OAAOuQ,UACtD,IAEE6nC,GAA4BxjC,uBAC9B,SAAC/U,GAAD,OAA4Do1C,GAAiBp1C,EAAEG,OAAOuQ,SACtF,IAEE8nC,GAA2BzjC,uBAC7B,SAAC/U,GAAD,OAA4Dq1C,GAAgBh5C,OAAO2D,EAAEG,OAAOuQ,UAC5F,IAEE+nC,GAAmC1jC,uBACrC,SAAC/U,GAAD,OAA4Ds1C,GAAwBt1C,EAAEG,OAAOuQ,SAC7F,IAEEgoC,GAAuC3jC,uBACzC,SAAC/U,GAAD,OAA4Du1C,GAA4Bl5C,OAAO2D,EAAEG,OAAOuQ,UACxG,IAEEioC,GAAsC5jC,uBACxC,SAAC/U,GAAD,OAA4Dw1C,GAA2Bx1C,EAAEG,OAAOuQ,SAChG,IAEEkoC,GAAwC7jC,uBAC1C,SAAC/U,GAAD,OACIy1C,GAA6Bp5C,OAAO2D,EAAEG,OAAOuQ,UACjD,IAEEmoC,GAAiC9jC,uBACnC,SAAC/U,GAAD,OAA4D01C,GAAsB11C,EAAEG,OAAOuQ,SAC3F,IAEEooC,GAA8B/jC,uBAChC,SAAC/U,GAAD,OAA4D61C,GAAmB71C,EAAEG,OAAOuQ,SACxF,IAEEqoC,GAA4ChkC,uBAC9C,SAAC/U,GAAD,OACI41C,GAAiCv5C,OAAO2D,EAAEG,OAAOuQ,UACrD,IAEEsoC,GAAuBjkC,uBAAY,SAAChG,GACtCulC,IAAgB,SAAC2E,GACb,IAAMC,EAA6C,GAGnD,OAFAzzC,OAAOgY,OAAOy7B,EAAiBD,GAC/BC,EAAgBnqC,GAAmB,GAC5BmqC,KAEXvE,IAAyB,KAC1B,IACGp3B,GAA0BxI,uBAAY,SAAChG,EAAyB2B,GAClE4jC,IAAgB,SAAC2E,GACb,IAAMC,EAA6C,GAGnD,OAFAzzC,OAAOgY,OAAOy7B,EAAiBD,GAC/BC,EAAgBnqC,GAAmB2B,EAC5BwoC,OAEZ,IACGC,GAA2BpkC,uBAC7B,SAAChG,GAAD,OACIulC,IAAgB,SAAC2E,GACb,IAAMC,EAA6C,GAGnD,OAFAzzC,OAAOgY,OAAOy7B,EAAiBD,UACxBC,EAAgBnqC,GAChBmqC,OAEf,IAEEE,GAAmBrkC,uBAAY,SAACG,GAClC6F,GAAQ7F,KACT,IACGmkC,GAAwBtkC,uBAAY,SAAC/U,GAAD,OAAsCu0C,GAAav0C,EAAEG,OAAOm5C,WAAU,IAC1GC,GAAwBxkC,uBAAY,SAAC/U,GACvC,GAAuB,SAAnBA,EAAEG,OAAOuQ,OAAuC,UAAnB1Q,EAAEG,OAAOuQ,MACtC,MAAM,IAAItQ,MAAJ,6BAAgCJ,EAAEG,OAAOuQ,QAGnDqlC,GAAa/1C,EAAEG,OAAOuQ,SACvB,IACG8oC,GAA8BzkC,uBAChC,SAAC/U,GAAD,OAAsCi2C,GAAyBj2C,EAAEG,OAAOm5C,WACxE,IAEEG,GAAkC1kC,uBAAY,SAAC/U,GACjDk2C,GAAuB75C,OAAO2D,EAAEG,OAAOuQ,UACxC,IACGgpC,GAAmB3kC,uBAAY,SAAChb,EAAc4/C,GAChDxD,IAAc,SAAC58C,GACX,IAAMqgD,EAAa,eAAQrgD,GAE3B,OADAqgD,EAAcD,GAAe,CAAE5/C,QACxB6/C,OAEZ,IACGC,GAAqC9kC,uBACvC,SAAC/U,GAAD,OAAsCq2C,GAA0Br2C,EAAEG,OAAOm5C,WACzE,IAEEQ,GAAgC/kC,uBAClC,SAAC/U,GAAD,OAAsCw2C,GAA2Bx2C,EAAEG,OAAOm5C,WAC1E,IAEES,GAAkChlC,uBACpC,SAAC/U,GAAD,OAAsCu2C,GAA6Bl6C,OAAO2D,EAAEG,OAAOuQ,UACnF,IAEEspC,GAA4BjlC,uBAC9B,SAAC/U,GAAD,OAA4D02C,GAAuB12C,EAAEG,OAAOuQ,MAAMxM,UAClG,IAEE+1C,GAA2CllC,uBAC7C,SAAC/U,GAAD,OACI42C,GAAsC52C,EAAEG,OAAOuQ,SACnD,IAGEwpC,GAAwB3X,mBAC1B,kBACIpX,GAAc,CACVC,cAAeA,GACfC,aAAcA,GACdC,yBAA0BA,GAC1BC,qBAAsBA,GACtBC,0BAA2BA,GAC3BC,wBAAyBA,GACzBC,mBAAoBA,OAE5B,CACIN,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,KAIRzX,qBAAU,WACN,IAAIkmC,GAAW,EAEThmC,EAAUhN,WAAU,sBAAC,sBAAAvH,EAAA,mEAEfu6C,EAFe,iEAMbzgC,EAAK0gC,kBAAkB3sC,GANV,mBAOnBkmC,EAPmB,SAOAj6B,EAAKg6B,UAAUjmC,GAPf,8CAQnBqmC,EARmB,UAQCp6B,EAAKm6B,WAAWpmC,GARjB,mCASnB6lC,OAAuBt3C,GATJ,sDAWfm+C,EAXe,mDAenBj9B,QAAQ5b,MAAR,MACAqyC,OAAa33C,GACb83C,OAAc93C,GAEV,gBAAaoE,MACbkzC,EAAuB,KAAE/xC,SACL,kBAAN,EAAP,GACP+xC,EAAuB,EAAD,IAEtBA,EAAuBjxC,OAAO,EAAD,KAxBd,0DA2BxB,KAEH,OAAO,WACH83C,GAAW,EACXvzC,aAAauN,MAElB,CAACuF,EAAMjM,EAAgB8lC,IAE1Bt/B,qBAAU,WACN,GAAK5E,IAAYgkC,EAAjB,CAIA,IAAI8G,GAAW,EA8Bf,OAnCY,mCAiCZE,GAEO,WACHF,GAAW,GApCH,4CAOZ,sBAAAv6C,EAAA,mEAEYu6C,EAFZ,6DAMQ1F,GANR,MAMuB,IANvB,kBAMqC/6B,EAAK4gC,gBAAgBjrC,EAAU5B,GANpE,uFAOQ6lC,OAAuBt3C,GAP/B,sDASYm+C,EATZ,mDAaQj9B,QAAQ5b,MAAR,MACAmzC,QAAcz4C,GAEV,gBAAaoE,MACbkzC,EAAuB,KAAE/xC,SACL,kBAAN,EAAP,GACP+xC,EAAuB,EAAD,IAEtBA,EAAuBjxC,OAAO,EAAD,KArBzC,2DAPY,yBAsCb,CAACqX,EAAMrK,EAAU5B,EAAgB4lC,EAAqBE,IAEzD,IAAMgH,GAAcxlC,uBAAY,WAC5BX,EAAQ,CACJ3G,eAAgBA,EAChB2B,KAAMA,EACNC,SAAUA,EACVV,cAAeA,EACfC,gBAAiBA,EACjBiB,WAAYA,GACZK,WAAYA,GACZpC,UAAWA,GACXe,YAAaA,GACbC,SAAUA,GACVP,KAAMA,GAAK7P,QAAO,SAACkH,GAAD,MAAa,KAANA,KACzBylB,aAAchvB,OAAOgvB,IACrBD,cAAeA,GACfE,yBAA0BjvB,OAAOivB,IACjCC,qBAAsBA,GACtBE,wBAAyBA,GACzBD,0BAA2BnvB,OAAOmvB,IAClCE,mBAAoBA,GACpB6kB,gBAAiBA,GACjBoF,8BAA+BA,GAC/B3mC,iBAAkByK,GAClBkD,UAAWA,GACXm5B,UAAWA,GACXj5B,kBAAmBA,GACnBC,gBAAiBA,GACjBg4B,cAAeA,GACfE,eAAgBA,GAChB9P,gCAAiCA,GACjCC,+BAAgCA,GAChC6Q,sBAAuBA,GACvBpK,oBAAqBA,GACrBryC,WAAYA,GACZ68C,uBAAwBA,GACxBnH,wBAAyBA,GACzBqH,0BAA2BA,GAC3BG,oBAAqBA,GACrBE,mCAAoCA,OAEzC,CACCviC,EACA3G,EACA2B,EACAC,EACAV,EACAC,EACAiB,GACAK,GACApC,GACAe,GACAC,GACA2K,GACAlL,GACAoO,GACA0O,GACAD,GACAE,GACAC,GACAE,GACAD,GACAE,GACA6kB,GACAoF,GACAG,GACAj5B,GACAC,GACAg4B,GACAE,GACA9P,GACAC,GACA6Q,GACApK,GACAryC,GACA68C,GACAnH,GACAqH,GACAG,GACAE,KAGE6D,GAAoB/0C,OAAO1L,KAAK0f,IAActV,KAAI,SAAC4K,GACrD,OACI,eAAC+hC,GAAD,CAEIr5B,MAAK,UAAK1I,EAAL,UACL2B,MAAO+I,GAAa1K,GACpBgiC,WAAYyD,GACZj/B,SAAU,SAACvV,GAAD,OAAOud,GAAwBxO,EAAiB/O,EAAEG,OAAOuQ,QACnEugC,kBAAmB,SAACjxC,GAAD,OAAOud,GAAwBxO,EAAiB/O,EAAEG,OAAOuQ,QAC5EwgC,UAAW,kBAAMiI,GAAyBpqC,IAC1CiiC,WAAW,GAPNjiC,MAYjBkF,qBAAU,WACDk/B,GAILhsC,YAAW,kCAAMxC,SAAS81C,eAAetH,UAA9B,aAAM,EAAqC9jB,eAAe,CAAE6U,SAAU,aAAa,KAC/F,CAACiP,IAEJ,IAAMuH,GA3uBV,SAAsBlzB,GAClB,IAEI,OADA,IAAInW,OAAOmW,EAAMtjB,SACV,EACT,MAAOlE,GACL,OAAO,GAsuBQ26C,CAAalE,IAEhC,OACI,gBAAC,IAAMnmB,SAAP,WACI,eAAC2f,GAAD,CACI/7B,KAAMwgC,GACNxE,yBAA0BzqC,OAAO1L,KAAK0f,IACtCT,UAAWggC,GACX9/B,SAAU,kBAAMy7B,IAAyB,MAE7C,gBAACv+B,GAAA,EAAD,CAAQlC,KAAMA,EAAM1J,SAAS,KAAK4U,WAAS,EAAChL,QAASmmC,GAArD,UACI,eAAClK,GAAA,EAAD,uBACA,eAAC7wB,GAAA,EAAD,UACI,gBAACS,GAAA,EAAD,CAAMC,WAAS,EAACvc,UAAU,SAASoT,QAAS,EAA5C,UACI,gBAACkJ,GAAA,EAAD,CAAME,MAAI,EAAC/W,GAAG,gBAAd,UACI,eAACwxC,GAAA,EAAD,mBACA,gBAACC,GAAA,EAAD,CAAWvmC,UAAWN,EAAQR,KAA9B,UACI,eAAC8B,GAAA,EAAD,CACImC,MAAM,mBACN/G,MAAOjD,EACPnM,MAAOupC,QAAQwI,GACftzB,WAAYszB,EACZ3zB,MAAM,YACNnK,SAAUshC,GACVj3B,WAAY,CACRC,aACI,eAACjH,GAAA,EAAD,CAAgBlF,SAAS,MAAzB,SACI,eAACsL,GAAA,EAAD,CAAYC,QAAS63B,GAArB,SACI,eAAC,KAAD,WAMpB,gBAACgE,GAAA,EAAD,0BACiB7hD,OAAO8hD,SAAS5U,SAAW,KAAOltC,OAAO8hD,SAASC,SADnE,uEAE8D,IAC1D,eAAC3pB,GAAA,EAAD,CACI3R,MAAM,YACNvf,OAAO,SACP+qB,IAAI,aACJjmB,KAAK,oCAJT,mBAHJ,OAaA,eAAC6rC,GAAD,CACIr5B,MAAM,OACN/G,MAAOtB,EACP2hC,WAAY2C,EACZn+B,SAAUwhC,GACV9F,kBAAmB+F,KAEvB,eAAClG,GAAD,CACIr5B,MAAM,YACN/G,MAAOrB,EACP0hC,WAAY8C,EACZt+B,SAAU0hC,GACVhG,kBAAmBiG,KAEvB,eAACpG,GAAD,CACIr5B,MAAM,iBACN/G,MAAO/B,EACPoiC,WAAYyD,GACZj/B,SAAU4hC,GACVlG,kBAAmBmG,KAEvB,eAACtG,GAAD,CACIr5B,MAAM,mBACN/G,MAAO9B,EACPmiC,WAAYyD,GACZj/B,SAAU8hC,GACVpG,kBAAmBqG,KAEvB,eAACxG,GAAD,CACIr5B,MAAM,aACN/G,MAAO5C,GACPijC,WAAYyD,GACZj/B,SAAUoiC,GACV1G,kBAAmB2G,KAEvB,eAAC9G,GAAD,CACIr5B,MAAM,cACN/G,MAAOb,GACPkhC,WAAYyD,GACZj/B,SAAUgiC,GACVtG,kBAAmBuG,KAEvB,eAAC1G,GAAD,CACIr5B,MAAM,cACN/G,MAAOR,GACP6gC,WAAYyD,GACZj/B,SAAUkiC,GACVxG,kBAAmByG,KAEvB,eAAC5G,GAAD,CACIr5B,MAAM,eACN/G,MAAO7B,GACPkiC,WAAYyD,GACZj/B,SAAUsiC,GACV5G,kBAAmB6G,KAEvB,eAAChH,GAAD,CACIr5B,MAAM,YACN/G,MAAO5B,GACPiiC,WAAYyD,GACZj/B,SAAUwiC,GACV9G,kBAAmB+G,KAEtBwC,GACD,eAAC75B,GAAA,EAAD,CACIrM,UAAWN,EAAQ08B,eACnBzxB,QAAS,SAACjf,GAAD,OAAO20C,IAAyB,IAF7C,8BAMA,eAAChgC,GAAD,CACI8C,MAAM,OACNsI,WAAW,kCACXX,WAAS,EACTM,MAAM,YACNnR,KAAMA,GACNqG,aAAcwkC,WAI1B,gBAACn5B,GAAA,EAAD,CAAME,MAAI,EAAC/W,GAAG,kBAAd,UACI,eAACwxC,GAAA,EAAD,qBACA,gBAACC,GAAA,EAAD,CAAWvmC,UAAWN,EAAQR,KAA9B,UACI,eAACynC,GAAA,EAAD,CACIC,QAAS,eAACC,GAAA,EAAD,CAAQ7B,QAAS38B,GAAWpH,SAAU8jC,KAC/C5hC,MAAM,kCACN2jC,eAAe,QACf9mC,UAAWN,EAAQ28B,cAEvB,eAACsK,GAAA,EAAD,CACIC,QACI,eAACC,GAAA,EAAD,CACI7B,QAAStD,GACTzgC,SAAUikC,KAGlB/hC,MAAM,oCACN2jC,eAAe,QACf9mC,UAAWN,EAAQ28B,cAEvB,eAACr7B,GAAA,EAAD,CACInU,KAAK,SACLsW,MAAM,sBACN2H,WAAS,EACT1O,MAAOmM,GACP6C,MAAM,YACNnK,SAAU0iC,GACVoD,WAAY,CACRh4C,IAAK,EACLkd,KAAM,GAEVX,WAAY,CACRC,aAAc,eAACjH,GAAA,EAAD,CAAgBlF,SAAS,MAAzB,mBAGtB,eAAC4B,GAAA,EAAD,CACInU,KAAK,SACLsW,MAAM,oBACN2H,WAAS,EACT1O,MAAOoM,GACP4C,MAAM,YACNnK,SAAU2iC,GACVmD,WAAY,CACRh4C,IAAK,EACLkd,KAAM,GAEVX,WAAY,CACRC,aAAc,eAACjH,GAAA,EAAD,CAAgBlF,SAAS,MAAzB,mBAGtB,eAAC4B,GAAA,EAAD,CACInU,KAAK,SACLsW,MAAM,kBACN2H,WAAS,EACT1O,MAAOokC,GACPp1B,MAAM,YACNnK,SAAU4iC,GACVkD,WAAY,CACRh4C,IAAK,EACLkd,KAAM,KAGd,eAACjL,GAAA,EAAD,CACInU,KAAK,SACLsW,MAAM,mBACN2H,WAAS,EACT1O,MAAOskC,GACPt1B,MAAM,YACNnK,SAAU6iC,GACViD,WAAY,CACRh4C,IAAK,EACLkd,KAAM,KAGd,eAACjL,GAAA,EAAD,CACInU,KAAK,SACLsW,MAAM,qCACN2H,WAAS,EACT1O,MAAOw0B,GACPxlB,MAAM,YACNnK,SAAU8iC,GACVgD,WAAY,CACRh4C,IAAK,EACLkd,KAAM,KAGd,eAACjL,GAAA,EAAD,CACInU,KAAK,SACLsW,MAAM,oCACN2H,WAAS,EACT1O,MAAOy0B,GACPzlB,MAAM,YACNnK,SAAU+iC,GACV+C,WAAY,CACRh4C,IAAK,EACLkd,KAAM,GAEVX,WAAY,CACRC,aAAc,eAACjH,GAAA,EAAD,CAAgBlF,SAAS,MAAzB,yBAK9B,gBAACuM,GAAA,EAAD,CAAME,MAAI,EAAC/W,GAAG,gBAAd,UACI,eAACwxC,GAAA,EAAD,mBACA,gBAACC,GAAA,EAAD,CAAWvmC,UAAWN,EAAQR,KAA9B,UACI,eAACynC,GAAA,EAAD,CACIC,QACI,eAACC,GAAA,EAAD,CACI7B,QAASlD,GACT7gC,SAAUskC,KAGlBpiC,MAAM,2BACN2jC,eAAe,QACf9mC,UAAWN,EAAQ28B,cAEvB,eAACsK,GAAA,EAAD,CACIC,QACI,eAACC,GAAA,EAAD,CACI7B,QAASrK,GACT15B,SAAUukC,KAGlBriC,MAAM,0CACN2jC,eAAe,QACf9mC,UAAWN,EAAQ28B,cAEvB,eAACr7B,GAAA,EAAD,CACInU,KAAK,SACLsW,MAAM,+BACN2H,WAAS,EACT1O,MAAO4lC,GACP52B,MAAM,YACNnK,SAAUwkC,GACVsB,WAAY,CACRh4C,IAAK,EACLkd,KAAM,KAGd,eAACjL,GAAA,EAAD,CACImC,MAAM,wBACN2H,WAAS,EACT1O,MAAO+lC,GACP/2B,MAAM,YACNpe,OAAQo5C,GACR36B,WAAY26B,QAAa1+C,EAAY,6BACrCuZ,SAAUykC,KAEd,eAAC1kC,GAAA,EAAD,CACImC,MAAM,yCACN2H,WAAS,EACT1O,MAAOimC,GACPj3B,MAAM,YACNnK,SAAU0kC,WAItB,gBAACh6B,GAAA,EAAD,CAAME,MAAI,EAAC/W,GAAG,sBAAd,UACI,gBAAC6W,GAAA,EAAD,CAAMC,WAAS,EAACvc,UAAU,MAAMoT,QAAS,EAAzC,UACI,eAACkJ,GAAA,EAAD,CAAME,MAAI,EAAV,SACI,eAACy6B,GAAA,EAAD,sCAEJ,eAAC36B,GAAA,EAAD,CAAME,MAAI,EAAV,SACI,eAACrI,GAAA,EAAD,CACIvB,MAAM,gGAENyB,UAAU,MAHd,SAKI,eAAC,KAAD,CAAU4T,SAAS,iBAI/B,gBAAC0vB,GAAA,EAAD,CAAYC,KAAG,EAAf,UACI,eAACN,GAAA,EAAD,CACIC,QACI,eAACM,GAAA,EAAD,CACIlC,QAAS1N,KAAwBx+B,EAAoBy+B,QACrDn7B,MAAOtD,EAAoBy+B,QAC3Bt2B,SAAUkkC,KAGlBhiC,MAAM,sBAEV,eAACwjC,GAAA,EAAD,CACIC,QACI,eAACM,GAAA,EAAD,CACIlC,QAAS1N,KAAwBx+B,EAAoB2+B,MACrDr7B,MAAOtD,EAAoB2+B,MAC3Bx2B,SAAUkkC,KAGlBhiC,MAAM,0BAIlB,gBAACwI,GAAA,EAAD,CAAME,MAAI,EAAC/W,GAAG,4BAAd,UACI,eAACwxC,GAAA,EAAD,wCACA,gBAACC,GAAA,EAAD,CAAWvmC,UAAWN,EAAQR,KAA9B,UACI,sBAAKc,UAAWN,EAAQs8B,gBAAxB,SACI,eAACh7B,GAAA,EAAD,CACInU,KAAK,QACLsW,MAAM,iBACN2H,WAAS,EACT1O,MAAO0a,GACP1L,MAAM,YACNnK,SAAUgjC,OAGlB,sBAAKjkC,UAAWN,EAAQs8B,gBAAxB,SACI,eAACh7B,GAAA,EAAD,CACInU,KAAK,SACLsW,MAAM,gBACN2H,WAAS,EACT1O,MAAO2a,GACP3L,MAAM,YACNnK,SAAUijC,GACV6C,WAAY,CACRh4C,IAAK,EACLkd,KAAM,OAIlB,sBAAKjM,UAAWN,EAAQs8B,gBAAxB,SACI,eAACh7B,GAAA,EAAD,CACInU,KAAK,QACLsW,MAAM,yBACN2H,WAAS,EACT1O,MAAO6a,GACP7L,MAAM,YACNnK,SAAUkjC,OAGlB,sBAAKnkC,UAAWN,EAAQs8B,gBAAxB,SACI,eAACh7B,GAAA,EAAD,CACInU,KAAK,SACLsW,MAAM,6BACN2H,WAAS,EACT1O,MAAO4a,GACP/V,SAAUmjC,GACV2C,WAAY,CACRh4C,IAAK,EACLkd,KAAM,GAEVb,MAAM,gBAGd,sBAAKpL,UAAWN,EAAQs8B,gBAAxB,SACI,eAACh7B,GAAA,EAAD,CACInU,KAAK,QACLsW,MAAM,4BACN2H,WAAS,EACT1O,MAAO+a,GACP/L,MAAM,YACNnK,SAAUojC,OAGlB,sBAAKrkC,UAAWN,EAAQs8B,gBAAxB,SACI,eAACh7B,GAAA,EAAD,CACInU,KAAK,SACLsW,MAAM,8BACN2H,WAAS,EACTi8B,WAAY,CACRh4C,IAAK,EACL/F,IAAK,EACLijB,KAAM,IAEV7P,MAAO8a,GACP9L,MAAM,YACNnK,SAAUqjC,OAGlB,sBAAKtkC,UAAWN,EAAQs8B,gBAAxB,SACI,eAACh7B,GAAA,EAAD,CACInU,KAAK,OACLsW,MAAM,uBACN2nB,YAAY,YACZhgB,WAAS,EACT1O,MAAOgb,GACPhM,MAAM,YACNnK,SAAUsjC,OAGlB,sBAAKvkC,UAAWN,EAAQs8B,gBAAxB,SACI,eAACh7B,GAAA,EAAD,CACInU,KAAK,SACLsW,MAAM,oCACN2nB,YAAY,YACZhgB,WAAS,EACTi8B,WAAY,CACRh4C,IAAK,EACL/F,IAAK,EACLijB,KAAM,IAEV7P,MAAOilC,GACPj2B,MAAM,YACNnK,SAAUwjC,OAGlB,sBAAKzkC,UAAWN,EAAQu8B,gBAAxB,SACI,wBACI7/B,MAAO6/B,GACPj8B,UAAWN,EAAQw8B,qBACnBj7B,SAAUujC,GACV/zC,MAAOm1C,aAKvB,gBAACj6B,GAAA,EAAD,CAAME,MAAI,EAAC/W,GAAG,iBAAd,UACI,eAACwxC,GAAA,EAAD,oBACA,iCACI,eAACK,GAAA,EAAD,CACIC,QACI,eAACM,GAAA,EAAD,CACIlC,QAAuB,UAAdxD,GACTplC,MAAM,QACN6E,SAAUgkC,KAGlB9hC,MAAM,UAEV,eAACwjC,GAAA,EAAD,CACIC,QACI,eAACM,GAAA,EAAD,CACIlC,QAAuB,SAAdxD,GACTplC,MAAM,OACN6E,SAAUgkC,KAGlB9hC,MAAM,eAIlB,gBAACwI,GAAA,EAAD,CAAME,MAAI,EAAC/W,GAAG,qBAAd,UACI,eAACwxC,GAAA,EAAD,iCACA,eAACC,GAAA,EAAD,UACKp1C,OAAO1L,KAAKw3C,IAAmBptC,KAAI,SAAC4rB,GAAS,IAAD,EACnC4pB,EAAc5pB,EACd0rB,EAAalK,GAAkBoI,GACrC,OACI,eAAC7H,GAAD,CAEIr6B,MAAOgkC,EAAWhkC,MAClB1d,KACIkM,EAAUumC,WAAaiP,EAAWjK,oBAAlC,UACMvrC,EAAUy1C,kBAAkB/B,UADlC,QACkD,GAC5CpgD,GAAWogD,GAAa5/C,KAElCy3C,oBAAqBvrC,EAAUumC,WAAaiP,EAAWjK,oBACvDO,aAAc,SAACh4C,GAAD,OAAU2/C,GAAiB3/C,EAAM4/C,IAC/C3H,yBAA0B,kBAAM/rC,EAAU01C,kBATrC5rB,gBAiBjC,eAACrP,GAAA,EAAD,UACI,eAACC,GAAA,EAAD,CAAQ1B,QAASs7B,GAAjB,wB,IC7yCCqB,G,iDACAC,OAA2C,G,uCAE5D,SAAI9rB,GACA,IAAI+rB,EAAStiD,KAAKqiD,OAAO9rB,GAEzB,QAAe/zB,IAAX8/C,EAAsB,CACtB,IAAMC,EAAcC,aAAaC,QAAQlsB,GAEzC,OADAv2B,KAAKqiD,OAAO9rB,GAAOgsB,EACZA,EAGX,OAAOD,I,iBAGX,SAAI/rB,EAAarf,GACbsrC,aAAaE,QAAQnsB,EAAKrf,GAC1BlX,KAAKqiD,OAAO9rB,GAAOrf,I,oBAGvB,SAAOqf,UACIv2B,KAAKqiD,OAAO9rB,GACnBisB,aAAaG,WAAWpsB,O,KCG1BqsB,GAA6BhvC,EAAoB2+B,MACjDsQ,GAAgC,CAClCn9C,WAAY,CAAEnF,KAAM,SACpBqF,gBAAiB,CAAErF,KAAM23C,WAAU,WAAQ,WAC3CryC,wBAAyB,CAAEtF,KAAM23C,WAAU,WAAQ,WACnDrzC,gBAAiB,CAAEtE,KAAM,KACzByE,0BAA2B,CAAEzE,KAAM,KACnC0E,0BAA2B,CAAE1E,KAAM,KACnCgF,8BAA+B,CAAEhF,KAAM,OACvCiF,8BAA+B,CAAEjF,KAAM,OACvC6C,aAAc,CAAE7C,KAAM,KACtB8C,YAAa,CAAE9C,KAAM,KACrByB,uBAAwB,CAAEzB,KAAM,QAChC2B,mBAAoB,CAAE3B,KAAM,SAC5B+B,iCAAkC,CAAE/B,KAAM,QAC1CmD,+BAAgC,CAAEnD,KAAM23C,WAAU,cAAW,aAC7Dv0C,2BAA4B,CAAEpD,KAAM23C,WAAU,eAAY,cAC1Dh0C,eAAgB,CAAE3D,KAAM23C,WAAU,sBAAc,oBAChD9zC,eAAgB,CAAE7D,KAAM23C,WAAU,qBAAa,mBAC/C1zC,YAAa,CAAEjE,KAAM23C,WAAU,qBAAa,mBAC5C53C,aAAc,CAAEC,KAAM23C,WAAU,kBAAU,gBAC1Cl3C,WAAY,CAAET,KAAM23C,WAAU,kBAAU,gBACxC/2C,eAAgB,CAAEZ,KAAM23C,WAAU,kBAAU,gBAC5CvzC,qBAAsB,CAAEpE,KAAM23C,WAAU,kBAAU,gBAClDxzC,qBAAsB,CAAEnE,KAAM23C,WAAU,kBAAU,iBAKhD4K,GAAoB,iBACpBC,GAAU,OACVC,GAAc,WACdC,GAAmB,gBACnBC,GAAqB,kBACrBC,GAAgB,aAChBC,GAAgB,aAChBC,GAAe,YACfC,GAAiB,cACjBC,GAAc,WACdC,GAAsB,mBACtBC,GAAU,OACVC,GAAkB,eAClBC,GAAmB,gBACnBC,GAA8B,2BAC9BC,GAA0B,uBAC1BC,GAA6B,0BAC7BC,GAA+B,4BAC/BC,GAAwB,qBACxBC,GAAqB,kBACrBC,GAAmC,gCACnCC,GAAuB,oBACvBC,GAAqB,kBACrBC,GAAmB,gBACnBC,GAAoB,iBACpBC,GAAqC,kCACrCC,GAAoC,iCACpCC,GAAe,YACfC,GAAe,YACfC,GAA2B,wBAC3BC,GAAyB,sBACzBC,GAAgB,aAChBC,GAA4B,yBAC5BC,GAA6B,0BAC7BC,GAAyB,sBACzBC,GAAwC,qCACxCC,GAA+B,4BAEhBC,G,WAKjB,aAAe,yBAJPC,WAIM,OAHNC,iBAGM,OAFNC,SAAW,IAAIlD,GAInBpiD,KAAKolD,MAAQplD,KAAK+U,KAClB/U,KAAKqlD,YAAcrlD,KAAKD,W,0CAG5B,WACI,MAAO,CACHkU,eAAgBjU,KAAKiU,eACrB2B,KAAM5V,KAAK4V,KACXC,SAAU7V,KAAK6V,SACfV,cAAenV,KAAKmV,cACpBC,gBAAiBpV,KAAKoV,gBACtBiB,WAAYrW,KAAKqW,WACjBK,WAAY1W,KAAK0W,WACjBpC,UAAWtU,KAAKsU,UAChBgB,SAAUtV,KAAKsV,SACfE,iBAAkBxV,KAAKwV,iBACvBT,KAAM/U,KAAK+U,KACXM,YAAarV,KAAKqV,YAClBwc,aAAc7xB,KAAK6xB,aACnBD,cAAe5xB,KAAK4xB,cACpBE,yBAA0B9xB,KAAK8xB,yBAC/BC,qBAAsB/xB,KAAK+xB,qBAC3BE,wBAAyBjyB,KAAKiyB,wBAC9BD,0BAA2BhyB,KAAKgyB,0BAChCE,mBAAoBlyB,KAAKkyB,mBACzB6kB,gBAAiB/2C,KAAK+2C,gBACtBoF,8BAA+Bn8C,KAAKm8C,8BACpCh5B,UAAWnjB,KAAKmjB,UAChBm5B,UAAWt8C,KAAKs8C,UAChBj5B,kBAAmBrjB,KAAKqjB,kBACxBC,gBAAiBtjB,KAAKsjB,gBACtBg4B,cAAet7C,KAAKs7C,cACpBE,eAAgBx7C,KAAKw7C,eACrB9P,gCAAiC1rC,KAAK0rC,gCACtCC,+BAAgC3rC,KAAK2rC,+BACrC6Q,sBAAuBx8C,KAAKw8C,sBAC5BpK,oBAAqBpyC,KAAKoyC,oBAC1BryC,WAAYC,KAAKD,WACjB68C,uBAAwB58C,KAAK48C,uBAC7BnH,wBAAyBz1C,KAAKy1C,wBAC9BwH,oBAAqBj9C,KAAKi9C,oBAC1BE,mCAAoCn9C,KAAKm9C,mCACzCL,0BAA2B98C,KAAK88C,4B,IAIxC,SAAayI,GACTvlD,KAAKiU,eAAiBsxC,EAAYtxC,eAClCjU,KAAK4V,KAAO2vC,EAAY3vC,KACxB5V,KAAK6V,SAAW0vC,EAAY1vC,SAC5B7V,KAAKmV,cAAgBowC,EAAYpwC,cACjCnV,KAAKoV,gBAAkBmwC,EAAYnwC,gBACnCpV,KAAKqW,WAAakvC,EAAYlvC,WAC9BrW,KAAK0W,WAAa6uC,EAAY7uC,WAC9B1W,KAAKsU,UAAYixC,EAAYjxC,UAC7BtU,KAAKqV,YAAckwC,EAAYlwC,YAC/BrV,KAAKsV,SAAWiwC,EAAYjwC,SAC5BtV,KAAK+U,KAAOwwC,EAAYxwC,KACxB/U,KAAK6xB,aAAe0zB,EAAY1zB,aAChC7xB,KAAK4xB,cAAgB2zB,EAAY3zB,cACjC5xB,KAAK8xB,yBAA2ByzB,EAAYzzB,yBAC5C9xB,KAAK+xB,qBAAuBwzB,EAAYxzB,qBACxC/xB,KAAKiyB,wBAA0BszB,EAAYtzB,wBAC3CjyB,KAAKgyB,0BAA4BuzB,EAAYvzB,0BAC7ChyB,KAAKkyB,mBAAqBqzB,EAAYrzB,mBACtClyB,KAAK+2C,gBAAkBwO,EAAYxO,gBACnC/2C,KAAKm8C,8BAAgCoJ,EAAYpJ,8BACjDn8C,KAAKwV,iBAAmB+vC,EAAY/vC,iBACpCxV,KAAKmjB,UAAYoiC,EAAYpiC,UAC7BnjB,KAAKs8C,UAAYiJ,EAAYjJ,UAC7Bt8C,KAAKqjB,kBAAoBkiC,EAAYliC,kBACrCrjB,KAAKsjB,gBAAkBiiC,EAAYjiC,gBACnCtjB,KAAKs7C,cAAgBiK,EAAYjK,cACjCt7C,KAAKw7C,eAAiB+J,EAAY/J,eAClCx7C,KAAK0rC,gCAAkC6Z,EAAY7Z,gCACnD1rC,KAAK2rC,+BAAiC4Z,EAAY5Z,+BAClD3rC,KAAKw8C,sBAAwB+I,EAAY/I,sBACzCx8C,KAAKoyC,oBAAsBmT,EAAYnT,oBACvCpyC,KAAKD,WAAawlD,EAAYxlD,WAC9BC,KAAK48C,uBAAyB2I,EAAY3I,uBAC1C58C,KAAKy1C,wBAA0B8P,EAAY9P,wBAC3Cz1C,KAAK88C,0BAA4ByI,EAAYzI,0BAC7C98C,KAAKi9C,oBAAsBsI,EAAYtI,oBACvCj9C,KAAKm9C,mCAAqCoI,EAAYpI,qC,4BAG1D,WACI,MAAO,CACHtrB,aAAc7xB,KAAK6xB,aACnBD,cAAe5xB,KAAK4xB,cACpBE,yBAA0B9xB,KAAK8xB,yBAC/BC,qBAAsB/xB,KAAK+xB,qBAC3BE,wBAAyBjyB,KAAKiyB,wBAC9BD,0BAA2BhyB,KAAKgyB,0BAChCE,mBAAoBlyB,KAAKkyB,mBACzBiqB,8BAA+Bn8C,KAAKm8C,iC,wBAI5C,WACI,MAAO,CACHloC,eAAgBjU,KAAKiU,eACrB2B,KAAM5V,KAAK4V,KACXC,SAAU7V,KAAK6V,SACfV,cAAenV,KAAKmV,cACpBC,gBAAiBpV,KAAKoV,gBACtBiB,WAAYrW,KAAKqW,WACjBK,WAAY1W,KAAK0W,WACjBpC,UAAWtU,KAAKsU,UAChBe,YAAarV,KAAKqV,YAClBC,SAAUtV,KAAKsV,SACfE,iBAAkBxV,KAAKwV,iBACvBT,KAAM/U,KAAK+U,KACXoO,UAAWnjB,KAAKmjB,UAChBE,kBAAmBrjB,KAAKqjB,kBACxBC,gBAAiBtjB,KAAKsjB,gBACtBg4B,cAAet7C,KAAKs7C,cACpBE,eAAgBx7C,KAAKw7C,eACrB9P,gCAAiC1rC,KAAK0rC,gCACtCC,+BAAgC3rC,KAAK2rC,kC,wBAI7C,WACI,MAAO,CACH2Q,UAAWt8C,KAAKs8C,UAChBE,sBAAuBx8C,KAAKw8C,sBAC5BpK,oBAAqBpyC,KAAKoyC,oBAC1BryC,WAAYC,KAAKD,WACjB68C,uBAAwB58C,KAAK48C,uBAC7BnH,wBAAyBz1C,KAAKy1C,wBAC9BwH,oBAAqBj9C,KAAKi9C,oBAC1BE,mCAAoCn9C,KAAKm9C,mCACzCL,0BAA2B98C,KAAK88C,6B,4BAIxC,SAAevmB,EAAaiP,GACxB,IAAMtuB,EAAQlX,KAAKslD,SAASE,IAAIjvB,GAEhC,OAAc,OAAVrf,EACOsuB,EAGJ3iC,OAAOqU,K,8BAGlB,SAAiBqf,EAAarf,GACL,qBAAVA,EACPlX,KAAKslD,SAASG,OAAOlvB,GAErBv2B,KAAKslD,SAASI,IAAInvB,EAAKrf,K,0BAI/B,WACI,OAAOlX,KAAKslD,SAASE,IAAI1C,KArPH,yB,IAwP1B,SAAmB93C,GACfhL,KAAKslD,SAASI,IAAI5C,GAAmB93C,K,gBAGzC,WAAY,IAAD,EACP,iBAAOhL,KAAKslD,SAASE,IAAIzC,WAAzB,aAAqCvgD,G,IAGzC,SAASoT,GACL5V,KAAK2lD,iBAAiB5C,GAASntC,K,oBAGnC,WAAgB,IAAD,EACX,iBAAO5V,KAAKslD,SAASE,IAAIxC,WAAzB,aAAyCxgD,G,IAG7C,SAAaqT,GACT7V,KAAK2lD,iBAAiB3C,GAAantC,K,yBAGvC,WAAqB,IAAD,EAChB,iBAAO7V,KAAKslD,SAASE,IAAIvC,WAAzB,aAA8CzgD,G,IAGlD,SAAkB2S,GACdnV,KAAK2lD,iBAAiB1C,GAAkB9tC,K,2BAG5C,WAAuB,IAAD,EAClB,iBAAOnV,KAAKslD,SAASE,IAAItC,WAAzB,aAAgD1gD,G,IAGpD,SAAoB4S,GAChBpV,KAAK2lD,iBAAiBzC,GAAoB9tC,K,sBAG9C,WAAkB,IAAD,EACb,iBAAOpV,KAAKslD,SAASE,IAAIrC,WAAzB,aAA2C3gD,G,IAG/C,SAAe6T,GACXrW,KAAK2lD,iBAAiBxC,GAAe9sC,K,sBAGzC,WAAkB,IAAD,EACb,iBAAOrW,KAAKslD,SAASE,IAAIpC,WAAzB,aAA2C5gD,G,IAG/C,SAAekU,GACX1W,KAAK2lD,iBAAiBvC,GAAe1sC,K,qBAGzC,WAAiB,IAAD,EACZ,iBAAO1W,KAAKslD,SAASE,IAAInC,WAAzB,aAA0C7gD,G,IAG9C,SAAc8R,GACVtU,KAAK2lD,iBAAiBtC,GAAc/uC,K,uBAGxC,WAAmB,IAAD,EACd,iBAAOtU,KAAKslD,SAASE,IAAIlC,WAAzB,aAA4C9gD,G,IAGhD,SAAgB6S,GACZrV,KAAK2lD,iBAAiBrC,GAAgBjuC,K,oBAG1C,WAAgB,IAAD,EACX,iBAAOrV,KAAKslD,SAASE,IAAIjC,WAAzB,aAAyC/gD,G,IAG7C,SAAa8S,GACTtV,KAAK2lD,iBAAiBpC,GAAajuC,K,4BAGvC,WACI,IAAMswC,EAAmB5lD,KAAKslD,SAASE,IAAIhC,IAE3C,OAAIoC,EACOtyC,KAAKkX,MAAMo7B,GAGf,I,IAGX,SAAqBpwC,GACjBxV,KAAKslD,SAASI,IAAIlC,GAAqBlwC,KAAKC,UAAUiC,M,gBAG1D,WACI,GAA0B,qBAAfxV,KAAKolD,MACZ,OAAOplD,KAAKolD,MAGhB,IAAMS,EAAa7lD,KAAKslD,SAASE,IAAI/B,IAErC,OAAIoC,GACA7lD,KAAKolD,MAAQ9xC,KAAKkX,MAAMq7B,GACjB7lD,KAAKolD,OAGT,I,IAGX,SAASrwC,GACL/U,KAAKslD,SAASI,IAAIjC,GAASnwC,KAAKC,UAAUwB,IAC1C/U,KAAKolD,WAAQ5iD,I,yBAGjB,WACI,OAAOxC,KAAKslD,SAASE,IAAI7B,KArWJ,W,IAwWzB,SAAkB/xB,GACd5xB,KAAKslD,SAASI,IAAI/B,GAAkB/xB,K,wBAGxC,WACI,OAAO5xB,KAAK8lD,eAAepC,GA9WP,K,IAiXxB,SAAiB7xB,GACb7xB,KAAKslD,SAASI,IAAIhC,GAAiB76C,OAAOgpB,M,gCAG9C,WACI,OAAO7xB,KAAKslD,SAASE,IAAI3B,KAnXG,W,IAsXhC,SAAyB9xB,GACrB/xB,KAAKslD,SAASI,IAAI7B,GAAyB9xB,K,oCAG/C,WACI,OAAO/xB,KAAK8lD,eAAelC,GA5XK,I,IA+XpC,SAA6B9xB,GACzB9xB,KAAKslD,SAASI,IAAI9B,GAA6B/6C,OAAOipB,M,mCAG1D,WACI,OAAO9xB,KAAKslD,SAASE,IAAI1B,KAlYM,W,IAqYnC,SAA4B7xB,GACxBjyB,KAAKslD,SAASI,IAAI5B,GAA4B7xB,K,qCAGlD,WACI,OAAOjyB,KAAK8lD,eAAe/B,GAzYM,K,IA4YrC,SAA8B/xB,GAC1BhyB,KAAKslD,SAASI,IAAI3B,GAA8Bl7C,OAAOmpB,M,8BAG3D,WACI,OAAOhyB,KAAKslD,SAASE,IAAIxB,KAhZC,I,IAmZ9B,SAAuB9xB,GACnBlyB,KAAKslD,SAASI,IAAI1B,GAAuB9xB,K,2BAG7C,WACI,OAAOlyB,KAAKslD,SAASE,IAAIvB,KAvZF,sB,IA0Z3B,SAAoBlN,GAChB/2C,KAAKslD,SAASI,IAAIzB,GAAoBlN,K,yCAG1C,WACI,OAAO/2C,KAAK8lD,eAAe5B,GAAkC,I,IAGjE,SAAkC/H,GAC9Bn8C,KAAKslD,SAASI,IAAIxB,GAAkCr7C,OAAOszC,M,qBAG/D,WACI,IAAMjlC,EAAQlX,KAAKslD,SAASE,IAAIf,IAEhC,OAAc,OAAVvtC,GACc,SAAVA,G,IAUZ,SAAciM,GACVnjB,KAAKslD,SAASI,IAAIjB,GAAc57C,OAAOsa,M,qBAG3C,WACI,IAAMm5B,EAAYt8C,KAAKslD,SAASE,IAAId,IAEpC,OAAkB,OAAdpI,EACO,OAGJA,G,IAGX,SAAcA,GACVt8C,KAAKslD,SAASI,IAAIhB,GAAcpI,K,6BAGpC,WACI,IAAMplC,EAAQlX,KAAKslD,SAASE,IAAIrB,IAEhC,OAAKjtC,EAIErU,OAAOqU,GA5cW,G,IA+c7B,SAAsBmM,GAClBrjB,KAAKslD,SAASI,IAAIvB,GAAsBt7C,OAAOwa,M,2BAGnD,WACI,OAAOrjB,KAAK8lD,eAAe1B,GAndJ,M,IAsd3B,SAAoB9gC,GAChBtjB,KAAKslD,SAASI,IAAItB,GAAoBv7C,OAAOya,M,yBAGjD,WACI,IAAMpM,EAAQlX,KAAKslD,SAASE,IAAInB,IAEhC,OAAKntC,EAIErU,OAAOqU,GAheO,G,IAmezB,SAAkBokC,GACdt7C,KAAKslD,SAASI,IAAIrB,GAAkBx7C,OAAOyyC,M,0BAG/C,WACI,OAAOt7C,KAAK8lD,eAAexB,GAveL,I,IA0e1B,SAAmB9I,GACfx7C,KAAKslD,SAASI,IAAIpB,GAAmBz7C,OAAO2yC,M,2CAGhD,WACI,OAAOx7C,KAAK8lD,eAAevB,GA9eY,I,IAif3C,SAAoC7Y,GAChC1rC,KAAKslD,SAASI,IAAInB,GAAoC17C,OAAO6iC,M,0CAGjE,WACI,OAAO1rC,KAAK8lD,eAAetB,GArfW,M,IAwf1C,SAAmC7Y,GAC/B3rC,KAAKslD,SAASI,IAAIlB,GAAmC37C,OAAO8iC,M,iCAGhE,WACI,MAAuD,SAAhD3rC,KAAKslD,SAASE,IAAIb,MAAwC,G,IAGrE,SAA0BnI,GACtBx8C,KAAKslD,SAASI,IAAIf,GAA0B97C,OAAO2zC,M,+BAGvD,WACI,OAAOx8C,KAAK8lD,eAAelB,GAAwBhC,K,IAGvD,SAAwBxQ,GACpBpyC,KAAKslD,SAASI,IAAId,GAAwB/7C,OAAOupC,M,sBAGrD,WACI,QAAyB5vC,IAArBxC,KAAKqlD,YACL,OAAOrlD,KAAKqlD,YAGhB,IAAIU,EAAa/lD,KAAKslD,SAASE,IAAIX,IAEnC,GAAmB,OAAfkB,EAEA,OADA/lD,KAAKqlD,YAAcxC,GACZA,GAKX,IAFA,IAAM9iD,EAAauT,KAAKkX,MAAMu7B,GAE9B,MAAkB95C,OAAO1L,KAAKsiD,IAA9B,eAAkD,CAA7C,IACK1C,EADI,UAGsB39C,IAA5BzC,EAAWogD,KACXpgD,EAAWogD,GAAe0C,GAAkB1C,IAKpD,OADAngD,KAAKqlD,YAActlD,EACZA,G,IAGX,SAAeA,GACXC,KAAKslD,SAASI,IAAIb,GAAevxC,KAAKC,UAAUxT,IAChDC,KAAKqlD,iBAAc7iD,I,kCAGvB,WACI,MAAwD,SAAjDxC,KAAKslD,SAASE,IAAIV,MAAyC,G,IAGtE,SAA2BlI,GACvB58C,KAAKslD,SAASI,IAAIZ,GAA2Bj8C,OAAO+zC,M,mCAGxD,WACI,MAAyD,SAAlD58C,KAAKslD,SAASE,IAAIT,MAA0C,G,IAGvE,SAA4BtP,GACxBz1C,KAAKslD,SAASI,IAAIX,GAA4Bl8C,OAAO4sC,M,+BAGzD,WAA2B,IAAD,EACtB,iBAAOz1C,KAAKslD,SAASE,IAAIR,WAAzB,QAAoD,I,IAGxD,SAAwB/H,GACpBj9C,KAAKslD,SAASI,IAAIV,GAAwB/H,K,8CAG9C,WAA0C,IAAD,EACrC,iBAAOj9C,KAAKslD,SAASE,IAAIP,WAAzB,QAAmE,I,IAGvE,SAAuC9H,GACnCn9C,KAAKslD,SAASI,IAAIT,GAAuC9H,K,qCAG7D,WACI,OAAOn9C,KAAK8lD,eAAeZ,GAhjBM,K,IAmjBrC,SAA8BpI,GAC1B98C,KAAKslD,SAASI,IAAIR,GAA8Br8C,OAAOi0C,Q,KCtkB1CkJ,G,WAoBjB,WAAYhuB,GAAkB,yBAnBtBA,aAmBqB,OAlBrB6U,oBAkBqB,OAjBrBC,mBAiBqB,OAhBrBC,oBAgBqB,OAfrBE,0BAeqB,OAdrBD,iCAcqB,OAbrBiZ,oBAaqB,OAZrBC,wBAYqB,OAXrB/Y,qBAWqB,OAVrBC,2BAUqB,OATrBG,uBASqB,OARrBC,uCAQqB,OAPrBC,2BAOqB,OANrBC,+BAMqB,OALrByY,+BAKqB,OAJrBC,2BAIqB,OAHrBC,2BAGqB,OAFrBC,oBAEqB,EACzBtmD,KAAKg4B,QAAU,IAAIE,iBAAiBF,GACpCh4B,KAAK8sC,cAAgB,GACrB9sC,KAAK+sC,eAAiB,GACtB/sC,KAAKitC,qBAAuB,GAC5BjtC,KAAKgtC,4BAA8B,GACnChtC,KAAKimD,eAAiB,GACtBjmD,KAAK6sC,eAAiB,GACtB7sC,KAAKkmD,mBAAqB,GAC1BlmD,KAAKmtC,gBAAkB,GACvBntC,KAAKotC,sBAAwB,GAC7BptC,KAAKutC,kBAAoB,GACzBvtC,KAAKwtC,kCAAoC,GACzCxtC,KAAKytC,sBAAwB,GAC7BztC,KAAK0tC,0BAA4B,GACjC1tC,KAAKmmD,0BAA4B,GACjCnmD,KAAKomD,sBAAwB,GAC7BpmD,KAAKqmD,sBAAwB,GAC7BrmD,KAAKsmD,eAAiB,GAEtB,IAAMnuB,EAAOn4B,KAEbA,KAAKg4B,QAAQzwB,UAAY,SAAC1G,GACtB,OAAQA,EAAM4G,KAAKJ,SACf,IAAK,OAED,MACJ,IAAK,QACD,IADJ,EACUymC,EAAejtC,EAAM4G,KAD/B,cAGyB0wB,EAAK0U,gBAH9B,IAGI,2BAA0C,EACtC7G,EADsC,SAC7B8H,EAAajf,SAAUif,EAAae,gBAJrD,8BAMI,MACJ,IAAK,OAAL,oBACyB1W,EAAK2U,eAD9B,IACI,2BAAyC,EACrC9G,EADqC,YAD7C,8BAII,MACJ,IAAK,QAAL,oBACyB7N,EAAK4U,gBAD9B,IACI,2BAA0C,EACtC/G,EADsC,YAD9C,8BAII,MACJ,IAAK,cACD,IADJ,EACUsI,EAAqBztC,EAAM4G,KADrC,cAGyB0wB,EAAK8U,sBAH9B,IAGI,2BAAgD,EAC5CjH,EAD4C,SACnCsI,EAAmBp3B,QAJpC,8BAMI,MACJ,IAAK,qBACD,IADJ,EACUm3B,EAA4BxtC,EAAM4G,KAD5C,cAGyB0wB,EAAK6U,6BAH9B,IAGI,2BAAuD,EACnDhH,EADmD,SAC1CqI,EAA0Bz+B,KAJ3C,8BAMI,MACJ,IAAK,QAAL,oBACyBuoB,EAAK8tB,gBAD9B,IACI,2BAA0C,EACtCjgB,EADsC,YAD9C,8BAII,MACJ,IAAK,YACD,IADJ,EACUugB,EAAmB1lD,EAAM4G,KADnC,cAGyB0wB,EAAK+tB,oBAH9B,IAGI,2BAA8C,EAC1ClgB,EAD0C,SACjCugB,EAAiBrvC,QAJlC,8BAMI,MACJ,IAAK,SACD,IADJ,EACUq3B,EAAgB1tC,EAAM4G,KADhC,cAG2B0wB,EAAKgV,iBAHhC,IAGI,2BAA6C,EACzCnH,EADyC,SAChCuI,EAAcr3B,QAJ/B,8BAMI,MACJ,IAAK,eACD,IADJ,EACUs3B,EAAsB3tC,EAAM4G,KADtC,cAG2B0wB,EAAKiV,uBAHhC,IAGI,2BAAmD,EAC/CpH,EAD+C,SACtCwI,EAAoBt3B,QAJrC,8BAMI,MACJ,IAAK,mBACD,IADJ,EACUsvC,EAA0B3lD,EAAM4G,KAD1C,cAGyB0wB,EAAKguB,2BAH9B,IAGI,2BAAqD,EACjDngB,EADiD,SACxCwgB,EAAwBtvC,QAJzC,8BAMI,MACJ,IAAK,WACD,IADJ,EACUuvC,EAAkB5lD,EAAM4G,KADlC,cAGyB0wB,EAAKoV,mBAH9B,IAGI,2BAA6C,EACzCvH,EADyC,SAChCygB,EAAgB1nB,WAJjC,8BAMI,MACJ,IAAK,2BACD,IADJ,EACU2nB,EAAkC7lD,EAAM4G,KADlD,cAGyB0wB,EAAKqV,mCAH9B,IAGI,2BAA6D,EACzDxH,EADyD,SAChD0gB,EAAgCxvC,QAJjD,8BAMI,MACJ,IAAK,eACD,IADJ,EACUyvC,EAAsB9lD,EAAM4G,KADtC,cAGyB0wB,EAAKsV,uBAH9B,IAGI,2BAAiD,EAC7CzH,EAD6C,SACpC2gB,EAAoBzvC,QAJrC,8BAMI,MACJ,IAAK,mBACD,IADJ,EACU0vC,EAA0B/lD,EAAM4G,KAD1C,cAG2B0wB,EAAKuV,2BAHhC,IAGI,2BAAuD,EACnD1H,EADmD,SAC1C4gB,EAAwB1vC,QAJzC,8BAMI,MACJ,IAAK,eACD,IADJ,EACU2vC,EAAsBhmD,EAAM4G,KADtC,cAGyB0wB,EAAKkuB,uBAH9B,IAGI,2BAAiD,EAC7CrgB,EAD6C,SACpC6gB,EAAoB3vC,QAJrC,8BAMI,MACJ,IAAK,eACD,IADJ,EACU4vC,EAAsBjmD,EAAM4G,KADtC,cAGyB0wB,EAAKiuB,uBAH9B,IAGI,2BAAiD,EAC7CpgB,EAD6C,SACpC8gB,EAAoB5vC,QAJrC,8BAMI,MACJ,IAAK,QACD,IADJ,EACU6vC,EAAelmD,EAAM4G,KAD/B,cAG2B0wB,EAAKmuB,gBAHhC,IAGI,2BAA4C,EACxCtgB,EADwC,SAC/B+gB,EAAah/C,QAASg/C,EAAa9rC,WAJpD,8BAMI,MACJ,QACIyI,QAAQ5b,MAAM,sBAAwBjH,EAAM4G,KAAKJ,W,6CAKjE,SAAgB6P,GAAgB,IAAD,EAC3B,UAAAlX,KAAKg4B,eAAL,SAAc5wB,YAAY,CAAEC,QAAS,cAAe6P,MAAOA,EAAOi3B,MAAM,M,oBAG5E,SAAOnI,GACHhmC,KAAK8sC,cAAcznC,KAAK2gC,K,qBAG5B,SAAQA,GACJhmC,KAAK+sC,eAAe1nC,KAAK2gC,K,2BAG7B,SAAcA,GACVhmC,KAAKitC,qBAAqB5nC,KAAK2gC,K,kCAGnC,SAAqBA,GACjBhmC,KAAKgtC,4BAA4B3nC,KAAK2gC,K,qBAG1C,SAAQA,GACJhmC,KAAKimD,eAAe5gD,KAAK2gC,K,qBAG7B,SAAQA,GACJhmC,KAAK6sC,eAAexnC,KAAK2gC,K,yBAG7B,SAAYA,GACRhmC,KAAKkmD,mBAAmB7gD,KAAK2gC,K,sBAGjC,SAASA,GACLhmC,KAAKmtC,gBAAgB9nC,KAAK2gC,K,4BAG9B,SAAeA,GACXhmC,KAAKotC,sBAAsB/nC,KAAK2gC,K,wBAGpC,SAAWA,GACPhmC,KAAKutC,kBAAkBloC,KAAK2gC,K,wCAGhC,SAA2BA,GACvBhmC,KAAKwtC,kCAAkCnoC,KAAK2gC,K,4BAGhD,SAAeA,GACXhmC,KAAKytC,sBAAsBpoC,KAAK2gC,K,gCAGpC,SAAmBA,GACfhmC,KAAK0tC,0BAA0BroC,KAAK2gC,K,gCAGxC,SAAmBA,GACfhmC,KAAKmmD,0BAA0B9gD,KAAK2gC,K,4BAGxC,SAAeA,GACXhmC,KAAKomD,sBAAsB/gD,KAAK2gC,K,4BAGpC,SAAeA,GACXhmC,KAAKqmD,sBAAsBhhD,KAAK2gC,K,qBAGpC,SAAQA,GACJhmC,KAAKsmD,eAAejhD,KAAK2gC,K,mBAG7B,SACInX,EACAkf,EACAxhC,EACAoD,EACAktB,GACD,IAAD,EACQ90B,EAAiC,CACnCV,QAAS,QACTwnB,SAAUA,EACVkf,OAAQA,EACRn/B,YAAa,EACbe,YAAaA,EACbktB,mBAAoBA,EACpBtwB,aAAcA,GAGlB,UAAAvM,KAAKg4B,eAAL,SAAc5wB,YAAYW,K,wBAG9B,SAAWk+B,GAAqB,IAAD,EACrBl+B,EAAsC,CAAEV,QAAS,aAAc6P,MAAO+uB,GAC5E,UAAAjmC,KAAKg4B,eAAL,SAAc5wB,YAAYW,K,kBAG9B,WAAQ,IAAD,EAEH,UAAA/H,KAAKg4B,eAAL,SAAc5wB,YADwB,CAAEC,QAAS,OAAQ8mC,MAAM,M,mBAInE,WAAS,IAAD,EAEJ,UAAAnuC,KAAKg4B,eAAL,SAAc5wB,YADyB,CAAEC,QAAS,QAAS8mC,MAAM,M,gCAIrE,SAAmBv+B,GAAa,IAAD,EACrB7H,EAA8C,CAAEV,QAAS,qBAAsBuI,GAAIA,GACzF,UAAA5P,KAAKg4B,eAAL,SAAc5wB,YAAYW,K,mIAG9B,SAAO4B,GAAiB,IAAD,EACb5B,EAAkC,CAAEV,QAAS,SAAU6P,MAAOvN,GACpE,UAAA3J,KAAKg4B,eAAL,SAAc5wB,YAAYW,O,yIAG9B,SAAawE,GAAuB,IAAD,EACzBxE,EAAwC,CAAEV,QAAS,eAAgB6P,MAAO3K,EAAc4hC,MAAM,GACpG,UAAAnuC,KAAKg4B,eAAL,SAAc5wB,YAAYW,O,0BAG9B,WAAgB,IAAD,EACX,UAAA/H,KAAKg4B,eAAL,SAAc5wB,YAAY,CAAEC,QAAS,mB,kBAGzC,SACIvG,EACAiI,EACA2lC,EACAC,GACD,IAAD,EACQ5mC,EAAuB,CACzBV,QAAS,OACTvG,SAAUA,EACViI,qBAAsBA,EACtB4lC,iBAAkBA,EAClBD,eAAgBA,GAGpB,UAAA1uC,KAAKg4B,eAAL,SAAc5wB,YAAYW,K,qIAG9B,SAASg3B,GAAqB,IAAD,EACzB,UAAA/+B,KAAKg4B,eAAL,SAAc5wB,YAAY,CAAEC,QAAS,WAAY03B,SAAUA,Q,sCAG/D,WAA4B,IAAD,EACvB,UAAA/+B,KAAKg4B,eAAL,SAAc5wB,YAAY,CAAEC,QAAS,+B,0BAGzC,WAAgB,IAAD,EACX,UAAArH,KAAKg4B,eAAL,SAAc5wB,YAAY,CAAEC,QAAS,mB,8BAGzC,WAAoB,IAAD,EACf,UAAArH,KAAKg4B,eAAL,SAAc5wB,YAAY,CAAEC,QAAS,uB,+BAGzC,SAAkByrC,GAA0B,IAAD,EAIvC,UAAA9yC,KAAKg4B,eAAL,SAAc5wB,YAHqC,CAC/CC,QAAS,wB,uCAKjB,SAA0BlC,GAAgB,IAAD,EAC/B4C,EAAqD,CACvDV,QAAS,4BACTlC,MAAOA,GAEX,UAAAnF,KAAKg4B,eAAL,SAAc5wB,YAAYW,K,mBAG9B,WACQ/H,KAAKg4B,UACLh4B,KAAKg4B,QAAQ5wB,YAAY,CAAEC,QAAS,SACpCrH,KAAKg4B,QAAQI,QACbp4B,KAAKg4B,aAAUx1B,EACfxC,KAAK8sC,cAAgB,GACrB9sC,KAAK+sC,eAAiB,GACtB/sC,KAAKitC,qBAAuB,GAC5BjtC,KAAKgtC,4BAA8B,GACnChtC,KAAKimD,eAAiB,GACtBjmD,KAAK6sC,eAAiB,GACtB7sC,KAAKkmD,mBAAqB,GAC1BlmD,KAAKmtC,gBAAkB,GACvBntC,KAAKotC,sBAAwB,GAC7BptC,KAAKutC,kBAAoB,GACzBvtC,KAAKwtC,kCAAoC,GACzCxtC,KAAKytC,sBAAwB,GAC7BztC,KAAK0tC,0BAA4B,GACjC1tC,KAAKmmD,0BAA4B,GACjCnmD,KAAKomD,sBAAwB,GAC7BpmD,KAAKqmD,sBAAwB,GAC7BrmD,KAAKsmD,eAAiB,Q,KCxYbU,G,WAQjB,WAAYre,EAA6Bl8B,GAA6B,IAAD,gCAPpDw6C,sBAOoD,OANpDx6C,eAMoD,OALpDy6C,aAAmD,GAKC,KAJpDC,mBAAyD,GAIL,KAHpDC,uBAA6D,GAGT,KAFpDC,wBAEoD,EACjErnD,KAAKinD,iBAAmBte,EACxB3oC,KAAKyM,UAAYA,EAEjBzM,KAAKqnD,mBAAqB,SAACt/C,GACvB,GAA6B,kBAAzBA,EAAQN,KAAKJ,QAA6B,CAC1C,IACIjC,EADEiC,EAAUU,EAAQN,KAGxB,OAAQJ,EAAQqnC,gBACZ,KAAK/6B,EAAeq4B,KAChB5mC,EAAW,EAAK8hD,aAChB,MACJ,KAAKvzC,EAAew4B,eAChB/mC,EAAW,EAAK+hD,mBAChB,MACJ,KAAKxzC,EAAexS,eAChBiE,EAAW,EAAKgiD,uBAChB,MACJ,QACI1jC,QAAQ5b,MAAM,4BAA8BT,EAAQqnC,gBAflB,oBAkB1BtpC,GAlB0B,IAkB1C,2BAA2B,EACvBkiD,EADuB,SACrB,IAAIC,cAAc,UAnBkB,iCAuBlD96C,EAAUgsB,UAAUz4B,KAAKqnD,oB,4CAG7B,SACIpnD,EACAC,EACAC,EACAC,GACW,IAAD,OACV,GAAIJ,KAAKyM,UAAUumC,UAAW,CAC1B,IAAMxyC,EAAUR,KAAKinD,iBAAiBxmD,YAAYR,EAAQC,EAAgBC,GAE1E,OADAH,KAAKknD,aAAa7hD,KAAK7E,GAChB,WACH,EAAKgnD,QAAQhnD,EAAS,EAAK0mD,eAInC,OAAOlnD,KAAKinD,iBAAiBlb,SAAS9rC,EAAQC,EAAgBC,EAAgBC,K,4BAGlF,SACIW,EACAb,EACAE,GACW,IAAD,OACV,GAAIJ,KAAKyM,UAAUumC,UAAW,CAC1B,IAAMxyC,EAAUR,KAAKinD,iBAAiBhmD,kBAAkBF,EAAcb,GAEtE,OADAF,KAAKmnD,mBAAmB9hD,KAAK7E,GACtB,WACH,EAAKgnD,QAAQhnD,EAAS,EAAK2mD,qBAInC,OAAOnnD,KAAKinD,iBAAiB/a,eAAenrC,EAAcb,EAAgBE,K,gCAG9E,SACIc,EACAhB,EACAE,GACW,IAAD,OACV,GAAIJ,KAAKyM,UAAUumC,UAAW,CAC1B,IAAMxyC,EAAUR,KAAKinD,iBAAiB7lD,sBAAsBF,EAAkBhB,GAE9E,OADAF,KAAKonD,uBAAuB/hD,KAAK7E,GAC1B,WACH,EAAKgnD,QAAQhnD,EAAS,EAAK4mD,yBAInC,OAAOpnD,KAAKinD,iBAAiB7a,mBAAmBlrC,EAAkBhB,EAAgBE,K,qBAGtF,SAAgB4lC,EAA0CjJ,GACtD,IAAK,IAAIh6B,EAAIg6B,EAAKp7B,OAAS,EAAGoB,GAAK,IAAKA,EACpC,GAAIijC,IAAajJ,EAAKh6B,GAAI,CACtBg6B,EAAK0qB,OAAO1kD,EAAG,GACf,S,gCAKZ,SACI1B,EACAnB,EACAoB,EACAC,EACAnB,GAEA,OAAOJ,KAAKinD,iBAAiB7b,mBACzB/pC,EACAnB,EACAoB,EACAC,EACAnB,K,kDAIR,SACIiC,EACAnC,EACAoB,EACAC,EACAnB,GAEA,OAAOJ,KAAKinD,iBAAiB5b,qCACzBhpC,EACAnC,EACAoB,EACAC,EACAnB,K,uCAIR,SACI8C,EACAhD,EACAE,GAEA,OAAOJ,KAAKinD,iBAAiB3b,0BAA0BpoC,EAAyBhD,EAAgBE,K,kCAGpG,SACImD,EACArD,EACAoB,EACAC,EACAnB,GAEA,OAAOJ,KAAKinD,iBAAiB9b,qBACzB5nC,EACArD,EACAoB,EACAC,EACAnB,K,8BAIR,SACImD,EACArD,EACAqB,EACAnB,GAEA,OAAOJ,KAAKinD,iBAAiBhc,iBAAiB1nC,EAAgBrD,EAAgBqB,EAAiBnB,K,4BAGnG,SACImE,EACArE,EACAE,GAEA,OAAOJ,KAAKinD,iBAAiB/b,eAAe3mC,EAAerE,EAAgBE,K,oCAG/E,SACIqE,EACAvE,GAED,IADCE,EACF,wDACE,OAAOJ,KAAKinD,iBAAiBrR,uBAAuBnxC,EAAsBvE,EAAgBE,K,iCAG9F,SACIwE,EACA1E,EACAE,GAEA,OAAOJ,KAAKinD,iBAAiBS,oBAAoB9iD,EAAmB1E,EAAgBE,K,4CAGxF,SACI0E,EACA5E,EACAE,GAEA,OAAOJ,KAAKinD,iBAAiBU,+BAA+B7iD,EAAuB5E,EAAgBE,K,2CAGvG,SACIkF,EACApF,EACAE,GAEA,OAAOJ,KAAKinD,iBAAiBhb,8BACzB3mC,EACApF,EACAE,K,sBAIR,SACIqF,EACAvF,EACAE,GAEA,OAAOJ,KAAKinD,iBAAiBtR,SAASlwC,EAAQvF,EAAgBE,K,2BAGlE,SACIuF,EACAzF,EACAE,GAEA,OAAOJ,KAAKinD,iBAAiBlR,cAAcpwC,EAAazF,EAAgBE,K,mCAG5E,SACIwnD,EACA1nD,EACAE,GAEA,OAAOJ,KAAKinD,iBAAiBjR,sBAAsB4R,EAAqB1nD,EAAgBE,O,KClM1F4b,GAAYjC,YAAW,CACzBC,KAAM,CACFE,SAAU,WACVyE,gBAAiB,QACjBtN,OAAQ,QACRw2C,SAAU,SACVr8C,QAAS,OACTgc,cAAe,SACfvN,eAAgB,SAChBwN,WAAY,UAEhBjV,MAAO,CACH2nB,OAAQ,QAEZ2tB,aAAc,CACVpqC,OAAQ,QAEZqqC,kBAAmB,CACf7tC,SAAU,WACVia,YAAa,GACbC,aAAc,GACd+E,OAAQ,IACRzR,UAAW,SACXgf,WAAY,WACZshB,WAAY,YAIpB,SAASC,GACLvlC,EACAwlC,EACAtW,EACAC,GAEA,GAAIpyC,OAAO0oD,YAAczlC,EAAQhQ,WAAa,GAAKgQ,EAAQ/P,YAAc,EAAG,CACxE,IAAM+0B,EAAajoC,OAAO2d,OAAOsqB,YAAcjoC,OAAO0oD,WAAa1oD,OAAOC,YACpE0oD,EAAc3oD,OAAO2d,OAAOgrC,aAAe3oD,OAAO4oD,YAAc5oD,OAAOE,aACvEyc,EAAcvY,KAAKgG,IAAI,EAAGhG,KAAKgG,IAAI69B,EAAahlB,EAAQhQ,WAAY01C,EAAc1lC,EAAQ/P,cAEhGlT,OAAO6oD,SACHlsC,EAAcsG,EAAQhQ,YAAcjT,OAAO0oD,WAAa1oD,OAAOC,YAC/D0c,EAAcsG,EAAQ/P,aAAelT,OAAO4oD,YAAc5oD,OAAOE,cAIzE,IAAIq0C,EACAuU,EAEJ,GAAI7lC,EAAQ/S,YAAa,CACrBqkC,EAAS,GADY,oBAGPtxB,EAAQ/S,aAHD,IAGrB,2BAAmC,CAAC,IAA3BvD,EAA0B,QAC/B4nC,EAAO3uC,KAAK,CACRuK,GAAIxD,EAAEwD,GACNqO,MAAO7R,EAAE6R,MACTgf,SAAU7wB,EAAE6wB,WAGZ7wB,EAAEjN,UACFopD,EAAgBn8C,EAAEwD,KAXL,oCAerBokC,OAASxxC,EACT+lD,OAAgB/lD,EAGpBovC,EAAeoC,GACfnC,EAAsB0W,GACtBL,EAAc1U,MAAM9wB,EAAQmM,SAAUnM,EAAQqrB,OAAQrrB,EAAQnW,aAAcynC,EAAQuU,GAmDzE,SAASC,GAAT,GAWJ,IAVPz0C,EAUM,EAVNA,iBACA6qB,EASM,EATNA,oBACAnyB,EAQM,EARNA,UACAgpB,EAOM,EAPNA,UACAuC,EAMM,EANNA,QACAqH,EAKM,EALNA,OACAmR,EAIM,EAJNA,0BACAG,EAGM,EAHNA,oBACAF,EAEM,EAFNA,QACAM,EACM,EADNA,yBAEMv2B,EAAUwB,KACVysC,EAAe5sB,mBACfyT,EAAWzT,mBACjB,EAAoC38B,GAAc,GAAlD,mBAAOsd,EAAP,KAAoBC,EAApB,KACI6yB,EAAS1sB,UACT0sB,EAAS1sB,QAAQzR,MAAQqL,EACzB8yB,EAAS1sB,QAAQvR,OAASoL,GAE9B,IAAMyrC,EAAgBnf,mBAAQ,kBAAM,IAAIid,GAAchuB,KAAU,CAACA,IACjE,EAA8B54B,oBAAkB,GAAhD,mBAAO4+B,EAAP,KAAgBwT,EAAhB,KACA,EAAoCpyC,oBAAkB,GAAtD,mBAAOogC,EAAP,KAAmBkpB,EAAnB,KACM9f,EAAa/M,mBACnB+M,EAAWhmB,QAAUob,EACrB,MAA4B5+B,mBAAiB,GAA7C,mBAAOuC,EAAP,KAAegnD,EAAf,KACA,EAA0CvpD,qBAA1C,mBAAOyvC,EAAP,KAAsB+Z,EAAtB,KACA,EAA4BxpD,mBAAiB,GAA7C,mBAAOuK,EAAP,KAAe+nC,EAAf,KACA,EAAwCtyC,mBAAiB,GAAzD,oBAAOmN,GAAP,MAAqBolC,GAArB,MACA,GAAsCvyC,qBAAtC,qBAAOuQ,GAAP,MAAoBiiC,GAApB,MACA,GAAoDxyC,qBAApD,qBAAOy9B,GAAP,MAA2BgV,GAA3B,MACA,GAAiDzyC,oBAAkB,GAA1D2yC,GAAT,qBACA,GAAkC3yC,mBAAiC,IAAnE,qBAAOsC,GAAP,MAAkByvC,GAAlB,MACM7I,GAAqBS,mBACvB,kBACI,IAAI1wB,GAAyC3W,GAAW,CACpD+W,iBAAiB,EACjBa,qBAAsB,QAE9B,CAAC5X,KAEL,GAA0CtC,mBAAiC,IAA3E,qBAAOypD,GAAP,MAAsBC,GAAtB,MACA,GAAgD1pD,oBAAS,GAAzD,qBAAO6/B,GAAP,MAAyB8pB,GAAzB,MACA,GAA4D3pD,mBAAuC,IAAnG,qBAAOspC,GAAP,MAA+BuJ,GAA/B,MACA,GAAgC7yC,mBAAmByU,GAAS8pB,QAA5D,qBAAOoB,GAAP,MAAiBkS,GAAjB,MACA,GAAwD7xC,oBAAkB,GAA1E,qBAAOugC,GAAP,MAA6BqpB,GAA7B,MACA,GAAwC5pD,mBAAkBw/B,EAAoBqqB,aAA9E,qBAAO5hC,GAAP,MAAqB6hC,GAArB,MACMC,GAAmBttB,iBAA+B,IACxDstB,GAAiBvmC,QAAUimC,GAC3B,IAAM9qB,GAAQgL,mBAAe,kBAAM,IAAIpQ,KAAS,IAC1CyF,GAAmBvC,iBAAc,CAAEgG,EAAG,EAAGC,EAAG,IAClD,GAAoC1iC,oBAAkB,GAAtD,qBAAOgqD,GAAP,MAAmBC,GAAnB,MACMC,GAA6BztB,iBAAe,GAC5CD,GAAeC,iBAAuB,MAC5C,GAAwCz8B,mBAAuB2U,EAAiB4/B,cAAhF,qBAAOA,GAAP,MAAqB4V,GAArB,MACA,GAAgDnqD,mBAA2B2U,EAAiB0/B,kBAA5F,qBAAOA,GAAP,MAAyB+V,GAAzB,MACA,GAAwCpqD,mBAAuB2U,EAAiB2/B,cAAhF,qBAAOA,GAAP,MAAqB+V,GAArB,MACA,GAAkCrqD,oBAAkB,GAApD,qBAAOsqD,GAAP,MAAkBC,GAAlB,MACA,GAAwCvqD,mBAAiB,IAAzD,qBAAO2nD,GAAP,MAAqB6C,GAArB,MACA,GAA0CxqD,mBAAgB,QAA1D,qBAAOyqD,GAAP,MAAsBC,GAAtB,MACMzhB,GAAmBU,mBAAQ,WAC7B,IAAMyJ,EAAU,IAAIh5B,GAepB,OAdAg5B,EAAQ74B,iBAAmB,WACnBolB,KAAalrB,GAASgqB,WAAa8V,GAAavB,sBAAwBx+B,EAAoBy+B,SAIhG6V,EAAct6C,SAElB4kC,EAAQ54B,kBAAoB,WACpBmlB,KAAalrB,GAASgqB,WAAa8V,GAAavB,sBAAwBx+B,EAAoB2+B,OAIhG2V,EAAct6C,SAEX4kC,IACR,CAAC0V,EAAevU,GAAc5U,KAC3B+K,GAAsBjO,mBAC5BiO,GAAoBlnB,QAAUylB,GAE9B,IAAMM,GAAYI,mBACd,kBAAM,IAAIie,GAAa,IAAIlnD,EAAiB6zC,GAAa5zC,YAAa0M,KACtE,CAACknC,GAAa5zC,WAAY0M,IAExBs9C,GAAmBxuC,uBACrB,SAACmH,GACG,GAAIA,EAAS,CACT,IAAMsnC,EAAetnC,EACrB4sB,EAAS1sB,QAAUonC,EAEa,IAA5BA,EAAa/jB,WACbgiB,GAAY+B,EAAc9B,EAAetW,GAAgBC,IAEzDmY,EAAaC,aAAe,SAACppD,GACzBonD,GAAY+B,EAAc9B,EAAetW,GAAgBC,KAIjEmY,EAAan7C,UAAY,SAAChO,GACtBqnD,EAAcjiB,WAAW,GAErB2C,EAAWhmB,SACXmb,GAAMl8B,SAIdmoD,EAAaE,aAAe,SAACrpD,GAAD,OAAWk9B,GAAM4U,QAA8B,IAAtBjwB,EAAQ9T,cAE7Do7C,EAAaniD,QAAU,SAAChH,GAAD,OAAW4vC,EA7JlD,SAAsB/tB,GAA4B,IAAD,IACzC5a,EACJ,iBAAQ4a,EAAQ5a,aAAhB,aAAQ,EAAeqiD,MACnB,KAAK,EACDriD,EAAQ,UACR,MACJ,KAAK,EACDA,EAAQ,gBACR,MACJ,KAAK,EACDA,EAAQ,iBACR,MACJ,KAAK,EACDA,EAAQ,uBACR,MACJ,QACIA,EAAQ,gBAIhB,OAAOA,EAAQ,OAAQ,UAAA4a,EAAQ5a,aAAR,eAAeC,UAAW,qBAyIKqiD,CAAa1nC,QAG/D,CAACqb,GAAOmqB,EAAezX,IAG3B,SAAS4Z,GAAiBz6C,GAAa,IAAD,EAC5BD,EAAW,UAAG2/B,EAAS1sB,eAAZ,aAAG,EAAkBjT,YAEtC,GAAKA,EAAL,CAHkC,oBAQlBA,GARkB,IAQlC,2BAA6B,CAAC,IAAnBvD,EAAkB,QACrBA,EAAEwD,KAAOA,EACTxD,EAAEjN,SAAU,EAEZiN,EAAEjN,SAAU,GAZc,gCAiBtC,IAAMmrD,GAA4B/uC,uBAAY,SAAC5R,GAC3C+nC,EAAU/nC,GACVwnC,IAAa,SAACzvC,GAAD,OACTA,EAAUiJ,KAAI,SAAC3H,EAAGD,GAAJ,MAAW,CACrB+G,KAAM9G,EAAE8G,KACRqT,UAAWna,EAAEma,UACbtb,MAAOmB,EAAES,cAAgBkG,EACzBlG,cAAeT,EAAES,cACjB3B,IAAKkB,EAAE+G,YAAcJ,EACrBI,YAAa/G,EAAE+G,YACf5E,MAAOnC,EAAEmC,MACT6D,MAAOjG,WAGhB,IAEG0gC,GAAqBloB,uBACvB,SAAChP,EAAsBg+C,GACfjb,EAAS1sB,UACT0sB,EAAS1sB,QAAQrW,aAAeA,EAChCwxB,GAAMhF,KAAOxsB,EACbolC,GAAgBplC,GAEZg+C,GACArC,EAAc37C,aAAaA,MAIvC,CAAC27C,EAAenqB,KAGpBtjB,qBAAU,WAgFN,OA/EAytC,EAAc/U,SAAQ,SAACtkB,EAAUggB,GAC7B8Z,EAAU95B,GACV+5B,EAAiB/Z,MAGrBqZ,EAAcziD,OAAd,sBAAqB,4BAAAW,EAAA,gFACXkpC,EAAS1sB,eADE,aACX,EAAkBlV,OADP,OAEjBqwB,GAAMl8B,QACN2vC,GAAW,GAHM,4CAMrB0W,EAAc5pB,SAAQ,WAAO,IAAD,EACxB,UAAAgR,EAAS1sB,eAAT,SAAkBhV,QAClBmwB,GAAMzuB,OACNkiC,GAAW,MAGf0W,EAAcnU,eAAc,SAACnlC,GAAiB,IAAD,IACrC0gC,EAAS1sB,UACT0sB,EAAS1sB,QAAQhU,YAAcA,GAGE,KAAjC,UAAA0gC,EAAS1sB,eAAT,eAAkBqjB,aAClBiiB,EAAcjiB,WAAW,GAG7BlI,GAAMzuB,OACNyuB,GAAM4U,QAAsB,IAAd/jC,GACd,UAAAk7B,GAAoBlnB,eAApB,SAA6BgwB,WAGjCsV,EAAcprB,sBAAqB,SAACltB,GAChCy6C,GAAiBz6C,GACjBiiC,GAAsBjiC,GACtBs4C,EAAchT,mBAAmBtlC,MAGrCs4C,EAActtC,SAAQ,WAClBstC,EAAc9vB,QACd34B,OAAO24B,WAGX8vB,EAAcsC,aAAY,SAAC9oD,GAAe,IAAD,EAGrC,GAFAyvC,GAAazvC,EAAUiJ,KAAI,SAAC3H,EAAGD,GAAJ,mBAAC,eAAeC,GAAhB,IAAmBgG,MAAOjG,QAEjDrB,GAAaA,EAAUC,OAAS,EAAG,CACnC,IAAMqB,EAAItB,EAAU,GACdiI,EAAS3G,EAAEnB,MAAQmB,EAAES,cAC3BiuC,EAAU/nC,GAGd,UAAAmgC,GAAoBlnB,eAApB,SAA6BgwB,WAGjCsV,EAAcxqB,YAAW,SAACqB,GAAD,OAAckS,GAAYlS,MACnDmpB,EAActoB,4BAA2B,SAAC/P,GAAD,OAAYm5B,GAAwBn5B,MAC7Eq4B,EAActX,gBAAe,SAAC/gB,GAAD,OAAYq5B,GAAgBr5B,MACzDq4B,EAAczoB,oBAAmB,SAACD,GAAD,OAAgBkpB,EAAclpB,MAC/D0oB,EAAcuC,mBAAmBjB,IACjCtB,EAAcwC,eAAenB,IAC7BrB,EAAcyC,eAAelB,IAC7BvB,EAAcrU,SAASyW,IACvBpC,EAAcpU,gBAAe,SAACvnC,GAC1Bk3B,GAAmBl3B,GAAc,MAErC27C,EAAc0C,SAAQ,SAAC7iD,EAASkT,GACxBokB,IACAsqB,IAAa,GACbC,GAAgB7hD,GAChB+hD,GAAiB7uC,OAIzBxb,OAAOorD,eAAiB,SAACrkD,GAChBiiD,EAAa7lC,SACdslC,EAAc9vB,SAIf,kBAAM8vB,EAAc9vB,WAC5B,CAAC2F,GAAOmqB,EAAeoC,GAA2B7mB,GAAoBpE,IAEzE,IAAMqV,GAAan5B,uBAAY,WACvB+zB,EAAS1sB,SACTslC,EAAcx6C,SAEnB,CAACw6C,IAEEvT,GAAcp5B,uBAAY,kBAAM2sC,EAAct6C,UAAS,CAACs6C,IAExDtlB,GAAarnB,uBACf,SAAC2e,GACO0O,EAAWhmB,SACXmb,GAAMzuB,OAGV,IAAM7M,EAAOy3B,EAAWv4B,EACxBumD,EAAct5C,YAAcnM,EAAO,MAEvC,CAACd,EAAQo8B,GAAOmqB,IAepB,IAAM/jB,GAA2B5oB,uBAC7B,SAAC3L,GACOg5B,EAAWhmB,UACXmb,GAAMzuB,OACN44C,EAAct6C,SAGlBy8C,GAAiBz6C,GACjBiiC,GAAsBjiC,GACtBs4C,EAAct5C,YAAc,EAC5Bs5C,EAAchT,mBAAmBtlC,KAErC,CAACs4C,EAAenqB,KAGpBtjB,qBAAU,WACN,GAAK/Y,IAAkC,IAArBA,GAAUC,OAA5B,CAIA,IAAM4I,EAAWu4B,aAAY,WACzB,IAD+B,EACzBngC,EAAMo7B,GAAMt7B,KAAKd,GACnBknD,EAAgB,GACdt/C,EAAQ++B,GAAmB8B,YAAYznC,GAHd,cAKf4G,EAAM0P,SALS,IAK/B,2BAA+B,CAAC,IAArBjW,EAAoB,QACtB0lC,GAAuB1lC,EAAEmC,QAC1B0jD,EAAcxjD,KAAKrC,IAPI,8BAW3BuG,EAAMwP,iBAAmB2vB,GAAuBn/B,EAAMwP,eAAe5T,QACrEkjC,GAAiBtvB,eAAexP,EAAMwP,gBAGtCxP,EAAMyP,kBAAoB0vB,GAAuBn/B,EAAMyP,gBAAgB7T,QACvEkjC,GAAiBrvB,gBAAgBzP,EAAMyP,iBjBpdhD,SAAqB5S,EAAUusB,GAAiD,IAAvCm4B,EAAsC,uDAA7B,SAAC1kD,EAAQusB,GAAT,OAAoBvsB,IAAMusB,GAC/E,GAAIvsB,EAAEzE,SAAWgxB,EAAEhxB,OACf,OAAO,EAGX,IAAK,IAAIoB,EAAI,EAAGA,EAAIqD,EAAEzE,SAAUoB,EAC5B,IAAK+nD,EAAO1kD,EAAErD,GAAI4vB,EAAE5vB,IAChB,OAAO,EAIf,OAAO,EiB8cMgoD,CAFLlC,EAAgBA,EAAcjyC,MAAK,SAACo0C,EAAIC,GAAL,OAAYD,EAAG7lD,MAAQ8lD,EAAG9lD,SAE7BgkD,GAAiBvmC,SAAS,SAACooC,EAAIC,GAAL,OAAYD,EAAGhiD,QAAUiiD,EAAGjiD,WAClF8/C,GAAiBD,GACbA,EAAclnD,OAAS,GAAKgyC,GAAa8B,yBAA2BtqC,SAASuqC,YAC7EzwB,UAAUC,UAAU8P,UAAU6zB,EAAcl+C,KAAI,SAAC3H,GAAD,OAAOA,EAAE8G,QAAMc,KAAK,OAAOoH,OAAM,SAACxL,UAK3F,KAEH,OAAO,kBAAM4G,aAAa7C,OAC3B,CACC+9B,GACA4f,EACAxmD,GACAgnC,GACA3K,GACAp8B,EACA0mC,GACAsL,KAGJ,IAAMwB,GAAqB55B,uBACvB,SAAC5R,GACG2gD,GAA0B3gD,GAC1Bu+C,EAAcv+C,OAAOA,KAEzB,CAACu+C,EAAeoC,KAGdjV,GAA2B95B,uBAC7B,SAAChP,GACGk3B,GAAmBl3B,GAAc,KAErC,CAACk3B,KAGLhpB,qBAAU,WACN,OAAOkuB,GAAUyC,oBACb,SAACvqC,EAAOC,GACJD,EAAMijB,kBACNjjB,EAAMgjB,iBACNqkC,EAAct5C,YAAc9N,EAASe,MAAQ,OAEjD,kBAAOytC,EAAS1sB,WAChB,kBAAMmb,GAAMt7B,KAAKd,MACjB,kBAAMD,QAEX,CAACinC,GAAWuf,EAAexmD,GAAWC,EAAQo8B,KAEjDtjB,qBAAU,WACN,OAAOkuB,GAAU0C,sCACb,SAACxqC,EAAOC,GACJD,EAAMijB,kBACNjjB,EAAMgjB,iBACNqkC,EAAct5C,YAAc9N,EAASe,MAAQ,OAEjD,kBAAOytC,EAAS1sB,WAChB,kBAAMmb,GAAMt7B,KAAKd,MACjB,kBAAMD,QAEX,CAACinC,GAAWuf,EAAexmD,GAAWC,EAAQo8B,KAEjDtjB,qBAAU,WACN,OAAOkuB,GAAU2C,2BACb,SAACzqC,EAAOY,GACJZ,EAAMijB,kBACNjjB,EAAMgjB,iBACN,IAAMxb,EAAY01B,GAAMt7B,KAAKd,GAGzBumD,EAAct5C,YADdnN,EAC4BoC,KAAKgG,IAAIlI,EAAS,KAAO0G,EAAY,KAAS,KAE9CxE,KAAKC,IAAI,GAAIuE,EAAY,KAAS,QAGtE,kBAAOinC,EAAS1sB,aAErB,CAAC+lB,GAAWuf,EAAevmD,EAAQo8B,KAEtC,IAAM6N,GAAgCrwB,uBAClC,SAACvS,GACG,OAAOD,EACHrH,GACAsH,EACA0qC,GAAahI,gCACbgI,GAAa/H,kCAGrB,CAACjqC,GAAWgyC,GAAahI,gCAAiCgI,GAAa/H,iCAG3ElxB,qBAAU,WACN,OAAOkuB,GAAUoD,UACb,SAAClrC,EAAOC,GACJD,EAAMijB,kBACNjjB,EAAMgjB,iBAEN,IAAMyiB,GAAe5kC,IAAkC,IAArBA,GAAUC,OAE5CumD,EAAcgD,KACVpqD,EACAwlC,EACM98B,EAAyB1I,EAAUa,EAAQ,KAC3CiqC,GAA8B9qC,EAASkI,OAC7C2K,EAAeq4B,SAGvB,kBAAM,KACN,WACI,IAAKtqC,IAAkC,IAArBA,GAAUC,OAAc,CACtC,IAAM0G,EAAY01B,GAAMt7B,KAAKd,GACvBG,EAAM+B,KAAKgG,IAAIxB,EAAY,IAAM1G,GAEvC,MAAO,CACHmI,KAAM,GACNjI,MAAOwG,EACP5E,cAAe4E,EACfvG,IAAKA,EACLiI,YAAajI,EACbqD,MAAO,EACP6D,MAAO,GAIf,GAAKmgD,GAAiBvmC,SAA+C,IAApCumC,GAAiBvmC,QAAQjhB,OAI1D,OAAOwnD,GAAiBvmC,QAAQ,QAGzC,CAAC+lB,GAAWuf,EAAenqB,GAAOp8B,EAAQD,GAAWkqC,KAExDnxB,qBAAU,WACN,OAAOkuB,GAAUsC,kBACb,SAACpqC,EAAO8I,GACJ9I,EAAMgjB,iBACNhjB,EAAMijB,kBACNqxB,GAAmBxrC,MAEvB,kBAAM,KACN,kBAAMjI,QAEX,CAACinC,GAAWwM,GAAoBzzC,KAEnC+Y,qBAAU,WACN,OAAOkuB,GAAUuC,gBACb,SAACrqC,GACGA,EAAMgjB,iBACNhjB,EAAMijB,kBACNqxB,GAAmB,MAEvB,kBAAM,OAEX,CAACxM,GAAWwM,KAEf16B,qBAAU,WACN,OAAOkuB,GAAUiN,wBACb,SAAC/0C,EAAOkD,GACJlD,EAAMgjB,iBAEF4f,GADA1/B,EACmBF,KAAKgG,IAAI,EAAG0C,GAAe,IAE3B1I,KAAKC,IAAI,GAAKyI,GAAe,KAFI,MAK5D,kBAAM,OAEX,CAACk3B,GAAoBl3B,GAAco8B,KAEtCluB,qBAAU,WACN,OAAOkuB,GAAU+e,qBACb,SAAC7mD,GACGA,EAAMgjB,iBACNhjB,EAAMijB,kBACNilC,IAAoB,SAAC5pD,GAAD,OAAcA,QAEtC,kBAAM,OAEX,CAACwpC,KAEJluB,qBAAU,WACN,OAAOkuB,GAAUgf,gCACb,SAAC9mD,EAAOsE,GACJtE,EAAMgjB,iBACNhjB,EAAMijB,kBACNmuB,IAA0B,SAAC+B,GACvB,IAAMC,EAAS,eAAQD,GAEvB,OADAC,EAAU9uC,IAAU6uC,EAAO7uC,GACpB8uC,QAGf,kBAAM,OAEX,CAACtL,KAEJluB,qBAAU,WACN,OAAOkuB,GAAUsD,+BACb,SAACprC,EAAOsE,GACJtE,EAAMgjB,iBACNhjB,EAAMijB,kBACNokC,EAAciD,0BAA0BhmD,MAE5C,kBAAM,OAEX,CAACwjC,GAAWuf,IAEfztC,qBAAU,WACN,OAAOkuB,GAAUwC,sBACb,SAACtqC,EAAO8I,GACJ9I,EAAMgjB,iBACNhjB,EAAMijB,kBACNqxB,GAAmBxrC,MAEvB,kBAAM,KACN,kBAAMo0B,GAAMt7B,KAAKd,MACjB,kBAAMD,QAEX,CAACinC,GAAWwM,GAAoBzzC,GAAWq8B,GAAOp8B,IAErD,IAAMypD,GAAmB7vC,uBACrB,SACI8vC,EACAC,GAEA,GAAK5pD,IAAkC,IAArBA,GAAUC,QAarB,GAAIwnD,GAAiBvmC,SAAWumC,GAAiBvmC,QAAQjhB,OAAS,EAAG,CACxE,IAAMe,EAAkBymD,GAAiBvmC,QAAQ,GACjD0oC,EAAiB5oD,EAAiBkpC,GAA8BlpC,EAAgBsG,aAf1C,CACtC,IAAMX,EAAY01B,GAAMt7B,KAAKd,GACvBG,EAAM+B,KAAKgG,IAAIxB,EAAY,IAAM1G,GACjCb,EAAW,CACbgJ,KAAM,GACNjI,MAAOwG,EACP5E,cAAe4E,EACfvG,IAAKA,EACLiI,YAAajI,EACbqD,MAAO,GAGXkmD,EAAmBvqD,EAAU0I,EAAyB1I,EAAUa,EAAQ,SAMhF,CAACD,GAAWkqC,GAA+BjqC,EAAQo8B,KAGvDtjB,qBAAU,WACN,OAAOkuB,GAAUuD,gBACb,SAACrrC,GACGA,EAAMgjB,iBACNhjB,EAAMijB,kBAEFub,GACA+rB,IACI,SAACtqD,EAAUiI,GACPm/C,EAAcgD,KAAKpqD,EAAUiI,EAAsB4K,EAAeq4B,MAAM,GACxE2E,EACIlb,EADe,OAEfoZ,QAFe,IAEfA,IAAiB,GACjBhS,GACAtwB,GACAzL,EACAiI,EACAg1B,GAAMt7B,KAAKd,OAGnB,SAACb,EAAUiI,GACPm/C,EAAcgD,KAAKpqD,EAAUiI,EAAsB4K,EAAeq4B,MAAM,GACxE2E,EACIlb,EADe,OAEfoZ,QAFe,IAEfA,IAAiB,GACjBhS,GACAtwB,GACAzL,EACAiI,EACAg1B,GAAMt7B,KAAKd,OAKnBq8B,IACAkqB,EAAct6C,QACdmkC,IAAqC,KAGzCqZ,IACI,SAACtqD,EAAUiI,GAAX,OACIm/C,EAAcgD,KAAKpqD,EAAUiI,EAAsB4K,EAAew4B,gBAAgB,MACtF,SAACrrC,EAAUiI,GAAX,OACIm/C,EAAcgD,KAAKpqD,EAAUiI,EAAsB4K,EAAew4B,gBAAgB,SAIlG,kBAAM,OAEX,CACCxD,GACAuf,EACAkD,GACArtB,GACAp8B,EACA8zB,EACAoZ,EACAhS,GACAtwB,GACAokC,EACAtR,EACArB,IAGJvjB,qBAAU,WACF+1B,GAA6BA,EAA0BnoC,UAAY,GACnE0pC,IAAqC,SAACmC,GAKlC,OAJIA,GAAqC1D,EAA0B2D,QAC/D+T,EAAcx6C,QAGX,OAGhB,CAAC8iC,EAA2B0X,IAE/BztC,qBAAU,WACN,OAAOkuB,GAAUyD,oBACb,SAACvrC,GACGA,EAAMgjB,iBACNhjB,EAAMijB,kBAENsnC,IACI,SAACtqD,EAAUiI,GAAX,OACIm/C,EAAcgD,KAAKpqD,EAAUiI,EAAsB4K,EAAexS,gBAAgB,MACtF,SAACL,EAAUiI,GAAX,OACIm/C,EAAcgD,KAAKpqD,EAAUiI,EAAsB4K,EAAexS,gBAAgB,SAG9F,kBAAM,OAEX,CAACwnC,GAAWuf,EAAekD,KAE9B3wC,qBAAU,WACN,OAAOkuB,GAAUgN,UACb,SAAC90C,GACGA,EAAMgjB,iBAEFma,EACAkqB,EAAct6C,QAEds6C,EAAcx6C,UAGtB,kBAAM,OAEX,CAACi7B,GAAW3K,EAASkqB,IAExB,IAAMrS,GAAiBt6B,uBACnB,SAAC1a,EAAsBg1C,GACnBh1C,EAAMgjB,iBACN,IAAMiyB,EAAc/W,KAAa8W,EAAiBhiC,GAAS8pB,OAASkY,EACpEqS,EAAcnpB,SAAS+W,GACvB/E,EAAyBhS,GAAU+W,KAEvC,CAAC/W,GAAUmpB,EAAenX,IAG9Bt2B,qBAAU,WACN,OAAOkuB,GAAUoN,eACb,SAACl1C,GAAD,OAAWg1C,GAAeh1C,EAAOgT,GAASgqB,cAC1C,kBAAM,OAEX,CAAC8K,GAAWkN,KAEfp7B,qBAAU,WACN,OAAOkuB,GAAUqN,uBACb,SAACn1C,GAAD,OAAWg1C,GAAeh1C,EAAOgT,GAAS+pB,cAC1C,kBAAM,OAEX,CAAC+K,GAAWkN,KAEf,IAAM0V,GAAwBhwC,uBAAY,kBAAMwtC,IAAoB,SAAC9pB,GAAD,OAAuBA,OAAmB,IAExGusB,GAAyBjwC,uBAAY,WACnC8jB,EACAqpB,GAAc,SAAClpB,GAOX,OANIA,EACAr0B,SAASsgD,iBAETtgD,SAAS2gB,gBAAgB4/B,qBAGrBlsB,KAGZ0oB,EAAc9R,qBAEnB,CAAC8R,EAAe7oB,IAEb8F,GAAqB5pB,uBAAY,SAACimB,GAChC8N,EAAS1sB,UACT0sB,EAAS1sB,QAAQ4e,OAASA,KAE/B,IAEGmqB,GAAqBpwC,uBAAY,WACnC2sC,EAAc0D,eACVvsB,IACAopB,EAAa7lC,SAAU,EACvBnjB,OAAO24B,WAEZ,CAAC8vB,EAAe7oB,IAEbiW,GAAiB/5B,uBACnB,SAACwjB,GACGmpB,EAAcnpB,SAASA,KAE3B,CAACmpB,IAGCnH,GAAcxlC,uBAAY,WAC5B2sC,EAAc9vB,QACd34B,OAAO24B,UACR,CAAC8vB,IAEE2D,GAAiCtwC,uBAAY,WAC/C2sC,EAActU,6BACf,CAACsU,IAEE4D,GAA0BvwC,uBAAY,WACxC2sC,EAAc/R,iBACf,CAAC+R,IAEEpsB,GAAcvgB,uBAAY,WACxByiB,EACAkqB,EAAct6C,QAEds6C,EAAcx6C,SAEnB,CAACw6C,EAAelqB,IAEb+tB,GAAoBxwC,uBAAY,kBAAMiwC,OAA0B,CAACA,KAGnE35B,GAQA4hB,GARA5hB,aACAD,GAOA6hB,GAPA7hB,cACAE,GAMA2hB,GANA3hB,yBACAC,GAKA0hB,GALA1hB,qBACAE,GAIAwhB,GAJAxhB,wBACAD,GAGAyhB,GAHAzhB,0BACAE,GAEAuhB,GAFAvhB,mBACAiqB,GACA1I,GADA0I,8BAEE6P,GAAiBjjB,mBACnB,kBACIpX,GAAc,CACVE,gBACAD,iBACAE,4BACAC,wBACAE,2BACAD,6BACAE,0BAER,CACIL,GACAD,GACAE,GACAC,GACAE,GACAD,GACAE,KAIRzX,qBAAU,WACN,IAAMlQ,EAAWu4B,aAAY,WACrBvf,KAAK5gB,MAAQ2mD,GAA2B1mC,QAAU,IAC9CwmC,IACAC,IAAc,GAEVD,IACRC,IAAc,KAEnB,KAEH,OAAO,kBAAMjmB,cAAc74B,MAC5B,CAAC6+C,KAEJ,IAAM6C,GAAoB1wC,uBAAY,kBAAMouC,IAAa,KAAQ,IAEjE,OACI,uBAAK1jC,IAAK2V,GAAc2a,YA/hB5B,SAAyB/vC,GAGrB,GAFA8iD,GAA2B1mC,QAAUW,KAAK5gB,MAErCi5B,GAAahZ,QAAlB,CAIA,IAAIspC,EAAStwB,GAAahZ,QAAQD,wBAClCyb,GAAiBxb,QAAQif,EAAIr7B,EAAE2lD,QAAUD,EAAOhzB,KAChDkF,GAAiBxb,QAAQkf,EAAIt7B,EAAE4lD,QAAUF,EAAO/xC,MAshBMW,UAAWN,EAAQR,KAAzE,UACI,eAAC,GAAD,CAAOU,KAAMgvC,GAAW9uC,QAASqxC,GAAmBpxC,iBAAkB,IAAMI,SAAU4uC,GAAtF,SACK9C,KAEL,wBACIv5C,QAAQ,OACR6+C,UAAU,EACV5mC,QAASqW,GACTwwB,cAAeP,GACfjxC,UAAWsuC,GAAa5uC,EAAQhI,MAAX,UAAsBgI,EAAQstC,aAA9B,YAA8CttC,EAAQhI,OAC3EyT,IAAK8jC,GACLx8C,IAAKkoB,IAERwJ,IACG,sBAAKnkB,UAAWN,EAAQutC,kBAAxB,SACKc,GAAcl+C,KAAI,SAAC7J,EAAUkI,GAC1B,IAAIue,EAEoB,IAApBzmB,EAASqc,UACToK,EACI,eAACvK,GAAD,CACIC,eAAc,oBAAEqyB,EAAS1sB,eAAX,aAAE,EAAkBzR,aAApB,QAA6B1R,OAAO2d,OAAOsqB,WACzD5mC,SAAUA,EACVoc,MAAOi/B,KAIf50B,EAAU,uBAAMhc,MAAOygD,GAAb,SAA8BlrD,EAASgJ,OAGrD,OAAId,EAAQ6/C,GAAclnD,OAAS,EAE3B,gBAAC,IAAMm1B,SAAP,WACKvP,EACD,0BAFiBzmB,EAASkI,OAO/B,eAAC,IAAM8tB,SAAP,UAAsCvP,GAAjBzmB,EAASkI,YAIjD,eAAC80B,GAAD,CACIM,iBAAkBA,GAClBJ,QAASA,EACTD,MAAOA,GACPp8B,OAAQA,EACRgO,YAAaA,GACbktB,mBAAoBA,GACpBqC,gBAAiBx9B,IAAaA,GAAUC,OAAS,EACjDs9B,iBAAkBA,GAClBhB,eAAe,EACft0B,OAAQA,EACR4C,aAAcA,GACd4xB,qBAAqB,EACrBoB,mBAAmB,EACnBC,WAAYA,EACZX,cAAeQ,EACfA,OAAQA,EACRP,eAAe,EACfM,eAAgBmtB,YAChBvtB,gBAAiBt9B,IAAaA,GAAUC,OAAS,EACjDo9B,SAAUA,GACVW,iCAA0C,OAATh+B,SAAS,IAATA,QAAA,EAAAA,GAAWC,QAAS,IAAM09B,IAAWG,EACtEG,qBAAsBA,GACtBl6B,OAAQivC,GACRpW,QAASqW,GACTlZ,OAAQmH,GACR9F,qBAAsBqH,GACtBhF,kBAAmBosB,GACnB9rB,mBAAoB+rB,GACpB9sB,eAAgByG,GAChB5hC,eAAgB4xC,GAChB1W,qBAAsB4W,GACtB/V,eAAgBqsB,GAChBjuB,WAAY4X,GACZ16B,QAASmmC,GACTnhB,2BAA4BisB,GAC5BjtB,oBAAqBA,EACrBiB,qBAAqB,EACrBC,0BAA2BT,IAAWG,EACtCO,mBAAoB1Y,GACpB2Y,oBAAqB8rB,Q,cCxgC/Bl8C,GAAKwjC,eAEUoZ,G,WAYjB,WAAYp0C,EAAkB8pC,GAA4D,IAAD,gCAXhF9pC,aAWgF,OAVhF8pC,uBAUgF,OARzF/kB,UAQyF,OAPzF6V,eAOyF,OALxEyZ,yBAKwE,OAJjFC,wBAIiF,OAHjFC,qBAGiF,OAFjFC,kBAAmB,EAGvB5sD,KAAK0sD,mBAAqB,GAC1B1sD,KAAK2sD,gBAAkB,GACvB3sD,KAAKm9B,KAAO,GACZn9B,KAAKgzC,eAAwBxwC,IAAZ4V,EACjBpY,KAAKoY,QAAL,OAAeA,QAAf,IAAeA,IAAW,GAC1BpY,KAAKkiD,kBAAL,OAAyBA,QAAzB,IAAyBA,IAAqB,GAC9CliD,KAAKysD,oBAAsB,SAAC5rD,GACxB,GAAIA,EAAM2O,SAAW/P,QAIK,kCAAtBoB,EAAM4G,KAAKolD,QAA+ChsD,EAAM4G,KAAKM,QAIzE,GAAmC,SAA/BlH,EAAM4G,KAAKM,QAAQV,QAAoB,CACvC,IAAMylD,EAAcjsD,EAAM4G,KAC1B,EAAK01B,KAAO2vB,EAAY/kD,QAAQo1B,KAFO,oBAIzB,EAAKwvB,iBAJoB,IAIvC,2BAAoC,EAChC3iC,EADgC,SAC9B,EAAKmT,OAL4B,8BAQnC2vB,EAAY/kD,QAAQglD,cACpBttD,OAAO2H,YACH,CACIylD,OAAQ,cACR9kD,QAAS,CACLV,QAAS,UACTuI,GAAIA,GACJo9C,aAAc,EAAK7vB,OAG3B,SAGL,CACH,IADG,EACG91B,EAAUxG,EAAM4G,KADnB,cAGW,EAAKilD,oBAHhB,IAGH,2BAAuC,EACnC1iC,EADmC,SACjC,CACEviB,KAAMJ,EAAQU,QACduwB,MAAOjxB,EAAQixB,MACf/qB,IAAKlG,EAAQkG,OAPlB,iCAaX9N,OAAOG,iBAAiB,UAAWI,KAAKysD,qB,kDAG5C,SAAeQ,GAA2B,IAAD,OAChCjtD,KAAKgzC,YAILhzC,KAAK4sD,mBACFK,EACIt1B,cAAG33B,KAAKoY,QAAS,WACjB0qB,aAAY,kBAAM,EAAKoqB,gBAAe,KAAO,KAGjDpqB,aAAY,kBAAM,EAAKoqB,gBAAe,KAAQ,KAGlDltD,KAAK4sD,kBAAmB,M,4BAIhC,SAAuBK,GACnBxtD,OAAO2H,YACH,CACIylD,OAAQ,cACR9kD,QAAS,CACLV,QAAS,YACTuI,GAAIA,GACJo9C,aAAcC,EAAkB,GAAKjtD,KAAKm9B,KAC1CgwB,YAAaF,IAGrB,O,2BAIR,WACIxtD,OAAO2H,YAAY,CACfylD,OAAQ,cACR9kD,QAAS,CACLV,QAAS,gC,yBAKrB,SAAYU,EAAkBuwB,EAAe/qB,GACzC,IAAMlG,EAA8C,CAChDwlD,OAAQ,cACR9kD,QAASA,EACTuwB,MAAOA,EACP/qB,IAAKA,GAET9N,OAAO2H,YAAYC,EAAS,O,4BAGhC,SAAeU,GAAmB,IAAD,gBACX/H,KAAKm9B,MADM,IAC7B,2BAA6B,CAAC,IAAnBoH,EAAkB,QACnBl9B,EAA8C,CAChDwlD,OAAQ,cACR9kD,QAASA,EACTuwB,MAAOiM,EAAI30B,GACXrC,IAAKg3B,EAAIh3B,KAEb9N,OAAO2H,YAAYC,EAAS,MARH,iC,2BAYjC,SAAc2+B,GAA4C,IAAD,OAErD,OADAhmC,KAAK2sD,gBAAgBtnD,KAAK2gC,GACnB,kBAAM,EAAKwhB,QAAQxhB,EAAU,EAAK2mB,oB,uBAG7C,SAAU3mB,GAAgD,IAAD,OAErD,OADAhmC,KAAK0sD,mBAAmBrnD,KAAK2gC,GACtB,kBAAM,EAAKwhB,QAAQxhB,EAAU,EAAK0mB,uB,qBAG7C,SAAQ1mB,EAAoBonB,GACxB,IAAK,IAAIrqD,EAAIqqD,EAAUzrD,OAAS,EAAGoB,GAAK,IAAKA,EACzC,GAAIijC,IAAaonB,EAAUrqD,GAAI,CAC3BqqD,EAAU3F,OAAO1kD,EAAG,GACpB,S,oBAKZ,WACItD,OAAOI,oBAAoB,UAAWG,KAAKysD,qBAC3CzsD,KAAK0sD,mBAAqB,GAC1B1sD,KAAK2sD,gBAAkB,O,KCtKzBU,GAAsB,CACxB,gBAAiB,eACjB,4BAA6B,aAC7B,mBAAoB,kBAGXC,GAAb,WAII,aAAe,IAAD,gCAHd7gD,UAA6B,IAAI+/C,GAGnB,KAFGY,UAAsD,GA+BnE3tD,OAAOG,iBAAiB,WA5BP,SAAX24B,EAAY13B,GACd,GAAIA,EAAM2O,SAAW/P,QAIK,kCAAtBoB,EAAM4G,KAAKolD,QACwB,YAA/BhsD,EAAM4G,KAAKM,QAAQV,QAAuB,CAC1C,IAD0C,EACpCU,EAAUlH,EAAM4G,KAAKM,QADe,cAGnB,EAAKqlD,WAHc,IAG1C,2BAAuC,CAAC,IAAD,EAA5BpnB,EAA4B,QACnC,EAAKv5B,UAAU7L,SAIf,IAHA,IAAM2sD,EAA4D,GAC5DrL,EAAiB,UAAGn6C,EAAQm6C,yBAAX,QAAgC,GAEvD,MAAmCj2C,OAAO1L,KAAK2hD,GAA/C,eAAmE,CAA9D,IAAMsL,EAAoB,KAC3BD,EAAmBF,GAAeG,IAC9BtL,EAAkBsL,GAG1B,EAAK/gD,UAAY,IAAI+/C,GAAgBzkD,EAAQqQ,QAASm1C,GACtDvnB,EAAS,EAAKv5B,YAdwB,8BAiB1ChN,OAAOI,oBAAoB,UAAW04B,OA5B1D,qDAoCI,SAAkByN,GACdhmC,KAAKotD,UAAU/nD,KAAK2gC,GACpBA,EAAShmC,KAAKyM,eAtCtB,KCPMghD,GAAY,SACZC,GAAiB,cACjBC,GAAY,SAGGC,G,WAGjB,WAAY75C,GAAqC,yBAFhCA,sBAE+B,EAC5C/T,KAAK+T,iBAAmBA,E,wCAG5B,WACI,IAAMmD,EAAQsrC,aAAaC,QAAQgL,IAEnC,OAAc,OAAVv2C,EAZU,IAgBPrU,OAAOqU,I,IAGlB,SAAWsqB,GACPghB,aAAaE,QAAQ+K,GAAW5kD,OAAO24B,M,uBAG3C,WACI,MAAgD,SAAzCghB,aAAaC,QAAQiL,MAA8B,G,IAG9D,SAAgBzE,GACZzG,aAAaE,QAAQgL,GAAgB7kD,OAAOogD,M,kBAGhD,WACI,IAAKjpD,KAAK+T,iBAAiB6oC,uBACvB,OAAO,EAGX,IAAM1lC,EAAQsrC,aAAaC,QAAQkL,IAEnC,OAAc,OAAVz2C,EACO,EAGJrU,OAAOqU,I,IAGlB,SAAWvN,GACP64C,aAAaE,QAAQiL,GAAW9kD,OAAOc,Q,yBC/CzCkkD,G,oDAGF,aAAe,IAAD,8BACV,cAAM,wBAHVC,sBAEc,EAEV,EAAK11C,QAAQ,GAAG21C,OAAO,CACnBD,iBAAkB,yBAHZ,E,8BAHgBE,GA4BbC,G,WAIjB,WAAYC,GAAgB,yBAHXC,IAAM,IAAIN,GAGA,KAFnBO,YAEmB,EACvBpuD,KAAKouD,OAASF,E,uCAGlB,SAAUA,GACNluD,KAAKouD,OAASF,I,0DAGlB,WAAYG,GAAZ,eAAAjoD,EAAA,2DACQioD,GAAS,GADjB,yCAEe,IAFf,uBAK+BruD,KAAKmuD,IAAIL,iBAAiBQ,UAAUJ,MAAMG,GAAOE,UALhF,4CAKUznD,EALV,QAMWwnD,UANX,kBAOWxnD,GAPX,gD,gHAUA,WAAW6f,GAAX,yDAAAvgB,EAAA,2DACQpG,KAAKouD,QAAU,GADvB,wDAMQtkD,EAoBA6c,EApBA7c,KACAqT,EAmBAwJ,EAnBAxJ,UACAtb,EAkBA8kB,EAlBA9kB,MACAC,EAiBA6kB,EAjBA7kB,IACA2B,EAgBAkjB,EAhBAljB,cACAsG,EAeA4c,EAfA5c,YACA5E,EAcAwhB,EAdAxhB,MACA4F,EAaA4b,EAbA5b,KACA6E,EAYA+W,EAZA/W,GACAvH,EAWAse,EAXAte,UACAU,EAUA4d,EAVA5d,qBACAylD,EASA7nC,EATA6nC,WACAC,EAQA9nC,EARA8nC,iBACAh5B,EAOA9O,EAPA8O,UACAC,EAMA/O,EANA+O,UACA/kB,EAKAgW,EALAhW,iBACA+9C,EAIA/nC,EAJA+nC,eACArhD,EAGAsZ,EAHAtZ,MACAwH,EAEA8R,EAFA9R,MACA7J,EACA2b,EADA3b,IAEE2jD,EAAS,CACX7kD,OACAqT,YACAtb,QACAC,MACA2B,gBACAsG,cACA5E,QACA4F,OACA6E,KACAvH,YACAU,uBACAylD,aACAC,mBACA5f,cAAa,OAAEpZ,QAAF,IAAEA,OAAF,EAAEA,EAAW1qB,KAC1B6jD,cAAa,OAAEl5B,QAAF,IAAEA,OAAF,EAAEA,EAAW3qB,KAC1B4F,mBACA+9C,iBACArhD,QACAwH,QACA7J,OA/CR,SAiDwBhL,KAAKmuD,IAAIL,iBAAiBe,IAAIF,GAjDtD,cAiDU3lD,EAjDV,gBAkDUhJ,KAAK8uD,OAAO9lD,GAlDtB,gD,kHAqDA,WAAqB+lD,GAArB,uFACuB/uD,KAAKmuD,IAAIL,iBAAiBO,QADjD,mBAGeruD,KAAKouD,QAHpB,iCAI2BpuD,KAAKmuD,IAAIL,iBACvBkB,MAAM,SACNC,aAAaF,EAAY/uD,KAAKouD,QAC9Bc,cAPb,aAIc3uD,EAJd,QASiBoB,OAAS,GAT1B,kCAUkB3B,KAAKmuD,IAAIL,iBAAiBqB,WAAW5uD,GAVvD,iD,kHAeA,WAAaqP,GAAb,eAAAxJ,EAAA,sEACuBpG,KAAKmuD,IAAIL,iBAAiBkB,MAAM,MAAMlE,OAAOl7C,GAAIs/C,cADxE,cACU3uD,EADV,gBAEUP,KAAKmuD,IAAIL,iBAAiBqB,WAAW5uD,GAF/C,gD,8DCxEE6uD,GAAmBr1C,aAAgC,SAACkC,GAAD,MAAY,CACjEsL,QAAS,CACL/J,SAAU,EACVgR,WAAYvS,EAAMwS,YAAYC,OAAO,SAAU,CAC3CC,OAAQ1S,EAAMwS,YAAYE,OAAOC,MACjCC,SAAU5S,EAAMwS,YAAYI,SAASC,gBAEzCR,YAAa,GAEjB+gC,aAAc,gBAAGrgC,EAAH,EAAGA,YAAH,MAAsB,CAChCR,WAAYvS,EAAMwS,YAAYC,OAAO,SAAU,CAC3CC,OAAQ1S,EAAMwS,YAAYE,OAAOM,QACjCJ,SAAU5S,EAAMwS,YAAYI,SAASK,iBAEzCZ,YAAaU,QA6DrB,SAASsgC,GACL3oC,EACA7I,EACAyxC,EACAC,GAEA,GAAI7oC,EAAKtZ,MAAO,CAAC,IAAD,UACNxL,EAAK,UAAG8kB,EAAKtZ,MAAMxL,aAAd,QAAuB8kB,EAAK9kB,MACjCC,EAAG,UAAG6kB,EAAKtZ,MAAMvL,WAAd,QAAqB6kB,EAAK7kB,IAEnC,OAAO2O,EAAUg/C,WACb9oC,EAAKhW,iBACL9M,KAAKC,IAAI,EAAGjC,GAAK,UAAI8kB,EAAKtZ,MAAMkiD,oBAAf,QAA+B,IAChDztD,GAAG,UAAI6kB,EAAKtZ,MAAMmiD,kBAAf,QAA6B,GAH7B,UAIH7oC,EAAKtZ,MAAMd,oBAJR,QAIwB,EAC3Boa,EAAKtZ,MAAMb,OACXma,EAAKtZ,MAAMZ,WAInB,IAAMijD,EAAoB,WACtB,IAAI7tD,EACAC,EAUJ,OARIgc,GACAjc,EAAQic,EAActa,cACtB1B,EAAMgc,EAAcgF,cAEpBjhB,EAAQ8kB,EAAK9kB,MACbC,EAAM6kB,EAAK7kB,KAGR,CAACD,EAAOC,IAGnB,GAAI6kB,EAAK+O,WAAa/O,EAAK8O,UAAW,CAAC,IAAD,EAClC,EAAqBi6B,IAArB,mBAAO7tD,EAAP,KAAcC,EAAd,KACA,OAAO2O,EAAUk/C,SACZhpC,EAAK+O,WAAa/O,EAAK8O,UACxB5xB,KAAKC,IAAI,EAAGjC,EAAQ0tD,GACpBztD,EAAM0tD,EAHH,UAIH7oC,EAAK8nC,wBAJF,QAIsB,EACzB9nC,EAAK6nC,YAIb,GAAI7nC,EAAKioC,eAAiBjoC,EAAKkoB,cAAe,CAC1C,MAAqB6gB,IAArB,mBAAO7tD,EAAP,KAAcC,EAAd,KACA,OAAO2O,EAAUm/C,gBAAiBjpC,EAAKioC,eAAiBjoC,EAAKkoB,cAAiBhtC,EAAOC,IAM7F,SAAS+tD,GAAclpC,EAAuB3V,EAAkBC,GAC5D,OAAI0V,EAAK9R,MACE7B,EAAMy8C,WAAW9oC,EAAKhW,iBAAmBgW,EAAK9kB,MAAO8kB,EAAK9R,MAAMrI,OAAQma,EAAK9R,MAAMpI,WAG1Fka,EAAK8O,UACEziB,EAAM28C,SAAShpC,EAAK8O,UAApB,UAA+B9O,EAAK+nC,sBAApC,QAAsD/nC,EAAK9kB,MAAOmP,EAAUC,GAGnF0V,EAAKkoB,cACE77B,EAAM48C,gBAAgBjpC,EAAKkoB,cAA3B,UAA0CloB,EAAK+nC,sBAA/C,QAAiE/nC,EAAK9kB,YADjF,EAJqB,IAAD,EAII,EAO5B,SAASiuD,GAAiBnpC,GAAoC,IAAD,QACzD,GAAKA,EAAL,CAIA,IAAMnX,EAAM,oBAAGmX,EAAKhW,wBAAR,kBAA4BgW,EAAK+O,iBAAjC,aAA4B,EAAgB3qB,YAA5C,kBAAoD4b,EAAK8O,iBAAzD,aAAoD,EAAgB1qB,KAEhF,GAAKyE,EAIL,MAAM,GAAN,OAAUA,EAAV,aAAqBpH,EAAkBue,EAAK9kB,OAA5C,MA+BJ,SAASkuD,GAAT,GAAkE,IAAvCC,EAAsC,EAAtCA,aACjBv6B,EAAYu6B,EAAaxK,IAAI,SAC7BxtB,EAAUg4B,EAAaxK,IAAI,WAC3BnmB,EAAS2wB,EAAaxK,IAAI,UAEhC,OACI,eAAC,IAAD,CAAUyK,GAAI,gBAAkBxb,mBAAmBhf,GAAa,YAAcuC,EAAU,WAAaqH,IAuB7G,SAAS6wB,GAAT,GASsB,IARlBF,EAQiB,EARjBA,aACAj8C,EAOiB,EAPjBA,iBACA6qB,EAMiB,EANjBA,oBACAnyB,EAKiB,EALjBA,UACA+jC,EAIiB,EAJjBA,0BACAG,EAGiB,EAHjBA,oBACAF,EAEiB,EAFjBA,QACAM,EACiB,EADjBA,yBAEMtb,EAAYu6B,EAAaxK,IAAI,SAC7BxtB,EAAUg4B,EAAaxK,IAAI,WAC3BnmB,EAAyC,SAAhC2wB,EAAaxK,IAAI,UAEhC,OACI,eAACgD,GAAD,CACIz0C,iBAAkBA,EAClB6qB,oBAAqBA,EACrBnyB,UAAWA,EACXgpB,UAAWA,EACX4J,OAAQA,EACRrH,QAASA,EACTwY,0BAA2BA,EAC3BG,oBAAqBA,EACrBF,QAASA,EACTM,yBAA0BA,IAWtC,SAASof,GAAQ51C,GACb,IAAMC,EAAU40C,GAAiB70C,GAEjC,OACI,uBACIO,UAAWuW,aAAK7W,EAAQ+M,QAAT,eACV/M,EAAQ60C,aAAe90C,EAAMqV,aAFtC,SAKKrV,EAAMW,WAspCJk1C,OAjpCf,WACI,IAAMr8C,EAAmBg1B,mBAA0B,kBAAM,IAAIoc,KAAoB,IAC3EnV,EAAiBjH,mBAAwB,WAC3C,IAAI/a,EAEJ,IACIA,EACoD,KAAhDja,EAAiBkpC,oBAAoBvyC,YAC/BlI,EACA,IAAIqV,OAAO9D,EAAiBkpC,qBACxC,MAAOz2C,GACLwnB,OAAQxrB,EAGZ,YAAcA,IAAVwrB,EACO,IAAIxF,GAAe,CAAEwF,QAAOvW,YAAa1D,EAAiBopC,qCAG9D,IAAI30B,KACZ,CAACzU,EAAiBkpC,oBAAqBlpC,EAAiBopC,qCACrDve,EAAsBmK,mBACxB,kBAAM,IAAI6kB,GAAoB75C,KAC9B,CAACA,IAECkI,EAAQ8sB,mBACV,kBACIsnB,YAAY,CACRzxC,QAAS,CACL4W,QAAS,CACL86B,KAAM,WAEV77B,UAAW,CACP67B,KAAM,WAEVxoD,MAAO,CACHwoD,KAAMC,IAAIC,MAEd7oD,KAAMoM,EAAiBuoC,eAGnC,CAACvoC,EAAiBuoC,YAEhBp8B,EAAO6oB,mBAAc,kBAAM,IAAIj1B,GAAKC,KAAmB,CAACA,IACxDwtC,EAAWkP,cACjB,EAAuBC,cAAhBV,EAAP,oBAEMW,EAAsC,WAAtBpP,EAASqP,UAAuD,OAA9BZ,EAAaxK,IAAI,SACnEqL,EAAoB9nB,mBAAQ,kBAAM,IAAIukB,KAA2B,IACvE,EAAkCluD,mBAA0ByxD,EAAkBpkD,WAA9E,mBAAOA,EAAP,KAAkBqkD,EAAlB,KACA,EAA8C1xD,oBAAkB,GAAhE,mBAAO+wC,EAAP,KAAwB4gB,EAAxB,KACAt2C,qBAAU,kBAAMo2C,EAAkBG,kBAAkBF,KAAe,CAACD,IACpE,IAAMloB,EAAYI,mBACd,kBAAM,IAAIie,GAAa,IAAIlnD,EAAiBiU,EAAiBhU,YAAa0M,KAC1E,CAACsH,EAAiBhU,WAAY0M,IAE5BwjC,EAAgBpU,iBAA0B,MAC1CqU,EAAkBrU,iBAAqB,MAC7C,EAAgB38B,GAAeyxD,GAAxBx/C,EAAP,oBACM8/C,EAAchhB,EAAcrtB,QAAU,GAAM,GAC5CsuC,EAAgBjhB,EAAcrtB,QAAU,IAAM,IAC9CoM,EAAcnrB,KAAKC,IAAIotD,EAAe//C,EAAQ8/C,GAC9CE,EAAwBpoB,mBAC1B,kBAAM,IAAIklB,GAAsBl6C,EAAiB+oC,6BACjD,CAAC/oC,IAEL0G,qBAAU,WACN02C,EAAsBjD,MAAQn6C,EAAiB+oC,4BAChD,CAACqU,EAAuBp9C,EAAiB+oC,4BAC5C,MAA8C19C,mBAA4B,IAA1E,mBAAOgyD,EAAP,KAAwBC,EAAxB,KACMC,EAAqBz1B,iBAA0B,IACrDy1B,EAAmB1uC,QAAUwuC,EAC7B,MAA8ChyD,oBAAkB,GAAhE,mBAAOmyD,EAAP,KAAwBC,EAAxB,KACA,GAAsCpyD,mBAAkBw/B,EAAoBqqB,aAA5E,qBAAOA,GAAP,MAAoBwI,GAApB,MACA,GAAoDryD,oBAAkB,GAAtE,qBAAOgxC,GAAP,MAA2BshB,GAA3B,MACA,GAAsCtyD,oBAAkB,GAAxD,qBAAOixC,GAAP,MAAoBshB,GAApB,MACA,GAA0BvyD,qBAA1B,qBAAOwyD,GAAP,MAAcC,GAAd,MACA,GAAkCzyD,oBAAkB,GAApD,qBAAOsqD,GAAP,MAAkBC,GAAlB,MACA,GAA0CvqD,qBAA1C,qBAAOyqD,GAAP,MAAsBC,GAAtB,MACA,GAA4C1qD,qBAA5C,qBAAOmpC,GAAP,MAAuBupB,GAAvB,MACA,GAA4C1yD,qBAA5C,qBAAO4xC,GAAP,MAAuB+gB,GAAvB,MACA,GAA8B3yD,mBAAuB,CAAE0wB,cAAe,KAAtE,qBAAO8f,GAAP,MAAgBoiB,GAAhB,MACA,GAA8B5yD,oBAAkB,GAAhD,qBAAO8oB,GAAP,MAAgB+pC,GAAhB,MACA,GAAgC7yD,oBAAkB,GAAlD,qBAAOgoB,GAAP,MAAiB8qC,GAAjB,MACMC,GAAet2B,iBAAuB,MAC5C,GAAgCz8B,qBAAhC,qBAAOoR,GAAP,MAAiB4hD,GAAjB,MACA,GAA4ChzD,oBAAkB,GAA9D,qBAAOizD,GAAP,MAAuBC,GAAvB,MACA,GAAoDlzD,oBAAkB,GAAtE,qBAAOmzD,GAAP,MAA2BC,GAA3B,MACA,GAA4CpzD,qBAA5C,qBAAOqzD,GAAP,MAAuBC,GAAvB,MACMC,GAA8B5pB,mBAChC,kBAAM0pB,IApMd,SAA2B9rC,GACvB,GAAKA,EAIL,MAAO,CACHnjB,cAAemjB,EAAK9kB,MACpBihB,YAAa6D,EAAK7kB,IAClBJ,UAAWilB,EAAK5d,sBAAwB,CACpC,CAAElH,MAAO8kB,EAAK9kB,MAAOC,IAAK6kB,EAAK7kB,IAAKgI,KAAM6c,EAAK7c,KAAM3E,MAAOwhB,EAAKxhB,SA2L7CytD,CAAkBH,MAC1C,CAACA,KAECI,GAAsB9pB,mBACxB,kBACI0pB,IACAnD,GACImD,GACAE,GACA5+C,EAAiBsP,kBACjBtP,EAAiBuP,mBAEzB,CACImvC,GACAE,GACA5+C,EAAiBsP,kBACjBtP,EAAiBuP,kBAGnBwvC,GAAkB/pB,mBACpB,kBACI0pB,IACA5C,GAAc4C,GAAgB1+C,EAAiBunC,cAAevnC,EAAiBynC,kBACnF,CAACiX,GAAgB1+C,EAAiBunC,cAAevnC,EAAiBynC,iBAEtE,GAAsDp8C,oBAAkB,GAAxE,qBAAOmxC,GAAP,MAA4BwiB,GAA5B,MACA,GAAkE3zD,mBAAoC,CAClGiJ,UAAW,EACX8rC,QAAQ,IAFZ,qBAAO3D,GAAP,MAAkCwiB,GAAlC,MAIA,GAAoD5zD,oBAAkB,GAAtE,qBAAO6zD,GAAP,MAA2BC,GAA3B,MACA,GAAgE9zD,qBAAhE,qBAAO+zD,GAAP,MAAiCC,GAAjC,MACA,GAA8Ch0D,oBAAkB,GAAhE,qBAAOi0D,GAAP,MAAwBC,GAAxB,MACA,GAAgDl0D,oBAAkB,GAAlE,qBAAOu/B,GAAP,MAAyB40B,GAAzB,MACA,GAA0Bn0D,qBAA1B,qBAAOyV,GAAP,MAAc2+C,GAAd,MACA,GAAsBp0D,qBAAtB,qBAAOmlC,GAAP,MAAYkvB,GAAZ,MACA,GAA0Cr0D,mBAA0B,IAApE,qBAAOkxC,GAAP,MAAsBojB,GAAtB,MACMC,GAAe93B,iBAAyB,MACxC+3B,GAAyB/3B,kBAAgB,GAC/C+3B,GAAuBhxC,QAAU2tB,GACjC,IAAQzgB,GAAkB8f,GAAlB9f,cAEF+jC,GAAct4C,uBAAY,SAACxT,GAC7B+hD,GAAiB,SACjB+H,GAAS9pD,GACT4hD,IAAa,KACd,IAEGmK,GAA0Bv4C,uBAAY,SAACk3C,GACzC,GAAKA,GAAyD,IAAvCnB,EAAmB1uC,QAASjhB,OAAnD,CAIA,IAAMglB,EAAI,OAAG8rC,QAAH,IAAGA,IAAkBnB,EAAmB1uC,QAAQ0uC,EAAmB1uC,QAAQjhB,OAAS,GAC9F+wD,GAAkB/rC,GAClB2rC,IAAkB,GAClBE,IAAsB,GACtBe,IAAoB,GACpBR,IAAuB,MACxB,IAEGgB,GAAyCx4C,sBAAW,uCACtD,WACIw0B,EACAlB,EACAhS,EACAtwB,EACAzL,EACAiI,EACAV,GAPJ,eAAAjC,EAAA,0FAUWtF,GAVX,aAW8BiI,EAX9B,KAYmBwa,KAAK5gB,MAZxB,KAaYywC,eAbZ,KAccvE,EAdd,KAewBxmC,EAfxB,UAgByBwF,MAAMkiC,GAClBl+B,MAAK,SAAC2gB,GAAD,OAAOA,EAAEzsB,UACd8L,MAAK,SAACmiD,GAAD,OAAc,IAAIC,KAAK,CAACD,GAAWnlB,MAlBrD,yBAmB4BhS,EAnB5B,MAoB0BtwB,EApB1B,OAWQxD,qBAXR,KAYQV,UAZR,KAaQuH,GAbR,KAcQ7E,KAdR,KAeQ2jD,eAfR,KAgBQj5B,UAhBR,KAmBQoH,mBAnBR,KAoBQ4xB,iBApBR,OASU9nC,GATV,yBAsBImtC,GAAwBntC,GAtB5B,4CADsD,kEAyBtD,CAACmtC,KAGCI,GAA0B34C,sBAAW,uCACvC,WACIzR,EACA6K,EACAC,EACAC,EACAT,EACA5E,EACAxE,EACA8J,EACAC,EACAC,GAVJ,eAAA5O,EAAA,6DAYIosD,IAAsB,GAZ1B,kBAe6BtyC,EAAKi0C,OACtBrqD,EACA6K,EACAC,EACAC,EACAT,EACA5E,EACAxE,EACA8J,EACAC,EACAC,GAzBZ,OAeclO,EAfd,OA4BqB,QAATkO,IACa,YAATA,GACA80C,GAAiB,WACjB+H,GAAS,kBAAoB/qD,GAC7B6iD,IAAa,IACG,eAAT30C,IACP80C,GAAiB,WACjB+H,GAAS,iBAAmB/qD,GAC5B6iD,IAAa,IAGjB2I,IAAkB,GAIdsB,GAAuBhxC,UACvBowC,GAA6B,CAAE3qD,UAAWkb,KAAK5gB,MAAOwxC,QAAQ,IAC9D4e,IAAuB,KA7CvC,gDAiDQrvC,QAAQ5b,MAAR,MACI,gBAAalB,MACbitD,GAAY,KAAE9rD,SAEd8rD,GAAYhrD,OAAO,EAAD,KArD9B,yBAwDQ2pD,IAAsB,GACtBe,IAAoB,GAzD5B,4EADuC,wEA6DvC,CAACrzC,EAAM2zC,KAGL9+B,GAAaxZ,uBACf,SACIza,EACAiI,EACA2sB,EACAD,EACA2+B,EACA1F,EACAF,EACAC,EACAphD,EACAwH,EACA7J,EACA0jC,EACAC,EACA/+B,GACE,IAAD,EACG9O,GAAYiT,EAAiByoC,uBAC7Bv3B,UAAUC,UAAU8P,UAAUl0B,EAASgJ,MAG3C,IAAMuqD,EAAiB,2BAChBvzD,GADgB,IAEnBiI,qBAAsBA,EACtBV,UAAWkb,KAAK5gB,MAChBiN,GAAIA,GAAMwjC,eACVroC,KAAMyF,GACNG,iBAAgB,OAAEyjD,QAAF,IAAEA,OAAF,EAAEA,EAAcrpD,KAChC2qB,UAAWA,EACXD,UAAWA,EACXg5B,iBAAkBA,EAClBC,eAAgBA,EAChBF,WAAYA,EACZnhD,MAAOA,EACPwH,MAAOA,EACP7J,IAAKA,IA2BT,OAxBAqmD,GAAmB,SAACD,GAChB,GAAIziB,GAAoByiB,EAAgBzvD,OAAS,EAAG,CAChD,IAAMgX,EAAOy4C,EAAgBA,EAAgBzvD,OAAS,GAEtD,GACIb,EAASe,QAAU8W,EAAK9W,OACxBf,EAASgB,MAAQ6W,EAAK7W,KACtBhB,EAASgJ,OAAS6O,EAAK7O,OACX,OAAZsqD,QAAY,IAAZA,OAAA,EAAAA,EAAcrpD,QAAS4N,EAAKhI,iBAC9B,CACE,QAAuBnO,IAAnBksD,GAAgCA,IAAmB/1C,EAAK+1C,eAAgB,CACxE,IAAM4F,EAAkB,YAAOlD,GAE/B,OADAkD,EAAmBA,EAAmB3yD,OAAS,GAAK0yD,EAC7CC,EAGX,OAAOlD,GAKf,MAAM,GAAN,mBAAWA,GAAX,CAA4BiD,OAGhC,OAAQ3lB,QAAR,IAAQA,IAAkB/6B,EAAeq4B,MACrC,KAAKr4B,EAAeq4B,KAChB,MACJ,KAAKr4B,EAAew4B,eAChB2nB,GAAwBO,GACxB,MACJ,KAAK1gD,EAAexS,eAEhB4xD,IAAuB,GACvB,IAAIn+C,EAAY06C,GACZ+E,OACA7xD,EACAuR,EAAiBsP,kBACjBtP,EAAiBuP,iBAGjB1O,GAAab,EAAiBoP,YAC9BvO,EAAYA,EAAUwO,SAG1B8wC,GACIrpD,EAAY/J,EAAUiI,GACtB,GACA6L,EACAi7C,GACIwE,EACAtgD,EAAiBunC,cACjBvnC,EAAiBynC,gBAErB,GATmB,UAUnBsU,GAAiBuE,UAVE,QAUoB,GACvC,GACA,GACAtgD,EAAiBgB,KACjB,cAEJ,MACJ,QACI,MAAM,IAAInO,MAAM,6BAA+B8nC,GAGnD5tC,IACAgpD,GAAiB,WACjB+H,GACsB,KAAlB/wD,EAASgJ,KAAT,gBAAgC1B,EAAkBtH,EAASe,QAA3D,mBAAkFf,EAASgJ,KAA3F,MAEJ6/C,IAAa,IAGjBwH,EAAsBoD,KAAKF,KAE/B,CAAC7jD,GAAUuD,EAAkBo9C,EAAuB+C,GAAyBJ,KAGjFr5C,qBAAU,WACFk2C,GAIJ,sBAAC,sBAAAvqD,EAAA,kEACGirD,EADH,SAC4BF,EAAsBtjD,MAAMkG,EAAiB+oC,2BADzE,4EAAD,KAGD,CAAC6T,EAAeQ,EAAuBp9C,IAE1C,IAAMygD,GAAwBj5C,uBAAY,WACtCi2C,GAAmB,SAACD,GAAD,OAAsBA,KACzCR,GAAmB,KACpB,IACG0D,GAAyBl5C,uBAAY,kBAAMi2C,GAAmB,KAAQ,IACtEkD,GAAqBn5C,uBAAY,WACnC,IAAMjE,GAAYsnB,EAAoBqqB,YACtCrqB,EAAoBqqB,YAAc3xC,EAClCm6C,GAAen6C,GACfy5C,GAAmB,KACpB,CAACnyB,IACE4sB,GAAyBjwC,uBAAY,WACvCw1C,GAAmB,SAACvxB,GAAD,OAAiBA,OACrC,IACH/kB,qBAAU,WACF01B,EACKhlC,SAASwpD,mBACVxpD,SAAS2gB,gBAAgB4/B,oBAEtBvgD,SAASwpD,mBAChBxpD,SAASsgD,mBAEd,CAACtb,IACJ11B,qBAAU,WACN,IAAM8d,EAAW,WACRptB,SAASwpD,mBACV5D,GAAmB,IAI3B,OADA5lD,SAASvL,iBAAiB,mBAAoB24B,GACvC,kBAAMptB,SAAStL,oBAAoB,mBAAoB04B,MAC/D,IACH,IAAMq8B,GAA2Br5C,uBAAY,WACzCm2C,IAAsB,SAAC7hC,GAAD,OAAaA,OACpC,IACGglC,GAAoBt5C,uBAAY,WAClCo2C,IAAe,SAACthB,GAAD,OAAkBA,OAClC,IACGykB,GAAqBv5C,uBAAY,WACnCg4C,IAAoB,GACpBL,IAAsB,KACvB,IACGjH,GAAoB1wC,uBAAY,kBAAMouC,IAAa,KAAQ,IAC3DoL,GAA0Bx5C,uBAAY,kBAAM+3C,IAAmB,KAAQ,IACvE0B,GAAsBz5C,uBACxB,SAACgqC,GAAoC,IAAD,MAChCxxC,EAAiBi7B,SAAWuW,EAC5B2N,IAAsB,GACtBE,QAA4B5wD,GAI5B+wD,GAAoBlB,IAEpB,UAAAniB,EAAgBttB,eAAhB,SAAyB6wB,iBAAiB1/B,EAAiB0/B,kBAC3D,UAAAvD,EAAgBttB,eAAhB,SAAyB8wB,aAAa3/B,EAAiB2/B,cACvD,UAAAxD,EAAgBttB,eAAhB,SAAyB+wB,aAAa5/B,EAAiB4/B,gBAE3D,CAAC5/B,EAAkBs+C,KAGjB4C,GAA8B15C,uBAChC,SAACoL,GACG,IADuB,EACjB2tC,EAAqB,GADJ,cAGFlD,GAHE,IAGvB,2BAAsC,CAAC,IAA9BtwD,EAA6B,QAC9B6lB,EAAK/W,KAAO9O,EAAS8O,IACrB0kD,EAAmBjvD,KAAKvE,IALT,8BASvBuwD,EAAmBiD,GACnBnD,EAAsB1L,OAAO9+B,EAAK/W,MAEtC,CAACwhD,EAAiBD,IAGhBzsB,GAAoBnpB,uBACtB,SAACu0B,GACOA,IAAiBF,GAAQE,cAI7BkiB,IAAW,SAACkD,GAGR,OAFAjqD,IAAIW,gBAAgBkkC,GAEb,CACHhgB,cAAeolC,EAASplC,cACxB4F,eAAWlzB,EACXstC,kBAActtC,EACdizB,UAAWy/B,EAASz/B,UACpBsa,aAAcmlB,EAASnlB,mBAInC,CAACH,KAGC/K,GAAoBtpB,uBACtB,SAACw0B,GACOA,IAAiBH,GAAQG,eAI7BiiB,IAAW,SAACkD,GAGR,OAFAjqD,IAAIW,gBAAgBmkC,GAEb,CACHjgB,cAAeolC,EAASplC,cACxB4F,UAAWw/B,EAASx/B,UACpBoa,aAAcolB,EAASplB,aACvBra,eAAWjzB,EACXutC,kBAAcvtC,MAGtBuuD,GAAmB,MAEvB,CAACnhB,KAGC1a,GAAkB3Z,sBAAW,uCAC/B,WAAOoL,GAAP,eAAAvgB,EAAA,+EAE2BkpD,GACf3oC,OACAnkB,EACAuR,EAAiBsP,kBACjBtP,EAAiBuP,iBAN7B,OAEc6xC,EAFd,OASYphD,EAAiBoP,UACjBgyC,EAAM/xC,QAAQtY,WAEdqqD,EAAMrqD,WAZlB,gDAeQ4Y,QAAQ5b,MAAR,MACI,gBAAalB,MACbitD,GAAY,KAAE9rD,SAEd8rD,GAAYhrD,OAAO,EAAD,KAnB9B,yDAD+B,sDAwB/B,CAACgrD,GAAa9/C,IAGZohB,GAAsB5Z,sBAAW,uCACnC,WAAOoL,GAAP,SAAAvgB,EAAA,+EAEeypD,GACHlpC,EACA5S,EAAiBunC,cACjBvnC,EAAiBynC,gBAL7B,cAMY1wC,WANZ,gDAQQ4Y,QAAQ5b,MAAR,MACI,gBAAalB,MACbitD,GAAY,KAAE9rD,SAEd8rD,GAAYhrD,OAAO,EAAD,KAZ9B,yDADmC,sDAiBnC,CAACgrD,GAAa9/C,IAGZqhD,GAAwC75C,uBAC1C,SAACxQ,EAAcmrB,GACX,IADwC,EAClCm/B,EAAgC,GADE,cAGrBn/B,GAHqB,yBAG7BvP,EAH6B,aAMhCnkB,IADA6yD,EAAa9kC,MAAK,SAACxtB,GAAD,OAAOA,EAAElB,QAAU8kB,EAAK9kB,OAASkB,EAAEjB,MAAQ6kB,EAAK7kB,KAAOiB,EAAE+G,OAAS6c,EAAK7c,SAGzFurD,EAAahwD,KAAKshB,IAL1B,2BAA2B,IAHa,8BAYxC7b,EACI,IAAItD,KAAK,CAACwoC,EAAe5hB,eAAeinC,IAAgB,CAAE1tD,KAAM,eAD5D,UAEDoD,EAFC,2BAEqB,IAAIwY,MAAO+xC,cAFhC,WAKZ,CAACtlB,IAGCulB,GAA8Bh6C,uBAChC,SAACoL,GACQmJ,GAAcS,MAAK,SAACxH,GAAD,OAAOA,EAAEhe,OAAS4b,EAAKhW,oBAK/CmhD,GAAkB,CACdhoD,KAAM6c,EAAK7c,KACXjI,MAAO8kB,EAAK9kB,MACZC,IAAK6kB,EAAK7kB,IACV2B,cAAekjB,EAAKljB,cACpBsG,YAAa4c,EAAK5c,YAClB5E,MAAOwhB,EAAKxhB,QAVZ0uD,GAAY,iBAAmBltC,EAAKhW,iBAAmB,mBAa/D,CAACmf,GAAe+jC,KAGd2B,GAAaj6C,uBAAY,SAACoL,GAC5B+rC,GAAkB/rC,GAClB2rC,IAAkB,GAClBE,IAAsB,GACtBe,IAAoB,KACrB,IAEGkC,GAAyBl6C,uBAAY,WACvC+2C,IAAkB,GAClBE,IAAsB,GACtBe,IAAoB,GAEhBhjB,KACAyiB,GAA6B,CAAE3qD,UAAWkb,KAAK5gB,MAAOwxC,QAAQ,IAC9D4e,IAAuB,MAE5B,CAACxiB,KAEEmlB,GAAyBn6C,uBAAY,WACvC,GAAKk3C,GAIL,GAAK3iC,GAAcS,MAAK,SAACxH,GAAD,OAAOA,EAAEhe,OAAS0nD,GAAe9hD,oBAAzD,CAKA,IAAM7P,EAAW,CACbgJ,KAAM2oD,GAAe3oD,KACrBjI,MAAO4wD,GAAe5wD,MACtBC,IAAK2wD,GAAe3wD,IACpB2B,cAAegvD,GAAehvD,cAC9BsG,YAAa0oD,GAAe1oD,YAC5B5E,MAAOstD,GAAettD,OAE1B4sD,GAAkBjxD,GAClBgxD,GAAkBhxD,GAElB20D,UAfI5B,GAAY,iBAAmBpB,GAAe9hD,iBAAmB,mBAgBtE,CAAC8hD,GAAgB3iC,GAAe2lC,GAAwB5B,KAErDzvC,GAAkB7I,uBAAY,SAAC1G,GACjC2+C,GAAS3+C,GACTy+C,IAAmB,KACpB,IAEH74C,qBAAU,WA6BN,OAAOhO,EAAUkpD,eA5BjB,SAAgBx4B,GACZ,GAAIA,EAAKx7B,SAAW2uC,GAAc3uC,OAC9B+xD,GAAiBv2B,OACd,CAGH,IAFA,IAAI8M,GAAS,EAEJlnC,EAAI,EAAGA,EAAIutC,GAAc3uC,SAAUoB,EAAG,CAC3C,IAAM6yD,EAAKtlB,GAAcvtC,GACnB8yD,EAAK14B,EAAKp6B,GAChB,GAAI6yD,EAAGhmD,KAAOimD,EAAGjmD,IAAMgmD,EAAG74C,QAAU84C,EAAG94C,OAAS64C,EAAGroD,MAAQsoD,EAAGtoD,IAAK,CAC/D08B,GAAS,EACT,OAIJA,GACAypB,GAAiBv2B,GAIAoH,IAA2E,IAApEpH,EAAKj4B,QAAO,SAACkH,GAAD,OAAOA,EAAEwD,KAAO20B,GAAI30B,IAAMxD,EAAEmB,MAAQg3B,GAAIh3B,OAAK5L,SAGrF8xD,QAAOjxD,GACPqxD,GAAY,4BAA8BtvB,GAAK30B,GAAK,IAAM20B,GAAKxnB,aAKxE,CAACuzB,GAAe/L,GAAK93B,EAAWonD,KAEnC,IAAMvvB,GAAoB/oB,uBAAY,SAACgpB,GAAD,OAAwBkvB,GAAOlvB,KAAM,IAErEuxB,GAAcv6C,uBAChB,SAACqN,GACG,IACI,MA34BhB,SAAwBA,GAKpB,IAJA,IAAIkH,EAAgB,GAChB4F,OAAYlzB,EACZizB,OAAYjzB,EAEPO,EAAI,EAAGA,EAAI6lB,EAAMjnB,SAAUoB,EAAG,CACnC,IAAMgmB,EAAIH,EAAM7lB,GACVgzD,EAAsBhtC,EAAEhe,KAAK6F,YAAY,KAE/C,IAA6B,IAAzBmlD,EACA,MAAM,IAAInvD,MAAM,oCAAsCmiB,EAAEhe,MAG5D,IAAM0B,EAAYsc,EAAEhe,KAAKyD,UAAUunD,EAAsB,EAAGhtC,EAAEhe,KAAKpJ,QACnE,OAAQ8K,GACJ,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,QACL,IAAK,MACL,IAAK,QACL,IAAK,OACL,IAAK,QACDqjB,EAAczqB,KAAK0jB,GACnB,MACJ,IAAK,MACL,IAAK,MACL,IAAK,MACD,GAAI0M,EACA,MAAM,IAAI7uB,MAAM,8CAEpB6uB,EAAY1M,EACZ,MACJ,IAAK,MACL,IAAK,MACL,IAAK,MACL,IAAK,OACL,IAAK,MACL,IAAK,MACL,IAAK,OACD,GAAI2M,EACA,MAAM,IAAI9uB,MAAM,8CAEpB8uB,EAAY3M,EACZ,MACJ,QACI,MAAM,IAAIniB,MAAM,yBAA2B6F,IAIvD,GAAIgpB,GAAaC,EACb,MAAM,IAAI9uB,MAAM,2DAGpB,MAAO,CAAEkpB,cAAeA,EAAe4F,UAAWA,EAAWD,UAAWA,GAq1BdugC,CAAeptC,GAAvDkH,EAAN,EAAMA,cAAe4F,EAArB,EAAqBA,UAAWD,EAAhC,EAAgCA,UAoChC,GAlCAu8B,IAAW,SAACkD,GACRjD,IAAW,GAEX,IAAIliB,OAAevtC,EACfstC,OAAettC,EA2BnB,OAzBIizB,GAAaC,IAxvBrC,SAAoBka,GACZA,EAAQE,cACR7kC,IAAIW,gBAAgBgkC,EAAQE,cAG5BF,EAAQG,cACR9kC,IAAIW,gBAAgBgkC,EAAQG,cAmvBZkmB,CAAWf,GAEPz/B,EACAsa,EAAe9kC,IAAIC,gBAAgBuqB,GAC5BC,IACPoa,EAAe7kC,IAAIC,gBAAgBwqB,IAGvC+9B,QAAOjxD,KAEPizB,EAAYy/B,EAASz/B,UACrBsa,EAAemlB,EAASnlB,aACxBra,EAAYw/B,EAASx/B,UACrBoa,EAAeolB,EAASplB,cAGZ,CACZhgB,cAAwC,IAAzBA,EAAcnuB,OAAeuzD,EAASplC,cAAgBA,EACrE4F,UAAWA,EACXoa,aAAcA,EACdra,UAAWA,EACXsa,aAAcA,MAMlBjgB,EAAcnuB,OAAS,EAAG,CAC1B,IAAMgP,EAAmBmf,EAAc,GAAG/kB,KAC1CqnD,GAAYzhD,EAAiBnC,UAAU,EAAGmC,EAAiBC,YAAY,QAE7E,MAAOpK,GACLkd,QAAQ5b,MAAMtB,GACVA,aAAaI,MACbitD,GAAYrtD,EAAEuB,SAEd8rD,GAAYhrD,OAAOrC,OAI/B,CAACqtD,KAGCqC,GAAkB36C,sBAAW,uCAC/B,WAAO2a,GAAP,6BAAA9vB,EAAA,yDACyB,IAAjB8vB,EAAMv0B,OADd,uBAEQkyD,GAAY,iDAFpB,8BAMUsC,EAAkBjgC,EAAM,GAAGkgC,qBAERD,EAAgBE,YAR7C,uBASQxC,GAAY,4BATpB,iCAaUyC,EAA2BH,EAbrC,mBAgB8B,IAAIlwD,SAA2B,SAACC,EAASC,GAAV,OACjDmwD,EAAyBC,eAAeC,YAAYtwD,EAASC,MAjBzE,aAgBcswD,EAhBd,QAoBoBlmC,MAAK,SAAC/pB,GAAD,OAAOA,EAAE6vD,eApBlC,wBAqBYxC,GAAY,+CArBxB,2BAyBc6C,EAAeD,EAAQ9rD,KACzB,SAACnE,GAAD,OAAO,IAAIP,SAAc,SAACC,EAASC,GAAV,OAAsBK,EAA0BuH,KAAK7H,EAASC,SAErFyiB,EAAgB,GA5B9B,cA8BwB8tC,GA9BxB,kEA8BmB3tC,EA9BnB,aA+BYH,EA/BZ,UA+B6BG,EA/B7B,yBA+BkB1jB,KA/BlB,iKAkCQywD,GAAYltC,GAlCpB,kDAoCQlF,QAAQ5b,MAAR,MACI,gBAAalB,MACbitD,GAAY,KAAE9rD,SAEd8rD,GAAYhrD,OAAO,EAAD,KAxC9B,wEAD+B,sDA6C/B,CAACgrD,GAAaiC,KAGlBr7C,qBAAU,WACN,IAAIk2C,EAAJ,CA8EA,IAAMgG,EAAclqD,EAAUgsB,WA/ElB,8CAiFZ,OADAhsB,EAAUmqD,gBAAe,GAClBD,EAjFK,4CAMZ,WAAyB5uD,GAAzB,6BAAA3B,EAAA,yDACiC,SAAzB2B,EAAQN,KAAKJ,SAA+C,WAAzBU,EAAQN,KAAKJ,QADxD,oBAU4B,KARd81B,EAAO1wB,EAAU0wB,KAAKj4B,QAAO,SAACkH,GAChC,OAAIA,EAAEwD,KAAO7H,EAAQuwB,SAIbvwB,EAAQwF,KAAOnB,EAAEmB,MAAQxF,EAAQwF,SAGpC5L,OAVjB,uBAWgBoG,EAAQwF,IACRmW,QAAQ5b,MACJ,mDACIC,EAAQuwB,MACR,aACAvwB,EAAQwF,IACR,kBAGRmW,QAAQ5b,MACJ,mDAAqDC,EAAQuwB,MAAQ,kBArBzF,6BA4BciM,EAAMpH,EAAK,GAEbtU,GAAU,EAEe,SAAzB9gB,EAAQN,KAAKJ,QAhCzB,wBAiCkBwvD,EAAc9uD,EAAQN,KAjCxC,KAmCoBwsD,KAnCpB,UAoCkCpmD,MAAM,0BAA4BgpD,EAAYn1D,UAAU8K,QApC1F,gCAoCmGzG,OApCnG,qCAqCoB8wD,EAAYn1D,UAAUqJ,KArC1C,yBAkCY+kB,EAlCZ,kCAwC4C,WAAzB/nB,EAAQN,KAAKJ,QAxChC,wBAyCkBwvD,EAAc9uD,EAAQN,KAzCxC,UA0CkCxB,QAAQ6iB,IAC1B+tC,EAAYn1D,UAAUiJ,IAAtB,uCACI,WAAO3H,GAAP,SAAAoD,EAAA,kEACQ6tD,KADR,SAC2BpmD,MAAM,0BAA4B7K,EAAEwJ,QAD/D,8BACwEzG,OADxE,2CACiF/C,EAAE+H,KADnF,kFADJ,wDA3ChB,QA0CY+kB,EA1CZ,OAgDYjH,EAAO,UAAGguC,EAAYhuC,eAAf,SAhDnB,+BAkDYnF,QAAQ5b,MAAM,mBAAqBC,EAAQN,KAAKJ,SAlD5D,2BAsDcsJ,EAAmBmf,EAAc,GAAG/kB,KAC1CqnD,GAAYzhD,EAAiBnC,UAAU,EAAGmC,EAAiBC,YAAY,OACvEohD,GAAW,CACPliC,cAAeA,EACf+f,qBAAsBhnB,EACtB6M,eAAWlzB,EACXstC,kBAActtC,EACdizB,eAAWjzB,EACXutC,kBAAcvtC,IAElBixD,GAAOlvB,GAhEf,wBAiEwC,4BAAzBx8B,EAAQN,KAAKJ,SACpB6rD,IAAsB,GACtBE,GAA4B,uBACI,4BAAzBrrD,EAAQN,KAAKJ,SACpB6rD,IAAsB,GArE9B,4CANY,wBAERzmD,EAAUmqD,gBAAe,KAgF9B,CAACnqD,EAAWkkD,IAEf,IAAMmG,GAAoCv7C,uBAAY,SAACw7C,EAAuBjhB,GAC1E,OAAQA,GACJ,KAAKjiC,GAASgqB,UACVg0B,GAAS,kBACT,MACJ,KAAKh+C,GAAS+pB,UACVi0B,GAAS,0BACT,MACJ,KAAKh+C,GAAS8pB,OACNo5B,IAAgBljD,GAASgqB,UACzBg0B,GAAS,mBACFkF,IAAgBljD,GAAS+pB,WAChCi0B,GAAS,2BAKrB/H,GAAiB,QACjBH,IAAa,KACd,IAEGqN,GAAaz7C,uBACf,SAAC/U,GACO6rD,KAIJ7rD,EAAEqd,iBAEE8sC,EACAkD,GAAY,wFAIhB3B,IAAY,GACZC,GAAavvC,QAAU,KAYnBpc,EAAEywD,aAAa/gC,OAAS1vB,EAAEywD,aAAa/gC,MAAMv0B,OAAS,GAV1D,SAAwBu0B,GACpB,IAAK,IAAInzB,EAAI,EAAGA,EAAImzB,EAAMv0B,SAAUoB,EAAG,CAAC,IAAD,EACnC,GAAI,UAACmzB,EAAMnzB,GAAGqzD,0BAAV,QAAC,EAA6BC,YAC9B,OAAO,EAIf,OAAO,EAGoDa,CAAe1wD,EAAEywD,aAAa/gC,OACzFggC,GAAgB1vD,EAAEywD,aAAa/gC,OACxB1vB,EAAEywD,aAAaruC,OAASpiB,EAAEywD,aAAaruC,MAAMjnB,OAAS,GAC7Dm0D,GAAYtvD,EAAEywD,aAAaruC,WAGnC,CAAC+nC,EAAekD,GAAaiC,GAAaI,GAAiB7D,KAGzD8E,GAAwB57C,uBAAY,WAAO,IAAD,EACtCqN,EAAK,UAAG+qC,GAAa/wC,eAAhB,aAAG,EAAsBgG,MAEhCA,GAASA,EAAMjnB,OAAS,GACxBm0D,GAAYltC,KAEjB,CAACktC,KAEEsB,GAAqB77C,uBAAY,kCAAMo4C,GAAa/wC,eAAnB,aAAM,EAAsBjX,UAAS,IAEtEilB,GAAmCrV,sBAAW,sBAAC,4BAAAnV,EAAA,8DACnB5D,IAA1BotC,GAAQ9f,cADqC,oDAOd,KAF7BunC,EAAsBznB,GAAQ9f,cAAc5qB,QAAO,SAAC6jB,GAAD,OAAQA,EAAEhe,KAAK0Q,SAAS,YAEzD9Z,OAPyB,6DAWjDmJ,EAXiD,KAYzCtD,KAZyC,SAY7BwoC,EAAesnB,WAAWD,GAZG,oCAYoB,CAC7D1vD,KAAM,cAbmC,wCAe1C6I,GAf0C,wEAiBlD,CAACA,GAAUo/B,GAAQ9f,cAAekgB,IAE/BunB,GAAiBh8C,uBACnB,SAAC/U,GACO6rD,IAIJ7rD,EAAEqd,mBAEN,CAACwuC,KAGCmF,GAAkBj8C,uBACpB,SAAC/U,GACO6rD,KAIJ7rD,EAAEqd,iBACFrd,EAAEsd,kBAEG6sC,IACDwB,GAAavvC,QAAUpc,EAAEG,OACzBurD,IAAY,OAGpB,CAACvB,EAAe0B,KAGdoF,GAAkBl8C,uBACpB,SAAC/U,GACGA,EAAEwyC,YAAYn1B,iBACdrd,EAAEwyC,YAAYl1B,kBAET6sC,GAAiBwB,GAAavvC,UAAYpc,EAAEG,QAC7CurD,IAAY,KAGpB,CAACvB,IAGC+G,GAAsBn8C,uBAAY,kBAAM02C,IAAW,KAAQ,IAoBjE,GAlBAx3C,qBAAU,WAEN,GAAa,aADFu1C,EAAaxK,IAAI,UAExB0N,IAAsB,GAElB3R,EAASoW,MAAQpW,EAASoW,KAAKC,WAAW,MAAM,CAChD,IAAMhoD,EAAK2xC,EAASoW,KAAKnpD,UAAU,EAAG+yC,EAASoW,KAAKh2D,QACpDyxD,GAA4BxjD,MAGrC,CAACogD,EAAczO,IAElB9mC,qBAAU,WACoC,IAAD,EAArCivC,IAAakI,IAAS/H,KACtB,UAAA3Z,EAAgBttB,eAAhB,SAAyBgvC,MAAMA,GAAO/H,OAE3C,CAAC+H,GAAO/H,GAAeH,KAEA,MAAtBnI,EAASqP,UAAoBZ,EAAaxK,IAAI,SAC9C,OAAO,eAACuK,GAAD,CAAiBC,aAAcA,IAG1C,IAAM6H,GACD3vC,KAAY+nB,EAAcrtB,SACO,IAAjCgtB,GAAQ9f,cAAcnuB,SAAiBiuC,GAAQla,YAAcka,GAAQna,UACpEpO,QAAqC7kB,IAAtBotC,GAAQna,YAA6BwzB,KAAgB5Y,IAAgBF,GACpF2nB,GAA2BvG,IAAoBphB,EAErD,OACI,gBAAC4nB,EAAA,EAAD,CAAe97C,MAAOA,EAAtB,UACI,eAAC+7C,GAAA,EAAD,IACA,uBACIC,OAAQjB,GACRkB,WAAYX,GACZY,YAAaX,GACbY,YAAaX,GAJjB,UAMI,eAAC,GAAD,CAAO/8C,KAAMgvC,GAAW9uC,QAASqxC,GAAmBpxC,iBAAkB,IAAMI,SAAU4uC,GAAtF,SACK+H,KAEL,gBAAC,IAAD,WACI,eAAC,IAAD,CACItlC,KAAK,SACL5J,QACI,uCACI,eAACwtC,GAAD,CACIF,aAAcA,EACdj8C,iBAAkBA,EAClB6qB,oBAAqBA,EACrBnyB,UAAWA,EACX+jC,0BAA2BA,GAC3BG,oBAAqBojB,GACrBtjB,QAASojB,GACT9iB,yBAA0B+lB,KAE9B,eAACz3C,GAAD,CACI3E,KAAM23C,GACN/yC,SAAUizC,GACV39C,UAAWi+C,GACXh+C,MAAOi+C,GACPtjD,OAAQsgD,GAAiB2C,IACzBznD,IAAG,OAAEynD,SAAF,IAAEA,QAAF,EAAEA,GAAgBznD,IACrB8S,cAAe60C,GACf1yC,aAAclM,EAAiByB,iBAC/B0K,KAAMA,EACNnM,iBAAkBA,EAClB2L,SAAU+1C,GACVh2C,SAAUi2C,GACVl2C,UAAW00C,GACXv0C,YAAayE,KAEjB,eAACjI,GAAD,CAAazB,KAAM24C,GAAiBx+C,MAAOA,GAAO+F,QAASm6C,UAIvE,eAAC,IAAD,CACIzoC,KAAK,IACL5J,QACI,iCACI,eAACiT,GAAD,CACIO,MAAOk7B,EACP12C,KAAMo9C,GACN9oC,YAAaA,EACbpU,QAAS65C,GACT3/B,SAAUmgC,GACVrgC,YAAaM,GACbL,gBAAiBM,GACjBsB,uBAAwB2+B,GACxBzgC,SAAU4gC,GACV3+B,OAAQ4+B,KAEZ,eAACn2C,GAAD,CACI3E,KAAM23C,GACN/yC,SAAUizC,GACV39C,UAAWi+C,GACXh+C,MAAOi+C,GACPtjD,OAAQsgD,GAAiB2C,IACzBznD,IAAG,OAAEynD,SAAF,IAAEA,QAAF,EAAEA,GAAgBznD,IACrB8S,cAAe60C,GACf1yC,aAAclM,EAAiByB,iBAC/B0K,KAAMA,EACNnM,iBAAkBA,EAClB2L,SAAU+1C,GACVh2C,SAAUi2C,GACVl2C,UAAW00C,GACXv0C,YAAayE,GACbxE,eAAgBk1C,KAEpB,eAAC34C,GAAD,CAAazB,KAAM24C,GAAiBx+C,MAAOA,GAAO+F,QAASm6C,KAC3D,eAACrb,GAAD,CACIx5B,KAAMA,EACNzT,UAAWA,EACXiO,KAAMu4C,GACNr4C,QAASo6C,GACThmB,SAAUj7B,EAAiBi7B,SAC3B2K,WAAYwZ,KAEhB,eAACxjC,GAAD,CACI5S,MAAOvM,IAAY,YACnBwe,YAAaA,EACbY,WAAYkoC,GACZjoC,OAAQxI,GACRyI,cAAe8f,GAAQ9f,cACvBC,kBAAmBykC,GACnBvkC,6BAA8BW,GAC9BhR,eAAgBk1C,GAChB9kC,eAAgBonC,KAEpB,wBACInxC,IAAK0tC,GACL53C,SAAUo7C,GACVxvD,KAAK,OACL0wD,OAAO,0EACPC,UAAQ,EACRzoC,QAAM,IAEV,gBAACsgC,GAAD,CAASnhC,YAAaA,EAAaY,WAAYkoC,GAA/C,UACI,uBAAKvsD,MAAO,CAAE4F,MAAO,OAAQE,OAAQ,OAAQ6I,SAAU,YAAvD,UACK29C,IACG,eAACzgC,GAAD,CACIC,uBAn2CjB,SAo2CiBC,aAn2C3B,4DAo2C2B7qB,UAAWA,EACXyb,QAASA,GACTd,SAAUA,GACVC,aAAcA,GACd2I,eAAgBonC,KAGxB,eAACnvC,GAAD,CACIb,SAAUA,GACVC,aAAcA,GACda,QAASA,QAGjB,eAACynB,GAAD,CACIK,eAAgBA,EAChBj8B,iBAAkBA,EAClB6qB,oBAAqBA,EACrB3+B,OAAQ80B,GACR0b,QAASojB,GACTt1B,cAAemG,GACflG,cAAeqG,GACf6L,SAAUgnB,GACVr6B,cAAeiH,GACfqM,oBAAqBmjB,GACrBljB,eAAgB8jB,GAChBj1B,mBAAoB+rB,GACpB3a,qBAAsB+jB,GACtB9jB,cAAe+jB,GACf9jB,yBAA0B+lB,GAC1BvyB,IAAKA,GACL+L,cAAeA,GACfV,QAASA,GACTrH,eAAgBA,GAChByI,eAAgBA,GAChBf,cAAeA,EACfC,gBAAiBA,EACjBzjC,UAAWA,EACXmjB,WAAYkoC,GACZzwC,aAAcA,GACd8oB,gBAAiBA,EACjBC,mBAAoBA,IAAsBD,EAC1CE,YAAaA,GACb1R,iBAAkBA,GAClB4R,oBAAqBA,GACrBC,0BAA2BA,GAC3B7H,UAAWA,sBCr7CpC4vB,GAZS,SAACC,GACjBA,GAAeA,aAAuBC,UACtC,8BAAqB5mD,MAAK,YAAkD,IAA/C6mD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACzDJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDpBO,qBAAW5tD,SAAS6tD,cAAc,UAAWC,OACzC,eAAC,IAAD,CAAeC,SAAU1kB,aAAzB,SACI,eAAC,GAAD,OAOR+jB,O","file":"static/js/main.e8d4ff8d.chunk.js","sourcesContent":["import { useLayoutEffect, useState } from 'react';\n\n// https://stackoverflow.com/questions/19014250/rerender-view-on-browser-resize-with-react\nexport function useWindowSize(enabled: boolean) {\n    const [size, setSize] = useState([0, 0]);\n\n    useLayoutEffect(() => {\n        function updateSize() {\n            if (enabled) {\n                setSize([window.innerWidth, window.innerHeight]);\n            }\n        }\n\n        window.addEventListener('resize', updateSize);\n        updateSize();\n\n        return () => window.removeEventListener('resize', updateSize);\n    }, [enabled]);\n\n    return size;\n}\n","import { SubtitleModel } from './Model';\nimport hotkeys from 'hotkeys-js';\nimport { KeyBindSet } from './Settings';\n\nexport interface KeyBinder {\n    bindCopy<T extends SubtitleModel = SubtitleModel>(\n        onCopy: (event: KeyboardEvent, subtitle: T) => void,\n        disabledGetter: () => boolean,\n        subtitleGetter: () => T | undefined,\n        useCapture?: boolean\n    ): () => void;\n    bindAnkiExport(\n        onAnkiExport: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean\n    ): () => void;\n    bindUpdateLastCard(\n        onUpdateLastCard: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean\n    ): () => void;\n    bindSeekToSubtitle(\n        onSeekToSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean\n    ): () => void;\n    bindSeekToBeginningOfCurrentSubtitle(\n        onSeekToBeginningOfCurrentSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean\n    ): () => void;\n    bindSeekBackwardOrForward(\n        onSeekBackwardOrForward: (event: KeyboardEvent, forward: boolean) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean\n    ): () => void;\n    bindOffsetToSubtitle(\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean\n    ): () => void;\n    bindAdjustOffset(\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\n        disabledGetter: () => boolean,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean\n    ): () => void;\n    bindResetOffet(\n        onResetOffset: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean\n    ): () => void;\n    bindAdjustPlaybackRate(\n        onAdjustPlaybackRate: (event: KeyboardEvent, increase: boolean) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean\n    ): () => void;\n    bindToggleSubtitles(\n        onToggleSubtitles: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean\n    ): () => void;\n    bindToggleSubtitleTrackInVideo(\n        onToggleSubtitleTrack: (event: KeyboardEvent, extra: any) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean\n    ): () => void;\n    bindToggleSubtitleTrackInList(\n        onToggleSubtitleTrackInList: (event: KeyboardEvent, extra: any) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean\n    ): () => void;\n    bindPlay(onPlay: (event: KeyboardEvent) => void, disabledGetter: () => boolean, useCapture?: boolean): () => void;\n    bindAutoPause(\n        onAutoPause: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean\n    ): () => void;\n    bindCondensedPlayback(\n        onCondensedPlayback: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean\n    ): () => void;\n}\n\nexport class DefaultKeyBinder implements KeyBinder {\n    private readonly keyBindSet: KeyBindSet;\n\n    constructor(keyBindSet: KeyBindSet) {\n        this.keyBindSet = keyBindSet;\n    }\n    bindCopy<T extends SubtitleModel = SubtitleModel>(\n        onCopy: (event: KeyboardEvent, subtitle: T) => void,\n        disabledGetter: () => boolean,\n        subtitleGetter: () => T | undefined,\n        useCapture = false\n    ) {\n        const shortcut = this.keyBindSet.copySubtitle.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = this.copyHandler(onCopy, disabledGetter, subtitleGetter);\n        hotkeys(shortcut, { capture: useCapture }, handler);\n        return () => hotkeys.unbind(shortcut, handler);\n    }\n\n    copyHandler<T extends SubtitleModel>(\n        onCopy: (event: KeyboardEvent, subtitle: T) => void,\n        disabledGetter: () => boolean,\n        subtitleGetter: () => T | undefined\n    ) {\n        return (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            const subtitle = subtitleGetter();\n\n            if (!subtitle) {\n                return;\n            }\n\n            onCopy(event, subtitle);\n        };\n    }\n\n    bindAnkiExport(onAnkiExport: (event: KeyboardEvent) => void, disabledGetter: () => boolean, useCapture = false) {\n        const shortcut = this.keyBindSet.ankiExport.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = this.ankiExportHandler(onAnkiExport, disabledGetter);\n        hotkeys(shortcut, { capture: useCapture }, handler);\n        return () => hotkeys.unbind(shortcut, handler);\n    }\n\n    ankiExportHandler(onAnkiExport: (event: KeyboardEvent) => void, disabledGetter: () => boolean) {\n        return (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onAnkiExport(event);\n        };\n    }\n\n    bindUpdateLastCard(\n        onUpdateLastCard: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture = false\n    ) {\n        const shortcut = this.keyBindSet.updateLastCard.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = this.updateLastCardHandler(onUpdateLastCard, disabledGetter);\n        hotkeys(shortcut, { capture: useCapture }, handler);\n        return () => hotkeys.unbind(shortcut, handler);\n    }\n\n    updateLastCardHandler(onUpdateLastCard: (event: KeyboardEvent) => void, disabledGetter: () => boolean) {\n        return (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onUpdateLastCard(event);\n        };\n    }\n\n    bindSeekToSubtitle(\n        onSeekToSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture = false\n    ) {\n        const delegate = (event: KeyboardEvent, forward: boolean) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            const subtitles = subtitlesGetter();\n\n            if (!subtitles || subtitles.length === 0) {\n                return;\n            }\n\n            const subtitle = this._adjacentSubtitle(forward, timeGetter(), subtitles);\n\n            if (subtitle !== null && subtitle.start >= 0 && subtitle.end >= 0) {\n                onSeekToSubtitle(event, subtitle);\n            }\n        };\n        const previousShortcut = this.keyBindSet.seekToPreviousSubtitle.keys;\n        const nextShortcut = this.keyBindSet.seekToNextSubtitle.keys;\n        const previousHandler = (event: KeyboardEvent) => delegate(event, false);\n        const nextHandler = (event: KeyboardEvent) => delegate(event, true);\n\n        if (previousShortcut) {\n            hotkeys(previousShortcut, { capture: useCapture }, previousHandler);\n        }\n\n        if (nextShortcut) {\n            hotkeys(nextShortcut, { capture: useCapture }, nextHandler);\n        }\n\n        return () => {\n            if (previousShortcut) {\n                hotkeys.unbind(previousShortcut, previousHandler);\n            }\n\n            if (nextShortcut) {\n                hotkeys.unbind(nextShortcut, nextHandler);\n            }\n        };\n    }\n\n    bindSeekToBeginningOfCurrentSubtitle(\n        onSeekToBeginningOfCurrentSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture = false\n    ) {\n        const shortcut = this.keyBindSet.seekToBeginningOfCurrentSubtitle.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            const subtitles = subtitlesGetter();\n\n            if (!subtitles || subtitles.length === 0) {\n                return;\n            }\n\n            const subtitle = this._currentSubtitle(timeGetter(), subtitles);\n\n            if (subtitle !== undefined && subtitle.start >= 0 && subtitle.end >= 0) {\n                onSeekToBeginningOfCurrentSubtitle(event, subtitle);\n            }\n        };\n        hotkeys(shortcut, { capture: useCapture }, handler);\n        return () => hotkeys.unbind(shortcut, handler);\n    }\n\n    _currentSubtitle(time: number, subtitles: SubtitleModel[]) {\n        const now = time;\n        let currentSubtitle: SubtitleModel | undefined;\n        let minDiff = Number.MAX_SAFE_INTEGER;\n\n        for (let i = 0; i < subtitles.length; ++i) {\n            const s = subtitles[i];\n\n            if (s.start < 0 || s.end < 0) {\n                continue;\n            }\n\n            const diff = now - s.start;\n\n            if (now >= s.start && now < s.end) {\n                if (diff < minDiff) {\n                    currentSubtitle = s;\n                    minDiff = diff;\n                }\n            }\n        }\n\n        return currentSubtitle;\n    }\n\n    bindSeekBackwardOrForward(\n        onSeekBackwardOrForward: (event: KeyboardEvent, forward: boolean) => void,\n        disabledGetter: () => boolean,\n        useCapture = false\n    ) {\n        const delegate = (event: KeyboardEvent, forward: boolean) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onSeekBackwardOrForward(event, forward);\n        };\n        const backShortcut = this.keyBindSet.seekBackward.keys;\n        const nextShortcut = this.keyBindSet.seekForward.keys;\n        const backHandler = (event: KeyboardEvent) => delegate(event, false);\n        const nextHandler = (event: KeyboardEvent) => delegate(event, true);\n\n        if (backShortcut) {\n            hotkeys(backShortcut, { capture: useCapture }, backHandler);\n        }\n\n        if (nextShortcut) {\n            hotkeys(nextShortcut, { capture: useCapture }, nextHandler);\n        }\n\n        return () => {\n            if (backShortcut) {\n                hotkeys.unbind(backShortcut, backHandler);\n            }\n\n            if (nextShortcut) {\n                hotkeys.unbind(nextShortcut, nextHandler);\n            }\n        };\n    }\n\n    bindOffsetToSubtitle(\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture = false\n    ) {\n        const delegate = (event: KeyboardEvent, forward: boolean) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            const subtitles = subtitlesGetter();\n\n            if (!subtitles || subtitles.length === 0) {\n                return;\n            }\n\n            const time = timeGetter();\n            const subtitle = this._adjacentSubtitle(forward, time, subtitles);\n\n            if (subtitle !== null) {\n                const subtitleStart = subtitle.originalStart;\n                const newOffset = time - subtitleStart;\n                onOffsetChange(event, newOffset);\n            }\n        };\n        const previousShortcut = this.keyBindSet.adjustOffsetToPreviousSubtitle.keys;\n        const nextShortcut = this.keyBindSet.adjustOffsetToNextSubtitle.keys;\n        const previousHandler = (event: KeyboardEvent) => delegate(event, false);\n        const nextHandler = (event: KeyboardEvent) => delegate(event, true);\n\n        if (previousShortcut) {\n            hotkeys(previousShortcut, { capture: useCapture }, previousHandler);\n        }\n\n        if (nextShortcut) {\n            hotkeys(nextShortcut, { capture: useCapture }, nextHandler);\n        }\n\n        return () => {\n            if (previousShortcut) {\n                hotkeys.unbind(previousShortcut, previousHandler);\n            }\n\n            if (nextShortcut) {\n                hotkeys.unbind(nextShortcut, nextHandler);\n            }\n        };\n    }\n\n    _adjacentSubtitle(forward: boolean, time: number, subtitles: SubtitleModel[]) {\n        const now = time;\n        let adjacentSubtitleIndex = -1;\n        let minDiff = Number.MAX_SAFE_INTEGER;\n\n        for (let i = 0; i < subtitles.length; ++i) {\n            const s = subtitles[i];\n            const diff = forward ? s.start - now : now - s.start;\n\n            if (minDiff <= diff) {\n                continue;\n            }\n\n            if (forward && now < s.start) {\n                minDiff = diff;\n                adjacentSubtitleIndex = i;\n            } else if (!forward && now > s.start) {\n                minDiff = diff;\n                adjacentSubtitleIndex = now < s.end ? Math.max(0, i - 1) : i;\n            }\n        }\n\n        if (adjacentSubtitleIndex !== -1) {\n            return subtitles[adjacentSubtitleIndex];\n        }\n\n        return null;\n    }\n\n    bindAdjustOffset(\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\n        disabledGetter: () => boolean,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture = false\n    ) {\n        const delegate = (event: KeyboardEvent, increase: boolean) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            const subtitles = subtitlesGetter();\n\n            if (!subtitles || subtitles.length === 0) {\n                return;\n            }\n\n            const currentOffset = subtitles[0].start - subtitles[0].originalStart;\n            const newOffset = currentOffset + (increase ? 100 : -100);\n            onOffsetChange(event, newOffset);\n        };\n\n        const decreaseShortcut = this.keyBindSet.decreaseOffset.keys;\n        const increaseShortcut = this.keyBindSet.increaseOffset.keys;\n        const decreaseHandler = (event: KeyboardEvent) => delegate(event, false);\n        const increaseHandler = (event: KeyboardEvent) => delegate(event, true);\n\n        hotkeys(decreaseShortcut, { capture: useCapture }, decreaseHandler);\n        hotkeys(increaseShortcut, { capture: useCapture }, increaseHandler);\n        return () => {\n            hotkeys.unbind(decreaseShortcut, decreaseHandler);\n            hotkeys.unbind(increaseShortcut, increaseHandler);\n        };\n    }\n\n    bindResetOffet(\n        onResetOffset: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ) {\n        const shortcut = this.keyBindSet.resetOffset.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onResetOffset(event);\n        };\n\n        hotkeys(shortcut, { capture: useCapture }, handler);\n        return () => {\n            hotkeys.unbind(shortcut, handler);\n        };\n    }\n\n    bindAdjustPlaybackRate(\n        onAdjustPlaybackRate: (event: KeyboardEvent, increase: boolean) => void,\n        disabledGetter: () => boolean,\n        useCapture = false\n    ) {\n        const delegate = (event: KeyboardEvent, increase: boolean) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onAdjustPlaybackRate(event, increase);\n        };\n        const increaseShortcut = this.keyBindSet.increasePlaybackRate.keys;\n        const decreaseShortcut = this.keyBindSet.decreasePlaybackRate.keys;\n        const decreaseHandler = (event: KeyboardEvent) => delegate(event, false);\n        const increaseHandler = (event: KeyboardEvent) => delegate(event, true);\n\n        if (decreaseShortcut) {\n            hotkeys(decreaseShortcut, { capture: useCapture }, decreaseHandler);\n        }\n\n        if (increaseShortcut) {\n            hotkeys(increaseShortcut, { capture: useCapture }, increaseHandler);\n        }\n\n        return () => {\n            if (decreaseShortcut) {\n                hotkeys.unbind(decreaseShortcut, decreaseHandler);\n            }\n\n            if (increaseShortcut) {\n                hotkeys.unbind(increaseShortcut, increaseHandler);\n            }\n        };\n    }\n\n    bindToggleSubtitles(\n        onToggleSubtitles: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture = false\n    ) {\n        const shortcut = this.keyBindSet.toggleSubtitles.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onToggleSubtitles(event);\n        };\n        hotkeys(shortcut, { capture: useCapture }, handler);\n        return () => {\n            hotkeys.unbind(shortcut, handler);\n        };\n    }\n\n    bindToggleSubtitleTrackInVideo(\n        onToggleSubtitleTrack: (event: KeyboardEvent, extra: any) => void,\n        disabledGetter: () => boolean,\n        useCapture = false\n    ) {\n        const shortcuts = [\n            this.keyBindSet.toggleVideoSubtitleTrack1.keys,\n            this.keyBindSet.toggleVideoSubtitleTrack2.keys,\n        ].filter((s) => s);\n\n        if (shortcuts.length === 0) {\n            return () => {};\n        }\n\n        const delegate = (event: KeyboardEvent, track: number) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onToggleSubtitleTrack(event, track);\n        };\n        let handlers: ((event: KeyboardEvent) => void)[] = [];\n\n        for (let i = 0; i < shortcuts.length; ++i) {\n            const handler = (event: KeyboardEvent) => delegate(event, i);\n            handlers.push(handler);\n            hotkeys(shortcuts[i], { capture: useCapture }, handler);\n        }\n\n        return () => {\n            for (let i = 0; i < shortcuts.length; ++i) {\n                const handler = handlers[i];\n                hotkeys.unbind(shortcuts[i], handler);\n            }\n        };\n    }\n\n    bindToggleSubtitleTrackInList(\n        onToggleSubtitleTrackInList: (event: KeyboardEvent, extra: any) => void,\n        disabledGetter: () => boolean,\n        useCapture = false\n    ) {\n        const shortcuts = [\n            this.keyBindSet.toggleAsbplayerSubtitleTrack1.keys,\n            this.keyBindSet.toggleAsbplayerSubtitleTrack2.keys,\n        ].filter((s) => s);\n\n        if (shortcuts.length === 0) {\n            return () => {};\n        }\n\n        const delegate = (event: KeyboardEvent, track: number) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onToggleSubtitleTrackInList(event, track);\n        };\n\n        let handlers: ((event: KeyboardEvent) => void)[] = [];\n\n        for (let i = 0; i < 9; ++i) {\n            const handler = (event: KeyboardEvent) => delegate(event, i);\n            handlers.push(handler);\n            hotkeys(shortcuts[i], { capture: useCapture }, handler);\n        }\n\n        return () => {\n            for (let i = 0; i < 9; ++i) {\n                const handler = handlers[i];\n                hotkeys.unbind(shortcuts[i], handler);\n            }\n        };\n    }\n\n    bindPlay(onPlay: (event: KeyboardEvent) => void, disabledGetter: () => boolean, useCapture = false) {\n        const shortcut = this.keyBindSet.togglePlay.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onPlay(event);\n        };\n\n        hotkeys(shortcut, { capture: useCapture }, handler);\n        return () => {\n            hotkeys.unbind(shortcut, handler);\n        };\n    }\n\n    bindAutoPause(onAutoPause: (event: KeyboardEvent) => void, disabledGetter: () => boolean, useCapture = false) {\n        const shortcut = this.keyBindSet.toggleAutoPause.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onAutoPause(event);\n        };\n        hotkeys(shortcut, { capture: useCapture }, handler);\n        return () => {\n            hotkeys.unbind(shortcut, handler);\n        };\n    }\n\n    bindCondensedPlayback(\n        onAutoPause: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture = false\n    ) {\n        const shortcut = this.keyBindSet.toggleCondensedPlayback.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onAutoPause(event);\n        };\n        hotkeys(shortcut, { capture: useCapture }, handler);\n        return () => {\n            hotkeys.unbind(shortcut, handler);\n        };\n    }\n}\n","export default class Mp3Encoder {\n    static async encode(blob: Blob, workerFactory: () => Worker): Promise<Blob> {\n        return new Promise(async (resolve, reject) => {\n            var reader = new FileReader();\n            reader.onload = async (e) => {\n                try {\n                    const audioContext = new AudioContext();\n\n                    if (e.target === null) {\n                        reject(new Error(\"Could not obtain buffer to encode\"));\n                        return;\n                    }\n\n                    const audioBuffer = await audioContext.decodeAudioData(e.target.result as ArrayBuffer);\n                    const channels = [];\n\n                    for (let i = 0; i < audioBuffer.numberOfChannels; ++i) {\n                        channels.push(audioBuffer.getChannelData(i));\n                    }\n\n                    const worker = workerFactory();\n                    worker.postMessage({\n                        command: 'encode',\n                        audioBuffer: {\n                            channels: channels,\n                            numberOfChannels: audioBuffer.numberOfChannels,\n                            length: audioBuffer.length,\n                            sampleRate: audioBuffer.sampleRate,\n                        },\n                    });\n                    worker.onmessage = (e) => {\n                        resolve(new Blob(e.data.buffer, { type: 'audio/mp3' }));\n                        worker.terminate();\n                    };\n                    worker.onerror = (e) => {\n                        const error = e?.error ?? new Error('MP3 encoding failed: ' + e?.message);\n                        reject(error);\n                        worker.terminate();\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            };\n            reader.readAsArrayBuffer(blob);\n        });\n    }\n}\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/mp3-encoder.7f842300.worker.js\");\n}\n","import sanitize from 'sanitize-filename';\nimport { SubtitleModel } from './Model';\n\nexport function humanReadableTime(timestamp: number, nearestTenth = false): string {\n    const totalSeconds = Math.floor(timestamp / 1000);\n    let seconds;\n\n    if (nearestTenth) {\n        seconds = Math.round(((timestamp / 1000) % 60) * 10) / 10;\n    } else {\n        seconds = totalSeconds % 60;\n    }\n\n    const minutes = Math.floor(totalSeconds / 60) % 60;\n    const hours = Math.floor(totalSeconds / 3600);\n\n    if (hours > 0) {\n        return hours + 'h' + String(minutes).padStart(2, '0') + 'm' + String(seconds).padStart(2, '0') + 's';\n    }\n\n    return minutes + 'm' + String(seconds).padStart(2, '0') + 's';\n}\n\nexport function surroundingSubtitles(\n    subtitles: SubtitleModel[],\n    index: number,\n    countRadius: number,\n    timeRadius: number\n): SubtitleModel[] {\n    let startIndex = index;\n\n    for (let i = index; i >= 0; --i) {\n        startIndex = i;\n\n        if (atBoundary(subtitles, startIndex, index, countRadius, timeRadius, Direction.backward)) {\n            break;\n        }\n    }\n\n    let endIndex = startIndex;\n\n    for (let i = index; i <= subtitles.length - 1; ++i) {\n        endIndex = i;\n\n        if (atBoundary(subtitles, endIndex, index, countRadius, timeRadius, Direction.forward)) {\n            break;\n        }\n    }\n\n    return subtitles.slice(startIndex, endIndex + 1);\n}\n\nfunction indexNearTimestamp(subtitles: SubtitleModel[], timestamp: number, direction: Direction) {\n    if (direction === Direction.forward) {\n        for (let i = 0; i < subtitles.length; ++i) {\n            if (subtitles[i].start >= timestamp) {\n                return i;\n            }\n        }\n    } else {\n        for (let i = subtitles.length - 1; i >= 0; --i) {\n            if (subtitles[i].start <= timestamp) {\n                return i;\n            }\n        }\n    }\n\n    return undefined;\n}\n\nexport function surroundingSubtitlesAroundInterval(\n    subtitles: SubtitleModel[],\n    startTimestamp: number,\n    endTimestamp: number,\n    countRadius: number,\n    timeRadius: number\n) {\n    if (subtitles.length === 0) {\n        return {};\n    }\n\n    let startBoundaryIndex = 0;\n    const indexAfterStartTimestamp =\n        indexNearTimestamp(subtitles, startTimestamp, Direction.forward) ?? subtitles.length - 1;\n\n    for (let i = 0; i < subtitles.length; ++i) {\n        startBoundaryIndex = i;\n\n        if (\n            withinBoundaryAroundInterval(\n                subtitles,\n                i,\n                countRadius,\n                timeRadius,\n                startTimestamp,\n                indexAfterStartTimestamp\n            )\n        ) {\n            break;\n        }\n    }\n\n    let endBoundaryIndex = subtitles.length - 1;\n    const indexBeforeEndTimestamp = indexNearTimestamp(subtitles, endTimestamp, Direction.backward) ?? 0;\n\n    for (let i = subtitles.length - 1; i >= 0; --i) {\n        endBoundaryIndex = i;\n\n        if (\n            withinBoundaryAroundInterval(subtitles, i, countRadius, timeRadius, endTimestamp, indexBeforeEndTimestamp)\n        ) {\n            break;\n        }\n    }\n\n    if (endBoundaryIndex <= startBoundaryIndex) {\n        return {};\n    }\n\n    return {\n        surroundingSubtitles: subtitles.slice(startBoundaryIndex, endBoundaryIndex + 1),\n        subtitle: subtitles[indexAfterStartTimestamp],\n    };\n}\n\nexport function mockSurroundingSubtitles(\n    middleSubtitle: SubtitleModel,\n    maxTimestamp: number,\n    timeRadius: number\n): SubtitleModel[] {\n    const subtitles = [middleSubtitle];\n    const offset = middleSubtitle.start - middleSubtitle.originalStart;\n\n    if (middleSubtitle.end < maxTimestamp) {\n        const afterTimestamp = Math.min(maxTimestamp, middleSubtitle.end + timeRadius);\n        subtitles.push({\n            text: '',\n            start: middleSubtitle.end,\n            end: afterTimestamp,\n            originalStart: middleSubtitle.end - offset,\n            originalEnd: afterTimestamp - offset,\n            track: middleSubtitle.track,\n        });\n    }\n\n    if (middleSubtitle.start > 0) {\n        const beforeTimestamp = Math.max(0, middleSubtitle.start - timeRadius);\n        subtitles.unshift({\n            text: '',\n            start: beforeTimestamp,\n            end: middleSubtitle.start,\n            originalStart: beforeTimestamp - offset,\n            originalEnd: middleSubtitle.start - offset,\n            track: middleSubtitle.track,\n        });\n    }\n\n    return subtitles;\n}\n\nenum Direction {\n    forward,\n    backward,\n}\n\nfunction atBoundary(\n    subtitles: SubtitleModel[],\n    index: number,\n    initialIndex: number,\n    countRadius: number,\n    timeRadius: number,\n    direction: Direction\n): boolean {\n    let next;\n\n    if (direction == Direction.forward) {\n        next = index + 1 < subtitles.length ? subtitles[index + 1] : null;\n    } else {\n        next = index - 1 >= 0 ? subtitles[index - 1] : null;\n    }\n\n    if (\n        Math.abs(initialIndex - index) >= countRadius &&\n        (next === null || Math.abs(next.start - subtitles[initialIndex].start) >= timeRadius)\n    ) {\n        return true;\n    }\n\n    return false;\n}\n\nfunction withinBoundaryAroundInterval(\n    subtitles: SubtitleModel[],\n    index: number,\n    countRadius: number,\n    timeRadius: number,\n    timestamp: number,\n    indexNearTimestamp: number\n): boolean {\n    const current = subtitles[index];\n\n    if (Math.abs(indexNearTimestamp - index) <= countRadius || Math.abs(current.start - timestamp) <= timeRadius) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function subtitleIntersectsTimeInterval(subtitle: SubtitleModel, interval: number[]) {\n    const length = Math.max(0, subtitle.end - subtitle.start);\n\n    if (length === 0) {\n        return false;\n    }\n\n    const overlapStart = Math.max(subtitle.start, interval[0]);\n    const overlapEnd = Math.min(subtitle.end, interval[1]);\n\n    return overlapEnd - overlapStart >= length / 2;\n}\n\nexport function joinSubtitles(subtitles: SubtitleModel[]) {\n    return subtitles\n        .filter((s) => s.text.trim() !== '')\n        .map((s) => s.text)\n        .join('\\n');\n}\n\nexport function extractText(subtitle: SubtitleModel, surroundingSubtitles: SubtitleModel[]) {\n    if (surroundingSubtitles.length === 0) {\n        return subtitle.text;\n    }\n\n    const interval = [subtitle.start, subtitle.end];\n    return joinSubtitles(surroundingSubtitles.filter((s) => subtitleIntersectsTimeInterval(s, interval)));\n}\n\nexport function download(blob: Blob, name: string) {\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    document.body.appendChild(a);\n    a.style.display = 'none';\n    a.href = url;\n    a.download = sanitize(name);\n    a.click();\n    URL.revokeObjectURL(url);\n    a.remove();\n}\n","import Mp3Encoder from './Mp3Encoder';\n// eslint-disable-next-line\n// @ts-ignore\nimport Worker from 'worker-loader!./mp3-encoder.js';\nimport { download } from './util';\nconst defaultMp3WorkerFactory = () => new Worker();\n\ninterface ExperimentalAudioElement extends HTMLAudioElement {\n    audioTracks: any;\n    captureStream?: () => MediaStream;\n    mozCaptureStream?: () => MediaStream;\n}\n\ninterface AudioData {\n    name: string;\n    extension: string;\n    start: number;\n    end: number;\n    play: () => Promise<void>;\n    blob: () => Promise<Blob>;\n    base64: () => Promise<string>;\n    slice: (start: number, end: number) => AudioData;\n    isSliceable: () => boolean;\n    isPlayable: () => boolean;\n}\n\nfunction recorderConfiguration() {\n    const AUDIO_TYPES: { [key: string]: string } = {\n        'audio/ogg;codecs=opus': 'ogg',\n        'audio/webm;codecs=opus': 'webm',\n    };\n    return Object.keys(AUDIO_TYPES)\n        .filter(MediaRecorder.isTypeSupported)\n        .map((t) => [t as string, AUDIO_TYPES[t] as string])[0];\n}\n\nclass Base64AudioData implements AudioData {\n    private readonly _name: string;\n    private readonly _start: number;\n    private readonly _end: number;\n    private readonly playbackRate: number;\n    private readonly _base64: string;\n    private readonly _extension: string;\n\n    private playingAudio?: HTMLAudioElement;\n    private stopAudioTimeout?: NodeJS.Timeout;\n    private cachedBlob?: Blob;\n\n    constructor(baseName: string, start: number, end: number, playbackRate: number, base64: string, extension: string) {\n        this._name = baseName + '_' + Math.floor(start) + '_' + Math.floor(end);\n        this._start = start;\n        this._end = end;\n        this.playbackRate = playbackRate;\n        this._base64 = base64;\n        this._extension = extension;\n    }\n\n    get name(): string {\n        return this._name;\n    }\n\n    get extension(): string {\n        return this._extension;\n    }\n\n    get start(): number {\n        return this._start;\n    }\n\n    get end(): number {\n        return this._end;\n    }\n\n    async base64() {\n        return this._base64;\n    }\n\n    async blob() {\n        return await this._blob();\n    }\n\n    async play(): Promise<void> {\n        if (this.playingAudio) {\n            this.stopAudio(this.playingAudio);\n            clearTimeout(this.stopAudioTimeout!);\n            this.playingAudio = undefined;\n            this.stopAudioTimeout = undefined;\n            return;\n        }\n\n        const blob = await this._blob();\n        const audio = new Audio();\n        audio.src = URL.createObjectURL(blob);\n        audio.preload = 'none';\n        audio.load();\n        this.playingAudio = audio;\n\n        await audio.play();\n\n        this.stopAudioTimeout = setTimeout(() => {\n            this.stopAudio(audio);\n            this.playingAudio = undefined;\n            this.stopAudioTimeout = undefined;\n        }, (this._end - this._start) / this.playbackRate + 100);\n    }\n\n    private stopAudio(audio: HTMLAudioElement) {\n        audio.pause();\n        const src = audio.src;\n        audio.src = '';\n        URL.revokeObjectURL(src);\n    }\n\n    async _blob() {\n        if (!this.cachedBlob) {\n            this.cachedBlob = await (await fetch('data:audio/' + this.extension + ';base64,' + this._base64)).blob();\n        }\n\n        return this.cachedBlob;\n    }\n\n    slice(start: number, end: number): AudioData {\n        // Not supported\n        return this;\n    }\n\n    isSliceable() {\n        return false;\n    }\n\n    isPlayable() {\n        return true;\n    }\n}\n\nclass FileAudioData implements AudioData {\n    private readonly file: File;\n    private readonly _name: string;\n    private readonly _start: number;\n    private readonly _end: number;\n    private readonly playbackRate: number;\n    private readonly trackId?: string;\n    private readonly _extension: string;\n    private readonly recorderMimeType: string;\n\n    private clippingAudio?: HTMLAudioElement;\n    private clippingAudioReject?: (error: string) => void;\n    private stopClippingTimeout?: NodeJS.Timeout;\n\n    private playingAudio?: HTMLAudioElement;\n    private stopAudioTimeout?: NodeJS.Timeout;\n\n    private _blob?: Blob;\n\n    constructor(file: File, start: number, end: number, playbackRate: number, trackId?: string) {\n        const [recorderMimeType, recorderExtension] = recorderConfiguration();\n        this.recorderMimeType = recorderMimeType;\n        this.file = file;\n        this._name = file.name + '_' + start + '_' + end;\n        this._start = start;\n        this._end = end;\n        this.playbackRate = playbackRate;\n        this.trackId = trackId;\n        this._extension = recorderExtension;\n    }\n\n    get name(): string {\n        return this._name;\n    }\n\n    get extension(): string {\n        return this._extension;\n    }\n\n    get start() {\n        return this._start;\n    }\n\n    get end() {\n        return this._end;\n    }\n\n    async base64() {\n        return new Promise<string>(async (resolve, reject) => {\n            var reader = new FileReader();\n            const blob = await this.blob();\n\n            if (blob === undefined) {\n                reject('Did not finish recording blob');\n            } else {\n                reader.readAsDataURL(blob);\n                reader.onloadend = () => {\n                    const result = reader.result as string;\n                    const base64 = result.substring(result.indexOf(',') + 1);\n                    resolve(base64);\n                };\n            }\n        });\n    }\n\n    async play() {\n        if (!this._blob) {\n            this._blob = await this._clipAudio();\n            return;\n        }\n\n        if (this.playingAudio) {\n            this.stopAudio(this.playingAudio);\n            clearTimeout(this.stopAudioTimeout!);\n            this.playingAudio = undefined;\n            this.stopAudioTimeout = undefined;\n            return;\n        }\n\n        const audio = await this._audioElement(this._blob, false);\n        audio.currentTime = 0;\n        await audio.play();\n        this.playingAudio = audio;\n        this.stopAudioTimeout = setTimeout(() => {\n            this.stopAudio(audio);\n            this.stopAudioTimeout = undefined;\n            this.playingAudio = undefined;\n        }, (this._end - this._start) / this.playbackRate + 100);\n    }\n\n    async blob() {\n        if (!this._blob) {\n            this._blob = await this._clipAudio();\n        }\n\n        if (this._blob === undefined) {\n            throw new Error('Did not finish recording blob');\n        }\n\n        return this._blob;\n    }\n\n    async _clipAudio(): Promise<Blob | undefined> {\n        if (this.clippingAudio) {\n            this.stopAudio(this.clippingAudio);\n            clearTimeout(this.stopClippingTimeout!);\n            this.clippingAudioReject?.('Did not finish recording blob');\n            this.clippingAudio = undefined;\n            this.stopClippingTimeout = undefined;\n            this.clippingAudioReject = undefined;\n            return undefined;\n        }\n\n        return new Promise(async (resolve, reject) => {\n            try {\n                const audio = await this._audioElement(this.file, true);\n                audio.oncanplay = async (e) => {\n                    audio.play();\n                    const stream = this._captureStream(audio);\n                    const recorder = new MediaRecorder(stream, { mimeType: this.recorderMimeType });\n                    const chunks: BlobPart[] = [];\n\n                    recorder.ondataavailable = (e) => {\n                        chunks.push(e.data);\n                    };\n\n                    let finished = false;\n\n                    recorder.onstop = (e) => {\n                        if (finished) {\n                            resolve(new Blob(chunks, { type: this.recorderMimeType }));\n                        }\n                    };\n\n                    recorder.start();\n\n                    this.clippingAudioReject = reject;\n                    this.clippingAudio = audio;\n                    this.stopClippingTimeout = setTimeout(() => {\n                        this.stopAudio(audio);\n                        this.clippingAudio = undefined;\n                        this.stopClippingTimeout = undefined;\n                        this.clippingAudioReject = undefined;\n                        finished = true;\n                        recorder.stop();\n                        for (const track of stream.getAudioTracks()) {\n                            track.stop();\n                        }\n                    }, (this._end - this._start) / this.playbackRate + 100);\n                };\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    private _audioElement(source: Blob, selectTrack: boolean): Promise<ExperimentalAudioElement> {\n        const audio = new Audio() as ExperimentalAudioElement;\n        audio.src = URL.createObjectURL(source);\n\n        return new Promise((resolve, reject) => {\n            audio.onloadedmetadata = (e) => {\n                if (selectTrack && this.trackId && audio.audioTracks && audio.audioTracks.length > 0) {\n                    // @ts-ignore\n                    for (const t of audio.audioTracks) {\n                        t.enabled = this.trackId === t.id;\n                    }\n                }\n\n                audio.currentTime = this._start / 1000;\n                audio.playbackRate = this.playbackRate;\n                resolve(audio);\n            };\n        });\n    }\n\n    private stopAudio(audio: HTMLAudioElement) {\n        audio.pause();\n        const src = audio.src;\n        audio.src = '';\n        URL.revokeObjectURL(src);\n    }\n\n    private _captureStream(audio: ExperimentalAudioElement) {\n        let stream: MediaStream | undefined;\n\n        if (typeof audio.captureStream === 'function') {\n            stream = audio.captureStream();\n        }\n\n        if (typeof audio.mozCaptureStream === 'function') {\n            stream = audio.mozCaptureStream();\n        }\n\n        if (stream === undefined) {\n            throw new Error('Unable to capture stream from audio');\n        }\n\n        const audioStream = new MediaStream();\n\n        for (const track of stream.getVideoTracks()) {\n            track.stop();\n        }\n\n        for (const track of stream.getAudioTracks()) {\n            if (track.enabled) {\n                audioStream.addTrack(track);\n            }\n        }\n\n        return audioStream;\n    }\n\n    slice(start: number, end: number) {\n        return new FileAudioData(this.file, start, end, this.playbackRate, this.trackId);\n    }\n\n    isSliceable() {\n        return true;\n    }\n\n    isPlayable() {\n        return true;\n    }\n}\n\nclass Mp3AudioData implements AudioData {\n    private readonly data: AudioData;\n    private readonly workerFactory: () => Worker;\n    private _blob?: Blob;\n\n    constructor(data: AudioData, workerFactory: () => Worker) {\n        this.data = data;\n        this.workerFactory = workerFactory;\n    }\n\n    get name() {\n        return this.data.name;\n    }\n\n    get extension() {\n        return 'mp3';\n    }\n\n    get start() {\n        return this.data.start;\n    }\n\n    get end() {\n        return this.data.end;\n    }\n\n    async base64() {\n        return new Promise<string>(async (resolve, reject) => {\n            try {\n                var reader = new FileReader();\n                reader.readAsDataURL(await this.blob());\n                reader.onloadend = () => {\n                    const result = reader.result as string;\n                    const base64 = result.substring(result.indexOf(',') + 1);\n                    resolve(base64);\n                };\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    async play() {\n        await this.data.play();\n    }\n\n    async blob() {\n        if (!this._blob) {\n            this._blob = await Mp3Encoder.encode(await this.data.blob(), this.workerFactory);\n        }\n\n        return this._blob;\n    }\n\n    slice(start: number, end: number) {\n        return new Mp3AudioData(this.data.slice(start, end), this.workerFactory);\n    }\n\n    isSliceable() {\n        return this.data.isSliceable();\n    }\n\n    isPlayable() {\n        return this.data.isPlayable();\n    }\n}\n\nclass MissingFileAudioData implements AudioData {\n    private readonly _name: string;\n    private readonly _start: number;\n    private readonly _end: number;\n    private readonly _extension: string;\n\n    constructor(fileName: string, start: number, end: number) {\n        this._name = `${fileName}_${start}_${end}`;\n        this._start = start;\n        this._end = end;\n        [, this._extension] = recorderConfiguration();\n    }\n\n    get name() {\n        return this._name;\n    }\n\n    get extension() {\n        return this._extension;\n    }\n\n    get start() {\n        return this._start;\n    }\n\n    get end() {\n        return this._end;\n    }\n\n    async base64(): Promise<string> {\n        throw new Error('Not supported');\n    }\n\n    async play() {\n        throw new Error('Not supported');\n    }\n\n    async blob(): Promise<Blob> {\n        throw new Error('Not supported');\n    }\n\n    slice(start: number, end: number): AudioData {\n        // Not  supported\n        return this;\n    }\n\n    isSliceable() {\n        return false;\n    }\n\n    isPlayable() {\n        return false;\n    }\n}\n\nexport default class AudioClip {\n    private readonly data: AudioData;\n\n    constructor(data: AudioData) {\n        this.data = data;\n    }\n\n    static fromBase64(\n        subtitleFileName: string,\n        start: number,\n        end: number,\n        playbackRate: number,\n        base64: string,\n        extension: string\n    ) {\n        return new AudioClip(\n            new Base64AudioData(\n                subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')),\n                start,\n                end,\n                playbackRate,\n                base64,\n                extension\n            )\n        );\n    }\n\n    static fromFile(file: File, start: number, end: number, playbackRate: number, trackId?: string) {\n        return new AudioClip(new FileAudioData(file, start, end, playbackRate, trackId));\n    }\n\n    static fromMissingFile(fileName: string, start: number, end: number) {\n        return new AudioClip(new MissingFileAudioData(fileName, start, end));\n    }\n\n    get start() {\n        return this.data.start;\n    }\n\n    get end() {\n        return this.data.end;\n    }\n\n    get name() {\n        return this.data.name + '.' + this.data.extension;\n    }\n\n    async play() {\n        await this.data.play();\n    }\n\n    async base64() {\n        return await this.data.base64();\n    }\n\n    async download() {\n        const blob = await this.data.blob();\n        download(blob, this.name);\n    }\n\n    toMp3(mp3WorkerFactory = defaultMp3WorkerFactory) {\n        if (this.data instanceof Mp3AudioData) {\n            return this;\n        }\n\n        if (this.data.extension === 'mp3') {\n            return this;\n        }\n\n        return new AudioClip(new Mp3AudioData(this.data, mp3WorkerFactory));\n    }\n\n    slice(start: number, end: number) {\n        return new AudioClip(this.data.slice(start, end));\n    }\n\n    isSliceable() {\n        return this.data.isSliceable();\n    }\n\n    isPlayable() {\n        return this.data.isPlayable();\n    }\n}\n","export default class CanvasResizer {\n    resize(\n        canvas: HTMLCanvasElement,\n        ctx: CanvasRenderingContext2D,\n        maxWidth: number,\n        maxHeight: number\n    ): Promise<HTMLCanvasElement> {\n        return new Promise((resolve, reject) => {\n            const widthRatio = maxWidth <= 0 ? 1 : maxWidth / canvas.width;\n            const heightRatio = maxHeight <= 0 ? 1 : maxHeight / canvas.height;\n            const ratio = Math.min(1, Math.min(widthRatio, heightRatio));\n\n            if (ratio < 1) {\n                const newWidth = canvas.width * ratio;\n                const newHeight = canvas.height * ratio;\n                createImageBitmap(canvas, { resizeWidth: newWidth, resizeHeight: newHeight, resizeQuality: 'high' })\n                    .then((sprite) => {\n                        canvas.width = newWidth;\n                        canvas.height = newHeight;\n                        ctx.drawImage(sprite, 0, 0);\n                        resolve(canvas);\n                    })\n                    .catch((e) => reject(e));\n            } else {\n                resolve(canvas);\n            }\n        });\n    }\n}\n","import CanvasResizer from './CanvasResizer';\nimport { download } from './util';\n\nclass Base64ImageData implements ImageData {\n    private readonly _name: string;\n    private readonly _base64: string;\n    private readonly _extension: string;\n\n    private cachedBlob?: Blob;\n\n    constructor(name: string, base64: string, extension: string) {\n        this._name = name;\n        this._base64 = base64;\n        this._extension = extension;\n    }\n\n    get name() {\n        return this._name;\n    }\n\n    get extension() {\n        return this._extension;\n    }\n\n    get available() {\n        return true;\n    }\n\n    async base64() {\n        return this._base64;\n    }\n\n    async blob() {\n        return await this._blob();\n    }\n\n    async _blob() {\n        if (!this.cachedBlob) {\n            this.cachedBlob = await (await fetch(this._dataUrl())).blob();\n        }\n\n        return this.cachedBlob;\n    }\n\n    async dataUrl() {\n        return this._dataUrl();\n    }\n\n    _dataUrl() {\n        return 'data:image/' + this.extension + ';base64,' + this._base64;\n    }\n}\n\nclass FileImageData implements ImageData {\n    private readonly file: File;\n    private readonly timestamp: number;\n    private readonly maxWidth: number;\n    private readonly maxHeight: number;\n    private readonly _name: string;\n\n    constructor(file: File, timestamp: number, maxWidth: number, maxHeight: number) {\n        this.file = file;\n        this._name = file.name + '_' + Math.floor(timestamp) + '.jpeg';\n        this.timestamp = timestamp;\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n    }\n\n    get name() {\n        return this._name;\n    }\n\n    get extension() {\n        return 'jpeg';\n    }\n\n    get available() {\n        return true;\n    }\n\n    async base64(): Promise<string> {\n        return new Promise(async (resolve, reject) => {\n            const canvas = await this._canvas();\n            const dataUrl = canvas.toDataURL('image/jpeg');\n            resolve(dataUrl.substring(dataUrl.indexOf(',') + 1));\n        });\n    }\n\n    async blob(): Promise<Blob> {\n        return new Promise(async (resolve, reject) => {\n            const canvas = await this._canvas();\n            canvas.toBlob((blob) => {\n                if (blob === null) {\n                    reject(new Error('Could not obtain blob'));\n                } else {\n                    resolve(blob);\n                }\n            }, 'image/jpeg');\n        });\n    }\n\n    async dataUrl() {\n        const canvas = await this._canvas();\n        return canvas.toDataURL();\n    }\n\n    async _canvas(): Promise<HTMLCanvasElement> {\n        return new Promise(async (resolve, reject) => {\n            const video = this._videoElement(this.file);\n\n            video.oncanplay = async (e) => {\n                const canvas = document.createElement('canvas');\n                canvas.width = video.videoWidth;\n                canvas.height = video.videoHeight;\n                const ctx = canvas.getContext('2d');\n                ctx!.drawImage(video, 0, 0, canvas.width, canvas.height);\n                if (this.maxWidth > 0 || this.maxHeight > 0) {\n                    const resizer = new CanvasResizer();\n                    await resizer.resize(canvas, ctx!, this.maxWidth, this.maxHeight);\n                    resolve(canvas);\n                } else {\n                    resolve(canvas);\n                }\n                URL.revokeObjectURL(video.src);\n            };\n        });\n    }\n\n    _videoElement(source: File) {\n        const video = document.createElement('video');\n        video.src = URL.createObjectURL(source);\n        video.preload = 'none';\n        video.currentTime = this.timestamp / 1000;\n        video.load();\n\n        return video;\n    }\n}\n\nclass MissingFileImageData implements ImageData {\n    private readonly _name: string;\n\n    constructor(fileName: string, timestamp: number) {\n        this._name = `${fileName}_${Math.floor(timestamp)}`;\n    }\n\n    get name() {\n        return this._name;\n    }\n\n    get extension() {\n        return 'jpeg';\n    }\n\n    get available() {\n        return false;\n    }\n\n    base64(): Promise<string> {\n        throw new Error('Not supported');\n    }\n\n    dataUrl(): Promise<string> {\n        throw new Error('Not supported');\n    }\n\n    blob(): Promise<Blob> {\n        throw new Error('Not supported');\n    }\n}\n\ninterface ImageData {\n    name: string;\n    extension: string;\n    base64: () => Promise<string>;\n    dataUrl: () => Promise<string>;\n    blob: () => Promise<Blob>;\n    available: boolean;\n}\n\nexport default class Image {\n    private readonly data: ImageData;\n\n    constructor(data: ImageData) {\n        this.data = data;\n    }\n\n    static fromBase64(subtitleFileName: string, timestamp: number, base64: string, extension: string) {\n        const imageName =\n            subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')) +\n            '_' +\n            Math.floor(timestamp) +\n            '.' +\n            extension;\n        return new Image(new Base64ImageData(imageName, base64, extension));\n    }\n\n    static fromFile(file: File, timestamp: number, maxWidth: number, maxHeight: number) {\n        return new Image(new FileImageData(file, timestamp, maxWidth, maxHeight));\n    }\n\n    static fromMissingFile(fileName: string, timestamp: number) {\n        return new Image(new MissingFileImageData(fileName, timestamp));\n    }\n\n    get name() {\n        return this.data.name;\n    }\n\n    get extension() {\n        return this.data.extension;\n    }\n\n    get available() {\n        return this.data.available;\n    }\n\n    async base64() {\n        return await this.data.base64();\n    }\n\n    async dataUrl() {\n        return await this.data.dataUrl();\n    }\n\n    async blob() {\n        return await this.data.blob();\n    }\n\n    async pngBlob() {\n        return new Promise<Blob>(async (resolve, reject) => {\n            try {\n                createImageBitmap(await this.blob()).then((bitMap) => {\n                    const canvas = document.createElement('canvas');\n                    canvas.width = bitMap.width;\n                    canvas.height = bitMap.height;\n                    canvas.getContext('2d')!.drawImage(bitMap, 0, 0);\n                    canvas.toBlob((blob) => {\n                        if (blob) {\n                            resolve(blob);\n                        } else {\n                            reject('Failed to convert to PNG');\n                        }\n                    }, 'image/png');\n                });\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    async download() {\n        const blob = await this.data.blob();\n        download(blob, this.data.name);\n    }\n}\n","export interface Fetcher {\n    fetch: (url: string, body: any) => Promise<any>;\n}\n\nexport class HttpFetcher implements Fetcher {\n    async fetch(url: string, body: any) {\n        const response = await fetch(url, {\n            method: 'POST',\n            body: JSON.stringify(body),\n        });\n        return await response.json();\n    }\n}\n","import AudioClip from './AudioClip';\nimport Image from './Image';\nimport { HttpFetcher, Fetcher } from './Fetcher';\nimport { AnkiSettings } from './Settings';\nimport sanitize from 'sanitize-filename';\nimport { AudioModel, ImageModel, SubtitleModel } from './Model';\nimport { extractText } from './util';\n\nconst ankiQuerySpecialCharacters = ['\"', '*', '_', '\\\\', ':'];\n\nexport type AnkiExportMode = 'gui' | 'updateLast' | 'default';\n\nexport async function updateLastCard(\n    ankiSettings: AnkiSettings,\n    subtitle: SubtitleModel,\n    surroundingSubtitles: SubtitleModel[],\n    audioModel: AudioModel | undefined,\n    imageModel: ImageModel | undefined,\n    sourceString: string,\n    url: string | undefined\n) {\n    const anki = new Anki(ankiSettings);\n    let audioClip =\n        audioModel === undefined\n            ? undefined\n            : AudioClip.fromBase64(\n                  sourceString,\n                  subtitle.start,\n                  subtitle.end,\n                  audioModel.playbackRate ?? 1,\n                  audioModel.base64,\n                  audioModel.extension\n              );\n\n    return await anki.export(\n        extractText(subtitle, surroundingSubtitles),\n        undefined,\n        audioClip,\n        imageModel === undefined\n            ? undefined\n            : Image.fromBase64(sourceString, subtitle.start, imageModel.base64, imageModel.extension),\n        undefined,\n        sourceString,\n        url,\n        {},\n        ankiSettings.tags,\n        'updateLast'\n    );\n}\n\nexport class Anki {\n    private readonly settingsProvider: AnkiSettings;\n    private readonly fetcher: Fetcher;\n\n    constructor(settingsProvider: AnkiSettings, fetcher = new HttpFetcher()) {\n        this.settingsProvider = settingsProvider;\n        this.fetcher = fetcher;\n    }\n\n    async deckNames(ankiConnectUrl?: string) {\n        const response = await this._executeAction('deckNames', null, ankiConnectUrl);\n        return response.result;\n    }\n\n    async modelNames(ankiConnectUrl?: string) {\n        const response = await this._executeAction('modelNames', null, ankiConnectUrl);\n        return response.result;\n    }\n\n    async modelFieldNames(modelName: string, ankiConnectUrl?: string) {\n        const response = await this._executeAction('modelFieldNames', { modelName: modelName }, ankiConnectUrl);\n        return response.result;\n    }\n\n    async findNotesWithWord(word: string, ankiConnectUrl?: string) {\n        const response = await this._executeAction(\n            'findNotes',\n            { query: this.settingsProvider.wordField + ':' + this._escapeQuery(word) },\n            ankiConnectUrl\n        );\n        return response.result;\n    }\n\n    async findNotesWithWordGui(word: string, ankiConnectUrl?: string) {\n        const response = await this._executeAction(\n            'guiBrowse',\n            { query: this.settingsProvider.wordField + ':' + this._escapeQuery(word) },\n            ankiConnectUrl\n        );\n        return response.result;\n    }\n\n    private _escapeQuery(query: string) {\n        let escaped = '';\n\n        for (let i = 0; i < query.length; ++i) {\n            const char = query[i];\n            if (ankiQuerySpecialCharacters.includes(char)) {\n                escaped += `\\\\${char}`;\n            } else {\n                escaped += char;\n            }\n        }\n\n        return `\"${escaped}\"`;\n    }\n\n    async requestPermission(ankiConnectUrl?: string) {\n        const response = await this._executeAction('requestPermission', null, ankiConnectUrl);\n        return response.result;\n    }\n\n    async export(\n        text: string | undefined,\n        definition: string | undefined,\n        audioClip: AudioClip | undefined,\n        image: Image | undefined,\n        word: string | undefined,\n        source: string | undefined,\n        url: string | undefined,\n        customFieldValues: { [key: string]: string },\n        tags: string[],\n        mode: AnkiExportMode,\n        ankiConnectUrl?: string\n    ) {\n        const fields = {};\n\n        this._appendField(fields, this.settingsProvider.sentenceField, text, true);\n        this._appendField(fields, this.settingsProvider.definitionField, definition, true);\n        this._appendField(fields, this.settingsProvider.wordField, word, false);\n        this._appendField(fields, this.settingsProvider.sourceField, source, false);\n        this._appendField(fields, this.settingsProvider.urlField, url, false);\n\n        if (customFieldValues) {\n            for (const customFieldName of Object.keys(customFieldValues)) {\n                this._appendField(\n                    fields,\n                    this.settingsProvider.customAnkiFields[customFieldName],\n                    customFieldValues[customFieldName],\n                    true\n                );\n            }\n        }\n\n        const params: any = {\n            note: {\n                deckName: this.settingsProvider.deck,\n                modelName: this.settingsProvider.noteType,\n                tags: tags,\n                options: {\n                    allowDuplicate: false,\n                    duplicateScope: 'deck',\n                    duplicateScopeOptions: {\n                        deckName: this.settingsProvider.deck,\n                        checkChildren: false,\n                    },\n                },\n            },\n        };\n\n        const gui = mode === 'gui';\n        const updateLast = mode === 'updateLast';\n\n        if (this.settingsProvider.audioField && audioClip) {\n            const sanitizedName = this._sanitizeFileName(audioClip.name);\n\n            if (gui || updateLast) {\n                const fileName = (await this._storeMediaFile(sanitizedName, await audioClip.base64(), ankiConnectUrl))\n                    .result;\n                this._appendField(fields, this.settingsProvider.audioField, `[sound:${fileName}]`, false);\n            } else {\n                params.note['audio'] = {\n                    filename: sanitizedName,\n                    data: await audioClip.base64(),\n                    fields: [this.settingsProvider.audioField],\n                };\n            }\n        }\n\n        if (this.settingsProvider.imageField && image) {\n            const sanitizedName = this._sanitizeFileName(image.name);\n\n            if (gui || updateLast) {\n                const fileName = (await this._storeMediaFile(sanitizedName, await image.base64(), ankiConnectUrl))\n                    .result;\n                this._appendField(\n                    fields,\n                    this.settingsProvider.imageField,\n                    `<div><img src=\"${fileName}\"></div>`,\n                    false\n                );\n            } else {\n                params.note['picture'] = {\n                    filename: sanitizedName,\n                    data: await image.base64(),\n                    fields: [this.settingsProvider.imageField],\n                };\n            }\n        }\n\n        params.note['fields'] = fields;\n\n        switch (mode) {\n            case 'gui':\n                return (await this._executeAction('guiAddCards', params, ankiConnectUrl)).result;\n            case 'updateLast':\n                const recentNotes = (\n                    await this._executeAction('findNotes', { query: 'added:1' }, ankiConnectUrl)\n                ).result.sort();\n\n                if (recentNotes.length === 0) {\n                    throw new Error('Could not find note to update');\n                }\n\n                const lastNoteId = recentNotes[recentNotes.length - 1];\n                params.note['id'] = lastNoteId;\n                const infoResponse = await this._executeAction('notesInfo', { notes: [lastNoteId] });\n\n                if (infoResponse.result.length > 0 && infoResponse.result[0].noteId === lastNoteId) {\n                    const info = infoResponse.result[0];\n\n                    if (\n                        this.settingsProvider.sentenceField &&\n                        info.fields &&\n                        typeof info.fields[this.settingsProvider.sentenceField]?.value === 'string' &&\n                        typeof params.note.fields[this.settingsProvider.sentenceField] === 'string'\n                    ) {\n                        params.note.fields[this.settingsProvider.sentenceField] = this._inheritHtmlMarkup(\n                            params.note.fields[this.settingsProvider.sentenceField],\n                            info.fields[this.settingsProvider.sentenceField].value\n                        );\n                    }\n\n                    await this._executeAction('updateNoteFields', params, ankiConnectUrl);\n\n                    if (!this.settingsProvider.wordField || !info.fields) {\n                        return info.noteId;\n                    }\n\n                    const wordField = info.fields[this.settingsProvider.wordField];\n\n                    if (!wordField || !wordField.value) {\n                        return info.noteId;\n                    }\n\n                    return wordField.value;\n                }\n\n                throw new Error('Could not update last card because the card info could not be fetched');\n            case 'default':\n                return (await this._executeAction('addNote', params, ankiConnectUrl)).result;\n            default:\n                throw new Error('Unknown export mode: ' + mode);\n        }\n    }\n\n    private _appendField(fields: any, fieldName: string | undefined, value: string | undefined, multiline: boolean) {\n        if (!fieldName || !value) {\n            return;\n        }\n\n        let newValue = multiline ? value.split('\\n').join('<br>') : value;\n        const existingValue = fields[fieldName];\n\n        if (existingValue) {\n            newValue = existingValue + '<br>' + newValue;\n        }\n\n        fields[fieldName] = newValue;\n    }\n\n    private _sanitizeFileName(name: string) {\n        return sanitize(name, { replacement: '_' });\n    }\n\n    private _inheritHtmlMarkup(original: string, markedUp: string) {\n        const htmlTagRegex = RegExp('<[^>]*>(.*?)</[^>]*>', 'ig');\n        const markedUpWithoutBreaklines = markedUp.replace('<br>', '');\n        let inherited = original;\n\n        while (true) {\n            const match = htmlTagRegex.exec(markedUpWithoutBreaklines);\n\n            if (match === null || match.length < 2) {\n                break;\n            }\n\n            inherited = inherited.replace(match[1], match[0]);\n        }\n\n        return inherited;\n    }\n\n    private async _storeMediaFile(name: string, base64: string, ankiConnectUrl?: string) {\n        return this._executeAction('storeMediaFile', { filename: name, data: base64 }, ankiConnectUrl);\n    }\n\n    private async _executeAction(action: string, params: any, ankiConnectUrl?: string) {\n        const body: any = {\n            action: action,\n            version: 6,\n        };\n\n        if (params) {\n            body['params'] = params;\n        }\n\n        const json = await this.fetcher.fetch(ankiConnectUrl || this.settingsProvider.ankiConnectUrl, body);\n\n        if (json.error) {\n            throw new Error(json.error);\n        }\n\n        return json;\n    }\n}\n","import { AnkiSettings } from './Settings';\n\nexport interface RectModel {\n    readonly left: number;\n    readonly top: number;\n    readonly width: number;\n    readonly height: number;\n}\n\nexport interface DimensionsModel {\n    readonly width: number;\n    readonly height: number;\n}\n\nexport interface SubtitleTextImage {\n    readonly dataUrl: string;\n    readonly screen: DimensionsModel;\n    readonly image: DimensionsModel;\n}\n\nexport interface SubtitleModel {\n    readonly text: string;\n    readonly textImage?: SubtitleTextImage;\n    readonly start: number;\n    readonly end: number;\n    readonly originalStart: number;\n    readonly originalEnd: number;\n    readonly track: number;\n}\n\nexport interface CopiedSubtitleModel extends SubtitleModel {\n    surroundingSubtitles: SubtitleModel[];\n    timestamp: number;\n    id: string;\n    name: string;\n    subtitleFile?: File;\n    audioFile?: File;\n    videoFile?: File;\n    audioTrack?: number;\n    audio?: AudioModel;\n    image?: ImageModel;\n}\n\nexport interface ImageModel {\n    readonly base64: string;\n    readonly extension: 'jpeg';\n}\n\nexport interface AudioModel {\n    readonly base64: string;\n    readonly extension: 'webm' | 'mp3';\n    readonly paddingStart: number;\n    readonly paddingEnd: number;\n    readonly start?: number;\n    readonly end?: number;\n    readonly playbackRate?: number;\n}\n\nexport interface AnkiDialogSliderContext {\n    subtitleStart: number;\n    subtitleEnd: number;\n    subtitles: SubtitleModel[];\n}\n\nexport interface AnkiUiState {\n    readonly type: 'initial' | 'resume';\n    readonly open: boolean;\n    readonly settingsProvider: AnkiSettings;\n    readonly subtitle: SubtitleModel;\n    readonly url: string;\n    readonly source: string;\n    readonly image?: ImageModel;\n    readonly audio?: AudioModel;\n    readonly themeType: string;\n    readonly dialogRequestedTimestamp: number;\n}\n\nexport interface AnkiUiInitialState extends AnkiUiState {\n    readonly type: 'initial';\n    readonly surroundingSubtitles: SubtitleModel[];\n}\n\nexport interface AnkiUiResumeState extends AnkiUiState {\n    readonly type: 'resume';\n\n    readonly text: string;\n    readonly initialTimestampInterval: number[];\n    readonly timestampInterval: number[];\n    readonly timestampBoundaryInterval?: number[];\n    readonly sliderContext: AnkiDialogSliderContext;\n    readonly definition: string;\n    readonly word: string;\n    readonly customFieldValues: { [key: string]: string };\n    readonly lastAppliedTimestampIntervalToText: number[];\n    readonly lastAppliedTimestampIntervalToAudio?: number[];\n}\n\nexport interface AnkiUiSavedState {\n    subtitle: SubtitleModel;\n    text: string;\n    sliderContext: AnkiDialogSliderContext;\n    definition: string;\n    image?: ImageModel;\n    audio?: AudioModel;\n    word: string;\n    source: string;\n    url: string;\n    customFieldValues: { [key: string]: string };\n    timestampInterval: number[];\n    initialTimestampInterval: number[];\n    timestampBoundaryInterval?: number[];\n    lastAppliedTimestampIntervalToText: number[];\n    lastAppliedTimestampIntervalToAudio?: number[];\n    dialogRequestedTimestamp: number;\n}\n\nexport interface VideoDataSubtitleTrack {\n    label: string;\n    language: string;\n    url: string;\n    m3U8BaseUrl?: string;\n    extension: string;\n}\n\nexport interface ConfirmedVideoDataSubtitleTrack {\n    name: string;\n    language: string;\n    subtitleUrl: string;\n    m3U8BaseUrl?: string;\n    extension: string;\n}\n\nexport interface VideoData {\n    basename: string;\n    error?: string;\n    subtitles?: VideoDataSubtitleTrack[];\n}\n\nexport interface VideoDataUiState {\n    open?: boolean;\n    isLoading?: boolean;\n    suggestedName?: string;\n    subtitles?: VideoDataSubtitleTrack[];\n    error?: string;\n    themeType?: string;\n    selectedSubtitle?: string;\n    showSubSelect?: boolean;\n    openedFromMiningCommand?: boolean;\n}\n\nexport interface VideoTabModel {\n    id: number; // Actually the tab ID\n    title?: string;\n    src: string; // Video src\n}\n\nexport interface Rgb {\n    r: number;\n    g: number;\n    b: number;\n}\n\nexport interface AudioTrackModel {\n    id: string;\n    label: string;\n    language: string;\n}\n\nexport enum PostMineAction {\n    none = 0,\n    showAnkiDialog = 1,\n    updateLastCard = 2,\n}\n\nexport enum AutoPausePreference {\n    atStart = 1,\n    atEnd = 2,\n}\n\nexport enum PlayMode {\n    normal = 1,\n    condensed = 2,\n    autoPause = 3,\n}\n","import IntervalTree, { Interval, NumericTuple } from '@flatten-js/interval-tree';\nimport { SubtitleModel } from './Model';\n\nexport interface SubtitleSlice<T> {\n    showing: T[];\n    lastShown?: T[];\n    nextToShow?: T[];\n    startedShowing?: T;\n    willStopShowing?: T;\n}\n\nexport interface SubtitleCollectionOptions {\n    returnLastShown?: boolean;\n    returnNextToShow?: boolean;\n    showingCheckRadiusMs?: number;\n}\n\nexport class SubtitleCollection<T extends SubtitleModel> {\n    static emptySubtitleCollection = new SubtitleCollection([]);\n\n    // Tree for subtitles\n    private readonly tree: IntervalTree<T>;\n    // Tree for gaps between subtitles. The gaps are populated with the last subtitle before the gap.\n    private readonly gapsTree?: IntervalTree<T>;\n    private readonly options: SubtitleCollectionOptions;\n\n    constructor(subtitles: T[], options: SubtitleCollectionOptions = {}) {\n        this.tree = new IntervalTree<T>();\n        this.options = options;\n\n        if (options.returnLastShown || options.returnNextToShow) {\n            let last: T | undefined;\n            this.gapsTree = new IntervalTree<T>();\n\n            if (subtitles.length > 0 && subtitles[0].start > 0) {\n                this.gapsTree.insert([0, subtitles[0].start - 1], subtitles[0]);\n            }\n\n            for (const s of subtitles) {\n                this.tree.insert([s.start, s.end], s);\n\n                if (last !== undefined && last.end < s.start) {\n                    this.gapsTree.insert([last.end + 1, s.start - 1], last);\n                }\n\n                last = s;\n            }\n        } else {\n            for (const s of subtitles) {\n                this.tree.insert([s.start, s.end], s);\n            }\n        }\n    }\n\n    static empty<S extends SubtitleModel>() {\n        return SubtitleCollection.emptySubtitleCollection as SubtitleCollection<S>;\n    }\n\n    subtitlesAt(timestamp: number): SubtitleSlice<T> {\n        const interval: NumericTuple = [timestamp, timestamp];\n        const showing = this.tree.search(interval) as T[];\n        let lastShown: T[] | undefined;\n        let nextToShow: T[] | undefined;\n        let startedShowing: T | undefined;\n        let willStopShowing: T | undefined;\n\n        if (showing.length === 0) {\n            if (this.gapsTree !== undefined) {\n                // One of returnLastShown or returnNextToShow is true due to constructor\n                const gapIntervals: Interval[] = [];\n                lastShown = this.gapsTree.search(interval, (s, i) => {\n                    gapIntervals.push(i);\n                    return s;\n                }) as T[];\n\n                if (lastShown.length > 0 && this.options.returnNextToShow) {\n                    const nextStart = gapIntervals[0].high + 1;\n                    nextToShow = this.tree.search([nextStart, nextStart]) as T[];\n                }\n            }\n        } else if (this.options.showingCheckRadiusMs !== undefined) {\n            for (const s of showing) {\n                if (willStopShowing === undefined && s.end < timestamp + this.options.showingCheckRadiusMs) {\n                    willStopShowing = s;\n                }\n\n                if (startedShowing === undefined && timestamp - this.options.showingCheckRadiusMs < s.start) {\n                    startedShowing = s;\n                }\n\n                if (startedShowing !== undefined && willStopShowing !== undefined) {\n                    break;\n                }\n            }\n        }\n\n        return { showing, lastShown, nextToShow, startedShowing, willStopShowing };\n    }\n}\n","import { SubtitleModel } from './Model';\n\nexport default class AutoPauseContext {\n    private lastStartedShowing?: SubtitleModel;\n    private lastWillStopShowing?: SubtitleModel;\n\n    onStartedShowing?: () => void;\n    onWillStopShowing?: () => void;\n    onNextToShow?: (subtitle: SubtitleModel) => void;\n\n    willStopShowing(subtitle: SubtitleModel) {\n        if (subtitle.end === this.lastWillStopShowing?.end) {\n            return;\n        }\n\n        this.onWillStopShowing?.();\n        this.lastWillStopShowing = subtitle;\n    }\n\n    startedShowing(subtitle: SubtitleModel) {\n        if (subtitle.start === this.lastStartedShowing?.start) {\n            return;\n        }\n\n        this.onStartedShowing?.();\n        this.lastStartedShowing = subtitle;\n    }\n\n    clear() {\n        this.lastStartedShowing = undefined;\n        this.lastWillStopShowing = undefined;\n    }\n}\n","import { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport MuiAlert, { Color } from '@material-ui/lab/Alert';\nimport Grow from '@material-ui/core/Grow';\n\nconst useAlertStyles = makeStyles({\n    root: {\n        display: 'flex',\n        justifyContent: 'center',\n        position: 'fixed',\n        top: 80,\n        width: '100%',\n        pointerEvents: 'none',\n        zIndex: 2000,\n    },\n});\n\ninterface Props {\n    open: boolean;\n    autoHideDuration: number;\n    onClose: () => void;\n    severity: Color | undefined;\n    children: React.ReactNode\n}\n\nexport default function Alert(props: Props) {\n    const classes = useAlertStyles();\n\n    useEffect(() => {\n        if (props.open) {\n            const timeout = setTimeout(props.onClose, props.autoHideDuration);\n            return () => clearTimeout(timeout);\n        }\n    }, [props.open, props.autoHideDuration, props.onClose]);\n\n    return (\n        <div className={classes.root}>\n            <Grow in={props.open}>\n                <MuiAlert severity={props.severity}>{props.children}</MuiAlert>\n            </Grow>\n        </div>\n    );\n}\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport { TextFieldProps } from \"@material-ui/core\";\nimport TextField from \"@material-ui/core/TextField\";\n\nfunction extractTagsFromString(value: string) {\n    const splitTags = value.split(' ').join('').split(',');\n    const tags = [];\n\n    for (const tag of splitTags) {\n        tags.push(tag.trim());\n    }\n\n    return tags;\n}\n\nexport interface Props {\n    tags: string[];\n    onTagsChange: (tags: string[]) => void;\n}\n\nexport default function TagsTextField({tags, onTagsChange, ...props}: Props & TextFieldProps) {\n    const [value, setValue] = useState('');\n\n    useEffect(() => {\n        const tagsString = tags.join(', ');\n\n        if (tagsString !== value) {\n            setValue(tags.join(', '));\n        }\n    }, [value, tags]);\n\n    const handleChange = useCallback((e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        let currentValue = e.target.value;\n\n        if (\n            value.length > currentValue.length &&\n            value.includes(currentValue) &&\n            currentValue.endsWith(',')\n        ) {\n            // Detected a backspace at the last comma, move cursor back enough to remove the comma\n            currentValue = currentValue.substring(0, currentValue.length - 1);\n        }\n\n        // Decompose string into individual tags by removing all spaces and splitting on \",\"\n        const newTags = extractTagsFromString(currentValue);\n        setValue(newTags.join(', '));\n        onTagsChange(newTags);\n    }, [value, onTagsChange]);\n\n    return (\n        <TextField\n            {...props}\n            value={value}\n            onChange={handleChange}\n        />\n    );\n}\n","import React, { useEffect, useState, useLayoutEffect } from 'react';\nimport makeStyles from '@material-ui/styles/makeStyles';\nimport Card from '@material-ui/core/Card';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Dialog from '@material-ui/core/Dialog';\nimport { Image as CommonImage } from '@project/common';\n\ninterface ImageDimensions {\n    width: number;\n    height: number;\n}\n\nconst useStyles = makeStyles((theme) => ({\n    image: ({ width, height }: ImageDimensions) => ({\n        width: width,\n        height: height,\n        backgroundSize: 'contain',\n    }),\n}));\n\n// https://stackoverflow.com/questions/19014250/rerender-view-on-browser-resize-with-react\nfunction useWindowSize() {\n    const [size, setSize] = useState([0, 0]);\n\n    useLayoutEffect(() => {\n        function updateSize() {\n            setSize([window.innerWidth, window.innerHeight]);\n        }\n\n        window.addEventListener('resize', updateSize);\n        updateSize();\n\n        return () => window.removeEventListener('resize', updateSize);\n    }, []);\n\n    return size;\n}\n\ninterface Props {\n    open: boolean;\n    image?: CommonImage;\n    onClose: () => void;\n}\n\nexport default function ImageDialog({ open, image, onClose }: Props) {\n    const [dataUrl, setDataUrl] = useState<string>();\n    const [width, setWidth] = useState<number>(0);\n    const [height, setHeight] = useState<number>(0);\n    const [windowWidth, windowHeight] = useWindowSize();\n\n    let resizeRatio;\n\n    if (width > 0 && height > 0) {\n        resizeRatio = Math.min(1, Math.min(windowWidth / (2 * width), windowHeight / (2 * height)));\n    } else {\n        resizeRatio = 1;\n    }\n\n    const classes = useStyles({ width: width * resizeRatio, height: height * resizeRatio });\n\n    useEffect(() => {\n        setDataUrl(undefined);\n        async function fetchImage() {\n            if (!image) {\n                return;\n            }\n\n            const dataUrl = await image.dataUrl();\n            const img = new Image();\n            img.onload = () => {\n                setWidth(img.width);\n                setHeight(img.height);\n                setDataUrl(dataUrl);\n            };\n            img.src = dataUrl;\n        }\n\n        fetchImage();\n    }, [image]);\n\n    if (!image || !dataUrl) {\n        return null;\n    }\n\n    return (\n        <Dialog open={open} onClose={onClose} maxWidth=\"lg\">\n            <Card>\n                <CardMedia\n                    className={classes.image}\n                    image={dataUrl}\n                    title={image.name}\n                    style={{ width: width * resizeRatio, height: height * resizeRatio }}\n                />\n            </Card>\n        </Dialog>\n    );\n}\n","import React from 'react';\nimport { SubtitleModel } from '../..';\n\ninterface Props {\n    subtitle: SubtitleModel;\n    availableWidth: number;\n    scale: number;\n}\n\nexport default function SubtitleTextImage({ subtitle, availableWidth, scale }: Props) {\n    if (subtitle.textImage === undefined) {\n        return null;\n    }\n\n    const imageScale = (scale * availableWidth) / subtitle.textImage.screen.width;\n    const width = imageScale * subtitle.textImage.image.width;\n\n    return (\n        <div style={{ maxWidth: width }}>\n            <img style={{ width: '100%' }} alt=\"subtitle\" src={subtitle.textImage.dataUrl} />\n        </div>\n    );\n}\n","import React, { MutableRefObject, useCallback, useState, useEffect } from 'react';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport {\n    Anki,\n    AnkiDialogSliderContext,\n    AudioClip,\n    Image,\n    humanReadableTime,\n    AnkiSettings,\n    SubtitleModel,\n    surroundingSubtitles,\n    subtitleIntersectsTimeInterval,\n    joinSubtitles,\n} from '@project/common';\nimport Button from '@material-ui/core/Button';\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DoneIcon from '@material-ui/icons/Done';\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Paper from '@material-ui/core/Paper';\nimport RestoreIcon from '@material-ui/icons/Restore';\nimport SearchIcon from '@material-ui/icons/Search';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport Slider, { Mark } from '@material-ui/core/Slider';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport ZoomInIcon from '@material-ui/icons/ZoomIn';\nimport ZoomOutIcon from '@material-ui/icons/ZoomOut';\nimport SubtitleTextImage from './SubtitleTextImage';\nimport TagsTextField from './TagsTextField';\nimport { AnkiExportMode } from '@project/common';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& .MuiTextField-root': {\n            marginBottom: theme.spacing(1),\n        },\n    },\n    title: {\n        flexGrow: 1,\n    },\n    mediaField: {\n        cursor: 'pointer',\n        '& input': {\n            cursor: 'pointer',\n        },\n    },\n    rangeSelectSlider: {\n        '& .MuiSlider-markLabel': {\n            transform: 'translateX(-3%)',\n        },\n    },\n}));\n\nconst boundaryIntervalSubtitleCountRadius = 1;\nconst boundaryIntervalSubtitleTimeRadius = 5000;\n\nfunction boundaryIntervalFromSliderContext(sliderContext: AnkiDialogSliderContext) {\n    let index = sliderContext.subtitles.findIndex((s) => s.start === sliderContext.subtitleStart);\n    index = index === -1 ? sliderContext.subtitles.length / 2 : index;\n\n    const subtitlesToDisplay = surroundingSubtitles(\n        sliderContext.subtitles,\n        index,\n        boundaryIntervalSubtitleCountRadius,\n        boundaryIntervalSubtitleTimeRadius\n    );\n\n    let min = null;\n    let max = null;\n\n    for (const s of subtitlesToDisplay) {\n        if (min === null || s.start < min) {\n            min = s.start;\n        }\n\n        if (max === null || s.end > max) {\n            max = s.end;\n        }\n    }\n\n    return min !== null && max !== null && [min, max];\n}\n\nfunction sliderMarksFromSliderContext(sliderContext: AnkiDialogSliderContext, boundary: number[]): Mark[] {\n    const seenTimestamps: any = {};\n\n    return sliderContext.subtitles\n        .filter((s) => s.text.trim() !== '' || s.textImage !== undefined)\n        .map((s) => {\n            if (s.start in seenTimestamps) {\n                return null;\n            }\n\n            seenTimestamps[s.start] = true;\n\n            return {\n                value: s.start,\n                label: `${s.text.trim().substring(0, Math.min(s.text.length, 3))}...`,\n            };\n        })\n        .filter((mark: Mark | null) => mark !== null)\n        .filter((mark: Mark | null) => mark!.value >= boundary[0] && mark!.value <= boundary[1]) as Mark[];\n}\n\nfunction sliderValueLabelFormat(ms: number) {\n    return humanReadableTime(ms, true);\n}\n\ninterface ValueLabelComponentProps {\n    children: React.ReactElement;\n    open: boolean;\n    value: number;\n}\n\nfunction ValueLabelComponent({ children, open, value }: ValueLabelComponentProps) {\n    return (\n        <Tooltip open={open} enterTouchDelay={0} placement=\"top\" title={value}>\n            {children}\n        </Tooltip>\n    );\n}\n\ninterface TextImageSetProps {\n    selectedSubtitles: SubtitleModel[];\n    width: number;\n}\n\nconst useTextImageSetStyles = makeStyles((theme) => ({\n    root: {\n        marginBottom: theme.spacing(1),\n        padding: theme.spacing(1),\n        backgroundColor: theme.palette.action.disabledBackground,\n    },\n}));\n\nfunction TextImageSet({ selectedSubtitles, width }: TextImageSetProps) {\n    const classes = useTextImageSetStyles();\n\n    if (selectedSubtitles.length === 0 || width <= 0) {\n        return null;\n    }\n\n    return (\n        <Paper elevation={0} className={classes.root}>\n            {selectedSubtitles.map((s, index) => {\n                return <SubtitleTextImage key={index} availableWidth={width} subtitle={s} scale={1} />;\n            })}\n        </Paper>\n    );\n}\n\nconst TextFieldEndAdornment = withStyles({\n    // Hack to recenter TextField end adornment\n    root: {\n        transform: 'translateY(-8px)',\n    },\n})(InputAdornment);\n\nexport interface AnkiDialogState {\n    text: string;\n    sliderContext?: AnkiDialogSliderContext;\n    definition: string;\n    word: string;\n    source: string;\n    url: string;\n    customFieldValues: { [key: string]: string };\n    lastAppliedTimestampIntervalToText?: number[];\n    lastAppliedTimestampIntervalToAudio?: number[];\n    initialTimestampInterval?: number[];\n    timestampBoundaryInterval?: number[];\n    timestampInterval?: number[];\n}\n\ninterface AnkiDialogProps {\n    open: boolean;\n    disabled: boolean;\n    text?: string;\n    onProceed: (\n        text: string,\n        definition: string,\n        audioClip: AudioClip | undefined,\n        image: Image | undefined,\n        word: string,\n        source: string,\n        url: string,\n        customFieldValues: { [key: string]: string },\n        tags: string[],\n        mode: AnkiExportMode\n    ) => void;\n    onRerecord?: () => void;\n    onRewind: () => void;\n    onCancel: () => void;\n    onViewImage: (image: Image) => void;\n    onOpenSettings?: () => void;\n    audioClip?: AudioClip;\n    image?: Image;\n    source?: string;\n    url?: string;\n    sliderContext?: AnkiDialogSliderContext;\n    settingsProvider: AnkiSettings;\n    anki: Anki;\n    definition?: string;\n    word?: string;\n    customFields: { [key: string]: string };\n    customFieldValues?: { [key: string]: string };\n    initialTimestampInterval?: number[];\n    timestampBoundaryInterval?: number[];\n    timestampInterval?: number[];\n    lastAppliedTimestampIntervalToText?: number[];\n    lastAppliedTimestampIntervalToAudio?: number[];\n    stateRef?: MutableRefObject<AnkiDialogState | undefined>;\n}\n\nexport function AnkiDialog({\n    open,\n    disabled,\n    text: initialText,\n    onProceed,\n    onRewind,\n    onCancel,\n    onViewImage,\n    onOpenSettings,\n    onRerecord,\n    audioClip: initialAudioClip,\n    image,\n    source: initialSource,\n    url: initialUrl,\n    sliderContext,\n    customFields,\n    settingsProvider,\n    anki,\n    definition: initialDefinition,\n    word: initialWord,\n    customFieldValues: initialCustomFieldValues,\n    timestampInterval: initialSelectedTimestampInterval,\n    timestampBoundaryInterval: forceTimestampBoundaryInterval,\n    initialTimestampInterval: forceInitialTimestampInterval,\n    lastAppliedTimestampIntervalToText: initialLastAppliedTimestampIntervalToText,\n    lastAppliedTimestampIntervalToAudio: initialLastAppliedTimestampIntervalToAudio,\n    stateRef,\n}: AnkiDialogProps) {\n    const classes = useStyles();\n    const [definition, setDefinition] = useState<string>('');\n    const [text, setText] = useState<string>('');\n    const [word, setWord] = useState<string>('');\n    const [lastSearchedWord, setLastSearchedWord] = useState<string>();\n    const [source, setSource] = useState<string>(initialSource ?? '');\n    const [tags, setTags] = useState<string[]>(settingsProvider.tags);\n    const [url, setUrl] = useState<string>(initialUrl ?? '');\n    const [duplicateNotes, setDuplicateNotes] = useState<any[]>([]);\n    const [wordTimestamp, setWordTimestamp] = useState<number>(0);\n    const [customFieldValues, setCustomFieldValues] = useState<{ [key: string]: string }>({});\n    const [timestampInterval, setTimestampInterval] = useState<number[]>();\n    const [selectedSubtitles, setSelectedSubtitles] = useState<SubtitleModel[]>([]);\n    const [initialTimestampInterval, setInitialTimestampInterval] = useState<number[]>();\n    const [initialTimestampBoundaryInterval, setInitialTimestampBoundaryInterval] = useState<number[]>();\n    const [timestampBoundaryInterval, setTimestampBoundaryInterval] = useState<number[]>();\n    const [timestampMarks, setTimestampMarks] = useState<Mark[]>();\n    const [lastAppliedTimestampIntervalToText, setLastAppliedTimestampIntervalToText] = useState<number[]>();\n    const [lastAppliedTimestampIntervalToAudio, setLastAppliedTimestampIntervalToAudio] = useState<number[]>();\n    const [width, setWidth] = useState<number>(0);\n    const [audioClip, setAudioClip] = useState<AudioClip>();\n    const dialogRefCallback = useCallback((element: HTMLElement) => {\n        setWidth(element?.getBoundingClientRect().width ?? 0);\n    }, []);\n\n    if (stateRef) {\n        stateRef.current = {\n            text,\n            sliderContext,\n            definition,\n            word,\n            source,\n            url,\n            customFieldValues,\n            initialTimestampInterval,\n            timestampBoundaryInterval,\n            lastAppliedTimestampIntervalToText,\n            lastAppliedTimestampIntervalToAudio,\n            timestampInterval,\n        };\n    }\n\n    const textForTimestampInterval = useCallback(\n        (timestampInterval: number[]) => {\n            return joinSubtitles(\n                sliderContext!.subtitles.filter((s) => subtitleIntersectsTimeInterval(s, timestampInterval))\n            );\n        },\n        [sliderContext]\n    );\n\n    useEffect(() => {\n        setText(initialText ?? '');\n        setDefinition(initialDefinition ?? '');\n        setWord(initialWord ?? '');\n        setSource(initialSource ?? '');\n        setUrl(initialUrl ?? '');\n        setDuplicateNotes([]);\n        setCustomFieldValues(initialCustomFieldValues ?? {});\n    }, [initialText, initialSource, initialDefinition, initialWord, initialCustomFieldValues, initialUrl]);\n\n    useEffect(() => {\n        setTags(settingsProvider.tags);\n    }, [settingsProvider.tags]);\n\n    useEffect(() => {\n        const timestampInterval =\n            initialSelectedTimestampInterval ||\n            (sliderContext && [sliderContext.subtitleStart, sliderContext.subtitleEnd]) ||\n            undefined;\n        const timestampBoundaryInterval =\n            (sliderContext && boundaryIntervalFromSliderContext(sliderContext)) || undefined;\n        const timestampMarks =\n            (sliderContext && sliderMarksFromSliderContext(sliderContext, timestampBoundaryInterval!)) || undefined;\n        const selectedSubtitles =\n            sliderContext === undefined || timestampInterval === undefined\n                ? []\n                : sliderContext.subtitles.filter((s) => subtitleIntersectsTimeInterval(s, timestampInterval));\n        setText(initialText ?? joinSubtitles(selectedSubtitles));\n        setTimestampInterval(timestampInterval);\n        setSelectedSubtitles(selectedSubtitles);\n        setInitialTimestampInterval(forceInitialTimestampInterval || timestampInterval);\n        setLastAppliedTimestampIntervalToText(initialLastAppliedTimestampIntervalToText || timestampInterval);\n        setLastAppliedTimestampIntervalToAudio(initialLastAppliedTimestampIntervalToAudio || timestampInterval);\n        setTimestampBoundaryInterval(forceTimestampBoundaryInterval ?? timestampBoundaryInterval);\n        setInitialTimestampBoundaryInterval(timestampBoundaryInterval);\n        setTimestampMarks(timestampMarks);\n    }, [\n        sliderContext,\n        forceInitialTimestampInterval,\n        initialSelectedTimestampInterval,\n        forceTimestampBoundaryInterval,\n        initialLastAppliedTimestampIntervalToText,\n        initialLastAppliedTimestampIntervalToAudio,\n    ]);\n\n    useEffect(() => {\n        if (!initialAudioClip) {\n            setAudioClip(undefined);\n            return;\n        }\n\n        let newAudioClip = initialAudioClip;\n\n        if (settingsProvider.preferMp3) {\n            newAudioClip = newAudioClip.toMp3();\n        }\n\n        if (lastAppliedTimestampIntervalToAudio) {\n            newAudioClip = newAudioClip.slice(\n                Math.max(0, Math.round(lastAppliedTimestampIntervalToAudio[0]) - settingsProvider.audioPaddingStart),\n                Math.round(lastAppliedTimestampIntervalToAudio[1]) + settingsProvider.audioPaddingEnd\n            );\n        }\n\n        setAudioClip(newAudioClip);\n    }, [\n        initialAudioClip,\n        settingsProvider.preferMp3,\n        lastAppliedTimestampIntervalToAudio,\n        settingsProvider.audioPaddingStart,\n        settingsProvider.audioPaddingEnd,\n    ]);\n\n    useEffect(() => {\n        setWordTimestamp(Date.now());\n    }, [word]);\n\n    useEffect(() => {\n        if (!word || !settingsProvider.wordField) {\n            return;\n        }\n\n        const trimmedWord = word.trim();\n\n        if (trimmedWord === '' || trimmedWord === lastSearchedWord) {\n            return;\n        }\n\n        const timeout = setTimeout(async () => {\n            try {\n                setDuplicateNotes(await anki.findNotesWithWord(trimmedWord));\n                setLastSearchedWord(trimmedWord);\n            } catch (e) {\n                console.error(e);\n            }\n        }, 500);\n\n        return () => clearTimeout(timeout);\n    }, [word, wordTimestamp, lastSearchedWord, anki, settingsProvider.wordField]);\n\n    const handlePlayAudio = useCallback(\n        (e: React.MouseEvent<HTMLDivElement>) => {\n            if (!audioClip?.isPlayable()) {\n                return;\n            }\n\n            e.preventDefault();\n            e.stopPropagation();\n            audioClip!.play();\n        },\n        [audioClip]\n    );\n\n    const handleCustomFieldChange = useCallback(\n        (customFieldName: string, value: string) => {\n            const newCustomFieldValues: { [fieldName: string]: string } = {};\n            Object.assign(newCustomFieldValues, customFieldValues);\n            newCustomFieldValues[customFieldName] = value;\n            setCustomFieldValues(newCustomFieldValues);\n        },\n        [customFieldValues]\n    );\n\n    let wordHelperText;\n\n    if (word && word.trim() === lastSearchedWord && settingsProvider.wordField) {\n        wordHelperText =\n            duplicateNotes.length > 0\n                ? `Found ${duplicateNotes.length} notes with word \"${word}\" in field \"${settingsProvider.wordField}\"`\n                : `No notes found with word \"${word.trim()}\" in field \"${settingsProvider.wordField}\"`;\n    } else {\n        wordHelperText = '';\n    }\n\n    const handleViewImage = useCallback(\n        (e: React.MouseEvent<HTMLDivElement>) => {\n            if (!image?.available) {\n                return;\n            }\n\n            e.preventDefault();\n            e.stopPropagation();\n            onViewImage(image!);\n        },\n        [image, onViewImage]\n    );\n\n    const handleApplyTimestampIntervalToText = useCallback(() => {\n        if (timestampInterval === undefined) {\n            return;\n        }\n\n        const newText = textForTimestampInterval(timestampInterval);\n        setText(newText);\n        setLastAppliedTimestampIntervalToText(timestampInterval);\n    }, [textForTimestampInterval, timestampInterval]);\n\n    const handleTimestampIntervalChange = useCallback(\n        (e: React.ChangeEvent<{}>, newValue: number | number[]) => {\n            const newTimestampInterval = newValue as number[];\n            setTimestampInterval(newTimestampInterval);\n            const selectedSubtitles = sliderContext!.subtitles.filter((s) =>\n                subtitleIntersectsTimeInterval(s, newTimestampInterval)\n            );\n            setSelectedSubtitles(selectedSubtitles);\n\n            if (lastAppliedTimestampIntervalToText !== undefined) {\n                const expectedUnchangedText = textForTimestampInterval(lastAppliedTimestampIntervalToText);\n\n                if (text.trim() === expectedUnchangedText.trim()) {\n                    const newText = textForTimestampInterval(newTimestampInterval);\n                    setText(newText);\n                    setLastAppliedTimestampIntervalToText(newTimestampInterval);\n                }\n            }\n\n            if (onRerecord === undefined && audioClip?.isSliceable() === true) {\n                setLastAppliedTimestampIntervalToAudio(newTimestampInterval);\n            }\n        },\n        [sliderContext, text, lastAppliedTimestampIntervalToText, textForTimestampInterval]\n    );\n\n    const handleApplyTimestampIntervalToAudio = useCallback(\n        (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n            if (onRerecord) {\n                e.stopPropagation();\n                onRerecord();\n            } else {\n                setLastAppliedTimestampIntervalToAudio(timestampInterval);\n            }\n        },\n        [onRerecord, timestampInterval]\n    );\n\n    const handleResetTimestampInterval = useCallback(() => {\n        if (!initialTimestampBoundaryInterval) {\n            return;\n        }\n\n        const selectedSubtitles =\n            sliderContext === undefined || initialTimestampInterval === undefined\n                ? []\n                : sliderContext.subtitles.filter((s) => subtitleIntersectsTimeInterval(s, initialTimestampInterval));\n        setSelectedSubtitles(selectedSubtitles);\n        setTimestampInterval(initialTimestampInterval);\n        setTimestampBoundaryInterval(initialTimestampBoundaryInterval);\n        setTimestampMarks(\n            sliderContext && sliderMarksFromSliderContext(sliderContext, initialTimestampBoundaryInterval)\n        );\n    }, [initialTimestampInterval, initialTimestampBoundaryInterval, sliderContext]);\n\n    const handleZoomInTimestampInterval = useCallback(() => {\n        if (!timestampBoundaryInterval || !timestampInterval) {\n            return;\n        }\n\n        const newMin = (timestampBoundaryInterval[0] + timestampInterval[0]) / 2;\n        const newMax = (timestampBoundaryInterval[1] + timestampInterval[1]) / 2;\n        const newTimestampBoundaryInterval = [newMin, newMax];\n        setTimestampBoundaryInterval(newTimestampBoundaryInterval);\n        setTimestampMarks(sliderContext && sliderMarksFromSliderContext(sliderContext, newTimestampBoundaryInterval));\n    }, [timestampBoundaryInterval, timestampInterval, sliderContext]);\n\n    const handleZoomOutTimestampInterval = useCallback(() => {\n        if (!timestampBoundaryInterval || !timestampInterval) {\n            return;\n        }\n\n        const currentLength = timestampBoundaryInterval[1] - timestampBoundaryInterval[0];\n        const minimumChange = currentLength / 4;\n        const newMin = Math.max(\n            0,\n            Math.min(\n                timestampBoundaryInterval[0] - minimumChange,\n                2 * timestampBoundaryInterval[0] - timestampInterval[0]\n            )\n        );\n        const newMax = Math.max(\n            timestampBoundaryInterval[1] + minimumChange,\n            2 * timestampBoundaryInterval[1] - timestampInterval[1]\n        );\n        const newTimestampBoundaryInterval = [newMin, newMax];\n        setTimestampBoundaryInterval(newTimestampBoundaryInterval);\n        setTimestampMarks(sliderContext && sliderMarksFromSliderContext(sliderContext, newTimestampBoundaryInterval));\n    }, [timestampBoundaryInterval, timestampInterval, sliderContext]);\n\n    const handleCopyImageToClipboard = useCallback(\n        async (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n            e.stopPropagation();\n\n            if (!image) {\n                return;\n            }\n\n            navigator.clipboard.write([new ClipboardItem({ 'image/png': await image.pngBlob() })]);\n        },\n        [image]\n    );\n\n    const disableApplyTextSelection =\n        !sliderContext || sliderContext.subtitles.filter((s) => s.text.trim() !== '').length === 0;\n\n    let audioActionElement: JSX.Element | undefined = undefined;\n\n    if (onRerecord !== undefined) {\n        audioActionElement = (\n            <Tooltip title=\"Apply Selection (rerecord)\">\n                <span>\n                    <IconButton\n                        disabled={\n                            !timestampInterval ||\n                            !lastAppliedTimestampIntervalToAudio ||\n                            (timestampInterval[0] === lastAppliedTimestampIntervalToAudio[0] &&\n                                timestampInterval[1] === lastAppliedTimestampIntervalToAudio[1])\n                        }\n                        onClick={handleApplyTimestampIntervalToAudio}\n                        edge=\"end\"\n                    >\n                        <FiberManualRecordIcon />\n                    </IconButton>\n                </span>\n            </Tooltip>\n        );\n    }\n\n    let audioHelperText: string | undefined;\n\n    if (audioClip) {\n        if (!audioClip.isPlayable()) {\n            audioHelperText = 'Audio file link lost because of page reload';\n        } else if (onRerecord === undefined && !audioClip.isSliceable()) {\n            audioHelperText = 'Audio clip cannot be updated because it is pre-recorded';\n        }\n    }\n\n    let imageHelperText: string | undefined;\n\n    if (image) {\n        if (!image.available) {\n            imageHelperText = 'Image file link lost because of page reload';\n        }\n    }\n\n    return (\n        <Dialog open={open} disableEnforceFocus fullWidth maxWidth=\"sm\" onClose={onCancel}>\n            <Toolbar>\n                <Typography variant=\"h6\" className={classes.title}>\n                    Anki Export\n                </Typography>\n                {onOpenSettings && (\n                    <IconButton edge=\"end\" onClick={() => onOpenSettings()}>\n                        <SettingsIcon />\n                    </IconButton>\n                )}\n            </Toolbar>\n            <DialogContent ref={dialogRefCallback}>\n                <form className={classes.root}>\n                    {sliderContext && timestampInterval && (\n                        <TextImageSet\n                            selectedSubtitles={selectedSubtitles.filter((s) => s.textImage !== undefined)}\n                            width={width}\n                        />\n                    )}\n                    <TextField\n                        variant=\"filled\"\n                        color=\"secondary\"\n                        multiline\n                        fullWidth\n                        maxRows={8}\n                        label=\"Sentence\"\n                        value={text}\n                        onChange={(e) => setText(e.target.value)}\n                        InputProps={{\n                            endAdornment: timestampInterval && (\n                                <TextFieldEndAdornment position=\"end\">\n                                    <Tooltip title=\"Apply Selection\">\n                                        <span>\n                                            <IconButton\n                                                disabled={\n                                                    !timestampInterval ||\n                                                    !lastAppliedTimestampIntervalToText ||\n                                                    (timestampInterval[0] === lastAppliedTimestampIntervalToText[0] &&\n                                                        timestampInterval[1] ===\n                                                            lastAppliedTimestampIntervalToText[1]) ||\n                                                    disableApplyTextSelection\n                                                }\n                                                onClick={handleApplyTimestampIntervalToText}\n                                                edge=\"end\"\n                                            >\n                                                <DoneIcon />\n                                            </IconButton>\n                                        </span>\n                                    </Tooltip>\n                                </TextFieldEndAdornment>\n                            ),\n                        }}\n                    />\n                    <TextField\n                        variant=\"filled\"\n                        color=\"secondary\"\n                        multiline\n                        fullWidth\n                        rows={8}\n                        label=\"Definition\"\n                        value={definition}\n                        onChange={(e) => setDefinition(e.target.value)}\n                    />\n                    <TextField\n                        variant=\"filled\"\n                        color=\"secondary\"\n                        fullWidth\n                        label=\"Word\"\n                        value={word}\n                        onChange={(e) => setWord(e.target.value)}\n                        helperText={wordHelperText}\n                        InputProps={{\n                            endAdornment: (\n                                <InputAdornment position=\"end\">\n                                    <Tooltip title=\"Search in Anki\">\n                                        <span>\n                                            <IconButton\n                                                disabled={\n                                                    disabled ||\n                                                    !settingsProvider.wordField ||\n                                                    !word ||\n                                                    word.trim() === ''\n                                                }\n                                                onClick={() => anki.findNotesWithWordGui(word.trim())}\n                                                edge=\"end\"\n                                            >\n                                                <SearchIcon />\n                                            </IconButton>\n                                        </span>\n                                    </Tooltip>\n                                </InputAdornment>\n                            ),\n                        }}\n                    />\n                    {Object.keys(customFields).map((customFieldName) => (\n                        <TextField\n                            key={customFieldName}\n                            variant=\"filled\"\n                            color=\"secondary\"\n                            fullWidth\n                            multiline\n                            maxRows={8}\n                            label={customFieldName}\n                            value={customFieldValues[customFieldName] || ''}\n                            onChange={(e) => handleCustomFieldChange(customFieldName, e.target.value)}\n                        />\n                    ))}\n                    {audioClip && (\n                        <div className={classes.mediaField} onClick={handlePlayAudio}>\n                            <TextField\n                                variant=\"filled\"\n                                color=\"secondary\"\n                                fullWidth\n                                value={audioClip.name}\n                                label=\"Audio\"\n                                helperText={audioHelperText}\n                                disabled={!audioClip.isPlayable()}\n                                InputProps={{\n                                    endAdornment: audioActionElement && timestampInterval && (\n                                        <InputAdornment position=\"end\">{audioActionElement}</InputAdornment>\n                                    ),\n                                }}\n                            />\n                        </div>\n                    )}\n                    {image && (\n                        <div className={classes.mediaField} onClick={handleViewImage}>\n                            <TextField\n                                variant=\"filled\"\n                                color=\"secondary\"\n                                fullWidth\n                                value={image.name}\n                                label=\"Image\"\n                                helperText={imageHelperText}\n                                disabled={!image.available}\n                                InputProps={{\n                                    endAdornment: (\n                                        <InputAdornment position=\"end\">\n                                            <Tooltip title=\"Copy to Clipboard\">\n                                                <span>\n                                                    <IconButton\n                                                        disabled={!image.available}\n                                                        onClick={handleCopyImageToClipboard}\n                                                        edge=\"end\"\n                                                    >\n                                                        <FileCopyIcon />\n                                                    </IconButton>\n                                                </span>\n                                            </Tooltip>\n                                        </InputAdornment>\n                                    ),\n                                }}\n                            />\n                        </div>\n                    )}\n                    <TextField\n                        variant=\"filled\"\n                        color=\"secondary\"\n                        fullWidth\n                        label=\"Source\"\n                        value={source}\n                        onChange={(e) => setSource(e.target.value)}\n                    />\n                    {initialUrl && (\n                        <TextField\n                            variant=\"filled\"\n                            color=\"secondary\"\n                            fullWidth\n                            label=\"URL\"\n                            value={url}\n                            onChange={(e) => setUrl(e.target.value)}\n                        />\n                    )}\n                    {settingsProvider.tags.length > 0 && (\n                        <TagsTextField\n                            variant=\"filled\"\n                            label=\"Tags\"\n                            helperText=\"Comma-separated list of strings\"\n                            fullWidth\n                            color=\"secondary\"\n                            tags={tags}\n                            onTagsChange={(newTags) => setTags(newTags)}\n                        />\n                    )}\n                    {timestampInterval && timestampBoundaryInterval && timestampMarks && (\n                        <Grid container direction=\"row\">\n                            <Grid item style={{ flexGrow: 1 }}>\n                                <Slider\n                                    ValueLabelComponent={ValueLabelComponent}\n                                    value={timestampInterval}\n                                    valueLabelFormat={sliderValueLabelFormat}\n                                    onChange={handleTimestampIntervalChange}\n                                    min={timestampBoundaryInterval[0]}\n                                    max={timestampBoundaryInterval[1]}\n                                    marks={timestampMarks}\n                                    step={1}\n                                    valueLabelDisplay=\"auto\"\n                                    className={classes.rangeSelectSlider}\n                                    color=\"secondary\"\n                                />\n                            </Grid>\n                            <Grid item>\n                                <Tooltip title=\"Reset\">\n                                    <span>\n                                        <IconButton\n                                            edge=\"end\"\n                                            style={{ marginTop: -8 }}\n                                            onClick={handleResetTimestampInterval}\n                                        >\n                                            <RestoreIcon />\n                                        </IconButton>\n                                    </span>\n                                </Tooltip>\n                            </Grid>\n                            <Grid item>\n                                <Tooltip title=\"Zoom In\">\n                                    <span>\n                                        <IconButton\n                                            edge=\"end\"\n                                            style={{ marginTop: -8 }}\n                                            onClick={handleZoomInTimestampInterval}\n                                        >\n                                            <ZoomInIcon />\n                                        </IconButton>\n                                    </span>\n                                </Tooltip>\n                            </Grid>\n                            <Grid item>\n                                <Tooltip title=\"Zoom Out\">\n                                    <span>\n                                        <IconButton\n                                            edge=\"end\"\n                                            style={{ marginTop: -8 }}\n                                            onClick={handleZoomOutTimestampInterval}\n                                        >\n                                            <ZoomOutIcon />\n                                        </IconButton>\n                                    </span>\n                                </Tooltip>\n                            </Grid>\n                        </Grid>\n                    )}\n                </form>\n            </DialogContent>\n            <DialogActions>\n                <Button disabled={disabled} onClick={() => onCancel()}>\n                    Cancel\n                </Button>\n                {sliderContext && (\n                    <Button disabled={disabled} onClick={() => onRewind()}>\n                        Rewind\n                    </Button>\n                )}\n                <Button\n                    disabled={disabled}\n                    onClick={() =>\n                        onProceed(\n                            text,\n                            definition,\n                            audioClip,\n                            image,\n                            word,\n                            source ?? '',\n                            url ?? '',\n                            customFieldValues,\n                            tags,\n                            'gui'\n                        )\n                    }\n                >\n                    Open in Anki\n                </Button>\n                <Button\n                    disabled={disabled}\n                    onClick={() =>\n                        onProceed(\n                            text,\n                            definition,\n                            audioClip,\n                            image,\n                            word,\n                            source ?? '',\n                            url ?? '',\n                            customFieldValues,\n                            tags,\n                            'updateLast'\n                        )\n                    }\n                >\n                    Update Last Card\n                </Button>\n                <Button\n                    disabled={disabled}\n                    onClick={() =>\n                        onProceed(\n                            text,\n                            definition,\n                            audioClip,\n                            image,\n                            word,\n                            source ?? '',\n                            url ?? '',\n                            customFieldValues,\n                            tags,\n                            'default'\n                        )\n                    }\n                >\n                    Export\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n","export default __webpack_public_path__ + \"static/media/background-colored.cbc50e45.png\";","import { makeStyles } from '@material-ui/styles';\nimport Fade from '@material-ui/core/Fade';\nimport coloredBackground from './background-colored.png';\nimport { Theme } from '@material-ui/core';\n\ninterface StylesProps {\n    dragging: boolean;\n    appBarHidden: boolean;\n}\n\ninterface Props {\n    dragging: boolean;\n    appBarHidden: boolean;\n    loading: boolean;\n}\n\nconst useStyles = makeStyles<Theme, StylesProps>((theme) => ({\n    root: ({ dragging, appBarHidden }) => ({\n        position: 'absolute',\n        height: appBarHidden ? '100%' : 'calc(100% - 64px)',\n        width: '100%',\n        zIndex: 101,\n        pointerEvents: dragging ? 'auto' : 'none',\n    }),\n    transparentBackground: ({ appBarHidden }) => ({\n        '&::before': {\n            content: \"' '\",\n            position: 'absolute',\n            height: appBarHidden ? '100vh' : 'calc(100vh - 64px)',\n            width: '100%',\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            alignItems: 'center',\n            textAlign: 'center',\n            backgroundSize: '300px 300px',\n            backgroundRepeat: 'no-repeat',\n            backgroundPosition: 'center',\n            backgroundImage: `url(${coloredBackground})`,\n            backgroundBlendMode: 'overlay',\n            background: 'rgba(0, 0, 0, .3)',\n            filter: 'drop-shadow(10px 10px 10px rgb(0, 0, 0, .4))',\n        },\n        width: '100%',\n        height: '100%',\n    }),\n}));\n\nexport default function DragOverlay({ dragging, appBarHidden, loading }: Props) {\n    const classes = useStyles({ dragging, appBarHidden });\n\n    return (\n        <div className={classes.root}>\n            <Fade in={dragging || loading}>\n                <div className={classes.transparentBackground} />\n            </Fade>\n        </div>\n    );\n}\n","import { compile as parseAss } from 'ass-compiler';\nimport { Cue, parseSync as parseSrt, Node as SrtNode, stringifySync as writeSrt } from 'subtitle';\nimport { WebVTT } from 'vtt.js';\nimport { XMLParser } from 'fast-xml-parser';\nimport { DisplaySet, parseDisplaySets } from 'pgs-parser';\nimport { SubtitleTextImage } from '@project/common';\n\nconst tagRegex = RegExp('</?([^>]*)>', 'ig');\nconst assNewLineRegex = RegExp(/\\\\[nN]/, 'ig');\nconst helperElement = document.createElement('div');\nconst helperCanvas = document.createElement('canvas');\n\ninterface SubtitleNode {\n    start: number;\n    end: number;\n    text: string;\n    textImage?: SubtitleTextImage;\n    track: number;\n}\n\nexport interface TextFilter {\n    regex: RegExp;\n    replacement: string;\n}\n\nexport default class SubtitleReader {\n    private readonly _textFilter?: TextFilter;\n    private xmlParser?: XMLParser;\n\n    constructor(textFilter?: TextFilter) {\n        this._textFilter = textFilter;\n    }\n\n    async subtitles(files: File[], flatten?: boolean) {\n        return (await Promise.all(files.map((f, i) => this._subtitles(f, flatten === true ? 0 : i))))\n            .flatMap((nodes) => nodes)\n            .sort((n1, n2) => n1.start - n2.start);\n    }\n\n    async _subtitles(file: File, track: number): Promise<SubtitleNode[]> {\n        if (file.name.endsWith('.srt')) {\n            const nodes = parseSrt(await file.text());\n            return nodes\n                .filter((node) => node.type === 'cue')\n                .map((node) => {\n                    const cue = node.data as Cue;\n                    return {\n                        start: cue.start,\n                        end: cue.end,\n                        text: this._filterText(cue.text).replace(tagRegex, ''),\n                        track: track,\n                    };\n                });\n        }\n\n        if (file.name.endsWith('.vtt') || file.name.endsWith('.nfvtt')) {\n            return new Promise(async (resolve, reject) => {\n                const isFromNetflix = file.name.endsWith('.nfvtt');\n                const parser = new WebVTT.Parser(window, WebVTT.StringDecoder());\n                const cues: any[] = [];\n                parser.oncue = (c: any) => {\n                    c.text = this._filterText(c.text).replace(tagRegex, '');\n\n                    if (isFromNetflix) {\n                        const lines = c.text.split('\\n');\n                        const newLines = [];\n\n                        for (const line of lines) {\n                            newLines.push(this._fixRTL(line));\n                        }\n\n                        c.text = newLines.join('\\n');\n                    }\n                    cues.push(c);\n                };\n                parser.onflush = () =>\n                    resolve(\n                        cues.map((c) => ({\n                            start: Math.floor(c.startTime * 1000),\n                            end: Math.floor(c.endTime * 1000),\n                            text: c.text as string,\n                            track: track,\n                        }))\n                    );\n                parser.parse(await file.text());\n                parser.flush();\n            });\n        }\n\n        if (file.name.endsWith('.ass')) {\n            const nodes = parseAss(await file.text(), {});\n            return nodes.dialogues.map((dialogue) => {\n                return {\n                    start: Math.round(dialogue.start * 1000),\n                    end: Math.round(dialogue.end * 1000),\n                    text: this._filterText(\n                        dialogue.slices.flatMap((slice) => slice.fragments.map((fragment) => fragment.text)).join('')\n                    ).replace(assNewLineRegex, '\\n'),\n                    track: track,\n                };\n            });\n        }\n\n        if (file.name.endsWith('.ytxml')) {\n            const text = await file.text();\n            const xml = this._xmlParser().parse(text);\n\n            if (Object.keys(xml).length === 0) {\n                return [];\n            }\n\n            const textNodes = xml['transcript']['text'];\n            const subtitles = [];\n\n            for (let index = 0, length = textNodes.length; index < length; index++) {\n                const elm = textNodes[index];\n\n                if (!('#text' in elm) || !('@_dur' in elm) || !('@_start' in elm)) {\n                    continue;\n                }\n\n                const start = parseFloat(elm['@_start']);\n\n                subtitles.push({\n                    start: Math.floor(start * 1000),\n                    end: Math.floor((start + parseFloat(elm['@_dur'])) * 1000),\n                    text: this._filterText(this._decodeHTML(String(elm['#text'])).replace(tagRegex, '')),\n                    track,\n                });\n            }\n\n            return subtitles;\n        }\n\n        if (file.name.endsWith('.sup')) {\n            const subtitles: SubtitleNode[] = [];\n            await file\n                .stream()\n                // FIXME: Figure out how to remove conflicts with @types/node ReadableStream\n                // @ts-ignore\n                .pipeThrough(parseDisplaySets())\n                .pipeTo(this._displaySetsToSubtitles(subtitles, track));\n\n            return subtitles;\n        }\n\n        if (file.name.endsWith('.dfxp') || file.name.endsWith('ttml2')) {\n            const text = await file.text();\n            const parser = new DOMParser();\n            const doc = parser.parseFromString(text, 'application/xml');\n            const nodes = this._xmlNodePath(doc.documentElement, ['body', 'div']);\n            const subtitles: SubtitleNode[] = [];\n\n            for (let index = 0, length = nodes.length; index < length; index++) {\n                const elm = nodes[index];\n                const beginAttribute = elm.getAttribute('begin');\n                const endAttribute = elm.getAttribute('end');\n\n                if (beginAttribute === null || endAttribute === null) {\n                    continue;\n                }\n\n                subtitles.push({\n                    text: this._filterText(elm.textContent ?? ''),\n                    start: this._parseTtmlTimestamp(beginAttribute),\n                    end: this._parseTtmlTimestamp(endAttribute),\n                    track,\n                });\n            }\n\n            return subtitles;\n        }\n\n        throw new Error('Unsupported subtitle file format');\n    }\n\n    private _parseTtmlTimestamp(timestamp: string) {\n        const parts = timestamp.split(':');\n        const milliseconds = Math.floor(parseFloat(parts[parts.length - 1]) * 1000);\n        const minutes = parts.length < 2 ? 0 : Number(parts[parts.length - 2]);\n        const hours = parts.length < 3 ? 0 : Number(parts[parts.length - 3]);\n\n        return milliseconds + minutes * 60000 + hours * 3600000;\n    }\n\n    private _xmlNodePath(parent: Element, path: string[]): Element[] {\n        if (path.length === 0) {\n            const children: Element[] = [];\n\n            for (let i = 0; i < parent.children.length; ++i) {\n                const node = parent.children[i];\n                children.push(node);\n            }\n\n            return children;\n        }\n\n        for (let i = 0; i < parent.children.length; ++i) {\n            const node = parent.children[i];\n            const tag = this._dropTagNamespace(node.tagName);\n\n            if (tag === path[0]) {\n                return this._xmlNodePath(node, path.slice(1));\n            }\n        }\n\n        throw new Error('Failied to parse XML path');\n    }\n\n    private _dropTagNamespace(tag: string) {\n        const colonIndex = tag.lastIndexOf(':');\n\n        if (colonIndex !== -1) {\n            return tag.substring(colonIndex + 1);\n        }\n\n        return tag;\n    }\n\n    private _displaySetsToSubtitles(subtitles: SubtitleNode[], track: number) {\n        let imageDataArray: Uint8ClampedArray | undefined;\n        let currentImageDisplaySet: DisplaySet | undefined;\n\n        return new WritableStream<DisplaySet>({\n            write(displaySet, controller) {\n                if (displaySet.objectDefinitionSegments.length > 0) {\n                    if (currentImageDisplaySet === undefined) {\n                        currentImageDisplaySet = displaySet;\n                    }\n                } else if (currentImageDisplaySet !== undefined) {\n                    const screenWidth = currentImageDisplaySet.presentationCompositionSegment.width;\n                    const screenHeight = currentImageDisplaySet.presentationCompositionSegment.height;\n                    imageDataArray =\n                        imageDataArray === undefined || imageDataArray.length < screenHeight * screenWidth * 4\n                            ? new Uint8ClampedArray(screenWidth * screenHeight * 4)\n                            : imageDataArray;\n                    const imageData = currentImageDisplaySet.imageData(imageDataArray);\n                    helperCanvas.width = imageData.width;\n                    helperCanvas.height = imageData.height;\n                    const context = helperCanvas.getContext('2d')!;\n                    context.putImageData(imageData, 0, 0);\n                    subtitles.push({\n                        start:\n                            currentImageDisplaySet.objectDefinitionSegments[0].header.presentationTimestamp / 90 ?? 0,\n                        end: displaySet.endDefinitionSegment.header.presentationTimestamp / 90,\n                        text: '',\n                        textImage: {\n                            dataUrl: helperCanvas.toDataURL('image/png'),\n                            image: {\n                                width: imageData.width,\n                                height: imageData.height,\n                            },\n                            screen: {\n                                width: currentImageDisplaySet.presentationCompositionSegment.width,\n                                height: currentImageDisplaySet.presentationCompositionSegment.height,\n                            },\n                        },\n                        track,\n                    });\n\n                    currentImageDisplaySet = undefined;\n                }\n            },\n        });\n    }\n\n    private _fixRTL(line: string): string {\n        const index1 = line.indexOf('&lrm;');\n        const index2 = line.indexOf('&rlm;');\n        let newLine = '';\n\n        if (index1 > -1) {\n            newLine = line.substring(0, index1) + '\\u202a' + line.substring(index1 + 5) + '\\u202c';\n            return this._fixRTL(newLine);\n        } else if (index2 > -1) {\n            newLine = line.substring(0, index2) + '\\u202b' + line.substring(index2 + 5) + '\\u202c';\n            return this._fixRTL(newLine);\n        }\n\n        return line;\n    }\n\n    private _decodeHTML(text: string): string {\n        helperElement.innerHTML = text;\n        return helperElement.textContent ?? helperElement.innerText;\n    }\n\n    private _xmlParser() {\n        if (this.xmlParser === undefined) {\n            this.xmlParser = new XMLParser({\n                ignoreAttributes: false,\n            });\n        }\n\n        return this.xmlParser;\n    }\n\n    private _filterText(text: string): string {\n        if (this._textFilter === undefined) {\n            return text;\n        }\n\n        return text.replace(this._textFilter.regex, this._textFilter.replacement);\n    }\n\n    subtitlesToSrt(subtitles: SubtitleNode[]) {\n        const nodes: SrtNode[] = subtitles.map((subtitleNode) => {\n            return {\n                type: 'cue',\n                data: {\n                    start: subtitleNode.start,\n                    end: subtitleNode.end,\n                    text: subtitleNode.text,\n                },\n            };\n        });\n        return writeSrt(nodes, { format: 'SRT' });\n    }\n\n    async filesToSrt(files: File[]) {\n        return this.subtitlesToSrt(await this.subtitles(files));\n    }\n}\n","import { makeStyles, Theme } from '@material-ui/core/styles';\nimport clsx from 'clsx';\nimport AppBar from '@material-ui/core/AppBar';\nimport BugReportIcon from '@material-ui/icons/BugReport';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport HelpIcon from '@material-ui/icons/Help';\nimport FolderIcon from '@material-ui/icons/Folder';\nimport IconButton from '@material-ui/core/IconButton';\nimport ListIcon from '@material-ui/icons/List';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Tooltip, { TooltipProps } from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Popover from '@material-ui/core/Popover';\nimport { useCallback, useState } from 'react';\n\ninterface BarProps {\n    drawerWidth: number;\n    drawerOpen: boolean;\n    hidden: boolean;\n    title: string;\n    subtitleFiles?: File[];\n    onFileSelector: () => void;\n    onDownloadSubtitleFilesAsSrt: () => void;\n    onOpenSettings: () => void;\n    onOpenCopyHistory: () => void;\n}\n\ninterface StyleProps {\n    drawerWidth: number;\n}\n\nconst useStyles = makeStyles<Theme, StyleProps, string>((theme) => ({\n    title: {\n        flexGrow: 1,\n    },\n    leftButton: {\n        marginRight: theme.spacing(1),\n    },\n    appBar: {\n        transition: theme.transitions.create(['margin', 'width'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n    },\n    appBarShift: {\n        width: ({ drawerWidth }) => `calc(100% - ${drawerWidth}px)`,\n        transition: theme.transitions.create(['margin', 'width'], {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n        marginRight: ({ drawerWidth }) => drawerWidth,\n    },\n    copyHistoryButton: {\n        transform: 'scaleX(1)',\n        width: 48,\n        padding: 12,\n        transition: theme.transitions.create(['transform', 'padding', 'width'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n    },\n    copyHistoryButtonShift: {\n        transform: 'scaleX(0)',\n        width: 0,\n        padding: 5,\n        transition: theme.transitions.create(['transform', 'padding', 'width'], {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    hide: {\n        display: 'none',\n    },\n}));\n\ninterface CopyHistoryTooltipStylesProps {\n    show: boolean;\n}\n\ninterface CopyHistoryTooltipProps extends TooltipProps {\n    show: boolean;\n}\n\nconst useCopyHistoryTooltipStyles = makeStyles<Theme, CopyHistoryTooltipStylesProps, string>((theme) => ({\n    tooltip: ({ show }) => ({\n        display: show ? 'block' : 'none',\n    }),\n}));\n\nfunction CopyHistoryTooltip({ show, ...toolTipProps }: CopyHistoryTooltipProps) {\n    const classes = useCopyHistoryTooltipStyles({ show: show });\n    return <Tooltip classes={classes} {...toolTipProps} />;\n}\n\nexport default function Bar({\n    drawerWidth,\n    drawerOpen,\n    hidden,\n    title,\n    subtitleFiles,\n    onOpenSettings,\n    onOpenCopyHistory,\n    onFileSelector,\n    onDownloadSubtitleFilesAsSrt,\n}: BarProps) {\n    const classes = useStyles({ drawerWidth });\n    const [menuOpen, setMenuOpen] = useState<boolean>(false);\n    const [menuAnchorEl, setMenuAnchorEl] = useState<HTMLElement>();\n    const canSaveAsSrt =\n        subtitleFiles !== undefined && subtitleFiles.find((f) => !f.name.endsWith('.sup')) !== undefined;\n\n    const handleFileAction = useCallback(\n        (event: React.MouseEvent<HTMLButtonElement>) => {\n            if (canSaveAsSrt) {\n                setMenuAnchorEl(event.currentTarget);\n                setMenuOpen(true);\n            } else {\n                onFileSelector();\n            }\n        },\n        [onFileSelector, canSaveAsSrt]\n    );\n\n    const handleMenuClose = useCallback(() => {\n        setMenuOpen(false);\n    }, []);\n\n    const handleOpenFilesFromMenu = useCallback(() => {\n        setMenuOpen(false);\n        onFileSelector();\n    }, [onFileSelector]);\n\n    const handleDownloadSubtitleFilesAsSrt = useCallback(() => {\n        setMenuOpen(false);\n        onDownloadSubtitleFilesAsSrt();\n    }, [onDownloadSubtitleFilesAsSrt]);\n\n    return (\n        <>\n            {canSaveAsSrt && (\n                <Popover\n                    open={menuOpen}\n                    anchorEl={menuAnchorEl}\n                    onClose={handleMenuClose}\n                    anchorOrigin={{\n                        vertical: 'bottom',\n                        horizontal: 'center',\n                    }}\n                >\n                    <List>\n                        <ListItem button onClick={handleOpenFilesFromMenu}>\n                            Open Files\n                        </ListItem>\n                        <ListItem button onClick={handleDownloadSubtitleFilesAsSrt}>\n                            Download Subtitles as SRT\n                        </ListItem>\n                    </List>\n                </Popover>\n            )}\n            <AppBar\n                position=\"static\"\n                elevation={0}\n                className={clsx(classes.appBar, {\n                    [classes.appBarShift]: drawerOpen,\n                    [classes.hide]: hidden,\n                })}\n            >\n                <Toolbar>\n                    <Tooltip\n                        disableFocusListener={canSaveAsSrt}\n                        disableHoverListener={canSaveAsSrt}\n                        disableTouchListener={canSaveAsSrt}\n                        title=\"Open Files\"\n                    >\n                        <IconButton\n                            edge=\"start\"\n                            color=\"inherit\"\n                            className={classes.leftButton}\n                            onClick={handleFileAction}\n                        >\n                            <FolderIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        {title}\n                    </Typography>\n                    <Tooltip title=\"Donate\">\n                        <IconButton\n                            edge=\"end\"\n                            color=\"inherit\"\n                            component=\"a\"\n                            href=\"https://github.com/killergerbah/asbplayer#supporters\"\n                            target=\"_blank\"\n                            rel=\"noreferrer\"\n                        >\n                            <FavoriteIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title=\"Submit Issue\">\n                        <IconButton\n                            edge=\"end\"\n                            color=\"inherit\"\n                            component=\"a\"\n                            href=\"https://github.com/killergerbah/asbplayer/issues\"\n                            target=\"_blank\"\n                            rel=\"noreferrer\"\n                        >\n                            <BugReportIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title=\"Help\">\n                        <IconButton\n                            edge=\"end\"\n                            color=\"inherit\"\n                            component=\"a\"\n                            href=\"https://github.com/killergerbah/asbplayer#usage\"\n                            target=\"_blank\"\n                            rel=\"noreferrer\"\n                        >\n                            <HelpIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title=\"Settings\">\n                        <IconButton edge=\"end\" color=\"inherit\" onClick={onOpenSettings}>\n                            <SettingsIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <CopyHistoryTooltip title=\"Mining History\" show={!drawerOpen}>\n                        <IconButton\n                            edge=\"end\"\n                            color=\"inherit\"\n                            aria-label=\"menu\"\n                            className={clsx(classes.copyHistoryButton, {\n                                [classes.copyHistoryButtonShift]: drawerOpen,\n                            })}\n                            onClick={onOpenCopyHistory}\n                        >\n                            <ListIcon />\n                        </IconButton>\n                    </CopyHistoryTooltip>\n                </Toolbar>\n            </AppBar>\n        </>\n    );\n}\n","import { Rgb } from '@project/common';\n\nexport function arrayEquals(a: any[], b: any[], equals = (a: any, b: any) => a === b) {\n    if (a.length !== b.length) {\n        return false;\n    }\n\n    for (let i = 0; i < a.length; ++i) {\n        if (!equals(a[i], b[i])) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nexport function keysAreEqual(a: any, b: any) {\n    for (let key in a) {\n        if (!(key in b)) {\n            return false;\n        }\n    }\n\n    for (let key in b) {\n        if (!(key in a)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n// https://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb\nfunction hexToRgb(hex: string): Rgb {\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)!;\n    return {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16),\n    };\n}\n\ninterface SubtitleStyle {\n    subtitleColor: string;\n    subtitleSize: number;\n    subtitleOutlineThickness: number;\n    subtitleOutlineColor: string;\n    subtitleBackgroundOpacity: number;\n    subtitleBackgroundColor: string;\n    subtitleFontFamily: string;\n}\n\nexport function computeStyles({\n    subtitleColor,\n    subtitleSize,\n    subtitleOutlineThickness,\n    subtitleOutlineColor,\n    subtitleBackgroundOpacity,\n    subtitleBackgroundColor,\n    subtitleFontFamily,\n}: SubtitleStyle) {\n    const styles: any = {\n        color: subtitleColor,\n        fontSize: Number(subtitleSize),\n    };\n\n    if (subtitleOutlineThickness > 0) {\n        const thickness = subtitleOutlineThickness;\n        const color = subtitleOutlineColor;\n        styles[\n            'textShadow'\n        ] = `0 0 ${thickness}px ${color}, 0 0 ${thickness}px ${color}, 0 0 ${thickness}px ${color}, 0 0 ${thickness}px ${color}`;\n    }\n\n    if (subtitleBackgroundOpacity > 0) {\n        const opacity = subtitleBackgroundOpacity;\n        const color = subtitleBackgroundColor;\n        const { r, g, b } = hexToRgb(color);\n        styles['backgroundColor'] = `rgba(${r}, ${g}, ${b}, ${opacity})`;\n    }\n\n    if (subtitleFontFamily && subtitleFontFamily.length > 0) {\n        styles['fontFamily'] = subtitleFontFamily;\n    }\n\n    return styles;\n}\n\nexport function timeDurationDisplay(\n    milliseconds: number,\n    totalMilliseconds: number,\n    includeMilliseconds = true\n): string {\n    if (milliseconds < 0) {\n        return timeDurationDisplay(0, totalMilliseconds);\n    }\n\n    milliseconds = Math.round(milliseconds);\n    const ms = milliseconds % 1000;\n    milliseconds = (milliseconds - ms) / 1000;\n    const secs = milliseconds % 60;\n    milliseconds = (milliseconds - secs) / 60;\n    const mins = milliseconds % 60;\n\n    if (totalMilliseconds >= 3600000) {\n        const hrs = (milliseconds - mins) / 60;\n\n        if (includeMilliseconds) {\n            return pad(hrs) + ':' + pad(mins) + ':' + pad(secs) + '.' + pad(ms, 3);\n        }\n\n        return pad(hrs) + ':' + pad(mins) + ':' + pad(secs);\n    }\n\n    if (includeMilliseconds) {\n        return pad(mins) + ':' + pad(secs) + '.' + pad(ms, 3);\n    }\n\n    return pad(mins) + ':' + pad(secs);\n}\n\nfunction pad(n: number, zeros: number = 2) {\n    return String(n).padStart(zeros, '0');\n}\n","import React, { useCallback, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { timeDurationDisplay } from '../services/util';\nimport { ListItemSecondaryAction, Theme } from '@material-ui/core';\nimport Divider from '@material-ui/core/Divider';\nimport Drawer from '@material-ui/core/Drawer';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Popover from '@material-ui/core/Popover';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport NoteAddIcon from '@material-ui/icons/NoteAdd';\nimport SaveAltIcon from '@material-ui/icons/SaveAlt';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport { AudioModel, ImageModel, SubtitleModel } from '@project/common';\n\nexport interface CopyHistoryItem extends SubtitleModel {\n    name: string;\n    id: string;\n    timestamp: number;\n    surroundingSubtitles: SubtitleModel[];\n    audioFile?: File;\n    audioFileName?: string;\n    audioTrack?: string;\n    videoFile?: File;\n    videoFileName?: string;\n    filePlaybackRate?: number;\n    subtitleFileName?: string;\n    mediaTimestamp?: number;\n    audio?: AudioModel;\n    image?: ImageModel;\n    url?: string;\n}\n\ninterface CopyHistoryProps {\n    open: boolean;\n    drawerWidth: number;\n    items: CopyHistoryItem[];\n    onClose: () => void;\n    onDelete: (item: CopyHistoryItem) => void;\n    onAnki: (item: CopyHistoryItem) => void;\n    onSelect: (item: CopyHistoryItem) => void;\n    onClipAudio: (item: CopyHistoryItem) => void;\n    onDownloadImage: (item: CopyHistoryItem) => void;\n    onDownloadSectionAsSrt: (name: string, items: CopyHistoryItem[]) => void;\n}\n\nconst useStyles = makeStyles<Theme, CopyHistoryProps, string>((theme) => ({\n    drawer: {\n        width: ({ drawerWidth }) => drawerWidth,\n        flexShrink: 0,\n    },\n    drawerPaper: {\n        width: ({ drawerWidth }) => drawerWidth,\n    },\n    drawerHeader: {\n        display: 'flex',\n        alignItems: 'center',\n        position: 'static',\n        padding: theme.spacing(0, 1),\n        // necessary for content to be below app bar\n        ...theme.mixins.toolbar,\n        justifyContent: 'flex-start',\n    },\n    listContainer: {\n        position: 'relative',\n        height: '100%',\n        overflowY: 'auto',\n        overflowX: 'hidden',\n    },\n    listItem: {\n        '&:hover': {\n            backgroundColor: theme.palette.action.hover,\n        },\n    },\n    listItemGutters: {\n        paddingLeft: 5,\n        paddingRight: 5,\n    },\n    listItemIconRoot: {\n        minWidth: 20,\n    },\n    emptyState: {\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        textAlign: 'center',\n        height: '100%',\n        padding: 15,\n    },\n    text: {\n        flexGrow: 1,\n    },\n    emptyText: {\n        flexGrow: 1,\n        color: theme.palette.text.secondary,\n    },\n    timestamp: {\n        paddingRight: 15,\n        paddingLeft: 15,\n        color: theme.palette.text.secondary,\n    },\n}));\n\ninterface MenuProps {\n    open: boolean;\n    item?: CopyHistoryItem;\n    anchorEl?: Element;\n    onClose: () => void;\n    onSelect: (item: CopyHistoryItem) => void;\n    onClipAudio: (item: CopyHistoryItem) => void;\n    onDownloadImage: (item: CopyHistoryItem) => void;\n    onDelete: (item: CopyHistoryItem) => void;\n}\n\nfunction Menu({ open, anchorEl, onClose, onSelect, onClipAudio, onDownloadImage, onDelete, item }: MenuProps) {\n    const handleCopy = useCallback(() => {\n        navigator.clipboard.writeText(item!.text);\n        onClose();\n    }, [item, onClose]);\n\n    const handleJumpTo = useCallback(() => {\n        onSelect(item!);\n        onClose();\n    }, [item, onSelect, onClose]);\n\n    const handleClipAudio = useCallback(() => {\n        onClipAudio(item!);\n        onClose();\n    }, [item, onClipAudio, onClose]);\n\n    const handleDownloadImage = useCallback(() => {\n        onDownloadImage(item!);\n        onClose();\n    }, [item, onDownloadImage, onClose]);\n\n    const handleDelete = useCallback(() => {\n        onDelete(item!);\n        onClose();\n    }, [item, onDelete, onClose]);\n\n    if (!item) {\n        return null;\n    }\n\n    return (\n        <Popover\n            disableEnforceFocus={true}\n            open={open}\n            anchorEl={anchorEl}\n            onClose={onClose}\n            anchorOrigin={{\n                vertical: 'center',\n                horizontal: 'center',\n            }}\n            transformOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n            }}\n        >\n            <List>\n                <ListItem button onClick={handleCopy}>\n                    <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Copy\" />\n                </ListItem>\n                <ListItem button onClick={handleJumpTo}>\n                    <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Jump To\" />\n                </ListItem>\n                {(item.videoFile || item.audioFile || item.audio) && (\n                    <ListItem button onClick={handleClipAudio}>\n                        <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Download Audio\" />\n                    </ListItem>\n                )}\n                {(item.videoFile || item.image) && (\n                    <ListItem button onClick={handleDownloadImage}>\n                        <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Download Image\" />\n                    </ListItem>\n                )}\n                <ListItem button onClick={handleDelete}>\n                    <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Delete\" />\n                </ListItem>\n            </List>\n        </Popover>\n    );\n}\n\nexport default function CopyHistory(props: CopyHistoryProps) {\n    const onDelete = props.onDelete;\n    const classes = useStyles(props);\n    const scrollToBottomRefCallback = useCallback((element: HTMLElement | null) => {\n        if (element) {\n            element.scrollIntoView();\n        }\n    }, []);\n    const [menuItem, setMenuItem] = useState<CopyHistoryItem>();\n    const [menuOpen, setMenuOpen] = useState<boolean>(false);\n    const [menuAnchorEl, setMenuAnchorEl] = useState<Element>();\n\n    const handleMenu = useCallback((e: React.MouseEvent, item: CopyHistoryItem) => {\n        setMenuItem(item);\n        setMenuOpen(true);\n        setMenuAnchorEl(e.currentTarget);\n    }, []);\n\n    const handleMenuClosed = useCallback(() => {\n        setMenuItem(undefined);\n        setMenuOpen(false);\n        setMenuAnchorEl(undefined);\n    }, []);\n\n    const handleDelete = useCallback(\n        (item: CopyHistoryItem) => {\n            onDelete(item);\n        },\n        [onDelete]\n    );\n\n    let content;\n\n    if (props.items.length > 0) {\n        const items = [];\n        let lastSeenItemName = null;\n        let i = 0;\n        const itemNameCounters: { [name: string]: number } = {};\n        let itemsBySection: { [key: string]: CopyHistoryItem[] } = {};\n        let currentKey: string | undefined;\n\n        for (const item of props.items) {\n            if (lastSeenItemName === null || lastSeenItemName !== item.name) {\n                if (item.name in itemNameCounters) {\n                    itemNameCounters[item.name]++;\n                } else {\n                    itemNameCounters[item.name] = 0;\n                }\n\n                const key = item.name + '-' + itemNameCounters[item.name];\n                itemsBySection[key] = [];\n                lastSeenItemName = item.name;\n                currentKey = key;\n\n                items.push(\n                    <ListItem key={key}>\n                        <Typography color=\"textSecondary\">{item.name}</Typography>\n                        <ListItemSecondaryAction>\n                            <Tooltip title=\"Download as SRT\">\n                                <IconButton\n                                    onClick={() => props.onDownloadSectionAsSrt(item.name, itemsBySection[key])}\n                                    edge=\"end\"\n                                >\n                                    <SaveAltIcon />\n                                </IconButton>\n                            </Tooltip>\n                        </ListItemSecondaryAction>\n                    </ListItem>\n                );\n            }\n\n            itemsBySection[currentKey!].push(item);\n            const ref = i === props.items.length - 1 ? scrollToBottomRefCallback : null;\n\n            items.push(\n                <ListItem\n                    ref={ref}\n                    key={item.id}\n                    className={classes.listItem}\n                    classes={{ gutters: classes.listItemGutters }}\n                >\n                    <ListItemIcon classes={{ root: classes.listItemIconRoot }}>\n                        <Tooltip title=\"Export to Anki\">\n                            <IconButton onClick={() => props.onAnki(item)}>\n                                <NoteAddIcon fontSize=\"small\" />\n                            </IconButton>\n                        </Tooltip>\n                    </ListItemIcon>\n                    <ListItemIcon classes={{ root: classes.listItemIconRoot }}>\n                        <IconButton onClick={(e) => handleMenu(e, item)}>\n                            <MoreVertIcon fontSize=\"small\" />\n                        </IconButton>\n                    </ListItemIcon>\n                    <ListItemText\n                        primary={\n                            <Grid wrap=\"nowrap\" container>\n                                <Grid item className={item.text === '' ? classes.emptyText : classes.text}>\n                                    {item.text === '' ? 'No text' : item.text}\n                                </Grid>\n                                <Grid item className={classes.timestamp}>\n                                    {timeDurationDisplay(item.start, item.start, false)}\n                                </Grid>\n                            </Grid>\n                        }\n                    />\n                </ListItem>\n            );\n\n            ++i;\n        }\n\n        content = (\n            <div className={classes.listContainer}>\n                <List>{items}</List>\n            </div>\n        );\n    } else {\n        content = (\n            <div className={classes.emptyState}>\n                <Typography variant=\"h6\">Mining history is empty.</Typography>\n            </div>\n        );\n    }\n\n    return (\n        <React.Fragment>\n            <Drawer\n                variant=\"persistent\"\n                anchor=\"right\"\n                open={props.open}\n                className={classes.drawer}\n                classes={{\n                    paper: classes.drawerPaper,\n                }}\n            >\n                <div className={classes.drawerHeader}>\n                    <IconButton onClick={props.onClose}>\n                        <ChevronRightIcon />\n                    </IconButton>\n                </div>\n                <Divider />\n                {content}\n            </Drawer>\n            <Menu\n                open={props.open && menuOpen}\n                anchorEl={menuAnchorEl}\n                item={menuItem}\n                onClose={handleMenuClosed}\n                onSelect={props.onSelect}\n                onClipAudio={props.onClipAudio}\n                onDownloadImage={props.onDownloadImage}\n                onDelete={handleDelete}\n            />\n        </React.Fragment>\n    );\n}\n","import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport gt from 'semver/functions/gt';\nimport Fade from '@material-ui/core/Fade';\nimport Link from '@material-ui/core/Link';\nimport Typography from '@material-ui/core/Typography';\nimport ChromeExtension from '../services/ChromeExtension';\nimport { Theme } from '@material-ui/core/styles';\n\ninterface StylesProps {\n    appBarHidden: boolean;\n}\n\nconst useStyles = makeStyles<Theme, StylesProps>((theme) => ({\n    background: ({ appBarHidden }) => ({\n        position: 'absolute',\n        height: appBarHidden ? '100vh' : 'calc(100vh - 64px)',\n        width: '100%',\n        zIndex: 100,\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        padding: 15,\n        textAlign: 'center',\n    }),\n    browseLink: {\n        cursor: 'pointer',\n    },\n}));\n\ninterface Props {\n    extension: ChromeExtension;\n    latestExtensionVersion: string;\n    extensionUrl: string;\n    loading: boolean;\n    dragging: boolean;\n    appBarHidden: boolean;\n    onFileSelector: React.MouseEventHandler<HTMLAnchorElement> &\n        React.MouseEventHandler<HTMLSpanElement> &\n        React.MouseEventHandler<HTMLLabelElement>;\n}\n\nexport default function LandingPage({\n    extension,\n    latestExtensionVersion,\n    extensionUrl,\n    loading,\n    dragging,\n    appBarHidden,\n    onFileSelector,\n}: Props) {\n    const classes = useStyles({ appBarHidden });\n    const [installedExtensionVersion, setInstalledExtensionVersion] = useState<string>();\n\n    useEffect(() => {\n        async function fetchInstalledExtensionVersion() {\n            setInstalledExtensionVersion(extension.version);\n        }\n\n        fetchInstalledExtensionVersion();\n    }, [extension]);\n\n    const extensionUpdateAvailable = installedExtensionVersion && gt(latestExtensionVersion, installedExtensionVersion);\n    const extensionNotInstalled = !installedExtensionVersion;\n\n    return (\n        <React.Fragment>\n            <Fade in={!loading && !dragging} timeout={500}>\n                <div className={classes.background}>\n                    <Typography variant=\"h6\">\n                        Drag and drop subtitle and media files, or{' '}\n                        <Link\n                            target=\"#\"\n                            className={classes.browseLink}\n                            onClick={onFileSelector}\n                            color=\"secondary\"\n                            component=\"label\"\n                        >\n                            browse\n                        </Link>\n                        .\n                        <br />\n                        {extensionNotInstalled && (\n                            <span>\n                                Install the{' '}\n                                <Link color=\"secondary\" target=\"_blank\" rel=\"noreferrer\" href={extensionUrl}>\n                                    Chrome extension\n                                </Link>{' '}\n                                to sync subtitles with streaming video.\n                            </span>\n                        )}\n                        {extensionUpdateAvailable && (\n                            <span>\n                                An extension{' '}\n                                <Link color=\"secondary\" target=\"_blank\" rel=\"noreferrer\" href={extensionUrl}>\n                                    update\n                                </Link>{' '}\n                                is available.\n                            </span>\n                        )}\n                    </Typography>\n                </div>\n            </Fade>\n        </React.Fragment>\n    );\n}\n","import { Message } from \"@project/common\";\nimport { VideoProtocol, VideoProtocolMessage } from \"./VideoProtocol\";\n\nexport default class BroadcastChannelVideoProtocol implements VideoProtocol {\n    private channel?: BroadcastChannel;\n\n    onMessage?: (message: VideoProtocolMessage) => void;\n    \n    constructor(channelId: string) {\n        this.channel = new BroadcastChannel(channelId);\n        const that = this;\n        this.channel.onmessage = (event) => {\n            that.onMessage?.(event as VideoProtocolMessage);\n        };\n    }\n\n    postMessage(message: Message) {\n        this.channel?.postMessage(message);\n    }\n\n    close() {\n        this.channel?.close();\n        this.channel = undefined;\n    }\n}\n","import { Message } from '@project/common';\nimport ChromeExtension, { ExtensionMessage } from './ChromeExtension';\nimport { VideoProtocol, VideoProtocolMessage } from './VideoProtocol';\n\nexport default class ChromeTabVideoProtocol implements VideoProtocol {\n    private readonly tabId: number;\n    private readonly src: string;\n    private readonly extension: ChromeExtension;\n    private readonly listener: (message: ExtensionMessage) => void;\n    private readonly unsubscribeFromExtension: () => void;\n\n    onMessage?: (message: VideoProtocolMessage) => void;\n\n    constructor(tabId: number, src: string, extension: ChromeExtension) {\n        this.tabId = tabId;\n        this.src = src;\n        this.listener = (message) => {\n            if (message.tabId === tabId && message.src === src) {\n                this.onMessage?.({\n                    data: message.data,\n                });\n            }\n        };\n\n        this.unsubscribeFromExtension = extension.subscribe(this.listener);\n        this.extension = extension;\n    }\n\n    postMessage(message: Message) {\n        this.extension.sendMessage(message, this.tabId, this.src);\n    }\n\n    close() {\n        this.unsubscribeFromExtension();\n    }\n}\n","export default class Clock {\n    private accumulated: number;\n    private started: boolean;\n    private startTime?: number;\n    private _rate = 1;\n\n    constructor() {\n        this.accumulated = 0;\n        this.started = false;\n    }\n\n    get rate() {\n        return this._rate;\n    }\n\n    set rate(rate: number) {\n        if (this.started) {\n            this.accumulated += this._elapsed();\n            this.startTime = Date.now();\n        }\n    \n        this._rate = rate;\n    }\n\n    time(max: number) {\n        if (this.started) {\n            return Math.min(max, this.accumulated + this._elapsed());\n        }\n\n        return Math.min(max, this.accumulated);\n    }\n\n    stop() {\n        if (!this.started) {\n            return;\n        }\n\n        this.started = false;\n        this.accumulated += this._elapsed();\n    }\n\n    private _elapsed() {\n        return (Date.now() - this.startTime!) * this._rate;\n    }\n\n    start() {\n        this.startTime = Date.now();\n        this.started = true;\n    }\n\n    setTime(time: number) {\n        if (this.started) {\n            this.startTime = Date.now();\n            this.accumulated = time;\n        } else {\n            this.accumulated = time;\n        }\n    }\n\n    progress(max: number) {\n        return max === 0 ? 0 : Math.min(1, this.time(max) / max);\n    }\n}\n","import React, { useCallback, useEffect, useState, useRef, MutableRefObject } from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\nimport AudiotrackIcon from '@material-ui/icons/Audiotrack';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Fade from '@material-ui/core/Fade';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport Input from '@material-ui/core/Input';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport OpenInNewIcon from '@material-ui/icons/OpenInNew';\nimport Popover from '@material-ui/core/Popover';\nimport FullscreenIcon from '@material-ui/icons/Fullscreen';\nimport AspectRatioIcon from '@material-ui/icons/AspectRatio';\nimport FullscreenExitIcon from '@material-ui/icons/FullscreenExit';\nimport PauseIcon from '@material-ui/icons/Pause';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport QueueMusicIcon from '@material-ui/icons/QueueMusic';\nimport Slider from '@material-ui/core/Slider';\nimport TuneIcon from '@material-ui/icons/Tune';\nimport SubtitlesIcon from '@material-ui/icons/Subtitles';\nimport VideocamIcon from '@material-ui/icons/Videocam';\nimport VolumeOffIcon from '@material-ui/icons/VolumeOff';\nimport VolumeUpIcon from '@material-ui/icons/VolumeUp';\nimport { AudioTrackModel, PlayMode, VideoTabModel } from '@project/common';\nimport Clock from '../services/Clock';\nimport PlaybackPreferences from '../services/PlaybackPreferences';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nconst useControlStyles = makeStyles((theme) => ({\n    container: {\n        position: 'absolute',\n        left: '50%',\n        width: '50%',\n        bottom: 0,\n        pointerEvents: 'none',\n        color: '#fff',\n    },\n    buttonContainer: {\n        flexDirection: 'row',\n    },\n    timeDisplay: {\n        color: '#fff',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        height: '100%',\n        cursor: 'default',\n        fontSize: 20,\n        marginLeft: 10,\n    },\n    numberInput: {\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        fontSize: 20,\n        marginLeft: 10,\n        width: 100,\n        color: '#fff',\n        pointerEvents: 'auto',\n    },\n    volumeInputContainerShown: {\n        transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.short,\n        }),\n        marginRight: 5,\n        pointerEvents: 'auto',\n    },\n    volumeInputContainerHidden: {\n        transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.short,\n        }),\n        marginRight: 0,\n        pointerEvents: 'auto',\n    },\n    volumeInputHidden: {\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.short,\n        }),\n        width: 0,\n        pointerEvents: 'auto',\n    },\n    volumeInputShown: {\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.short,\n        }),\n        width: 100,\n        pointerEvents: 'auto',\n    },\n    volumeInputThumbHidden: {\n        transition: theme.transitions.create('visibility', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.short,\n        }),\n        opacity: 0,\n        pointerEvents: 'auto',\n    },\n    volumeInputThumbShown: {\n        transition: theme.transitions.create('visibility', {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.short,\n        }),\n        opacity: 1,\n        pointerEvents: 'auto',\n    },\n    subContainer: {\n        background: 'linear-gradient(to bottom, rgba(0, 0, 0, 0), rgba(0, 0, 0, .4) 40%, rgba(0, 0, 0, 0.7))',\n        position: 'relative',\n        left: '-100%',\n        width: '200%',\n        zIndex: 10,\n    },\n    button: {\n        pointerEvents: 'auto',\n    },\n    inactiveButton: {\n        color: 'rgba(72, 72, 72, 0.7)',\n        pointerEvents: 'auto',\n    },\n    inactiveTopButton: {\n        color: 'rgba(255, 255, 255, 0.5)',\n        pointerEvents: 'auto',\n    },\n    progress: {\n        margin: 5,\n    },\n    topButton: {\n        pointerEvents: 'auto',\n        color: '#fff',\n    },\n    gridContainer: {\n        pointerEvents: 'auto',\n        padding: 2,\n    },\n}));\n\nconst useProgressBarStyles = makeStyles((theme) => ({\n    root: {\n        height: 10,\n    },\n    container: {\n        height: 10,\n        pointerEvents: 'auto',\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        position: 'absolute',\n        width: 'calc(100% - 20px)',\n        marginLeft: 10,\n    },\n    mouseEventListener: {\n        zIndex: 1,\n        height: 10,\n        cursor: 'pointer',\n        pointerEvents: 'auto',\n        position: 'absolute',\n        width: '100%',\n    },\n    fillContainer: {\n        background: 'rgba(30,30,30,0.7)',\n        width: '100%',\n        height: 5,\n        position: 'relative',\n    },\n    fillContainerThick: {\n        transition: theme.transitions.create('height', {\n            easing: theme.transitions.easing.easeInOut,\n            duration: 50,\n        }),\n        height: 8,\n    },\n    fill: {\n        background: 'linear-gradient(to left, #ff1f62, #49007a)',\n        height: '100%',\n    },\n    handleContainer: {\n        position: 'absolute',\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        height: '100%',\n        bottom: 0,\n    },\n    handle: {\n        borderRadius: '50%',\n        width: 16,\n        height: 16,\n        opacity: 0,\n        left: -8,\n        background: 'white',\n        position: 'absolute',\n    },\n    handleOn: {\n        opacity: 1,\n        transition: theme.transitions.create('opacity', {\n            easing: theme.transitions.easing.easeInOut,\n            duration: theme.transitions.duration.shortest,\n        }),\n    },\n}));\n\nconst VolumeSlider = withStyles((theme) => ({\n    root: {\n        color: 'white',\n        verticalAlign: 'middle',\n    },\n    thumb: {\n        backgroundColor: 'white',\n        color: 'white',\n        '&:focus': {\n            boxShadow: 'inherit',\n        },\n        '&:hover, &$active': {\n            boxShadow: '0px 0px 0px 8px rgba(255, 255, 255, 0.1)',\n        },\n    },\n    active: {\n        color: 'white',\n    },\n}))(Slider);\n\nfunction displayTime(milliseconds: number) {\n    const seconds = Math.floor(milliseconds / 1000);\n    const minutes = Math.floor(seconds / 60);\n    const secondsInMinute = seconds % 60;\n    return String(minutes) + ':' + String(secondsInMinute).padStart(2, '0');\n}\n\nfunction elementWidth(element: HTMLElement) {\n    const rect = element.getBoundingClientRect();\n    return rect.right - rect.left;\n}\n\ninterface ProgressBarProps {\n    onSeek: (progress: number) => void;\n    value: number;\n}\n\nfunction ProgressBar({ onSeek, value }: ProgressBarProps) {\n    const classes = useProgressBarStyles();\n    const [mouseOver, setMouseOver] = useState(false);\n    const containerRef = useRef(null);\n\n    const handleClick = useCallback(\n        (e: React.MouseEvent<HTMLDivElement>) => {\n            const rect = e.currentTarget.getBoundingClientRect();\n            // Account for margins by subtracting 10 from left/right sides\n            const width = rect.right - rect.left - 20;\n            const progress = Math.min(1, Math.max(0, (e.pageX - rect.left - 10) / width));\n            onSeek(progress);\n        },\n        [onSeek]\n    );\n\n    const handleMouseOver = useCallback(() => setMouseOver(true), []);\n    const handleMouseOut = useCallback(() => setMouseOver(false), []);\n    const progressWidth = containerRef.current ? (elementWidth(containerRef.current) * value) / 100 : 0;\n    const fillStyle = { width: progressWidth };\n    const handleStyle = { marginLeft: progressWidth };\n    const fillContainerClassName = mouseOver\n        ? classes.fillContainer + ' ' + classes.fillContainerThick\n        : classes.fillContainer;\n    const handleClassName = mouseOver ? classes.handle + ' ' + classes.handleOn : classes.handle;\n\n    return (\n        <div className={classes.root}>\n            <div ref={containerRef} className={classes.container}>\n                <div className={fillContainerClassName}>\n                    <div className={classes.fill} style={fillStyle}></div>\n                    <div className={classes.handleContainer}>\n                        <div className={handleClassName} style={handleStyle} />\n                    </div>\n                </div>\n            </div>\n            <div\n                className={classes.mouseEventListener}\n                onClick={handleClick}\n                onMouseOver={handleMouseOver}\n                onMouseOut={handleMouseOut}\n            ></div>\n        </div>\n    );\n}\n\ninterface AudioTrackSelectorProps {\n    open: boolean;\n    anchorEl?: Element;\n    audioTracks?: AudioTrackModel[];\n    selectedAudioTrack?: string;\n    onAudioTrackSelected: (id: string) => void;\n    onClose: () => void;\n}\n\nfunction AudioTrackSelector({\n    open,\n    anchorEl,\n    audioTracks,\n    selectedAudioTrack,\n    onAudioTrackSelected,\n    onClose,\n}: AudioTrackSelectorProps) {\n    if (!audioTracks || audioTracks.length === 0) {\n        return null;\n    }\n\n    const list = audioTracks.map((t) => {\n        return (\n            <ListItem\n                key={t.id}\n                selected={t.id === selectedAudioTrack}\n                button\n                onClick={() => onAudioTrackSelected(t.id)}\n            >\n                {t.language} {t.label}\n            </ListItem>\n        );\n    });\n\n    return (\n        <div>\n            <Popover\n                disableEnforceFocus={true}\n                open={open}\n                anchorEl={anchorEl}\n                onClose={onClose}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n            >\n                <List>{list}</List>\n            </Popover>\n        </div>\n    );\n}\n\ninterface TabSelectorProps {\n    open: boolean;\n    anchorEl?: Element;\n    tabs?: VideoTabModel[];\n    selectedTab?: VideoTabModel;\n    onTabSelected: (tab: VideoTabModel) => void;\n    onClose: () => void;\n}\n\nfunction TabSelector({ open, anchorEl, onClose, tabs, selectedTab, onTabSelected }: TabSelectorProps) {\n    if (!tabs || tabs.length === 0) {\n        return null;\n    }\n\n    const list = tabs.map((t) => {\n        return (\n            <ListItem\n                key={`${t.id}:${t.src}`}\n                selected={selectedTab && t.id === selectedTab.id && t.src === selectedTab.src}\n                button\n                onClick={() => onTabSelected(t)}\n            >\n                {t.id} {t.title} {t.src}\n            </ListItem>\n        );\n    });\n\n    return (\n        <div>\n            <Popover\n                disableEnforceFocus={true}\n                open={open}\n                anchorEl={anchorEl}\n                onClose={onClose}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n            >\n                <List>{list}</List>\n            </Popover>\n        </div>\n    );\n}\n\ninterface MediaUnloaderProps {\n    open: boolean;\n    anchorEl?: Element;\n    file?: string;\n    onUnload: () => void;\n    onClose: () => void;\n}\n\nfunction MediaUnloader({ open, anchorEl, onUnload, onClose, file }: MediaUnloaderProps) {\n    return (\n        <div>\n            <Popover\n                disableEnforceFocus={true}\n                open={open}\n                anchorEl={anchorEl}\n                onClose={onClose}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n            >\n                <List>\n                    <ListItem button onClick={(e) => onUnload()}>\n                        Unload {file}\n                    </ListItem>\n                </List>\n            </Popover>\n        </div>\n    );\n}\n\ninterface PlayModeSelectorProps {\n    open: boolean;\n    anchorEl?: Element;\n    selectedPlayMode?: PlayMode;\n    onPlayMode: (playMode: PlayMode) => void;\n    onClose: () => void;\n}\n\nfunction PlayModeSelector({ open, anchorEl, selectedPlayMode, onPlayMode, onClose }: PlayModeSelectorProps) {\n    return (\n        <div>\n            <Popover\n                disableEnforceFocus={true}\n                open={open}\n                anchorEl={anchorEl}\n                onClose={onClose}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n            >\n                <List>\n                    <ListItem\n                        selected={selectedPlayMode === PlayMode.normal}\n                        button\n                        onClick={(e) => onPlayMode(PlayMode.normal)}\n                    >\n                        Normal\n                    </ListItem>\n                    <ListItem\n                        selected={selectedPlayMode === PlayMode.condensed}\n                        button\n                        onClick={(e) => onPlayMode(PlayMode.condensed)}\n                    >\n                        Condensed\n                    </ListItem>\n                    <ListItem\n                        selected={selectedPlayMode === PlayMode.autoPause}\n                        button\n                        onClick={(e) => onPlayMode(PlayMode.autoPause)}\n                    >\n                        Auto-pause\n                    </ListItem>\n                </List>\n            </Popover>\n        </div>\n    );\n}\n\nexport interface Point {\n    x: number;\n    y: number;\n}\n\ninterface ControlsProps {\n    clock: Clock;\n    playing: boolean;\n    length: number;\n    offsetEnabled?: boolean;\n    displayLength?: number;\n    offset: number;\n    playbackRate: number;\n    playbackRateEnabled?: boolean;\n    onAudioTrackSelected: (id: string) => void;\n    onSeek: (progress: number) => void;\n    mousePositionRef: MutableRefObject<Point>;\n    onShow?: (show: boolean) => void;\n    onPause: () => void;\n    onPlay: () => void;\n    onTabSelected?: (tab: VideoTabModel) => void;\n    onUnloadAudio?: () => void;\n    onUnloadVideo?: () => void;\n    onOffsetChange: (offset: number) => void;\n    onPlaybackRateChange: (playbackRate: number) => void;\n    onVolumeChange: (volume: number) => void;\n    disableKeyEvents?: boolean;\n    playbackPreferences: PlaybackPreferences;\n    closeEnabled?: boolean;\n    onClose?: () => void;\n    volumeEnabled?: boolean;\n    playMode?: PlayMode;\n    playModeEnabled?: boolean;\n    onPlayMode?: (playMode: PlayMode) => void;\n    subtitlesEnabled?: boolean;\n    subtitlesToggle?: boolean;\n    onSubtitlesToggle?: () => void;\n    videoFile?: string;\n    audioFile?: string;\n    audioTracks?: AudioTrackModel[];\n    selectedAudioTrack?: string;\n    tabs?: VideoTabModel[];\n    selectedTab?: VideoTabModel;\n    popOutEnabled?: boolean;\n    popOut?: boolean;\n    onPopOutToggle?: () => void;\n    fullscreenEnabled?: boolean;\n    fullscreen?: boolean;\n    onFullscreenToggle?: () => void;\n    hideSubtitlePlayerToggleEnabled?: boolean;\n    subtitlePlayerHidden?: boolean;\n    onHideSubtitlePlayerToggle?: () => void;\n    showOnMouseMovement: boolean;\n    theaterModeToggleEnabled?: boolean;\n    theaterModeEnabled?: boolean;\n    onTheaterModeToggle?: () => void;\n}\n\nexport default function Controls({\n    clock,\n    playing,\n    length,\n    offsetEnabled,\n    displayLength,\n    offset,\n    playbackRate,\n    playbackRateEnabled,\n    onAudioTrackSelected,\n    onSeek,\n    mousePositionRef,\n    onShow,\n    onPause,\n    onPlay,\n    onTabSelected,\n    onUnloadAudio,\n    onUnloadVideo,\n    onOffsetChange,\n    onPlaybackRateChange,\n    onVolumeChange,\n    disableKeyEvents,\n    playbackPreferences,\n    closeEnabled,\n    onClose,\n    volumeEnabled,\n    playMode,\n    playModeEnabled,\n    onPlayMode,\n    subtitlesEnabled,\n    subtitlesToggle,\n    onSubtitlesToggle,\n    videoFile,\n    audioFile,\n    audioTracks,\n    selectedAudioTrack,\n    tabs,\n    selectedTab,\n    popOutEnabled,\n    popOut,\n    onPopOutToggle,\n    fullscreenEnabled,\n    fullscreen,\n    onFullscreenToggle,\n    hideSubtitlePlayerToggleEnabled,\n    subtitlePlayerHidden,\n    onHideSubtitlePlayerToggle,\n    showOnMouseMovement,\n    theaterModeToggleEnabled,\n    theaterModeEnabled,\n    onTheaterModeToggle,\n}: ControlsProps) {\n    const classes = useControlStyles();\n    const [show, setShow] = useState<boolean>(true);\n    const [audioTrackSelectorOpen, setAudioTrackSelectorOpen] = useState<boolean>(false);\n    const [audioTrackSelectorAnchorEl, setAudioTrackSelectorAnchorEl] = useState<Element>();\n    const [tabSelectorOpen, setTabSelectorOpen] = useState<boolean>(false);\n    const [tabSelectorAnchorEl, setTabSelectorAnchorEl] = useState<Element>();\n    const [audioUnloaderOpen, setAudioUnloaderOpen] = useState<boolean>(false);\n    const [audioUnloaderAnchorEl, setAudioUnloaderAnchorEl] = useState<Element>();\n    const [videoUnloaderOpen, setVideoUnloaderOpen] = useState<boolean>(false);\n    const [videoUnloaderAnchorEl, setVideoUnloaderAnchorEl] = useState<Element>();\n    const [playModeSelectorOpen, setPlayModeSelectorOpen] = useState<boolean>(false);\n    const [playModeSelectorAnchorEl, setPlayModeSelectorAnchorEl] = useState<Element>();\n    const [showVolumeBar, setShowVolumeBar] = useState<boolean>(false);\n    const [volume, setVolume] = useState<number>(100);\n    const [lastCommittedVolume, setLastCommittedVolume] = useState<number>(100);\n\n    const lastMousePositionRef = useRef<Point>({ x: 0, y: 0 });\n    const lastShowTimestampRef = useRef<number>(Date.now());\n    const lastNumberInputChangeTimestampRef = useRef<number>(Date.now());\n    const lastShowRef = useRef<boolean>(true);\n    const forceShowRef = useRef<boolean>(false);\n    const [offsetInputWidth, setOffsetInputWidth] = useState<number>(5);\n    const [playbackRateInputWidth, setPlaybackRateInputWidth] = useState<number>(5);\n    const offsetInputRef = useRef<HTMLInputElement>();\n    const playbackRateInputRef = useRef<HTMLInputElement>();\n    const containerRef = useRef<HTMLDivElement>(null);\n    const closeButtonRef = useRef<HTMLButtonElement>(null);\n    const [, updateState] = useState<any>();\n    const forceUpdate = useCallback(() => updateState({}), []);\n\n    const handleSeek = useCallback(\n        (progress: number) => {\n            onSeek(progress);\n        },\n        [onSeek]\n    );\n\n    function handleMouseOver() {\n        forceShowRef.current = true;\n    }\n\n    function handleMouseOut() {\n        forceShowRef.current = false;\n    }\n\n    useEffect(() => {\n        const savedVolume = Number(playbackPreferences.volume);\n        setVolume(savedVolume);\n        onVolumeChange(savedVolume / 100);\n\n        if (savedVolume > 0) {\n            setLastCommittedVolume(savedVolume);\n        }\n    }, [playbackPreferences, onVolumeChange]);\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            let currentShow: boolean;\n\n            if (showOnMouseMovement) {\n                currentShow =\n                    Date.now() - lastShowTimestampRef.current < 2000 ||\n                    Math.pow(mousePositionRef.current.x - lastMousePositionRef.current.x, 2) +\n                        Math.pow(mousePositionRef.current.y - lastMousePositionRef.current.y, 2) >\n                        100;\n            } else {\n                currentShow =\n                    ((containerRef.current && mousePositionRef.current.y > containerRef.current.offsetTop - 20) ||\n                        (closeButtonRef.current &&\n                            mousePositionRef.current.y < closeButtonRef.current.offsetHeight + 20)) ??\n                    false;\n            }\n\n            currentShow =\n                currentShow ||\n                forceShowRef.current ||\n                offsetInputRef.current === document.activeElement ||\n                playbackRateInputRef.current === document.activeElement ||\n                Date.now() - lastNumberInputChangeTimestampRef.current < 2000;\n\n            if (currentShow && !lastShowRef.current) {\n                lastShowTimestampRef.current = Date.now();\n                setShow(currentShow);\n            } else if (!currentShow && lastShowRef.current) {\n                setShow(currentShow);\n            }\n\n            lastShowRef.current = currentShow;\n            lastMousePositionRef.current.x = mousePositionRef.current.x;\n            lastMousePositionRef.current.y = mousePositionRef.current.y;\n        }, 100);\n        return () => clearInterval(interval);\n    }, [mousePositionRef, showOnMouseMovement]);\n\n    useEffect(() => onShow?.(show), [onShow, show]);\n\n    const updateOffset = useCallback((offset: number) => {\n        if (offsetInputRef.current) {\n            if (offset === 0) {\n                offsetInputRef.current.value = '';\n                setOffsetInputWidth(5);\n            } else {\n                const offsetSeconds = offset / 1000;\n                const value = offsetSeconds >= 0 ? '+' + offsetSeconds.toFixed(2) : String(offsetSeconds.toFixed(2));\n                offsetInputRef.current.value = value;\n                lastNumberInputChangeTimestampRef.current = Date.now();\n                setOffsetInputWidth(value.length);\n            }\n            offsetInputRef.current.blur();\n        }\n    }, []);\n\n    const updatePlaybackRate = useCallback((playbackRate: number) => {\n        if (playbackRateInputRef.current) {\n            if (playbackRate === 1) {\n                playbackRateInputRef.current.value = '';\n                setPlaybackRateInputWidth(5);\n            } else {\n                const value = '×' + String(playbackRate.toFixed(2));\n                playbackRateInputRef.current.value = value;\n                lastNumberInputChangeTimestampRef.current = Date.now();\n                setPlaybackRateInputWidth(value.length);\n            }\n            playbackRateInputRef.current.blur();\n        }\n    }, []);\n\n    useEffect(() => {\n        if (disableKeyEvents) {\n            return;\n        }\n\n        function handleKey(event: KeyboardEvent) {\n            if (event.key === 'Enter') {\n                if (offsetInputRef.current === document.activeElement) {\n                    const newOffset = Number(offsetInputRef.current.value);\n\n                    if (newOffset === offset) {\n                        updateOffset(offset);\n                        return;\n                    }\n\n                    if (Number.isNaN(newOffset)) {\n                        return;\n                    }\n\n                    onOffsetChange(newOffset * 1000);\n                } else if (playbackRateInputRef.current === document.activeElement) {\n                    const newPlaybackRate = Number(playbackRateInputRef.current.value);\n\n                    if (playbackRate === newPlaybackRate) {\n                        updatePlaybackRate(playbackRate);\n                        return;\n                    }\n\n                    if (Number.isNaN(newPlaybackRate) || newPlaybackRate < 0.1 || newPlaybackRate > 5) {\n                        return;\n                    }\n\n                    onPlaybackRateChange(newPlaybackRate);\n                }\n            }\n        }\n\n        window.addEventListener('keydown', handleKey);\n\n        return () => {\n            window.removeEventListener('keydown', handleKey);\n        };\n    }, [\n        onOffsetChange,\n        onPlaybackRateChange,\n        updateOffset,\n        updatePlaybackRate,\n        offset,\n        playbackRate,\n        disableKeyEvents,\n    ]);\n\n    const handleNumberInputClicked = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n        const inputElement = e.target as HTMLInputElement;\n        inputElement.setSelectionRange(0, inputElement.value?.length || 0);\n    }, []);\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            forceUpdate();\n        }, 100);\n\n        return () => clearInterval(interval);\n    }, [forceUpdate]);\n\n    useEffect(() => {\n        updateOffset(offset);\n    }, [offset, updateOffset]);\n\n    useEffect(() => {\n        updatePlaybackRate(playbackRate);\n    }, [playbackRate, updatePlaybackRate]);\n\n    const handleAudioTrackSelectorClosed = useCallback(() => {\n        setAudioTrackSelectorAnchorEl(undefined);\n        setAudioTrackSelectorOpen(false);\n    }, []);\n\n    const handleAudioTrackSelectorOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setAudioTrackSelectorAnchorEl(e.currentTarget);\n        setAudioTrackSelectorOpen(true);\n    }, []);\n\n    const handleAudioTrackSelected = useCallback(\n        (id: string) => {\n            onAudioTrackSelected(id);\n            setAudioTrackSelectorAnchorEl(undefined);\n            setAudioTrackSelectorOpen(false);\n        },\n        [onAudioTrackSelected]\n    );\n\n    const handleTabSelectorClosed = useCallback(() => {\n        setTabSelectorAnchorEl(undefined);\n        setTabSelectorOpen(false);\n    }, []);\n\n    const handleTabSelectorOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setTabSelectorAnchorEl(e.currentTarget);\n        setTabSelectorOpen(true);\n    }, []);\n\n    const handleTabSelected = useCallback(\n        (tab: VideoTabModel) => {\n            onTabSelected?.(tab);\n            setTabSelectorAnchorEl(undefined);\n            setTabSelectorOpen(false);\n        },\n        [onTabSelected]\n    );\n\n    const handleAudioUnloaderClosed = useCallback(() => {\n        setAudioUnloaderAnchorEl(undefined);\n        setAudioUnloaderOpen(false);\n    }, []);\n\n    const handleAudioUnloaderOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setAudioUnloaderAnchorEl(e.currentTarget);\n        setAudioUnloaderOpen(true);\n    }, []);\n\n    const handleUnloadAudio = useCallback(() => {\n        onUnloadAudio?.();\n        setAudioUnloaderOpen(false);\n    }, [onUnloadAudio]);\n\n    const handleVideoUnloaderClosed = useCallback(() => {\n        setVideoUnloaderAnchorEl(undefined);\n        setVideoUnloaderOpen(false);\n    }, []);\n\n    const handleVideoUnloaderOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setVideoUnloaderAnchorEl(e.currentTarget);\n        setVideoUnloaderOpen(true);\n    }, []);\n\n    const handleUnloadVideo = useCallback(() => {\n        onUnloadVideo?.();\n        setVideoUnloaderOpen(false);\n    }, [onUnloadVideo]);\n\n    const handlePlayModeSelectorClosed = useCallback(() => {\n        setPlayModeSelectorAnchorEl(undefined);\n        setPlayModeSelectorOpen(false);\n    }, []);\n\n    const handlePlayModeSelectorOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setPlayModeSelectorAnchorEl(e.currentTarget);\n        setPlayModeSelectorOpen(true);\n    }, []);\n\n    const handlePlayModeSelected = useCallback(\n        (playMode: PlayMode) => {\n            onPlayMode?.(playMode);\n            setPlayModeSelectorAnchorEl(undefined);\n            setPlayModeSelectorOpen(false);\n        },\n        [onPlayMode]\n    );\n\n    const handleVolumeMouseOut = useCallback(() => setShowVolumeBar(false), []);\n    const handleVolumeMouseOver = useCallback(() => setShowVolumeBar(true), []);\n\n    const handleVolumeChange = useCallback(\n        (e: React.ChangeEvent<{}>, value: number | number[]) => {\n            if (typeof value !== 'number') {\n                return;\n            }\n\n            setVolume(value);\n            onVolumeChange(value / 100);\n        },\n        [onVolumeChange]\n    );\n\n    const handleVolumeChangeCommitted = useCallback(\n        (e: React.ChangeEvent<{}>, value: number | number[]) => {\n            if (typeof value !== 'number') {\n                return;\n            }\n\n            if (value > 0) {\n                setLastCommittedVolume(value);\n            }\n\n            playbackPreferences.volume = value;\n        },\n        [playbackPreferences]\n    );\n\n    const handleVolumeToggle = useCallback(() => {\n        setVolume((volume) => {\n            const newVolume = volume > 0 ? 0 : lastCommittedVolume;\n            onVolumeChange(newVolume / 100);\n            return newVolume;\n        });\n    }, [onVolumeChange, lastCommittedVolume]);\n\n    const progress = clock.progress(length);\n\n    return (\n        <React.Fragment>\n            <Fade in={show} timeout={200}>\n                <Grid container style={{ position: 'absolute', top: 0 }}>\n                    <Grid item style={{ flexGrow: 1 }}>\n                        {closeEnabled && (\n                            <IconButton\n                                ref={closeButtonRef}\n                                color=\"inherit\"\n                                className={classes.topButton}\n                                onClick={onClose}\n                                onMouseOver={handleMouseOver}\n                                onMouseOut={handleMouseOut}\n                            >\n                                <CloseIcon />\n                            </IconButton>\n                        )}\n                    </Grid>\n                    <Grid item>\n                        {theaterModeToggleEnabled && (\n                            <IconButton\n                                color=\"inherit\"\n                                className={theaterModeEnabled ? classes.topButton : classes.inactiveTopButton}\n                                onClick={onTheaterModeToggle}\n                                onMouseOver={handleMouseOver}\n                                onMouseOut={handleMouseOut}\n                            >\n                                <AspectRatioIcon />\n                            </IconButton>\n                        )}\n                        {hideSubtitlePlayerToggleEnabled && (\n                            <IconButton\n                                color=\"inherit\"\n                                className={classes.topButton}\n                                onClick={onHideSubtitlePlayerToggle}\n                                onMouseOver={handleMouseOver}\n                                onMouseOut={handleMouseOut}\n                            >\n                                {subtitlePlayerHidden ? <ArrowBackIcon /> : <ArrowForwardIcon />}\n                            </IconButton>\n                        )}\n                    </Grid>\n                </Grid>\n            </Fade>\n            <div\n                ref={containerRef}\n                className={classes.container}\n                onMouseOver={handleMouseOver}\n                onMouseOut={handleMouseOut}\n            >\n                <Fade in={show} timeout={200}>\n                    <div className={classes.subContainer}>\n                        <ProgressBar onSeek={handleSeek} value={progress * 100} />\n                        <Grid container className={classes.gridContainer} direction=\"row\">\n                            <Grid item>\n                                <IconButton color=\"inherit\" onClick={() => (playing ? onPause() : onPlay())}>\n                                    {playing ? (\n                                        <PauseIcon className={classes.button} />\n                                    ) : (\n                                        <PlayArrowIcon className={classes.button} />\n                                    )}\n                                </IconButton>\n                            </Grid>\n                            {volumeEnabled && (\n                                <Grid\n                                    item\n                                    onMouseOver={handleVolumeMouseOver}\n                                    onMouseOut={handleVolumeMouseOut}\n                                    className={\n                                        showVolumeBar\n                                            ? classes.volumeInputContainerShown\n                                            : classes.volumeInputContainerHidden\n                                    }\n                                >\n                                    <IconButton color=\"inherit\" onClick={handleVolumeToggle}>\n                                        {volume === 0 ? <VolumeOffIcon /> : <VolumeUpIcon />}\n                                    </IconButton>\n                                    <VolumeSlider\n                                        onChange={handleVolumeChange}\n                                        onChangeCommitted={handleVolumeChangeCommitted}\n                                        value={volume}\n                                        defaultValue={100}\n                                        classes={{\n                                            root: showVolumeBar ? classes.volumeInputShown : classes.volumeInputHidden,\n                                            thumb: showVolumeBar\n                                                ? classes.volumeInputThumbShown\n                                                : classes.volumeInputThumbHidden,\n                                        }}\n                                    />\n                                </Grid>\n                            )}\n                            <Grid item>\n                                <div className={classes.timeDisplay}>\n                                    {displayTime(progress * length)} / {displayTime(displayLength || length)}\n                                </div>\n                            </Grid>\n                            {offsetEnabled && (\n                                <Grid item>\n                                    <Tooltip title=\"Subtitle Offset\">\n                                        <Input\n                                            style={{\n                                                width: `${offsetInputWidth}ch`,\n                                            }}\n                                            inputRef={offsetInputRef}\n                                            disableUnderline={true}\n                                            className={classes.numberInput}\n                                            placeholder={'±' + Number(0).toFixed(2)}\n                                            onClick={handleNumberInputClicked}\n                                            onChange={(e) => setOffsetInputWidth(Math.max(5, e.target.value.length))}\n                                        />\n                                    </Tooltip>\n                                </Grid>\n                            )}\n                            {playbackRateEnabled && (\n                                <Grid item>\n                                    <Tooltip title=\"Playback Rate\">\n                                        <Input\n                                            style={{\n                                                width: `${playbackRateInputWidth}ch`,\n                                                marginLeft: 4,\n                                            }}\n                                            inputRef={playbackRateInputRef}\n                                            disableUnderline={true}\n                                            className={classes.numberInput}\n                                            placeholder={'×' + Number(1).toFixed(2)}\n                                            onClick={handleNumberInputClicked}\n                                            onChange={(e) =>\n                                                setPlaybackRateInputWidth(Math.max(5, e.target.value.length))\n                                            }\n                                        />\n                                    </Tooltip>\n                                </Grid>\n                            )}\n                            <Grid item style={{ flexGrow: 1 }}></Grid>\n                            {subtitlesToggle && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={onSubtitlesToggle}>\n                                        <SubtitlesIcon\n                                            className={subtitlesEnabled ? classes.button : classes.inactiveButton}\n                                        />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {videoFile && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={handleVideoUnloaderOpened}>\n                                        <VideocamIcon className={classes.button} />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {audioFile && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={handleAudioUnloaderOpened}>\n                                        <AudiotrackIcon className={classes.button} />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {audioTracks && audioTracks.length > 1 && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={handleAudioTrackSelectorOpened}>\n                                        <QueueMusicIcon className={classes.button} />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {tabs && tabs.length > 0 && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={handleTabSelectorOpened}>\n                                        <VideocamIcon\n                                            className={selectedTab ? classes.button : classes.inactiveButton}\n                                        />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {playModeEnabled && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={handlePlayModeSelectorOpened}>\n                                        <TuneIcon\n                                            className={playModeEnabled ? classes.button : classes.inactiveButton}\n                                        />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {popOutEnabled && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={onPopOutToggle}>\n                                        <OpenInNewIcon\n                                            className={classes.button}\n                                            style={popOut ? { transform: 'rotateX(180deg)' } : {}}\n                                        />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {fullscreenEnabled && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={onFullscreenToggle}>\n                                        {fullscreen ? (\n                                            <FullscreenExitIcon className={classes.button} />\n                                        ) : (\n                                            <FullscreenIcon className={classes.button} />\n                                        )}\n                                    </IconButton>\n                                </Grid>\n                            )}\n                        </Grid>\n                    </div>\n                </Fade>\n                <TabSelector\n                    open={tabSelectorOpen && show}\n                    anchorEl={tabSelectorAnchorEl}\n                    tabs={tabs}\n                    selectedTab={selectedTab}\n                    onClose={handleTabSelectorClosed}\n                    onTabSelected={handleTabSelected}\n                />\n                <AudioTrackSelector\n                    open={audioTrackSelectorOpen && show}\n                    anchorEl={audioTrackSelectorAnchorEl}\n                    audioTracks={audioTracks}\n                    selectedAudioTrack={selectedAudioTrack}\n                    onClose={handleAudioTrackSelectorClosed}\n                    onAudioTrackSelected={handleAudioTrackSelected}\n                />\n                <MediaUnloader\n                    open={audioUnloaderOpen}\n                    anchorEl={audioUnloaderAnchorEl}\n                    file={audioFile}\n                    onClose={handleAudioUnloaderClosed}\n                    onUnload={handleUnloadAudio}\n                />\n                <MediaUnloader\n                    open={videoUnloaderOpen}\n                    anchorEl={videoUnloaderAnchorEl}\n                    file={videoFile}\n                    onClose={handleVideoUnloaderClosed}\n                    onUnload={handleUnloadVideo}\n                />\n                <PlayModeSelector\n                    open={playModeSelectorOpen && show}\n                    anchorEl={playModeSelectorAnchorEl}\n                    selectedPlayMode={playMode}\n                    onClose={handlePlayModeSelectorClosed}\n                    onPlayMode={handlePlayModeSelected}\n                />\n            </div>\n        </React.Fragment>\n    );\n}\n","import { RefObject } from \"react\";\n\nexport interface MediaElement {\n    currentTime: number;\n    readyState: number;\n    playbackRate: number;\n    oncanplay: ((ev: Event) => void) | null;\n    play: () => Promise<void>;\n    pause: () => void;\n    duration: number;\n}\n\nexport default class MediaAdapter {\n    private readonly ref: RefObject<MediaElement | undefined>;\n    private readonly readyResolves: (() => void)[];\n\n    constructor(ref: RefObject<MediaElement | undefined>) {\n        this.ref = ref;\n        this.readyResolves = [];\n    }\n\n    async seek(time: number) {\n        return new Promise((resolve, reject) => {\n            if (this.ref.current) {\n                this.ref.current.currentTime = time;\n                this._onMediaCanPlay(() => resolve(undefined));\n            } else {\n                resolve(undefined);\n            }\n        });\n    }\n\n    async onReady() {\n        return new Promise((resolve, reject) => {\n            if (this.ref.current) {\n                this._onMediaCanPlay(() => resolve(undefined));\n            } else {\n                resolve(undefined);\n            }\n        });\n    }\n\n    _onMediaCanPlay(callback: () => void) {\n        if (this.ref.current?.readyState === 4) {\n            callback();\n            return;\n        }\n\n        if (this.ref.current && !this.ref.current.oncanplay) {\n            this.ref.current.oncanplay = (e) => {\n                for (const resolve of this.readyResolves) {\n                    resolve();\n                }\n\n                this.readyResolves.length = 0;\n\n                if (this.ref.current) {\n                    this.ref.current.oncanplay = null;\n                }\n            };\n        }\n\n        this.readyResolves.push(callback);\n    }\n\n    play() {\n        this.ref.current?.play();\n    }\n\n    pause() {\n        this.ref.current?.pause();\n    }\n\n    playbackRate(playbackRate: number) {\n        if (this.ref.current) {\n            this.ref.current.playbackRate = playbackRate;\n        }\n    }\n}\n","import React, { useCallback, useEffect, useState, useMemo, useRef, createRef, RefObject } from 'react';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport { keysAreEqual } from '../services/util';\nimport { useWindowSize } from '../hooks/useWindowSize';\nimport {\n    AsbplayerSettingsProvider,\n    PostMineAction,\n    surroundingSubtitles,\n    SubtitleModel,\n    SubtitleCollection,\n    KeyBinder,\n    AutoPauseContext,\n} from '@project/common';\nimport { SubtitleTextImage } from '@project/common/components';\nimport FileCopy from '@material-ui/icons/FileCopy';\nimport IconButton from '@material-ui/core/IconButton';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableRow, { TableRowProps } from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\nimport Clock from '../services/Clock';\n\ninterface StylesProps {\n    compressed: boolean;\n    appBarHidden: boolean;\n    windowWidth: number;\n}\n\nconst useSubtitlePlayerStyles = makeStyles<Theme, StylesProps, string>((theme) => ({\n    container: {\n        height: ({ appBarHidden }) => (appBarHidden ? '100vh' : 'calc(100vh - 64px)'),\n        position: 'relative',\n        overflowX: 'hidden',\n        backgroundColor: theme.palette.background.default,\n        width: ({ compressed, windowWidth }) => (compressed ? Math.max(350, 0.25 * windowWidth) : '100%'),\n    },\n    table: {\n        backgroundColor: theme.palette.background.default,\n        marginBottom: 75, // so the last row doesn't collide with controls\n    },\n    noSubtitles: {\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        padding: 15,\n        textAlign: 'center',\n    },\n}));\n\nconst useSubtitleRowStyles = makeStyles((theme) => ({\n    subtitleRow: {\n        '&:hover': {\n            backgroundColor: theme.palette.action.hover,\n        },\n    },\n    subtitle: {\n        fontSize: 20,\n        paddingRight: 0,\n        minWidth: 200,\n        width: '100%',\n        overflowWrap: 'anywhere',\n        whiteSpace: 'pre-wrap',\n    },\n    compressedSubtitle: {\n        fontSize: 16,\n        paddingRight: 0,\n        minWidth: 200,\n        width: '100%',\n        overflowWrap: 'anywhere',\n        whiteSpace: 'pre-wrap',\n    },\n    disabledSubtitle: {\n        color: 'transparent',\n        backgroundColor: theme.palette.action.disabledBackground,\n        borderRadius: 5,\n    },\n    timestamp: {\n        fontSize: 14,\n        color: '#aaaaaa',\n        textAlign: 'right',\n        paddingRight: 15,\n        paddingLeft: 5,\n    },\n    copyButton: {\n        textAlign: 'right',\n        padding: 0,\n    },\n}));\n\nexport interface DisplaySubtitleModel extends SubtitleModel {\n    displayTime: string;\n    index: number;\n}\n\ninterface SubtitleRowProps extends TableRowProps {\n    index: number;\n    compressed: boolean;\n    selected: boolean;\n    disabled: boolean;\n    subtitle: DisplaySubtitleModel;\n    copyButtonEnabled: boolean;\n    subtitleRef: RefObject<HTMLTableRowElement>;\n    onClickSubtitle: (index: number) => void;\n    onCopySubtitle: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>, index: number) => void;\n}\n\nconst SubtitleRow = React.memo((props: SubtitleRowProps) => {\n    const {\n        index,\n        selected,\n        subtitleRef,\n        onClickSubtitle,\n        onCopySubtitle,\n        compressed,\n        disabled,\n        subtitle,\n        copyButtonEnabled,\n        ...tableRowProps\n    } = props;\n    const classes = useSubtitleRowStyles();\n    const textRef = useRef<HTMLSpanElement>(null);\n    const [textSelected, setTextSelected] = useState<boolean>(false);\n    let className = compressed ? classes.compressedSubtitle : classes.subtitle;\n    let disabledClassName = disabled ? classes.disabledSubtitle : '';\n\n    if (subtitle.start < 0 || subtitle.end < 0) {\n        return null;\n    }\n\n    function handleMouseUp() {\n        const selection = document.getSelection();\n        const selected =\n            selection?.type === 'Range' && textRef.current?.isSameNode(selection.anchorNode?.parentNode ?? null);\n        setTextSelected(selected ?? false);\n    }\n\n    const content = subtitle.textImage ? (\n        <SubtitleTextImage availableWidth={window.screen.availWidth / 2} subtitle={subtitle} scale={1} />\n    ) : (\n        <span ref={textRef} className={disabledClassName}>\n            {subtitle.text}\n        </span>\n    );\n\n    return (\n        <TableRow\n            onClick={() => !textSelected && onClickSubtitle(index)}\n            onMouseUp={handleMouseUp}\n            ref={subtitleRef}\n            className={classes.subtitleRow}\n            selected={selected}\n            {...tableRowProps}\n        >\n            <TableCell className={className}>{content}</TableCell>\n            {copyButtonEnabled && (\n                <TableCell className={classes.copyButton}>\n                    <IconButton onClick={(e) => onCopySubtitle(e, index)}>\n                        <FileCopy fontSize={compressed ? 'small' : 'medium'} />\n                    </IconButton>\n                </TableCell>\n            )}\n            <TableCell className={classes.timestamp}>\n                <div>{`\\n${subtitle.displayTime}\\n`}</div>\n            </TableCell>\n        </TableRow>\n    );\n});\n\ninterface SubtitlePlayerProps {\n    clock: Clock;\n    onSeek: (progress: number, shouldPlay: boolean) => void;\n    onCopy: (\n        subtitle: SubtitleModel,\n        surroundingSubtitles: SubtitleModel[],\n        postMineAction: PostMineAction,\n        preventDuplicate: boolean\n    ) => void;\n    onOffsetChange: (offset: number) => void;\n    onToggleSubtitleTrack: (track: number) => void;\n    onSubtitlesSelected: (subtitles: SubtitleModel[]) => void;\n    autoPauseContext: AutoPauseContext;\n    playing: boolean;\n    subtitles?: DisplaySubtitleModel[];\n    subtitleCollection?: SubtitleCollection<DisplaySubtitleModel>;\n    length: number;\n    jumpToSubtitle?: SubtitleModel;\n    compressed: boolean;\n    copyButtonEnabled: boolean;\n    loading: boolean;\n    drawerOpen: boolean;\n    appBarHidden: boolean;\n    displayHelp?: string;\n    disableKeyEvents: boolean;\n    lastJumpToTopTimestamp: number;\n    hidden: boolean;\n    disabledSubtitleTracks: { [track: number]: boolean };\n    settingsProvider: AsbplayerSettingsProvider;\n    keyBinder: KeyBinder;\n}\n\nexport default function SubtitlePlayer({\n    clock,\n    onSeek,\n    onCopy,\n    onOffsetChange,\n    onToggleSubtitleTrack,\n    onSubtitlesSelected,\n    autoPauseContext,\n    playing,\n    subtitles,\n    subtitleCollection,\n    length,\n    jumpToSubtitle,\n    compressed,\n    copyButtonEnabled,\n    loading,\n    drawerOpen,\n    appBarHidden,\n    displayHelp,\n    disableKeyEvents,\n    lastJumpToTopTimestamp,\n    hidden,\n    disabledSubtitleTracks,\n    settingsProvider,\n    keyBinder,\n}: SubtitlePlayerProps) {\n    const playingRef = useRef<boolean>();\n    playingRef.current = playing;\n    const clockRef = useRef<Clock>(clock);\n    clockRef.current = clock;\n    const subtitleListRef = useRef<DisplaySubtitleModel[]>();\n    subtitleListRef.current = subtitles;\n    const subtitleRefs = useMemo<RefObject<HTMLTableRowElement>[]>(\n        () =>\n            subtitles\n                ? Array(subtitles.length)\n                      .fill(undefined)\n                      .map((_) => createRef<HTMLTableRowElement>())\n                : [],\n        [subtitles]\n    );\n    const subtitleCollectionRef = useRef<SubtitleCollection<DisplaySubtitleModel>>(\n        SubtitleCollection.empty<DisplaySubtitleModel>()\n    );\n    subtitleCollectionRef.current = subtitleCollection ?? SubtitleCollection.empty<DisplaySubtitleModel>();\n    const subtitleRefsRef = useRef<RefObject<HTMLTableRowElement>[]>([]);\n    subtitleRefsRef.current = subtitleRefs;\n    const disableKeyEventsRef = useRef<boolean>();\n    disableKeyEventsRef.current = disableKeyEvents;\n    const [selectedSubtitleIndexes, setSelectedSubtitleIndexes] = useState<{ [index: number]: boolean }>({});\n    const selectedSubtitleIndexesRef = useRef<{ [index: number]: boolean }>({});\n    const lengthRef = useRef<number>(0);\n    lengthRef.current = length;\n    const hiddenRef = useRef<boolean>(false);\n    hiddenRef.current = hidden;\n    const lastScrollTimestampRef = useRef<number>(0);\n    const requestAnimationRef = useRef<number>();\n    const containerRef = useRef<HTMLElement>();\n    const drawerOpenRef = useRef<boolean>();\n    drawerOpenRef.current = drawerOpen;\n    const [windowWidth] = useWindowSize(true);\n    const classes = useSubtitlePlayerStyles({ compressed, windowWidth, appBarHidden });\n    const autoPauseContextRef = useRef<AutoPauseContext>();\n    autoPauseContextRef.current = autoPauseContext;\n    const onSubtitlesSelectedRef = useRef<(subtitles: SubtitleModel[]) => void>();\n    onSubtitlesSelectedRef.current = onSubtitlesSelected;\n\n    // This effect should be scheduled only once as re-scheduling seems to cause performance issues.\n    // Therefore all of the state it operates on is contained in refs.\n    useEffect(() => {\n        const update = () => {\n            const subtitleRefs = subtitleRefsRef.current;\n            const clock = clockRef.current;\n            const currentSubtitleIndexes: { [index: number]: boolean } = {};\n            const timestamp = clock.time(lengthRef.current);\n\n            let slice = subtitleCollectionRef.current.subtitlesAt(timestamp);\n            const showing = slice.showing.length === 0 ? slice.lastShown ?? [] : slice.showing;\n            let smallestIndex: number | undefined;\n\n            for (const s of showing) {\n                currentSubtitleIndexes[s.index] = true;\n\n                if (smallestIndex === undefined || s.index < smallestIndex) {\n                    smallestIndex = s.index;\n                }\n            }\n\n            if (!keysAreEqual(currentSubtitleIndexes, selectedSubtitleIndexesRef.current)) {\n                selectedSubtitleIndexesRef.current = currentSubtitleIndexes;\n                setSelectedSubtitleIndexes(currentSubtitleIndexes);\n                onSubtitlesSelectedRef.current?.(showing);\n\n                if (smallestIndex !== undefined) {\n                    const scrollToSubtitleRef = subtitleRefs[smallestIndex];\n                    const allowScroll = !hiddenRef.current && Date.now() - lastScrollTimestampRef.current > 5000;\n\n                    if (scrollToSubtitleRef?.current && allowScroll) {\n                        scrollToSubtitleRef.current.scrollIntoView({\n                            block: 'center',\n                            inline: 'nearest',\n                            behavior: 'smooth',\n                        });\n                    }\n                }\n            }\n\n            if (slice.startedShowing !== undefined) {\n                autoPauseContextRef.current?.startedShowing(slice.startedShowing);\n            }\n\n            if (slice.willStopShowing !== undefined) {\n                autoPauseContextRef.current?.willStopShowing(slice.willStopShowing);\n            }\n\n            requestAnimationRef.current = requestAnimationFrame(update);\n        };\n\n        requestAnimationRef.current = requestAnimationFrame(update);\n\n        return () => {\n            if (requestAnimationRef.current !== undefined) {\n                cancelAnimationFrame(requestAnimationRef.current);\n            }\n        };\n    }, []);\n\n    const scrollToCurrentSubtitle = useCallback(() => {\n        const selectedSubtitleIndexes = selectedSubtitleIndexesRef.current;\n\n        if (!selectedSubtitleIndexes) {\n            return;\n        }\n\n        const indexes = Object.keys(selectedSubtitleIndexes);\n\n        if (indexes.length === 0) {\n            return;\n        }\n\n        const scrollToSubtitleRef = subtitleRefs[Number(indexes[0])];\n\n        scrollToSubtitleRef?.current?.scrollIntoView({\n            block: 'center',\n            inline: 'nearest',\n            behavior: 'smooth',\n        });\n    }, [subtitleRefs]);\n\n    useEffect(() => {\n        if (hidden) {\n            return;\n        }\n\n        function scrollIfVisible() {\n            if (document.visibilityState === 'visible') {\n                scrollToCurrentSubtitle();\n            }\n        }\n\n        document.addEventListener('visibilitychange', scrollIfVisible);\n\n        return () => document.removeEventListener('visibilitychange', scrollIfVisible);\n    }, [hidden, selectedSubtitleIndexes, subtitleRefs, scrollToCurrentSubtitle]);\n\n    useEffect(() => {\n        if (!hidden) {\n            scrollToCurrentSubtitle();\n        }\n    }, [hidden, scrollToCurrentSubtitle]);\n\n    useEffect(() => {\n        if (hiddenRef.current) {\n            return;\n        }\n\n        const subtitleRefs = subtitleRefsRef.current;\n\n        if (!subtitleRefs || subtitleRefs.length === 0) {\n            return;\n        }\n\n        const firstSubtitleRef = subtitleRefs[0];\n        firstSubtitleRef?.current?.scrollIntoView({\n            block: 'center',\n            inline: 'nearest',\n            behavior: 'smooth',\n        });\n    }, [lastJumpToTopTimestamp]);\n\n    useEffect(() => {\n        return keyBinder.bindAdjustOffset(\n            (event, offset) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onOffsetChange(offset);\n            },\n            () => disableKeyEvents,\n            () => subtitles\n        );\n    }, [keyBinder, onOffsetChange, disableKeyEvents, subtitles]);\n\n\n    useEffect(() => {\n        return keyBinder.bindResetOffet(\n            (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onOffsetChange(0);\n            },\n            () => disableKeyEvents,\n        );\n    }, [keyBinder, onOffsetChange, disableKeyEvents]);\n\n    useEffect(() => {\n        return keyBinder.bindOffsetToSubtitle(\n            (event, offset) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onOffsetChange(offset);\n            },\n            () => disableKeyEvents,\n            () => clock.time(length),\n            () => subtitles\n        );\n    }, [keyBinder, onOffsetChange, disableKeyEvents, clock, subtitles, length]);\n\n    useEffect(() => {\n        return keyBinder.bindSeekToSubtitle(\n            (event, subtitle) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onSeek(subtitle.start, playingRef.current ?? false);\n            },\n            () => disableKeyEvents,\n            () => clock.time(length),\n            () => subtitles\n        );\n    }, [keyBinder, onSeek, subtitles, disableKeyEvents, clock, length]);\n\n    useEffect(() => {\n        return keyBinder.bindSeekToBeginningOfCurrentSubtitle(\n            (event, subtitle) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onSeek(subtitle.start, playingRef.current ?? false);\n            },\n            () => disableKeyEvents,\n            () => clock.time(length),\n            () => subtitles\n        );\n    }, [keyBinder, onSeek, subtitles, disableKeyEvents, clock, length]);\n\n    useEffect(() => {\n        return keyBinder.bindSeekBackwardOrForward(\n            (event, forward) => {\n                event.stopPropagation();\n                event.preventDefault();\n                if (forward) {\n                    onSeek(Math.min(length, clock.time(length) + 10000), playingRef.current ?? false);\n                } else {\n                    onSeek(Math.max(0, clock.time(length) - 10000), playingRef.current ?? false);\n                }\n            },\n            () => disableKeyEvents\n        );\n    }, [keyBinder, clock, length, disableKeyEvents, onSeek]);\n\n    useEffect(() => {\n        function handleScroll() {\n            lastScrollTimestampRef.current = Date.now();\n        }\n\n        const table = containerRef.current;\n        table?.addEventListener('wheel', handleScroll);\n\n        return () => table?.removeEventListener('wheel', handleScroll);\n    }, [containerRef, lastScrollTimestampRef]);\n\n    useEffect(() => {\n        if (hidden) {\n            return;\n        }\n\n        if (!jumpToSubtitle || !subtitles) {\n            return;\n        }\n\n        let jumpToIndex = -1;\n        let i = 0;\n\n        for (let s of subtitles) {\n            if (s.originalStart === jumpToSubtitle.originalStart && s.text === jumpToSubtitle.text) {\n                jumpToIndex = i;\n                break;\n            }\n\n            ++i;\n        }\n\n        if (jumpToIndex !== -1) {\n            subtitleRefs[jumpToIndex]?.current?.scrollIntoView({\n                block: 'center',\n                inline: 'nearest',\n                behavior: 'smooth',\n            });\n        }\n    }, [hidden, jumpToSubtitle, subtitles, subtitleRefs]);\n\n    const calculateSurroundingSubtitlesForIndex = useCallback(\n        (index: number) => {\n            if (!selectedSubtitleIndexesRef.current || !subtitles) {\n                return [];\n            }\n\n            return surroundingSubtitles(\n                subtitles,\n                index,\n                settingsProvider.surroundingSubtitlesCountRadius,\n                settingsProvider.surroundingSubtitlesTimeRadius\n            );\n        },\n        [subtitles, settingsProvider.surroundingSubtitlesCountRadius, settingsProvider.surroundingSubtitlesTimeRadius]\n    );\n\n    const calculateSurroundingSubtitles = useCallback(() => {\n        if (!selectedSubtitleIndexesRef.current) {\n            return [];\n        }\n        const index = Math.min(...Object.keys(selectedSubtitleIndexesRef.current).map((i) => Number(i)));\n        return calculateSurroundingSubtitlesForIndex(index);\n    }, [calculateSurroundingSubtitlesForIndex]);\n\n    const calculateCurrentSubtitle = useCallback(() => {\n        const subtitleIndexes = Object.keys(selectedSubtitleIndexesRef.current).map((i) => Number(i));\n\n        if (!subtitles || !subtitleIndexes || subtitleIndexes.length === 0) {\n            return undefined;\n        }\n\n        const index = Math.min(...subtitleIndexes);\n        return subtitles[index];\n    }, [subtitles]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindCopy(\n            (event, subtitle) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onCopy(subtitle, calculateSurroundingSubtitles(), PostMineAction.none, false);\n            },\n            () => disableKeyEventsRef.current ?? false,\n            () => calculateCurrentSubtitle()\n        );\n\n        return () => unbind();\n    }, [keyBinder, calculateCurrentSubtitle, calculateSurroundingSubtitles, onCopy]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindToggleSubtitleTrackInList(\n            (event, track) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onToggleSubtitleTrack(track);\n            },\n            () => disableKeyEvents\n        );\n\n        return () => unbind();\n    }, [keyBinder, disableKeyEvents, onToggleSubtitleTrack]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindAnkiExport(\n            (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n                const subtitleIndexes = Object.keys(selectedSubtitleIndexesRef.current).map((i) => Number(i));\n\n                if (subtitles && subtitleIndexes && subtitleIndexes.length > 0) {\n                    const index = Math.min(...subtitleIndexes);\n                    onCopy(\n                        subtitles[index],\n                        calculateSurroundingSubtitlesForIndex(index),\n                        PostMineAction.showAnkiDialog,\n                        true\n                    );\n                }\n            },\n            () => !subtitles || subtitles.length === 0 || disableKeyEvents\n        );\n\n        return () => unbind();\n    }, [keyBinder, onCopy, disableKeyEvents, subtitles, calculateSurroundingSubtitlesForIndex]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindUpdateLastCard(\n            (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n                const subtitleIndexes = Object.keys(selectedSubtitleIndexesRef.current).map((i) => Number(i));\n\n                if (subtitles && subtitleIndexes && subtitleIndexes.length > 0) {\n                    const index = Math.min(...subtitleIndexes);\n                    onCopy(\n                        subtitles[index],\n                        calculateSurroundingSubtitlesForIndex(index),\n                        PostMineAction.updateLastCard,\n                        true\n                    );\n                }\n            },\n            () => !subtitles || subtitles.length === 0 || disableKeyEvents\n        );\n\n        return () => unbind();\n    }, [keyBinder, onCopy, disableKeyEvents, subtitles, calculateSurroundingSubtitlesForIndex]);\n\n    const handleClick = useCallback(\n        (index: number) => {\n            if (!subtitles) {\n                return;\n            }\n\n            const selectedSubtitleIndexes = selectedSubtitleIndexesRef.current || {};\n            onSeek(subtitles[index].start, !playingRef.current && index in selectedSubtitleIndexes);\n        },\n        [subtitles, onSeek]\n    );\n\n    const handleCopy = useCallback(\n        (e: React.MouseEvent<HTMLButtonElement, MouseEvent>, index: number) => {\n            e.preventDefault();\n            e.stopPropagation();\n\n            if (!subtitles) {\n                return;\n            }\n\n            onCopy(subtitles[index], calculateSurroundingSubtitlesForIndex(index), PostMineAction.none, false);\n        },\n        [subtitles, calculateSurroundingSubtitlesForIndex, onCopy]\n    );\n\n    let subtitleTable = null;\n\n    if (!subtitles || subtitles.length === 0) {\n        if (!loading && displayHelp) {\n            subtitleTable = !loading && displayHelp && (\n                <div className={classes.noSubtitles}>\n                    <Typography variant=\"h6\">{displayHelp}</Typography>\n                </div>\n            );\n        } else if (subtitles && subtitles.length === 0) {\n            subtitleTable = (\n                <div className={classes.noSubtitles}>\n                    <Typography variant=\"h6\">No subtitles</Typography>\n                </div>\n            );\n        }\n    } else {\n        subtitleTable = (\n            <TableContainer className={classes.table}>\n                <Table>\n                    <TableBody>\n                        {subtitles.map((s: SubtitleModel, index: number) => {\n                            const selected = index in selectedSubtitleIndexes;\n\n                            return (\n                                <SubtitleRow\n                                    key={index}\n                                    index={index}\n                                    compressed={compressed}\n                                    selected={selected}\n                                    copyButtonEnabled={copyButtonEnabled}\n                                    disabled={disabledSubtitleTracks[s.track]}\n                                    subtitle={subtitles[index]}\n                                    subtitleRef={subtitleRefs[index]}\n                                    onClickSubtitle={handleClick}\n                                    onCopySubtitle={handleCopy}\n                                />\n                            );\n                        })}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        );\n    }\n\n    return (\n        <Paper square elevation={0} ref={containerRef} className={classes.container}>\n            {subtitleTable}\n        </Paper>\n    );\n}\n","import {\n    AlertMessage,\n    AnkiSettings,\n    AnkiSettingsToVideoMessage,\n    AppBarToggleMessageToVideoMessage,\n    AudioModel,\n    AudioTrackModel,\n    AudioTrackSelectedFromVideoMessage,\n    AudioTrackSelectedToVideoMessage,\n    CopyMessage,\n    CurrentTimeFromVideoMessage,\n    CurrentTimeToVideoMessage,\n    FullscreenToggleMessageToVideoMessage,\n    HideSubtitlePlayerToggleToVideoMessage,\n    ImageModel,\n    MiscSettings,\n    MiscSettingsToVideoMessage,\n    OffsetFromVideoMessage,\n    OffsetToVideoMessage,\n    PauseFromVideoMessage,\n    PlaybackRateFromVideoMessage,\n    PlaybackRateToVideoMessage,\n    PlayFromVideoMessage,\n    PlayMode,\n    PlayModeMessage,\n    PostMineAction,\n    ReadyFromVideoMessage,\n    ReadyStateFromVideoMessage,\n    ReadyToVideoMessage,\n    SubtitleModel,\n    SubtitleSettings,\n    SubtitleSettingsToVideoMessage,\n    SubtitlesToVideoMessage,\n    ToggleSubtitleTrackInListFromVideoMessage,\n} from '@project/common';\nimport { VideoProtocol } from './VideoProtocol';\n\nexport default class VideoChannel {\n    private readonly protocol: VideoProtocol;\n    private time: number;\n    private isReady: boolean;\n    private readyCallbacks: ((paused: boolean) => void)[];\n    private playCallbacks: ((echo: boolean) => void)[];\n    private pauseCallbacks: ((echo: boolean) => void)[];\n    private audioTrackSelectedCallbacks: ((audioTrack: string) => void)[];\n    private currentTimeCallbacks: ((currentTime: number, echo: boolean) => void)[];\n    private exitCallbacks: (() => void)[];\n    private offsetCallbacks: ((offset: number) => void)[];\n    private playbackRateCallbacks: ((playbackRate: number, echo: boolean) => void)[];\n    private popOutToggleCallbacks: (() => void)[];\n    private copyCallbacks: ((\n        subtitle: SubtitleModel,\n        surroundingSubtitles: SubtitleModel[],\n        audio: AudioModel | undefined,\n        image: ImageModel | undefined,\n        url: string | undefined,\n        postMineAction: PostMineAction,\n        preventDuplicate: boolean,\n        id: string | undefined\n    ) => void)[];\n    private playModeCallbacks: ((mode: PlayMode) => void)[];\n    private hideSubtitlePlayerToggleCallbacks: (() => void)[];\n    private appBarToggleCallbacks: (() => void)[];\n    private fullscreenToggleCallbacks: (() => void)[];\n    private ankiDialogRequestCallbacks: (() => void)[];\n    private toggleSubtitleTrackInListCallbacks: ((track: number) => void)[];\n\n    readyState: number;\n    oncanplay: ((ev: Event) => void) | null = null;\n    audioTracks?: AudioTrackModel[];\n    selectedAudioTrack?: string;\n    duration: number;\n    _playbackRate: number;\n\n    constructor(protocol: VideoProtocol) {\n        this.protocol = protocol;\n        this.time = 0;\n        this.duration = 0;\n        this.isReady = false;\n        this.readyState = 0;\n        this._playbackRate = 1;\n        this.selectedAudioTrack = undefined;\n        this.readyCallbacks = [];\n        this.playCallbacks = [];\n        this.pauseCallbacks = [];\n        this.currentTimeCallbacks = [];\n        this.audioTrackSelectedCallbacks = [];\n        this.exitCallbacks = [];\n        this.offsetCallbacks = [];\n        this.playbackRateCallbacks = [];\n        this.popOutToggleCallbacks = [];\n        this.copyCallbacks = [];\n        this.playModeCallbacks = [];\n        this.hideSubtitlePlayerToggleCallbacks = [];\n        this.appBarToggleCallbacks = [];\n        this.fullscreenToggleCallbacks = [];\n        this.ankiDialogRequestCallbacks = [];\n        this.toggleSubtitleTrackInListCallbacks = [];\n\n        const that = this;\n\n        this.protocol.onMessage = (event) => {\n            switch (event.data.command) {\n                case 'ready':\n                    const readyMessage = event.data as ReadyFromVideoMessage;\n\n                    that.duration = readyMessage.duration;\n                    that.isReady = true;\n                    that.audioTracks = readyMessage.audioTracks;\n                    that.selectedAudioTrack = readyMessage.selectedAudioTrack;\n                    that.readyState = 4;\n                    that.time = readyMessage.currentTime;\n                    this._playbackRate = readyMessage.playbackRate;\n\n                    for (let callback of that.readyCallbacks) {\n                        callback(readyMessage.paused);\n                    }\n                    break;\n                case 'readyState':\n                    const readyStateMessage = event.data as ReadyStateFromVideoMessage;\n\n                    that.readyState = readyStateMessage.value;\n                    if (that.readyState === 4) {\n                        that.oncanplay?.(new Event('canplay'));\n                    }\n                    break;\n                case 'play':\n                    const playMessage = event.data as PlayFromVideoMessage;\n\n                    for (let callback of that.playCallbacks) {\n                        callback(playMessage.echo);\n                    }\n                    break;\n                case 'pause':\n                    const pauseMessage = event.data as PauseFromVideoMessage;\n\n                    for (let callback of that.pauseCallbacks) {\n                        callback(pauseMessage.echo);\n                    }\n                    break;\n                case 'audioTrackSelected':\n                    const audioTrackSelectedMessage = event.data as AudioTrackSelectedFromVideoMessage;\n\n                    for (let callback of that.audioTrackSelectedCallbacks) {\n                        that.selectedAudioTrack = audioTrackSelectedMessage.id;\n                        callback(audioTrackSelectedMessage.id);\n                    }\n                    break;\n                case 'currentTime':\n                    const currentTimeMessage = event.data as CurrentTimeFromVideoMessage;\n\n                    for (let callback of that.currentTimeCallbacks) {\n                        callback(currentTimeMessage.value, currentTimeMessage.echo);\n                    }\n                    break;\n                case 'exit':\n                    for (let callback of that.exitCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'offset':\n                    const offsetMessage = event.data as OffsetFromVideoMessage;\n\n                    for (let callback of that.offsetCallbacks) {\n                        callback(offsetMessage.value);\n                    }\n                    break;\n                case 'playbackRate':\n                    const playbackRateMessage = event.data as PlaybackRateFromVideoMessage;\n\n                    for (const callback of that.playbackRateCallbacks) {\n                        callback(playbackRateMessage.value, playbackRateMessage.echo);\n                    }\n                    break;\n                case 'popOutToggle':\n                    for (let callback of that.popOutToggleCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'copy':\n                    for (let callback of that.copyCallbacks) {\n                        const copyMessage = event.data as CopyMessage;\n\n                        callback(\n                            copyMessage.subtitle,\n                            copyMessage.surroundingSubtitles,\n                            copyMessage.audio,\n                            copyMessage.image,\n                            copyMessage.url,\n                            copyMessage.postMineAction ?? PostMineAction.none,\n                            copyMessage.preventDuplicate ?? false,\n                            copyMessage.id\n                        );\n                    }\n                    break;\n                case 'playMode':\n                    for (let callback of that.playModeCallbacks) {\n                        const playModeMessage = event.data as PlayModeMessage;\n                        callback(playModeMessage.playMode);\n                    }\n                    break;\n                case 'hideSubtitlePlayerToggle':\n                    for (let callback of that.hideSubtitlePlayerToggleCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'appBarToggle':\n                    for (let callback of that.appBarToggleCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'fullscreenToggle':\n                    for (const callback of this.fullscreenToggleCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'sync':\n                    // ignore\n                    break;\n                case 'syncv2':\n                    // ignore\n                    break;\n                case 'ankiDialogRequest':\n                    for (let callback of that.ankiDialogRequestCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'toggleSubtitleTrackInList':\n                    const toggleSubtitleTrackInListMessage = event.data as ToggleSubtitleTrackInListFromVideoMessage;\n\n                    for (const callback of that.toggleSubtitleTrackInListCallbacks) {\n                        callback(toggleSubtitleTrackInListMessage.track);\n                    }\n                    break;\n                default:\n                    console.error('Unrecognized event ' + event.data.command);\n            }\n        };\n    }\n\n    get currentTime() {\n        return this.time;\n    }\n\n    set currentTime(value: number) {\n        this.time = value;\n        this.readyState = 3;\n        const message: CurrentTimeToVideoMessage = { command: 'currentTime', value: this.time };\n        this.protocol.postMessage(message);\n    }\n\n    get playbackRate() {\n        return this._playbackRate;\n    }\n\n\n    set playbackRate(playbackRate: number) {\n        const message: PlaybackRateToVideoMessage = { command: 'playbackRate', value: playbackRate };\n        this.protocol.postMessage(message);\n    }\n\n    onReady(callback: (paused: boolean) => void) {\n        if (this.isReady) {\n            callback(false);\n        }\n        this.readyCallbacks.push(callback);\n    }\n\n    onPlay(callback: (echo: boolean) => void) {\n        this.playCallbacks.push(callback);\n    }\n\n    onPause(callback: (echo: boolean) => void) {\n        this.pauseCallbacks.push(callback);\n    }\n\n    onCurrentTime(callback: (currentTime: number, echo: boolean) => void) {\n        this.currentTimeCallbacks.push(callback);\n    }\n\n    onAudioTrackSelected(callback: (id: string) => void) {\n        this.audioTrackSelectedCallbacks.push(callback);\n    }\n\n    onExit(callback: () => void) {\n        this.exitCallbacks.push(callback);\n    }\n\n    onOffset(callback: (offset: number) => void) {\n        this.offsetCallbacks.push(callback);\n    }\n\n    onPlaybackRate(callback: (playbackRate: number, echo: boolean) => void) {\n        this.playbackRateCallbacks.push(callback);\n    }\n\n    onPopOutToggle(callback: () => void) {\n        this.popOutToggleCallbacks.push(callback);\n    }\n\n    onCopy(\n        callback: (\n            subtitle: SubtitleModel,\n            surroundingSubtitles: SubtitleModel[],\n            audio: AudioModel | undefined,\n            image: ImageModel | undefined,\n            url: string | undefined,\n            postMineAction: PostMineAction,\n            preventDuplicate: boolean,\n            id: string | undefined\n        ) => void\n    ) {\n        this.copyCallbacks.push(callback);\n    }\n\n    onPlayMode(callback: (playMode: PlayMode) => void) {\n        this.playModeCallbacks.push(callback);\n    }\n\n    onHideSubtitlePlayerToggle(callback: () => void) {\n        this.hideSubtitlePlayerToggleCallbacks.push(callback);\n    }\n\n    onAppBarToggle(callback: () => void) {\n        this.appBarToggleCallbacks.push(callback);\n    }\n\n    onFullscreenToggle(callback: () => void) {\n        this.fullscreenToggleCallbacks.push(callback);\n    }\n\n    onAnkiDialogRequest(callback: () => void) {\n        this.ankiDialogRequestCallbacks.push(callback);\n    }\n\n    onToggleSubtitleTrackInList(callback: (track: number) => void) {\n        this.toggleSubtitleTrackInListCallbacks.push(callback);\n    }\n\n    ready(duration: number, videoFileName?: string) {\n        const message: ReadyToVideoMessage = { command: 'ready', duration, videoFileName };\n        this.protocol.postMessage(message);\n    }\n\n    init() {\n        this.protocol.postMessage({ command: 'init' });\n    }\n\n    // Return a promise to implement the analogous HTMLMediaElement method\n    play(): Promise<void> {\n        this.protocol.postMessage({ command: 'play' });\n        return new Promise((resolve, reject) => resolve());\n    }\n\n    pause() {\n        this.protocol.postMessage({ command: 'pause' });\n    }\n\n    audioTrackSelected(id: string) {\n        const message: AudioTrackSelectedToVideoMessage = { command: 'audioTrackSelected', id: id };\n        this.protocol.postMessage(message);\n    }\n\n    subtitles(subtitles: SubtitleModel[], subtitleFileNames: string[]) {\n        this.protocol.postMessage({\n            command: 'subtitles',\n            value: subtitles,\n            name: subtitleFileNames.length > 0 ? subtitleFileNames[0] : null,\n            names: subtitleFileNames,\n        } as SubtitlesToVideoMessage);\n    }\n\n    offset(offset: number) {\n        const message: OffsetToVideoMessage = { command: 'offset', value: offset };\n        this.protocol.postMessage(message);\n    }\n\n    subtitleSettings(settings: SubtitleSettings) {\n        const message: SubtitleSettingsToVideoMessage = { command: 'subtitleSettings', value: settings };\n        this.protocol.postMessage(message);\n    }\n\n    playMode(playMode: PlayMode) {\n        const message: PlayModeMessage = {\n            command: 'playMode',\n            playMode: playMode,\n        };\n        this.protocol.postMessage(message);\n    }\n\n    hideSubtitlePlayerToggle(hidden: boolean) {\n        const message: HideSubtitlePlayerToggleToVideoMessage = {\n            command: 'hideSubtitlePlayerToggle',\n            value: hidden,\n        };\n        this.protocol.postMessage(message);\n    }\n\n    appBarToggle(hidden: boolean) {\n        const message: AppBarToggleMessageToVideoMessage = {\n            command: 'appBarToggle',\n            value: hidden,\n        };\n        this.protocol.postMessage(message);\n    }\n\n    fullscreenToggle(fullscreen: boolean) {\n        const message: FullscreenToggleMessageToVideoMessage = {\n            command: 'fullscreenToggle',\n            value: fullscreen,\n        };\n        this.protocol.postMessage(message);\n    }\n\n    ankiSettings(settings: AnkiSettings) {\n        const message: AnkiSettingsToVideoMessage = { command: 'ankiSettings', value: settings };\n        this.protocol.postMessage(message);\n    }\n\n    miscSettings(settings: MiscSettings) {\n        const message: MiscSettingsToVideoMessage = { command: 'miscSettings', value: settings };\n        this.protocol.postMessage(message);\n    }\n\n    alert(message: string, severity: string) {\n        const msg: AlertMessage = { command: 'alert', message, severity };\n        this.protocol.postMessage(msg);\n    }\n\n    close() {\n        this.protocol.postMessage({ command: 'close' });\n        this.protocol.close();\n        this.readyCallbacks = [];\n        this.playCallbacks = [];\n        this.pauseCallbacks = [];\n        this.currentTimeCallbacks = [];\n        this.audioTrackSelectedCallbacks = [];\n        this.exitCallbacks = [];\n        this.offsetCallbacks = [];\n        this.playbackRateCallbacks = [];\n        this.popOutToggleCallbacks = [];\n        this.copyCallbacks = [];\n        this.playModeCallbacks = [];\n        this.hideSubtitlePlayerToggleCallbacks = [];\n        this.appBarToggleCallbacks = [];\n        this.fullscreenToggleCallbacks = [];\n        this.ankiDialogRequestCallbacks = [];\n        this.toggleSubtitleTrackInListCallbacks = [];\n    }\n}\n","import React, { useEffect, useState, useMemo, useCallback, useRef, MutableRefObject } from 'react';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport { v4 as uuidv4 } from 'uuid';\nimport {\n    AsbplayerSettingsProvider,\n    AudioModel,\n    AudioTrackModel,\n    AutoPauseContext,\n    AutoPausePreference,\n    ImageModel,\n    KeyBinder,\n    mockSurroundingSubtitles,\n    PlayMode,\n    PostMineAction,\n    SubtitleCollection,\n    SubtitleModel,\n    VideoTabModel,\n} from '@project/common';\nimport { timeDurationDisplay } from '../services/util';\nimport BroadcastChannelVideoProtocol from '../services/BroadcastChannelVideoProtocol';\nimport ChromeTabVideoProtocol from '../services/ChromeTabVideoProtocol';\nimport Clock from '../services/Clock';\nimport Controls, { Point } from './Controls';\nimport Grid from '@material-ui/core/Grid';\nimport MediaAdapter, { MediaElement } from '../services/MediaAdapter';\nimport SubtitlePlayer, { DisplaySubtitleModel } from './SubtitlePlayer';\nimport VideoChannel from '../services/VideoChannel';\nimport ChromeExtension from '../services/ChromeExtension';\nimport SubtitleReader from '../services/SubtitleReader';\nimport PlaybackPreferences from '../services/PlaybackPreferences';\nimport lte from 'semver/functions/lte';\nimport gte from 'semver/functions/gte';\n\ninterface StylesProps {\n    appBarHidden: boolean;\n}\n\nconst useStyles = makeStyles<Theme, StylesProps>({\n    root: ({ appBarHidden }) => ({\n        height: appBarHidden ? '100vh' : 'calc(100vh - 64px)',\n        position: 'relative',\n        overflowX: 'hidden',\n    }),\n    container: {\n        width: '100%',\n        height: '100%',\n    },\n    videoFrame: {\n        width: '100%',\n        height: '100%',\n        border: 0,\n        display: 'block',\n    },\n});\n\nfunction trackLength(\n    audioRef: MutableRefObject<HTMLAudioElement | null>,\n    videoRef: MutableRefObject<MediaElement | undefined>,\n    subtitles: SubtitleModel[] | undefined,\n    useOffset?: boolean\n) {\n    let subtitlesLength;\n    if (subtitles && subtitles.length > 0) {\n        if (useOffset) {\n            subtitlesLength = subtitles[subtitles.length - 1].end;\n        } else {\n            subtitlesLength = subtitles[subtitles.length - 1].originalEnd;\n        }\n    } else {\n        subtitlesLength = 0;\n    }\n\n    const audioLength = audioRef.current && audioRef.current.duration ? 1000 * audioRef.current.duration : 0;\n\n    const videoLength = videoRef.current && videoRef.current.duration ? 1000 * videoRef.current.duration : 0;\n\n    return Math.max(videoLength, Math.max(subtitlesLength, audioLength));\n}\n\nexport interface MediaSources {\n    subtitleFiles: File[];\n    flattenSubtitleFiles?: boolean;\n    audioFile?: File;\n    audioFileUrl?: string;\n    videoFile?: File;\n    videoFileUrl?: string;\n}\n\nexport interface AnkiDialogFinishedRequest {\n    resume: boolean;\n    timestamp: number;\n}\n\ninterface PlayerProps {\n    sources: MediaSources;\n    subtitleReader: SubtitleReader;\n    settingsProvider: AsbplayerSettingsProvider;\n    playbackPreferences: PlaybackPreferences;\n    keyBinder: KeyBinder;\n    extension: ChromeExtension;\n    videoFrameRef: MutableRefObject<HTMLIFrameElement | null>;\n    videoChannelRef: MutableRefObject<VideoChannel | null>;\n    drawerOpen: boolean;\n    appBarHidden: boolean;\n    videoFullscreen: boolean;\n    hideSubtitlePlayer: boolean;\n    videoPopOut: boolean;\n    tab?: VideoTabModel;\n    availableTabs: VideoTabModel[];\n    ankiDialogRequested: boolean;\n    ankiDialogFinishedRequest: AnkiDialogFinishedRequest;\n    onError: (error: string) => void;\n    onUnloadAudio: (url: string) => void;\n    onUnloadVideo: (url: string) => void;\n    onCopy: (\n        subtitle: SubtitleModel,\n        surroundingSubtitles: SubtitleModel[],\n        audioFile: File | undefined,\n        videoFile: File | undefined,\n        subtitleFile: File | undefined,\n        mediaTimestamp: number | undefined,\n        audioTrack: string | undefined,\n        filePlaybackRate: number | undefined,\n        audio: AudioModel | undefined,\n        image: ImageModel | undefined,\n        url: string | undefined,\n        postMineAction: PostMineAction | undefined,\n        preventDuplicate: boolean | undefined,\n        id: string | undefined\n    ) => void;\n    onLoaded: () => void;\n    onTabSelected: (tab: VideoTabModel) => void;\n    onAnkiDialogRequest: () => void;\n    onAppBarToggle: () => void;\n    onFullscreenToggle: () => void;\n    onHideSubtitlePlayer: () => void;\n    onVideoPopOut: () => void;\n    onPlayModeChangedViaBind: (oldPlayMode: PlayMode, newPlayMode: PlayMode) => void;\n    disableKeyEvents: boolean;\n    jumpToSubtitle?: SubtitleModel;\n    rewindSubtitle?: SubtitleModel;\n}\n\nexport default function Player({\n    sources: { subtitleFiles, flattenSubtitleFiles, audioFile, audioFileUrl, videoFile, videoFileUrl },\n    subtitleReader,\n    settingsProvider,\n    playbackPreferences,\n    keyBinder,\n    extension,\n    videoFrameRef,\n    videoChannelRef,\n    drawerOpen,\n    appBarHidden,\n    videoFullscreen,\n    hideSubtitlePlayer,\n    videoPopOut,\n    tab,\n    availableTabs,\n    ankiDialogRequested,\n    ankiDialogFinishedRequest,\n    onError,\n    onUnloadAudio,\n    onUnloadVideo,\n    onCopy,\n    onLoaded,\n    onTabSelected,\n    onAnkiDialogRequest,\n    onAppBarToggle,\n    onFullscreenToggle,\n    onHideSubtitlePlayer,\n    onVideoPopOut,\n    onPlayModeChangedViaBind,\n    disableKeyEvents,\n    jumpToSubtitle,\n    rewindSubtitle,\n}: PlayerProps) {\n    const [playMode, setPlayMode] = useState<PlayMode>(PlayMode.normal);\n    const playModeRef = useRef<PlayMode>();\n    playModeRef.current = playMode;\n    const [subtitles, setSubtitles] = useState<DisplaySubtitleModel[]>();\n    const subtitleCollection = useMemo<SubtitleCollection<DisplaySubtitleModel>>(\n        () =>\n            new SubtitleCollection(subtitles ?? [], {\n                returnLastShown: true,\n                returnNextToShow: playMode === PlayMode.condensed,\n                showingCheckRadiusMs: 100,\n            }),\n        [subtitles, playMode]\n    );\n    const subtitlesRef = useRef<SubtitleModel[]>();\n    subtitlesRef.current = subtitles;\n    const playModeEnabled = subtitles && subtitles.length > 0 && Boolean(videoFileUrl || audioFileUrl);\n    const [loadingSubtitles, setLoadingSubtitles] = useState<boolean>(false);\n    const [playing, setPlaying] = useState<boolean>(false);\n    const [lastJumpToTopTimestamp, setLastJumpToTopTimestamp] = useState<number>(0);\n    const [offset, setOffset] = useState<number>(0);\n    const [playbackRate, setPlaybackRate] = useState<number>(1);\n    const playingRef = useRef<boolean>();\n    playingRef.current = playing;\n    const [, updateState] = useState<any>();\n    const [audioTracks, setAudioTracks] = useState<AudioTrackModel[]>();\n    const [selectedAudioTrack, setSelectedAudioTrack] = useState<string>();\n    const [channelId, setChannelId] = useState<string>();\n    const [, setResumeOnFinishedAnkiDialogRequest] = useState<boolean>(false);\n    const hideSubtitlePlayerRef = useRef<boolean>();\n    hideSubtitlePlayerRef.current = hideSubtitlePlayer;\n    const [disabledSubtitleTracks, setDisabledSubtitleTracks] = useState<{ [track: number]: boolean }>({});\n    const forceUpdate = useCallback(() => updateState({}), []);\n    const mousePositionRef = useRef<Point>({ x: 0, y: 0 });\n    const audioRef = useRef<HTMLAudioElement>(null);\n    const videoRef = useRef<MediaElement>();\n    const mediaAdapter = useMemo(() => {\n        if (audioFileUrl) {\n            return new MediaAdapter(audioRef);\n        } else if (videoFileUrl || tab) {\n            return new MediaAdapter(videoRef);\n        }\n\n        return new MediaAdapter({ current: null });\n    }, [audioFileUrl, videoFileUrl, tab]);\n    const clock = useMemo<Clock>(() => new Clock(), []);\n    const classes = useStyles({ appBarHidden });\n    const lengthRef = useRef<number>(0);\n    lengthRef.current = trackLength(audioRef, videoRef, subtitles, true);\n\n    const handleOnStartedShowingSubtitle = useCallback(() => {\n        if (\n            playMode !== PlayMode.autoPause ||\n            settingsProvider.autoPausePreference !== AutoPausePreference.atStart ||\n            videoFileUrl // Let VideoPlayer do the auto-pausing\n        ) {\n            return;\n        }\n\n        pause(clock, mediaAdapter, true);\n    }, [playMode, clock, mediaAdapter, videoFileUrl, settingsProvider]);\n\n    const handleOnWillStopShowingSubtitle = useCallback(() => {\n        if (\n            playMode !== PlayMode.autoPause ||\n            settingsProvider.autoPausePreference !== AutoPausePreference.atEnd ||\n            videoFileUrl // Let VideoPlayer do the auto-pausing\n        ) {\n            return;\n        }\n\n        pause(clock, mediaAdapter, true);\n    }, [playMode, clock, mediaAdapter, videoFileUrl, settingsProvider]);\n\n    const autoPauseContext = useMemo(() => {\n        const context = new AutoPauseContext();\n        context.onStartedShowing = handleOnStartedShowingSubtitle;\n        context.onWillStopShowing = handleOnWillStopShowingSubtitle;\n        return context;\n    }, [handleOnStartedShowingSubtitle, handleOnWillStopShowingSubtitle]);\n    const autoPauseContextRef = useRef<AutoPauseContext>();\n    autoPauseContextRef.current = autoPauseContext;\n\n    const seek = useCallback(\n        async (time: number, clock: Clock, forwardToMedia: boolean) => {\n            clock.setTime(time);\n            forceUpdate();\n\n            if (forwardToMedia) {\n                await mediaAdapter.seek(time / 1000);\n            }\n\n            autoPauseContextRef.current?.clear();\n        },\n        [forceUpdate, mediaAdapter]\n    );\n\n    const updatePlaybackRate = useCallback(\n        (playbackRate: number, forwardToMedia: boolean) => {\n            clock.rate = playbackRate;\n            setPlaybackRate(playbackRate);\n\n            if (forwardToMedia) {\n                mediaAdapter.playbackRate(playbackRate);\n            }\n        },\n        [clock, mediaAdapter]\n    );\n\n    const applyOffset = useCallback(\n        (offset: number, forwardToVideo: boolean) => {\n            setOffset(offset);\n            setSubtitles((subtitles) => {\n                if (!subtitles) {\n                    return;\n                }\n\n                const length = subtitles.length > 0 ? subtitles[subtitles.length - 1].end + offset : 0;\n\n                const newSubtitles = subtitles.map((s, i) => ({\n                    text: s.text,\n                    textImage: s.textImage,\n                    start: s.originalStart + offset,\n                    originalStart: s.originalStart,\n                    end: s.originalEnd + offset,\n                    originalEnd: s.originalEnd,\n                    displayTime: timeDurationDisplay(s.originalStart + offset, length),\n                    track: s.track,\n                    index: i,\n                }));\n\n                if (forwardToVideo) {\n                    if (videoRef.current instanceof VideoChannel) {\n                        videoRef.current.offset(offset);\n\n                        // Older versions of extension don't support the offset message\n                        if (tab !== undefined && extension.installed && lte(extension.version, '0.22.0')) {\n                            videoRef.current.subtitles(\n                                newSubtitles,\n                                subtitleFiles.map((f) => f.name)\n                            );\n                        }\n                    }\n                }\n\n                return newSubtitles;\n            });\n            playbackPreferences.offset = offset;\n        },\n        [subtitleFiles, extension, playbackPreferences, tab]\n    );\n\n    useEffect(() => {\n        let channel: VideoChannel | undefined = undefined;\n        let channelClosed = false;\n\n        async function init() {\n            if (videoRef.current instanceof VideoChannel) {\n                videoRef.current.close();\n            }\n            videoRef.current = undefined;\n            videoChannelRef.current = null;\n            clock.setTime(0);\n            clock.stop();\n            const offset = playbackPreferences.offset;\n            setOffset(offset);\n            setPlaying(false);\n            setAudioTracks(undefined);\n            setSelectedAudioTrack(undefined);\n            setPlayMode(PlayMode.normal);\n\n            if (audioRef.current) {\n                audioRef.current.currentTime = 0;\n                audioRef.current.pause();\n            }\n\n            let subtitles: DisplaySubtitleModel[] | undefined;\n\n            if (subtitleFiles.length > 0) {\n                setLoadingSubtitles(true);\n\n                try {\n                    const nodes = await subtitleReader.subtitles(subtitleFiles, flattenSubtitleFiles);\n                    const length = nodes.length > 0 ? nodes[nodes.length - 1].end + offset : 0;\n\n                    subtitles = nodes.map((s, i) => ({\n                        text: s.text,\n                        textImage: s.textImage,\n                        start: s.start + offset,\n                        originalStart: s.start,\n                        end: s.end + offset,\n                        originalEnd: s.end,\n                        displayTime: timeDurationDisplay(s.start + offset, length),\n                        track: s.track,\n                        index: i,\n                    }));\n\n                    setSubtitles(subtitles);\n                    setLastJumpToTopTimestamp(Date.now());\n                } catch (e) {\n                    if (e instanceof Error) {\n                        onError(e.message);\n                    } else {\n                        onError(String(e));\n                    }\n\n                    setSubtitles([]);\n                } finally {\n                    setLoadingSubtitles(false);\n                }\n            } else {\n                subtitles = undefined;\n            }\n\n            if (audioFileUrl) {\n                await mediaAdapter.onReady();\n                forceUpdate();\n            } else if (videoFileUrl || tab) {\n                if (channelClosed) {\n                    return;\n                }\n\n                if (videoFileUrl) {\n                    const channelId = uuidv4();\n                    channel = new VideoChannel(new BroadcastChannelVideoProtocol(channelId));\n                    setChannelId(channelId);\n                } else if (tab) {\n                    channel = new VideoChannel(new ChromeTabVideoProtocol(tab.id, tab.src, extension));\n                    channel.init();\n                } else {\n                    // Not possible\n                    // But throw error so typescript recognizes channel as defined\n                    throw new Error('Unreachable code');\n                }\n\n                videoRef.current = channel;\n                videoChannelRef.current = channel;\n                let subscribed = false;\n\n                channel.onExit(() => videoFileUrl && onUnloadVideo(videoFileUrl));\n                channel.onPopOutToggle(() => onVideoPopOut());\n                channel.onHideSubtitlePlayerToggle(() => {\n                    onHideSubtitlePlayer();\n                });\n                channel.onAppBarToggle(() => {\n                    onAppBarToggle();\n                });\n                channel.onFullscreenToggle(() => {\n                    onFullscreenToggle();\n                });\n                channel.onReady((paused) => {\n                    lengthRef.current = trackLength(audioRef, videoRef, subtitlesRef.current);\n                    channel?.ready(lengthRef.current, videoFile?.name);\n\n                    if (subtitlesRef.current) {\n                        channel?.subtitleSettings(settingsProvider.subtitleSettings);\n                        channel?.subtitles(\n                            subtitlesRef.current,\n                            flattenSubtitleFiles ? [subtitleFiles[0].name] : subtitleFiles.map((f) => f.name)\n                        );\n                    }\n\n                    channel?.ankiSettings(settingsProvider.ankiSettings);\n                    channel?.miscSettings(settingsProvider.miscSettings);\n                    channel?.playMode(playModeRef.current!);\n                    channel?.hideSubtitlePlayerToggle(hideSubtitlePlayerRef.current ?? false);\n\n                    if (channel?.audioTracks && channel?.audioTracks?.length > 1) {\n                        setAudioTracks(channel?.audioTracks);\n                        setSelectedAudioTrack(channel?.selectedAudioTrack);\n                    } else {\n                        setAudioTracks(undefined);\n                        setSelectedAudioTrack(undefined);\n                    }\n\n                    if (videoRef.current) {\n                        clock.setTime(videoRef.current.currentTime * 1000);\n                    }\n\n                    if (paused) {\n                        clock.stop();\n                    } else {\n                        clock.start();\n                    }\n\n                    setPlaying(!paused);\n\n                    if (channel?.playbackRate) {\n                        clock.rate = channel.playbackRate;\n                        setPlaybackRate(channel.playbackRate);\n                    }\n\n                    if (!subscribed) {\n                        channel?.onPlay((forwardToMedia) => play(clock, mediaAdapter, forwardToMedia));\n                        channel?.onPause((forwardToMedia) => pause(clock, mediaAdapter, forwardToMedia));\n                        channel?.onOffset((offset) => applyOffset(Math.max(-lengthRef.current ?? 0, offset), false));\n                        channel?.onPlaybackRate((playbackRate, forwardToMedia) =>\n                            updatePlaybackRate(playbackRate, forwardToMedia)\n                        );\n                        channel?.onCopy(\n                            (subtitle, surroundingSubtitles, audio, image, url, postMineAction, preventDuplicate, id) =>\n                                onCopy(\n                                    subtitle,\n                                    surroundingSubtitles,\n                                    audioFile,\n                                    videoFile,\n                                    subtitle ? subtitleFiles[subtitle.track] : undefined,\n                                    clock.time(lengthRef.current),\n                                    channel?.selectedAudioTrack,\n                                    channel?.playbackRate,\n                                    audio,\n                                    image,\n                                    url,\n                                    postMineAction,\n                                    preventDuplicate,\n                                    id\n                                )\n                        );\n                        channel?.onPlayMode((playMode) => {\n                            setPlayMode(playMode);\n                            channel?.playMode(playMode);\n                        });\n                        channel?.onCurrentTime(async (currentTime, forwardToMedia) => {\n                            if (playingRef.current) {\n                                clock.stop();\n                            }\n\n                            await seek(currentTime * 1000, clock, forwardToMedia);\n\n                            if (playingRef.current) {\n                                clock.start();\n                            }\n                        });\n                        channel?.onAudioTrackSelected(async (id) => {\n                            if (playingRef.current) {\n                                clock.stop();\n                            }\n\n                            await mediaAdapter.onReady();\n                            if (playingRef.current) {\n                                clock.start();\n                            }\n\n                            setSelectedAudioTrack(id);\n                        });\n                        channel?.onAnkiDialogRequest(() => onAnkiDialogRequest());\n                        channel?.onToggleSubtitleTrackInList((track) =>\n                            setDisabledSubtitleTracks((tracks) => {\n                                const newTracks = { ...tracks };\n                                newTracks[track] = !tracks[track];\n                                return newTracks;\n                            })\n                        );\n\n                        subscribed = true;\n                    }\n                });\n            }\n        }\n\n        init().then(() => onLoaded());\n\n        return () => {\n            channel?.close();\n            channelClosed = true;\n        };\n    }, [\n        subtitleReader,\n        extension,\n        settingsProvider,\n        playbackPreferences,\n        clock,\n        mediaAdapter,\n        seek,\n        onLoaded,\n        onError,\n        onUnloadVideo,\n        onCopy,\n        onAnkiDialogRequest,\n        onHideSubtitlePlayer,\n        onAppBarToggle,\n        onFullscreenToggle,\n        onVideoPopOut,\n        subtitleFiles,\n        audioFile,\n        audioFileUrl,\n        videoFile,\n        videoFileUrl,\n        tab,\n        forceUpdate,\n        videoFrameRef,\n        videoChannelRef,\n        applyOffset,\n        updatePlaybackRate,\n        flattenSubtitleFiles,\n    ]);\n\n    function play(clock: Clock, mediaAdapter: MediaAdapter, forwardToMedia: boolean) {\n        setPlaying(true);\n        clock.start();\n\n        if (forwardToMedia) {\n            mediaAdapter.play();\n        }\n    }\n\n    function pause(clock: Clock, mediaAdapter: MediaAdapter, forwardToMedia: boolean) {\n        setPlaying(false);\n        clock.stop();\n\n        if (forwardToMedia) {\n            mediaAdapter.pause();\n        }\n    }\n\n    useEffect(() => {\n        if (ankiDialogFinishedRequest && ankiDialogFinishedRequest.timestamp > 0) {\n            setResumeOnFinishedAnkiDialogRequest((resumeOnFinishedAnkiDialogRequest) => {\n                if (resumeOnFinishedAnkiDialogRequest && ankiDialogFinishedRequest.resume) {\n                    play(clock, mediaAdapter, true);\n                }\n\n                return false;\n            });\n        }\n    }, [ankiDialogFinishedRequest, clock, mediaAdapter]);\n\n    useEffect(() => {\n        if (ankiDialogRequested && playingRef.current) {\n            pause(clock, mediaAdapter, true);\n            setResumeOnFinishedAnkiDialogRequest(true);\n        }\n    }, [ankiDialogRequested, clock, mediaAdapter]);\n\n    useEffect(() => {\n        if (playMode !== PlayMode.condensed) {\n            return;\n        }\n\n        if (!subtitles || subtitles.length === 0) {\n            return;\n        }\n\n        let seeking = false;\n        let expectedSeekTime = 1000;\n\n        const interval = setInterval(async () => {\n            const length = lengthRef.current;\n\n            if (!length) {\n                return;\n            }\n\n            const timestamp = clock.time(length);\n            const slice = subtitleCollection.subtitlesAt(timestamp);\n\n            if (slice.nextToShow && slice.nextToShow.length > 0) {\n                const nextSubtitle = slice.nextToShow[0];\n\n                if (nextSubtitle.start - timestamp < expectedSeekTime + 500) {\n                    return;\n                }\n\n                if (playingRef.current) {\n                    clock.stop();\n                }\n\n                if (!seeking) {\n                    seeking = true;\n                    const t0 = Date.now();\n                    await seek(nextSubtitle.start, clock, true);\n                    expectedSeekTime = Date.now() - t0;\n                    seeking = false;\n                }\n\n                if (playingRef.current) {\n                    clock.start();\n                }\n            }\n        }, 100);\n\n        return () => clearInterval(interval);\n    }, [subtitles, subtitleCollection, playMode, clock, seek]);\n\n    useEffect(() => {\n        if (videoPopOut && channelId && videoFileUrl) {\n            window.open(\n                process.env.PUBLIC_URL +\n                    '/?video=' +\n                    encodeURIComponent(videoFileUrl) +\n                    '&channel=' +\n                    channelId +\n                    '&popout=true',\n                'asbplayer-video-' + videoFileUrl,\n                'resizable,width=800,height=450'\n            );\n        }\n\n        setLastJumpToTopTimestamp(Date.now());\n    }, [videoPopOut, channelId, videoFileUrl, videoFrameRef]);\n\n    const handlePlay = useCallback(() => play(clock, mediaAdapter, true), [clock, mediaAdapter]);\n    const handlePause = useCallback(() => pause(clock, mediaAdapter, true), [clock, mediaAdapter]);\n    const handleSeek = useCallback(\n        async (progress: number) => {\n            if (!lengthRef.current) {\n                return;\n            }\n\n            if (playingRef.current) {\n                clock.stop();\n            }\n\n            await seek(progress * lengthRef.current, clock, true);\n\n            if (playingRef.current) {\n                clock.start();\n            }\n        },\n        [clock, seek]\n    );\n\n    const handleSeekToSubtitle = useCallback(\n        async (time: number, shouldPlay: boolean) => {\n            if (!shouldPlay) {\n                pause(clock, mediaAdapter, true);\n            }\n\n            await seek(time, clock, true);\n\n            if (shouldPlay && !playingRef.current) {\n                // play method will start the clock again\n                play(clock, mediaAdapter, true);\n            }\n        },\n        [clock, seek, mediaAdapter]\n    );\n\n    const handleCopyFromSubtitlePlayer = useCallback(\n        (\n            subtitle: SubtitleModel,\n            surroundingSubtitles: SubtitleModel[],\n            postMineAction: PostMineAction,\n            preventDuplicate: boolean\n        ) => {\n            onCopy(\n                subtitle,\n                surroundingSubtitles,\n                audioFile,\n                videoFile,\n                subtitleFiles[subtitle.track],\n                subtitle.start,\n                selectedAudioTrack,\n                playbackRate,\n                undefined,\n                undefined,\n                undefined,\n                postMineAction,\n                preventDuplicate,\n                undefined\n            );\n        },\n        [onCopy, audioFile, videoFile, subtitleFiles, selectedAudioTrack, playbackRate]\n    );\n\n    const handleMouseMove = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n        mousePositionRef.current.x = e.screenX;\n        mousePositionRef.current.y = e.screenY;\n    }, []);\n\n    const handleAudioTrackSelected = useCallback(\n        async (id: string) => {\n            if (videoRef.current instanceof VideoChannel) {\n                videoRef.current.audioTrackSelected(id);\n            }\n\n            pause(clock, mediaAdapter, true);\n\n            await seek(0, clock, true);\n\n            if (playingRef.current) {\n                play(clock, mediaAdapter, true);\n            }\n        },\n        [clock, mediaAdapter, seek]\n    );\n\n    const handleOffsetChange = useCallback(\n        (offset: number) => {\n            applyOffset(Math.max(-lengthRef.current ?? 0, offset), true);\n        },\n        [applyOffset]\n    );\n\n    const handleVolumeChange = useCallback((volume: number) => {\n        if (audioRef.current instanceof HTMLMediaElement) {\n            audioRef.current.volume = volume;\n        }\n    }, []);\n\n    const handlePlaybackRateChange = useCallback(\n        (playbackRate: number) => {\n            updatePlaybackRate(playbackRate, true);\n        },\n        [updatePlaybackRate]\n    );\n\n    const handlePlayMode = useCallback((playMode: PlayMode) => setPlayMode(playMode), []);\n\n    const handleToggleSubtitleTrack = useCallback(\n        (track: number) =>\n            setDisabledSubtitleTracks((tracks) => {\n                const newTracks = { ...tracks };\n                newTracks[track] = !tracks[track];\n                return newTracks;\n            }),\n        []\n    );\n\n    const handleSubtitlesSelected = useCallback(\n        (subtitles: SubtitleModel[]) => {\n            if (subtitles.length === 0 || !settingsProvider.autoCopyCurrentSubtitle || !document.hasFocus()) {\n                return;\n            }\n\n            navigator.clipboard.writeText(subtitles.map((s) => s.text).join('\\n')).catch((e) => {\n                // ignore\n            });\n        },\n        [settingsProvider.autoCopyCurrentSubtitle]\n    );\n\n    useEffect(() => {\n        if (tab) {\n            return;\n        }\n\n        const interval = setInterval(async () => {\n            const length = lengthRef.current;\n            const progress = clock.progress(length);\n\n            if (progress >= 1) {\n                pause(clock, mediaAdapter, true);\n                await seek(0, clock, true);\n                setLastJumpToTopTimestamp(Date.now());\n            }\n        }, 1000);\n\n        return () => clearInterval(interval);\n    }, [clock, subtitles, mediaAdapter, seek, tab]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindPlay(\n            (event) => {\n                event.preventDefault();\n\n                if (playing) {\n                    pause(clock, mediaAdapter, true);\n                } else {\n                    play(clock, mediaAdapter, true);\n                }\n            },\n            () => disableKeyEvents\n        );\n\n        return () => unbind();\n    }, [keyBinder, playing, clock, mediaAdapter, disableKeyEvents]);\n\n    useEffect(() => {\n        return keyBinder.bindAdjustPlaybackRate(\n            (event, increase) => {\n                event.preventDefault();\n                if (increase) {\n                    updatePlaybackRate(Math.min(5, playbackRate + 0.1), true);\n                } else {\n                    updatePlaybackRate(Math.max(0.1, playbackRate - 0.1), true);\n                }\n            },\n            () => disableKeyEvents\n        );\n    }, [updatePlaybackRate, playbackRate, disableKeyEvents, keyBinder]);\n\n    const togglePlayMode = useCallback(\n        (event: KeyboardEvent, togglePlayMode: PlayMode) => {\n            if (!playModeEnabled) {\n                return;\n            }\n\n            event.preventDefault();\n            const newPlayMode = playMode === togglePlayMode ? PlayMode.normal : togglePlayMode;\n            setPlayMode(newPlayMode);\n            onPlayModeChangedViaBind(playMode, newPlayMode);\n\n            if (videoRef.current instanceof VideoChannel) {\n                videoRef.current.playMode(newPlayMode);\n            }\n        },\n        [playMode, playModeEnabled, onPlayModeChangedViaBind]\n    );\n\n    useEffect(() => {\n        return keyBinder.bindAutoPause(\n            (event) => togglePlayMode(event, PlayMode.autoPause),\n            () => disableKeyEvents\n        );\n    }, [togglePlayMode, keyBinder, disableKeyEvents]);\n\n    useEffect(() => {\n        return keyBinder.bindCondensedPlayback(\n            (event) => togglePlayMode(event, PlayMode.condensed),\n            () => disableKeyEvents\n        );\n    }, [togglePlayMode, keyBinder, disableKeyEvents]);\n\n    useEffect(() => {\n        if ((audioFile || videoFile) && (!subtitles || subtitles.length === 0)) {\n            const unbindCopy = keyBinder.bindCopy(\n                (event, subtitle) => {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    const surroundingSubtitles = mockSurroundingSubtitles(subtitle, lengthRef.current, 5000);\n                    onCopy(\n                        subtitle,\n                        surroundingSubtitles,\n                        audioFile,\n                        videoFile,\n                        undefined,\n                        clock.time(lengthRef.current),\n                        selectedAudioTrack,\n                        playbackRate,\n                        undefined,\n                        undefined,\n                        undefined,\n                        undefined,\n                        undefined,\n                        undefined\n                    );\n                },\n                () => disableKeyEvents,\n                () => {\n                    if (!lengthRef.current) {\n                        return undefined;\n                    }\n\n                    const timestamp = clock.time(lengthRef.current);\n                    const end = Math.min(timestamp + 5000, lengthRef.current);\n\n                    return {\n                        text: '',\n                        start: timestamp,\n                        originalStart: timestamp,\n                        end: end,\n                        originalEnd: end,\n                        track: 0,\n                    };\n                }\n            );\n\n            const unbindAnkiExport = keyBinder.bindAnkiExport(\n                (event) => {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    const timestamp = clock.time(lengthRef.current);\n                    const end = Math.min(timestamp + 5000, lengthRef.current);\n                    const subtitle = {\n                        text: '',\n                        start: timestamp,\n                        originalStart: timestamp,\n                        end: end,\n                        originalEnd: end,\n                        track: 0,\n                    };\n                    const surroundingSubtitles = mockSurroundingSubtitles(subtitle, lengthRef.current, 5000);\n                    onCopy(\n                        subtitle,\n                        surroundingSubtitles,\n                        audioFile,\n                        videoFile,\n                        undefined,\n                        timestamp,\n                        selectedAudioTrack,\n                        playbackRate,\n                        undefined,\n                        undefined,\n                        undefined,\n                        PostMineAction.showAnkiDialog,\n                        undefined,\n                        undefined\n                    );\n                },\n                () => false\n            );\n\n            return () => {\n                unbindCopy();\n                unbindAnkiExport();\n            };\n        }\n    }, [\n        keyBinder,\n        audioFile,\n        videoFile,\n        subtitles,\n        clock,\n        playbackRate,\n        selectedAudioTrack,\n        disableKeyEvents,\n        onCopy,\n        onAnkiDialogRequest,\n    ]);\n\n    useEffect(() => {\n        if (videoRef.current instanceof VideoChannel) {\n            videoRef.current.appBarToggle(appBarHidden);\n        }\n    }, [appBarHidden]);\n\n    useEffect(() => {\n        if (videoRef.current instanceof VideoChannel) {\n            videoRef.current.hideSubtitlePlayerToggle(hideSubtitlePlayer);\n        }\n    }, [hideSubtitlePlayer]);\n\n    useEffect(() => {\n        if (videoRef.current instanceof VideoChannel) {\n            videoRef.current.fullscreenToggle(videoFullscreen);\n        }\n    }, [videoFullscreen]);\n\n    useEffect(() => {\n        if (!rewindSubtitle) {\n            return;\n        }\n\n        if (playingRef.current) {\n            clock.stop();\n        }\n\n        handleSeekToSubtitle(rewindSubtitle.start, false);\n    }, [clock, rewindSubtitle, handleSeekToSubtitle]);\n\n    const length = lengthRef.current;\n    const loaded = audioFileUrl || videoFileUrl || subtitles;\n    const videoInWindow = Boolean(loaded && videoFileUrl && !videoPopOut);\n\n    return (\n        <div onMouseMove={handleMouseMove} className={classes.root}>\n            <Grid container direction=\"row\" wrap=\"nowrap\" className={classes.container}>\n                {videoInWindow && (\n                    <Grid item style={{ flexGrow: 1, minWidth: 600 }}>\n                        <iframe\n                            ref={videoFrameRef}\n                            className={classes.videoFrame}\n                            src={\n                                process.env.PUBLIC_URL +\n                                '/?video=' +\n                                encodeURIComponent(videoFileUrl!) +\n                                '&channel=' +\n                                channelId +\n                                '&popout=false'\n                            }\n                            title=\"asbplayer\"\n                        />\n                    </Grid>\n                )}\n                {(!videoInWindow || (subtitles && subtitles?.length > 0)) && (\n                    <Grid\n                        item\n                        style={{\n                            flexGrow: videoInWindow ? 0 : 1,\n                            width: videoInWindow && hideSubtitlePlayer ? 0 : 'auto',\n                        }}\n                    >\n                        {loaded && !(videoFileUrl && !videoPopOut) && (\n                            <Controls\n                                mousePositionRef={mousePositionRef}\n                                playing={playing}\n                                clock={clock}\n                                length={length}\n                                displayLength={trackLength(audioRef, videoRef, subtitles, false)}\n                                audioTracks={audioTracks}\n                                selectedAudioTrack={selectedAudioTrack}\n                                tabs={(!videoFileUrl && !audioFileUrl && availableTabs) || undefined}\n                                selectedTab={tab}\n                                audioFile={audioFile?.name}\n                                videoFile={videoFile?.name}\n                                offsetEnabled={true}\n                                offset={offset}\n                                playbackRate={playbackRate}\n                                playbackRateEnabled={!tab || (extension.installed && gte(extension.version, '0.24.0'))}\n                                onPlaybackRateChange={handlePlaybackRateChange}\n                                volumeEnabled={Boolean(audioFileUrl)}\n                                playModeEnabled={playModeEnabled}\n                                playMode={playMode}\n                                onPlay={handlePlay}\n                                onPause={handlePause}\n                                onSeek={handleSeek}\n                                onAudioTrackSelected={handleAudioTrackSelected}\n                                onTabSelected={onTabSelected}\n                                onUnloadAudio={() => audioFileUrl && onUnloadAudio(audioFileUrl)}\n                                onUnloadVideo={() => videoFileUrl && onUnloadVideo(videoFileUrl)}\n                                onOffsetChange={handleOffsetChange}\n                                onVolumeChange={handleVolumeChange}\n                                onPlayMode={handlePlayMode}\n                                disableKeyEvents={disableKeyEvents}\n                                playbackPreferences={playbackPreferences}\n                                showOnMouseMovement={true}\n                            />\n                        )}\n                        <SubtitlePlayer\n                            playing={playing}\n                            subtitles={subtitles}\n                            subtitleCollection={subtitleCollection}\n                            clock={clock}\n                            length={length}\n                            jumpToSubtitle={jumpToSubtitle}\n                            drawerOpen={drawerOpen}\n                            appBarHidden={appBarHidden}\n                            compressed={Boolean(videoFileUrl && !videoPopOut)}\n                            copyButtonEnabled={tab === undefined}\n                            loading={loadingSubtitles}\n                            displayHelp={audioFile?.name || (videoPopOut && videoFile?.name) || undefined}\n                            disableKeyEvents={disableKeyEvents}\n                            lastJumpToTopTimestamp={lastJumpToTopTimestamp}\n                            hidden={videoInWindow && hideSubtitlePlayer}\n                            disabledSubtitleTracks={disabledSubtitleTracks}\n                            onSeek={handleSeekToSubtitle}\n                            onCopy={handleCopyFromSubtitlePlayer}\n                            onOffsetChange={handleOffsetChange}\n                            onToggleSubtitleTrack={handleToggleSubtitleTrack}\n                            onSubtitlesSelected={handleSubtitlesSelected}\n                            autoPauseContext={autoPauseContext}\n                            settingsProvider={settingsProvider}\n                            keyBinder={keyBinder}\n                        />\n                    </Grid>\n                )}\n            </Grid>\n            <audio ref={audioRef} src={audioFileUrl} />\n        </div>\n    );\n}\n","import { useState, useEffect } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\ninterface Props {\n    open: boolean;\n    onProceed: (fieldName: string) => void;\n    onCancel: () => void;\n    existingCustomFieldNames: string[];\n}\n\nexport default function CustomFieldDialog({ open, onProceed, onCancel, existingCustomFieldNames }: Props) {\n    const [fieldName, setFieldName] = useState<string>('');\n\n    useEffect(() => {\n        setFieldName('');\n    }, [open]);\n\n    const fieldExists = [\n        ...existingCustomFieldNames,\n        'Sentence',\n        'Word',\n        'Definition',\n        'Source',\n        'Image',\n        'Audio',\n    ].includes(fieldName);\n\n    return (\n        <Dialog\n            open={open}\n            disableEnforceFocus\n            fullWidth\n            maxWidth=\"xs\"\n            onClose={onCancel}\n        >\n            <DialogTitle>New Custom Field</DialogTitle>\n            <DialogContent>\n                <form>\n                    <TextField\n                        error={fieldExists}\n                        helperText={fieldExists && `Field ${fieldName} already exists`}\n                        variant=\"filled\"\n                        fullWidth\n                        label=\"Field Name\"\n                        value={fieldName}\n                        color=\"secondary\"\n                        onChange={(e) => setFieldName(e.target.value)}\n                    />\n                </form>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={() => onCancel()}>Cancel</Button>\n                <Button disabled={fieldExists || fieldName.trim() === ''} onClick={() => onProceed(fieldName.trim())}>\n                    Create\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n","import React, { useCallback, useState, useEffect, useMemo, ChangeEvent, ReactNode, useRef } from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport { computeStyles } from '../services/util';\nimport Button from '@material-ui/core/Button';\nimport CustomFieldDialog from './CustomFieldDialog';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport EditIcon from '@material-ui/icons/Edit';\nimport InfoIcon from '@material-ui/icons/Info';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Grid from '@material-ui/core/Grid';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Link from '@material-ui/core/Link';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Radio from '@material-ui/core/Radio';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport Select from '@material-ui/core/Select';\nimport TextField from '@material-ui/core/TextField';\nimport { Theme } from '@material-ui/core/styles';\nimport { Anki, AsbplayerSettings, AutoPausePreference, KeyBindSet, KeyBindName } from '@project/common';\nimport { TagsTextField } from '@project/common/components';\nimport hotkeys from 'hotkeys-js';\nimport Typography from '@material-ui/core/Typography';\nimport ChromeExtension from '../services/ChromeExtension';\nimport { isMacOs } from 'react-device-detect';\nimport Switch from '@material-ui/core/Switch';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nconst useStyles = makeStyles<Theme>((theme) => ({\n    root: {\n        '& .MuiTextField-root': {\n            marginTop: theme.spacing(1),\n            marginBottom: theme.spacing(1),\n        },\n    },\n    subtitleSetting: {\n        '& .MuiTextField-root': {\n            marginTop: theme.spacing(1),\n            marginBottom: theme.spacing(1),\n        },\n    },\n    subtitlePreview: {\n        backgroundImage: `linear-gradient(45deg, ${theme.palette.action.disabledBackground} 25%, transparent 25%), linear-gradient(-45deg, ${theme.palette.action.disabledBackground} 25%, transparent 25%), linear-gradient(45deg, transparent 75%, ${theme.palette.action.disabledBackground} 75%), linear-gradient(-45deg, transparent 75%,${theme.palette.action.disabledBackground} 75%)`,\n        backgroundSize: '20px 20px',\n        backgroundPosition: '0 0, 0 10px, 10px -10px, -10px 0px',\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n        maxWidth: '100%',\n        padding: 10,\n    },\n    subtitlePreviewInput: {\n        border: 'none',\n        width: '100%',\n        textAlign: 'center',\n        backgroundColor: 'rgba(0,0,0,0)',\n        '&:focus': {\n            outline: 'none',\n        },\n    },\n    addFieldButton: {\n        width: '100%',\n    },\n    switchLabel: {\n        justifyContent: 'space-between',\n        marginLeft: 0,\n    },\n}));\n\nconst useSelectableSettingStyles = makeStyles<Theme>((theme) => ({\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n    },\n    root: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'end',\n        alignItems: 'flex-end',\n    },\n}));\n\nfunction regexIsValid(regex: string) {\n    try {\n        new RegExp(regex.trim());\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\n\ninterface SelectableSettingProps {\n    label: string;\n    value: string;\n    selections?: string[];\n    removable?: boolean;\n    onChange: (event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => void;\n    onSelectionChange: (event: ChangeEvent<{ name?: string | undefined; value: unknown }>, child: ReactNode) => void;\n    onRemoval?: () => void;\n}\n\nfunction SelectableSetting({\n    label,\n    value,\n    selections,\n    removable,\n    onChange,\n    onSelectionChange,\n    onRemoval,\n}: SelectableSettingProps) {\n    const classes = useSelectableSettingStyles();\n\n    return (\n        <div className={classes.root}>\n            <TextField\n                label={label}\n                value={value}\n                onChange={onChange}\n                fullWidth\n                color=\"secondary\"\n                InputProps={{\n                    endAdornment: removable && (\n                        <InputAdornment position=\"end\">\n                            <IconButton onClick={(e) => onRemoval?.()}>\n                                <DeleteIcon />\n                            </IconButton>\n                        </InputAdornment>\n                    ),\n                }}\n            />\n            <FormControl className={classes.formControl}>\n                <InputLabel></InputLabel>\n                <Select value={value} disabled={!selections} color=\"secondary\" onChange={onSelectionChange}>\n                    {selections &&\n                        selections.map((s) => (\n                            <MenuItem key={s} value={s}>\n                                {s}\n                            </MenuItem>\n                        ))}\n                </Select>\n            </FormControl>\n        </div>\n    );\n}\n\ninterface KeyBindProperties {\n    label: string;\n    extensionOverridden: boolean;\n}\n\nconst keyBindProperties: { [key in KeyBindName]: KeyBindProperties } = {\n    copySubtitle: { label: 'Mine current subtitle', extensionOverridden: true },\n    ankiExport: { label: 'Mine current subtitle and open Anki dialog', extensionOverridden: true },\n    updateLastCard: {\n        label: 'Update last-created Anki card with asbplayer-captured screenshot, audio, etc.',\n        extensionOverridden: true,\n    },\n    togglePlay: { label: 'Play/pause', extensionOverridden: false },\n    toggleAutoPause: { label: 'Toggle auto-pause', extensionOverridden: false },\n    toggleCondensedPlayback: { label: 'Toggle condensed playback', extensionOverridden: false },\n    toggleSubtitles: { label: 'Toggle subtitles', extensionOverridden: false },\n    toggleVideoSubtitleTrack1: { label: 'Toggle subtitle track 1 in video', extensionOverridden: false },\n    toggleVideoSubtitleTrack2: { label: 'Toggle subtitle track 2 in video', extensionOverridden: false },\n    toggleAsbplayerSubtitleTrack1: { label: 'Toggle subtitle track 1 in asbplayer', extensionOverridden: false },\n    toggleAsbplayerSubtitleTrack2: { label: 'Toggle subtitle track 2 in asbplayer', extensionOverridden: false },\n    seekBackward: { label: 'Seek backward 10 seconds', extensionOverridden: false },\n    seekForward: { label: 'Seek forward 10 seconds', extensionOverridden: false },\n    seekToPreviousSubtitle: { label: 'Seek to previous subtitle', extensionOverridden: false },\n    seekToNextSubtitle: { label: 'Seek to next subtitle', extensionOverridden: false },\n    seekToBeginningOfCurrentSubtitle: { label: 'Seek to beginning of current subtitle', extensionOverridden: false },\n    adjustOffsetToPreviousSubtitle: {\n        label: 'Adjust subtitle offset so that previous subtitle is at current timestamp',\n        extensionOverridden: false,\n    },\n    adjustOffsetToNextSubtitle: {\n        label: 'Adjust subtitle offset so that next subtitle is at current timestamp',\n        extensionOverridden: false,\n    },\n    increaseOffset: { label: 'Adjust subtitle offset by +100ms', extensionOverridden: false },\n    decreaseOffset: { label: 'Adjust subtitle offset by -100ms', extensionOverridden: false },\n    resetOffset: { label: 'Reset subtitle offset', extensionOverridden: false },\n    increasePlaybackRate: { label: 'Adjust playback rate by +0.1', extensionOverridden: false },\n    decreasePlaybackRate: { label: 'Adjust playback rate by -0.1', extensionOverridden: false },\n};\n\n// hotkeys only returns strings for a Mac while requiring the OS-specific keys for the actual binds\nconst modifierKeyReplacements: { [key: string]: string } = isMacOs\n    ? {}\n    : {\n          '⌃': 'ctrl',\n          '⇧': 'shift',\n          '⌥': 'alt',\n      };\n\nconst modifierKeys = ['⌃', '⇧', '⌥', 'ctrl', 'shift', 'alt', 'option', 'control', 'command', '⌘'];\n\nconst useKeyBindFieldStyles = makeStyles<Theme>((theme) => ({\n    container: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n    },\n    labelItem: {},\n}));\n\ninterface KeyBindFieldProps {\n    label: string;\n    keys: string;\n    extensionOverridden: boolean;\n    onKeysChange: (keys: string) => void;\n    onOpenExtensionShortcuts: () => void;\n}\n\nfunction KeyBindField({ label, keys, extensionOverridden, onKeysChange, onOpenExtensionShortcuts }: KeyBindFieldProps) {\n    const classes = useKeyBindFieldStyles();\n    const [currentKeyString, setCurrentKeyString] = useState<string>(keys);\n    const currentKeyStringRef = useRef<string>();\n    currentKeyStringRef.current = currentKeyString;\n    const onKeysChangeRef = useRef<(keys: string) => void>();\n    onKeysChangeRef.current = onKeysChange;\n    const [editing, setEditing] = useState<boolean>(false);\n\n    useEffect(() => setCurrentKeyString(keys), [keys]);\n\n    const handleEditKeyBinding = useCallback(\n        (event: React.MouseEvent) => {\n            if (event.nativeEvent.detail === 0) {\n                return;\n            }\n\n            if (extensionOverridden) {\n                onOpenExtensionShortcuts();\n                return;\n            }\n\n            setCurrentKeyString('');\n            setEditing(true);\n        },\n        [onOpenExtensionShortcuts, extensionOverridden]\n    );\n\n    const ref = useRef<HTMLButtonElement>(null);\n\n    useEffect(() => {\n        if (!editing) {\n            return;\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (event.type === 'keydown') {\n                // The ts declaration is missing getPressedKeyString()\n                // @ts-ignore\n                const pressed = hotkeys.getPressedKeyString() as string[];\n                setCurrentKeyString(\n                    pressed\n                        .map((key) => {\n                            return modifierKeyReplacements[key] ?? key;\n                        })\n                        .sort((a, b) => {\n                            const isAModifier = modifierKeys.includes(a);\n                            const isBModifier = modifierKeys.includes(b);\n\n                            if (isAModifier && !isBModifier) {\n                                return -1;\n                            }\n\n                            if (!isAModifier && isBModifier) {\n                                return 1;\n                            }\n\n                            return 0;\n                        })\n                        .join('+')\n                );\n            } else if (event.type === 'keyup') {\n                setEditing(false);\n\n                // Need to use refs because hotkeys returns the wrong keys\n                // if the handler is bound/unbound.\n                if (currentKeyStringRef.current) {\n                    onKeysChangeRef.current!(currentKeyStringRef.current);\n                }\n            }\n        };\n\n        hotkeys('*', { keyup: true }, handler);\n        return () => hotkeys.unbind('*', handler);\n    }, [editing]);\n\n    useEffect(() => {\n        const handler = (event: MouseEvent) => {\n            if (editing && !ref.current?.contains(event.target as Node)) {\n                setEditing(false);\n                setCurrentKeyString('');\n                onKeysChange('');\n            }\n        };\n        window.document.addEventListener('click', handler);\n        return () => window.document.removeEventListener('click', handler);\n    }, [editing, onKeysChange]);\n\n    let placeholder: string;\n\n    if (editing) {\n        placeholder = 'Recording';\n    } else if (extensionOverridden) {\n        placeholder = 'Overridden';\n    } else {\n        placeholder = 'Unbound';\n    }\n\n    return (\n        <Grid container className={classes.container} wrap={'nowrap'} spacing={1}>\n            <Grid item className={classes.labelItem} xs={6}>\n                <Typography>{label}</Typography>\n            </Grid>\n            <Grid item xs={6}>\n                <TextField\n                    placeholder={placeholder}\n                    size=\"small\"\n                    contentEditable={false}\n                    disabled={extensionOverridden}\n                    helperText={extensionOverridden ? 'Extension shortcut' : undefined}\n                    value={currentKeyString}\n                    color=\"secondary\"\n                    InputProps={{\n                        endAdornment: (\n                            <InputAdornment position=\"end\">\n                                <IconButton ref={ref} onClick={handleEditKeyBinding}>\n                                    <EditIcon />\n                                </IconButton>\n                            </InputAdornment>\n                        ),\n                    }}\n                />\n            </Grid>\n        </Grid>\n    );\n}\n\ninterface Props {\n    anki: Anki;\n    extension: ChromeExtension;\n    open: boolean;\n    settings: AsbplayerSettings;\n    scrollToId?: string;\n    onClose: (settings: AsbplayerSettings) => void;\n}\n\nexport default function SettingsDialog({ anki, extension, open, settings, scrollToId, onClose }: Props) {\n    const classes = useStyles();\n    const [ankiConnectUrl, setAnkiConnectUrl] = useState<string>(settings.ankiConnectUrl);\n    const [ankiConnectUrlError, setAnkiConnectUrlError] = useState<string>();\n    const [ankiConnectUrlChangeTimestamp, setAnkiConnectUrlChangeTimestamp] = useState<number>(0);\n    const [deck, setDeck] = useState<string>(settings.deck || '');\n    const [deckNames, setDeckNames] = useState<string[]>();\n    const [noteType, setNoteType] = useState<string>(settings.noteType || '');\n    const [modelNames, setModelNames] = useState<string[]>();\n    const [sentenceField, setSentenceField] = useState<string>(settings.sentenceField || '');\n    const [definitionField, setDefinitionField] = useState<string>(settings.definitionField || '');\n    const [audioField, setAudioField] = useState<string>(settings.audioField || '');\n    const [imageField, setImageField] = useState<string>(settings.imageField || '');\n    const [wordField, setWordField] = useState<string>(settings.wordField || '');\n    const [sourceField, setSourceField] = useState<string>(settings.sourceField || '');\n    const [urlField, setUrlField] = useState<string>(settings.urlField || '');\n    const [customFields, setCustomFields] = useState<{ [key: string]: string }>(settings.customAnkiFields);\n    const [tags, setTags] = useState<string[]>(settings.tags);\n    const [preferMp3, setPreferMp3] = useState<boolean>(settings.preferMp3);\n    const [fieldNames, setFieldNames] = useState<string[]>();\n    const [customFieldDialogOpen, setCustomFieldDialogOpen] = useState<boolean>(false);\n    const [audioPaddingStart, setAudioPaddingStart] = useState<number>(settings.audioPaddingStart);\n    const [audioPaddingEnd, setAudioPaddingEnd] = useState<number>(settings.audioPaddingEnd);\n    const [maxImageWidth, setMaxImageWidth] = useState<number>(settings.maxImageWidth);\n    const [maxImageHeight, setMaxImageHeight] = useState<number>(settings.maxImageHeight);\n    const [surroundingSubtitlesCountRadius, setSurroundingSubtitlesCountRadius] = useState<number>(\n        settings.surroundingSubtitlesCountRadius\n    );\n    const [surroundingSubtitlesTimeRadius, setSurroundingSubtitlesTimeRadius] = useState<number>(\n        settings.surroundingSubtitlesTimeRadius\n    );\n    const [subtitleColor, setSubtitleColor] = useState<string>(settings.subtitleColor);\n    const [subtitleSize, setSubtitleSize] = useState<number>(settings.subtitleSize);\n    const [subtitleOutlineColor, setSubtitleOutlineColor] = useState<string>(settings.subtitleOutlineColor);\n    const [subtitleOutlineThickness, setSubtitleOutlineThickness] = useState<number>(settings.subtitleOutlineThickness);\n    const [subtitleBackgroundColor, setSubtitleBackgroundColor] = useState<string>(settings.subtitleBackgroundColor);\n    const [subtitleBackgroundOpacity, setSubtitleBackgroundOpacity] = useState<number>(\n        settings.subtitleBackgroundOpacity\n    );\n    const [subtitleFontFamily, setSubtitleFontFamily] = useState<string>(settings.subtitleFontFamily);\n    const [imageBasedSubtitleScaleFactor, setImageBasedSubtitleScaleFactor] = useState<number>(\n        settings.imageBasedSubtitleScaleFactor\n    );\n    const [subtitlePreview, setSubtitlePreview] = useState<string>(settings.subtitlePreview);\n    const [themeType, setThemeType] = useState<'dark' | 'light'>(settings.themeType);\n    const [copyToClipboardOnMine, setCopyToClipboardOnMine] = useState<boolean>(settings.copyToClipboardOnMine);\n    const [autoPausePreference, setAutoPausePreference] = useState<AutoPausePreference>(settings.autoPausePreference);\n    const [keyBindSet, setKeyBindSet] = useState<KeyBindSet>(settings.keyBindSet);\n    const [rememberSubtitleOffset, setRememberSubtitleOffset] = useState<boolean>(settings.rememberSubtitleOffset);\n    const [miningHistoryStorageLimit, setMiningHistoryStorageLimit] = useState<number>(\n        settings.miningHistoryStorageLimit\n    );\n    const [autoCopyCurrentSubtitle, setAutoCopyCurrentSubtitle] = useState<boolean>(settings.autoCopyCurrentSubtitle);\n    const [subtitleRegexFilter, setSubtitleRegexFilter] = useState<string>(settings.subtitleRegexFilter);\n    const [subtitleRegexFilterTextReplacement, setSubtitleRegexFilterTextReplacement] = useState<string>(\n        settings.subtitleRegexFilterTextReplacement\n    );\n\n    const handleAnkiConnectUrlChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n        setAnkiConnectUrl(e.target.value);\n        setAnkiConnectUrlChangeTimestamp(Date.now());\n    }, []);\n\n    const handleRetryAnkiConnectUrl = useCallback(\n        (e: React.MouseEvent<HTMLButtonElement>) => setAnkiConnectUrlChangeTimestamp(Date.now()),\n        []\n    );\n    const handleDeckChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setDeck(e.target.value),\n        []\n    );\n    const handleDeckSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setDeck(e.target.value as string),\n        []\n    );\n    const handleNoteTypeChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setNoteType(e.target.value),\n        []\n    );\n    const handleNoteTypeSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setNoteType(e.target.value as string),\n        []\n    );\n    const handleSentenceFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSentenceField(e.target.value),\n        []\n    );\n    const handleSentenceFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setSentenceField(e.target.value as string),\n        []\n    );\n    const handleDefinitionFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setDefinitionField(e.target.value),\n        []\n    );\n    const handleDefinitionFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setDefinitionField(e.target.value as string),\n        []\n    );\n    const handleAudioFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setAudioField(e.target.value),\n        []\n    );\n    const handleAudioFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setAudioField(e.target.value as string),\n        []\n    );\n    const handleImageFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setImageField(e.target.value),\n        []\n    );\n    const handleImageFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setImageField(e.target.value as string),\n        []\n    );\n    const handleWordFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setWordField(e.target.value),\n        []\n    );\n    const handleWordFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setWordField(e.target.value as string),\n        []\n    );\n    const handleSourceFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSourceField(e.target.value),\n        []\n    );\n    const handleSourceFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setSourceField(e.target.value as string),\n        []\n    );\n    const handleUrlFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setUrlField(e.target.value),\n        []\n    );\n    const handleUrlFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setUrlField(e.target.value as string),\n        []\n    );\n    const handleAudioPaddingStart = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setAudioPaddingStart(Number(e.target.value)),\n        []\n    );\n    const handleAudioPaddingEnd = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setAudioPaddingEnd(Number(e.target.value)),\n        []\n    );\n    const handleMaxImageWidth = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setMaxImageWidth(Number(e.target.value)),\n        []\n    );\n    const handleMaxImageHeight = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setMaxImageHeight(Number(e.target.value)),\n        []\n    );\n    const handleSurroundingSubtitlesCountRadius = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) =>\n            setSurroundingSubtitlesCountRadius(Number(e.target.value)),\n        []\n    );\n    const handleSurroundingSubtitlesTimeRadius = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) =>\n            setSurroundingSubtitlesTimeRadius(Number(e.target.value)),\n        []\n    );\n    const handleSubtitleColorChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleColor(e.target.value),\n        []\n    );\n    const handleSubtitleSizeChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleSize(Number(e.target.value)),\n        []\n    );\n    const handleSubtitleOutlineColorChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleOutlineColor(e.target.value),\n        []\n    );\n    const handleSubtitleOutlineThicknessChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleOutlineThickness(Number(e.target.value)),\n        []\n    );\n    const handleSubtitleBackgroundColorChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleBackgroundColor(e.target.value),\n        []\n    );\n    const handleSubtitleBackgroundOpacityChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) =>\n            setSubtitleBackgroundOpacity(Number(e.target.value)),\n        []\n    );\n    const handleSubtitleFontFamilyChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleFontFamily(e.target.value),\n        []\n    );\n    const handleSubtitlePreviewChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitlePreview(e.target.value),\n        []\n    );\n    const handleImageBasedSubtitleScaleFactorChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) =>\n            setImageBasedSubtitleScaleFactor(Number(e.target.value)),\n        []\n    );\n    const handleAddCustomField = useCallback((customFieldName: string) => {\n        setCustomFields((oldCustomFields: { [key: string]: string }) => {\n            const newCustomFields: { [key: string]: string } = {};\n            Object.assign(newCustomFields, oldCustomFields);\n            newCustomFields[customFieldName] = '';\n            return newCustomFields;\n        });\n        setCustomFieldDialogOpen(false);\n    }, []);\n    const handleCustomFieldChange = useCallback((customFieldName: string, value: string) => {\n        setCustomFields((oldCustomFields: { [key: string]: string }) => {\n            const newCustomFields: { [key: string]: string } = {};\n            Object.assign(newCustomFields, oldCustomFields);\n            newCustomFields[customFieldName] = value;\n            return newCustomFields;\n        });\n    }, []);\n    const handleCustomFieldRemoval = useCallback(\n        (customFieldName: string) =>\n            setCustomFields((oldCustomFields: { [key: string]: string }) => {\n                const newCustomFields: { [key: string]: string } = {};\n                Object.assign(newCustomFields, oldCustomFields);\n                delete newCustomFields[customFieldName];\n                return newCustomFields;\n            }),\n        []\n    );\n    const handleTagsChange = useCallback((newTags: string[]) => {\n        setTags(newTags);\n    }, []);\n    const handlePreferMp3Change = useCallback((e: ChangeEvent<HTMLInputElement>) => setPreferMp3(e.target.checked), []);\n    const handleThemeTypeChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        if (e.target.value !== 'dark' && e.target.value !== 'light') {\n            throw new Error(`Invalid theme type ${e.target.value}`);\n        }\n\n        setThemeType(e.target.value);\n    }, []);\n    const handleCopyToClipboardOnMine = useCallback(\n        (e: ChangeEvent<HTMLInputElement>) => setCopyToClipboardOnMine(e.target.checked),\n        []\n    );\n    const handleAutoPausePreferenceChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        setAutoPausePreference(Number(e.target.value) as AutoPausePreference);\n    }, []);\n    const handleKeysChange = useCallback((keys: string, keyBindName: KeyBindName) => {\n        setKeyBindSet((keyBindSet) => {\n            const newKeyBindSet = { ...keyBindSet };\n            newKeyBindSet[keyBindName] = { keys };\n            return newKeyBindSet;\n        });\n    }, []);\n    const handleRememberSubtitleOffsetChange = useCallback(\n        (e: ChangeEvent<HTMLInputElement>) => setRememberSubtitleOffset(e.target.checked),\n        []\n    );\n    const handleAutoCopyCurrentSubtitle = useCallback(\n        (e: ChangeEvent<HTMLInputElement>) => setAutoCopyCurrentSubtitle(e.target.checked),\n        []\n    );\n    const handleMiningHistoryStorageLimit = useCallback(\n        (e: ChangeEvent<HTMLInputElement>) => setMiningHistoryStorageLimit(Number(e.target.value)),\n        []\n    );\n    const handleSubtitleRegexFilter = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleRegexFilter(e.target.value.trim()),\n        []\n    );\n    const handleSubtitleRegexFilterTextReplacement = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) =>\n            setSubtitleRegexFilterTextReplacement(e.target.value),\n        []\n    );\n\n    const subtitlePreviewStyles = useMemo(\n        () =>\n            computeStyles({\n                subtitleColor: subtitleColor,\n                subtitleSize: subtitleSize,\n                subtitleOutlineThickness: subtitleOutlineThickness,\n                subtitleOutlineColor: subtitleOutlineColor,\n                subtitleBackgroundOpacity: subtitleBackgroundOpacity,\n                subtitleBackgroundColor: subtitleBackgroundColor,\n                subtitleFontFamily: subtitleFontFamily,\n            }),\n        [\n            subtitleColor,\n            subtitleSize,\n            subtitleOutlineThickness,\n            subtitleOutlineColor,\n            subtitleBackgroundOpacity,\n            subtitleBackgroundColor,\n            subtitleFontFamily,\n        ]\n    );\n\n    useEffect(() => {\n        let canceled = false;\n\n        const timeout = setTimeout(async () => {\n            try {\n                if (canceled) {\n                    return;\n                }\n\n                await anki.requestPermission(ankiConnectUrl);\n                setDeckNames(await anki.deckNames(ankiConnectUrl));\n                setModelNames(await anki.modelNames(ankiConnectUrl));\n                setAnkiConnectUrlError(undefined);\n            } catch (e) {\n                if (canceled) {\n                    return;\n                }\n\n                console.error(e);\n                setDeckNames(undefined);\n                setModelNames(undefined);\n\n                if (e instanceof Error) {\n                    setAnkiConnectUrlError(e.message);\n                } else if (typeof e === 'string') {\n                    setAnkiConnectUrlError(e);\n                } else {\n                    setAnkiConnectUrlError(String(e));\n                }\n            }\n        }, 1000);\n\n        return () => {\n            canceled = true;\n            clearTimeout(timeout);\n        };\n    }, [anki, ankiConnectUrl, ankiConnectUrlChangeTimestamp]);\n\n    useEffect(() => {\n        if (!noteType || ankiConnectUrlError) {\n            return undefined;\n        }\n\n        let canceled = false;\n\n        async function refreshFieldNames() {\n            try {\n                if (canceled) {\n                    return;\n                }\n\n                setFieldNames(['', ...(await anki.modelFieldNames(noteType, ankiConnectUrl))]);\n                setAnkiConnectUrlError(undefined);\n            } catch (e) {\n                if (canceled) {\n                    return;\n                }\n\n                console.error(e);\n                setFieldNames(undefined);\n\n                if (e instanceof Error) {\n                    setAnkiConnectUrlError(e.message);\n                } else if (typeof e === 'string') {\n                    setAnkiConnectUrlError(e);\n                } else {\n                    setAnkiConnectUrlError(String(e));\n                }\n            }\n        }\n\n        refreshFieldNames();\n\n        return () => {\n            canceled = true;\n        };\n    }, [anki, noteType, ankiConnectUrl, ankiConnectUrlError, ankiConnectUrlChangeTimestamp]);\n\n    const handleClose = useCallback(() => {\n        onClose({\n            ankiConnectUrl: ankiConnectUrl,\n            deck: deck,\n            noteType: noteType,\n            sentenceField: sentenceField,\n            definitionField: definitionField,\n            audioField: audioField,\n            imageField: imageField,\n            wordField: wordField,\n            sourceField: sourceField,\n            urlField: urlField,\n            tags: tags.filter((t) => t !== ''),\n            subtitleSize: Number(subtitleSize),\n            subtitleColor: subtitleColor,\n            subtitleOutlineThickness: Number(subtitleOutlineThickness),\n            subtitleOutlineColor: subtitleOutlineColor,\n            subtitleBackgroundColor: subtitleBackgroundColor,\n            subtitleBackgroundOpacity: Number(subtitleBackgroundOpacity),\n            subtitleFontFamily: subtitleFontFamily,\n            subtitlePreview: subtitlePreview,\n            imageBasedSubtitleScaleFactor: imageBasedSubtitleScaleFactor,\n            customAnkiFields: customFields,\n            preferMp3: preferMp3,\n            themeType: themeType,\n            audioPaddingStart: audioPaddingStart,\n            audioPaddingEnd: audioPaddingEnd,\n            maxImageWidth: maxImageWidth,\n            maxImageHeight: maxImageHeight,\n            surroundingSubtitlesCountRadius: surroundingSubtitlesCountRadius,\n            surroundingSubtitlesTimeRadius: surroundingSubtitlesTimeRadius,\n            copyToClipboardOnMine: copyToClipboardOnMine,\n            autoPausePreference: autoPausePreference,\n            keyBindSet: keyBindSet,\n            rememberSubtitleOffset: rememberSubtitleOffset,\n            autoCopyCurrentSubtitle: autoCopyCurrentSubtitle,\n            miningHistoryStorageLimit: miningHistoryStorageLimit,\n            subtitleRegexFilter: subtitleRegexFilter,\n            subtitleRegexFilterTextReplacement: subtitleRegexFilterTextReplacement,\n        });\n    }, [\n        onClose,\n        ankiConnectUrl,\n        deck,\n        noteType,\n        sentenceField,\n        definitionField,\n        audioField,\n        imageField,\n        wordField,\n        sourceField,\n        urlField,\n        customFields,\n        tags,\n        preferMp3,\n        subtitleSize,\n        subtitleColor,\n        subtitleOutlineThickness,\n        subtitleOutlineColor,\n        subtitleBackgroundColor,\n        subtitleBackgroundOpacity,\n        subtitleFontFamily,\n        subtitlePreview,\n        imageBasedSubtitleScaleFactor,\n        themeType,\n        audioPaddingStart,\n        audioPaddingEnd,\n        maxImageWidth,\n        maxImageHeight,\n        surroundingSubtitlesCountRadius,\n        surroundingSubtitlesTimeRadius,\n        copyToClipboardOnMine,\n        autoPausePreference,\n        keyBindSet,\n        rememberSubtitleOffset,\n        autoCopyCurrentSubtitle,\n        miningHistoryStorageLimit,\n        subtitleRegexFilter,\n        subtitleRegexFilterTextReplacement,\n    ]);\n\n    const customFieldInputs = Object.keys(customFields).map((customFieldName) => {\n        return (\n            <SelectableSetting\n                key={customFieldName}\n                label={`${customFieldName} Field`}\n                value={customFields[customFieldName]}\n                selections={fieldNames!}\n                onChange={(e) => handleCustomFieldChange(customFieldName, e.target.value)}\n                onSelectionChange={(e) => handleCustomFieldChange(customFieldName, e.target.value as string)}\n                onRemoval={() => handleCustomFieldRemoval(customFieldName)}\n                removable={true}\n            />\n        );\n    });\n\n    useEffect(() => {\n        if (!scrollToId) {\n            return;\n        }\n\n        setTimeout(() => document.getElementById(scrollToId)?.scrollIntoView({ behavior: 'smooth' }), 0);\n    }, [scrollToId]);\n\n    const validRegex = regexIsValid(subtitleRegexFilter);\n\n    return (\n        <React.Fragment>\n            <CustomFieldDialog\n                open={customFieldDialogOpen}\n                existingCustomFieldNames={Object.keys(customFields)}\n                onProceed={handleAddCustomField}\n                onCancel={() => setCustomFieldDialogOpen(false)}\n            />\n            <Dialog open={open} maxWidth=\"xs\" fullWidth onClose={handleClose}>\n                <DialogTitle>Settings</DialogTitle>\n                <DialogContent>\n                    <Grid container direction=\"column\" spacing={3}>\n                        <Grid item id=\"anki-settings\">\n                            <FormLabel>Anki</FormLabel>\n                            <FormGroup className={classes.root}>\n                                <TextField\n                                    label=\"Anki Connect URL\"\n                                    value={ankiConnectUrl}\n                                    error={Boolean(ankiConnectUrlError)}\n                                    helperText={ankiConnectUrlError}\n                                    color=\"secondary\"\n                                    onChange={handleAnkiConnectUrlChange}\n                                    InputProps={{\n                                        endAdornment: (\n                                            <InputAdornment position=\"end\">\n                                                <IconButton onClick={handleRetryAnkiConnectUrl}>\n                                                    <RefreshIcon />\n                                                </IconButton>\n                                            </InputAdornment>\n                                        ),\n                                    }}\n                                />\n                                <FormHelperText>\n                                    Ensure that {window.location.protocol + '//' + window.location.hostname} is in the\n                                    webCorsOriginList in your AnkiConnect settings as in this{' '}\n                                    <Link\n                                        color=\"secondary\"\n                                        target=\"_blank\"\n                                        rel=\"noreferrer\"\n                                        href=\"https://youtu.be/Mv7fEVb6PHo?t=44\"\n                                    >\n                                        video\n                                    </Link>\n                                    .\n                                </FormHelperText>\n                                <SelectableSetting\n                                    label=\"Deck\"\n                                    value={deck}\n                                    selections={deckNames}\n                                    onChange={handleDeckChange}\n                                    onSelectionChange={handleDeckSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"Note Type\"\n                                    value={noteType}\n                                    selections={modelNames}\n                                    onChange={handleNoteTypeChange}\n                                    onSelectionChange={handleNoteTypeSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"Sentence Field\"\n                                    value={sentenceField}\n                                    selections={fieldNames}\n                                    onChange={handleSentenceFieldChange}\n                                    onSelectionChange={handleSentenceFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"Definition Field\"\n                                    value={definitionField}\n                                    selections={fieldNames}\n                                    onChange={handleDefinitionFieldChange}\n                                    onSelectionChange={handleDefinitionFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"Word Field\"\n                                    value={wordField}\n                                    selections={fieldNames}\n                                    onChange={handleWordFieldChange}\n                                    onSelectionChange={handleWordFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"Audio Field\"\n                                    value={audioField}\n                                    selections={fieldNames}\n                                    onChange={handleAudioFieldChange}\n                                    onSelectionChange={handleAudioFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"Image Field\"\n                                    value={imageField}\n                                    selections={fieldNames}\n                                    onChange={handleImageFieldChange}\n                                    onSelectionChange={handleImageFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"Source Field\"\n                                    value={sourceField}\n                                    selections={fieldNames}\n                                    onChange={handleSourceFieldChange}\n                                    onSelectionChange={handleSourceFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"URL Field\"\n                                    value={urlField}\n                                    selections={fieldNames}\n                                    onChange={handleUrlFieldChange}\n                                    onSelectionChange={handleUrlFieldSelectionChange}\n                                />\n                                {customFieldInputs}\n                                <Button\n                                    className={classes.addFieldButton}\n                                    onClick={(e) => setCustomFieldDialogOpen(true)}\n                                >\n                                    Add Custom Field\n                                </Button>\n                                <TagsTextField\n                                    label=\"Tags\"\n                                    helperText=\"Comma-separated list of strings\"\n                                    fullWidth\n                                    color=\"secondary\"\n                                    tags={tags}\n                                    onTagsChange={handleTagsChange}\n                                />\n                            </FormGroup>\n                        </Grid>\n                        <Grid item id=\"mining-settings\">\n                            <FormLabel>Mining</FormLabel>\n                            <FormGroup className={classes.root}>\n                                <FormControlLabel\n                                    control={<Switch checked={preferMp3} onChange={handlePreferMp3Change} />}\n                                    label=\"Re-encode audio as mp3 (slower)\"\n                                    labelPlacement=\"start\"\n                                    className={classes.switchLabel}\n                                />\n                                <FormControlLabel\n                                    control={\n                                        <Switch\n                                            checked={copyToClipboardOnMine}\n                                            onChange={handleCopyToClipboardOnMine}\n                                        />\n                                    }\n                                    label=\"Copy mined subtitles to clipboard\"\n                                    labelPlacement=\"start\"\n                                    className={classes.switchLabel}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label=\"Audio Padding Start\"\n                                    fullWidth\n                                    value={audioPaddingStart}\n                                    color=\"secondary\"\n                                    onChange={handleAudioPaddingStart}\n                                    inputProps={{\n                                        min: 0,\n                                        step: 1,\n                                    }}\n                                    InputProps={{\n                                        endAdornment: <InputAdornment position=\"end\">ms</InputAdornment>,\n                                    }}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label=\"Audio Padding End\"\n                                    fullWidth\n                                    value={audioPaddingEnd}\n                                    color=\"secondary\"\n                                    onChange={handleAudioPaddingEnd}\n                                    inputProps={{\n                                        min: 0,\n                                        step: 1,\n                                    }}\n                                    InputProps={{\n                                        endAdornment: <InputAdornment position=\"end\">ms</InputAdornment>,\n                                    }}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label=\"Max Image Width\"\n                                    fullWidth\n                                    value={maxImageWidth}\n                                    color=\"secondary\"\n                                    onChange={handleMaxImageWidth}\n                                    inputProps={{\n                                        min: 0,\n                                        step: 1,\n                                    }}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label=\"Max Image Height\"\n                                    fullWidth\n                                    value={maxImageHeight}\n                                    color=\"secondary\"\n                                    onChange={handleMaxImageHeight}\n                                    inputProps={{\n                                        min: 0,\n                                        step: 1,\n                                    }}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label=\"Surrounding Subtitles Count Radius\"\n                                    fullWidth\n                                    value={surroundingSubtitlesCountRadius}\n                                    color=\"secondary\"\n                                    onChange={handleSurroundingSubtitlesCountRadius}\n                                    inputProps={{\n                                        min: 1,\n                                        step: 1,\n                                    }}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label=\"Surrounding Subtitles Time Radius\"\n                                    fullWidth\n                                    value={surroundingSubtitlesTimeRadius}\n                                    color=\"secondary\"\n                                    onChange={handleSurroundingSubtitlesTimeRadius}\n                                    inputProps={{\n                                        min: 0,\n                                        step: 1,\n                                    }}\n                                    InputProps={{\n                                        endAdornment: <InputAdornment position=\"end\">ms</InputAdornment>,\n                                    }}\n                                />\n                            </FormGroup>\n                        </Grid>\n                        <Grid item id=\"misc-settings\">\n                            <FormLabel>Misc</FormLabel>\n                            <FormGroup className={classes.root}>\n                                <FormControlLabel\n                                    control={\n                                        <Switch\n                                            checked={rememberSubtitleOffset}\n                                            onChange={handleRememberSubtitleOffsetChange}\n                                        />\n                                    }\n                                    label=\"Remember subtitle offset\"\n                                    labelPlacement=\"start\"\n                                    className={classes.switchLabel}\n                                />\n                                <FormControlLabel\n                                    control={\n                                        <Switch\n                                            checked={autoCopyCurrentSubtitle}\n                                            onChange={handleAutoCopyCurrentSubtitle}\n                                        />\n                                    }\n                                    label=\"Auto-copy current subtitle to clipboard\"\n                                    labelPlacement=\"start\"\n                                    className={classes.switchLabel}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label=\"Mining history storage limit\"\n                                    fullWidth\n                                    value={miningHistoryStorageLimit}\n                                    color=\"secondary\"\n                                    onChange={handleMiningHistoryStorageLimit}\n                                    inputProps={{\n                                        min: 0,\n                                        step: 1,\n                                    }}\n                                />\n                                <TextField\n                                    label=\"Subtitle Regex Filter\"\n                                    fullWidth\n                                    value={subtitleRegexFilter}\n                                    color=\"secondary\"\n                                    error={!validRegex}\n                                    helperText={validRegex ? undefined : 'Invalid regular expression'}\n                                    onChange={handleSubtitleRegexFilter}\n                                />\n                                <TextField\n                                    label=\"Subtitle Regex Filter Text Replacement\"\n                                    fullWidth\n                                    value={subtitleRegexFilterTextReplacement}\n                                    color=\"secondary\"\n                                    onChange={handleSubtitleRegexFilterTextReplacement}\n                                />\n                            </FormGroup>\n                        </Grid>\n                        <Grid item id=\"auto-pause-settings\">\n                            <Grid container direction=\"row\" spacing={1}>\n                                <Grid item>\n                                    <FormLabel>Auto-pause Preference</FormLabel>\n                                </Grid>\n                                <Grid item>\n                                    <Tooltip\n                                        title=\"Does not enable auto-pause. Sets the preference for when to pause when auto-pause is\n                                    enabled.\"\n                                        placement=\"top\"\n                                    >\n                                        <InfoIcon fontSize=\"small\" />\n                                    </Tooltip>\n                                </Grid>\n                            </Grid>\n                            <RadioGroup row>\n                                <FormControlLabel\n                                    control={\n                                        <Radio\n                                            checked={autoPausePreference === AutoPausePreference.atStart}\n                                            value={AutoPausePreference.atStart}\n                                            onChange={handleAutoPausePreferenceChange}\n                                        />\n                                    }\n                                    label=\"At Subtitle Start\"\n                                />\n                                <FormControlLabel\n                                    control={\n                                        <Radio\n                                            checked={autoPausePreference === AutoPausePreference.atEnd}\n                                            value={AutoPausePreference.atEnd}\n                                            onChange={handleAutoPausePreferenceChange}\n                                        />\n                                    }\n                                    label=\"At Subtitle End\"\n                                />\n                            </RadioGroup>\n                        </Grid>\n                        <Grid item id=\"video-subtitle-appearance\">\n                            <FormLabel>Video Subtitle Appearance</FormLabel>\n                            <FormGroup className={classes.root}>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"color\"\n                                        label=\"Subtitle Color\"\n                                        fullWidth\n                                        value={subtitleColor}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleColorChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"number\"\n                                        label=\"Subtitle Size\"\n                                        fullWidth\n                                        value={subtitleSize}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleSizeChange}\n                                        inputProps={{\n                                            min: 1,\n                                            step: 1,\n                                        }}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"color\"\n                                        label=\"Subtitle Outline Color\"\n                                        fullWidth\n                                        value={subtitleOutlineColor}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleOutlineColorChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"number\"\n                                        label=\"Subtitle Outline Thickness\"\n                                        fullWidth\n                                        value={subtitleOutlineThickness}\n                                        onChange={handleSubtitleOutlineThicknessChange}\n                                        inputProps={{\n                                            min: 0,\n                                            step: 1,\n                                        }}\n                                        color=\"secondary\"\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"color\"\n                                        label=\"Subtitle Background Color\"\n                                        fullWidth\n                                        value={subtitleBackgroundColor}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleBackgroundColorChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"number\"\n                                        label=\"Subtitle Background Opacity\"\n                                        fullWidth\n                                        inputProps={{\n                                            min: 0,\n                                            max: 1,\n                                            step: 0.1,\n                                        }}\n                                        value={subtitleBackgroundOpacity}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleBackgroundOpacityChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"text\"\n                                        label=\"Subtitle Font Family\"\n                                        placeholder=\"Inherited\"\n                                        fullWidth\n                                        value={subtitleFontFamily}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleFontFamilyChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"number\"\n                                        label=\"Image-based Subtitle Scale Factor\"\n                                        placeholder=\"Inherited\"\n                                        fullWidth\n                                        inputProps={{\n                                            min: 0,\n                                            max: 1,\n                                            step: 0.1,\n                                        }}\n                                        value={imageBasedSubtitleScaleFactor}\n                                        color=\"secondary\"\n                                        onChange={handleImageBasedSubtitleScaleFactorChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitlePreview}>\n                                    <input\n                                        value={subtitlePreview}\n                                        className={classes.subtitlePreviewInput}\n                                        onChange={handleSubtitlePreviewChange}\n                                        style={subtitlePreviewStyles}\n                                    />\n                                </div>\n                            </FormGroup>\n                        </Grid>\n                        <Grid item id=\"theme-settings\">\n                            <FormLabel>Theme</FormLabel>\n                            <div>\n                                <FormControlLabel\n                                    control={\n                                        <Radio\n                                            checked={themeType === 'light'}\n                                            value=\"light\"\n                                            onChange={handleThemeTypeChange}\n                                        />\n                                    }\n                                    label=\"Light\"\n                                />\n                                <FormControlLabel\n                                    control={\n                                        <Radio\n                                            checked={themeType === 'dark'}\n                                            value=\"dark\"\n                                            onChange={handleThemeTypeChange}\n                                        />\n                                    }\n                                    label=\"Dark\"\n                                />\n                            </div>\n                        </Grid>\n                        <Grid item id=\"keyboard-shortcuts\">\n                            <FormLabel>Keyboard Shortcuts</FormLabel>\n                            <FormGroup>\n                                {Object.keys(keyBindProperties).map((key) => {\n                                    const keyBindName = key as KeyBindName;\n                                    const properties = keyBindProperties[keyBindName];\n                                    return (\n                                        <KeyBindField\n                                            key={key}\n                                            label={properties.label}\n                                            keys={\n                                                extension.installed && properties.extensionOverridden\n                                                    ? extension.extensionCommands[keyBindName] ?? ''\n                                                    : keyBindSet[keyBindName].keys\n                                            }\n                                            extensionOverridden={extension.installed && properties.extensionOverridden}\n                                            onKeysChange={(keys) => handleKeysChange(keys, keyBindName)}\n                                            onOpenExtensionShortcuts={() => extension.openShortcuts()}\n                                        />\n                                    );\n                                })}\n                            </FormGroup>\n                        </Grid>\n                    </Grid>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose}>OK</Button>\n                </DialogActions>\n            </Dialog>\n        </React.Fragment>\n    );\n}\n","export default class CachedLocalStorage {\n    private readonly _cache: { [key: string]: string | null } = {};\n\n    get(key: string): string | null {\n        let cached = this._cache[key];\n\n        if (cached === undefined) {\n            const fromStorage = localStorage.getItem(key);\n            this._cache[key] = fromStorage;\n            return fromStorage;\n        }\n\n        return cached;\n    }\n\n    set(key: string, value: string) {\n        localStorage.setItem(key, value);\n        this._cache[key] = value;\n    }\n\n    delete(key: string) {\n        delete this._cache[key];\n        localStorage.removeItem(key);\n    }\n}\n","import {\n    AsbplayerSettings,\n    AsbplayerSettingsProvider,\n    AutoPausePreference,\n    KeyBindName,\n    KeyBindSet,\n} from '@project/common';\nimport { isMacOs } from 'react-device-detect';\nimport CachedLocalStorage from './CachedLocalStorage';\n\nconst defaultAnkiConnectUrl = 'http://127.0.0.1:8765';\nconst defaultSubtitleSize = 36;\nconst defaultSubtitleColor = '#ffffff';\nconst defaultSubtitleOutlineThickness = 0;\nconst defaultSubtitleOutlineColor = '#000000';\nconst defaultSubtitleBackgroundColor = '#000000';\nconst defaultSubtitleBackgroundOpacity = 0.5;\nconst defaultSubtitleFontFamily = '';\nconst defaultSubtitlePreview = 'アあ安';\nconst defaultAudioPaddingStart = 0;\nconst defaultAudioPaddingEnd = 500;\nconst defaultMaxImageWidth = 0;\nconst defaultMaxImageHeight = 0;\nconst defaultSurroundingSubtitlesCountRadius = 2;\nconst defaultSurroundingSubtitlesTimeRadius = 10000;\nconst defaultAutoPausePreference = AutoPausePreference.atEnd;\nconst defaultKeyBindSet: KeyBindSet = {\n    togglePlay: { keys: 'space' },\n    toggleAutoPause: { keys: isMacOs ? '⇧+P' : 'shift+P' },\n    toggleCondensedPlayback: { keys: isMacOs ? '⇧+O' : 'shift+O' },\n    toggleSubtitles: { keys: 'S' },\n    toggleVideoSubtitleTrack1: { keys: '1' },\n    toggleVideoSubtitleTrack2: { keys: '2' },\n    toggleAsbplayerSubtitleTrack1: { keys: 'W+1' },\n    toggleAsbplayerSubtitleTrack2: { keys: 'W+2' },\n    seekBackward: { keys: 'A' },\n    seekForward: { keys: 'D' },\n    seekToPreviousSubtitle: { keys: 'left' },\n    seekToNextSubtitle: { keys: 'right' },\n    seekToBeginningOfCurrentSubtitle: { keys: 'down' },\n    adjustOffsetToPreviousSubtitle: { keys: isMacOs ? '⇧+left' : 'ctrl+left' },\n    adjustOffsetToNextSubtitle: { keys: isMacOs ? '⇧+right' : 'ctrl+right' },\n    decreaseOffset: { keys: isMacOs ? '⇧+⌃+right' : 'ctrl+shift+right' },\n    increaseOffset: { keys: isMacOs ? '⇧+⌃+left' : 'ctrl+shift+left' },\n    resetOffset: { keys: isMacOs ? '⇧+⌃+down' : 'ctrl+shift+down' },\n    copySubtitle: { keys: isMacOs ? '⇧+⌃+Z' : 'ctrl+shift+Z' },\n    ankiExport: { keys: isMacOs ? '⇧+⌃+X' : 'ctrl+shift+X' },\n    updateLastCard: { keys: isMacOs ? '⇧+⌃+U' : 'ctrl+shift+U' },\n    decreasePlaybackRate: { keys: isMacOs ? '⇧+⌃+[' : 'ctrl+shift+[' },\n    increasePlaybackRate: { keys: isMacOs ? '⇧+⌃+]' : 'ctrl+shift+]' },\n};\nconst defaultPreferMp3 = true;\nconst defaultMiningHistoryStorageLimit = 25;\n\nconst ankiConnectUrlKey = 'ankiConnectUrl';\nconst deckKey = 'deck';\nconst noteTypeKey = 'noteType';\nconst sentenceFieldKey = 'sentenceField';\nconst definitionFieldKey = 'definitionField';\nconst audioFieldKey = 'audioField';\nconst imageFieldKey = 'imageField';\nconst wordFieldKey = 'wordField';\nconst sourceFieldKey = 'sourceField';\nconst urlFieldKey = 'urlField';\nconst customAnkiFieldsKey = 'customAnkiFields';\nconst tagsKey = 'tags';\nconst subtitleSizeKey = 'subtitleSize';\nconst subtitleColorKey = 'subtitleColor';\nconst subtitleOutlineThicknessKey = 'subtitleOutlineThickness';\nconst subtitleOutlineColorKey = 'subtitleOutlineColor';\nconst subtitleBackgroundColorKey = 'subtitleBackgroundColor';\nconst subtitleBackgroundOpacityKey = 'subtitleBackgroundOpacity';\nconst subtitleFontFamilyKey = 'subtitleFontFamily';\nconst subtitlePreviewKey = 'subtitlePreview';\nconst imageBasedSubtitleScaleFactorKey = 'imageBasedSubtitleScaleFactor';\nconst audioPaddingStartKey = 'audioPaddingStart';\nconst audioPaddingEndKey = 'audioPaddingEnd';\nconst maxImageWidthKey = 'maxImageWidth';\nconst maxImageHeightKey = 'maxImageHeight';\nconst surroundingSubtitlesCountRadiusKey = 'surroundingSubtitlesCountRadius';\nconst surroundingSubtitlesTimeRadiusKey = 'surroundingSubtitlesTimeRadius';\nconst preferMp3Key = 'preferMp3';\nconst themeTypeKey = 'themeType';\nconst copyToClipboardOnMineKey = 'copyToClipboardOnMine';\nconst autoPausePreferenceKey = 'autoPausePreference';\nconst keyBindSetKey = 'keyBindSet';\nconst rememberSubtitleOffsetKey = 'rememberSubtitleOffset';\nconst autoCopyCurrentSubtitleKey = 'autoCopyCurrentSubtitle';\nconst subtitleRegexFilterKey = 'subtitleRegexFilter';\nconst subtitleRegexFilterTextReplacementKey = 'subtitleRegexFilterTextReplacement';\nconst miningHistoryStorageLimitKey = 'miningHistoryStorageLimit';\n\nexport default class SettingsProvider implements AsbplayerSettingsProvider {\n    private _tags?: string[];\n    private _keyBindSet?: KeyBindSet;\n    private _storage = new CachedLocalStorage();\n\n    constructor() {\n        // Cache for use in useEffect dependencies\n        this._tags = this.tags;\n        this._keyBindSet = this.keyBindSet;\n    }\n\n    get settings(): AsbplayerSettings {\n        return {\n            ankiConnectUrl: this.ankiConnectUrl,\n            deck: this.deck,\n            noteType: this.noteType,\n            sentenceField: this.sentenceField,\n            definitionField: this.definitionField,\n            audioField: this.audioField,\n            imageField: this.imageField,\n            wordField: this.wordField,\n            urlField: this.urlField,\n            customAnkiFields: this.customAnkiFields,\n            tags: this.tags,\n            sourceField: this.sourceField,\n            subtitleSize: this.subtitleSize,\n            subtitleColor: this.subtitleColor,\n            subtitleOutlineThickness: this.subtitleOutlineThickness,\n            subtitleOutlineColor: this.subtitleOutlineColor,\n            subtitleBackgroundColor: this.subtitleBackgroundColor,\n            subtitleBackgroundOpacity: this.subtitleBackgroundOpacity,\n            subtitleFontFamily: this.subtitleFontFamily,\n            subtitlePreview: this.subtitlePreview,\n            imageBasedSubtitleScaleFactor: this.imageBasedSubtitleScaleFactor,\n            preferMp3: this.preferMp3,\n            themeType: this.themeType,\n            audioPaddingStart: this.audioPaddingStart,\n            audioPaddingEnd: this.audioPaddingEnd,\n            maxImageWidth: this.maxImageWidth,\n            maxImageHeight: this.maxImageHeight,\n            surroundingSubtitlesCountRadius: this.surroundingSubtitlesCountRadius,\n            surroundingSubtitlesTimeRadius: this.surroundingSubtitlesTimeRadius,\n            copyToClipboardOnMine: this.copyToClipboardOnMine,\n            autoPausePreference: this.autoPausePreference,\n            keyBindSet: this.keyBindSet,\n            rememberSubtitleOffset: this.rememberSubtitleOffset,\n            autoCopyCurrentSubtitle: this.autoCopyCurrentSubtitle,\n            subtitleRegexFilter: this.subtitleRegexFilter,\n            subtitleRegexFilterTextReplacement: this.subtitleRegexFilterTextReplacement,\n            miningHistoryStorageLimit: this.miningHistoryStorageLimit,\n        };\n    }\n\n    set settings(newSettings: AsbplayerSettings) {\n        this.ankiConnectUrl = newSettings.ankiConnectUrl;\n        this.deck = newSettings.deck;\n        this.noteType = newSettings.noteType;\n        this.sentenceField = newSettings.sentenceField;\n        this.definitionField = newSettings.definitionField;\n        this.audioField = newSettings.audioField;\n        this.imageField = newSettings.imageField;\n        this.wordField = newSettings.wordField;\n        this.sourceField = newSettings.sourceField;\n        this.urlField = newSettings.urlField;\n        this.tags = newSettings.tags;\n        this.subtitleSize = newSettings.subtitleSize;\n        this.subtitleColor = newSettings.subtitleColor;\n        this.subtitleOutlineThickness = newSettings.subtitleOutlineThickness;\n        this.subtitleOutlineColor = newSettings.subtitleOutlineColor;\n        this.subtitleBackgroundColor = newSettings.subtitleBackgroundColor;\n        this.subtitleBackgroundOpacity = newSettings.subtitleBackgroundOpacity;\n        this.subtitleFontFamily = newSettings.subtitleFontFamily;\n        this.subtitlePreview = newSettings.subtitlePreview;\n        this.imageBasedSubtitleScaleFactor = newSettings.imageBasedSubtitleScaleFactor;\n        this.customAnkiFields = newSettings.customAnkiFields;\n        this.preferMp3 = newSettings.preferMp3;\n        this.themeType = newSettings.themeType;\n        this.audioPaddingStart = newSettings.audioPaddingStart;\n        this.audioPaddingEnd = newSettings.audioPaddingEnd;\n        this.maxImageWidth = newSettings.maxImageWidth;\n        this.maxImageHeight = newSettings.maxImageHeight;\n        this.surroundingSubtitlesCountRadius = newSettings.surroundingSubtitlesCountRadius;\n        this.surroundingSubtitlesTimeRadius = newSettings.surroundingSubtitlesTimeRadius;\n        this.copyToClipboardOnMine = newSettings.copyToClipboardOnMine;\n        this.autoPausePreference = newSettings.autoPausePreference;\n        this.keyBindSet = newSettings.keyBindSet;\n        this.rememberSubtitleOffset = newSettings.rememberSubtitleOffset;\n        this.autoCopyCurrentSubtitle = newSettings.autoCopyCurrentSubtitle;\n        this.miningHistoryStorageLimit = newSettings.miningHistoryStorageLimit;\n        this.subtitleRegexFilter = newSettings.subtitleRegexFilter;\n        this.subtitleRegexFilterTextReplacement = newSettings.subtitleRegexFilterTextReplacement;\n    }\n\n    get subtitleSettings() {\n        return {\n            subtitleSize: this.subtitleSize,\n            subtitleColor: this.subtitleColor,\n            subtitleOutlineThickness: this.subtitleOutlineThickness,\n            subtitleOutlineColor: this.subtitleOutlineColor,\n            subtitleBackgroundColor: this.subtitleBackgroundColor,\n            subtitleBackgroundOpacity: this.subtitleBackgroundOpacity,\n            subtitleFontFamily: this.subtitleFontFamily,\n            imageBasedSubtitleScaleFactor: this.imageBasedSubtitleScaleFactor,\n        };\n    }\n\n    get ankiSettings() {\n        return {\n            ankiConnectUrl: this.ankiConnectUrl,\n            deck: this.deck,\n            noteType: this.noteType,\n            sentenceField: this.sentenceField,\n            definitionField: this.definitionField,\n            audioField: this.audioField,\n            imageField: this.imageField,\n            wordField: this.wordField,\n            sourceField: this.sourceField,\n            urlField: this.urlField,\n            customAnkiFields: this.customAnkiFields,\n            tags: this.tags,\n            preferMp3: this.preferMp3,\n            audioPaddingStart: this.audioPaddingStart,\n            audioPaddingEnd: this.audioPaddingEnd,\n            maxImageWidth: this.maxImageWidth,\n            maxImageHeight: this.maxImageHeight,\n            surroundingSubtitlesCountRadius: this.surroundingSubtitlesCountRadius,\n            surroundingSubtitlesTimeRadius: this.surroundingSubtitlesTimeRadius,\n        };\n    }\n\n    get miscSettings() {\n        return {\n            themeType: this.themeType,\n            copyToClipboardOnMine: this.copyToClipboardOnMine,\n            autoPausePreference: this.autoPausePreference,\n            keyBindSet: this.keyBindSet,\n            rememberSubtitleOffset: this.rememberSubtitleOffset,\n            autoCopyCurrentSubtitle: this.autoCopyCurrentSubtitle,\n            subtitleRegexFilter: this.subtitleRegexFilter,\n            subtitleRegexFilterTextReplacement: this.subtitleRegexFilterTextReplacement,\n            miningHistoryStorageLimit: this.miningHistoryStorageLimit,\n        };\n    }\n\n    _getNumberItem(key: string, defaultValue: number) {\n        const value = this._storage.get(key);\n\n        if (value === null) {\n            return defaultValue;\n        }\n\n        return Number(value);\n    }\n\n    _setOptionalItem(key: string, value?: string) {\n        if (typeof value === 'undefined') {\n            this._storage.delete(key);\n        } else {\n            this._storage.set(key, value);\n        }\n    }\n\n    get ankiConnectUrl() {\n        return this._storage.get(ankiConnectUrlKey) || defaultAnkiConnectUrl;\n    }\n\n    set ankiConnectUrl(url) {\n        this._storage.set(ankiConnectUrlKey, url);\n    }\n\n    get deck() {\n        return this._storage.get(deckKey) ?? undefined;\n    }\n\n    set deck(deck) {\n        this._setOptionalItem(deckKey, deck);\n    }\n\n    get noteType() {\n        return this._storage.get(noteTypeKey) ?? undefined;\n    }\n\n    set noteType(noteType) {\n        this._setOptionalItem(noteTypeKey, noteType);\n    }\n\n    get sentenceField() {\n        return this._storage.get(sentenceFieldKey) ?? undefined;\n    }\n\n    set sentenceField(sentenceField) {\n        this._setOptionalItem(sentenceFieldKey, sentenceField);\n    }\n\n    get definitionField() {\n        return this._storage.get(definitionFieldKey) ?? undefined;\n    }\n\n    set definitionField(definitionField) {\n        this._setOptionalItem(definitionFieldKey, definitionField);\n    }\n\n    get audioField() {\n        return this._storage.get(audioFieldKey) ?? undefined;\n    }\n\n    set audioField(audioField) {\n        this._setOptionalItem(audioFieldKey, audioField);\n    }\n\n    get imageField() {\n        return this._storage.get(imageFieldKey) ?? undefined;\n    }\n\n    set imageField(imageField) {\n        this._setOptionalItem(imageFieldKey, imageField);\n    }\n\n    get wordField() {\n        return this._storage.get(wordFieldKey) ?? undefined;\n    }\n\n    set wordField(wordField) {\n        this._setOptionalItem(wordFieldKey, wordField);\n    }\n\n    get sourceField() {\n        return this._storage.get(sourceFieldKey) ?? undefined;\n    }\n\n    set sourceField(sourceField) {\n        this._setOptionalItem(sourceFieldKey, sourceField);\n    }\n\n    get urlField() {\n        return this._storage.get(urlFieldKey) ?? undefined;\n    }\n\n    set urlField(urlField) {\n        this._setOptionalItem(urlFieldKey, urlField);\n    }\n\n    get customAnkiFields() {\n        const ankiFieldsString = this._storage.get(customAnkiFieldsKey);\n\n        if (ankiFieldsString) {\n            return JSON.parse(ankiFieldsString);\n        }\n\n        return {};\n    }\n\n    set customAnkiFields(customAnkiFields) {\n        this._storage.set(customAnkiFieldsKey, JSON.stringify(customAnkiFields));\n    }\n\n    get tags() {\n        if (typeof this._tags !== 'undefined') {\n            return this._tags;\n        }\n\n        const tagsString = this._storage.get(tagsKey);\n\n        if (tagsString) {\n            this._tags = JSON.parse(tagsString) as string[];\n            return this._tags;\n        }\n\n        return [];\n    }\n\n    set tags(tags) {\n        this._storage.set(tagsKey, JSON.stringify(tags));\n        this._tags = undefined;\n    }\n\n    get subtitleColor() {\n        return this._storage.get(subtitleColorKey) || defaultSubtitleColor;\n    }\n\n    set subtitleColor(subtitleColor) {\n        this._storage.set(subtitleColorKey, subtitleColor);\n    }\n\n    get subtitleSize() {\n        return this._getNumberItem(subtitleSizeKey, defaultSubtitleSize);\n    }\n\n    set subtitleSize(subtitleSize) {\n        this._storage.set(subtitleSizeKey, String(subtitleSize));\n    }\n\n    get subtitleOutlineColor() {\n        return this._storage.get(subtitleOutlineColorKey) || defaultSubtitleOutlineColor;\n    }\n\n    set subtitleOutlineColor(subtitleOutlineColor) {\n        this._storage.set(subtitleOutlineColorKey, subtitleOutlineColor);\n    }\n\n    get subtitleOutlineThickness() {\n        return this._getNumberItem(subtitleOutlineThicknessKey, defaultSubtitleOutlineThickness);\n    }\n\n    set subtitleOutlineThickness(subtitleOutlineThickness) {\n        this._storage.set(subtitleOutlineThicknessKey, String(subtitleOutlineThickness));\n    }\n\n    get subtitleBackgroundColor() {\n        return this._storage.get(subtitleBackgroundColorKey) || defaultSubtitleBackgroundColor;\n    }\n\n    set subtitleBackgroundColor(subtitleBackgroundColor) {\n        this._storage.set(subtitleBackgroundColorKey, subtitleBackgroundColor);\n    }\n\n    get subtitleBackgroundOpacity() {\n        return this._getNumberItem(subtitleBackgroundOpacityKey, defaultSubtitleBackgroundOpacity);\n    }\n\n    set subtitleBackgroundOpacity(subtitleBackgroundOpacity) {\n        this._storage.set(subtitleBackgroundOpacityKey, String(subtitleBackgroundOpacity));\n    }\n\n    get subtitleFontFamily() {\n        return this._storage.get(subtitleFontFamilyKey) || defaultSubtitleFontFamily;\n    }\n\n    set subtitleFontFamily(subtitleFontFamily) {\n        this._storage.set(subtitleFontFamilyKey, subtitleFontFamily);\n    }\n\n    get subtitlePreview() {\n        return this._storage.get(subtitlePreviewKey) || defaultSubtitlePreview;\n    }\n\n    set subtitlePreview(subtitlePreview) {\n        this._storage.set(subtitlePreviewKey, subtitlePreview);\n    }\n\n    get imageBasedSubtitleScaleFactor() {\n        return this._getNumberItem(imageBasedSubtitleScaleFactorKey, 1);\n    }\n\n    set imageBasedSubtitleScaleFactor(imageBasedSubtitleScaleFactor: number) {\n        this._storage.set(imageBasedSubtitleScaleFactorKey, String(imageBasedSubtitleScaleFactor));\n    }\n\n    get preferMp3(): boolean {\n        const value = this._storage.get(preferMp3Key);\n\n        if (value !== null) {\n            if (value === 'true') {\n                return true;\n            }\n\n            return false;\n        }\n\n        return defaultPreferMp3;\n    }\n\n    set preferMp3(preferMp3) {\n        this._storage.set(preferMp3Key, String(preferMp3));\n    }\n\n    get themeType() {\n        const themeType = this._storage.get(themeTypeKey) as 'dark' | 'light' | null;\n\n        if (themeType === null) {\n            return 'dark';\n        }\n\n        return themeType;\n    }\n\n    set themeType(themeType: 'dark' | 'light') {\n        this._storage.set(themeTypeKey, themeType);\n    }\n\n    get audioPaddingStart() {\n        const value = this._storage.get(audioPaddingStartKey);\n\n        if (!value) {\n            return defaultAudioPaddingStart;\n        }\n\n        return Number(value);\n    }\n\n    set audioPaddingStart(audioPaddingStart) {\n        this._storage.set(audioPaddingStartKey, String(audioPaddingStart));\n    }\n\n    get audioPaddingEnd() {\n        return this._getNumberItem(audioPaddingEndKey, defaultAudioPaddingEnd);\n    }\n\n    set audioPaddingEnd(audioPaddingEnd) {\n        this._storage.set(audioPaddingEndKey, String(audioPaddingEnd));\n    }\n\n    get maxImageWidth() {\n        const value = this._storage.get(maxImageWidthKey);\n\n        if (!value) {\n            return defaultMaxImageWidth;\n        }\n\n        return Number(value);\n    }\n\n    set maxImageWidth(maxImageWidth) {\n        this._storage.set(maxImageWidthKey, String(maxImageWidth));\n    }\n\n    get maxImageHeight() {\n        return this._getNumberItem(maxImageHeightKey, defaultMaxImageHeight);\n    }\n\n    set maxImageHeight(maxImageHeight) {\n        this._storage.set(maxImageHeightKey, String(maxImageHeight));\n    }\n\n    get surroundingSubtitlesCountRadius() {\n        return this._getNumberItem(surroundingSubtitlesCountRadiusKey, defaultSurroundingSubtitlesCountRadius);\n    }\n\n    set surroundingSubtitlesCountRadius(surroundingSubtitlesCountRadius) {\n        this._storage.set(surroundingSubtitlesCountRadiusKey, String(surroundingSubtitlesCountRadius));\n    }\n\n    get surroundingSubtitlesTimeRadius() {\n        return this._getNumberItem(surroundingSubtitlesTimeRadiusKey, defaultSurroundingSubtitlesTimeRadius);\n    }\n\n    set surroundingSubtitlesTimeRadius(surroundingSubtitlesTimeRadius) {\n        this._storage.set(surroundingSubtitlesTimeRadiusKey, String(surroundingSubtitlesTimeRadius));\n    }\n\n    get copyToClipboardOnMine() {\n        return this._storage.get(copyToClipboardOnMineKey) === 'true' || false;\n    }\n\n    set copyToClipboardOnMine(copyToClipboardOnMine) {\n        this._storage.set(copyToClipboardOnMineKey, String(copyToClipboardOnMine));\n    }\n\n    get autoPausePreference() {\n        return this._getNumberItem(autoPausePreferenceKey, defaultAutoPausePreference);\n    }\n\n    set autoPausePreference(autoPausePreference) {\n        this._storage.set(autoPausePreferenceKey, String(autoPausePreference));\n    }\n\n    get keyBindSet() {\n        if (this._keyBindSet !== undefined) {\n            return this._keyBindSet;\n        }\n\n        let serialized = this._storage.get(keyBindSetKey);\n\n        if (serialized === null) {\n            this._keyBindSet = defaultKeyBindSet;\n            return defaultKeyBindSet;\n        }\n\n        const keyBindSet = JSON.parse(serialized);\n\n        for (const key of Object.keys(defaultKeyBindSet)) {\n            const keyBindName = key as KeyBindName;\n\n            if (keyBindSet[keyBindName] === undefined) {\n                keyBindSet[keyBindName] = defaultKeyBindSet[keyBindName];\n            }\n        }\n\n        this._keyBindSet = keyBindSet;\n        return keyBindSet as KeyBindSet;\n    }\n\n    set keyBindSet(keyBindSet) {\n        this._storage.set(keyBindSetKey, JSON.stringify(keyBindSet));\n        this._keyBindSet = undefined;\n    }\n\n    get rememberSubtitleOffset() {\n        return this._storage.get(rememberSubtitleOffsetKey) === 'true' || false;\n    }\n\n    set rememberSubtitleOffset(rememberSubtitleOffset) {\n        this._storage.set(rememberSubtitleOffsetKey, String(rememberSubtitleOffset));\n    }\n\n    get autoCopyCurrentSubtitle() {\n        return this._storage.get(autoCopyCurrentSubtitleKey) === 'true' || false;\n    }\n\n    set autoCopyCurrentSubtitle(autoCopyCurrentSubtitle) {\n        this._storage.set(autoCopyCurrentSubtitleKey, String(autoCopyCurrentSubtitle));\n    }\n\n    get subtitleRegexFilter() {\n        return this._storage.get(subtitleRegexFilterKey) ?? '';\n    }\n\n    set subtitleRegexFilter(subtitleRegexFilter: string) {\n        this._storage.set(subtitleRegexFilterKey, subtitleRegexFilter);\n    }\n\n    get subtitleRegexFilterTextReplacement() {\n        return this._storage.get(subtitleRegexFilterTextReplacementKey) ?? '';\n    }\n\n    set subtitleRegexFilterTextReplacement(subtitleRegexFilterTextReplacement: string) {\n        this._storage.set(subtitleRegexFilterTextReplacementKey, subtitleRegexFilterTextReplacement);\n    }\n\n    get miningHistoryStorageLimit() {\n        return this._getNumberItem(miningHistoryStorageLimitKey, defaultMiningHistoryStorageLimit);\n    }\n\n    set miningHistoryStorageLimit(miningHistoryStorageLimit: number) {\n        this._storage.set(miningHistoryStorageLimitKey, String(miningHistoryStorageLimit));\n    }\n}\n","import {\n    AlertMessage,\n    AnkiDialogRequestFromVideoMessage,\n    AnkiSettings,\n    AnkiSettingsToVideoMessage,\n    AppBarToggleMessageToVideoMessage,\n    AudioTrackModel,\n    AudioTrackSelectedFromVideoMessage,\n    AudioTrackSelectedToVideoMessage,\n    CopyMessage,\n    CurrentTimeToVideoMessage,\n    FullscreenToggleMessageToVideoMessage,\n    HideSubtitlePlayerToggleToVideoMessage,\n    MiscSettings,\n    MiscSettingsToVideoMessage,\n    OffsetFromVideoMessage,\n    OffsetToVideoMessage,\n    PauseFromVideoMessage,\n    PlaybackRateFromVideoMessage,\n    PlaybackRateToVideoMessage,\n    PlayFromVideoMessage,\n    PlayMode,\n    PlayModeMessage,\n    PostMineAction,\n    ReadyFromVideoMessage,\n    ReadyStateFromVideoMessage,\n    ReadyToVideoMessage,\n    SubtitleModel,\n    SubtitleSettings,\n    SubtitleSettingsToVideoMessage,\n    SubtitlesToVideoMessage,\n    ToggleSubtitleTrackInListFromVideoMessage,\n} from '@project/common';\n\nexport default class PlayerChannel {\n    private channel?: BroadcastChannel;\n    private readyCallbacks: ((duration: number, videoFileName?: string) => void)[];\n    private playCallbacks: (() => void)[];\n    private pauseCallbacks: (() => void)[];\n    private currentTimeCallbacks: ((currentTime: number) => void)[];\n    private audioTrackSelectedCallbacks: ((id: string) => void)[];\n    private closeCallbacks: (() => void)[];\n    private subtitlesCallbacks: ((subtitles: SubtitleModel[]) => void)[];\n    private offsetCallbacks: ((offset: number) => void)[];\n    private playbackRateCallbacks: ((playbackRate: number) => void)[];\n    private playModeCallbacks: ((playMode: PlayMode) => void)[];\n    private hideSubtitlePlayerToggleCallbacks: ((hidden: boolean) => void)[];\n    private appBarToggleCallbacks: ((hidden: boolean) => void)[];\n    private fullscreenToggleCallbacks: ((hidden: boolean) => void)[];\n    private subtitleSettingsCallbacks: ((subtitleSettings: SubtitleSettings) => void)[];\n    private miscSettingsCallbacks: ((miscSettings: MiscSettings) => void)[];\n    private ankiSettingsCallbacks: ((ankiSettings: AnkiSettings) => void)[];\n    private alertCallbacks: ((message: string, severity: string) => void)[];\n\n    constructor(channel: string) {\n        this.channel = new BroadcastChannel(channel);\n        this.playCallbacks = [];\n        this.pauseCallbacks = [];\n        this.currentTimeCallbacks = [];\n        this.audioTrackSelectedCallbacks = [];\n        this.closeCallbacks = [];\n        this.readyCallbacks = [];\n        this.subtitlesCallbacks = [];\n        this.offsetCallbacks = [];\n        this.playbackRateCallbacks = [];\n        this.playModeCallbacks = [];\n        this.hideSubtitlePlayerToggleCallbacks = [];\n        this.appBarToggleCallbacks = [];\n        this.fullscreenToggleCallbacks = [];\n        this.subtitleSettingsCallbacks = [];\n        this.miscSettingsCallbacks = [];\n        this.ankiSettingsCallbacks = [];\n        this.alertCallbacks = [];\n\n        const that = this;\n\n        this.channel.onmessage = (event) => {\n            switch (event.data.command) {\n                case 'init':\n                    // ignore, this is for the chrome extension\n                    break;\n                case 'ready':\n                    const readyMessage = event.data as ReadyToVideoMessage;\n\n                    for (let callback of that.readyCallbacks) {\n                        callback(readyMessage.duration, readyMessage.videoFileName);\n                    }\n                    break;\n                case 'play':\n                    for (let callback of that.playCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'pause':\n                    for (let callback of that.pauseCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'currentTime':\n                    const currentTimeMessage = event.data as CurrentTimeToVideoMessage;\n\n                    for (let callback of that.currentTimeCallbacks) {\n                        callback(currentTimeMessage.value);\n                    }\n                    break;\n                case 'audioTrackSelected':\n                    const audioTrackSelectedMessage = event.data as AudioTrackSelectedToVideoMessage;\n\n                    for (let callback of that.audioTrackSelectedCallbacks) {\n                        callback(audioTrackSelectedMessage.id);\n                    }\n                    break;\n                case 'close':\n                    for (let callback of that.closeCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'subtitles':\n                    const subtitlesMessage = event.data as SubtitlesToVideoMessage;\n\n                    for (let callback of that.subtitlesCallbacks) {\n                        callback(subtitlesMessage.value);\n                    }\n                    break;\n                case 'offset':\n                    const offsetMessage = event.data as OffsetToVideoMessage;\n\n                    for (const callback of that.offsetCallbacks) {\n                        callback(offsetMessage.value);\n                    }\n                    break;\n                case 'playbackRate':\n                    const playbackRateMessage = event.data as PlaybackRateToVideoMessage;\n\n                    for (const callback of that.playbackRateCallbacks) {\n                        callback(playbackRateMessage.value);\n                    }\n                    break;\n                case 'subtitleSettings':\n                    const subtitleSettingsMessage = event.data as SubtitleSettingsToVideoMessage;\n\n                    for (let callback of that.subtitleSettingsCallbacks) {\n                        callback(subtitleSettingsMessage.value);\n                    }\n                    break;\n                case 'playMode':\n                    const playModeMessage = event.data as PlayModeMessage;\n\n                    for (let callback of that.playModeCallbacks) {\n                        callback(playModeMessage.playMode);\n                    }\n                    break;\n                case 'hideSubtitlePlayerToggle':\n                    const hideSubtitlePlayerToggleMessage = event.data as HideSubtitlePlayerToggleToVideoMessage;\n\n                    for (let callback of that.hideSubtitlePlayerToggleCallbacks) {\n                        callback(hideSubtitlePlayerToggleMessage.value);\n                    }\n                    break;\n                case 'appBarToggle':\n                    const appBarToggleMessage = event.data as AppBarToggleMessageToVideoMessage;\n\n                    for (let callback of that.appBarToggleCallbacks) {\n                        callback(appBarToggleMessage.value);\n                    }\n                    break;\n                case 'fullscreenToggle':\n                    const fullscreenToggleMessage = event.data as FullscreenToggleMessageToVideoMessage;\n\n                    for (const callback of that.fullscreenToggleCallbacks) {\n                        callback(fullscreenToggleMessage.value);\n                    }\n                    break;\n                case 'ankiSettings':\n                    const ankiSettingsMessage = event.data as AnkiSettingsToVideoMessage;\n\n                    for (let callback of that.ankiSettingsCallbacks) {\n                        callback(ankiSettingsMessage.value);\n                    }\n                    break;\n                case 'miscSettings':\n                    const miscSettingsMessage = event.data as MiscSettingsToVideoMessage;\n\n                    for (let callback of that.miscSettingsCallbacks) {\n                        callback(miscSettingsMessage.value);\n                    }\n                    break;\n                case 'alert':\n                    const alertMessage = event.data as AlertMessage;\n\n                    for (const callback of that.alertCallbacks) {\n                        callback(alertMessage.message, alertMessage.severity);\n                    }\n                    break;\n                default:\n                    console.error('Unrecognized event ' + event.data.command);\n            }\n        };\n    }\n\n    set currentTime(value: number) {\n        this.channel?.postMessage({ command: 'currentTime', value: value, echo: true });\n    }\n\n    onPlay(callback: () => void) {\n        this.playCallbacks.push(callback);\n    }\n\n    onPause(callback: () => void) {\n        this.pauseCallbacks.push(callback);\n    }\n\n    onCurrentTime(callback: (currentTime: number) => void) {\n        this.currentTimeCallbacks.push(callback);\n    }\n\n    onAudioTrackSelected(callback: (id: string) => void) {\n        this.audioTrackSelectedCallbacks.push(callback);\n    }\n\n    onClose(callback: () => void) {\n        this.closeCallbacks.push(callback);\n    }\n\n    onReady(callback: (duration: number, videoFileName?: string) => void) {\n        this.readyCallbacks.push(callback);\n    }\n\n    onSubtitles(callback: (subtitles: SubtitleModel[]) => void) {\n        this.subtitlesCallbacks.push(callback);\n    }\n\n    onOffset(callback: (offset: number) => void) {\n        this.offsetCallbacks.push(callback);\n    }\n\n    onPlaybackRate(callback: (playbackRate: number) => void) {\n        this.playbackRateCallbacks.push(callback);\n    }\n\n    onPlayMode(callback: (playMode: PlayMode) => void) {\n        this.playModeCallbacks.push(callback);\n    }\n\n    onHideSubtitlePlayerToggle(callback: (hidden: boolean) => void) {\n        this.hideSubtitlePlayerToggleCallbacks.push(callback);\n    }\n\n    onAppBarToggle(callback: (hidden: boolean) => void) {\n        this.appBarToggleCallbacks.push(callback);\n    }\n\n    onFullscreenToggle(callback: (fullscreen: boolean) => void) {\n        this.fullscreenToggleCallbacks.push(callback);\n    }\n\n    onSubtitleSettings(callback: (subtitleSettings: SubtitleSettings) => void) {\n        this.subtitleSettingsCallbacks.push(callback);\n    }\n\n    onMiscSettings(callback: (miscSettings: MiscSettings) => void) {\n        this.miscSettingsCallbacks.push(callback);\n    }\n\n    onAnkiSettings(callback: (ankiSettings: AnkiSettings) => void) {\n        this.ankiSettingsCallbacks.push(callback);\n    }\n\n    onAlert(callback: (message: string, severity: string) => void) {\n        this.alertCallbacks.push(callback);\n    }\n\n    ready(\n        duration: number,\n        paused: boolean,\n        playbackRate: number,\n        audioTracks: AudioTrackModel[] | undefined,\n        selectedAudioTrack: string | undefined\n    ) {\n        const message: ReadyFromVideoMessage = {\n            command: 'ready',\n            duration: duration,\n            paused: paused,\n            currentTime: 0,\n            audioTracks: audioTracks,\n            selectedAudioTrack: selectedAudioTrack,\n            playbackRate: playbackRate,\n        };\n\n        this.channel?.postMessage(message);\n    }\n\n    readyState(readyState: number) {\n        const message: ReadyStateFromVideoMessage = { command: 'readyState', value: readyState };\n        this.channel?.postMessage(message);\n    }\n\n    play() {\n        const message: PlayFromVideoMessage = { command: 'play', echo: true };\n        this.channel?.postMessage(message);\n    }\n\n    pause() {\n        const message: PauseFromVideoMessage = { command: 'pause', echo: true };\n        this.channel?.postMessage(message);\n    }\n\n    audioTrackSelected(id: string) {\n        const message: AudioTrackSelectedFromVideoMessage = { command: 'audioTrackSelected', id: id };\n        this.channel?.postMessage(message);\n    }\n\n    offset(offset: number) {\n        const message: OffsetFromVideoMessage = { command: 'offset', value: offset };\n        this.channel?.postMessage(message);\n    }\n\n    playbackRate(playbackRate: number) {\n        const message: PlaybackRateFromVideoMessage = { command: 'playbackRate', value: playbackRate, echo: true };\n        this.channel?.postMessage(message);\n    }\n\n    popOutToggle() {\n        this.channel?.postMessage({ command: 'popOutToggle' });\n    }\n\n    copy(\n        subtitle: SubtitleModel,\n        surroundingSubtitles: SubtitleModel[],\n        postMineAction: PostMineAction,\n        preventDuplicate?: boolean\n    ) {\n        const message: CopyMessage = {\n            command: 'copy',\n            subtitle: subtitle,\n            surroundingSubtitles: surroundingSubtitles,\n            preventDuplicate: preventDuplicate,\n            postMineAction: postMineAction,\n        };\n\n        this.channel?.postMessage(message);\n    }\n\n    playMode(playMode: PlayMode) {\n        this.channel?.postMessage({ command: 'playMode', playMode: playMode });\n    }\n\n    hideSubtitlePlayerToggle() {\n        this.channel?.postMessage({ command: 'hideSubtitlePlayerToggle' });\n    }\n\n    appBarToggle() {\n        this.channel?.postMessage({ command: 'appBarToggle' });\n    }\n\n    fullscreenToggle() {\n        this.channel?.postMessage({ command: 'fullscreenToggle' });\n    }\n\n    ankiDialogRequest(forwardToVideo: boolean) {\n        const message: AnkiDialogRequestFromVideoMessage = {\n            command: 'ankiDialogRequest',\n        };\n        this.channel?.postMessage(message);\n    }\n\n    toggleSubtitleTrackInList(track: number) {\n        const message: ToggleSubtitleTrackInListFromVideoMessage = {\n            command: 'toggleSubtitleTrackInList',\n            track: track,\n        };\n        this.channel?.postMessage(message);\n    }\n\n    close() {\n        if (this.channel) {\n            this.channel.postMessage({ command: 'exit' });\n            this.channel.close();\n            this.channel = undefined;\n            this.playCallbacks = [];\n            this.pauseCallbacks = [];\n            this.currentTimeCallbacks = [];\n            this.audioTrackSelectedCallbacks = [];\n            this.closeCallbacks = [];\n            this.readyCallbacks = [];\n            this.subtitlesCallbacks = [];\n            this.offsetCallbacks = [];\n            this.playbackRateCallbacks = [];\n            this.playModeCallbacks = [];\n            this.hideSubtitlePlayerToggleCallbacks = [];\n            this.appBarToggleCallbacks = [];\n            this.fullscreenToggleCallbacks = [];\n            this.subtitleSettingsCallbacks = [];\n            this.miscSettingsCallbacks = [];\n            this.ankiSettingsCallbacks = [];\n            this.alertCallbacks = [];\n        }\n    }\n}\n","import { CopySubtitleMessage, DefaultKeyBinder, KeyBinder, PostMineAction, SubtitleModel } from '@project/common';\nimport ChromeExtension, { ExtensionMessage } from './ChromeExtension';\n\nexport default class AppKeyBinder implements KeyBinder {\n    private readonly defaultKeyBinder: DefaultKeyBinder;\n    private readonly extension: ChromeExtension;\n    private readonly copyHandlers: ((event: KeyboardEvent) => void)[] = [];\n    private readonly ankiExportHandlers: ((event: KeyboardEvent) => void)[] = [];\n    private readonly updateLastCardHandlers: ((event: KeyboardEvent) => void)[] = [];\n    private readonly onExtensionMessage: (message: ExtensionMessage) => void;\n\n    constructor(keyBinder: DefaultKeyBinder, extension: ChromeExtension) {\n        this.defaultKeyBinder = keyBinder;\n        this.extension = extension;\n\n        this.onExtensionMessage = (message: ExtensionMessage) => {\n            if (message.data.command === 'copy-subtitle') {\n                const command = message.data as CopySubtitleMessage;\n                let handlers: ((event: KeyboardEvent) => void)[] | undefined;\n\n                switch (command.postMineAction) {\n                    case PostMineAction.none:\n                        handlers = this.copyHandlers;\n                        break;\n                    case PostMineAction.showAnkiDialog:\n                        handlers = this.ankiExportHandlers;\n                        break;\n                    case PostMineAction.updateLastCard:\n                        handlers = this.updateLastCardHandlers;\n                        break;\n                    default:\n                        console.error('Unknown post mine action ' + command.postMineAction);\n                }\n\n                for (const h of handlers!) {\n                    h(new KeyboardEvent('mock'));\n                }\n            }\n        };\n        extension.subscribe(this.onExtensionMessage);\n    }\n\n    bindCopy<T extends SubtitleModel = SubtitleModel>(\n        onCopy: (event: KeyboardEvent, subtitle: T) => void,\n        disabledGetter: () => boolean,\n        subtitleGetter: () => T | undefined,\n        useCapture?: boolean | undefined\n    ): () => void {\n        if (this.extension.installed) {\n            const handler = this.defaultKeyBinder.copyHandler(onCopy, disabledGetter, subtitleGetter);\n            this.copyHandlers.push(handler);\n            return () => {\n                this._remove(handler, this.copyHandlers);\n            };\n        }\n\n        return this.defaultKeyBinder.bindCopy(onCopy, disabledGetter, subtitleGetter, useCapture);\n    }\n\n    bindAnkiExport(\n        onAnkiExport: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        if (this.extension.installed) {\n            const handler = this.defaultKeyBinder.ankiExportHandler(onAnkiExport, disabledGetter);\n            this.ankiExportHandlers.push(handler);\n            return () => {\n                this._remove(handler, this.ankiExportHandlers);\n            };\n        }\n\n        return this.defaultKeyBinder.bindAnkiExport(onAnkiExport, disabledGetter, useCapture);\n    }\n\n    bindUpdateLastCard(\n        onUpdateLastCard: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        if (this.extension.installed) {\n            const handler = this.defaultKeyBinder.updateLastCardHandler(onUpdateLastCard, disabledGetter);\n            this.updateLastCardHandlers.push(handler);\n            return () => {\n                this._remove(handler, this.updateLastCardHandlers);\n            };\n        }\n\n        return this.defaultKeyBinder.bindUpdateLastCard(onUpdateLastCard, disabledGetter, useCapture);\n    }\n\n    private _remove(callback: (event: KeyboardEvent) => void, list: ((event: KeyboardEvent) => void)[]) {\n        for (let i = list.length - 1; i >= 0; --i) {\n            if (callback === list[i]) {\n                list.splice(i, 1);\n                break;\n            }\n        }\n    }\n\n    bindSeekToSubtitle(\n        onSeekToSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindSeekToSubtitle(\n            onSeekToSubtitle,\n            disabledGetter,\n            timeGetter,\n            subtitlesGetter,\n            useCapture\n        );\n    }\n\n    bindSeekToBeginningOfCurrentSubtitle(\n        onSeekToBeginningOfCurrentSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindSeekToBeginningOfCurrentSubtitle(\n            onSeekToBeginningOfCurrentSubtitle,\n            disabledGetter,\n            timeGetter,\n            subtitlesGetter,\n            useCapture\n        );\n    }\n\n    bindSeekBackwardOrForward(\n        onSeekBackwardOrForward: (event: KeyboardEvent, forward: boolean) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindSeekBackwardOrForward(onSeekBackwardOrForward, disabledGetter, useCapture);\n    }\n\n    bindOffsetToSubtitle(\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindOffsetToSubtitle(\n            onOffsetChange,\n            disabledGetter,\n            timeGetter,\n            subtitlesGetter,\n            useCapture\n        );\n    }\n\n    bindAdjustOffset(\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\n        disabledGetter: () => boolean,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindAdjustOffset(onOffsetChange, disabledGetter, subtitlesGetter, useCapture);\n    }\n\n    bindResetOffet(\n        onResetOffset: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindResetOffet(onResetOffset, disabledGetter, useCapture);\n    }\n\n    bindAdjustPlaybackRate(\n        onAdjustPlaybackRate: (event: KeyboardEvent, increase: boolean) => void,\n        disabledGetter: () => boolean,\n        useCapture = false\n    ) {\n        return this.defaultKeyBinder.bindAdjustPlaybackRate(onAdjustPlaybackRate, disabledGetter, useCapture);\n    }\n\n    bindToggleSubtitles(\n        onToggleSubtitles: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindToggleSubtitles(onToggleSubtitles, disabledGetter, useCapture);\n    }\n\n    bindToggleSubtitleTrackInVideo(\n        onToggleSubtitleTrack: (event: KeyboardEvent, extra: any) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindToggleSubtitleTrackInVideo(onToggleSubtitleTrack, disabledGetter, useCapture);\n    }\n\n    bindToggleSubtitleTrackInList(\n        onToggleSubtitleTrackInList: (event: KeyboardEvent, extra: any) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindToggleSubtitleTrackInList(\n            onToggleSubtitleTrackInList,\n            disabledGetter,\n            useCapture\n        );\n    }\n\n    bindPlay(\n        onPlay: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindPlay(onPlay, disabledGetter, useCapture);\n    }\n\n    bindAutoPause(\n        onAutoPause: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindAutoPause(onAutoPause, disabledGetter, useCapture);\n    }\n\n    bindCondensedPlayback(\n        onCondensedPlayback: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindCondensedPlayback(onCondensedPlayback, disabledGetter, useCapture);\n    }\n}\n","import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { isMobile } from 'react-device-detect';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useWindowSize } from '../hooks/useWindowSize';\nimport { arrayEquals, computeStyles } from '../services/util';\nimport {\n    surroundingSubtitles,\n    mockSurroundingSubtitles,\n    SubtitleModel,\n    AudioTrackModel,\n    PostMineAction,\n    PlayMode,\n    MiscSettings,\n    SubtitleSettings,\n    DefaultKeyBinder,\n    AnkiSettings,\n    SubtitleCollection,\n    AutoPausePreference,\n    AutoPauseContext,\n} from '@project/common';\nimport { SubtitleTextImage } from '@project/common/components';\nimport Clock from '../services/Clock';\nimport Controls, { Point } from './Controls';\nimport PlayerChannel from '../services/PlayerChannel';\nimport SettingsProvider from '../services/SettingsProvider';\nimport AppKeyBinder from '../services/AppKeyBinder';\nimport ChromeExtension from '../services/ChromeExtension';\nimport PlaybackPreferences from '../services/PlaybackPreferences';\nimport { AnkiDialogFinishedRequest } from './Player';\nimport { Color } from '@material-ui/lab/Alert';\nimport Alert from './Alert';\n\ninterface ExperimentalHTMLVideoElement extends HTMLVideoElement {\n    readonly audioTracks: any;\n}\n\nconst useStyles = makeStyles({\n    root: {\n        position: 'relative',\n        backgroundColor: 'black',\n        height: '100vh',\n        overflow: 'hidden',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    video: {\n        margin: 'auto',\n    },\n    cursorHidden: {\n        cursor: 'none',\n    },\n    subtitleContainer: {\n        position: 'absolute',\n        paddingLeft: 20,\n        paddingRight: 20,\n        bottom: 100,\n        textAlign: 'center',\n        whiteSpace: 'pre-wrap',\n        lineHeight: 'normal',\n    },\n});\n\nfunction notifyReady(\n    element: ExperimentalHTMLVideoElement,\n    playerChannel: PlayerChannel,\n    setAudioTracks: React.Dispatch<React.SetStateAction<AudioTrackModel[] | undefined>>,\n    setSelectedAudioTrack: React.Dispatch<React.SetStateAction<string | undefined>>\n) {\n    if (window.outerWidth && element.videoWidth > 0 && element.videoHeight > 0) {\n        const availWidth = window.screen.availWidth - (window.outerWidth - window.innerWidth);\n        const availHeight = window.screen.availHeight - (window.outerHeight - window.innerHeight);\n        const resizeRatio = Math.min(1, Math.min(availWidth / element.videoWidth, availHeight / element.videoHeight));\n\n        window.resizeTo(\n            resizeRatio * element.videoWidth + (window.outerWidth - window.innerWidth),\n            resizeRatio * element.videoHeight + (window.outerHeight - window.innerHeight)\n        );\n    }\n\n    let tracks: AudioTrackModel[] | undefined;\n    let selectedTrack: string | undefined;\n\n    if (element.audioTracks) {\n        tracks = [];\n\n        for (let t of element.audioTracks) {\n            tracks.push({\n                id: t.id,\n                label: t.label,\n                language: t.language,\n            });\n\n            if (t.enabled) {\n                selectedTrack = t.id;\n            }\n        }\n    } else {\n        tracks = undefined;\n        selectedTrack = undefined;\n    }\n\n    setAudioTracks(tracks);\n    setSelectedAudioTrack(selectedTrack);\n    playerChannel.ready(element.duration, element.paused, element.playbackRate, tracks, selectedTrack);\n}\n\nfunction errorMessage(element: HTMLVideoElement) {\n    let error;\n    switch (element.error?.code) {\n        case 1:\n            error = 'Aborted';\n            break;\n        case 2:\n            error = 'Network error';\n            break;\n        case 3:\n            error = 'Decoding error';\n            break;\n        case 4:\n            error = 'Source not supported';\n            break;\n        default:\n            error = 'Unknown error';\n            break;\n    }\n\n    return error + ': ' + (element.error?.message || '<details missing>');\n}\n\ninterface Props {\n    settingsProvider: SettingsProvider;\n    playbackPreferences: PlaybackPreferences;\n    extension: ChromeExtension;\n    videoFile: string;\n    channel: string;\n    popOut: boolean;\n    ankiDialogFinishedRequest: AnkiDialogFinishedRequest;\n    onAnkiDialogRequest: (\n        videoFileUrl: string,\n        videoFileName: string,\n        selectedAudioTrack: string | undefined,\n        playbackRate: number,\n        subtitle: SubtitleModel,\n        surroundingSubtitles: SubtitleModel[],\n        timestamp: number\n    ) => void;\n    onError: (error: string) => void;\n    onPlayModeChangedViaBind: (oldPlayMode: PlayMode, newPlayMode: PlayMode) => void;\n}\n\ninterface IndexedSubtitleModel extends SubtitleModel {\n    index: number;\n}\n\nexport default function VideoPlayer({\n    settingsProvider,\n    playbackPreferences,\n    extension,\n    videoFile,\n    channel,\n    popOut,\n    ankiDialogFinishedRequest,\n    onAnkiDialogRequest,\n    onError,\n    onPlayModeChangedViaBind,\n}: Props) {\n    const classes = useStyles();\n    const poppingInRef = useRef<boolean>();\n    const videoRef = useRef<ExperimentalHTMLVideoElement>();\n    const [windowWidth, windowHeight] = useWindowSize(true);\n    if (videoRef.current) {\n        videoRef.current.width = windowWidth;\n        videoRef.current.height = windowHeight;\n    }\n    const playerChannel = useMemo(() => new PlayerChannel(channel), [channel]);\n    const [playing, setPlaying] = useState<boolean>(false);\n    const [fullscreen, setFullscreen] = useState<boolean>(false);\n    const playingRef = useRef<boolean>();\n    playingRef.current = playing;\n    const [length, setLength] = useState<number>(0);\n    const [videoFileName, setVideoFileName] = useState<string>();\n    const [offset, setOffset] = useState<number>(0);\n    const [playbackRate, setPlaybackRate] = useState<number>(1);\n    const [audioTracks, setAudioTracks] = useState<AudioTrackModel[]>();\n    const [selectedAudioTrack, setSelectedAudioTrack] = useState<string>();\n    const [, setResumeOnFinishedAnkiDialogRequest] = useState<boolean>(false);\n    const [subtitles, setSubtitles] = useState<IndexedSubtitleModel[]>([]);\n    const subtitleCollection = useMemo<SubtitleCollection<IndexedSubtitleModel>>(\n        () =>\n            new SubtitleCollection<IndexedSubtitleModel>(subtitles, {\n                returnLastShown: false,\n                showingCheckRadiusMs: 150,\n            }),\n        [subtitles]\n    );\n    const [showSubtitles, setShowSubtitles] = useState<IndexedSubtitleModel[]>([]);\n    const [subtitlesEnabled, setSubtitlesEnabled] = useState(true);\n    const [disabledSubtitleTracks, setDisabledSubtitleTracks] = useState<{ [index: number]: boolean }>({});\n    const [playMode, setPlayMode] = useState<PlayMode>(PlayMode.normal);\n    const [subtitlePlayerHidden, setSubtitlePlayerHidden] = useState<boolean>(false);\n    const [appBarHidden, setAppBarHidden] = useState<boolean>(playbackPreferences.theaterMode);\n    const showSubtitlesRef = useRef<IndexedSubtitleModel[]>([]);\n    showSubtitlesRef.current = showSubtitles;\n    const clock = useMemo<Clock>(() => new Clock(), []);\n    const mousePositionRef = useRef<Point>({ x: 0, y: 0 });\n    const [showCursor, setShowCursor] = useState<boolean>(false);\n    const lastMouseMovementTimestamp = useRef<number>(0);\n    const containerRef = useRef<HTMLDivElement>(null);\n    const [miscSettings, setMiscSettings] = useState<MiscSettings>(settingsProvider.miscSettings);\n    const [subtitleSettings, setSubtitleSettings] = useState<SubtitleSettings>(settingsProvider.subtitleSettings);\n    const [ankiSettings, setAnkiSettings] = useState<AnkiSettings>(settingsProvider.ankiSettings);\n    const [alertOpen, setAlertOpen] = useState<boolean>(false);\n    const [alertMessage, setAlertMessage] = useState<string>('');\n    const [alertSeverity, setAlertSeverity] = useState<Color>('info');\n    const autoPauseContext = useMemo(() => {\n        const context = new AutoPauseContext();\n        context.onStartedShowing = () => {\n            if (playMode !== PlayMode.autoPause || miscSettings.autoPausePreference !== AutoPausePreference.atStart) {\n                return;\n            }\n\n            playerChannel.pause();\n        };\n        context.onWillStopShowing = () => {\n            if (playMode !== PlayMode.autoPause || miscSettings.autoPausePreference !== AutoPausePreference.atEnd) {\n                return;\n            }\n\n            playerChannel.pause();\n        };\n        return context;\n    }, [playerChannel, miscSettings, playMode]);\n    const autoPauseContextRef = useRef<AutoPauseContext>();\n    autoPauseContextRef.current = autoPauseContext;\n\n    const keyBinder = useMemo<AppKeyBinder>(\n        () => new AppKeyBinder(new DefaultKeyBinder(miscSettings.keyBindSet), extension),\n        [miscSettings.keyBindSet, extension]\n    );\n    const videoRefCallback = useCallback(\n        (element: HTMLVideoElement) => {\n            if (element) {\n                const videoElement = element as ExperimentalHTMLVideoElement;\n                videoRef.current = videoElement;\n\n                if (videoElement.readyState === 4) {\n                    notifyReady(videoElement, playerChannel, setAudioTracks, setSelectedAudioTrack);\n                } else {\n                    videoElement.onloadeddata = (event) => {\n                        notifyReady(videoElement, playerChannel, setAudioTracks, setSelectedAudioTrack);\n                    };\n                }\n\n                videoElement.oncanplay = (event) => {\n                    playerChannel.readyState(4);\n\n                    if (playingRef.current) {\n                        clock.start();\n                    }\n                };\n\n                videoElement.ontimeupdate = (event) => clock.setTime(element.currentTime * 1000);\n\n                videoElement.onerror = (event) => onError(errorMessage(element));\n            }\n        },\n        [clock, playerChannel, onError]\n    );\n\n    function selectAudioTrack(id: string) {\n        const audioTracks = videoRef.current?.audioTracks;\n\n        if (!audioTracks) {\n            return;\n        }\n\n        // @ts-ignore\n        for (const t of audioTracks) {\n            if (t.id === id) {\n                t.enabled = true;\n            } else {\n                t.enabled = false;\n            }\n        }\n    }\n\n    const updateSubtitlesWithOffset = useCallback((offset: number) => {\n        setOffset(offset);\n        setSubtitles((subtitles) =>\n            subtitles.map((s, i) => ({\n                text: s.text,\n                textImage: s.textImage,\n                start: s.originalStart + offset,\n                originalStart: s.originalStart,\n                end: s.originalEnd + offset,\n                originalEnd: s.originalEnd,\n                track: s.track,\n                index: i,\n            }))\n        );\n    }, []);\n\n    const updatePlaybackRate = useCallback(\n        (playbackRate: number, forwardToPlayer: boolean) => {\n            if (videoRef.current) {\n                videoRef.current.playbackRate = playbackRate;\n                clock.rate = playbackRate;\n                setPlaybackRate(playbackRate);\n\n                if (forwardToPlayer) {\n                    playerChannel.playbackRate(playbackRate);\n                }\n            }\n        },\n        [playerChannel, clock]\n    );\n\n    useEffect(() => {\n        playerChannel.onReady((duration, videoFileName) => {\n            setLength(duration);\n            setVideoFileName(videoFileName);\n        });\n\n        playerChannel.onPlay(async () => {\n            await videoRef.current?.play();\n            clock.start();\n            setPlaying(true);\n        });\n\n        playerChannel.onPause(() => {\n            videoRef.current?.pause();\n            clock.stop();\n            setPlaying(false);\n        });\n\n        playerChannel.onCurrentTime((currentTime) => {\n            if (videoRef.current) {\n                videoRef.current.currentTime = currentTime;\n            }\n\n            if (videoRef.current?.readyState === 4) {\n                playerChannel.readyState(4);\n            }\n\n            clock.stop();\n            clock.setTime(currentTime * 1000);\n            autoPauseContextRef.current?.clear();\n        });\n\n        playerChannel.onAudioTrackSelected((id) => {\n            selectAudioTrack(id);\n            setSelectedAudioTrack(id);\n            playerChannel.audioTrackSelected(id);\n        });\n\n        playerChannel.onClose(() => {\n            playerChannel.close();\n            window.close();\n        });\n\n        playerChannel.onSubtitles((subtitles) => {\n            setSubtitles(subtitles.map((s, i) => ({ ...s, index: i })));\n\n            if (subtitles && subtitles.length > 0) {\n                const s = subtitles[0];\n                const offset = s.start - s.originalStart;\n                setOffset(offset);\n            }\n\n            autoPauseContextRef.current?.clear();\n        });\n\n        playerChannel.onPlayMode((playMode) => setPlayMode(playMode));\n        playerChannel.onHideSubtitlePlayerToggle((hidden) => setSubtitlePlayerHidden(hidden));\n        playerChannel.onAppBarToggle((hidden) => setAppBarHidden(hidden));\n        playerChannel.onFullscreenToggle((fullscreen) => setFullscreen(fullscreen));\n        playerChannel.onSubtitleSettings(setSubtitleSettings);\n        playerChannel.onMiscSettings(setMiscSettings);\n        playerChannel.onAnkiSettings(setAnkiSettings);\n        playerChannel.onOffset(updateSubtitlesWithOffset);\n        playerChannel.onPlaybackRate((playbackRate) => {\n            updatePlaybackRate(playbackRate, false);\n        });\n        playerChannel.onAlert((message, severity) => {\n            if (popOut) {\n                setAlertOpen(true);\n                setAlertMessage(message);\n                setAlertSeverity(severity as Color);\n            }\n        });\n\n        window.onbeforeunload = (e) => {\n            if (!poppingInRef.current) {\n                playerChannel.close();\n            }\n        };\n\n        return () => playerChannel.close();\n    }, [clock, playerChannel, updateSubtitlesWithOffset, updatePlaybackRate, popOut]);\n\n    const handlePlay = useCallback(() => {\n        if (videoRef.current) {\n            playerChannel.play();\n        }\n    }, [playerChannel]);\n\n    const handlePause = useCallback(() => playerChannel.pause(), [playerChannel]);\n\n    const handleSeek = useCallback(\n        (progress: number) => {\n            if (playingRef.current) {\n                clock.stop();\n            }\n\n            const time = progress * length;\n            playerChannel.currentTime = time / 1000;\n        },\n        [length, clock, playerChannel]\n    );\n\n    function handleMouseMove(e: React.MouseEvent<HTMLDivElement>) {\n        lastMouseMovementTimestamp.current = Date.now();\n\n        if (!containerRef.current) {\n            return;\n        }\n\n        var bounds = containerRef.current.getBoundingClientRect();\n        mousePositionRef.current.x = e.clientX - bounds.left;\n        mousePositionRef.current.y = e.clientY - bounds.top;\n    }\n\n    const handleAudioTrackSelected = useCallback(\n        (id: string) => {\n            if (playingRef.current) {\n                clock.stop();\n                playerChannel.pause();\n            }\n\n            selectAudioTrack(id);\n            setSelectedAudioTrack(id);\n            playerChannel.currentTime = 0;\n            playerChannel.audioTrackSelected(id);\n        },\n        [playerChannel, clock]\n    );\n\n    useEffect(() => {\n        if (!subtitles || subtitles.length === 0) {\n            return;\n        }\n\n        const interval = setInterval(() => {\n            const now = clock.time(length);\n            let showSubtitles = [];\n            const slice = subtitleCollection.subtitlesAt(now);\n\n            for (const s of slice.showing) {\n                if (!disabledSubtitleTracks[s.track]) {\n                    showSubtitles.push(s);\n                }\n            }\n\n            if (slice.startedShowing && !disabledSubtitleTracks[slice.startedShowing.track]) {\n                autoPauseContext.startedShowing(slice.startedShowing);\n            }\n\n            if (slice.willStopShowing && !disabledSubtitleTracks[slice.willStopShowing.track]) {\n                autoPauseContext.willStopShowing(slice.willStopShowing);\n            }\n\n            showSubtitles = showSubtitles.sort((s1, s2) => s1.track - s2.track);\n\n            if (!arrayEquals(showSubtitles, showSubtitlesRef.current, (s1, s2) => s1.index === s2.index)) {\n                setShowSubtitles(showSubtitles);\n                if (showSubtitles.length > 0 && miscSettings.autoCopyCurrentSubtitle && document.hasFocus()) {\n                    navigator.clipboard.writeText(showSubtitles.map((s) => s.text).join('\\n')).catch((e) => {\n                        // ignore\n                    });\n                }\n            }\n        }, 100);\n\n        return () => clearTimeout(interval);\n    }, [\n        subtitleCollection,\n        playerChannel,\n        subtitles,\n        disabledSubtitleTracks,\n        clock,\n        length,\n        autoPauseContext,\n        miscSettings,\n    ]);\n\n    const handleOffsetChange = useCallback(\n        (offset: number) => {\n            updateSubtitlesWithOffset(offset);\n            playerChannel.offset(offset);\n        },\n        [playerChannel, updateSubtitlesWithOffset]\n    );\n\n    const handlePlaybackRateChange = useCallback(\n        (playbackRate: number) => {\n            updatePlaybackRate(playbackRate, true);\n        },\n        [updatePlaybackRate]\n    );\n\n    useEffect(() => {\n        return keyBinder.bindSeekToSubtitle(\n            (event, subtitle) => {\n                event.stopPropagation();\n                event.preventDefault();\n                playerChannel.currentTime = subtitle.start / 1000;\n            },\n            () => !videoRef.current,\n            () => clock.time(length),\n            () => subtitles\n        );\n    }, [keyBinder, playerChannel, subtitles, length, clock]);\n\n    useEffect(() => {\n        return keyBinder.bindSeekToBeginningOfCurrentSubtitle(\n            (event, subtitle) => {\n                event.stopPropagation();\n                event.preventDefault();\n                playerChannel.currentTime = subtitle.start / 1000;\n            },\n            () => !videoRef.current,\n            () => clock.time(length),\n            () => subtitles\n        );\n    }, [keyBinder, playerChannel, subtitles, length, clock]);\n\n    useEffect(() => {\n        return keyBinder.bindSeekBackwardOrForward(\n            (event, forward) => {\n                event.stopPropagation();\n                event.preventDefault();\n                const timestamp = clock.time(length);\n\n                if (forward) {\n                    playerChannel.currentTime = Math.min(length / 1000, (timestamp + 10000) / 1000);\n                } else {\n                    playerChannel.currentTime = Math.max(0, (timestamp - 10000) / 1000);\n                }\n            },\n            () => !videoRef.current\n        );\n    }, [keyBinder, playerChannel, length, clock]);\n\n    const calculateSurroundingSubtitles = useCallback(\n        (index: number) => {\n            return surroundingSubtitles(\n                subtitles,\n                index,\n                ankiSettings.surroundingSubtitlesCountRadius,\n                ankiSettings.surroundingSubtitlesTimeRadius\n            );\n        },\n        [subtitles, ankiSettings.surroundingSubtitlesCountRadius, ankiSettings.surroundingSubtitlesTimeRadius]\n    );\n\n    useEffect(() => {\n        return keyBinder.bindCopy<IndexedSubtitleModel>(\n            (event, subtitle) => {\n                event.stopPropagation();\n                event.preventDefault();\n\n                const noSubtitles = !subtitles || subtitles.length === 0;\n\n                playerChannel.copy(\n                    subtitle,\n                    noSubtitles\n                        ? mockSurroundingSubtitles(subtitle, length, 5000)\n                        : calculateSurroundingSubtitles(subtitle.index),\n                    PostMineAction.none\n                );\n            },\n            () => false,\n            () => {\n                if (!subtitles || subtitles.length === 0) {\n                    const timestamp = clock.time(length);\n                    const end = Math.min(timestamp + 5000, length);\n\n                    return {\n                        text: '',\n                        start: timestamp,\n                        originalStart: timestamp,\n                        end: end,\n                        originalEnd: end,\n                        track: 0,\n                        index: 0,\n                    };\n                }\n\n                if (!showSubtitlesRef.current || showSubtitlesRef.current.length === 0) {\n                    return undefined;\n                }\n\n                return showSubtitlesRef.current[0];\n            }\n        );\n    }, [keyBinder, playerChannel, clock, length, subtitles, calculateSurroundingSubtitles]);\n\n    useEffect(() => {\n        return keyBinder.bindAdjustOffset(\n            (event, offset) => {\n                event.preventDefault();\n                event.stopPropagation();\n                handleOffsetChange(offset);\n            },\n            () => false,\n            () => subtitles\n        );\n    }, [keyBinder, handleOffsetChange, subtitles]);\n\n    useEffect(() => {\n        return keyBinder.bindResetOffet(\n            (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n                handleOffsetChange(0);\n            },\n            () => false\n        );\n    }, [keyBinder, handleOffsetChange]);\n\n    useEffect(() => {\n        return keyBinder.bindAdjustPlaybackRate(\n            (event, increase) => {\n                event.preventDefault();\n                if (increase) {\n                    updatePlaybackRate(Math.min(5, playbackRate + 0.1), true);\n                } else {\n                    updatePlaybackRate(Math.max(0.1, playbackRate - 0.1), true);\n                }\n            },\n            () => false\n        );\n    }, [updatePlaybackRate, playbackRate, keyBinder]);\n\n    useEffect(() => {\n        return keyBinder.bindToggleSubtitles(\n            (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n                setSubtitlesEnabled((enabled) => !enabled);\n            },\n            () => false\n        );\n    }, [keyBinder]);\n\n    useEffect(() => {\n        return keyBinder.bindToggleSubtitleTrackInVideo(\n            (event, track) => {\n                event.preventDefault();\n                event.stopPropagation();\n                setDisabledSubtitleTracks((tracks) => {\n                    const newTracks = { ...tracks };\n                    newTracks[track] = !tracks[track];\n                    return newTracks;\n                });\n            },\n            () => false\n        );\n    }, [keyBinder]);\n\n    useEffect(() => {\n        return keyBinder.bindToggleSubtitleTrackInList(\n            (event, track) => {\n                event.preventDefault();\n                event.stopPropagation();\n                playerChannel.toggleSubtitleTrackInList(track);\n            },\n            () => false\n        );\n    }, [keyBinder, playerChannel]);\n\n    useEffect(() => {\n        return keyBinder.bindOffsetToSubtitle(\n            (event, offset) => {\n                event.preventDefault();\n                event.stopPropagation();\n                handleOffsetChange(offset);\n            },\n            () => false,\n            () => clock.time(length),\n            () => subtitles\n        );\n    }, [keyBinder, handleOffsetChange, subtitles, clock, length]);\n\n    const extractSubtitles = useCallback(\n        (\n            noSubtitleCallback: (subtitle: SubtitleModel, surroundingSubtitles: SubtitleModel[]) => void,\n            subtitleCallback: (subtitle: SubtitleModel, surroundingSubtitles: SubtitleModel[]) => void\n        ) => {\n            if (!subtitles || subtitles.length === 0) {\n                const timestamp = clock.time(length);\n                const end = Math.min(timestamp + 5000, length);\n                const subtitle = {\n                    text: '',\n                    start: timestamp,\n                    originalStart: timestamp,\n                    end: end,\n                    originalEnd: end,\n                    track: 0,\n                };\n\n                noSubtitleCallback(subtitle, mockSurroundingSubtitles(subtitle, length, 5000));\n            } else if (showSubtitlesRef.current && showSubtitlesRef.current.length > 0) {\n                const currentSubtitle = showSubtitlesRef.current[0];\n                subtitleCallback(currentSubtitle, calculateSurroundingSubtitles(currentSubtitle.index));\n            }\n        },\n        [subtitles, calculateSurroundingSubtitles, length, clock]\n    );\n\n    useEffect(() => {\n        return keyBinder.bindAnkiExport(\n            (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n\n                if (popOut) {\n                    extractSubtitles(\n                        (subtitle, surroundingSubtitles) => {\n                            playerChannel.copy(subtitle, surroundingSubtitles, PostMineAction.none, false);\n                            onAnkiDialogRequest(\n                                videoFile,\n                                videoFileName ?? '',\n                                selectedAudioTrack,\n                                playbackRate,\n                                subtitle,\n                                surroundingSubtitles,\n                                clock.time(length)\n                            );\n                        },\n                        (subtitle, surroundingSubtitles) => {\n                            playerChannel.copy(subtitle, surroundingSubtitles, PostMineAction.none, true);\n                            onAnkiDialogRequest(\n                                videoFile,\n                                videoFileName ?? '',\n                                selectedAudioTrack,\n                                playbackRate,\n                                subtitle,\n                                surroundingSubtitles,\n                                clock.time(length)\n                            );\n                        }\n                    );\n\n                    if (playing) {\n                        playerChannel.pause();\n                        setResumeOnFinishedAnkiDialogRequest(true);\n                    }\n                } else {\n                    extractSubtitles(\n                        (subtitle, surroundingSubtitles) =>\n                            playerChannel.copy(subtitle, surroundingSubtitles, PostMineAction.showAnkiDialog, false),\n                        (subtitle, surroundingSubtitles) =>\n                            playerChannel.copy(subtitle, surroundingSubtitles, PostMineAction.showAnkiDialog, true)\n                    );\n                }\n            },\n            () => false\n        );\n    }, [\n        keyBinder,\n        playerChannel,\n        extractSubtitles,\n        clock,\n        length,\n        videoFile,\n        videoFileName,\n        selectedAudioTrack,\n        playbackRate,\n        onAnkiDialogRequest,\n        popOut,\n        playing,\n    ]);\n\n    useEffect(() => {\n        if (ankiDialogFinishedRequest && ankiDialogFinishedRequest.timestamp > 0) {\n            setResumeOnFinishedAnkiDialogRequest((resumeOnFinishedAnkiDialogRequest) => {\n                if (resumeOnFinishedAnkiDialogRequest && ankiDialogFinishedRequest.resume) {\n                    playerChannel.play();\n                }\n\n                return false;\n            });\n        }\n    }, [ankiDialogFinishedRequest, playerChannel]);\n\n    useEffect(() => {\n        return keyBinder.bindUpdateLastCard(\n            (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n\n                extractSubtitles(\n                    (subtitle, surroundingSubtitles) =>\n                        playerChannel.copy(subtitle, surroundingSubtitles, PostMineAction.updateLastCard, false),\n                    (subtitle, surroundingSubtitles) =>\n                        playerChannel.copy(subtitle, surroundingSubtitles, PostMineAction.updateLastCard, true)\n                );\n            },\n            () => false\n        );\n    }, [keyBinder, playerChannel, extractSubtitles]);\n\n    useEffect(() => {\n        return keyBinder.bindPlay(\n            (event) => {\n                event.preventDefault();\n\n                if (playing) {\n                    playerChannel.pause();\n                } else {\n                    playerChannel.play();\n                }\n            },\n            () => false\n        );\n    }, [keyBinder, playing, playerChannel]);\n\n    const togglePlayMode = useCallback(\n        (event: KeyboardEvent, togglePlayMode: PlayMode) => {\n            event.preventDefault();\n            const newPlayMode = playMode === togglePlayMode ? PlayMode.normal : togglePlayMode;\n            playerChannel.playMode(newPlayMode);\n            onPlayModeChangedViaBind(playMode, newPlayMode);\n        },\n        [playMode, playerChannel, onPlayModeChangedViaBind]\n    );\n\n    useEffect(() => {\n        return keyBinder.bindAutoPause(\n            (event) => togglePlayMode(event, PlayMode.autoPause),\n            () => false\n        );\n    }, [keyBinder, togglePlayMode]);\n\n    useEffect(() => {\n        return keyBinder.bindCondensedPlayback(\n            (event) => togglePlayMode(event, PlayMode.condensed),\n            () => false\n        );\n    }, [keyBinder, togglePlayMode]);\n\n    const handleSubtitlesToggle = useCallback(() => setSubtitlesEnabled((subtitlesEnabled) => !subtitlesEnabled), []);\n\n    const handleFullscreenToggle = useCallback(() => {\n        if (popOut) {\n            setFullscreen((fullscreen) => {\n                if (fullscreen) {\n                    document.exitFullscreen();\n                } else {\n                    document.documentElement.requestFullscreen();\n                }\n\n                return !fullscreen;\n            });\n        } else {\n            playerChannel.fullscreenToggle();\n        }\n    }, [playerChannel, popOut]);\n\n    const handleVolumeChange = useCallback((volume: number) => {\n        if (videoRef.current) {\n            videoRef.current.volume = volume;\n        }\n    }, []);\n\n    const handlePopOutToggle = useCallback(() => {\n        playerChannel.popOutToggle();\n        if (popOut) {\n            poppingInRef.current = true;\n            window.close();\n        }\n    }, [playerChannel, popOut]);\n\n    const handlePlayMode = useCallback(\n        (playMode: PlayMode) => {\n            playerChannel.playMode(playMode);\n        },\n        [playerChannel]\n    );\n\n    const handleClose = useCallback(() => {\n        playerChannel.close();\n        window.close();\n    }, [playerChannel]);\n\n    const handleHideSubtitlePlayerToggle = useCallback(() => {\n        playerChannel.hideSubtitlePlayerToggle();\n    }, [playerChannel]);\n\n    const handleTheaterModeToggle = useCallback(() => {\n        playerChannel.appBarToggle();\n    }, [playerChannel]);\n\n    const handleClick = useCallback(() => {\n        if (playing) {\n            playerChannel.pause();\n        } else {\n            playerChannel.play();\n        }\n    }, [playerChannel, playing]);\n\n    const handleDoubleClick = useCallback(() => handleFullscreenToggle(), [handleFullscreenToggle]);\n\n    const {\n        subtitleSize,\n        subtitleColor,\n        subtitleOutlineThickness,\n        subtitleOutlineColor,\n        subtitleBackgroundColor,\n        subtitleBackgroundOpacity,\n        subtitleFontFamily,\n        imageBasedSubtitleScaleFactor,\n    } = subtitleSettings;\n    const subtitleStyles = useMemo(\n        () =>\n            computeStyles({\n                subtitleSize,\n                subtitleColor,\n                subtitleOutlineThickness,\n                subtitleOutlineColor,\n                subtitleBackgroundColor,\n                subtitleBackgroundOpacity,\n                subtitleFontFamily,\n            }),\n        [\n            subtitleSize,\n            subtitleColor,\n            subtitleOutlineThickness,\n            subtitleOutlineColor,\n            subtitleBackgroundColor,\n            subtitleBackgroundOpacity,\n            subtitleFontFamily,\n        ]\n    );\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            if (Date.now() - lastMouseMovementTimestamp.current > 300) {\n                if (showCursor) {\n                    setShowCursor(false);\n                }\n            } else if (!showCursor) {\n                setShowCursor(true);\n            }\n        }, 100);\n\n        return () => clearInterval(interval);\n    }, [showCursor]);\n\n    const handleAlertClosed = useCallback(() => setAlertOpen(false), []);\n\n    return (\n        <div ref={containerRef} onMouseMove={handleMouseMove} className={classes.root}>\n            <Alert open={alertOpen} onClose={handleAlertClosed} autoHideDuration={3000} severity={alertSeverity}>\n                {alertMessage}\n            </Alert>\n            <video\n                preload=\"auto\"\n                controls={false}\n                onClick={handleClick}\n                onDoubleClick={handleDoubleClick}\n                className={showCursor ? classes.video : `${classes.cursorHidden} ${classes.video}`}\n                ref={videoRefCallback}\n                src={videoFile}\n            />\n            {subtitlesEnabled && (\n                <div className={classes.subtitleContainer}>\n                    {showSubtitles.map((subtitle, index) => {\n                        let content;\n\n                        if (subtitle.textImage) {\n                            content = (\n                                <SubtitleTextImage\n                                    availableWidth={videoRef.current?.width ?? window.screen.availWidth}\n                                    subtitle={subtitle}\n                                    scale={imageBasedSubtitleScaleFactor}\n                                />\n                            );\n                        } else {\n                            content = <span style={subtitleStyles}>{subtitle.text}</span>;\n                        }\n\n                        if (index < showSubtitles.length - 1) {\n                            return (\n                                <React.Fragment key={subtitle.index}>\n                                    {content}\n                                    <br />\n                                </React.Fragment>\n                            );\n                        }\n\n                        return <React.Fragment key={subtitle.index}>{content}</React.Fragment>;\n                    })}\n                </div>\n            )}\n            <Controls\n                mousePositionRef={mousePositionRef}\n                playing={playing}\n                clock={clock}\n                length={length}\n                audioTracks={audioTracks}\n                selectedAudioTrack={selectedAudioTrack}\n                subtitlesToggle={subtitles && subtitles.length > 0}\n                subtitlesEnabled={subtitlesEnabled}\n                offsetEnabled={true}\n                offset={offset}\n                playbackRate={playbackRate}\n                playbackRateEnabled={true}\n                fullscreenEnabled={true}\n                fullscreen={fullscreen}\n                closeEnabled={!popOut}\n                popOut={popOut}\n                volumeEnabled={true}\n                popOutEnabled={!isMobile}\n                playModeEnabled={subtitles && subtitles.length > 0}\n                playMode={playMode}\n                hideSubtitlePlayerToggleEnabled={subtitles?.length > 0 && !popOut && !fullscreen}\n                subtitlePlayerHidden={subtitlePlayerHidden}\n                onPlay={handlePlay}\n                onPause={handlePause}\n                onSeek={handleSeek}\n                onAudioTrackSelected={handleAudioTrackSelected}\n                onSubtitlesToggle={handleSubtitlesToggle}\n                onFullscreenToggle={handleFullscreenToggle}\n                onVolumeChange={handleVolumeChange}\n                onOffsetChange={handleOffsetChange}\n                onPlaybackRateChange={handlePlaybackRateChange}\n                onPopOutToggle={handlePopOutToggle}\n                onPlayMode={handlePlayMode}\n                onClose={handleClose}\n                onHideSubtitlePlayerToggle={handleHideSubtitlePlayerToggle}\n                playbackPreferences={playbackPreferences}\n                showOnMouseMovement={false}\n                theaterModeToggleEnabled={!popOut && !fullscreen}\n                theaterModeEnabled={appBarHidden}\n                onTheaterModeToggle={handleTheaterModeToggle}\n            />\n        </div>\n    );\n}\n","import {\n    AsbPlayerToVideoCommandV2,\n    ExtensionToAsbPlayerCommand,\n    ExtensionToAsbPlayerCommandTabsCommand,\n    Message,\n    VideoTabModel,\n} from '@project/common';\nimport { gt } from 'semver';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport interface ExtensionMessage {\n    data: Message;\n    tabId?: number;\n    src?: string;\n}\n\nconst id = uuidv4();\n\nexport default class ChromeExtension {\n    readonly version: string;\n    readonly extensionCommands: { [key: string]: string | undefined };\n\n    tabs: VideoTabModel[];\n    installed: boolean;\n\n    private readonly windowEventListener: (event: MessageEvent) => void;\n    private onMessageCallbacks: Array<(message: ExtensionMessage) => void>;\n    private onTabsCallbacks: Array<(tabs: VideoTabModel[]) => void>;\n    private heartbeatStarted = false;\n\n    constructor(version?: string, extensionCommands?: { [key: string]: string | undefined }) {\n        this.onMessageCallbacks = [];\n        this.onTabsCallbacks = [];\n        this.tabs = [];\n        this.installed = version !== undefined;\n        this.version = version ?? '';\n        this.extensionCommands = extensionCommands ?? {};\n        this.windowEventListener = (event: MessageEvent) => {\n            if (event.source !== window) {\n                return;\n            }\n\n            if (event.data.sender !== 'asbplayer-extension-to-player' || !event.data.message) {\n                return;\n            }\n\n            if (event.data.message.command === 'tabs') {\n                const tabsCommand = event.data as ExtensionToAsbPlayerCommandTabsCommand;\n                this.tabs = tabsCommand.message.tabs;\n\n                for (let c of this.onTabsCallbacks) {\n                    c(this.tabs);\n                }\n\n                if (tabsCommand.message.ackRequested) {\n                    window.postMessage(\n                        {\n                            sender: 'asbplayerv2',\n                            message: {\n                                command: 'ackTabs',\n                                id: id,\n                                receivedTabs: this.tabs,\n                            },\n                        },\n                        '*'\n                    );\n                }\n            } else {\n                const command = event.data as ExtensionToAsbPlayerCommand<Message>;\n\n                for (let c of this.onMessageCallbacks) {\n                    c({\n                        data: command.message,\n                        tabId: command.tabId,\n                        src: command.src,\n                    });\n                }\n            }\n        };\n\n        window.addEventListener('message', this.windowEventListener);\n    }\n\n    startHeartbeat(fromVideoPlayer: boolean) {\n        if (!this.installed) {\n            return;\n        }\n\n        if (!this.heartbeatStarted) {\n            if (fromVideoPlayer) {\n                if (gt(this.version, '0.23.0')) {\n                    setInterval(() => this._sendHeartbeat(true), 1000);\n                }\n            } else {\n                setInterval(() => this._sendHeartbeat(false), 1000);\n            }\n\n            this.heartbeatStarted = true;\n        }\n    }\n\n    private _sendHeartbeat(fromVideoPlayer: boolean) {\n        window.postMessage(\n            {\n                sender: 'asbplayerv2',\n                message: {\n                    command: 'heartbeat',\n                    id: id,\n                    receivedTabs: fromVideoPlayer ? [] : this.tabs,\n                    videoPlayer: fromVideoPlayer\n                },\n            },\n            '*'\n        );\n    }\n\n    openShortcuts() {\n        window.postMessage({\n            sender: 'asbplayerv2',\n            message: {\n                command: 'open-extension-shortcuts',\n            },\n        });\n    }\n\n    sendMessage(message: Message, tabId: number, src: string) {\n        const command: AsbPlayerToVideoCommandV2<Message> = {\n            sender: 'asbplayerv2',\n            message: message,\n            tabId: tabId,\n            src: src,\n        };\n        window.postMessage(command, '*');\n    }\n\n    publishMessage(message: Message) {\n        for (const tab of this.tabs) {\n            const command: AsbPlayerToVideoCommandV2<Message> = {\n                sender: 'asbplayerv2',\n                message: message,\n                tabId: tab.id,\n                src: tab.src,\n            };\n            window.postMessage(command, '*');\n        }\n    }\n\n    subscribeTabs(callback: (tabs: VideoTabModel[]) => void) {\n        this.onTabsCallbacks.push(callback);\n        return () => this._remove(callback, this.onTabsCallbacks);\n    }\n\n    subscribe(callback: (message: ExtensionMessage) => void) {\n        this.onMessageCallbacks.push(callback);\n        return () => this._remove(callback, this.onMessageCallbacks);\n    }\n\n    _remove(callback: Function, callbacks: Function[]) {\n        for (let i = callbacks.length - 1; i >= 0; --i) {\n            if (callback === callbacks[i]) {\n                callbacks.splice(i, 1);\n                break;\n            }\n        }\n    }\n\n    unbind() {\n        window.removeEventListener('message', this.windowEventListener);\n        this.onMessageCallbacks = [];\n        this.onTabsCallbacks = [];\n    }\n}\n","import { ExtensionVersionMessage } from '@project/common';\nimport ChromeExtension from './ChromeExtension';\n\nconst keyBindNameMap: any = {\n    'copy-subtitle': 'copySubtitle',\n    'copy-subtitle-with-dialog': 'ankiExport',\n    'update-last-card': 'updateLastCard',\n};\n\nexport class ChromeExtensionProvider {\n    extension: ChromeExtension = new ChromeExtension();\n    private readonly callbacks: ((extension: ChromeExtension) => void)[] = [];\n\n    constructor() {\n        const listener = (event: MessageEvent) => {\n            if (event.source !== window) {\n                return;\n            }\n\n            if (event.data.sender === 'asbplayer-extension-to-player') {\n                if (event.data.message.command === 'version') {\n                    const message = event.data.message as ExtensionVersionMessage;\n\n                    for (const callback of this.callbacks) {\n                        this.extension.unbind();\n                        const translatedCommands: { [key: string]: string | undefined } = {};\n                        const extensionCommands = message.extensionCommands ?? {};\n                        \n                        for (const extensionCommandName of Object.keys(extensionCommands)) {\n                            translatedCommands[keyBindNameMap[extensionCommandName]] =\n                                extensionCommands[extensionCommandName];\n                        }\n\n                        this.extension = new ChromeExtension(message.version, translatedCommands);\n                        callback(this.extension);\n                    }\n\n                    window.removeEventListener('message', listener);\n                }\n            }\n        };\n\n        window.addEventListener('message', listener);\n    }\n\n    onChromeExtension(callback: (extension: ChromeExtension) => void) {\n        this.callbacks.push(callback);\n        callback(this.extension);\n    }\n}\n","import SettingsProvider from './SettingsProvider';\n\nconst volumeKey = 'volume';\nconst theaterModeKey = 'theaterMode';\nconst offsetKey = 'offset';\nconst defaultVolume = 100;\n\nexport default class PlaybackPreferences {\n    private readonly settingsProvider: SettingsProvider;\n\n    constructor(settingsProvider: SettingsProvider) {\n        this.settingsProvider = settingsProvider;\n    }\n\n    get volume() {\n        const value = localStorage.getItem(volumeKey);\n\n        if (value === null) {\n            return defaultVolume;\n        }\n\n        return Number(value);\n    }\n\n    set volume(volume) {\n        localStorage.setItem(volumeKey, String(volume));\n    }\n\n    get theaterMode() {\n        return localStorage.getItem(theaterModeKey) === 'true' || false;\n    }\n\n    set theaterMode(theaterMode) {\n        localStorage.setItem(theaterModeKey, String(theaterMode));\n    }\n\n    get offset(): number {\n        if (!this.settingsProvider.rememberSubtitleOffset) {\n            return 0;\n        }\n\n        const value = localStorage.getItem(offsetKey);\n\n        if (value === null) {\n            return 0;\n        }\n\n        return Number(value);\n    }\n\n    set offset(offset: number) {\n        localStorage.setItem(offsetKey, String(offset));\n    }\n}\n","import { AudioModel, ImageModel, SubtitleModel } from '@project/common';\nimport Dexie from 'dexie';\nimport { CopyHistoryItem } from '../components/CopyHistory';\n\nclass CopyHistoryDatabase extends Dexie {\n    copyHistoryItems!: Dexie.Table<CopyHistoryRecord, number>;\n\n    constructor() {\n        super('CopyHistoryDatabase');\n        this.version(1).stores({\n            copyHistoryItems: '++index,id,timestamp',\n        });\n    }\n}\n\ninterface CopyHistoryRecord extends SubtitleModel {\n    index?: number;\n    name: string;\n    id: string;\n    timestamp: number;\n    surroundingSubtitles: SubtitleModel[];\n    audioTrack?: string;\n    filePlaybackRate?: number;\n    subtitleFileName?: string;\n    videoFileName?: string;\n    audioFileName?: string;\n    mediaTimestamp?: number;\n    audio?: AudioModel;\n    image?: ImageModel;\n    url?: string;\n}\n\nexport default class CopyHistoryRepository {\n    private readonly _db = new CopyHistoryDatabase();\n    private _limit: number;\n\n    constructor(limit: number) {\n        this._limit = limit;\n    }\n\n    set limit(limit: number) {\n        this._limit = limit;\n    }\n\n    async fetch(count: number): Promise<CopyHistoryItem[]> {\n        if (count <= 0) {\n            return [];\n        }\n\n        const result = await await this._db.copyHistoryItems.reverse().limit(count).toArray();\n        result.reverse();\n        return result;\n    }\n\n    async save(item: CopyHistoryItem) {\n        if (this._limit <= 0) {\n            return;\n        }\n\n        const {\n            text,\n            textImage,\n            start,\n            end,\n            originalStart,\n            originalEnd,\n            track,\n            name,\n            id,\n            timestamp,\n            surroundingSubtitles,\n            audioTrack,\n            filePlaybackRate,\n            videoFile,\n            audioFile,\n            subtitleFileName,\n            mediaTimestamp,\n            audio,\n            image,\n            url,\n        } = item;\n        const record = {\n            text,\n            textImage,\n            start,\n            end,\n            originalStart,\n            originalEnd,\n            track,\n            name,\n            id,\n            timestamp,\n            surroundingSubtitles,\n            audioTrack,\n            filePlaybackRate,\n            videoFileName: videoFile?.name,\n            audioFileName: audioFile?.name,\n            subtitleFileName,\n            mediaTimestamp,\n            audio,\n            image,\n            url,\n        };\n        const index = await this._db.copyHistoryItems.put(record);\n        await this._prune(index);\n    }\n\n    private async _prune(lastIndex: number) {\n        const size = await this._db.copyHistoryItems.count();\n\n        if (size > this._limit) {\n            const keys = await this._db.copyHistoryItems\n                .where('index')\n                .belowOrEqual(lastIndex - this._limit)\n                .primaryKeys();\n\n            if (keys.length > 0) {\n                await this._db.copyHistoryItems.bulkDelete(keys);\n            }\n        }\n    }\n\n    async delete(id: string) {\n        const keys = await this._db.copyHistoryItems.where('id').equals(id).primaryKeys();\n        await this._db.copyHistoryItems.bulkDelete(keys);\n    }\n}\n","import React, { useCallback, useEffect, useState, useMemo, useRef } from 'react';\nimport { Route, Navigate, Routes, useLocation, useSearchParams } from 'react-router-dom';\nimport { ThemeProvider, createTheme, makeStyles, Theme } from '@material-ui/core/styles';\nimport { useWindowSize } from '../hooks/useWindowSize';\nimport { red } from '@material-ui/core/colors';\nimport {\n    Anki,\n    AudioClip,\n    Image,\n    humanReadableTime,\n    AnkiDialogSliderContext,\n    SubtitleModel,\n    VideoTabModel,\n    LegacyPlayerSyncMessage,\n    PlayerSyncMessage,\n    AudioModel,\n    ImageModel,\n    AsbplayerSettings,\n    PostMineAction,\n    PlayMode,\n    download,\n    extractText,\n} from '@project/common';\nimport { v4 as uuidv4 } from 'uuid';\nimport clsx from 'clsx';\nimport Alert from './Alert';\nimport { AnkiDialog, ImageDialog } from '@project/common/components';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport DragOverlay from './DragOverlay';\nimport SubtitleReader from '../services/SubtitleReader';\nimport Bar from './Bar';\nimport ChromeExtension, { ExtensionMessage } from '../services/ChromeExtension';\nimport CopyHistory, { CopyHistoryItem } from './CopyHistory';\nimport LandingPage from './LandingPage';\nimport Player, { AnkiDialogFinishedRequest, MediaSources } from './Player';\nimport SettingsDialog from './SettingsDialog';\nimport SettingsProvider from '../services/SettingsProvider';\nimport VideoPlayer from './VideoPlayer';\nimport { Color } from '@material-ui/lab';\nimport { AnkiExportMode } from '@project/common';\nimport { DefaultKeyBinder } from '@project/common/src/KeyBinder';\nimport AppKeyBinder from '../services/AppKeyBinder';\nimport VideoChannel from '../services/VideoChannel';\nimport { ChromeExtensionProvider } from '../services/ChromeExtensionProvider';\nimport PlaybackPreferences from '../services/PlaybackPreferences';\nimport CopyHistoryRepository from '../services/CopyHistoryRepository';\n\nconst latestExtensionVersion = '0.26.0';\nconst extensionUrl = 'https://github.com/killergerbah/asbplayer/releases/latest';\n\nconst useContentStyles = makeStyles<Theme, ContentProps>((theme) => ({\n    content: {\n        flexGrow: 1,\n        transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n        marginRight: 0,\n    },\n    contentShift: ({ drawerWidth }) => ({\n        transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n        marginRight: drawerWidth,\n    }),\n}));\n\nfunction extractSources(files: FileList | File[]): MediaSources {\n    let subtitleFiles = [];\n    let audioFile = undefined;\n    let videoFile = undefined;\n\n    for (let i = 0; i < files.length; ++i) {\n        const f = files[i];\n        const extensionStartIndex = f.name.lastIndexOf('.');\n\n        if (extensionStartIndex === -1) {\n            throw new Error('Unable to determine extension of ' + f.name);\n        }\n\n        const extension = f.name.substring(extensionStartIndex + 1, f.name.length);\n        switch (extension) {\n            case 'ass':\n            case 'srt':\n            case 'vtt':\n            case 'nfvtt':\n            case 'sup':\n            case 'ytxml':\n            case 'dfxp':\n            case 'ttml2':\n                subtitleFiles.push(f);\n                break;\n            case 'mkv':\n            case 'mp4':\n            case 'avi':\n                if (videoFile) {\n                    throw new Error('Cannot open two video files simultaneously');\n                }\n                videoFile = f;\n                break;\n            case 'mp3':\n            case 'm4a':\n            case 'aac':\n            case 'flac':\n            case 'ogg':\n            case 'wav':\n            case 'opus':\n                if (audioFile) {\n                    throw new Error('Cannot open two audio files simultaneously');\n                }\n                audioFile = f;\n                break;\n            default:\n                throw new Error('Unsupported extension ' + extension);\n        }\n    }\n\n    if (videoFile && audioFile) {\n        throw new Error('Cannot load both an audio and video file simultaneously');\n    }\n\n    return { subtitleFiles: subtitleFiles, audioFile: audioFile, videoFile: videoFile };\n}\n\nfunction audioClipFromItem(\n    item: CopyHistoryItem,\n    sliderContext: AnkiDialogSliderContext | undefined,\n    paddingStart: number,\n    paddingEnd: number\n) {\n    if (item.audio) {\n        const start = item.audio.start ?? item.start;\n        const end = item.audio.end ?? item.end;\n\n        return AudioClip.fromBase64(\n            item.subtitleFileName!,\n            Math.max(0, start - (item.audio.paddingStart ?? 0)),\n            end + (item.audio.paddingEnd ?? 0),\n            item.audio.playbackRate ?? 1,\n            item.audio.base64,\n            item.audio.extension\n        );\n    }\n\n    const calculateInterval = () => {\n        let start;\n        let end;\n\n        if (sliderContext) {\n            start = sliderContext.subtitleStart;\n            end = sliderContext.subtitleEnd;\n        } else {\n            start = item.start;\n            end = item.end;\n        }\n\n        return [start, end];\n    };\n\n    if (item.audioFile || item.videoFile) {\n        const [start, end] = calculateInterval();\n        return AudioClip.fromFile(\n            (item.audioFile || item.videoFile)!,\n            Math.max(0, start - paddingStart),\n            end + paddingEnd,\n            item.filePlaybackRate ?? 1,\n            item.audioTrack\n        );\n    }\n\n    if (item.audioFileName || item.videoFileName) {\n        const [start, end] = calculateInterval();\n        return AudioClip.fromMissingFile((item.audioFileName || item.videoFileName)!, start, end);\n    }\n\n    return undefined;\n}\n\nfunction imageFromItem(item: CopyHistoryItem, maxWidth: number, maxHeight: number) {\n    if (item.image) {\n        return Image.fromBase64(item.subtitleFileName!, item.start, item.image.base64, item.image.extension);\n    }\n\n    if (item.videoFile) {\n        return Image.fromFile(item.videoFile, item.mediaTimestamp ?? item.start, maxWidth, maxHeight);\n    }\n\n    if (item.videoFileName) {\n        return Image.fromMissingFile(item.videoFileName, item.mediaTimestamp ?? item.start);\n    }\n\n    return undefined;\n}\n\nfunction itemSourceString(item: CopyHistoryItem | undefined) {\n    if (!item) {\n        return undefined;\n    }\n\n    const source = item.subtitleFileName ?? item.audioFile?.name ?? item.videoFile?.name;\n\n    if (!source) {\n        return undefined;\n    }\n\n    return `${source} (${humanReadableTime(item.start)})`;\n}\n\nfunction itemSliderContext(item: CopyHistoryItem) {\n    if (!item) {\n        return undefined;\n    }\n\n    return {\n        subtitleStart: item.start,\n        subtitleEnd: item.end,\n        subtitles: item.surroundingSubtitles || [\n            { start: item.start, end: item.end, text: item.text, track: item.track },\n        ],\n    };\n}\n\nfunction revokeUrls(sources: MediaSources) {\n    if (sources.audioFileUrl) {\n        URL.revokeObjectURL(sources.audioFileUrl);\n    }\n\n    if (sources.videoFileUrl) {\n        URL.revokeObjectURL(sources.videoFileUrl);\n    }\n}\n\ninterface NavigateToVideoProps {\n    searchParams: URLSearchParams;\n}\n\nfunction NavigateToVideo({ searchParams }: NavigateToVideoProps) {\n    const videoFile = searchParams.get('video')!;\n    const channel = searchParams.get('channel')!;\n    const popOut = searchParams.get('popout')!;\n\n    return (\n        <Navigate to={'/video?video=' + encodeURIComponent(videoFile) + '&channel=' + channel + '&popout=' + popOut} />\n    );\n}\n\ninterface RenderVideoProps {\n    searchParams: URLSearchParams;\n    settingsProvider: SettingsProvider;\n    playbackPreferences: PlaybackPreferences;\n    extension: ChromeExtension;\n    ankiDialogFinishedRequest: AnkiDialogFinishedRequest;\n    onAnkiDialogRequest: (\n        videoFileUrl: string,\n        videoFileName: string,\n        selectedAudioTrack: string | undefined,\n        playbackRate: number,\n        subtitle: SubtitleModel,\n        surroundingSubtitles: SubtitleModel[],\n        timestamp: number\n    ) => void;\n    onError: (error: string) => void;\n    onPlayModeChangedViaBind: (oldPlayMode: PlayMode, newPlayMode: PlayMode) => void;\n}\n\nfunction RenderVideo({\n    searchParams,\n    settingsProvider,\n    playbackPreferences,\n    extension,\n    ankiDialogFinishedRequest,\n    onAnkiDialogRequest,\n    onError,\n    onPlayModeChangedViaBind,\n}: RenderVideoProps) {\n    const videoFile = searchParams.get('video')!;\n    const channel = searchParams.get('channel')!;\n    const popOut = searchParams.get('popout')! === 'true';\n\n    return (\n        <VideoPlayer\n            settingsProvider={settingsProvider}\n            playbackPreferences={playbackPreferences}\n            extension={extension}\n            videoFile={videoFile}\n            popOut={popOut}\n            channel={channel}\n            ankiDialogFinishedRequest={ankiDialogFinishedRequest}\n            onAnkiDialogRequest={onAnkiDialogRequest}\n            onError={onError}\n            onPlayModeChangedViaBind={onPlayModeChangedViaBind}\n        />\n    );\n}\n\ninterface ContentProps {\n    drawerOpen: boolean;\n    drawerWidth: number;\n    children: React.ReactNode[];\n}\n\nfunction Content(props: ContentProps) {\n    const classes = useContentStyles(props);\n\n    return (\n        <main\n            className={clsx(classes.content, {\n                [classes.contentShift]: props.drawerOpen,\n            })}\n        >\n            {props.children}\n        </main>\n    );\n}\n\nfunction App() {\n    const settingsProvider = useMemo<SettingsProvider>(() => new SettingsProvider(), []);\n    const subtitleReader = useMemo<SubtitleReader>(() => {\n        let regex: RegExp | undefined;\n\n        try {\n            regex =\n                settingsProvider.subtitleRegexFilter.trim() === ''\n                    ? undefined\n                    : new RegExp(settingsProvider.subtitleRegexFilter);\n        } catch (e) {\n            regex = undefined;\n        }\n\n        if (regex !== undefined) {\n            return new SubtitleReader({ regex, replacement: settingsProvider.subtitleRegexFilterTextReplacement });\n        }\n\n        return new SubtitleReader();\n    }, [settingsProvider.subtitleRegexFilter, settingsProvider.subtitleRegexFilterTextReplacement]);\n    const playbackPreferences = useMemo<PlaybackPreferences>(\n        () => new PlaybackPreferences(settingsProvider),\n        [settingsProvider]\n    );\n    const theme = useMemo<Theme>(\n        () =>\n            createTheme({\n                palette: {\n                    primary: {\n                        main: '#49007a',\n                    },\n                    secondary: {\n                        main: '#ff1f62',\n                    },\n                    error: {\n                        main: red.A400,\n                    },\n                    type: settingsProvider.themeType,\n                },\n            }),\n        [settingsProvider.themeType]\n    );\n    const anki = useMemo<Anki>(() => new Anki(settingsProvider), [settingsProvider]);\n    const location = useLocation();\n    const [searchParams] = useSearchParams();\n\n    const inVideoPlayer = location.pathname === '/video' || searchParams.get('video') !== null;\n    const extensionProvider = useMemo(() => new ChromeExtensionProvider(), []);\n    const [extension, setExtension] = useState<ChromeExtension>(extensionProvider.extension);\n    const [videoFullscreen, setVideoFullscreen] = useState<boolean>(false);\n    useEffect(() => extensionProvider.onChromeExtension(setExtension), [extensionProvider]);\n    const keyBinder = useMemo<AppKeyBinder>(\n        () => new AppKeyBinder(new DefaultKeyBinder(settingsProvider.keyBindSet), extension),\n        [settingsProvider.keyBindSet, extension]\n    );\n    const videoFrameRef = useRef<HTMLIFrameElement>(null);\n    const videoChannelRef = useRef<VideoChannel>(null);\n    const [width] = useWindowSize(!inVideoPlayer);\n    const drawerRatio = videoFrameRef.current ? 0.2 : 0.3;\n    const minDrawerSize = videoFrameRef.current ? 150 : 300;\n    const drawerWidth = Math.max(minDrawerSize, width * drawerRatio);\n    const copyHistoryRepository = useMemo(\n        () => new CopyHistoryRepository(settingsProvider.miningHistoryStorageLimit),\n        [settingsProvider]\n    );\n    useEffect(() => {\n        copyHistoryRepository.limit = settingsProvider.miningHistoryStorageLimit;\n    }, [copyHistoryRepository, settingsProvider.miningHistoryStorageLimit]);\n    const [copiedSubtitles, setCopiedSubtitles] = useState<CopyHistoryItem[]>([]);\n    const copiedSubtitlesRef = useRef<CopyHistoryItem[]>([]);\n    copiedSubtitlesRef.current = copiedSubtitles;\n    const [copyHistoryOpen, setCopyHistoryOpen] = useState<boolean>(false);\n    const [theaterMode, setTheaterMode] = useState<boolean>(playbackPreferences.theaterMode);\n    const [hideSubtitlePlayer, setHideSubtitlePlayer] = useState<boolean>(false);\n    const [videoPopOut, setVideoPopOut] = useState<boolean>(false);\n    const [alert, setAlert] = useState<string>();\n    const [alertOpen, setAlertOpen] = useState<boolean>(false);\n    const [alertSeverity, setAlertSeverity] = useState<Color>();\n    const [jumpToSubtitle, setJumpToSubtitle] = useState<SubtitleModel>();\n    const [rewindSubtitle, setRewindSubtitle] = useState<SubtitleModel>();\n    const [sources, setSources] = useState<MediaSources>({ subtitleFiles: [] });\n    const [loading, setLoading] = useState<boolean>(false);\n    const [dragging, setDragging] = useState<boolean>(false);\n    const dragEnterRef = useRef<Element | null>(null);\n    const [fileName, setFileName] = useState<string>();\n    const [ankiDialogOpen, setAnkiDialogOpen] = useState<boolean>(false);\n    const [ankiDialogDisabled, setAnkiDialogDisabled] = useState<boolean>(false);\n    const [ankiDialogItem, setAnkiDialogItem] = useState<CopyHistoryItem>();\n    const ankiDialogItemSliderContext = useMemo<AnkiDialogSliderContext | undefined>(\n        () => ankiDialogItem && itemSliderContext(ankiDialogItem),\n        [ankiDialogItem]\n    );\n    const ankiDialogAudioClip = useMemo<AudioClip | undefined>(\n        () =>\n            ankiDialogItem &&\n            audioClipFromItem(\n                ankiDialogItem,\n                ankiDialogItemSliderContext,\n                settingsProvider.audioPaddingStart,\n                settingsProvider.audioPaddingEnd\n            ),\n        [\n            ankiDialogItem,\n            ankiDialogItemSliderContext,\n            settingsProvider.audioPaddingStart,\n            settingsProvider.audioPaddingEnd,\n        ]\n    );\n    const ankiDialogImage = useMemo<Image | undefined>(\n        () =>\n            ankiDialogItem &&\n            imageFromItem(ankiDialogItem, settingsProvider.maxImageWidth, settingsProvider.maxImageHeight),\n        [ankiDialogItem, settingsProvider.maxImageWidth, settingsProvider.maxImageHeight]\n    );\n    const [ankiDialogRequested, setAnkiDialogRequested] = useState<boolean>(false);\n    const [ankiDialogFinishedRequest, setAnkiDialogFinishedRequest] = useState<AnkiDialogFinishedRequest>({\n        timestamp: 0,\n        resume: false,\n    });\n    const [settingsDialogOpen, setSettingsDialogOpen] = useState<boolean>(false);\n    const [settingsDialogScrollToId, setSettingsDialogScrollToId] = useState<string>();\n    const [imageDialogOpen, setImageDialogOpen] = useState<boolean>(false);\n    const [disableKeyEvents, setDisableKeyEvents] = useState<boolean>(false);\n    const [image, setImage] = useState<Image>();\n    const [tab, setTab] = useState<VideoTabModel>();\n    const [availableTabs, setAvailableTabs] = useState<VideoTabModel[]>([]);\n    const fileInputRef = useRef<HTMLInputElement>(null);\n    const ankiDialogRequestedRef = useRef<boolean>(false);\n    ankiDialogRequestedRef.current = ankiDialogRequested;\n    const { subtitleFiles } = sources;\n\n    const handleError = useCallback((message: string) => {\n        setAlertSeverity('error');\n        setAlert(message);\n        setAlertOpen(true);\n    }, []);\n\n    const handleAnkiDialogRequest = useCallback((ankiDialogItem?: CopyHistoryItem) => {\n        if (!ankiDialogItem && copiedSubtitlesRef.current!.length === 0) {\n            return;\n        }\n\n        const item = ankiDialogItem ?? copiedSubtitlesRef.current[copiedSubtitlesRef.current.length - 1];\n        setAnkiDialogItem(item);\n        setAnkiDialogOpen(true);\n        setAnkiDialogDisabled(false);\n        setDisableKeyEvents(true);\n        setAnkiDialogRequested(true);\n    }, []);\n\n    const handleAnkiDialogRequestFromVideoPlayer = useCallback(\n        async (\n            videoFileUrl: string,\n            videoFileName: string,\n            selectedAudioTrack: string | undefined,\n            playbackRate: number,\n            subtitle: SubtitleModel,\n            surroundingSubtitles: SubtitleModel[],\n            timestamp: number\n        ) => {\n            const item = {\n                ...subtitle,\n                surroundingSubtitles: surroundingSubtitles,\n                timestamp: Date.now(),\n                id: uuidv4(),\n                name: videoFileName,\n                mediaTimestamp: timestamp,\n                videoFile: await fetch(videoFileUrl)\n                    .then((r) => r.blob())\n                    .then((blobFile) => new File([blobFile], videoFileName)),\n                selectedAudioTrack: selectedAudioTrack,\n                filePlaybackRate: playbackRate,\n            };\n            handleAnkiDialogRequest(item);\n        },\n        [handleAnkiDialogRequest]\n    );\n\n    const handleAnkiDialogProceed = useCallback(\n        async (\n            text: string,\n            definition: string,\n            audioClip: AudioClip | undefined,\n            image: Image | undefined,\n            word: string,\n            source: string,\n            url: string,\n            customFieldValues: { [key: string]: string },\n            tags: string[],\n            mode: AnkiExportMode\n        ) => {\n            setAnkiDialogDisabled(true);\n\n            try {\n                const result = await anki.export(\n                    text,\n                    definition,\n                    audioClip,\n                    image,\n                    word,\n                    source,\n                    url,\n                    customFieldValues,\n                    tags,\n                    mode\n                );\n\n                if (mode !== 'gui') {\n                    if (mode === 'default') {\n                        setAlertSeverity('success');\n                        setAlert('Exported card: ' + result);\n                        setAlertOpen(true);\n                    } else if (mode === 'updateLast') {\n                        setAlertSeverity('success');\n                        setAlert('Updated card: ' + result);\n                        setAlertOpen(true);\n                    }\n\n                    setAnkiDialogOpen(false);\n\n                    // We need the ref to avoid causing a state change that would re-init Player\n                    // It's a future task to make the Player init hook depend on less state\n                    if (ankiDialogRequestedRef.current) {\n                        setAnkiDialogFinishedRequest({ timestamp: Date.now(), resume: true });\n                        setAnkiDialogRequested(false);\n                    }\n                }\n            } catch (e) {\n                console.error(e);\n                if (e instanceof Error) {\n                    handleError(e.message);\n                } else {\n                    handleError(String(e));\n                }\n            } finally {\n                setAnkiDialogDisabled(false);\n                setDisableKeyEvents(false);\n            }\n        },\n        [anki, handleError]\n    );\n\n    const handleCopy = useCallback(\n        (\n            subtitle: SubtitleModel,\n            surroundingSubtitles: SubtitleModel[],\n            audioFile: File | undefined,\n            videoFile: File | undefined,\n            subtitleFile: File | undefined,\n            mediaTimestamp: number | undefined,\n            audioTrack: string | undefined,\n            filePlaybackRate: number | undefined,\n            audio: AudioModel | undefined,\n            image: ImageModel | undefined,\n            url: string | undefined,\n            postMineAction: PostMineAction | undefined,\n            preventDuplicate: boolean | undefined,\n            id: string | undefined\n        ) => {\n            if (subtitle && settingsProvider.copyToClipboardOnMine) {\n                navigator.clipboard.writeText(subtitle.text);\n            }\n\n            const newCopiedSubtitle = {\n                ...subtitle,\n                surroundingSubtitles: surroundingSubtitles,\n                timestamp: Date.now(),\n                id: id || uuidv4(),\n                name: fileName!,\n                subtitleFileName: subtitleFile?.name,\n                audioFile: audioFile,\n                videoFile: videoFile,\n                filePlaybackRate: filePlaybackRate,\n                mediaTimestamp: mediaTimestamp,\n                audioTrack: audioTrack,\n                audio: audio,\n                image: image,\n                url: url,\n            };\n\n            setCopiedSubtitles((copiedSubtitles) => {\n                if (preventDuplicate && copiedSubtitles.length > 0) {\n                    const last = copiedSubtitles[copiedSubtitles.length - 1];\n\n                    if (\n                        subtitle.start === last.start &&\n                        subtitle.end === last.end &&\n                        subtitle.text === last.text &&\n                        subtitleFile?.name === last.subtitleFileName\n                    ) {\n                        if (mediaTimestamp !== undefined && mediaTimestamp !== last.mediaTimestamp) {\n                            const newCopiedSubtitles = [...copiedSubtitles];\n                            newCopiedSubtitles[newCopiedSubtitles.length - 1] = newCopiedSubtitle;\n                            return newCopiedSubtitles;\n                        }\n\n                        return copiedSubtitles;\n                    }\n                }\n\n                // Note: we are not dealing with the case where an item with the given ID is already in the list\n                return [...copiedSubtitles, newCopiedSubtitle];\n            });\n\n            switch (postMineAction ?? PostMineAction.none) {\n                case PostMineAction.none:\n                    break;\n                case PostMineAction.showAnkiDialog:\n                    handleAnkiDialogRequest(newCopiedSubtitle);\n                    break;\n                case PostMineAction.updateLastCard:\n                    // FIXME: We should really rename the functions below because we're actually skipping the Anki dialog in this case\n                    setAnkiDialogRequested(true);\n                    let audioClip = audioClipFromItem(\n                        newCopiedSubtitle,\n                        undefined,\n                        settingsProvider.audioPaddingStart,\n                        settingsProvider.audioPaddingEnd\n                    );\n\n                    if (audioClip && settingsProvider.preferMp3) {\n                        audioClip = audioClip.toMp3();\n                    }\n\n                    handleAnkiDialogProceed(\n                        extractText(subtitle, surroundingSubtitles),\n                        '',\n                        audioClip,\n                        imageFromItem(\n                            newCopiedSubtitle,\n                            settingsProvider.maxImageWidth,\n                            settingsProvider.maxImageHeight\n                        ),\n                        '',\n                        itemSourceString(newCopiedSubtitle) ?? '',\n                        '',\n                        {},\n                        settingsProvider.tags,\n                        'updateLast'\n                    );\n                    break;\n                default:\n                    throw new Error('Unknown post mine action: ' + postMineAction);\n            }\n\n            if (subtitle) {\n                setAlertSeverity('success');\n                setAlert(\n                    subtitle.text === '' ? `Saved ${humanReadableTime(subtitle.start)}` : `Copied: \"${subtitle.text}\"`\n                );\n                setAlertOpen(true);\n            }\n\n            copyHistoryRepository.save(newCopiedSubtitle);\n        },\n        [fileName, settingsProvider, copyHistoryRepository, handleAnkiDialogProceed, handleAnkiDialogRequest]\n    );\n\n    useEffect(() => {\n        if (inVideoPlayer) {\n            return;\n        }\n\n        (async () => {\n            setCopiedSubtitles(await copyHistoryRepository.fetch(settingsProvider.miningHistoryStorageLimit));\n        })();\n    }, [inVideoPlayer, copyHistoryRepository, settingsProvider]);\n\n    const handleOpenCopyHistory = useCallback(() => {\n        setCopyHistoryOpen((copyHistoryOpen) => !copyHistoryOpen);\n        setVideoFullscreen(false);\n    }, []);\n    const handleCloseCopyHistory = useCallback(() => setCopyHistoryOpen(false), []);\n    const handleAppBarToggle = useCallback(() => {\n        const newValue = !playbackPreferences.theaterMode;\n        playbackPreferences.theaterMode = newValue;\n        setTheaterMode(newValue);\n        setVideoFullscreen(false);\n    }, [playbackPreferences]);\n    const handleFullscreenToggle = useCallback(() => {\n        setVideoFullscreen((fullscreen) => !fullscreen);\n    }, []);\n    useEffect(() => {\n        if (videoFullscreen) {\n            if (!document.fullscreenElement) {\n                document.documentElement.requestFullscreen();\n            }\n        } else if (document.fullscreenElement) {\n            document.exitFullscreen();\n        }\n    }, [videoFullscreen]);\n    useEffect(() => {\n        const listener = () => {\n            if (!document.fullscreenElement) {\n                setVideoFullscreen(false);\n            }\n        };\n        document.addEventListener('fullscreenchange', listener);\n        return () => document.removeEventListener('fullscreenchange', listener);\n    }, []);\n    const handleHideSubtitlePlayer = useCallback(() => {\n        setHideSubtitlePlayer((hidden) => !hidden);\n    }, []);\n    const handleVideoPopOut = useCallback(() => {\n        setVideoPopOut((videoPopOut) => !videoPopOut);\n    }, []);\n    const handleOpenSettings = useCallback(() => {\n        setDisableKeyEvents(true);\n        setSettingsDialogOpen(true);\n    }, []);\n    const handleAlertClosed = useCallback(() => setAlertOpen(false), []);\n    const handleImageDialogClosed = useCallback(() => setImageDialogOpen(false), []);\n    const handleCloseSettings = useCallback(\n        (newSettings: AsbplayerSettings) => {\n            settingsProvider.settings = newSettings;\n            setSettingsDialogOpen(false);\n            setSettingsDialogScrollToId(undefined);\n\n            // ATM only the Anki dialog may appear under the settings dialog,\n            // so it's the only one we need to check to re-enable key events\n            setDisableKeyEvents(ankiDialogOpen);\n\n            videoChannelRef.current?.subtitleSettings(settingsProvider.subtitleSettings);\n            videoChannelRef.current?.ankiSettings(settingsProvider.ankiSettings);\n            videoChannelRef.current?.miscSettings(settingsProvider.miscSettings);\n        },\n        [settingsProvider, ankiDialogOpen]\n    );\n\n    const handleDeleteCopyHistoryItem = useCallback(\n        (item: CopyHistoryItem) => {\n            const newCopiedSubtitles = [];\n\n            for (let subtitle of copiedSubtitles) {\n                if (item.id !== subtitle.id) {\n                    newCopiedSubtitles.push(subtitle);\n                }\n            }\n\n            setCopiedSubtitles(newCopiedSubtitles);\n            copyHistoryRepository.delete(item.id);\n        },\n        [copiedSubtitles, copyHistoryRepository]\n    );\n\n    const handleUnloadAudio = useCallback(\n        (audioFileUrl: string) => {\n            if (audioFileUrl !== sources.audioFileUrl) {\n                return;\n            }\n\n            setSources((previous) => {\n                URL.revokeObjectURL(audioFileUrl);\n\n                return {\n                    subtitleFiles: previous.subtitleFiles,\n                    audioFile: undefined,\n                    audioFileUrl: undefined,\n                    videoFile: previous.videoFile,\n                    videoFileUrl: previous.videoFileUrl,\n                };\n            });\n        },\n        [sources]\n    );\n\n    const handleUnloadVideo = useCallback(\n        (videoFileUrl: string) => {\n            if (videoFileUrl !== sources.videoFileUrl) {\n                return;\n            }\n\n            setSources((previous) => {\n                URL.revokeObjectURL(videoFileUrl);\n\n                return {\n                    subtitleFiles: previous.subtitleFiles,\n                    audioFile: previous.audioFile,\n                    audioFileUrl: previous.audioFileUrl,\n                    videoFile: undefined,\n                    videoFileUrl: undefined,\n                };\n            });\n            setVideoFullscreen(false);\n        },\n        [sources]\n    );\n\n    const handleClipAudio = useCallback(\n        async (item: CopyHistoryItem) => {\n            try {\n                const clip = await audioClipFromItem(\n                    item,\n                    undefined,\n                    settingsProvider.audioPaddingStart,\n                    settingsProvider.audioPaddingEnd\n                );\n\n                if (settingsProvider.preferMp3) {\n                    clip!.toMp3().download();\n                } else {\n                    clip!.download();\n                }\n            } catch (e) {\n                console.error(e);\n                if (e instanceof Error) {\n                    handleError(e.message);\n                } else {\n                    handleError(String(e));\n                }\n            }\n        },\n        [handleError, settingsProvider]\n    );\n\n    const handleDownloadImage = useCallback(\n        async (item: CopyHistoryItem) => {\n            try {\n                (await imageFromItem(\n                    item,\n                    settingsProvider.maxImageWidth,\n                    settingsProvider.maxImageHeight\n                ))!.download();\n            } catch (e) {\n                console.error(e);\n                if (e instanceof Error) {\n                    handleError(e.message);\n                } else {\n                    handleError(String(e));\n                }\n            }\n        },\n        [handleError, settingsProvider]\n    );\n\n    const handleDownloadCopyHistorySectionAsSrt = useCallback(\n        (name: string, items: CopyHistoryItem[]) => {\n            const deduplicated: SubtitleModel[] = [];\n\n            for (const item of items) {\n                if (\n                    deduplicated.find((i) => i.start === item.start && i.end === item.end && i.text === item.text) ===\n                    undefined\n                ) {\n                    deduplicated.push(item);\n                }\n            }\n\n            download(\n                new Blob([subtitleReader.subtitlesToSrt(deduplicated)], { type: 'text/plain' }),\n                `${name}_MiningHistory_${new Date().toISOString()}.srt`\n            );\n        },\n        [subtitleReader]\n    );\n\n    const handleSelectCopyHistoryItem = useCallback(\n        (item: CopyHistoryItem) => {\n            if (!subtitleFiles.find((f) => f.name === item.subtitleFileName)) {\n                handleError('Subtitle file ' + item.subtitleFileName + ' is not open.');\n                return;\n            }\n\n            setJumpToSubtitle({\n                text: item.text,\n                start: item.start,\n                end: item.end,\n                originalStart: item.originalStart,\n                originalEnd: item.originalEnd,\n                track: item.track,\n            });\n        },\n        [subtitleFiles, handleError]\n    );\n\n    const handleAnki = useCallback((item: CopyHistoryItem) => {\n        setAnkiDialogItem(item);\n        setAnkiDialogOpen(true);\n        setAnkiDialogDisabled(false);\n        setDisableKeyEvents(true);\n    }, []);\n\n    const handleAnkiDialogCancel = useCallback(() => {\n        setAnkiDialogOpen(false);\n        setAnkiDialogDisabled(false);\n        setDisableKeyEvents(false);\n\n        if (ankiDialogRequested) {\n            setAnkiDialogFinishedRequest({ timestamp: Date.now(), resume: true });\n            setAnkiDialogRequested(false);\n        }\n    }, [ankiDialogRequested]);\n\n    const handleAnkiDialogRewind = useCallback(() => {\n        if (!ankiDialogItem) {\n            return;\n        }\n\n        if (!subtitleFiles.find((f) => f.name === ankiDialogItem.subtitleFileName)) {\n            handleError('Subtitle file ' + ankiDialogItem.subtitleFileName + ' is not open.');\n            return;\n        }\n\n        const subtitle = {\n            text: ankiDialogItem.text,\n            start: ankiDialogItem.start,\n            end: ankiDialogItem.end,\n            originalStart: ankiDialogItem.originalStart,\n            originalEnd: ankiDialogItem.originalEnd,\n            track: ankiDialogItem.track,\n        };\n        setRewindSubtitle(subtitle);\n        setJumpToSubtitle(subtitle);\n\n        handleAnkiDialogCancel();\n    }, [ankiDialogItem, subtitleFiles, handleAnkiDialogCancel, handleError]);\n\n    const handleViewImage = useCallback((image: Image) => {\n        setImage(image);\n        setImageDialogOpen(true);\n    }, []);\n\n    useEffect(() => {\n        function onTabs(tabs: VideoTabModel[]) {\n            if (tabs.length !== availableTabs.length) {\n                setAvailableTabs(tabs);\n            } else {\n                let update = false;\n\n                for (let i = 0; i < availableTabs.length; ++i) {\n                    const t1 = availableTabs[i];\n                    const t2 = tabs[i];\n                    if (t1.id !== t2.id || t1.title !== t2.title || t1.src !== t2.src) {\n                        update = true;\n                        break;\n                    }\n                }\n\n                if (update) {\n                    setAvailableTabs(tabs);\n                }\n            }\n\n            let selectedTabMissing = tab && tabs.filter((t) => t.id === tab.id && t.src === tab.src).length === 0;\n\n            if (selectedTabMissing) {\n                setTab(undefined);\n                handleError('Lost connection with tab ' + tab!.id + ' ' + tab!.title);\n            }\n        }\n\n        return extension.subscribeTabs(onTabs);\n    }, [availableTabs, tab, extension, handleError]);\n\n    const handleTabSelected = useCallback((tab: VideoTabModel) => setTab(tab), []);\n\n    const handleFiles = useCallback(\n        (files: FileList | File[]) => {\n            try {\n                let { subtitleFiles, audioFile, videoFile } = extractSources(files);\n\n                setSources((previous) => {\n                    setLoading(true);\n\n                    let videoFileUrl = undefined;\n                    let audioFileUrl = undefined;\n\n                    if (videoFile || audioFile) {\n                        revokeUrls(previous);\n\n                        if (videoFile) {\n                            videoFileUrl = URL.createObjectURL(videoFile);\n                        } else if (audioFile) {\n                            audioFileUrl = URL.createObjectURL(audioFile);\n                        }\n\n                        setTab(undefined);\n                    } else {\n                        videoFile = previous.videoFile;\n                        videoFileUrl = previous.videoFileUrl;\n                        audioFile = previous.audioFile;\n                        audioFileUrl = previous.audioFileUrl;\n                    }\n\n                    const sources = {\n                        subtitleFiles: subtitleFiles.length === 0 ? previous.subtitleFiles : subtitleFiles,\n                        audioFile: audioFile,\n                        audioFileUrl: audioFileUrl,\n                        videoFile: videoFile,\n                        videoFileUrl: videoFileUrl,\n                    };\n\n                    return sources;\n                });\n\n                if (subtitleFiles.length > 0) {\n                    const subtitleFileName = subtitleFiles[0].name;\n                    setFileName(subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')));\n                }\n            } catch (e) {\n                console.error(e);\n                if (e instanceof Error) {\n                    handleError(e.message);\n                } else {\n                    handleError(String(e));\n                }\n            }\n        },\n        [handleError]\n    );\n\n    const handleDirectory = useCallback(\n        async (items: DataTransferItemList) => {\n            if (items.length !== 1) {\n                handleError('Cannot load more than one directory at a time');\n                return;\n            }\n\n            const fileSystemEntry = items[0].webkitGetAsEntry();\n\n            if (!fileSystemEntry || !fileSystemEntry.isDirectory) {\n                handleError('Failed to load directory');\n                return;\n            }\n\n            const fileSystemDirectoryEntry = fileSystemEntry as FileSystemDirectoryEntry;\n\n            try {\n                const entries = await new Promise<FileSystemEntry[]>((resolve, reject) =>\n                    fileSystemDirectoryEntry.createReader().readEntries(resolve, reject)\n                );\n\n                if (entries.find((e) => e.isDirectory)) {\n                    handleError('Cannot load a directory with subdirectories');\n                    return;\n                }\n\n                const filePromises = entries.map(\n                    (e) => new Promise<File>((resolve, reject) => (e as FileSystemFileEntry).file(resolve, reject))\n                );\n                const files: File[] = [];\n\n                for (const f of filePromises) {\n                    files.push(await f);\n                }\n\n                handleFiles(files);\n            } catch (e) {\n                console.error(e);\n                if (e instanceof Error) {\n                    handleError(e.message);\n                } else {\n                    handleError(String(e));\n                }\n            }\n        },\n        [handleError, handleFiles]\n    );\n\n    useEffect(() => {\n        if (inVideoPlayer) {\n            extension.startHeartbeat(true);\n            return undefined;\n        }\n\n        async function onMessage(message: ExtensionMessage) {\n            if (message.data.command === 'sync' || message.data.command === 'syncv2') {\n                const tabs = extension.tabs.filter((t) => {\n                    if (t.id !== message.tabId) {\n                        return false;\n                    }\n\n                    return !message.src || t.src === message.src;\n                });\n\n                if (tabs.length === 0) {\n                    if (message.src) {\n                        console.error(\n                            'Received sync request but the requesting tab ID ' +\n                                message.tabId +\n                                ' with src ' +\n                                message.src +\n                                ' was not found'\n                        );\n                    } else {\n                        console.error(\n                            'Received sync request but the requesting tab ID ' + message.tabId + ' was not found'\n                        );\n                    }\n\n                    return;\n                }\n\n                const tab = tabs[0];\n                let subtitleFiles: File[];\n                let flatten = false;\n\n                if (message.data.command === 'sync') {\n                    const syncMessage = message.data as LegacyPlayerSyncMessage;\n                    subtitleFiles = [\n                        new File(\n                            [await (await fetch('data:text/plain;base64,' + syncMessage.subtitles.base64)).blob()],\n                            syncMessage.subtitles.name\n                        ),\n                    ];\n                } else if (message.data.command === 'syncv2') {\n                    const syncMessage = message.data as PlayerSyncMessage;\n                    subtitleFiles = await Promise.all(\n                        syncMessage.subtitles.map(\n                            async (s) =>\n                                new File([await (await fetch('data:text/plain;base64,' + s.base64)).blob()], s.name)\n                        )\n                    );\n                    flatten = syncMessage.flatten ?? false;\n                } else {\n                    console.error('Unknown message ' + message.data.command);\n                    return;\n                }\n\n                const subtitleFileName = subtitleFiles[0].name;\n                setFileName(subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')));\n                setSources({\n                    subtitleFiles: subtitleFiles,\n                    flattenSubtitleFiles: flatten,\n                    audioFile: undefined,\n                    audioFileUrl: undefined,\n                    videoFile: undefined,\n                    videoFileUrl: undefined,\n                });\n                setTab(tab);\n            } else if (message.data.command === 'edit-keyboard-shortcuts') {\n                setSettingsDialogOpen(true);\n                setSettingsDialogScrollToId('keyboard-shortcuts');\n            } else if (message.data.command === 'open-asbplayer-settings') {\n                setSettingsDialogOpen(true);\n            }\n        }\n\n        const unsubscribe = extension.subscribe(onMessage);\n        extension.startHeartbeat(false);\n        return unsubscribe;\n    }, [extension, inVideoPlayer]);\n\n    const handleAutoPauseModeChangedViaBind = useCallback((oldPlayMode: PlayMode, newPlayMode: PlayMode) => {\n        switch (newPlayMode) {\n            case PlayMode.autoPause:\n                setAlert('Auto-pause: On');\n                break;\n            case PlayMode.condensed:\n                setAlert('Condensed playback: On');\n                break;\n            case PlayMode.normal:\n                if (oldPlayMode === PlayMode.autoPause) {\n                    setAlert('Auto-pause: Off');\n                } else if (oldPlayMode === PlayMode.condensed) {\n                    setAlert('Condensed playback: Off');\n                }\n                break;\n        }\n\n        setAlertSeverity('info');\n        setAlertOpen(true);\n    }, []);\n\n    const handleDrop = useCallback(\n        (e: React.DragEvent) => {\n            if (ankiDialogOpen) {\n                return;\n            }\n\n            e.preventDefault();\n\n            if (inVideoPlayer) {\n                handleError('Video player cannot receive dropped files. Drop outside of the video frame instead.');\n                return;\n            }\n\n            setDragging(false);\n            dragEnterRef.current = null;\n\n            function allDirectories(items: DataTransferItemList) {\n                for (let i = 0; i < items.length; ++i) {\n                    if (!items[i].webkitGetAsEntry()?.isDirectory) {\n                        return false;\n                    }\n                }\n\n                return true;\n            }\n\n            if (e.dataTransfer.items && e.dataTransfer.items.length > 0 && allDirectories(e.dataTransfer.items)) {\n                handleDirectory(e.dataTransfer.items);\n            } else if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n                handleFiles(e.dataTransfer.files);\n            }\n        },\n        [inVideoPlayer, handleError, handleFiles, handleDirectory, ankiDialogOpen]\n    );\n\n    const handleFileInputChange = useCallback(() => {\n        const files = fileInputRef.current?.files;\n\n        if (files && files.length > 0) {\n            handleFiles(files);\n        }\n    }, [handleFiles]);\n\n    const handleFileSelector = useCallback(() => fileInputRef.current?.click(), []);\n\n    const handleDownloadSubtitleFilesAsSrt = useCallback(async () => {\n        if (sources.subtitleFiles === undefined) {\n            return;\n        }\n\n        const nonSupSubtitleFiles = sources.subtitleFiles.filter((f) => !f.name.endsWith('.sup'));\n\n        if (nonSupSubtitleFiles.length === 0) {\n            return;\n        }\n\n        download(\n            new Blob([await subtitleReader.filesToSrt(nonSupSubtitleFiles)], {\n                type: 'text/plain',\n            }),\n            `${fileName}.srt`\n        );\n    }, [fileName, sources.subtitleFiles, subtitleReader]);\n\n    const handleDragOver = useCallback(\n        (e: React.DragEvent<HTMLDivElement>) => {\n            if (ankiDialogOpen) {\n                return;\n            }\n\n            e.preventDefault();\n        },\n        [ankiDialogOpen]\n    );\n\n    const handleDragEnter = useCallback(\n        (e: React.DragEvent<HTMLDivElement>) => {\n            if (ankiDialogOpen) {\n                return;\n            }\n\n            e.preventDefault();\n            e.stopPropagation();\n\n            if (!inVideoPlayer) {\n                dragEnterRef.current = e.target as Element;\n                setDragging(true);\n            }\n        },\n        [inVideoPlayer, ankiDialogOpen]\n    );\n\n    const handleDragLeave = useCallback(\n        (e: React.DragEvent<HTMLDivElement>) => {\n            e.nativeEvent.preventDefault();\n            e.nativeEvent.stopPropagation();\n\n            if (!inVideoPlayer && dragEnterRef.current === e.target) {\n                setDragging(false);\n            }\n        },\n        [inVideoPlayer]\n    );\n\n    const handleSourcesLoaded = useCallback(() => setLoading(false), []);\n\n    useEffect(() => {\n        var view = searchParams.get('view');\n        if (view === 'settings') {\n            setSettingsDialogOpen(true);\n\n            if (location.hash && location.hash.startsWith('#')) {\n                const id = location.hash.substring(1, location.hash.length);\n                setSettingsDialogScrollToId(id);\n            }\n        }\n    }, [searchParams, location]);\n\n    useEffect(() => {\n        if (alertOpen && alert && alertSeverity) {\n            videoChannelRef.current?.alert(alert, alertSeverity);\n        }\n    }, [alert, alertSeverity, alertOpen]);\n\n    if (location.pathname === '/' && searchParams.get('video')) {\n        return <NavigateToVideo searchParams={searchParams} />;\n    }\n\n    const nothingLoaded =\n        (loading && !videoFrameRef.current) ||\n        (sources.subtitleFiles.length === 0 && !sources.audioFile && !sources.videoFile);\n    const appBarHidden = sources.videoFile !== undefined && ((theaterMode && !videoPopOut) || videoFullscreen);\n    const effectiveCopyHistoryOpen = copyHistoryOpen && !videoFullscreen;\n\n    return (\n        <ThemeProvider theme={theme}>\n            <CssBaseline />\n            <div\n                onDrop={handleDrop}\n                onDragOver={handleDragOver}\n                onDragEnter={handleDragEnter}\n                onDragLeave={handleDragLeave}\n            >\n                <Alert open={alertOpen} onClose={handleAlertClosed} autoHideDuration={3000} severity={alertSeverity}>\n                    {alert}\n                </Alert>\n                <Routes>\n                    <Route\n                        path=\"/video\"\n                        element={\n                            <>\n                                <RenderVideo\n                                    searchParams={searchParams}\n                                    settingsProvider={settingsProvider}\n                                    playbackPreferences={playbackPreferences}\n                                    extension={extension}\n                                    ankiDialogFinishedRequest={ankiDialogFinishedRequest}\n                                    onAnkiDialogRequest={handleAnkiDialogRequestFromVideoPlayer}\n                                    onError={handleError}\n                                    onPlayModeChangedViaBind={handleAutoPauseModeChangedViaBind}\n                                />\n                                <AnkiDialog\n                                    open={ankiDialogOpen}\n                                    disabled={ankiDialogDisabled}\n                                    audioClip={ankiDialogAudioClip}\n                                    image={ankiDialogImage}\n                                    source={itemSourceString(ankiDialogItem)}\n                                    url={ankiDialogItem?.url}\n                                    sliderContext={ankiDialogItemSliderContext}\n                                    customFields={settingsProvider.customAnkiFields}\n                                    anki={anki}\n                                    settingsProvider={settingsProvider}\n                                    onCancel={handleAnkiDialogCancel}\n                                    onRewind={handleAnkiDialogRewind}\n                                    onProceed={handleAnkiDialogProceed}\n                                    onViewImage={handleViewImage}\n                                />\n                                <ImageDialog open={imageDialogOpen} image={image} onClose={handleImageDialogClosed} />\n                            </>\n                        }\n                    />\n                    <Route\n                        path=\"/\"\n                        element={\n                            <div>\n                                <CopyHistory\n                                    items={copiedSubtitles}\n                                    open={effectiveCopyHistoryOpen}\n                                    drawerWidth={drawerWidth}\n                                    onClose={handleCloseCopyHistory}\n                                    onDelete={handleDeleteCopyHistoryItem}\n                                    onClipAudio={handleClipAudio}\n                                    onDownloadImage={handleDownloadImage}\n                                    onDownloadSectionAsSrt={handleDownloadCopyHistorySectionAsSrt}\n                                    onSelect={handleSelectCopyHistoryItem}\n                                    onAnki={handleAnki}\n                                />\n                                <AnkiDialog\n                                    open={ankiDialogOpen}\n                                    disabled={ankiDialogDisabled}\n                                    audioClip={ankiDialogAudioClip}\n                                    image={ankiDialogImage}\n                                    source={itemSourceString(ankiDialogItem)}\n                                    url={ankiDialogItem?.url}\n                                    sliderContext={ankiDialogItemSliderContext}\n                                    customFields={settingsProvider.customAnkiFields}\n                                    anki={anki}\n                                    settingsProvider={settingsProvider}\n                                    onCancel={handleAnkiDialogCancel}\n                                    onRewind={handleAnkiDialogRewind}\n                                    onProceed={handleAnkiDialogProceed}\n                                    onViewImage={handleViewImage}\n                                    onOpenSettings={handleOpenSettings}\n                                />\n                                <ImageDialog open={imageDialogOpen} image={image} onClose={handleImageDialogClosed} />\n                                <SettingsDialog\n                                    anki={anki}\n                                    extension={extension}\n                                    open={settingsDialogOpen}\n                                    onClose={handleCloseSettings}\n                                    settings={settingsProvider.settings}\n                                    scrollToId={settingsDialogScrollToId}\n                                />\n                                <Bar\n                                    title={fileName || 'asbplayer'}\n                                    drawerWidth={drawerWidth}\n                                    drawerOpen={effectiveCopyHistoryOpen}\n                                    hidden={appBarHidden}\n                                    subtitleFiles={sources.subtitleFiles}\n                                    onOpenCopyHistory={handleOpenCopyHistory}\n                                    onDownloadSubtitleFilesAsSrt={handleDownloadSubtitleFilesAsSrt}\n                                    onOpenSettings={handleOpenSettings}\n                                    onFileSelector={handleFileSelector}\n                                />\n                                <input\n                                    ref={fileInputRef}\n                                    onChange={handleFileInputChange}\n                                    type=\"file\"\n                                    accept=\".srt,.ass,.vtt,.sup,.mp3,.m4a,.aac,.flac,.ogg,.wav,.opus,.mkv,.mp4,.avi\"\n                                    multiple\n                                    hidden\n                                />\n                                <Content drawerWidth={drawerWidth} drawerOpen={effectiveCopyHistoryOpen}>\n                                    <div style={{ width: '100%', height: '100%', position: 'relative' }}>\n                                        {nothingLoaded && (\n                                            <LandingPage\n                                                latestExtensionVersion={latestExtensionVersion}\n                                                extensionUrl={extensionUrl}\n                                                extension={extension}\n                                                loading={loading}\n                                                dragging={dragging}\n                                                appBarHidden={appBarHidden}\n                                                onFileSelector={handleFileSelector}\n                                            />\n                                        )}\n                                        <DragOverlay\n                                            dragging={dragging}\n                                            appBarHidden={appBarHidden}\n                                            loading={loading}\n                                        />\n                                    </div>\n                                    <Player\n                                        subtitleReader={subtitleReader}\n                                        settingsProvider={settingsProvider}\n                                        playbackPreferences={playbackPreferences}\n                                        onCopy={handleCopy}\n                                        onError={handleError}\n                                        onUnloadAudio={handleUnloadAudio}\n                                        onUnloadVideo={handleUnloadVideo}\n                                        onLoaded={handleSourcesLoaded}\n                                        onTabSelected={handleTabSelected}\n                                        onAnkiDialogRequest={handleAnkiDialogRequest}\n                                        onAppBarToggle={handleAppBarToggle}\n                                        onFullscreenToggle={handleFullscreenToggle}\n                                        onHideSubtitlePlayer={handleHideSubtitlePlayer}\n                                        onVideoPopOut={handleVideoPopOut}\n                                        onPlayModeChangedViaBind={handleAutoPauseModeChangedViaBind}\n                                        tab={tab}\n                                        availableTabs={availableTabs}\n                                        sources={sources}\n                                        jumpToSubtitle={jumpToSubtitle}\n                                        rewindSubtitle={rewindSubtitle}\n                                        videoFrameRef={videoFrameRef}\n                                        videoChannelRef={videoChannelRef}\n                                        extension={extension}\n                                        drawerOpen={effectiveCopyHistoryOpen}\n                                        appBarHidden={appBarHidden}\n                                        videoFullscreen={videoFullscreen}\n                                        hideSubtitlePlayer={hideSubtitlePlayer || videoFullscreen}\n                                        videoPopOut={videoPopOut}\n                                        disableKeyEvents={disableKeyEvents}\n                                        ankiDialogRequested={ankiDialogRequested}\n                                        ankiDialogFinishedRequest={ankiDialogFinishedRequest}\n                                        keyBinder={keyBinder}\n                                    />\n                                </Content>\n                            </div>\n                        }\n                    />\n                </Routes>\n            </div>\n        </ThemeProvider>\n    );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import '@fontsource/roboto';\nimport { createRoot } from 'react-dom/client';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\n\ncreateRoot(document.querySelector('#root')!).render(\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <App />\n    </BrowserRouter>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}