{"version":3,"sources":["hooks/useWindowSize/index.ts","../../common/src/KeyBinder.ts","../../common/src/Mp3Encoder.ts","../../common/src/mp3-encoder.js","../../common/src/util.ts","../../common/src/AudioClip.ts","../../common/src/Model.ts","../../common/src/CanvasResizer.ts","../../common/src/Image.ts","../../common/src/Fetcher.ts","../../common/src/Anki.ts","../../common/src/SubtitleCollection.ts","../../common/src/AutoPauseContext.ts","components/Alert.tsx","../../common/components/src/TagsTextField.tsx","../../common/components/src/ImageDialog.tsx","../../common/components/src/SubtitleTextImage.tsx","../../common/components/src/AnkiDialog.tsx","components/background-colored.png","components/DragOverlay.tsx","services/SubtitleReader.ts","components/Bar.tsx","services/util.ts","components/CopyHistory.tsx","components/LandingPage.tsx","services/BroadcastChannelVideoProtocol.ts","services/ChromeTabVideoProtocol.ts","services/Clock.ts","components/Controls.tsx","services/MediaAdapter.ts","components/SubtitlePlayer.tsx","services/VideoChannel.ts","components/Player.tsx","components/CustomFieldDialog.tsx","components/SettingsDialog.tsx","services/CachedLocalStorage.ts","services/SettingsProvider.ts","services/PlayerChannel.ts","services/AppKeyBinder.ts","components/VideoPlayer.tsx","services/ChromeExtension.ts","services/ChromeExtensionProvider.ts","services/PlaybackPreferences.ts","components/App.tsx","reportWebVitals.js","index.tsx"],"names":["useWindowSize","enabled","useState","size","setSize","useLayoutEffect","updateSize","window","innerWidth","innerHeight","addEventListener","removeEventListener","DefaultKeyBinder","keyBindSet","this","onCopy","disabledGetter","subtitleGetter","useCapture","shortcut","copySubtitle","keys","handler","copyHandler","hotkeys","capture","unbind","event","subtitle","onAnkiExport","ankiExport","ankiExportHandler","onUpdateLastCard","updateLastCard","updateLastCardHandler","onSeekToSubtitle","timeGetter","subtitlesGetter","delegate","forward","subtitles","length","_adjacentSubtitle","start","end","previousShortcut","seekToPreviousSubtitle","nextShortcut","seekToNextSubtitle","previousHandler","nextHandler","onSeekToBeginningOfCurrentSubtitle","seekToBeginningOfCurrentSubtitle","_currentSubtitle","undefined","time","currentSubtitle","now","minDiff","Number","MAX_SAFE_INTEGER","i","s","diff","onSeekBackwardOrForward","backShortcut","seekBackward","seekForward","backHandler","onOffsetChange","subtitleStart","originalStart","adjustOffsetToPreviousSubtitle","adjustOffsetToNextSubtitle","adjacentSubtitleIndex","Math","max","increase","currentOffset","decreaseShortcut","decreaseOffset","increaseShortcut","increaseOffset","decreaseHandler","increaseHandler","onAdjustPlaybackRate","increasePlaybackRate","decreasePlaybackRate","onToggleSubtitles","toggleSubtitles","onToggleSubtitleTrack","shortcuts","toggleVideoSubtitleTrack1","toggleVideoSubtitleTrack2","filter","track","handlers","push","onToggleSubtitleTrackInList","toggleAsbplayerSubtitleTrack1","toggleAsbplayerSubtitleTrack2","onPlay","togglePlay","onAutoPause","toggleAutoPause","toggleCondensedPlayback","Mp3Encoder","blob","workerFactory","Promise","resolve","reject","a","reader","FileReader","onload","e","audioContext","AudioContext","target","Error","decodeAudioData","result","audioBuffer","channels","numberOfChannels","getChannelData","worker","postMessage","command","sampleRate","onmessage","Blob","data","buffer","type","terminate","onerror","error","message","readAsArrayBuffer","Worker_fn","Worker","Direction","humanReadableTime","timestamp","seconds","nearestTenth","totalSeconds","floor","round","minutes","hours","String","padStart","surroundingSubtitles","index","countRadius","timeRadius","startIndex","atBoundary","backward","endIndex","slice","mockSurroundingSubtitles","middleSubtitle","maxTimestamp","offset","afterTimestamp","min","text","originalEnd","beforeTimestamp","unshift","initialIndex","direction","next","abs","subtitleIntersectsTimeInterval","interval","overlapStart","joinSubtitles","trim","map","join","download","name","url","URL","createObjectURL","document","createElement","body","appendChild","style","display","href","sanitize","click","revokeObjectURL","remove","PostMineAction","AutoPausePreference","PlayMode","defaultMp3WorkerFactory","Base64AudioData","baseName","playbackRate","base64","extension","_name","_start","_end","_base64","_extension","playingAudio","stopAudioTimeout","cachedBlob","_blob","stopAudio","clearTimeout","audio","Audio","src","preload","load","play","setTimeout","pause","fetch","FileAudioData","file","trackId","recorderMimeType","clippingAudio","clippingAudioReject","stopClippingTimeout","_recorderConfiguration","recorderExtension","readAsDataURL","onloadend","substring","indexOf","_clipAudio","_audioElement","currentTime","oncanplay","stream","_captureStream","recorder","MediaRecorder","mimeType","chunks","ondataavailable","finished","onstop","stop","getAudioTracks","source","selectTrack","onloadedmetadata","audioTracks","t","id","captureStream","mozCaptureStream","audioStream","MediaStream","getVideoTracks","addTrack","AUDIO_TYPES","Object","isTypeSupported","Mp3AudioData","encode","isSliceable","AudioClip","mp3WorkerFactory","subtitleFileName","lastIndexOf","CanvasResizer","canvas","ctx","maxWidth","maxHeight","widthRatio","width","heightRatio","height","ratio","newWidth","newHeight","createImageBitmap","resizeWidth","resizeHeight","then","sprite","drawImage","catch","Base64ImageData","_dataUrl","FileImageData","_canvas","dataUrl","toDataURL","toBlob","video","_videoElement","videoWidth","videoHeight","getContext","resizer","resize","Image","bitMap","imageName","HttpFetcher","method","JSON","stringify","response","json","ankiQuerySpecialCharacters","Anki","settingsProvider","fetcher","ankiConnectUrl","_executeAction","modelName","word","query","wordField","_escapeQuery","escaped","char","includes","definition","audioClip","image","customFieldValues","tags","mode","fields","_appendField","sentenceField","definitionField","sourceField","urlField","customFieldName","customAnkiFields","params","note","deckName","deck","noteType","options","allowDuplicate","duplicateScope","duplicateScopeOptions","checkChildren","gui","updateLast","audioField","sanitizedName","_sanitizeFileName","_storeMediaFile","fileName","filename","imageField","recentNotes","sort","lastNoteId","notes","infoResponse","noteId","info","value","_inheritHtmlMarkup","fieldName","multiline","newValue","split","existingValue","replacement","original","markedUp","htmlTagRegex","RegExp","markedUpWithoutBreaklines","replace","inherited","match","exec","action","version","SubtitleCollection","tree","gapsTree","IntervalTree","returnLastShown","returnNextToShow","last","insert","lastShown","nextToShow","startedShowing","willStopShowing","showing","search","gapIntervals","nextStart","high","showingCheckRadiusMs","emptySubtitleCollection","AutoPauseContext","lastStartedShowing","lastWillStopShowing","onStartedShowing","onWillStopShowing","onNextToShow","useAlertStyles","makeStyles","root","justifyContent","position","top","pointerEvents","zIndex","Alert","props","classes","useEffect","open","timeout","onClose","autoHideDuration","className","Grow","in","severity","children","TagsTextField","onTagsChange","setValue","handleChange","useCallback","currentValue","endsWith","newTags","splitTags","tag","extractTagsFromString","TextField","onChange","useStyles","theme","backgroundSize","ImageDialog","resizeRatio","setDataUrl","setWidth","setHeight","windowWidth","windowHeight","img","fetchImage","Dialog","Card","CardMedia","title","SubtitleTextImage","availableWidth","scale","textImage","screen","alt","marginBottom","spacing","flexGrow","mediaField","cursor","rangeSelectSlider","transform","sliderMarksFromSliderContext","sliderContext","boundary","seenTimestamps","label","mark","sliderValueLabelFormat","ms","ValueLabelComponent","Tooltip","enterTouchDelay","placement","useTextImageSetStyles","padding","backgroundColor","palette","disabledBackground","TextImageSet","selectedSubtitles","Paper","elevation","TextFieldEndAdornment","withStyles","InputAdornment","AnkiDialog","disabled","initialText","onProceed","onRewind","onCancel","onViewImage","onOpenSettings","onRerecord","initialAudioClip","initialSource","initialUrl","customFields","anki","initialDefinition","initialWord","initialCustomFieldValues","initialSelectedTimestampInterval","timestampInterval","forceTimestampBoundaryInterval","timestampBoundaryInterval","forceInitialTimestampInterval","initialTimestampInterval","initialLastAppliedTimestampIntervalToText","lastAppliedTimestampIntervalToText","initialLastAppliedTimestampIntervalToAudio","lastAppliedTimestampIntervalToAudio","stateRef","setDefinition","setText","setWord","lastSearchedWord","setLastSearchedWord","setSource","setTags","setUrl","duplicateNotes","setDuplicateNotes","wordTimestamp","setWordTimestamp","setCustomFieldValues","setTimestampInterval","setSelectedSubtitles","setInitialTimestampInterval","initialTimestampBoundaryInterval","setInitialTimestampBoundaryInterval","setTimestampBoundaryInterval","timestampMarks","setTimestampMarks","setLastAppliedTimestampIntervalToText","setLastAppliedTimestampIntervalToAudio","setAudioClip","dialogRefCallback","element","getBoundingClientRect","current","textForTimestampInterval","subtitleEnd","findIndex","subtitlesToDisplay","boundaryIntervalFromSliderContext","newAudioClip","preferMp3","toMp3","audioPaddingStart","audioPaddingEnd","Date","trimmedWord","findNotesWithWord","console","wordHelperText","handlePlayAudio","preventDefault","stopPropagation","handleCustomFieldChange","newCustomFieldValues","assign","handleViewImage","handleApplyTimestampIntervalToText","newText","handleTimestampIntervalChange","newTimestampInterval","expectedUnchangedText","handleApplyTimestampIntervalToAudio","handleResetTimestampInterval","handleZoomInTimestampInterval","newTimestampBoundaryInterval","handleZoomOutTimestampInterval","handleCopyImageToClipboard","navigator","clipboard","ClipboardItem","pngBlob","write","disableApplyTextSelection","audioActionElement","IconButton","onClick","edge","disableEnforceFocus","fullWidth","Toolbar","Typography","variant","DialogContent","ref","color","maxRows","InputProps","endAdornment","rows","helperText","findNotesWithWordGui","Grid","container","item","Slider","valueLabelFormat","marks","step","valueLabelDisplay","marginTop","DialogActions","Button","dragging","appBarHidden","transparentBackground","content","flexDirection","alignItems","textAlign","backgroundRepeat","backgroundPosition","backgroundImage","coloredBackground","backgroundBlendMode","background","DragOverlay","loading","Fade","tagRegex","assNewLineRegex","helperElement","helperCanvas","SubtitleReader","textFilter","_textFilter","xmlParser","files","flatten","all","f","_subtitles","flatMap","nodes","n1","n2","parseSrt","node","cue","_filterText","isFromNetflix","parser","WebVTT","Parser","StringDecoder","cues","oncue","c","lines","newLines","line","_fixRTL","onflush","startTime","endTime","parse","flush","parseAss","dialogues","dialogue","slices","fragments","fragment","xml","_xmlParser","textNodes","elm","parseFloat","_decodeHTML","pipeThrough","parseDisplaySets","pipeTo","_displaySetsToSubtitles","DOMParser","doc","parseFromString","_xmlNodePath","documentElement","beginAttribute","getAttribute","endAttribute","textContent","_parseTtmlTimestamp","parts","parent","path","_dropTagNamespace","tagName","colonIndex","imageDataArray","currentImageDisplaySet","WritableStream","displaySet","controller","objectDefinitionSegments","screenWidth","presentationCompositionSegment","screenHeight","Uint8ClampedArray","imageData","putImageData","header","presentationTimestamp","endDefinitionSegment","index1","index2","newLine","innerHTML","innerText","XMLParser","ignoreAttributes","regex","subtitleNode","writeSrt","format","subtitlesToSrt","leftButton","marginRight","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","drawerWidth","easeOut","enteringScreen","copyHistoryButton","copyHistoryButtonShift","hide","useCopyHistoryTooltipStyles","tooltip","show","CopyHistoryTooltip","toolTipProps","Bar","drawerOpen","hidden","subtitleFiles","onOpenCopyHistory","onFileSelector","onDownloadSubtitleFilesAsSrt","menuOpen","setMenuOpen","menuAnchorEl","setMenuAnchorEl","canSaveAsSrt","find","handleFileAction","currentTarget","handleMenuClose","handleOpenFilesFromMenu","handleDownloadSubtitleFilesAsSrt","Popover","anchorEl","anchorOrigin","vertical","horizontal","ListItem","button","AppBar","clsx","disableFocusListener","disableHoverListener","disableTouchListener","component","rel","computeStyles","subtitleColor","subtitleSize","subtitleOutlineThickness","subtitleOutlineColor","subtitleBackgroundOpacity","subtitleBackgroundColor","subtitleFontFamily","styles","fontSize","thickness","opacity","hex","r","parseInt","g","b","hexToRgb","timeDurationDisplay","milliseconds","totalMilliseconds","includeMilliseconds","secs","mins","hrs","pad","n","zeros","drawer","flexShrink","drawerPaper","drawerHeader","mixins","toolbar","listContainer","overflowY","overflowX","listItem","hover","listItemGutters","paddingLeft","paddingRight","listItemIconRoot","minWidth","emptyState","emptyText","secondary","Menu","onSelect","onClipAudio","onDownloadImage","onDelete","handleCopy","writeText","handleJumpTo","handleClipAudio","handleDownloadImage","handleDelete","transformOrigin","ListItemText","primaryTypographyProps","primary","videoFile","audioFile","CopyHistory","scrollToBottomRefCallback","scrollIntoView","menuItem","setMenuItem","handleMenu","handleMenuClosed","items","currentKey","lastSeenItemName","itemNameCounters","itemsBySection","key","ListItemSecondaryAction","onDownloadSectionAsSrt","gutters","ListItemIcon","onAnki","wrap","Fragment","Drawer","anchor","paper","Divider","browseLink","LandingPage","latestExtensionVersion","extensionUrl","installedExtensionVersion","setInstalledExtensionVersion","fetchInstalledExtensionVersion","extensionUpdateAvailable","gt","extensionNotInstalled","Link","BroadcastChannelVideoProtocol","channelId","channel","onMessage","BroadcastChannel","that","close","ChromeTabVideoProtocol","tabId","listener","unsubscribeFromExtension","subscribe","sendMessage","Clock","accumulated","started","_rate","rate","_elapsed","useControlStyles","left","bottom","buttonContainer","timeDisplay","marginLeft","numberInput","volumeInputContainerShown","short","volumeInputContainerHidden","volumeInputHidden","volumeInputShown","volumeInputThumbHidden","volumeInputThumbShown","subContainer","inactiveButton","inactiveTopButton","progress","margin","topButton","gridContainer","useProgressBarStyles","mouseEventListener","fillContainer","fillContainerThick","easeInOut","fill","handleContainer","handle","borderRadius","handleOn","shortest","VolumeSlider","verticalAlign","thumb","boxShadow","active","displayTime","secondsInMinute","ProgressBar","onSeek","mouseOver","setMouseOver","containerRef","useRef","handleClick","rect","right","pageX","handleMouseOver","handleMouseOut","progressWidth","elementWidth","fillStyle","handleStyle","fillContainerClassName","handleClassName","onMouseOver","onMouseOut","AudioTrackSelector","selectedAudioTrack","onAudioTrackSelected","list","selected","language","TabSelector","tabs","selectedTab","onTabSelected","MediaUnloader","onUnload","PlayModeSelector","selectedPlayMode","onPlayMode","normal","condensed","autoPause","Controls","clock","playing","offsetEnabled","displayLength","playbackRateEnabled","mousePositionRef","onShow","onPause","onUnloadAudio","onUnloadVideo","onPlaybackRateChange","onVolumeChange","disableKeyEvents","playbackPreferences","closeEnabled","volumeEnabled","playMode","playModeEnabled","subtitlesEnabled","subtitlesToggle","onSubtitlesToggle","popOutEnabled","popOut","onPopOutToggle","fullscreenEnabled","fullscreen","onFullscreenToggle","hideSubtitlePlayerToggleEnabled","subtitlePlayerHidden","onHideSubtitlePlayerToggle","showOnMouseMovement","theaterModeToggleEnabled","theaterModeEnabled","onTheaterModeToggle","setShow","audioTrackSelectorOpen","setAudioTrackSelectorOpen","audioTrackSelectorAnchorEl","setAudioTrackSelectorAnchorEl","tabSelectorOpen","setTabSelectorOpen","tabSelectorAnchorEl","setTabSelectorAnchorEl","audioUnloaderOpen","setAudioUnloaderOpen","audioUnloaderAnchorEl","setAudioUnloaderAnchorEl","videoUnloaderOpen","setVideoUnloaderOpen","videoUnloaderAnchorEl","setVideoUnloaderAnchorEl","playModeSelectorOpen","setPlayModeSelectorOpen","playModeSelectorAnchorEl","setPlayModeSelectorAnchorEl","showVolumeBar","setShowVolumeBar","volume","setVolume","lastCommittedVolume","setLastCommittedVolume","lastMousePositionRef","x","y","lastShowTimestampRef","lastNumberInputChangeTimestampRef","lastShowRef","forceShowRef","offsetInputWidth","setOffsetInputWidth","playbackRateInputWidth","setPlaybackRateInputWidth","offsetInputRef","playbackRateInputRef","closeButtonRef","updateState","forceUpdate","handleSeek","savedVolume","setInterval","currentShow","pow","offsetTop","offsetHeight","activeElement","clearInterval","updateOffset","offsetSeconds","toFixed","blur","updatePlaybackRate","handleKey","newOffset","isNaN","newPlaybackRate","handleNumberInputClicked","inputElement","setSelectionRange","handleAudioTrackSelectorClosed","handleAudioTrackSelectorOpened","handleAudioTrackSelected","handleTabSelectorClosed","handleTabSelectorOpened","handleTabSelected","tab","handleAudioUnloaderClosed","handleAudioUnloaderOpened","handleUnloadAudio","handleVideoUnloaderClosed","handleVideoUnloaderOpened","handleUnloadVideo","handlePlayModeSelectorClosed","handlePlayModeSelectorOpened","handlePlayModeSelected","handleVolumeMouseOut","handleVolumeMouseOver","handleVolumeChange","handleVolumeChangeCommitted","handleVolumeToggle","newVolume","onChangeCommitted","defaultValue","Input","inputRef","disableUnderline","placeholder","MediaAdapter","readyResolves","_onMediaCanPlay","callback","readyState","useSubtitlePlayerStyles","default","compressed","table","noSubtitles","useSubtitleRowStyles","subtitleRow","overflowWrap","whiteSpace","compressedSubtitle","disabledSubtitle","copyButton","SubtitleRow","React","memo","subtitleRef","onClickSubtitle","onCopySubtitle","copyButtonEnabled","tableRowProps","textRef","textSelected","setTextSelected","disabledClassName","availWidth","TableRow","onMouseUp","selection","getSelection","isSameNode","anchorNode","parentNode","TableCell","SubtitlePlayer","onSubtitlesSelected","autoPauseContext","subtitleCollection","jumpToSubtitle","displayHelp","lastJumpToTopTimestamp","disabledSubtitleTracks","keyBinder","playingRef","clockRef","subtitleRefs","useMemo","Array","_","createRef","subtitleCollectionRef","empty","subtitleRefsRef","disableKeyEventsRef","selectedSubtitleIndexes","setSelectedSubtitleIndexes","selectedSubtitleIndexesRef","lengthRef","hiddenRef","lastScrollTimestampRef","requestAnimationRef","autoPauseContextRef","onSubtitlesSelectedRef","requestAnimationFrame","update","smallestIndex","currentSubtitleIndexes","subtitlesAt","keysAreEqual","scrollToSubtitleRef","allowScroll","block","inline","behavior","cancelAnimationFrame","scrollToCurrentSubtitle","indexes","scrollIfVisible","visibilityState","firstSubtitleRef","bindAdjustOffset","bindOffsetToSubtitle","bindSeekToSubtitle","bindSeekToBeginningOfCurrentSubtitle","bindSeekBackwardOrForward","handleScroll","jumpToIndex","calculateSurroundingSubtitlesForIndex","surroundingSubtitlesCountRadius","surroundingSubtitlesTimeRadius","calculateSurroundingSubtitles","calculateCurrentSubtitle","subtitleIndexes","bindCopy","none","bindToggleSubtitleTrackInList","bindAnkiExport","showAnkiDialog","bindUpdateLastCard","subtitleTable","TableContainer","Table","TableBody","square","VideoChannel","protocol","isReady","readyCallbacks","playCallbacks","pauseCallbacks","audioTrackSelectedCallbacks","currentTimeCallbacks","exitCallbacks","offsetCallbacks","playbackRateCallbacks","popOutToggleCallbacks","copyCallbacks","playModeCallbacks","hideSubtitlePlayerToggleCallbacks","appBarToggleCallbacks","fullscreenToggleCallbacks","ankiDialogRequestCallbacks","toggleSubtitleTrackInListCallbacks","_playbackRate","readyMessage","paused","readyStateMessage","Event","playMessage","echo","pauseMessage","audioTrackSelectedMessage","currentTimeMessage","offsetMessage","playbackRateMessage","copyMessage","postMineAction","preventDuplicate","toggleSubtitleTrackInListMessage","videoFileName","subtitleFileNames","names","settings","msg","videoFrame","border","trackLength","audioRef","videoRef","useOffset","subtitlesLength","audioLength","videoLength","Player","sources","flattenSubtitleFiles","audioFileUrl","videoFileUrl","subtitleReader","videoFrameRef","videoChannelRef","videoFullscreen","hideSubtitlePlayer","videoPopOut","availableTabs","ankiDialogRequested","ankiDialogFinishedRequest","onError","onLoaded","onAnkiDialogRequest","onAppBarToggle","onHideSubtitlePlayer","onVideoPopOut","onPlayModeChangedViaBind","rewindSubtitle","setPlayMode","playModeRef","setSubtitles","subtitlesRef","Boolean","loadingSubtitles","setLoadingSubtitles","setPlaying","setLastJumpToTopTimestamp","setOffset","setPlaybackRate","setAudioTracks","setSelectedAudioTrack","setChannelId","setResumeOnFinishedAnkiDialogRequest","hideSubtitlePlayerRef","setDisabledSubtitleTracks","mediaAdapter","handleOnStartedShowingSubtitle","autoPausePreference","atStart","handleOnWillStopShowingSubtitle","atEnd","context","seek","forwardToMedia","setTime","clear","applyOffset","forwardToVideo","newSubtitles","installed","lte","channelClosed","onReady","uuidv4","init","subscribed","onExit","ready","subtitleSettings","ankiSettings","miscSettings","hideSubtitlePlayerToggle","onOffset","onPlaybackRate","onCurrentTime","tracks","newTracks","resumeOnFinishedAnkiDialogRequest","resume","seeking","expectedSeekTime","nextSubtitle","t0","process","encodeURIComponent","handlePlay","handlePause","handleSeekToSubtitle","shouldPlay","handleCopyFromSubtitlePlayer","handleMouseMove","screenX","screenY","audioTrackSelected","handleOffsetChange","HTMLMediaElement","handlePlaybackRateChange","handlePlayMode","handleToggleSubtitleTrack","handleSubtitlesSelected","autoCopyCurrentSubtitle","hasFocus","bindPlay","bindAdjustPlaybackRate","togglePlayMode","newPlayMode","bindAutoPause","bindCondensedPlayback","unbindCopy","unbindAnkiExport","appBarToggle","fullscreenToggle","loaded","videoInWindow","onMouseMove","gte","CustomFieldDialog","existingCustomFieldNames","setFieldName","fieldExists","DialogTitle","subtitleSetting","subtitlePreview","subtitlePreviewInput","outline","addFieldButton","switchLabel","useSelectableSettingStyles","formControl","SelectableSetting","selections","removable","onSelectionChange","onRemoval","FormControl","InputLabel","Select","MenuItem","keyBindProperties","extensionOverridden","modifierKeyReplacements","isMacOs","modifierKeys","useKeyBindFieldStyles","labelItem","KeyBindField","onKeysChange","onOpenExtensionShortcuts","currentKeyString","setCurrentKeyString","currentKeyStringRef","onKeysChangeRef","editing","setEditing","handleEditKeyBinding","nativeEvent","detail","pressed","getPressedKeyString","isAModifier","isBModifier","keyup","contains","xs","contentEditable","SettingsDialog","scrollToId","setAnkiConnectUrl","ankiConnectUrlError","setAnkiConnectUrlError","ankiConnectUrlChangeTimestamp","setAnkiConnectUrlChangeTimestamp","setDeck","deckNames","setDeckNames","setNoteType","modelNames","setModelNames","setSentenceField","setDefinitionField","setAudioField","setImageField","setWordField","setSourceField","setUrlField","setCustomFields","setPreferMp3","fieldNames","setFieldNames","customFieldDialogOpen","setCustomFieldDialogOpen","setAudioPaddingStart","setAudioPaddingEnd","maxImageWidth","setMaxImageWidth","maxImageHeight","setMaxImageHeight","setSurroundingSubtitlesCountRadius","setSurroundingSubtitlesTimeRadius","setSubtitleColor","setSubtitleSize","setSubtitleOutlineColor","setSubtitleOutlineThickness","setSubtitleBackgroundColor","setSubtitleBackgroundOpacity","setSubtitleFontFamily","imageBasedSubtitleScaleFactor","setImageBasedSubtitleScaleFactor","setSubtitlePreview","themeType","setThemeType","copyToClipboardOnMine","setCopyToClipboardOnMine","setAutoPausePreference","setKeyBindSet","rememberSubtitleOffset","setRememberSubtitleOffset","setAutoCopyCurrentSubtitle","subtitleRegexFilter","setSubtitleRegexFilter","subtitleRegexFilterTextReplacement","setSubtitleRegexFilterTextReplacement","handleAnkiConnectUrlChange","handleRetryAnkiConnectUrl","handleDeckChange","handleDeckSelectionChange","handleNoteTypeChange","handleNoteTypeSelectionChange","handleSentenceFieldChange","handleSentenceFieldSelectionChange","handleDefinitionFieldChange","handleDefinitionFieldSelectionChange","handleAudioFieldChange","handleAudioFieldSelectionChange","handleImageFieldChange","handleImageFieldSelectionChange","handleWordFieldChange","handleWordFieldSelectionChange","handleSourceFieldChange","handleSourceFieldSelectionChange","handleUrlFieldChange","handleUrlFieldSelectionChange","handleAudioPaddingStart","handleAudioPaddingEnd","handleMaxImageWidth","handleMaxImageHeight","handleSurroundingSubtitlesCountRadius","handleSurroundingSubtitlesTimeRadius","handleSubtitleColorChange","handleSubtitleSizeChange","handleSubtitleOutlineColorChange","handleSubtitleOutlineThicknessChange","handleSubtitleBackgroundColorChange","handleSubtitleBackgroundOpacityChange","handleSubtitleFontFamilyChange","handleSubtitlePreviewChange","handleImageBasedSubtitleScaleFactorChange","handleAddCustomField","oldCustomFields","newCustomFields","handleCustomFieldRemoval","handleTagsChange","handlePreferMp3Change","checked","handleThemeTypeChange","handleCopyToClipboardOnMine","handleAutoPausePreferenceChange","handleKeysChange","keyBindName","newKeyBindSet","handleRememberSubtitleOffsetChange","handleAutoCopyCurrentSubtitle","handleSubtitleRegexFilter","handleSubtitleRegexFilterTextReplacement","subtitlePreviewStyles","canceled","requestPermission","refreshFieldNames","modelFieldNames","handleClose","customFieldInputs","getElementById","validRegex","regexIsValid","FormLabel","FormGroup","FormHelperText","location","hostname","FormControlLabel","control","Switch","labelPlacement","inputProps","RadioGroup","row","Radio","properties","extensionCommands","openShortcuts","CachedLocalStorage","_cache","cached","fromStorage","localStorage","getItem","setItem","removeItem","defaultAutoPausePreference","defaultKeyBindSet","ankiConnectUrlKey","deckKey","noteTypeKey","sentenceFieldKey","definitionFieldKey","audioFieldKey","imageFieldKey","wordFieldKey","sourceFieldKey","urlFieldKey","customAnkiFieldsKey","tagsKey","subtitleSizeKey","subtitleColorKey","subtitleOutlineThicknessKey","subtitleOutlineColorKey","subtitleBackgroundColorKey","subtitleBackgroundOpacityKey","subtitleFontFamilyKey","subtitlePreviewKey","imageBasedSubtitleScaleFactorKey","audioPaddingStartKey","audioPaddingEndKey","maxImageWidthKey","maxImageHeightKey","surroundingSubtitlesCountRadiusKey","surroundingSubtitlesTimeRadiusKey","preferMp3Key","themeTypeKey","copyToClipboardOnMineKey","autoPausePreferenceKey","keyBindSetKey","rememberSubtitleOffsetKey","autoCopyCurrentSubtitleKey","subtitleRegexFilterKey","subtitleRegexFilterTextReplacementKey","SettingsProvider","_tags","_keyBindSet","_storage","newSettings","get","delete","set","_setOptionalItem","ankiFieldsString","tagsString","_getNumberItem","serialized","PlayerChannel","closeCallbacks","subtitlesCallbacks","subtitleSettingsCallbacks","miscSettingsCallbacks","ankiSettingsCallbacks","alertCallbacks","subtitlesMessage","subtitleSettingsMessage","playModeMessage","hideSubtitlePlayerToggleMessage","appBarToggleMessage","fullscreenToggleMessage","ankiSettingsMessage","miscSettingsMessage","alertMessage","AppKeyBinder","defaultKeyBinder","copyHandlers","ankiExportHandlers","updateLastCardHandlers","onExtensionMessage","h","KeyboardEvent","_remove","splice","bindToggleSubtitles","bindToggleSubtitleTrackInVideo","onCondensedPlayback","overflow","cursorHidden","subtitleContainer","lineHeight","notifyReady","playerChannel","outerWidth","availHeight","outerHeight","resizeTo","selectedTrack","VideoPlayer","poppingInRef","setFullscreen","setLength","setVideoFileName","showSubtitles","setShowSubtitles","setSubtitlesEnabled","setSubtitlePlayerHidden","theaterMode","setAppBarHidden","showSubtitlesRef","showCursor","setShowCursor","lastMouseMovementTimestamp","setMiscSettings","setSubtitleSettings","setAnkiSettings","alertOpen","setAlertOpen","setAlertMessage","alertSeverity","setAlertSeverity","videoRefCallback","videoElement","onloadeddata","ontimeupdate","code","errorMessage","selectAudioTrack","updateSubtitlesWithOffset","forwardToPlayer","onSubtitles","onSubtitleSettings","onMiscSettings","onAnkiSettings","onAlert","onbeforeunload","equals","arrayEquals","s1","s2","copy","toggleSubtitleTrackInList","extractSubtitles","noSubtitleCallback","subtitleCallback","handleSubtitlesToggle","handleFullscreenToggle","exitFullscreen","requestFullscreen","handlePopOutToggle","popOutToggle","handleHideSubtitlePlayerToggle","handleTheaterModeToggle","handleDoubleClick","subtitleStyles","handleAlertClosed","bounds","clientX","clientY","controls","onDoubleClick","isMobile","ChromeExtension","windowEventListener","onMessageCallbacks","onTabsCallbacks","heartbeatStarted","sender","tabsCommand","ackRequested","receivedTabs","fromVideoPlayer","_sendHeartbeat","videoPlayer","callbacks","keyBindNameMap","ChromeExtensionProvider","translatedCommands","extensionCommandName","volumeKey","theaterModeKey","offsetKey","PlaybackPreferences","useContentStyles","contentShift","audioClipFromItem","paddingStart","paddingEnd","fromBase64","subtitleFile","fromFile","filePlaybackRate","audioTrack","imageFromItem","mediaTimestamp","itemSourceString","NavigateToVideo","searchParams","to","RenderVideo","Content","App","createTheme","main","red","A400","useLocation","useSearchParams","inVideoPlayer","pathname","extensionProvider","setExtension","setVideoFullscreen","onChromeExtension","drawerRatio","minDrawerSize","copiedSubtitles","setCopiedSubtitles","copiedSubtitlesRef","copyHistoryOpen","setCopyHistoryOpen","setTheaterMode","setHideSubtitlePlayer","setVideoPopOut","alert","setAlert","setJumpToSubtitle","setRewindSubtitle","setSources","setLoading","setDragging","dragEnterRef","setFileName","ankiDialogOpen","setAnkiDialogOpen","ankiDialogDisabled","setAnkiDialogDisabled","ankiDialogItem","setAnkiDialogItem","ankiDialogItemSliderContext","itemSliderContext","ankiDialogAudioClip","ankiDialogImage","setAnkiDialogRequested","setAnkiDialogFinishedRequest","settingsDialogOpen","setSettingsDialogOpen","settingsDialogScrollToId","setSettingsDialogScrollToId","imageDialogOpen","setImageDialogOpen","setDisableKeyEvents","setImage","setTab","setAvailableTabs","fileInputRef","ankiDialogRequestedRef","handleError","handleAnkiDialogRequest","handleAnkiDialogRequestFromVideoPlayer","blobFile","File","handleAnkiDialogProceed","export","newCopiedSubtitle","newCopiedSubtitles","extractText","handleOpenCopyHistory","handleCloseCopyHistory","handleAppBarToggle","fullscreenElement","handleHideSubtitlePlayer","handleVideoPopOut","handleOpenSettings","handleImageDialogClosed","handleCloseSettings","handleDeleteCopyHistoryItem","previous","clip","handleDownloadCopyHistorySectionAsSrt","deduplicated","toISOString","handleSelectCopyHistoryItem","handleAnki","handleAnkiDialogCancel","handleAnkiDialogRewind","subscribeTabs","t1","t2","handleFiles","extensionStartIndex","extractSources","revokeUrls","handleDirectory","fileSystemEntry","webkitGetAsEntry","isDirectory","fileSystemDirectoryEntry","createReader","readEntries","entries","filePromises","unsubscribe","startHeartbeat","syncMessage","handleAutoPauseModeChangedViaBind","oldPlayMode","handleDrop","dataTransfer","allDirectories","handleFileInputChange","handleFileSelector","nonSupSubtitleFiles","filesToSrt","handleDragOver","handleDragEnter","handleDragLeave","handleSourcesLoaded","hash","startsWith","nothingLoaded","effectiveCopyHistoryOpen","ThemeProvider","CssBaseline","onDrop","onDragOver","onDragEnter","onDragLeave","accept","multiple","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","createRoot","querySelector","render","basename"],"mappings":"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","file":"static/js/main.31329032.chunk.js","sourcesContent":["import { useLayoutEffect, useState } from 'react';\n\n// https://stackoverflow.com/questions/19014250/rerender-view-on-browser-resize-with-react\nexport function useWindowSize(enabled: boolean) {\n    const [size, setSize] = useState([0, 0]);\n\n    useLayoutEffect(() => {\n        function updateSize() {\n            if (enabled) {\n                setSize([window.innerWidth, window.innerHeight]);\n            }\n        }\n\n        window.addEventListener('resize', updateSize);\n        updateSize();\n\n        return () => window.removeEventListener('resize', updateSize);\n    }, [enabled]);\n\n    return size;\n}\n","import { SubtitleModel } from './Model';\nimport hotkeys from 'hotkeys-js';\nimport { KeyBindSet } from './Settings';\n\nexport interface KeyBinder {\n    bindCopy<T extends SubtitleModel = SubtitleModel>(\n        onCopy: (event: KeyboardEvent, subtitle: T) => void,\n        disabledGetter: () => boolean,\n        subtitleGetter: () => T | undefined,\n        useCapture?: boolean\n    ): () => void;\n    bindAnkiExport(\n        onAnkiExport: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean\n    ): () => void;\n    bindUpdateLastCard(\n        onUpdateLastCard: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean\n    ): () => void;\n    bindSeekToSubtitle(\n        onSeekToSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean\n    ): () => void;\n    bindSeekToBeginningOfCurrentSubtitle(\n        onSeekToBeginningOfCurrentSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean\n    ): () => void;\n    bindSeekBackwardOrForward(\n        onSeekBackwardOrForward: (event: KeyboardEvent, forward: boolean) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean\n    ): () => void;\n    bindOffsetToSubtitle(\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean\n    ): () => void;\n    bindAdjustOffset(\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\n        disabledGetter: () => boolean,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean\n    ): () => void;\n    bindAdjustPlaybackRate(\n        onAdjustPlaybackRate: (event: KeyboardEvent, increase: boolean) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean\n    ): () => void;\n    bindToggleSubtitles(\n        onToggleSubtitles: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean\n    ): () => void;\n    bindToggleSubtitleTrackInVideo(\n        onToggleSubtitleTrack: (event: KeyboardEvent, extra: any) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean\n    ): () => void;\n    bindToggleSubtitleTrackInList(\n        onToggleSubtitleTrackInList: (event: KeyboardEvent, extra: any) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean\n    ): () => void;\n    bindPlay(onPlay: (event: KeyboardEvent) => void, disabledGetter: () => boolean, useCapture?: boolean): () => void;\n    bindAutoPause(\n        onAutoPause: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean\n    ): () => void;\n    bindCondensedPlayback(\n        onCondensedPlayback: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean\n    ): () => void;\n}\n\nexport class DefaultKeyBinder implements KeyBinder {\n    private readonly keyBindSet: KeyBindSet;\n\n    constructor(keyBindSet: KeyBindSet) {\n        this.keyBindSet = keyBindSet;\n    }\n    bindCopy<T extends SubtitleModel = SubtitleModel>(\n        onCopy: (event: KeyboardEvent, subtitle: T) => void,\n        disabledGetter: () => boolean,\n        subtitleGetter: () => T | undefined,\n        useCapture = false\n    ) {\n        const shortcut = this.keyBindSet.copySubtitle.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = this.copyHandler(onCopy, disabledGetter, subtitleGetter);\n        hotkeys(shortcut, { capture: useCapture }, handler);\n        return () => hotkeys.unbind(shortcut, handler);\n    }\n\n    copyHandler<T extends SubtitleModel>(\n        onCopy: (event: KeyboardEvent, subtitle: T) => void,\n        disabledGetter: () => boolean,\n        subtitleGetter: () => T | undefined\n    ) {\n        return (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            const subtitle = subtitleGetter();\n\n            if (!subtitle) {\n                return;\n            }\n\n            onCopy(event, subtitle);\n        };\n    }\n\n    bindAnkiExport(onAnkiExport: (event: KeyboardEvent) => void, disabledGetter: () => boolean, useCapture = false) {\n        const shortcut = this.keyBindSet.ankiExport.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = this.ankiExportHandler(onAnkiExport, disabledGetter);\n        hotkeys(shortcut, { capture: useCapture }, handler);\n        return () => hotkeys.unbind(shortcut, handler);\n    }\n\n    ankiExportHandler(onAnkiExport: (event: KeyboardEvent) => void, disabledGetter: () => boolean) {\n        return (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onAnkiExport(event);\n        };\n    }\n\n    bindUpdateLastCard(\n        onUpdateLastCard: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture = false\n    ) {\n        const shortcut = this.keyBindSet.updateLastCard.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = this.updateLastCardHandler(onUpdateLastCard, disabledGetter);\n        hotkeys(shortcut, { capture: useCapture }, handler);\n        return () => hotkeys.unbind(shortcut, handler);\n    }\n\n    updateLastCardHandler(onUpdateLastCard: (event: KeyboardEvent) => void, disabledGetter: () => boolean) {\n        return (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onUpdateLastCard(event);\n        };\n    }\n\n    bindSeekToSubtitle(\n        onSeekToSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture = false\n    ) {\n        const delegate = (event: KeyboardEvent, forward: boolean) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            const subtitles = subtitlesGetter();\n\n            if (!subtitles || subtitles.length === 0) {\n                return;\n            }\n\n            const subtitle = this._adjacentSubtitle(forward, timeGetter(), subtitles);\n\n            if (subtitle !== null && subtitle.start >= 0 && subtitle.end >= 0) {\n                onSeekToSubtitle(event, subtitle);\n            }\n        };\n        const previousShortcut = this.keyBindSet.seekToPreviousSubtitle.keys;\n        const nextShortcut = this.keyBindSet.seekToNextSubtitle.keys;\n        const previousHandler = (event: KeyboardEvent) => delegate(event, false);\n        const nextHandler = (event: KeyboardEvent) => delegate(event, true);\n\n        if (previousShortcut) {\n            hotkeys(previousShortcut, { capture: useCapture }, previousHandler);\n        }\n\n        if (nextShortcut) {\n            hotkeys(nextShortcut, { capture: useCapture }, nextHandler);\n        }\n\n        return () => {\n            if (previousShortcut) {\n                hotkeys.unbind(previousShortcut, previousHandler);\n            }\n\n            if (nextShortcut) {\n                hotkeys.unbind(nextShortcut, nextHandler);\n            }\n        };\n    }\n\n    bindSeekToBeginningOfCurrentSubtitle(\n        onSeekToBeginningOfCurrentSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture = false\n    ) {\n        const shortcut = this.keyBindSet.seekToBeginningOfCurrentSubtitle.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            const subtitles = subtitlesGetter();\n\n            if (!subtitles || subtitles.length === 0) {\n                return;\n            }\n\n            const subtitle = this._currentSubtitle(timeGetter(), subtitles);\n\n            if (subtitle !== undefined && subtitle.start >= 0 && subtitle.end >= 0) {\n                onSeekToBeginningOfCurrentSubtitle(event, subtitle);\n            }\n        };\n        hotkeys(shortcut, { capture: useCapture }, handler);\n        return () => hotkeys.unbind(shortcut, handler);\n    }\n\n    _currentSubtitle(time: number, subtitles: SubtitleModel[]) {\n        const now = time;\n        let currentSubtitle: SubtitleModel | undefined;\n        let minDiff = Number.MAX_SAFE_INTEGER;\n\n        for (let i = 0; i < subtitles.length; ++i) {\n            const s = subtitles[i];\n\n            if (s.start < 0 || s.end < 0) {\n                continue;\n            }\n\n            const diff = now - s.start;\n\n            if (now >= s.start && now < s.end) {\n                if (diff < minDiff) {\n                    currentSubtitle = s;\n                    minDiff = diff;\n                }\n            }\n        }\n\n        return currentSubtitle;\n    }\n\n    bindSeekBackwardOrForward(\n        onSeekBackwardOrForward: (event: KeyboardEvent, forward: boolean) => void,\n        disabledGetter: () => boolean,\n        useCapture = false\n    ) {\n        const delegate = (event: KeyboardEvent, forward: boolean) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onSeekBackwardOrForward(event, forward);\n        };\n        const backShortcut = this.keyBindSet.seekBackward.keys;\n        const nextShortcut = this.keyBindSet.seekForward.keys;\n        const backHandler = (event: KeyboardEvent) => delegate(event, false);\n        const nextHandler = (event: KeyboardEvent) => delegate(event, true);\n\n        if (backShortcut) {\n            hotkeys(backShortcut, { capture: useCapture }, backHandler);\n        }\n\n        if (nextShortcut) {\n            hotkeys(nextShortcut, { capture: useCapture }, nextHandler);\n        }\n\n        return () => {\n            if (backShortcut) {\n                hotkeys.unbind(backShortcut, backHandler);\n            }\n\n            if (nextShortcut) {\n                hotkeys.unbind(nextShortcut, nextHandler);\n            }\n        };\n    }\n\n    bindOffsetToSubtitle(\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture = false\n    ) {\n        const delegate = (event: KeyboardEvent, forward: boolean) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            const subtitles = subtitlesGetter();\n\n            if (!subtitles || subtitles.length === 0) {\n                return;\n            }\n\n            const time = timeGetter();\n            const subtitle = this._adjacentSubtitle(forward, time, subtitles);\n\n            if (subtitle !== null) {\n                const subtitleStart = subtitle.originalStart;\n                const newOffset = time - subtitleStart;\n                onOffsetChange(event, newOffset);\n            }\n        };\n        const previousShortcut = this.keyBindSet.adjustOffsetToPreviousSubtitle.keys;\n        const nextShortcut = this.keyBindSet.adjustOffsetToNextSubtitle.keys;\n        const previousHandler = (event: KeyboardEvent) => delegate(event, false);\n        const nextHandler = (event: KeyboardEvent) => delegate(event, true);\n\n        if (previousShortcut) {\n            hotkeys(previousShortcut, { capture: useCapture }, previousHandler);\n        }\n\n        if (nextShortcut) {\n            hotkeys(nextShortcut, { capture: useCapture }, nextHandler);\n        }\n\n        return () => {\n            if (previousShortcut) {\n                hotkeys.unbind(previousShortcut, previousHandler);\n            }\n\n            if (nextShortcut) {\n                hotkeys.unbind(nextShortcut, nextHandler);\n            }\n        };\n    }\n\n    _adjacentSubtitle(forward: boolean, time: number, subtitles: SubtitleModel[]) {\n        const now = time;\n        let adjacentSubtitleIndex = -1;\n        let minDiff = Number.MAX_SAFE_INTEGER;\n\n        for (let i = 0; i < subtitles.length; ++i) {\n            const s = subtitles[i];\n            const diff = forward ? s.start - now : now - s.start;\n\n            if (minDiff <= diff) {\n                continue;\n            }\n\n            if (forward && now < s.start) {\n                minDiff = diff;\n                adjacentSubtitleIndex = i;\n            } else if (!forward && now > s.start) {\n                minDiff = diff;\n                adjacentSubtitleIndex = now < s.end ? Math.max(0, i - 1) : i;\n            }\n        }\n\n        if (adjacentSubtitleIndex !== -1) {\n            return subtitles[adjacentSubtitleIndex];\n        }\n\n        return null;\n    }\n\n    bindAdjustOffset(\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\n        disabledGetter: () => boolean,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture = false\n    ) {\n        const delegate = (event: KeyboardEvent, increase: boolean) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            const subtitles = subtitlesGetter();\n\n            if (!subtitles || subtitles.length === 0) {\n                return;\n            }\n\n            const currentOffset = subtitles[0].start - subtitles[0].originalStart;\n            const newOffset = currentOffset + (increase ? 100 : -100);\n            onOffsetChange(event, newOffset);\n        };\n\n        const decreaseShortcut = this.keyBindSet.decreaseOffset.keys;\n        const increaseShortcut = this.keyBindSet.increaseOffset.keys;\n        const decreaseHandler = (event: KeyboardEvent) => delegate(event, false);\n        const increaseHandler = (event: KeyboardEvent) => delegate(event, true);\n\n        hotkeys(decreaseShortcut, { capture: useCapture }, decreaseHandler);\n        hotkeys(increaseShortcut, { capture: useCapture }, increaseHandler);\n        return () => {\n            hotkeys.unbind(decreaseShortcut, decreaseHandler);\n            hotkeys.unbind(increaseShortcut, increaseHandler);\n        };\n    }\n\n    bindAdjustPlaybackRate(\n        onAdjustPlaybackRate: (event: KeyboardEvent, increase: boolean) => void,\n        disabledGetter: () => boolean,\n        useCapture = false\n    ) {\n        const delegate = (event: KeyboardEvent, increase: boolean) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onAdjustPlaybackRate(event, increase);\n        };\n        const increaseShortcut = this.keyBindSet.increasePlaybackRate.keys;\n        const decreaseShortcut = this.keyBindSet.decreasePlaybackRate.keys;\n        const decreaseHandler = (event: KeyboardEvent) => delegate(event, false);\n        const increaseHandler = (event: KeyboardEvent) => delegate(event, true);\n\n        if (decreaseShortcut) {\n            hotkeys(decreaseShortcut, { capture: useCapture }, decreaseHandler);\n        }\n\n        if (increaseShortcut) {\n            hotkeys(increaseShortcut, { capture: useCapture }, increaseHandler);\n        }\n\n        return () => {\n            if (decreaseShortcut) {\n                hotkeys.unbind(decreaseShortcut, decreaseHandler);\n            }\n\n            if (increaseShortcut) {\n                hotkeys.unbind(increaseShortcut, increaseHandler);\n            }\n        };\n    }\n\n    bindToggleSubtitles(\n        onToggleSubtitles: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture = false\n    ) {\n        const shortcut = this.keyBindSet.toggleSubtitles.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onToggleSubtitles(event);\n        };\n        hotkeys(shortcut, { capture: useCapture }, handler);\n        return () => {\n            hotkeys.unbind(shortcut, handler);\n        };\n    }\n\n    bindToggleSubtitleTrackInVideo(\n        onToggleSubtitleTrack: (event: KeyboardEvent, extra: any) => void,\n        disabledGetter: () => boolean,\n        useCapture = false\n    ) {\n        const shortcuts = [\n            this.keyBindSet.toggleVideoSubtitleTrack1.keys,\n            this.keyBindSet.toggleVideoSubtitleTrack2.keys,\n        ].filter((s) => s);\n\n        if (shortcuts.length === 0) {\n            return () => {};\n        }\n\n        const delegate = (event: KeyboardEvent, track: number) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onToggleSubtitleTrack(event, track);\n        };\n        let handlers: ((event: KeyboardEvent) => void)[] = [];\n\n        for (let i = 0; i < shortcuts.length; ++i) {\n            const handler = (event: KeyboardEvent) => delegate(event, i);\n            handlers.push(handler);\n            hotkeys(shortcuts[i], { capture: useCapture }, handler);\n        }\n\n        return () => {\n            for (let i = 0; i < shortcuts.length; ++i) {\n                const handler = handlers[i];\n                hotkeys.unbind(shortcuts[i], handler);\n            }\n        };\n    }\n\n    bindToggleSubtitleTrackInList(\n        onToggleSubtitleTrackInList: (event: KeyboardEvent, extra: any) => void,\n        disabledGetter: () => boolean,\n        useCapture = false\n    ) {\n        const shortcuts = [\n            this.keyBindSet.toggleAsbplayerSubtitleTrack1.keys,\n            this.keyBindSet.toggleAsbplayerSubtitleTrack2.keys,\n        ].filter((s) => s);\n\n        if (shortcuts.length === 0) {\n            return () => {};\n        }\n\n        const delegate = (event: KeyboardEvent, track: number) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onToggleSubtitleTrackInList(event, track);\n        };\n\n        let handlers: ((event: KeyboardEvent) => void)[] = [];\n\n        for (let i = 0; i < 9; ++i) {\n            const handler = (event: KeyboardEvent) => delegate(event, i);\n            handlers.push(handler);\n            hotkeys(shortcuts[i], { capture: useCapture }, handler);\n        }\n\n        return () => {\n            for (let i = 0; i < 9; ++i) {\n                const handler = handlers[i];\n                hotkeys.unbind(shortcuts[i], handler);\n            }\n        };\n    }\n\n    bindPlay(onPlay: (event: KeyboardEvent) => void, disabledGetter: () => boolean, useCapture = false) {\n        const shortcut = this.keyBindSet.togglePlay.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onPlay(event);\n        };\n\n        hotkeys(shortcut, { capture: useCapture }, handler);\n        return () => {\n            hotkeys.unbind(shortcut, handler);\n        };\n    }\n\n    bindAutoPause(onAutoPause: (event: KeyboardEvent) => void, disabledGetter: () => boolean, useCapture = false) {\n        const shortcut = this.keyBindSet.toggleAutoPause.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onAutoPause(event);\n        };\n        hotkeys(shortcut, { capture: useCapture }, handler);\n        return () => {\n            hotkeys.unbind(shortcut, handler);\n        };\n    }\n\n    bindCondensedPlayback(\n        onAutoPause: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture = false\n    ) {\n        const shortcut = this.keyBindSet.toggleCondensedPlayback.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onAutoPause(event);\n        };\n        hotkeys(shortcut, { capture: useCapture }, handler);\n        return () => {\n            hotkeys.unbind(shortcut, handler);\n        };\n    }\n}\n","export default class Mp3Encoder {\n    static async encode(blob: Blob, workerFactory: () => Worker): Promise<Blob> {\n        return new Promise(async (resolve, reject) => {\n            var reader = new FileReader();\n            reader.onload = async (e) => {\n                try {\n                    const audioContext = new AudioContext();\n\n                    if (e.target === null) {\n                        reject(new Error(\"Could not obtain buffer to encode\"));\n                        return;\n                    }\n\n                    const audioBuffer = await audioContext.decodeAudioData(e.target.result as ArrayBuffer);\n                    const channels = [];\n\n                    for (let i = 0; i < audioBuffer.numberOfChannels; ++i) {\n                        channels.push(audioBuffer.getChannelData(i));\n                    }\n\n                    const worker = workerFactory();\n                    worker.postMessage({\n                        command: 'encode',\n                        audioBuffer: {\n                            channels: channels,\n                            numberOfChannels: audioBuffer.numberOfChannels,\n                            length: audioBuffer.length,\n                            sampleRate: audioBuffer.sampleRate,\n                        },\n                    });\n                    worker.onmessage = (e) => {\n                        resolve(new Blob(e.data.buffer, { type: 'audio/mp3' }));\n                        worker.terminate();\n                    };\n                    worker.onerror = (e) => {\n                        const error = e?.error ?? new Error('MP3 encoding failed: ' + e?.message);\n                        reject(error);\n                        worker.terminate();\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            };\n            reader.readAsArrayBuffer(blob);\n        });\n    }\n}\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/mp3-encoder.7f842300.worker.js\");\n}\n","import sanitize from 'sanitize-filename';\nimport { SubtitleModel } from './Model';\n\nexport function humanReadableTime(timestamp: number, nearestTenth = false): string {\n    const totalSeconds = Math.floor(timestamp / 1000);\n    let seconds;\n\n    if (nearestTenth) {\n        seconds = Math.round(((timestamp / 1000) % 60) * 10) / 10;\n    } else {\n        seconds = totalSeconds % 60;\n    }\n\n    const minutes = Math.floor(totalSeconds / 60) % 60;\n    const hours = Math.floor(totalSeconds / 3600);\n\n    if (hours > 0) {\n        return hours + 'h' + String(minutes).padStart(2, '0') + 'm' + String(seconds).padStart(2, '0') + 's';\n    }\n\n    return minutes + 'm' + String(seconds).padStart(2, '0') + 's';\n}\n\nexport function surroundingSubtitles(\n    subtitles: SubtitleModel[],\n    index: number,\n    countRadius: number,\n    timeRadius: number\n): SubtitleModel[] {\n    let startIndex = index;\n\n    for (let i = index; i >= 0; --i) {\n        startIndex = i;\n\n        if (atBoundary(subtitles, startIndex, index, countRadius, timeRadius, Direction.backward)) {\n            break;\n        }\n    }\n\n    let endIndex = startIndex;\n\n    for (let i = index; i <= subtitles.length - 1; ++i) {\n        endIndex = i;\n\n        if (atBoundary(subtitles, endIndex, index, countRadius, timeRadius, Direction.forward)) {\n            break;\n        }\n    }\n\n    return subtitles.slice(startIndex, endIndex + 1);\n}\n\nfunction indexNearTimestamp(subtitles: SubtitleModel[], timestamp: number, direction: Direction) {\n    if (direction === Direction.forward) {\n        for (let i = 0; i < subtitles.length; ++i) {\n            if (subtitles[i].start >= timestamp) {\n                return i;\n            }\n        }\n    } else {\n        for (let i = subtitles.length - 1; i >= 0; --i) {\n            if (subtitles[i].start <= timestamp) {\n                return i;\n            }\n        }\n    }\n\n    return undefined;\n}\n\nexport function surroundingSubtitlesAroundInterval(\n    subtitles: SubtitleModel[],\n    startTimestamp: number,\n    endTimestamp: number,\n    countRadius: number,\n    timeRadius: number\n) {\n    if (subtitles.length === 0) {\n        return {};\n    }\n\n    let startBoundaryIndex = 0;\n    const indexAfterStartTimestamp =\n        indexNearTimestamp(subtitles, startTimestamp, Direction.forward) ?? subtitles.length - 1;\n\n    for (let i = 0; i < subtitles.length; ++i) {\n        startBoundaryIndex = i;\n\n        if (\n            withinBoundaryAroundInterval(\n                subtitles,\n                i,\n                countRadius,\n                timeRadius,\n                startTimestamp,\n                indexAfterStartTimestamp\n            )\n        ) {\n            break;\n        }\n    }\n\n    let endBoundaryIndex = subtitles.length - 1;\n    const indexBeforeEndTimestamp = indexNearTimestamp(subtitles, endTimestamp, Direction.backward) ?? 0;\n\n    for (let i = subtitles.length - 1; i >= 0; --i) {\n        endBoundaryIndex = i;\n\n        if (\n            withinBoundaryAroundInterval(subtitles, i, countRadius, timeRadius, endTimestamp, indexBeforeEndTimestamp)\n        ) {\n            break;\n        }\n    }\n\n    if (endBoundaryIndex <= startBoundaryIndex) {\n        return {};\n    }\n\n    return {\n        surroundingSubtitles: subtitles.slice(startBoundaryIndex, endBoundaryIndex + 1),\n        subtitle: subtitles[indexAfterStartTimestamp],\n    };\n}\n\nexport function mockSurroundingSubtitles(\n    middleSubtitle: SubtitleModel,\n    maxTimestamp: number,\n    timeRadius: number\n): SubtitleModel[] {\n    const subtitles = [middleSubtitle];\n    const offset = middleSubtitle.start - middleSubtitle.originalStart;\n\n    if (middleSubtitle.end < maxTimestamp) {\n        const afterTimestamp = Math.min(maxTimestamp, middleSubtitle.end + timeRadius);\n        subtitles.push({\n            text: '',\n            start: middleSubtitle.end,\n            end: afterTimestamp,\n            originalStart: middleSubtitle.end - offset,\n            originalEnd: afterTimestamp - offset,\n            track: middleSubtitle.track,\n        });\n    }\n\n    if (middleSubtitle.start > 0) {\n        const beforeTimestamp = Math.max(0, middleSubtitle.start - timeRadius);\n        subtitles.unshift({\n            text: '',\n            start: beforeTimestamp,\n            end: middleSubtitle.start,\n            originalStart: beforeTimestamp - offset,\n            originalEnd: middleSubtitle.start - offset,\n            track: middleSubtitle.track,\n        });\n    }\n\n    return subtitles;\n}\n\nenum Direction {\n    forward,\n    backward,\n}\n\nfunction atBoundary(\n    subtitles: SubtitleModel[],\n    index: number,\n    initialIndex: number,\n    countRadius: number,\n    timeRadius: number,\n    direction: Direction\n): boolean {\n    let next;\n\n    if (direction == Direction.forward) {\n        next = index + 1 < subtitles.length ? subtitles[index + 1] : null;\n    } else {\n        next = index - 1 >= 0 ? subtitles[index - 1] : null;\n    }\n\n    if (\n        Math.abs(initialIndex - index) >= countRadius &&\n        (next === null || Math.abs(next.start - subtitles[initialIndex].start) >= timeRadius)\n    ) {\n        return true;\n    }\n\n    return false;\n}\n\nfunction withinBoundaryAroundInterval(\n    subtitles: SubtitleModel[],\n    index: number,\n    countRadius: number,\n    timeRadius: number,\n    timestamp: number,\n    indexNearTimestamp: number\n): boolean {\n    const current = subtitles[index];\n\n    if (Math.abs(indexNearTimestamp - index) <= countRadius || Math.abs(current.start - timestamp) <= timeRadius) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function subtitleIntersectsTimeInterval(subtitle: SubtitleModel, interval: number[]) {\n    const length = Math.max(0, subtitle.end - subtitle.start);\n\n    if (length === 0) {\n        return false;\n    }\n\n    const overlapStart = Math.max(subtitle.start, interval[0]);\n    const overlapEnd = Math.min(subtitle.end, interval[1]);\n\n    return overlapEnd - overlapStart >= length / 2;\n}\n\nexport function joinSubtitles(subtitles: SubtitleModel[]) {\n    return subtitles\n        .filter((s) => s.text.trim() !== '')\n        .map((s) => s.text)\n        .join('\\n');\n}\n\nexport function extractText(subtitle: SubtitleModel, surroundingSubtitles: SubtitleModel[]) {\n    if (surroundingSubtitles.length === 0) {\n        return subtitle.text;\n    }\n\n    const interval = [subtitle.start, subtitle.end];\n    return joinSubtitles(surroundingSubtitles.filter((s) => subtitleIntersectsTimeInterval(s, interval)));\n}\n\nexport function download(blob: Blob, name: string) {\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    document.body.appendChild(a);\n    a.style.display = 'none';\n    a.href = url;\n    a.download = sanitize(name);\n    a.click();\n    URL.revokeObjectURL(url);\n    a.remove();\n}\n","import Mp3Encoder from './Mp3Encoder';\n// eslint-disable-next-line\n// @ts-ignore\nimport Worker from 'worker-loader!./mp3-encoder.js';\nimport { download } from './util';\nconst defaultMp3WorkerFactory = () => new Worker();\n\ninterface ExperimentalAudioElement extends HTMLAudioElement {\n    audioTracks: any;\n    captureStream?: () => MediaStream;\n    mozCaptureStream?: () => MediaStream;\n}\n\ninterface AudioData {\n    name: string;\n    extension: string;\n    start: number;\n    end: number;\n    play: () => Promise<void>;\n    blob: () => Promise<Blob>;\n    base64: () => Promise<string>;\n    slice: (start: number, end: number) => AudioData;\n    isSliceable: () => boolean;\n}\n\nclass Base64AudioData implements AudioData {\n    private readonly _name: string;\n    private readonly _start: number;\n    private readonly _end: number;\n    private readonly playbackRate: number;\n    private readonly _base64: string;\n    private readonly _extension: string;\n\n    private playingAudio?: HTMLAudioElement;\n    private stopAudioTimeout?: NodeJS.Timeout;\n    private cachedBlob?: Blob;\n\n    constructor(baseName: string, start: number, end: number, playbackRate: number, base64: string, extension: string) {\n        this._name = baseName + '_' + Math.floor(start) + '_' + Math.floor(end);\n        this._start = start;\n        this._end = end;\n        this.playbackRate = playbackRate;\n        this._base64 = base64;\n        this._extension = extension;\n    }\n\n    get name(): string {\n        return this._name;\n    }\n\n    get extension(): string {\n        return this._extension;\n    }\n\n    get start(): number {\n        return this._start;\n    }\n\n    get end(): number {\n        return this._end;\n    }\n\n    async base64() {\n        return this._base64;\n    }\n\n    async blob() {\n        return await this._blob();\n    }\n\n    async play(): Promise<void> {\n        if (this.playingAudio) {\n            this.stopAudio(this.playingAudio);\n            clearTimeout(this.stopAudioTimeout!);\n            this.playingAudio = undefined;\n            this.stopAudioTimeout = undefined;\n            return;\n        }\n\n        const blob = await this._blob();\n        const audio = new Audio();\n        audio.src = URL.createObjectURL(blob);\n        audio.preload = 'none';\n        audio.load();\n        this.playingAudio = audio;\n\n        await audio.play();\n\n        this.stopAudioTimeout = setTimeout(() => {\n            this.stopAudio(audio);\n            this.playingAudio = undefined;\n            this.stopAudioTimeout = undefined;\n        }, (this._end - this._start) / this.playbackRate + 100);\n    }\n\n    private stopAudio(audio: HTMLAudioElement) {\n        audio.pause();\n        const src = audio.src;\n        audio.src = '';\n        URL.revokeObjectURL(src);\n    }\n\n    async _blob() {\n        if (!this.cachedBlob) {\n            this.cachedBlob = await (await fetch('data:audio/' + this.extension + ';base64,' + this._base64)).blob();\n        }\n\n        return this.cachedBlob;\n    }\n\n    slice(start: number, end: number): AudioData {\n        // Not supported\n        return this;\n    }\n\n    isSliceable() {\n        return false;\n    }\n}\n\nclass FileAudioData implements AudioData {\n    private readonly file: File;\n    private readonly _name: string;\n    private readonly _start: number;\n    private readonly _end: number;\n    private readonly playbackRate: number;\n    private readonly trackId?: string;\n    private readonly _extension: string;\n    private readonly recorderMimeType: string;\n\n    private clippingAudio?: HTMLAudioElement;\n    private clippingAudioReject?: (error: string) => void;\n    private stopClippingTimeout?: NodeJS.Timeout;\n\n    private playingAudio?: HTMLAudioElement;\n    private stopAudioTimeout?: NodeJS.Timeout;\n\n    private _blob?: Blob;\n\n    constructor(file: File, start: number, end: number, playbackRate: number, trackId?: string) {\n        const [recorderMimeType, recorderExtension] = FileAudioData._recorderConfiguration();\n        this.recorderMimeType = recorderMimeType;\n        this.file = file;\n        this._name = file.name + '_' + start + '_' + end;\n        this._start = start;\n        this._end = end;\n        this.playbackRate = playbackRate;\n        this.trackId = trackId;\n        this._extension = recorderExtension;\n    }\n\n    private static _recorderConfiguration() {\n        const AUDIO_TYPES: { [key: string]: string } = {\n            'audio/ogg;codecs=opus': 'ogg',\n            'audio/webm;codecs=opus': 'webm',\n        };\n        return Object.keys(AUDIO_TYPES)\n            .filter(MediaRecorder.isTypeSupported)\n            .map((t) => [t as string, AUDIO_TYPES[t] as string])[0];\n    }\n\n    get name(): string {\n        return this._name;\n    }\n\n    get extension(): string {\n        return this._extension;\n    }\n\n    get start() {\n        return this._start;\n    }\n\n    get end() {\n        return this._end;\n    }\n\n    async base64() {\n        return new Promise<string>(async (resolve, reject) => {\n            var reader = new FileReader();\n            const blob = await this.blob();\n\n            if (blob === undefined) {\n                reject('Did not finish recording blob');\n            } else {\n                reader.readAsDataURL(blob);\n                reader.onloadend = () => {\n                    const result = reader.result as string;\n                    const base64 = result.substring(result.indexOf(',') + 1);\n                    resolve(base64);\n                };\n            }\n        });\n    }\n\n    async play() {\n        if (!this._blob) {\n            this._blob = await this._clipAudio();\n            return;\n        }\n\n        if (this.playingAudio) {\n            this.stopAudio(this.playingAudio);\n            clearTimeout(this.stopAudioTimeout!);\n            this.playingAudio = undefined;\n            this.stopAudioTimeout = undefined;\n            return;\n        }\n\n        const audio = await this._audioElement(this._blob, false);\n        audio.currentTime = 0;\n        await audio.play();\n        this.playingAudio = audio;\n        this.stopAudioTimeout = setTimeout(() => {\n            this.stopAudio(audio);\n            this.stopAudioTimeout = undefined;\n            this.playingAudio = undefined;\n        }, (this._end - this._start) / this.playbackRate + 100);\n    }\n\n    async blob() {\n        if (!this._blob) {\n            this._blob = await this._clipAudio();\n        }\n\n        if (this._blob === undefined) {\n            throw new Error('Did not finish recording blob');\n        }\n\n        return this._blob;\n    }\n\n    async _clipAudio(): Promise<Blob | undefined> {\n        if (this.clippingAudio) {\n            this.stopAudio(this.clippingAudio);\n            clearTimeout(this.stopClippingTimeout!);\n            this.clippingAudioReject?.('Did not finish recording blob');\n            this.clippingAudio = undefined;\n            this.stopClippingTimeout = undefined;\n            this.clippingAudioReject = undefined;\n            return undefined;\n        }\n\n        return new Promise(async (resolve, reject) => {\n            try {\n                const audio = await this._audioElement(this.file, true);\n                audio.oncanplay = async (e) => {\n                    audio.play();\n                    const stream = this._captureStream(audio);\n                    const recorder = new MediaRecorder(stream, { mimeType: this.recorderMimeType });\n                    const chunks: BlobPart[] = [];\n\n                    recorder.ondataavailable = (e) => {\n                        chunks.push(e.data);\n                    };\n\n                    let finished = false;\n\n                    recorder.onstop = (e) => {\n                        if (finished) {\n                            resolve(new Blob(chunks, { type: this.recorderMimeType }));\n                        }\n                    };\n\n                    recorder.start();\n\n                    this.clippingAudioReject = reject;\n                    this.clippingAudio = audio;\n                    this.stopClippingTimeout = setTimeout(() => {\n                        this.stopAudio(audio);\n                        this.clippingAudio = undefined;\n                        this.stopClippingTimeout = undefined;\n                        this.clippingAudioReject = undefined;\n                        finished = true;\n                        recorder.stop();\n                        for (const track of stream.getAudioTracks()) {\n                            track.stop();\n                        }\n                    }, (this._end - this._start) / this.playbackRate + 100);\n                };\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    private _audioElement(source: Blob, selectTrack: boolean): Promise<ExperimentalAudioElement> {\n        const audio = new Audio() as ExperimentalAudioElement;\n        audio.src = URL.createObjectURL(source);\n\n        return new Promise((resolve, reject) => {\n            audio.onloadedmetadata = (e) => {\n                if (selectTrack && this.trackId && audio.audioTracks && audio.audioTracks.length > 0) {\n                    // @ts-ignore\n                    for (const t of audio.audioTracks) {\n                        t.enabled = this.trackId === t.id;\n                    }\n                }\n\n                audio.currentTime = this._start / 1000;\n                audio.playbackRate = this.playbackRate;\n                resolve(audio);\n            };\n        });\n    }\n\n    private stopAudio(audio: HTMLAudioElement) {\n        audio.pause();\n        const src = audio.src;\n        audio.src = '';\n        URL.revokeObjectURL(src);\n    }\n\n    private _captureStream(audio: ExperimentalAudioElement) {\n        let stream: MediaStream | undefined;\n\n        if (typeof audio.captureStream === 'function') {\n            stream = audio.captureStream();\n        }\n\n        if (typeof audio.mozCaptureStream === 'function') {\n            stream = audio.mozCaptureStream();\n        }\n\n        if (stream === undefined) {\n            throw new Error('Unable to capture stream from audio');\n        }\n\n        const audioStream = new MediaStream();\n\n        for (const track of stream.getVideoTracks()) {\n            track.stop();\n        }\n\n        for (const track of stream.getAudioTracks()) {\n            if (track.enabled) {\n                audioStream.addTrack(track);\n            }\n        }\n\n        return audioStream;\n    }\n\n    slice(start: number, end: number) {\n        return new FileAudioData(this.file, start, end, this.playbackRate, this.trackId);\n    }\n\n    isSliceable() {\n        return true;\n    }\n}\n\nclass Mp3AudioData implements AudioData {\n    private readonly data: AudioData;\n    private readonly workerFactory: () => Worker;\n    private _blob?: Blob;\n\n    constructor(data: AudioData, workerFactory: () => Worker) {\n        this.data = data;\n        this.workerFactory = workerFactory;\n    }\n\n    get name() {\n        return this.data.name;\n    }\n\n    get extension() {\n        return 'mp3';\n    }\n\n    get start() {\n        return this.data.start;\n    }\n\n    get end() {\n        return this.data.end;\n    }\n\n    async base64() {\n        return new Promise<string>(async (resolve, reject) => {\n            try {\n                var reader = new FileReader();\n                reader.readAsDataURL(await this.blob());\n                reader.onloadend = () => {\n                    const result = reader.result as string;\n                    const base64 = result.substring(result.indexOf(',') + 1);\n                    resolve(base64);\n                };\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    async play() {\n        await this.data.play();\n    }\n\n    async blob() {\n        if (!this._blob) {\n            this._blob = await Mp3Encoder.encode(await this.data.blob(), this.workerFactory);\n        }\n\n        return this._blob;\n    }\n\n    slice(start: number, end: number) {\n        return new Mp3AudioData(this.data.slice(start, end), this.workerFactory);\n    }\n\n    isSliceable() {\n        return this.data.isSliceable();\n    }\n}\n\nexport default class AudioClip {\n    private readonly data: AudioData;\n\n    constructor(data: AudioData) {\n        this.data = data;\n    }\n\n    static fromBase64(\n        subtitleFileName: string,\n        start: number,\n        end: number,\n        playbackRate: number,\n        base64: string,\n        extension: string\n    ) {\n        return new AudioClip(\n            new Base64AudioData(\n                subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')),\n                start,\n                end,\n                playbackRate,\n                base64,\n                extension\n            )\n        );\n    }\n\n    static fromFile(file: File, start: number, end: number, playbackRate: number, trackId?: string) {\n        return new AudioClip(new FileAudioData(file, start, end, playbackRate, trackId));\n    }\n\n    get start() {\n        return this.data.start;\n    }\n\n    get end() {\n        return this.data.end;\n    }\n\n    get name() {\n        return this.data.name + '.' + this.data.extension;\n    }\n\n    async play() {\n        await this.data.play();\n    }\n\n    async base64() {\n        return await this.data.base64();\n    }\n\n    async download() {\n        const blob = await this.data.blob();\n        download(blob, this.name);\n    }\n\n    toMp3(mp3WorkerFactory = defaultMp3WorkerFactory) {\n        if (this.data instanceof Mp3AudioData) {\n            return this;\n        }\n\n        if (this.data.extension === 'mp3') {\n            return this;\n        }\n\n        return new AudioClip(new Mp3AudioData(this.data, mp3WorkerFactory));\n    }\n\n    slice(start: number, end: number) {\n        return new AudioClip(this.data.slice(start, end));\n    }\n\n    isSliceable() {\n        return this.data.isSliceable();\n    }\n}\n","import { AnkiSettings } from './Settings';\n\nexport interface RectModel {\n    readonly left: number;\n    readonly top: number;\n    readonly width: number;\n    readonly height: number;\n}\n\nexport interface DimensionsModel {\n    readonly width: number;\n    readonly height: number;\n}\n\nexport interface SubtitleTextImage {\n    readonly dataUrl: string;\n    readonly screen: DimensionsModel;\n    readonly image: DimensionsModel;\n}\n\nexport interface SubtitleModel {\n    readonly text: string;\n    readonly textImage?: SubtitleTextImage;\n    readonly start: number;\n    readonly end: number;\n    readonly originalStart: number;\n    readonly originalEnd: number;\n    readonly track: number;\n}\n\nexport interface CopiedSubtitleModel extends SubtitleModel {\n    surroundingSubtitles: SubtitleModel[];\n    timestamp: number;\n    id: string;\n    name: string;\n    subtitleFile?: File;\n    audioFile?: File;\n    videoFile?: File;\n    audioTrack?: number;\n    audio?: AudioModel;\n    image?: ImageModel;\n}\n\nexport interface ImageModel {\n    readonly base64: string;\n    readonly extension: 'jpeg';\n}\n\nexport interface AudioModel {\n    readonly base64: string;\n    readonly extension: 'webm' | 'mp3';\n    readonly paddingStart: number;\n    readonly paddingEnd: number;\n    readonly start?: number;\n    readonly end?: number;\n    readonly playbackRate?: number;\n}\n\nexport interface AnkiDialogSliderContext {\n    subtitleStart: number;\n    subtitleEnd: number;\n    subtitles: SubtitleModel[];\n}\n\nexport interface AnkiUiState {\n    readonly type: 'initial' | 'resume';\n    readonly open: boolean;\n    readonly settingsProvider: AnkiSettings;\n    readonly subtitle: SubtitleModel;\n    readonly url: string;\n    readonly source: string;\n    readonly image?: ImageModel;\n    readonly audio?: AudioModel;\n    readonly themeType: string;\n    readonly dialogRequestedTimestamp: number;\n}\n\nexport interface AnkiUiInitialState extends AnkiUiState {\n    readonly type: 'initial';\n    readonly surroundingSubtitles: SubtitleModel[];\n}\n\nexport interface AnkiUiResumeState extends AnkiUiState {\n    readonly type: 'resume';\n\n    readonly text: string;\n    readonly initialTimestampInterval: number[];\n    readonly timestampInterval: number[];\n    readonly timestampBoundaryInterval?: number[];\n    readonly sliderContext: AnkiDialogSliderContext;\n    readonly definition: string;\n    readonly word: string;\n    readonly customFieldValues: { [key: string]: string };\n    readonly lastAppliedTimestampIntervalToText: number[];\n    readonly lastAppliedTimestampIntervalToAudio?: number[];\n}\n\nexport interface AnkiUiSavedState {\n    subtitle: SubtitleModel;\n    text: string;\n    sliderContext: AnkiDialogSliderContext;\n    definition: string;\n    image?: ImageModel;\n    audio?: AudioModel;\n    word: string;\n    source: string;\n    url: string;\n    customFieldValues: { [key: string]: string };\n    timestampInterval: number[];\n    initialTimestampInterval: number[];\n    timestampBoundaryInterval?: number[];\n    lastAppliedTimestampIntervalToText: number[];\n    lastAppliedTimestampIntervalToAudio?: number[];\n    dialogRequestedTimestamp: number;\n}\n\nexport interface VideoDataSubtitleTrack {\n    label: string;\n    language: string;\n    url: string;\n    m3U8BaseUrl?: string;\n    extension: string;\n}\n\nexport interface ConfirmedVideoDataSubtitleTrack {\n    name: string;\n    language: string;\n    subtitleUrl: string;\n    m3U8BaseUrl?: string;\n    extension: string;\n}\n\nexport interface VideoData {\n    basename: string;\n    error?: string;\n    subtitles?: VideoDataSubtitleTrack[];\n}\n\nexport interface VideoDataUiState {\n    open?: boolean;\n    isLoading?: boolean;\n    suggestedName?: string;\n    subtitles?: VideoDataSubtitleTrack[];\n    error?: string;\n    themeType?: string;\n    selectedSubtitle?: string;\n    showSubSelect?: boolean;\n}\n\nexport interface VideoTabModel {\n    id: number; // Actually the tab ID\n    title?: string;\n    src: string; // Video src\n}\n\nexport interface Rgb {\n    r: number;\n    g: number;\n    b: number;\n}\n\nexport interface AudioTrackModel {\n    id: string;\n    label: string;\n    language: string;\n}\n\nexport enum PostMineAction {\n    none = 0,\n    showAnkiDialog = 1,\n    updateLastCard = 2,\n}\n\nexport enum AutoPausePreference {\n    atStart = 1,\n    atEnd = 2,\n}\n\nexport enum PlayMode {\n    normal = 1,\n    condensed = 2,\n    autoPause = 3,\n}\n","export default class CanvasResizer {\n    resize(\n        canvas: HTMLCanvasElement,\n        ctx: CanvasRenderingContext2D,\n        maxWidth: number,\n        maxHeight: number\n    ): Promise<HTMLCanvasElement> {\n        return new Promise((resolve, reject) => {\n            const widthRatio = maxWidth <= 0 ? 1 : maxWidth / canvas.width;\n            const heightRatio = maxHeight <= 0 ? 1 : maxHeight / canvas.height;\n            const ratio = Math.min(1, Math.min(widthRatio, heightRatio));\n\n            if (ratio < 1) {\n                const newWidth = canvas.width * ratio;\n                const newHeight = canvas.height * ratio;\n                createImageBitmap(canvas, { resizeWidth: newWidth, resizeHeight: newHeight })\n                    .then((sprite) => {\n                        canvas.width = newWidth;\n                        canvas.height = newHeight;\n                        ctx.drawImage(sprite, 0, 0);\n                        resolve(canvas);\n                    })\n                    .catch((e) => reject(e));\n            } else {\n                resolve(canvas);\n            }\n        });\n    }\n}\n","import { resolveConfig } from 'prettier';\nimport sanitize from 'sanitize-filename';\nimport CanvasResizer from './CanvasResizer';\nimport { download } from './util';\n\nclass Base64ImageData implements ImageData {\n    private readonly _name: string;\n    private readonly _base64: string;\n    private readonly _extension: string;\n\n    private cachedBlob?: Blob;\n\n    constructor(name: string, base64: string, extension: string) {\n        this._name = name;\n        this._base64 = base64;\n        this._extension = extension;\n    }\n\n    get name() {\n        return this._name;\n    }\n\n    get extension() {\n        return this._extension;\n    }\n\n    async base64() {\n        return this._base64;\n    }\n\n    async blob() {\n        return await this._blob();\n    }\n\n    async _blob() {\n        if (!this.cachedBlob) {\n            this.cachedBlob = await (await fetch(this._dataUrl())).blob();\n        }\n\n        return this.cachedBlob;\n    }\n\n    async dataUrl() {\n        return this._dataUrl();\n    }\n\n    _dataUrl() {\n        return 'data:image/' + this.extension + ';base64,' + this._base64;\n    }\n}\n\nclass FileImageData implements ImageData {\n    private readonly file: File;\n    private readonly timestamp: number;\n    private readonly maxWidth: number;\n    private readonly maxHeight: number;\n    private readonly _name: string;\n\n    constructor(file: File, timestamp: number, maxWidth: number, maxHeight: number) {\n        this.file = file;\n        this._name = file.name + '_' + Math.floor(timestamp) + '.jpeg';\n        this.timestamp = timestamp;\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n    }\n\n    get name() {\n        return this._name;\n    }\n\n    get extension() {\n        return 'jpeg';\n    }\n\n    async base64(): Promise<string> {\n        return new Promise(async (resolve, reject) => {\n            const canvas = await this._canvas();\n            const dataUrl = canvas.toDataURL('image/jpeg');\n            resolve(dataUrl.substring(dataUrl.indexOf(',') + 1));\n        });\n    }\n\n    async blob(): Promise<Blob> {\n        return new Promise(async (resolve, reject) => {\n            const canvas = await this._canvas();\n            canvas.toBlob((blob) => {\n                if (blob === null) {\n                    reject(new Error('Could not obtain blob'));\n                } else {\n                    resolve(blob);\n                }\n            }, 'image/jpeg');\n        });\n    }\n\n    async dataUrl() {\n        const canvas = await this._canvas();\n        return canvas.toDataURL();\n    }\n\n    async _canvas(): Promise<HTMLCanvasElement> {\n        return new Promise(async (resolve, reject) => {\n            const video = this._videoElement(this.file);\n\n            video.oncanplay = async (e) => {\n                const canvas = document.createElement('canvas');\n                canvas.width = video.videoWidth;\n                canvas.height = video.videoHeight;\n                const ctx = canvas.getContext('2d');\n                ctx!.drawImage(video, 0, 0, canvas.width, canvas.height);\n                if (this.maxWidth > 0 || this.maxHeight > 0) {\n                    const resizer = new CanvasResizer();\n                    await resizer.resize(canvas, ctx!, this.maxWidth, this.maxHeight);\n                    resolve(canvas);\n                } else {\n                    resolve(canvas);\n                }\n                URL.revokeObjectURL(video.src);\n            };\n        });\n    }\n\n    _videoElement(source: File) {\n        const video = document.createElement('video');\n        video.src = URL.createObjectURL(source);\n        video.preload = 'none';\n        video.currentTime = this.timestamp / 1000;\n        video.load();\n\n        return video;\n    }\n}\n\ninterface ImageData {\n    name: string;\n    extension: string;\n    base64: () => Promise<string>;\n    dataUrl: () => Promise<string>;\n    blob: () => Promise<Blob>;\n}\n\nexport default class Image {\n    private readonly data: ImageData;\n\n    constructor(data: ImageData) {\n        this.data = data;\n    }\n\n    static fromBase64(subtitleFileName: string, timestamp: number, base64: string, extension: string) {\n        const imageName =\n            subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')) +\n            '_' +\n            Math.floor(timestamp) +\n            '.' +\n            extension;\n        return new Image(new Base64ImageData(imageName, base64, extension));\n    }\n\n    static fromFile(file: File, timestamp: number, maxWidth: number, maxHeight: number) {\n        return new Image(new FileImageData(file, timestamp, maxWidth, maxHeight));\n    }\n\n    get name() {\n        return this.data.name;\n    }\n\n    get extension() {\n        return this.data.extension;\n    }\n\n    async base64() {\n        return await this.data.base64();\n    }\n\n    async dataUrl() {\n        return await this.data.dataUrl();\n    }\n\n    async blob() {\n        return await this.data.blob();\n    }\n\n    async pngBlob() {\n        return new Promise<Blob>(async (resolve, reject) => {\n            try {\n                createImageBitmap(await this.blob()).then((bitMap) => {\n                    const canvas = document.createElement('canvas');\n                    canvas.width = bitMap.width;\n                    canvas.height = bitMap.height;\n                    canvas.getContext('2d')!.drawImage(bitMap, 0, 0);\n                    canvas.toBlob((blob) => {\n                        if (blob) {\n                            resolve(blob);\n                        } else {\n                            reject('Failed to convert to PNG');\n                        }\n                    }, 'image/png');\n                });\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    async download() {\n        const blob = await this.data.blob();\n        download(blob, this.data.name);\n    }\n}\n","export interface Fetcher {\n    fetch: (url: string, body: any) => Promise<any>;\n}\n\nexport class HttpFetcher implements Fetcher {\n    async fetch(url: string, body: any) {\n        const response = await fetch(url, {\n            method: 'POST',\n            body: JSON.stringify(body),\n        });\n        return await response.json();\n    }\n}\n","import AudioClip from './AudioClip';\nimport Image from './Image';\nimport { HttpFetcher, Fetcher } from './Fetcher';\nimport { AnkiSettings } from './Settings';\nimport sanitize from 'sanitize-filename';\n\nconst ankiQuerySpecialCharacters = ['\"', '*', '_', '\\\\', ':'];\n\nexport type AnkiExportMode = 'gui' | 'updateLast' | 'default';\n\nexport class Anki {\n    private readonly settingsProvider: AnkiSettings;\n    private readonly fetcher: Fetcher;\n\n    constructor(settingsProvider: AnkiSettings, fetcher = new HttpFetcher()) {\n        this.settingsProvider = settingsProvider;\n        this.fetcher = fetcher;\n    }\n\n    async deckNames(ankiConnectUrl?: string) {\n        const response = await this._executeAction('deckNames', null, ankiConnectUrl);\n        return response.result;\n    }\n\n    async modelNames(ankiConnectUrl?: string) {\n        const response = await this._executeAction('modelNames', null, ankiConnectUrl);\n        return response.result;\n    }\n\n    async modelFieldNames(modelName: string, ankiConnectUrl?: string) {\n        const response = await this._executeAction('modelFieldNames', { modelName: modelName }, ankiConnectUrl);\n        return response.result;\n    }\n\n    async findNotesWithWord(word: string, ankiConnectUrl?: string) {\n        const response = await this._executeAction(\n            'findNotes',\n            { query: this.settingsProvider.wordField + ':' + this._escapeQuery(word) },\n            ankiConnectUrl\n        );\n        return response.result;\n    }\n\n    async findNotesWithWordGui(word: string, ankiConnectUrl?: string) {\n        const response = await this._executeAction(\n            'guiBrowse',\n            { query: this.settingsProvider.wordField + ':' + this._escapeQuery(word) },\n            ankiConnectUrl\n        );\n        return response.result;\n    }\n\n    private _escapeQuery(query: string) {\n        let escaped = '';\n\n        for (let i = 0; i < query.length; ++i) {\n            const char = query[i];\n            if (ankiQuerySpecialCharacters.includes(char)) {\n                escaped += `\\\\${char}`;\n            } else {\n                escaped += char;\n            }\n        }\n\n        return `\"${escaped}\"`;\n    }\n\n    async requestPermission(ankiConnectUrl?: string) {\n        const response = await this._executeAction('requestPermission', null, ankiConnectUrl);\n        return response.result;\n    }\n\n    async export(\n        text: string | undefined,\n        definition: string | undefined,\n        audioClip: AudioClip | undefined,\n        image: Image | undefined,\n        word: string | undefined,\n        source: string | undefined,\n        url: string | undefined,\n        customFieldValues: { [key: string]: string },\n        tags: string[],\n        mode: AnkiExportMode,\n        ankiConnectUrl?: string\n    ) {\n        const fields = {};\n\n        this._appendField(fields, this.settingsProvider.sentenceField, text, true);\n        this._appendField(fields, this.settingsProvider.definitionField, definition, true);\n        this._appendField(fields, this.settingsProvider.wordField, word, false);\n        this._appendField(fields, this.settingsProvider.sourceField, source, false);\n        this._appendField(fields, this.settingsProvider.urlField, url, false);\n\n        if (customFieldValues) {\n            for (const customFieldName of Object.keys(customFieldValues)) {\n                this._appendField(\n                    fields,\n                    this.settingsProvider.customAnkiFields[customFieldName],\n                    customFieldValues[customFieldName],\n                    true\n                );\n            }\n        }\n\n        const params: any = {\n            note: {\n                deckName: this.settingsProvider.deck,\n                modelName: this.settingsProvider.noteType,\n                tags: tags,\n                options: {\n                    allowDuplicate: false,\n                    duplicateScope: 'deck',\n                    duplicateScopeOptions: {\n                        deckName: this.settingsProvider.deck,\n                        checkChildren: false,\n                    },\n                },\n            },\n        };\n\n        const gui = mode === 'gui';\n        const updateLast = mode === 'updateLast';\n\n        if (this.settingsProvider.audioField && audioClip) {\n            const sanitizedName = this._sanitizeFileName(audioClip.name);\n\n            if (gui || updateLast) {\n                const fileName = (await this._storeMediaFile(sanitizedName, await audioClip.base64(), ankiConnectUrl))\n                    .result;\n                this._appendField(fields, this.settingsProvider.audioField, `[sound:${fileName}]`, false);\n            } else {\n                params.note['audio'] = {\n                    filename: sanitizedName,\n                    data: await audioClip.base64(),\n                    fields: [this.settingsProvider.audioField],\n                };\n            }\n        }\n\n        if (this.settingsProvider.imageField && image) {\n            const sanitizedName = this._sanitizeFileName(image.name);\n\n            if (gui || updateLast) {\n                const fileName = (await this._storeMediaFile(sanitizedName, await image.base64(), ankiConnectUrl))\n                    .result;\n                this._appendField(\n                    fields,\n                    this.settingsProvider.imageField,\n                    `<div><img src=\"${fileName}\"></div>`,\n                    false\n                );\n            } else {\n                params.note['picture'] = {\n                    filename: sanitizedName,\n                    data: await image.base64(),\n                    fields: [this.settingsProvider.imageField],\n                };\n            }\n        }\n\n        params.note['fields'] = fields;\n\n        switch (mode) {\n            case 'gui':\n                return (await this._executeAction('guiAddCards', params, ankiConnectUrl)).result;\n            case 'updateLast':\n                const recentNotes = (\n                    await this._executeAction('findNotes', { query: 'added:1' }, ankiConnectUrl)\n                ).result.sort();\n\n                if (recentNotes.length === 0) {\n                    throw new Error('Could not find note to update');\n                }\n\n                const lastNoteId = recentNotes[recentNotes.length - 1];\n                params.note['id'] = lastNoteId;\n                const infoResponse = await this._executeAction('notesInfo', { notes: [lastNoteId] });\n\n                if (infoResponse.result.length > 0 && infoResponse.result[0].noteId === lastNoteId) {\n                    const info = infoResponse.result[0];\n\n                    if (\n                        this.settingsProvider.sentenceField &&\n                        info.fields &&\n                        typeof info.fields[this.settingsProvider.sentenceField]?.value === 'string' &&\n                        typeof params.note.fields[this.settingsProvider.sentenceField] === 'string'\n                    ) {\n                        params.note.fields[this.settingsProvider.sentenceField] = this._inheritHtmlMarkup(\n                            params.note.fields[this.settingsProvider.sentenceField],\n                            info.fields[this.settingsProvider.sentenceField].value\n                        );\n                    }\n\n                    await this._executeAction('updateNoteFields', params, ankiConnectUrl);\n\n                    if (!this.settingsProvider.wordField || !info.fields) {\n                        return info.noteId;\n                    }\n\n                    const wordField = info.fields[this.settingsProvider.wordField];\n\n                    if (!wordField || !wordField.value) {\n                        return info.noteId;\n                    }\n\n                    return wordField.value;\n                }\n\n                throw new Error('Could not update last card because the card info could not be fetched');\n            case 'default':\n                return (await this._executeAction('addNote', params, ankiConnectUrl)).result;\n            default:\n                throw new Error('Unknown export mode: ' + mode);\n        }\n    }\n\n    private _appendField(fields: any, fieldName: string | undefined, value: string | undefined, multiline: boolean) {\n        if (!fieldName || !value) {\n            return;\n        }\n\n        let newValue = multiline ? value.split('\\n').join('<br>') : value;\n        const existingValue = fields[fieldName];\n\n        if (existingValue) {\n            newValue = existingValue + '<br>' + newValue;\n        }\n\n        fields[fieldName] = newValue;\n    }\n\n    private _sanitizeFileName(name: string) {\n        return sanitize(name, { replacement: '_' });\n    }\n\n    private _inheritHtmlMarkup(original: string, markedUp: string) {\n        const htmlTagRegex = RegExp('<[^>]*>(.*?)</[^>]*>', 'ig');\n        const markedUpWithoutBreaklines = markedUp.replace('<br>', '');\n        let inherited = original;\n\n        while (true) {\n            const match = htmlTagRegex.exec(markedUpWithoutBreaklines);\n\n            if (match === null || match.length < 2) {\n                break;\n            }\n\n            inherited = inherited.replace(match[1], match[0]);\n        }\n\n        return inherited;\n    }\n\n    private async _storeMediaFile(name: string, base64: string, ankiConnectUrl?: string) {\n        return this._executeAction('storeMediaFile', { filename: name, data: base64 }, ankiConnectUrl);\n    }\n\n    private async _executeAction(action: string, params: any, ankiConnectUrl?: string) {\n        const body: any = {\n            action: action,\n            version: 6,\n        };\n\n        if (params) {\n            body['params'] = params;\n        }\n\n        const json = await this.fetcher.fetch(ankiConnectUrl || this.settingsProvider.ankiConnectUrl, body);\n\n        if (json.error) {\n            throw new Error(json.error);\n        }\n\n        return json;\n    }\n}\n","import IntervalTree, { Interval, NumericTuple } from '@flatten-js/interval-tree';\nimport { SubtitleModel } from './Model';\n\nexport interface SubtitleSlice<T> {\n    showing: T[];\n    lastShown?: T[];\n    nextToShow?: T[];\n    startedShowing?: T;\n    willStopShowing?: T;\n}\n\nexport interface SubtitleCollectionOptions {\n    returnLastShown?: boolean;\n    returnNextToShow?: boolean;\n    showingCheckRadiusMs?: number;\n}\n\nexport class SubtitleCollection<T extends SubtitleModel> {\n    static emptySubtitleCollection = new SubtitleCollection([]);\n\n    // Tree for subtitles\n    private readonly tree: IntervalTree<T>;\n    // Tree for gaps between subtitles. The gaps are populated with the last subtitle before the gap.\n    private readonly gapsTree?: IntervalTree<T>;\n    private readonly options: SubtitleCollectionOptions;\n\n    constructor(subtitles: T[], options: SubtitleCollectionOptions = {}) {\n        this.tree = new IntervalTree<T>();\n        this.options = options;\n\n        if (options.returnLastShown || options.returnNextToShow) {\n            let last: T | undefined;\n            this.gapsTree = new IntervalTree<T>();\n\n            if (subtitles.length > 0 && subtitles[0].start > 0) {\n                this.gapsTree.insert([0, subtitles[0].start - 1], subtitles[0]);\n            }\n\n            for (const s of subtitles) {\n                this.tree.insert([s.start, s.end], s);\n\n                if (last !== undefined && last.end < s.start) {\n                    this.gapsTree.insert([last.end + 1, s.start - 1], last);\n                }\n\n                last = s;\n            }\n        } else {\n            for (const s of subtitles) {\n                this.tree.insert([s.start, s.end], s);\n            }\n        }\n    }\n\n    static empty<S extends SubtitleModel>() {\n        return SubtitleCollection.emptySubtitleCollection as SubtitleCollection<S>;\n    }\n\n    subtitlesAt(timestamp: number): SubtitleSlice<T> {\n        const interval: NumericTuple = [timestamp, timestamp];\n        const showing = this.tree.search(interval) as T[];\n        let lastShown: T[] | undefined;\n        let nextToShow: T[] | undefined;\n        let startedShowing: T | undefined;\n        let willStopShowing: T | undefined;\n\n        if (showing.length === 0) {\n            if (this.gapsTree !== undefined) {\n                // One of returnLastShown or returnNextToShow is true due to constructor\n                const gapIntervals: Interval[] = [];\n                lastShown = this.gapsTree.search(interval, (s, i) => {\n                    gapIntervals.push(i);\n                    return s;\n                }) as T[];\n\n                if (lastShown.length > 0 && this.options.returnNextToShow) {\n                    const nextStart = gapIntervals[0].high + 1;\n                    nextToShow = this.tree.search([nextStart, nextStart]) as T[];\n                }\n            }\n        } else if (this.options.showingCheckRadiusMs !== undefined) {\n            for (const s of showing) {\n                if (willStopShowing === undefined && s.end < timestamp + this.options.showingCheckRadiusMs) {\n                    willStopShowing = s;\n                }\n\n                if (startedShowing === undefined && timestamp - this.options.showingCheckRadiusMs < s.start) {\n                    startedShowing = s;\n                }\n\n                if (startedShowing !== undefined && willStopShowing !== undefined) {\n                    break;\n                }\n            }\n        }\n\n        return { showing, lastShown, nextToShow, startedShowing, willStopShowing };\n    }\n}\n","import { SubtitleModel } from './Model';\n\nexport default class AutoPauseContext {\n    private lastStartedShowing?: SubtitleModel;\n    private lastWillStopShowing?: SubtitleModel;\n\n    onStartedShowing?: () => void;\n    onWillStopShowing?: () => void;\n    onNextToShow?: (subtitle: SubtitleModel) => void;\n\n    willStopShowing(subtitle: SubtitleModel) {\n        if (subtitle.end === this.lastWillStopShowing?.end) {\n            return;\n        }\n\n        this.onWillStopShowing?.();\n        this.lastWillStopShowing = subtitle;\n    }\n\n    startedShowing(subtitle: SubtitleModel) {\n        if (subtitle.start === this.lastStartedShowing?.start) {\n            return;\n        }\n\n        this.onStartedShowing?.();\n        this.lastStartedShowing = subtitle;\n    }\n\n    clear() {\n        this.lastStartedShowing = undefined;\n        this.lastWillStopShowing = undefined;\n    }\n}\n","import { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport MuiAlert, { Color } from '@material-ui/lab/Alert';\nimport Grow from '@material-ui/core/Grow';\n\nconst useAlertStyles = makeStyles({\n    root: {\n        display: 'flex',\n        justifyContent: 'center',\n        position: 'fixed',\n        top: 80,\n        width: '100%',\n        pointerEvents: 'none',\n        zIndex: 2000,\n    },\n});\n\ninterface Props {\n    open: boolean;\n    autoHideDuration: number;\n    onClose: () => void;\n    severity: Color | undefined;\n    children: React.ReactNode\n}\n\nexport default function Alert(props: Props) {\n    const classes = useAlertStyles();\n\n    useEffect(() => {\n        if (props.open) {\n            const timeout = setTimeout(props.onClose, props.autoHideDuration);\n            return () => clearTimeout(timeout);\n        }\n    }, [props.open, props.autoHideDuration, props.onClose]);\n\n    return (\n        <div className={classes.root}>\n            <Grow in={props.open}>\n                <MuiAlert severity={props.severity}>{props.children}</MuiAlert>\n            </Grow>\n        </div>\n    );\n}\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport { TextField, TextFieldProps } from \"@material-ui/core\";\n\nfunction extractTagsFromString(value: string) {\n    const splitTags = value.split(' ').join('').split(',');\n    const tags = [];\n\n    for (const tag of splitTags) {\n        tags.push(tag.trim());\n    }\n\n    return tags;\n}\n\nexport interface Props {\n    tags: string[];\n    onTagsChange: (tags: string[]) => void;\n}\n\nexport default function TagsTextField({tags, onTagsChange, ...props}: Props & TextFieldProps) {\n    const [value, setValue] = useState('');\n\n    useEffect(() => {\n        const tagsString = tags.join(', ');\n\n        if (tagsString !== value) {\n            setValue(tags.join(', '));\n        }\n    }, [value, tags]);\n\n    const handleChange = useCallback((e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        let currentValue = e.target.value;\n\n        if (\n            value.length > currentValue.length &&\n            value.includes(currentValue) &&\n            currentValue.endsWith(',')\n        ) {\n            // Detected a backspace at the last comma, move cursor back enough to remove the comma\n            currentValue = currentValue.substring(0, currentValue.length - 1);\n        }\n\n        // Decompose string into individual tags by removing all spaces and splitting on \",\"\n        const newTags = extractTagsFromString(currentValue);\n        setValue(newTags.join(', '));\n        onTagsChange(newTags);\n    }, [value, onTagsChange]);\n\n    return (\n        <TextField\n            {...props}\n            value={value}\n            onChange={handleChange}\n        />\n    );\n}\n","import React, { useEffect, useState, useLayoutEffect } from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport Card from '@material-ui/core/Card';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Dialog from '@material-ui/core/Dialog';\nimport { Image as CommonImage } from '@project/common';\n\ninterface ImageDimensions {\n    width: number;\n    height: number;\n}\n\nconst useStyles = makeStyles((theme) => ({\n    image: ({ width, height }: ImageDimensions) => ({\n        width: width,\n        height: height,\n        backgroundSize: 'contain',\n    }),\n}));\n\n// https://stackoverflow.com/questions/19014250/rerender-view-on-browser-resize-with-react\nfunction useWindowSize() {\n    const [size, setSize] = useState([0, 0]);\n\n    useLayoutEffect(() => {\n        function updateSize() {\n            setSize([window.innerWidth, window.innerHeight]);\n        }\n\n        window.addEventListener('resize', updateSize);\n        updateSize();\n\n        return () => window.removeEventListener('resize', updateSize);\n    }, []);\n\n    return size;\n}\n\ninterface Props {\n    open: boolean;\n    image?: CommonImage;\n    onClose: () => void;\n}\n\nexport default function ImageDialog({ open, image, onClose }: Props) {\n    const [dataUrl, setDataUrl] = useState<string>();\n    const [width, setWidth] = useState<number>(0);\n    const [height, setHeight] = useState<number>(0);\n    const [windowWidth, windowHeight] = useWindowSize();\n\n    let resizeRatio;\n\n    if (width > 0 && height > 0) {\n        resizeRatio = Math.min(1, Math.min(windowWidth / (2 * width), windowHeight / (2 * height)));\n    } else {\n        resizeRatio = 1;\n    }\n\n    const classes = useStyles({ width: width * resizeRatio, height: height * resizeRatio });\n\n    useEffect(() => {\n        setDataUrl(undefined);\n        async function fetchImage() {\n            if (!image) {\n                return;\n            }\n\n            const dataUrl = await image.dataUrl();\n            const img = new Image();\n            img.onload = () => {\n                setWidth(img.width);\n                setHeight(img.height);\n                setDataUrl(dataUrl);\n            };\n            img.src = dataUrl;\n        }\n\n        fetchImage();\n    }, [image]);\n\n    if (!image || !dataUrl) {\n        return null;\n    }\n\n    return (\n        <Dialog open={open} onClose={onClose} maxWidth=\"lg\">\n            <Card>\n                <CardMedia\n                    className={classes.image}\n                    image={dataUrl}\n                    title={image.name}\n                    style={{ width: width * resizeRatio, height: height * resizeRatio }}\n                />\n            </Card>\n        </Dialog>\n    );\n}\n","import React from 'react';\nimport { SubtitleModel } from '../..';\n\ninterface Props {\n    subtitle: SubtitleModel;\n    availableWidth: number;\n    scale: number;\n}\n\nexport default function SubtitleTextImage({ subtitle, availableWidth, scale }: Props) {\n    if (subtitle.textImage === undefined) {\n        return null;\n    }\n\n    const imageScale = (scale * availableWidth) / subtitle.textImage.screen.width;\n    const width = imageScale * subtitle.textImage.image.width;\n\n    return (\n        <div style={{ maxWidth: width }}>\n            <img style={{ width: '100%' }} alt=\"subtitle\" src={subtitle.textImage.dataUrl} />\n        </div>\n    );\n}\n","import React, { MutableRefObject, useCallback, useState, useEffect } from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport {\n    Anki,\n    AnkiDialogSliderContext,\n    AudioClip,\n    Image,\n    humanReadableTime,\n    AnkiSettings,\n    SubtitleModel,\n    surroundingSubtitles,\n    subtitleIntersectsTimeInterval,\n    joinSubtitles,\n} from '@project/common';\nimport Button from '@material-ui/core/Button';\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DoneIcon from '@material-ui/icons/Done';\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Paper from '@material-ui/core/Paper';\nimport RestoreIcon from '@material-ui/icons/Restore';\nimport SearchIcon from '@material-ui/icons/Search';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport Slider, { Mark } from '@material-ui/core/Slider';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport ZoomInIcon from '@material-ui/icons/ZoomIn';\nimport ZoomOutIcon from '@material-ui/icons/ZoomOut';\nimport SubtitleTextImage from './SubtitleTextImage';\nimport TagsTextField from './TagsTextField';\nimport { AnkiExportMode } from '@project/common';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& .MuiTextField-root': {\n            marginBottom: theme.spacing(1),\n        },\n    },\n    title: {\n        flexGrow: 1,\n    },\n    mediaField: {\n        cursor: 'pointer',\n        '& input': {\n            cursor: 'pointer',\n        },\n    },\n    rangeSelectSlider: {\n        '& .MuiSlider-markLabel': {\n            transform: 'translateX(-3%)',\n        },\n    },\n}));\n\nconst boundaryIntervalSubtitleCountRadius = 1;\nconst boundaryIntervalSubtitleTimeRadius = 5000;\n\nfunction boundaryIntervalFromSliderContext(sliderContext: AnkiDialogSliderContext) {\n    let index = sliderContext.subtitles.findIndex((s) => s.start === sliderContext.subtitleStart);\n    index = index === -1 ? sliderContext.subtitles.length / 2 : index;\n\n    const subtitlesToDisplay = surroundingSubtitles(\n        sliderContext.subtitles,\n        index,\n        boundaryIntervalSubtitleCountRadius,\n        boundaryIntervalSubtitleTimeRadius\n    );\n\n    let min = null;\n    let max = null;\n\n    for (const s of subtitlesToDisplay) {\n        if (min === null || s.start < min) {\n            min = s.start;\n        }\n\n        if (max === null || s.end > max) {\n            max = s.end;\n        }\n    }\n\n    return min !== null && max !== null && [min, max];\n}\n\nfunction sliderMarksFromSliderContext(sliderContext: AnkiDialogSliderContext, boundary: number[]): Mark[] {\n    const seenTimestamps: any = {};\n\n    return sliderContext.subtitles\n        .filter((s) => s.text.trim() !== '' || s.textImage !== undefined)\n        .map((s) => {\n            if (s.start in seenTimestamps) {\n                return null;\n            }\n\n            seenTimestamps[s.start] = true;\n\n            return {\n                value: s.start,\n                label: `${s.text.trim().substring(0, Math.min(s.text.length, 3))}...`,\n            };\n        })\n        .filter((mark: Mark | null) => mark !== null)\n        .filter((mark: Mark | null) => mark!.value >= boundary[0] && mark!.value <= boundary[1]) as Mark[];\n}\n\nfunction sliderValueLabelFormat(ms: number) {\n    return humanReadableTime(ms, true);\n}\n\ninterface ValueLabelComponentProps {\n    children: React.ReactElement;\n    open: boolean;\n    value: number;\n}\n\nfunction ValueLabelComponent({ children, open, value }: ValueLabelComponentProps) {\n    return (\n        <Tooltip open={open} enterTouchDelay={0} placement=\"top\" title={value}>\n            {children}\n        </Tooltip>\n    );\n}\n\ninterface TextImageSetProps {\n    selectedSubtitles: SubtitleModel[];\n    width: number;\n}\n\nconst useTextImageSetStyles = makeStyles((theme) => ({\n    root: {\n        marginBottom: theme.spacing(1),\n        padding: theme.spacing(1),\n        backgroundColor: theme.palette.action.disabledBackground,\n    },\n}));\n\nfunction TextImageSet({ selectedSubtitles, width }: TextImageSetProps) {\n    const classes = useTextImageSetStyles();\n\n    if (selectedSubtitles.length === 0 || width <= 0) {\n        return null;\n    }\n\n    return (\n        <Paper elevation={0} className={classes.root}>\n            {selectedSubtitles.map((s, index) => {\n                return <SubtitleTextImage key={index} availableWidth={width} subtitle={s} scale={1} />;\n            })}\n        </Paper>\n    );\n}\n\nconst TextFieldEndAdornment = withStyles({\n    // Hack to recenter TextField end adornment\n    root: {\n        transform: 'translateY(-8px)',\n    },\n})(InputAdornment);\n\nexport interface AnkiDialogState {\n    text: string;\n    sliderContext?: AnkiDialogSliderContext;\n    definition: string;\n    word: string;\n    source: string;\n    url: string;\n    customFieldValues: { [key: string]: string };\n    lastAppliedTimestampIntervalToText?: number[];\n    lastAppliedTimestampIntervalToAudio?: number[];\n    initialTimestampInterval?: number[];\n    timestampBoundaryInterval?: number[];\n    timestampInterval?: number[];\n}\n\ninterface AnkiDialogProps {\n    open: boolean;\n    disabled: boolean;\n    text?: string;\n    onProceed: (\n        text: string,\n        definition: string,\n        audioClip: AudioClip | undefined,\n        image: Image | undefined,\n        word: string,\n        source: string,\n        url: string,\n        customFieldValues: { [key: string]: string },\n        tags: string[],\n        mode: AnkiExportMode\n    ) => void;\n    onRerecord?: () => void;\n    onRewind: () => void;\n    onCancel: () => void;\n    onViewImage: (image: Image) => void;\n    onOpenSettings?: () => void;\n    audioClip?: AudioClip;\n    image?: Image;\n    source?: string;\n    url?: string;\n    sliderContext?: AnkiDialogSliderContext;\n    settingsProvider: AnkiSettings;\n    anki: Anki;\n    definition?: string;\n    word?: string;\n    customFields: { [key: string]: string };\n    customFieldValues?: { [key: string]: string };\n    initialTimestampInterval?: number[];\n    timestampBoundaryInterval?: number[];\n    timestampInterval?: number[];\n    lastAppliedTimestampIntervalToText?: number[];\n    lastAppliedTimestampIntervalToAudio?: number[];\n    stateRef?: MutableRefObject<AnkiDialogState | undefined>;\n}\n\nexport function AnkiDialog({\n    open,\n    disabled,\n    text: initialText,\n    onProceed,\n    onRewind,\n    onCancel,\n    onViewImage,\n    onOpenSettings,\n    onRerecord,\n    audioClip: initialAudioClip,\n    image,\n    source: initialSource,\n    url: initialUrl,\n    sliderContext,\n    customFields,\n    settingsProvider,\n    anki,\n    definition: initialDefinition,\n    word: initialWord,\n    customFieldValues: initialCustomFieldValues,\n    timestampInterval: initialSelectedTimestampInterval,\n    timestampBoundaryInterval: forceTimestampBoundaryInterval,\n    initialTimestampInterval: forceInitialTimestampInterval,\n    lastAppliedTimestampIntervalToText: initialLastAppliedTimestampIntervalToText,\n    lastAppliedTimestampIntervalToAudio: initialLastAppliedTimestampIntervalToAudio,\n    stateRef,\n}: AnkiDialogProps) {\n    const classes = useStyles();\n    const [definition, setDefinition] = useState<string>('');\n    const [text, setText] = useState<string>('');\n    const [word, setWord] = useState<string>('');\n    const [lastSearchedWord, setLastSearchedWord] = useState<string>();\n    const [source, setSource] = useState<string>(initialSource ?? '');\n    const [tags, setTags] = useState<string[]>(settingsProvider.tags);\n    const [url, setUrl] = useState<string>(initialUrl ?? '');\n    const [duplicateNotes, setDuplicateNotes] = useState<any[]>([]);\n    const [wordTimestamp, setWordTimestamp] = useState<number>(0);\n    const [customFieldValues, setCustomFieldValues] = useState<{ [key: string]: string }>({});\n    const [timestampInterval, setTimestampInterval] = useState<number[]>();\n    const [selectedSubtitles, setSelectedSubtitles] = useState<SubtitleModel[]>([]);\n    const [initialTimestampInterval, setInitialTimestampInterval] = useState<number[]>();\n    const [initialTimestampBoundaryInterval, setInitialTimestampBoundaryInterval] = useState<number[]>();\n    const [timestampBoundaryInterval, setTimestampBoundaryInterval] = useState<number[]>();\n    const [timestampMarks, setTimestampMarks] = useState<Mark[]>();\n    const [lastAppliedTimestampIntervalToText, setLastAppliedTimestampIntervalToText] = useState<number[]>();\n    const [lastAppliedTimestampIntervalToAudio, setLastAppliedTimestampIntervalToAudio] = useState<number[]>();\n    const [width, setWidth] = useState<number>(0);\n    const [audioClip, setAudioClip] = useState<AudioClip>();\n    const dialogRefCallback = useCallback((element: HTMLElement) => {\n        setWidth(element?.getBoundingClientRect().width ?? 0);\n    }, []);\n\n    if (stateRef) {\n        stateRef.current = {\n            text,\n            sliderContext,\n            definition,\n            word,\n            source,\n            url,\n            customFieldValues,\n            initialTimestampInterval,\n            timestampBoundaryInterval,\n            lastAppliedTimestampIntervalToText,\n            lastAppliedTimestampIntervalToAudio,\n            timestampInterval,\n        };\n    }\n\n    const textForTimestampInterval = useCallback(\n        (timestampInterval: number[]) => {\n            return joinSubtitles(\n                sliderContext!.subtitles.filter((s) => subtitleIntersectsTimeInterval(s, timestampInterval))\n            );\n        },\n        [sliderContext]\n    );\n\n    useEffect(() => {\n        setText(initialText ?? '');\n        setDefinition(initialDefinition ?? '');\n        setWord(initialWord ?? '');\n        setSource(initialSource ?? '');\n        setUrl(initialUrl ?? '');\n        setDuplicateNotes([]);\n        setCustomFieldValues(initialCustomFieldValues ?? {});\n    }, [initialText, initialSource, initialDefinition, initialWord, initialCustomFieldValues, initialUrl]);\n\n    useEffect(() => {\n        setTags(settingsProvider.tags);\n    }, [settingsProvider.tags]);\n\n    useEffect(() => {\n        const timestampInterval =\n            initialSelectedTimestampInterval ||\n            (sliderContext && [sliderContext.subtitleStart, sliderContext.subtitleEnd]) ||\n            undefined;\n        const timestampBoundaryInterval =\n            (sliderContext && boundaryIntervalFromSliderContext(sliderContext)) || undefined;\n        const timestampMarks =\n            (sliderContext && sliderMarksFromSliderContext(sliderContext, timestampBoundaryInterval!)) || undefined;\n        const selectedSubtitles =\n            sliderContext === undefined || timestampInterval === undefined\n                ? []\n                : sliderContext.subtitles.filter((s) => subtitleIntersectsTimeInterval(s, timestampInterval));\n        setText(initialText ?? joinSubtitles(selectedSubtitles));\n        setTimestampInterval(timestampInterval);\n        setSelectedSubtitles(selectedSubtitles);\n        setInitialTimestampInterval(forceInitialTimestampInterval || timestampInterval);\n        setLastAppliedTimestampIntervalToText(initialLastAppliedTimestampIntervalToText || timestampInterval);\n        setLastAppliedTimestampIntervalToAudio(initialLastAppliedTimestampIntervalToAudio || timestampInterval);\n        setTimestampBoundaryInterval(forceTimestampBoundaryInterval ?? timestampBoundaryInterval);\n        setInitialTimestampBoundaryInterval(timestampBoundaryInterval);\n        setTimestampMarks(timestampMarks);\n    }, [\n        sliderContext,\n        forceInitialTimestampInterval,\n        initialSelectedTimestampInterval,\n        forceTimestampBoundaryInterval,\n        initialLastAppliedTimestampIntervalToText,\n        initialLastAppliedTimestampIntervalToAudio,\n    ]);\n\n    useEffect(() => {\n        if (!initialAudioClip) {\n            setAudioClip(undefined);\n            return;\n        }\n\n        let newAudioClip = initialAudioClip;\n\n        if (settingsProvider.preferMp3) {\n            newAudioClip = newAudioClip.toMp3();\n        }\n\n        if (lastAppliedTimestampIntervalToAudio) {\n            newAudioClip = newAudioClip.slice(\n                Math.max(0, Math.round(lastAppliedTimestampIntervalToAudio[0]) - settingsProvider.audioPaddingStart),\n                Math.round(lastAppliedTimestampIntervalToAudio[1]) + settingsProvider.audioPaddingEnd\n            );\n        }\n\n        setAudioClip(newAudioClip);\n    }, [\n        initialAudioClip,\n        settingsProvider.preferMp3,\n        lastAppliedTimestampIntervalToAudio,\n        settingsProvider.audioPaddingStart,\n        settingsProvider.audioPaddingEnd,\n    ]);\n\n    useEffect(() => {\n        setWordTimestamp(Date.now());\n    }, [word]);\n\n    useEffect(() => {\n        if (!word || !settingsProvider.wordField) {\n            return;\n        }\n\n        const trimmedWord = word.trim();\n\n        if (trimmedWord === '' || trimmedWord === lastSearchedWord) {\n            return;\n        }\n\n        const timeout = setTimeout(async () => {\n            try {\n                setDuplicateNotes(await anki.findNotesWithWord(trimmedWord));\n                setLastSearchedWord(trimmedWord);\n            } catch (e) {\n                console.error(e);\n            }\n        }, 500);\n\n        return () => clearTimeout(timeout);\n    }, [word, wordTimestamp, lastSearchedWord, anki, settingsProvider.wordField]);\n\n    const handlePlayAudio = useCallback(\n        (e: React.MouseEvent<HTMLDivElement>) => {\n            e.preventDefault();\n            e.stopPropagation();\n            audioClip!.play();\n        },\n        [audioClip]\n    );\n\n    const handleCustomFieldChange = useCallback(\n        (customFieldName: string, value: string) => {\n            const newCustomFieldValues: { [fieldName: string]: string } = {};\n            Object.assign(newCustomFieldValues, customFieldValues);\n            newCustomFieldValues[customFieldName] = value;\n            setCustomFieldValues(newCustomFieldValues);\n        },\n        [customFieldValues]\n    );\n\n    let wordHelperText;\n\n    if (word && word.trim() === lastSearchedWord && settingsProvider.wordField) {\n        wordHelperText =\n            duplicateNotes.length > 0\n                ? `Found ${duplicateNotes.length} notes with word \"${word}\" in field \"${settingsProvider.wordField}\"`\n                : `No notes found with word \"${word.trim()}\" in field \"${settingsProvider.wordField}\"`;\n    } else {\n        wordHelperText = '';\n    }\n\n    const handleViewImage = useCallback(\n        (e: React.MouseEvent<HTMLDivElement>) => {\n            e.preventDefault();\n            e.stopPropagation();\n            onViewImage(image!);\n        },\n        [image, onViewImage]\n    );\n\n    const handleApplyTimestampIntervalToText = useCallback(() => {\n        if (timestampInterval === undefined) {\n            return;\n        }\n\n        const newText = textForTimestampInterval(timestampInterval);\n        setText(newText);\n        setLastAppliedTimestampIntervalToText(timestampInterval);\n    }, [textForTimestampInterval, timestampInterval]);\n\n    const handleTimestampIntervalChange = useCallback(\n        (e: React.ChangeEvent<{}>, newValue: number | number[]) => {\n            const newTimestampInterval = newValue as number[];\n            setTimestampInterval(newTimestampInterval);\n            const selectedSubtitles = sliderContext!.subtitles.filter((s) =>\n                subtitleIntersectsTimeInterval(s, newTimestampInterval)\n            );\n            setSelectedSubtitles(selectedSubtitles);\n\n            if (lastAppliedTimestampIntervalToText !== undefined) {\n                const expectedUnchangedText = textForTimestampInterval(lastAppliedTimestampIntervalToText);\n\n                if (text.trim() === expectedUnchangedText.trim()) {\n                    const newText = textForTimestampInterval(newTimestampInterval);\n                    setText(newText);\n                    setLastAppliedTimestampIntervalToText(newTimestampInterval);\n                }\n            }\n\n            if (onRerecord === undefined && audioClip?.isSliceable() === true) {\n                setLastAppliedTimestampIntervalToAudio(newTimestampInterval);\n            }\n        },\n        [sliderContext, text, lastAppliedTimestampIntervalToText, textForTimestampInterval]\n    );\n\n    const handleApplyTimestampIntervalToAudio = useCallback(\n        (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n            if (onRerecord) {\n                e.stopPropagation();\n                onRerecord();\n            } else {\n                setLastAppliedTimestampIntervalToAudio(timestampInterval);\n            }\n        },\n        [onRerecord, timestampInterval]\n    );\n\n    const handleResetTimestampInterval = useCallback(() => {\n        if (!initialTimestampBoundaryInterval) {\n            return;\n        }\n\n        const selectedSubtitles =\n            sliderContext === undefined || initialTimestampInterval === undefined\n                ? []\n                : sliderContext.subtitles.filter((s) => subtitleIntersectsTimeInterval(s, initialTimestampInterval));\n        setSelectedSubtitles(selectedSubtitles);\n        setTimestampInterval(initialTimestampInterval);\n        setTimestampBoundaryInterval(initialTimestampBoundaryInterval);\n        setTimestampMarks(\n            sliderContext && sliderMarksFromSliderContext(sliderContext, initialTimestampBoundaryInterval)\n        );\n    }, [initialTimestampInterval, initialTimestampBoundaryInterval, sliderContext]);\n\n    const handleZoomInTimestampInterval = useCallback(() => {\n        if (!timestampBoundaryInterval || !timestampInterval) {\n            return;\n        }\n\n        const newMin = (timestampBoundaryInterval[0] + timestampInterval[0]) / 2;\n        const newMax = (timestampBoundaryInterval[1] + timestampInterval[1]) / 2;\n        const newTimestampBoundaryInterval = [newMin, newMax];\n        setTimestampBoundaryInterval(newTimestampBoundaryInterval);\n        setTimestampMarks(sliderContext && sliderMarksFromSliderContext(sliderContext, newTimestampBoundaryInterval));\n    }, [timestampBoundaryInterval, timestampInterval, sliderContext]);\n\n    const handleZoomOutTimestampInterval = useCallback(() => {\n        if (!timestampBoundaryInterval || !timestampInterval) {\n            return;\n        }\n\n        const newMin = Math.max(0, 2 * timestampBoundaryInterval[0] - timestampInterval[0]);\n        const newMax = 2 * timestampBoundaryInterval[1] - timestampInterval[1];\n        const newTimestampBoundaryInterval = [newMin, newMax];\n        setTimestampBoundaryInterval(newTimestampBoundaryInterval);\n        setTimestampMarks(sliderContext && sliderMarksFromSliderContext(sliderContext, newTimestampBoundaryInterval));\n    }, [timestampBoundaryInterval, timestampInterval, sliderContext]);\n\n    const handleCopyImageToClipboard = useCallback(\n        async (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n            e.stopPropagation();\n\n            if (!image) {\n                return;\n            }\n\n            navigator.clipboard.write([new ClipboardItem({ 'image/png': await image.pngBlob() })]);\n        },\n        [image]\n    );\n\n    const disableApplyTextSelection =\n        !sliderContext || sliderContext.subtitles.filter((s) => s.text.trim() !== '').length === 0;\n\n    let audioActionElement: JSX.Element | undefined = undefined;\n\n    if (onRerecord !== undefined) {\n        audioActionElement = (\n            <Tooltip title=\"Apply Selection (rerecord)\">\n                <span>\n                    <IconButton\n                        disabled={\n                            !timestampInterval ||\n                            !lastAppliedTimestampIntervalToAudio ||\n                            (timestampInterval[0] === lastAppliedTimestampIntervalToAudio[0] &&\n                                timestampInterval[1] === lastAppliedTimestampIntervalToAudio[1])\n                        }\n                        onClick={handleApplyTimestampIntervalToAudio}\n                        edge=\"end\"\n                    >\n                        <FiberManualRecordIcon />\n                    </IconButton>\n                </span>\n            </Tooltip>\n        );\n    }\n\n    return (\n        <Dialog open={open} disableEnforceFocus fullWidth maxWidth=\"sm\" onClose={onCancel}>\n            <Toolbar>\n                <Typography variant=\"h6\" className={classes.title}>\n                    Anki Export\n                </Typography>\n                {onOpenSettings && (\n                    <IconButton edge=\"end\" onClick={() => onOpenSettings()}>\n                        <SettingsIcon />\n                    </IconButton>\n                )}\n            </Toolbar>\n            <DialogContent ref={dialogRefCallback}>\n                <form className={classes.root}>\n                    {sliderContext && timestampInterval && (\n                        <TextImageSet\n                            selectedSubtitles={selectedSubtitles.filter((s) => s.textImage !== undefined)}\n                            width={width}\n                        />\n                    )}\n                    <TextField\n                        variant=\"filled\"\n                        color=\"secondary\"\n                        multiline\n                        fullWidth\n                        maxRows={8}\n                        label=\"Sentence\"\n                        value={text}\n                        onChange={(e) => setText(e.target.value)}\n                        InputProps={{\n                            endAdornment: timestampInterval && (\n                                <TextFieldEndAdornment position=\"end\">\n                                    <Tooltip title=\"Apply Selection\">\n                                        <span>\n                                            <IconButton\n                                                disabled={\n                                                    !timestampInterval ||\n                                                    !lastAppliedTimestampIntervalToText ||\n                                                    (timestampInterval[0] === lastAppliedTimestampIntervalToText[0] &&\n                                                        timestampInterval[1] ===\n                                                            lastAppliedTimestampIntervalToText[1]) ||\n                                                    disableApplyTextSelection\n                                                }\n                                                onClick={handleApplyTimestampIntervalToText}\n                                                edge=\"end\"\n                                            >\n                                                <DoneIcon />\n                                            </IconButton>\n                                        </span>\n                                    </Tooltip>\n                                </TextFieldEndAdornment>\n                            ),\n                        }}\n                    />\n                    <TextField\n                        variant=\"filled\"\n                        color=\"secondary\"\n                        multiline\n                        fullWidth\n                        rows={8}\n                        label=\"Definition\"\n                        value={definition}\n                        onChange={(e) => setDefinition(e.target.value)}\n                    />\n                    <TextField\n                        variant=\"filled\"\n                        color=\"secondary\"\n                        fullWidth\n                        label=\"Word\"\n                        value={word}\n                        onChange={(e) => setWord(e.target.value)}\n                        helperText={wordHelperText}\n                        InputProps={{\n                            endAdornment: (\n                                <InputAdornment position=\"end\">\n                                    <Tooltip title=\"Search in Anki\">\n                                        <span>\n                                            <IconButton\n                                                disabled={\n                                                    disabled ||\n                                                    !settingsProvider.wordField ||\n                                                    !word ||\n                                                    word.trim() === ''\n                                                }\n                                                onClick={() => anki.findNotesWithWordGui(word.trim())}\n                                                edge=\"end\"\n                                            >\n                                                <SearchIcon />\n                                            </IconButton>\n                                        </span>\n                                    </Tooltip>\n                                </InputAdornment>\n                            ),\n                        }}\n                    />\n                    {Object.keys(customFields).map((customFieldName) => (\n                        <TextField\n                            key={customFieldName}\n                            variant=\"filled\"\n                            color=\"secondary\"\n                            fullWidth\n                            multiline\n                            maxRows={8}\n                            label={customFieldName}\n                            value={customFieldValues[customFieldName] || ''}\n                            onChange={(e) => handleCustomFieldChange(customFieldName, e.target.value)}\n                        />\n                    ))}\n                    {audioClip && (\n                        <div className={classes.mediaField} onClick={handlePlayAudio}>\n                            <TextField\n                                variant=\"filled\"\n                                color=\"secondary\"\n                                fullWidth\n                                value={audioClip.name}\n                                label=\"Audio\"\n                                helperText={\n                                    onRerecord === undefined &&\n                                    !audioClip.isSliceable() &&\n                                    'Audio clip cannot be updated because it is pre-recorded'\n                                }\n                                InputProps={{\n                                    endAdornment: audioActionElement && timestampInterval && (\n                                        <InputAdornment position=\"end\">{audioActionElement}</InputAdornment>\n                                    ),\n                                }}\n                            />\n                        </div>\n                    )}\n                    {image && (\n                        <div className={classes.mediaField} onClick={handleViewImage}>\n                            <TextField\n                                variant=\"filled\"\n                                color=\"secondary\"\n                                fullWidth\n                                value={image.name}\n                                label=\"Image\"\n                                InputProps={{\n                                    endAdornment: (\n                                        <InputAdornment position=\"end\">\n                                            <Tooltip title=\"Copy to Clipboard\">\n                                                <span>\n                                                    <IconButton onClick={handleCopyImageToClipboard} edge=\"end\">\n                                                        <FileCopyIcon />\n                                                    </IconButton>\n                                                </span>\n                                            </Tooltip>\n                                        </InputAdornment>\n                                    ),\n                                }}\n                            />\n                        </div>\n                    )}\n                    <TextField\n                        variant=\"filled\"\n                        color=\"secondary\"\n                        fullWidth\n                        label=\"Source\"\n                        value={source}\n                        onChange={(e) => setSource(e.target.value)}\n                    />\n                    {initialUrl && (\n                        <TextField\n                            variant=\"filled\"\n                            color=\"secondary\"\n                            fullWidth\n                            label=\"URL\"\n                            value={url}\n                            onChange={(e) => setUrl(e.target.value)}\n                        />\n                    )}\n                    {settingsProvider.tags.length > 0 && (\n                        <TagsTextField\n                            variant=\"filled\"\n                            label=\"Tags\"\n                            helperText=\"Comma-separated list of strings\"\n                            fullWidth\n                            color=\"secondary\"\n                            tags={tags}\n                            onTagsChange={(newTags) => setTags(newTags)}\n                        />\n                    )}\n                    {timestampInterval && timestampBoundaryInterval && timestampMarks && (\n                        <Grid container direction=\"row\">\n                            <Grid item style={{ flexGrow: 1 }}>\n                                <Slider\n                                    ValueLabelComponent={ValueLabelComponent}\n                                    value={timestampInterval}\n                                    valueLabelFormat={sliderValueLabelFormat}\n                                    onChange={handleTimestampIntervalChange}\n                                    min={timestampBoundaryInterval[0]}\n                                    max={timestampBoundaryInterval[1]}\n                                    marks={timestampMarks}\n                                    step={1}\n                                    valueLabelDisplay=\"auto\"\n                                    className={classes.rangeSelectSlider}\n                                    color=\"secondary\"\n                                />\n                            </Grid>\n                            <Grid item>\n                                <Tooltip title=\"Reset\">\n                                    <span>\n                                        <IconButton\n                                            edge=\"end\"\n                                            style={{ marginTop: -8 }}\n                                            onClick={handleResetTimestampInterval}\n                                        >\n                                            <RestoreIcon />\n                                        </IconButton>\n                                    </span>\n                                </Tooltip>\n                            </Grid>\n                            <Grid item>\n                                <Tooltip title=\"Zoom In\">\n                                    <span>\n                                        <IconButton\n                                            edge=\"end\"\n                                            style={{ marginTop: -8 }}\n                                            onClick={handleZoomInTimestampInterval}\n                                        >\n                                            <ZoomInIcon />\n                                        </IconButton>\n                                    </span>\n                                </Tooltip>\n                            </Grid>\n                            <Grid item>\n                                <Tooltip title=\"Zoom Out\">\n                                    <span>\n                                        <IconButton\n                                            edge=\"end\"\n                                            style={{ marginTop: -8 }}\n                                            onClick={handleZoomOutTimestampInterval}\n                                        >\n                                            <ZoomOutIcon />\n                                        </IconButton>\n                                    </span>\n                                </Tooltip>\n                            </Grid>\n                        </Grid>\n                    )}\n                </form>\n            </DialogContent>\n            <DialogActions>\n                <Button disabled={disabled} onClick={() => onCancel()}>\n                    Cancel\n                </Button>\n                {sliderContext && (\n                    <Button disabled={disabled} onClick={() => onRewind()}>\n                        Rewind\n                    </Button>\n                )}\n                <Button\n                    disabled={disabled}\n                    onClick={() =>\n                        onProceed(\n                            text,\n                            definition,\n                            audioClip,\n                            image,\n                            word,\n                            source ?? '',\n                            url ?? '',\n                            customFieldValues,\n                            tags,\n                            'gui'\n                        )\n                    }\n                >\n                    Open in Anki\n                </Button>\n                <Button\n                    disabled={disabled}\n                    onClick={() =>\n                        onProceed(\n                            text,\n                            definition,\n                            audioClip,\n                            image,\n                            word,\n                            source ?? '',\n                            url ?? '',\n                            customFieldValues,\n                            tags,\n                            'updateLast'\n                        )\n                    }\n                >\n                    Update Last Card\n                </Button>\n                <Button\n                    disabled={disabled}\n                    onClick={() =>\n                        onProceed(\n                            text,\n                            definition,\n                            audioClip,\n                            image,\n                            word,\n                            source ?? '',\n                            url ?? '',\n                            customFieldValues,\n                            tags,\n                            'default'\n                        )\n                    }\n                >\n                    Export\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n","export default __webpack_public_path__ + \"static/media/background-colored.cbc50e45.png\";","import { makeStyles } from '@material-ui/styles';\nimport Fade from '@material-ui/core/Fade';\nimport coloredBackground from './background-colored.png';\nimport { Theme } from '@material-ui/core';\n\ninterface StylesProps {\n    dragging: boolean;\n    appBarHidden: boolean;\n}\n\ninterface Props {\n    dragging: boolean;\n    appBarHidden: boolean;\n    loading: boolean;\n}\n\nconst useStyles = makeStyles<Theme, StylesProps>((theme) => ({\n    root: ({ dragging, appBarHidden }) => ({\n        position: 'absolute',\n        height: appBarHidden ? '100%' : 'calc(100% - 64px)',\n        width: '100%',\n        zIndex: 101,\n        pointerEvents: dragging ? 'auto' : 'none',\n    }),\n    transparentBackground: ({ appBarHidden }) => ({\n        '&::before': {\n            content: \"' '\",\n            position: 'absolute',\n            height: appBarHidden ? '100vh' : 'calc(100vh - 64px)',\n            width: '100%',\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            alignItems: 'center',\n            textAlign: 'center',\n            backgroundSize: '300px 300px',\n            backgroundRepeat: 'no-repeat',\n            backgroundPosition: 'center',\n            backgroundImage: `url(${coloredBackground})`,\n            backgroundBlendMode: 'overlay',\n            background: 'rgba(0, 0, 0, .3)',\n            filter: 'drop-shadow(10px 10px 10px rgb(0, 0, 0, .4))',\n        },\n        width: '100%',\n        height: '100%',\n    }),\n}));\n\nexport default function DragOverlay({ dragging, appBarHidden, loading }: Props) {\n    const classes = useStyles({ dragging, appBarHidden });\n\n    return (\n        <div className={classes.root}>\n            <Fade in={dragging || loading}>\n                <div className={classes.transparentBackground} />\n            </Fade>\n        </div>\n    );\n}\n","import { compile as parseAss } from 'ass-compiler';\nimport { Cue, parseSync as parseSrt, Node as SrtNode, stringifySync as writeSrt } from 'subtitle';\nimport { WebVTT } from 'vtt.js';\nimport { XMLParser } from 'fast-xml-parser';\nimport { DisplaySet, parseDisplaySets } from 'pgs-parser';\nimport { SubtitleTextImage } from '@project/common';\n\nconst tagRegex = RegExp('</?([^>]*)>', 'ig');\nconst assNewLineRegex = RegExp(/\\\\[nN]/, 'ig');\nconst helperElement = document.createElement('div');\nconst helperCanvas = document.createElement('canvas');\n\ninterface SubtitleNode {\n    start: number;\n    end: number;\n    text: string;\n    textImage?: SubtitleTextImage;\n    track: number;\n}\n\nexport interface TextFilter {\n    regex: RegExp;\n    replacement: string;\n}\n\nexport default class SubtitleReader {\n    private readonly _textFilter?: TextFilter;\n    private xmlParser?: XMLParser;\n\n    constructor(textFilter?: TextFilter) {\n        this._textFilter = textFilter;\n    }\n\n    async subtitles(files: File[], flatten?: boolean) {\n        return (await Promise.all(files.map((f, i) => this._subtitles(f, flatten === true ? 0 : i))))\n            .flatMap((nodes) => nodes)\n            .sort((n1, n2) => n1.start - n2.start);\n    }\n\n    async _subtitles(file: File, track: number): Promise<SubtitleNode[]> {\n        if (file.name.endsWith('.srt')) {\n            const nodes = parseSrt(await file.text());\n            return nodes\n                .filter((node) => node.type === 'cue')\n                .map((node) => {\n                    const cue = node.data as Cue;\n                    return {\n                        start: cue.start,\n                        end: cue.end,\n                        text: this._filterText(cue.text).replace(tagRegex, ''),\n                        track: track,\n                    };\n                });\n        }\n\n        if (file.name.endsWith('.vtt') || file.name.endsWith('.nfvtt')) {\n            return new Promise(async (resolve, reject) => {\n                const isFromNetflix = file.name.endsWith('.nfvtt');\n                const parser = new WebVTT.Parser(window, WebVTT.StringDecoder());\n                const cues: any[] = [];\n                parser.oncue = (c: any) => {\n                    c.text = this._filterText(c.text).replace(tagRegex, '');\n\n                    if (isFromNetflix) {\n                        const lines = c.text.split('\\n');\n                        const newLines = [];\n\n                        for (const line of lines) {\n                            newLines.push(this._fixRTL(line));\n                        }\n\n                        c.text = newLines.join('\\n');\n                    }\n                    cues.push(c);\n                };\n                parser.onflush = () =>\n                    resolve(\n                        cues.map((c) => ({\n                            start: Math.floor(c.startTime * 1000),\n                            end: Math.floor(c.endTime * 1000),\n                            text: c.text as string,\n                            track: track,\n                        }))\n                    );\n                parser.parse(await file.text());\n                parser.flush();\n            });\n        }\n\n        if (file.name.endsWith('.ass')) {\n            const nodes = parseAss(await file.text(), {});\n            return nodes.dialogues.map((dialogue) => {\n                return {\n                    start: Math.round(dialogue.start * 1000),\n                    end: Math.round(dialogue.end * 1000),\n                    text: this._filterText(\n                        dialogue.slices.flatMap((slice) => slice.fragments.map((fragment) => fragment.text)).join('')\n                    ).replace(assNewLineRegex, '\\n'),\n                    track: track,\n                };\n            });\n        }\n\n        if (file.name.endsWith('.ytxml')) {\n            const text = await file.text();\n            const xml = this._xmlParser().parse(text);\n\n            if (Object.keys(xml).length === 0) {\n                return [];\n            }\n\n            const textNodes = xml['transcript']['text'];\n            const subtitles = [];\n\n            for (let index = 0, length = textNodes.length; index < length; index++) {\n                const elm = textNodes[index];\n\n                if (!('#text' in elm) || !('@_dur' in elm) || !('@_start' in elm)) {\n                    continue;\n                }\n\n                const start = parseFloat(elm['@_start']);\n\n                subtitles.push({\n                    start: Math.floor(start * 1000),\n                    end: Math.floor((start + parseFloat(elm['@_dur'])) * 1000),\n                    text: this._filterText(this._decodeHTML(String(elm['#text'])).replace(tagRegex, '')),\n                    track,\n                });\n            }\n\n            return subtitles;\n        }\n\n        if (file.name.endsWith('.sup')) {\n            const subtitles: SubtitleNode[] = [];\n            await file\n                .stream()\n                // FIXME: Figure out how to remove conflicts with @types/node ReadableStream\n                // @ts-ignore\n                .pipeThrough(parseDisplaySets())\n                .pipeTo(this._displaySetsToSubtitles(subtitles, track));\n\n            return subtitles;\n        }\n\n        if (file.name.endsWith('.dfxp') || file.name.endsWith('ttml2')) {\n            const text = await file.text();\n            const parser = new DOMParser();\n            const doc = parser.parseFromString(text, 'application/xml');\n            const nodes = this._xmlNodePath(doc.documentElement, ['body', 'div']);\n            const subtitles: SubtitleNode[] = [];\n\n            for (let index = 0, length = nodes.length; index < length; index++) {\n                const elm = nodes[index];\n                const beginAttribute = elm.getAttribute('begin');\n                const endAttribute = elm.getAttribute('end');\n\n                if (beginAttribute === null || endAttribute === null) {\n                    continue;\n                }\n\n                subtitles.push({\n                    text: this._filterText(elm.textContent ?? ''),\n                    start: this._parseTtmlTimestamp(beginAttribute),\n                    end: this._parseTtmlTimestamp(endAttribute),\n                    track,\n                });\n            }\n\n            return subtitles;\n        }\n\n        throw new Error('Unsupported subtitle file format');\n    }\n\n    private _parseTtmlTimestamp(timestamp: string) {\n        const parts = timestamp.split(':');\n        const milliseconds = Math.floor(parseFloat(parts[parts.length - 1]) * 1000);\n        const minutes = parts.length < 2 ? 0 : Number(parts[parts.length - 2]);\n        const hours = parts.length < 3 ? 0 : Number(parts[parts.length - 3]);\n\n        return milliseconds + minutes * 60000 + hours * 3600000;\n    }\n\n    private _xmlNodePath(parent: Element, path: string[]): Element[] {\n        if (path.length === 0) {\n            const children: Element[] = [];\n\n            for (let i = 0; i < parent.children.length; ++i) {\n                const node = parent.children[i];\n                children.push(node);\n            }\n\n            return children;\n        }\n\n        for (let i = 0; i < parent.children.length; ++i) {\n            const node = parent.children[i];\n            const tag = this._dropTagNamespace(node.tagName);\n\n            if (tag === path[0]) {\n                return this._xmlNodePath(node, path.slice(1));\n            }\n        }\n\n        throw new Error('Failied to parse XML path');\n    }\n\n    private _dropTagNamespace(tag: string) {\n        const colonIndex = tag.lastIndexOf(':');\n\n        if (colonIndex !== -1) {\n            return tag.substring(colonIndex + 1);\n        }\n\n        return tag;\n    }\n\n    private _displaySetsToSubtitles(subtitles: SubtitleNode[], track: number) {\n        let imageDataArray: Uint8ClampedArray | undefined;\n        let currentImageDisplaySet: DisplaySet | undefined;\n\n        return new WritableStream<DisplaySet>({\n            write(displaySet, controller) {\n                if (displaySet.objectDefinitionSegments.length > 0) {\n                    if (currentImageDisplaySet === undefined) {\n                        currentImageDisplaySet = displaySet;\n                    }\n                } else if (currentImageDisplaySet !== undefined) {\n                    const screenWidth = currentImageDisplaySet.presentationCompositionSegment.width;\n                    const screenHeight = currentImageDisplaySet.presentationCompositionSegment.height;\n                    imageDataArray =\n                        imageDataArray === undefined || imageDataArray.length < screenHeight * screenWidth * 4\n                            ? new Uint8ClampedArray(screenWidth * screenHeight * 4)\n                            : imageDataArray;\n                    const imageData = currentImageDisplaySet.imageData(imageDataArray);\n                    helperCanvas.width = imageData.width;\n                    helperCanvas.height = imageData.height;\n                    const context = helperCanvas.getContext('2d')!;\n                    context.putImageData(imageData, 0, 0);\n                    subtitles.push({\n                        start:\n                            currentImageDisplaySet.objectDefinitionSegments[0].header.presentationTimestamp / 90 ?? 0,\n                        end: displaySet.endDefinitionSegment.header.presentationTimestamp / 90,\n                        text: '',\n                        textImage: {\n                            dataUrl: helperCanvas.toDataURL('image/png'),\n                            image: {\n                                width: imageData.width,\n                                height: imageData.height,\n                            },\n                            screen: {\n                                width: currentImageDisplaySet.presentationCompositionSegment.width,\n                                height: currentImageDisplaySet.presentationCompositionSegment.height,\n                            },\n                        },\n                        track,\n                    });\n\n                    currentImageDisplaySet = undefined;\n                }\n            },\n        });\n    }\n\n    private _fixRTL(line: string): string {\n        const index1 = line.indexOf('&lrm;');\n        const index2 = line.indexOf('&rlm;');\n        let newLine = '';\n\n        if (index1 > -1) {\n            newLine = line.substring(0, index1) + '\\u202a' + line.substring(index1 + 5) + '\\u202c';\n            return this._fixRTL(newLine);\n        } else if (index2 > -1) {\n            newLine = line.substring(0, index2) + '\\u202b' + line.substring(index2 + 5) + '\\u202c';\n            return this._fixRTL(newLine);\n        }\n\n        return line;\n    }\n\n    private _decodeHTML(text: string): string {\n        helperElement.innerHTML = text;\n        return helperElement.textContent ?? helperElement.innerText;\n    }\n\n    private _xmlParser() {\n        if (this.xmlParser === undefined) {\n            this.xmlParser = new XMLParser({\n                ignoreAttributes: false,\n            });\n        }\n\n        return this.xmlParser;\n    }\n\n    private _filterText(text: string): string {\n        if (this._textFilter === undefined) {\n            return text;\n        }\n\n        return text.replace(this._textFilter.regex, this._textFilter.replacement);\n    }\n\n    subtitlesToSrt(subtitles: SubtitleNode[]) {\n        const nodes: SrtNode[] = subtitles.map((subtitleNode) => {\n            return {\n                type: 'cue',\n                data: {\n                    start: subtitleNode.start,\n                    end: subtitleNode.end,\n                    text: subtitleNode.text,\n                },\n            };\n        });\n        return writeSrt(nodes, { format: 'SRT' });\n    }\n\n    async filesToSrt(files: File[]) {\n        return this.subtitlesToSrt(await this.subtitles(files));\n    }\n}\n","import { makeStyles, Theme } from '@material-ui/core/styles';\nimport clsx from 'clsx';\nimport AppBar from '@material-ui/core/AppBar';\nimport BugReportIcon from '@material-ui/icons/BugReport';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport HelpIcon from '@material-ui/icons/Help';\nimport FolderIcon from '@material-ui/icons/Folder';\nimport IconButton from '@material-ui/core/IconButton';\nimport ListIcon from '@material-ui/icons/List';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Tooltip, { TooltipProps } from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Popover from '@material-ui/core/Popover';\nimport { useCallback, useState } from 'react';\n\ninterface BarProps {\n    drawerWidth: number;\n    drawerOpen: boolean;\n    hidden: boolean;\n    title: string;\n    subtitleFiles?: File[];\n    onFileSelector: () => void;\n    onDownloadSubtitleFilesAsSrt: () => void;\n    onOpenSettings: () => void;\n    onOpenCopyHistory: () => void;\n}\n\ninterface StyleProps {\n    drawerWidth: number;\n}\n\nconst useStyles = makeStyles<Theme, StyleProps, string>((theme) => ({\n    title: {\n        flexGrow: 1,\n    },\n    leftButton: {\n        marginRight: theme.spacing(1),\n    },\n    appBar: {\n        transition: theme.transitions.create(['margin', 'width'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n    },\n    appBarShift: {\n        width: ({ drawerWidth }) => `calc(100% - ${drawerWidth}px)`,\n        transition: theme.transitions.create(['margin', 'width'], {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n        marginRight: ({ drawerWidth }) => drawerWidth,\n    },\n    copyHistoryButton: {\n        transform: 'scaleX(1)',\n        width: 48,\n        padding: 12,\n        transition: theme.transitions.create(['transform', 'padding', 'width'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n    },\n    copyHistoryButtonShift: {\n        transform: 'scaleX(0)',\n        width: 0,\n        padding: 5,\n        transition: theme.transitions.create(['transform', 'padding', 'width'], {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    hide: {\n        display: 'none',\n    },\n}));\n\ninterface CopyHistoryTooltipStylesProps {\n    show: boolean;\n}\n\ninterface CopyHistoryTooltipProps extends TooltipProps {\n    show: boolean;\n}\n\nconst useCopyHistoryTooltipStyles = makeStyles<Theme, CopyHistoryTooltipStylesProps, string>((theme) => ({\n    tooltip: ({ show }) => ({\n        display: show ? 'block' : 'none',\n    }),\n}));\n\nfunction CopyHistoryTooltip({ show, ...toolTipProps }: CopyHistoryTooltipProps) {\n    const classes = useCopyHistoryTooltipStyles({ show: show });\n    return <Tooltip classes={classes} {...toolTipProps} />;\n}\n\nexport default function Bar({\n    drawerWidth,\n    drawerOpen,\n    hidden,\n    title,\n    subtitleFiles,\n    onOpenSettings,\n    onOpenCopyHistory,\n    onFileSelector,\n    onDownloadSubtitleFilesAsSrt,\n}: BarProps) {\n    const classes = useStyles({ drawerWidth });\n    const [menuOpen, setMenuOpen] = useState<boolean>(false);\n    const [menuAnchorEl, setMenuAnchorEl] = useState<HTMLElement>();\n    const canSaveAsSrt =\n        subtitleFiles !== undefined && subtitleFiles.find((f) => !f.name.endsWith('.sup')) !== undefined;\n\n    const handleFileAction = useCallback(\n        (event: React.MouseEvent<HTMLButtonElement>) => {\n            if (canSaveAsSrt) {\n                setMenuAnchorEl(event.currentTarget);\n                setMenuOpen(true);\n            } else {\n                onFileSelector();\n            }\n        },\n        [onFileSelector, canSaveAsSrt]\n    );\n\n    const handleMenuClose = useCallback(() => {\n        setMenuOpen(false);\n    }, []);\n\n    const handleOpenFilesFromMenu = useCallback(() => {\n        setMenuOpen(false);\n        onFileSelector();\n    }, [onFileSelector]);\n\n    const handleDownloadSubtitleFilesAsSrt = useCallback(() => {\n        setMenuOpen(false);\n        onDownloadSubtitleFilesAsSrt();\n    }, [onDownloadSubtitleFilesAsSrt]);\n\n    return (\n        <>\n            {canSaveAsSrt && (\n                <Popover\n                    open={menuOpen}\n                    anchorEl={menuAnchorEl}\n                    onClose={handleMenuClose}\n                    anchorOrigin={{\n                        vertical: 'bottom',\n                        horizontal: 'center',\n                    }}\n                >\n                    <List>\n                        <ListItem button onClick={handleOpenFilesFromMenu}>\n                            Open Files\n                        </ListItem>\n                        <ListItem button onClick={handleDownloadSubtitleFilesAsSrt}>\n                            Download Subtitles as SRT\n                        </ListItem>\n                    </List>\n                </Popover>\n            )}\n            <AppBar\n                position=\"static\"\n                elevation={0}\n                className={clsx(classes.appBar, {\n                    [classes.appBarShift]: drawerOpen,\n                    [classes.hide]: hidden,\n                })}\n            >\n                <Toolbar>\n                    <Tooltip\n                        disableFocusListener={canSaveAsSrt}\n                        disableHoverListener={canSaveAsSrt}\n                        disableTouchListener={canSaveAsSrt}\n                        title=\"Open Files\"\n                    >\n                        <IconButton\n                            edge=\"start\"\n                            color=\"inherit\"\n                            className={classes.leftButton}\n                            onClick={handleFileAction}\n                        >\n                            <FolderIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        {title}\n                    </Typography>\n                    <Tooltip title=\"Donate\">\n                        <IconButton\n                            edge=\"end\"\n                            color=\"inherit\"\n                            component=\"a\"\n                            href=\"https://github.com/killergerbah/asbplayer#supporters\"\n                            target=\"_blank\"\n                            rel=\"noreferrer\"\n                        >\n                            <FavoriteIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title=\"Submit Issue\">\n                        <IconButton\n                            edge=\"end\"\n                            color=\"inherit\"\n                            component=\"a\"\n                            href=\"https://github.com/killergerbah/asbplayer/issues\"\n                            target=\"_blank\"\n                            rel=\"noreferrer\"\n                        >\n                            <BugReportIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title=\"Help\">\n                        <IconButton\n                            edge=\"end\"\n                            color=\"inherit\"\n                            component=\"a\"\n                            href=\"https://github.com/killergerbah/asbplayer#usage\"\n                            target=\"_blank\"\n                            rel=\"noreferrer\"\n                        >\n                            <HelpIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title=\"Settings\">\n                        <IconButton edge=\"end\" color=\"inherit\" onClick={onOpenSettings}>\n                            <SettingsIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <CopyHistoryTooltip title=\"Mining History\" show={!drawerOpen}>\n                        <IconButton\n                            edge=\"end\"\n                            color=\"inherit\"\n                            aria-label=\"menu\"\n                            className={clsx(classes.copyHistoryButton, {\n                                [classes.copyHistoryButtonShift]: drawerOpen,\n                            })}\n                            onClick={onOpenCopyHistory}\n                        >\n                            <ListIcon />\n                        </IconButton>\n                    </CopyHistoryTooltip>\n                </Toolbar>\n            </AppBar>\n        </>\n    );\n}\n","import { Rgb } from '@project/common';\n\nexport function arrayEquals(a: any[], b: any[], equals = (a: any, b: any) => a === b) {\n    if (a.length !== b.length) {\n        return false;\n    }\n\n    for (let i = 0; i < a.length; ++i) {\n        if (!equals(a[i], b[i])) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nexport function keysAreEqual(a: any, b: any) {\n    for (let key in a) {\n        if (!(key in b)) {\n            return false;\n        }\n    }\n\n    for (let key in b) {\n        if (!(key in a)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n// https://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb\nfunction hexToRgb(hex: string): Rgb {\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)!;\n    return {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16),\n    };\n}\n\ninterface SubtitleStyle {\n    subtitleColor: string;\n    subtitleSize: number;\n    subtitleOutlineThickness: number;\n    subtitleOutlineColor: string;\n    subtitleBackgroundOpacity: number;\n    subtitleBackgroundColor: string;\n    subtitleFontFamily: string;\n}\n\nexport function computeStyles({\n    subtitleColor,\n    subtitleSize,\n    subtitleOutlineThickness,\n    subtitleOutlineColor,\n    subtitleBackgroundOpacity,\n    subtitleBackgroundColor,\n    subtitleFontFamily,\n}: SubtitleStyle) {\n    const styles: any = {\n        color: subtitleColor,\n        fontSize: Number(subtitleSize),\n    };\n\n    if (subtitleOutlineThickness > 0) {\n        const thickness = subtitleOutlineThickness;\n        const color = subtitleOutlineColor;\n        styles[\n            'textShadow'\n        ] = `0 0 ${thickness}px ${color}, 0 0 ${thickness}px ${color}, 0 0 ${thickness}px ${color}, 0 0 ${thickness}px ${color}`;\n    }\n\n    if (subtitleBackgroundOpacity > 0) {\n        const opacity = subtitleBackgroundOpacity;\n        const color = subtitleBackgroundColor;\n        const { r, g, b } = hexToRgb(color);\n        styles['backgroundColor'] = `rgba(${r}, ${g}, ${b}, ${opacity})`;\n    }\n\n    if (subtitleFontFamily && subtitleFontFamily.length > 0) {\n        styles['fontFamily'] = subtitleFontFamily;\n    }\n\n    return styles;\n}\n\nexport function timeDurationDisplay(\n    milliseconds: number,\n    totalMilliseconds: number,\n    includeMilliseconds = true\n): string {\n    if (milliseconds < 0) {\n        return timeDurationDisplay(0, totalMilliseconds);\n    }\n\n    milliseconds = Math.round(milliseconds);\n    const ms = milliseconds % 1000;\n    milliseconds = (milliseconds - ms) / 1000;\n    const secs = milliseconds % 60;\n    milliseconds = (milliseconds - secs) / 60;\n    const mins = milliseconds % 60;\n\n    if (totalMilliseconds >= 3600000) {\n        const hrs = (milliseconds - mins) / 60;\n\n        if (includeMilliseconds) {\n            return pad(hrs) + ':' + pad(mins) + ':' + pad(secs) + '.' + pad(ms, 3);\n        }\n\n        return pad(hrs) + ':' + pad(mins) + ':' + pad(secs);\n    }\n\n    if (includeMilliseconds) {\n        return pad(mins) + ':' + pad(secs) + '.' + pad(ms, 3);\n    }\n\n    return pad(mins) + ':' + pad(secs);\n}\n\nfunction pad(n: number, zeros: number = 2) {\n    return String(n).padStart(zeros, '0');\n}\n","import React, { useCallback, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { timeDurationDisplay } from '../services/util';\nimport { ListItemSecondaryAction, Theme } from '@material-ui/core';\nimport Divider from '@material-ui/core/Divider';\nimport Drawer from '@material-ui/core/Drawer';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Popover from '@material-ui/core/Popover';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport StarIcon from '@material-ui/icons/Star';\nimport SaveAltIcon from '@material-ui/icons/SaveAlt';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport { AudioModel, ImageModel, SubtitleModel } from '@project/common';\n\nexport interface CopyHistoryItem extends SubtitleModel {\n    name: string;\n    id: string;\n    timestamp: number;\n    surroundingSubtitles: SubtitleModel[];\n    audioFile?: File;\n    audioTrack?: string;\n    videoFile?: File;\n    filePlaybackRate?: number;\n    subtitleFile?: File;\n    mediaTimestamp?: number;\n    audio?: AudioModel;\n    image?: ImageModel;\n    url?: string;\n}\n\ninterface CopyHistoryProps {\n    open: boolean;\n    drawerWidth: number;\n    items: CopyHistoryItem[];\n    onClose: () => void;\n    onDelete: (item: CopyHistoryItem) => void;\n    onAnki: (item: CopyHistoryItem) => void;\n    onSelect: (item: CopyHistoryItem) => void;\n    onClipAudio: (item: CopyHistoryItem) => void;\n    onDownloadImage: (item: CopyHistoryItem) => void;\n    onDownloadSectionAsSrt: (name: string, items: CopyHistoryItem[]) => void;\n}\n\nconst useStyles = makeStyles<Theme, CopyHistoryProps, string>((theme) => ({\n    drawer: {\n        width: ({ drawerWidth }) => drawerWidth,\n        flexShrink: 0,\n    },\n    drawerPaper: {\n        width: ({ drawerWidth }) => drawerWidth,\n    },\n    drawerHeader: {\n        display: 'flex',\n        alignItems: 'center',\n        position: 'static',\n        padding: theme.spacing(0, 1),\n        // necessary for content to be below app bar\n        ...theme.mixins.toolbar,\n        justifyContent: 'flex-start',\n    },\n    listContainer: {\n        position: 'relative',\n        height: '100%',\n        overflowY: 'auto',\n        overflowX: 'hidden',\n    },\n    listItem: {\n        '&:hover': {\n            backgroundColor: theme.palette.action.hover,\n        },\n    },\n    listItemGutters: {\n        paddingLeft: 5,\n        paddingRight: 5,\n    },\n    listItemIconRoot: {\n        minWidth: 20,\n    },\n    emptyState: {\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        textAlign: 'center',\n        height: '100%',\n        padding: 15,\n    },\n    text: {\n        flexGrow: 1,\n    },\n    emptyText: {\n        flexGrow: 1,\n        color: theme.palette.text.secondary,\n    },\n    timestamp: {\n        paddingRight: 15,\n        paddingLeft: 15,\n        color: theme.palette.text.secondary,\n    },\n}));\n\ninterface MenuProps {\n    open: boolean;\n    item?: CopyHistoryItem;\n    anchorEl?: Element;\n    onClose: () => void;\n    onSelect: (item: CopyHistoryItem) => void;\n    onClipAudio: (item: CopyHistoryItem) => void;\n    onDownloadImage: (item: CopyHistoryItem) => void;\n    onDelete: (item: CopyHistoryItem) => void;\n}\n\nfunction Menu({ open, anchorEl, onClose, onSelect, onClipAudio, onDownloadImage, onDelete, item }: MenuProps) {\n    const handleCopy = useCallback(() => {\n        navigator.clipboard.writeText(item!.text);\n        onClose();\n    }, [item, onClose]);\n\n    const handleJumpTo = useCallback(() => {\n        onSelect(item!);\n        onClose();\n    }, [item, onSelect, onClose]);\n\n    const handleClipAudio = useCallback(() => {\n        onClipAudio(item!);\n        onClose();\n    }, [item, onClipAudio, onClose]);\n\n    const handleDownloadImage = useCallback(() => {\n        onDownloadImage(item!);\n        onClose();\n    }, [item, onDownloadImage, onClose]);\n\n    const handleDelete = useCallback(() => {\n        onDelete(item!);\n        onClose();\n    }, [item, onDelete, onClose]);\n\n    if (!item) {\n        return null;\n    }\n\n    return (\n        <Popover\n            disableEnforceFocus={true}\n            open={open}\n            anchorEl={anchorEl}\n            onClose={onClose}\n            anchorOrigin={{\n                vertical: 'center',\n                horizontal: 'center',\n            }}\n            transformOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n            }}\n        >\n            <List>\n                <ListItem button onClick={handleCopy}>\n                    <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Copy\" />\n                </ListItem>\n                <ListItem button onClick={handleJumpTo}>\n                    <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Jump To\" />\n                </ListItem>\n                {(item.videoFile || item.audioFile || item.audio) && (\n                    <ListItem button onClick={handleClipAudio}>\n                        <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Download Audio\" />\n                    </ListItem>\n                )}\n                {(item.videoFile || item.image) && (\n                    <ListItem button onClick={handleDownloadImage}>\n                        <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Download Image\" />\n                    </ListItem>\n                )}\n                <ListItem button onClick={handleDelete}>\n                    <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Delete\" />\n                </ListItem>\n            </List>\n        </Popover>\n    );\n}\n\nexport default function CopyHistory(props: CopyHistoryProps) {\n    const onDelete = props.onDelete;\n    const classes = useStyles(props);\n    const scrollToBottomRefCallback = useCallback((element: HTMLElement | null) => {\n        if (element) {\n            element.scrollIntoView();\n        }\n    }, []);\n    const [menuItem, setMenuItem] = useState<CopyHistoryItem>();\n    const [menuOpen, setMenuOpen] = useState<boolean>(false);\n    const [menuAnchorEl, setMenuAnchorEl] = useState<Element>();\n\n    const handleMenu = useCallback((e: React.MouseEvent, item: CopyHistoryItem) => {\n        setMenuItem(item);\n        setMenuOpen(true);\n        setMenuAnchorEl(e.currentTarget);\n    }, []);\n\n    const handleMenuClosed = useCallback(() => {\n        setMenuItem(undefined);\n        setMenuOpen(false);\n        setMenuAnchorEl(undefined);\n    }, []);\n\n    const handleDelete = useCallback(\n        (item: CopyHistoryItem) => {\n            onDelete(item);\n        },\n        [onDelete]\n    );\n\n    let content;\n\n    if (props.items.length > 0) {\n        const items = [];\n        let lastSeenItemName = null;\n        let i = 0;\n        const itemNameCounters: { [name: string]: number } = {};\n        let itemsBySection: { [key: string]: CopyHistoryItem[] } = {};\n        let currentKey: string | undefined;\n\n        for (const item of props.items) {\n            if (lastSeenItemName === null || lastSeenItemName !== item.name) {\n\n                if (item.name in itemNameCounters) {\n                    itemNameCounters[item.name]++;\n                } else {\n                    itemNameCounters[item.name] = 0;\n                }\n\n                const key = item.name + '-' + itemNameCounters[item.name];\n                itemsBySection[key] = [];\n                lastSeenItemName = item.name;\n                currentKey = key;\n\n                items.push(\n                    <ListItem key={key}>\n                        <Typography color=\"textSecondary\">{item.name}</Typography>\n                        <ListItemSecondaryAction>\n                            <Tooltip title=\"Download as SRT\">\n                                <IconButton\n                                    onClick={() => props.onDownloadSectionAsSrt(item.name, itemsBySection[key])}\n                                    edge=\"end\"\n                                >\n                                    <SaveAltIcon />\n                                </IconButton>\n                            </Tooltip>\n                        </ListItemSecondaryAction>\n                    </ListItem>\n                );\n            }\n\n            itemsBySection[currentKey!].push(item);\n            const ref = i === props.items.length - 1 ? scrollToBottomRefCallback : null;\n\n            items.push(\n                <ListItem\n                    ref={ref}\n                    key={item.id}\n                    className={classes.listItem}\n                    classes={{ gutters: classes.listItemGutters }}\n                >\n                    <ListItemIcon classes={{ root: classes.listItemIconRoot }}>\n                        <Tooltip title=\"Export to Anki\">\n                            <IconButton onClick={() => props.onAnki(item)}>\n                                <StarIcon fontSize=\"small\" />\n                            </IconButton>\n                        </Tooltip>\n                    </ListItemIcon>\n                    <ListItemIcon classes={{ root: classes.listItemIconRoot }}>\n                        <IconButton onClick={(e) => handleMenu(e, item)}>\n                            <MoreVertIcon fontSize=\"small\" />\n                        </IconButton>\n                    </ListItemIcon>\n                    <ListItemText\n                        primary={\n                            <Grid wrap=\"nowrap\" container>\n                                <Grid item className={item.text === '' ? classes.emptyText : classes.text}>\n                                    {item.text === '' ? 'No text' : item.text}\n                                </Grid>\n                                <Grid item className={classes.timestamp}>\n                                    {timeDurationDisplay(item.start, item.start, false)}\n                                </Grid>\n                            </Grid>\n                        }\n                    />\n                </ListItem>\n            );\n\n            ++i;\n        }\n\n        content = (\n            <div className={classes.listContainer}>\n                <List>{items}</List>\n            </div>\n        );\n    } else {\n        content = (\n            <div className={classes.emptyState}>\n                <Typography variant=\"h6\">Mining history is empty.</Typography>\n                <Typography variant=\"caption\">See the help for keyboard shortcuts.</Typography>\n            </div>\n        );\n    }\n\n    return (\n        <React.Fragment>\n            <Drawer\n                variant=\"persistent\"\n                anchor=\"right\"\n                open={props.open}\n                className={classes.drawer}\n                classes={{\n                    paper: classes.drawerPaper,\n                }}\n            >\n                <div className={classes.drawerHeader}>\n                    <IconButton onClick={props.onClose}>\n                        <ChevronRightIcon />\n                    </IconButton>\n                </div>\n                <Divider />\n                {content}\n            </Drawer>\n            <Menu\n                open={props.open && menuOpen}\n                anchorEl={menuAnchorEl}\n                item={menuItem}\n                onClose={handleMenuClosed}\n                onSelect={props.onSelect}\n                onClipAudio={props.onClipAudio}\n                onDownloadImage={props.onDownloadImage}\n                onDelete={handleDelete}\n            />\n        </React.Fragment>\n    );\n}\n","import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport gt from 'semver/functions/gt';\nimport Fade from '@material-ui/core/Fade';\nimport Link from '@material-ui/core/Link';\nimport Typography from '@material-ui/core/Typography';\nimport ChromeExtension from '../services/ChromeExtension';\nimport { Theme } from '@material-ui/core/styles';\n\ninterface StylesProps {\n    appBarHidden: boolean;\n}\n\nconst useStyles = makeStyles<Theme, StylesProps>((theme) => ({\n    background: ({ appBarHidden }) => ({\n        position: 'absolute',\n        height: appBarHidden ? '100vh' : 'calc(100vh - 64px)',\n        width: '100%',\n        zIndex: 100,\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        padding: 15,\n        textAlign: 'center',\n    }),\n    browseLink: {\n        cursor: 'pointer',\n    },\n}));\n\ninterface Props {\n    extension: ChromeExtension;\n    latestExtensionVersion: string;\n    extensionUrl: string;\n    loading: boolean;\n    dragging: boolean;\n    appBarHidden: boolean;\n    onFileSelector: React.MouseEventHandler<HTMLAnchorElement> &\n        React.MouseEventHandler<HTMLSpanElement> &\n        React.MouseEventHandler<HTMLLabelElement>;\n}\n\nexport default function LandingPage({\n    extension,\n    latestExtensionVersion,\n    extensionUrl,\n    loading,\n    dragging,\n    appBarHidden,\n    onFileSelector,\n}: Props) {\n    const classes = useStyles({ appBarHidden });\n    const [installedExtensionVersion, setInstalledExtensionVersion] = useState<string>();\n\n    useEffect(() => {\n        async function fetchInstalledExtensionVersion() {\n            setInstalledExtensionVersion(extension.version);\n        }\n\n        fetchInstalledExtensionVersion();\n    }, [extension]);\n\n    const extensionUpdateAvailable = installedExtensionVersion && gt(latestExtensionVersion, installedExtensionVersion);\n    const extensionNotInstalled = !installedExtensionVersion;\n\n    return (\n        <React.Fragment>\n            <Fade in={!loading && !dragging} timeout={500}>\n                <div className={classes.background}>\n                    <Typography variant=\"h6\">\n                        Drag and drop subtitle and media files, or{' '}\n                        <Link\n                            target=\"#\"\n                            className={classes.browseLink}\n                            onClick={onFileSelector}\n                            color=\"secondary\"\n                            component=\"label\"\n                        >\n                            browse\n                        </Link>\n                        .\n                        <br />\n                        {extensionNotInstalled && (\n                            <span>\n                                Install the{' '}\n                                <Link color=\"secondary\" target=\"_blank\" rel=\"noreferrer\" href={extensionUrl}>\n                                    Chrome extension\n                                </Link>{' '}\n                                to sync subtitles with streaming video.\n                            </span>\n                        )}\n                        {extensionUpdateAvailable && (\n                            <span>\n                                An extension{' '}\n                                <Link color=\"secondary\" target=\"_blank\" rel=\"noreferrer\" href={extensionUrl}>\n                                    update\n                                </Link>{' '}\n                                is available.\n                            </span>\n                        )}\n                    </Typography>\n                </div>\n            </Fade>\n        </React.Fragment>\n    );\n}\n","import { Message } from \"@project/common\";\nimport { VideoProtocol, VideoProtocolMessage } from \"./VideoProtocol\";\n\nexport default class BroadcastChannelVideoProtocol implements VideoProtocol {\n    private channel?: BroadcastChannel;\n\n    onMessage?: (message: VideoProtocolMessage) => void;\n    \n    constructor(channelId: string) {\n        this.channel = new BroadcastChannel(channelId);\n        const that = this;\n        this.channel.onmessage = (event) => {\n            that.onMessage?.(event as VideoProtocolMessage);\n        };\n    }\n\n    postMessage(message: Message) {\n        this.channel?.postMessage(message);\n    }\n\n    close() {\n        this.channel?.close();\n        this.channel = undefined;\n    }\n}\n","import { Message } from '@project/common';\nimport ChromeExtension, { ExtensionMessage } from './ChromeExtension';\nimport { VideoProtocol, VideoProtocolMessage } from './VideoProtocol';\n\nexport default class ChromeTabVideoProtocol implements VideoProtocol {\n    private readonly tabId: number;\n    private readonly src: string;\n    private readonly extension: ChromeExtension;\n    private readonly listener: (message: ExtensionMessage) => void;\n    private readonly unsubscribeFromExtension: () => void;\n\n    onMessage?: (message: VideoProtocolMessage) => void;\n\n    constructor(tabId: number, src: string, extension: ChromeExtension) {\n        this.tabId = tabId;\n        this.src = src;\n        this.listener = (message) => {\n            if (message.tabId === tabId && message.src === src) {\n                this.onMessage?.({\n                    data: message.data,\n                });\n            }\n        };\n\n        this.unsubscribeFromExtension = extension.subscribe(this.listener);\n        this.extension = extension;\n    }\n\n    postMessage(message: Message) {\n        this.extension.sendMessage(message, this.tabId, this.src);\n    }\n\n    close() {\n        this.unsubscribeFromExtension();\n    }\n}\n","export default class Clock {\n    private accumulated: number;\n    private started: boolean;\n    private startTime?: number;\n    private _rate = 1;\n\n    constructor() {\n        this.accumulated = 0;\n        this.started = false;\n    }\n\n    get rate() {\n        return this._rate;\n    }\n\n    set rate(rate: number) {\n        if (this.started) {\n            this.accumulated += this._elapsed();\n            this.startTime = Date.now();\n        }\n    \n        this._rate = rate;\n    }\n\n    time(max: number) {\n        if (this.started) {\n            return Math.min(max, this.accumulated + this._elapsed());\n        }\n\n        return Math.min(max, this.accumulated);\n    }\n\n    stop() {\n        if (!this.started) {\n            return;\n        }\n\n        this.started = false;\n        this.accumulated += this._elapsed();\n    }\n\n    private _elapsed() {\n        return (Date.now() - this.startTime!) * this._rate;\n    }\n\n    start() {\n        this.startTime = Date.now();\n        this.started = true;\n    }\n\n    setTime(time: number) {\n        if (this.started) {\n            this.startTime = Date.now();\n            this.accumulated = time;\n        } else {\n            this.accumulated = time;\n        }\n    }\n\n    progress(max: number) {\n        return max === 0 ? 0 : Math.min(1, this.time(max) / max);\n    }\n}\n","import React, { useCallback, useEffect, useState, useRef, MutableRefObject } from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\nimport AudiotrackIcon from '@material-ui/icons/Audiotrack';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Fade from '@material-ui/core/Fade';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport Input from '@material-ui/core/Input';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport OpenInNewIcon from '@material-ui/icons/OpenInNew';\nimport Popover from '@material-ui/core/Popover';\nimport FullscreenIcon from '@material-ui/icons/Fullscreen';\nimport AspectRatioIcon from '@material-ui/icons/AspectRatio';\nimport FullscreenExitIcon from '@material-ui/icons/FullscreenExit';\nimport PauseIcon from '@material-ui/icons/Pause';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport QueueMusicIcon from '@material-ui/icons/QueueMusic';\nimport Slider from '@material-ui/core/Slider';\nimport TuneIcon from '@material-ui/icons/Tune';\nimport SubtitlesIcon from '@material-ui/icons/Subtitles';\nimport VideocamIcon from '@material-ui/icons/Videocam';\nimport VolumeOffIcon from '@material-ui/icons/VolumeOff';\nimport VolumeUpIcon from '@material-ui/icons/VolumeUp';\nimport { AudioTrackModel, PlayMode, VideoTabModel } from '@project/common';\nimport Clock from '../services/Clock';\nimport PlaybackPreferences from '../services/PlaybackPreferences';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nconst useControlStyles = makeStyles((theme) => ({\n    container: {\n        position: 'absolute',\n        left: '50%',\n        width: '50%',\n        bottom: 0,\n        pointerEvents: 'none',\n        color: '#fff',\n    },\n    buttonContainer: {\n        flexDirection: 'row',\n    },\n    timeDisplay: {\n        color: '#fff',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        height: '100%',\n        cursor: 'default',\n        fontSize: 20,\n        marginLeft: 10,\n    },\n    numberInput: {\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        fontSize: 20,\n        marginLeft: 10,\n        width: 100,\n        color: '#fff',\n        pointerEvents: 'auto',\n    },\n    volumeInputContainerShown: {\n        transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.short,\n        }),\n        marginRight: 5,\n        pointerEvents: 'auto',\n    },\n    volumeInputContainerHidden: {\n        transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.short,\n        }),\n        marginRight: 0,\n        pointerEvents: 'auto',\n    },\n    volumeInputHidden: {\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.short,\n        }),\n        width: 0,\n        pointerEvents: 'auto',\n    },\n    volumeInputShown: {\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.short,\n        }),\n        width: 100,\n        pointerEvents: 'auto',\n    },\n    volumeInputThumbHidden: {\n        transition: theme.transitions.create('visibility', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.short,\n        }),\n        opacity: 0,\n        pointerEvents: 'auto',\n    },\n    volumeInputThumbShown: {\n        transition: theme.transitions.create('visibility', {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.short,\n        }),\n        opacity: 1,\n        pointerEvents: 'auto',\n    },\n    subContainer: {\n        background: 'linear-gradient(to bottom, rgba(0, 0, 0, 0), rgba(0, 0, 0, .4) 40%, rgba(0, 0, 0, 0.7))',\n        position: 'relative',\n        left: '-100%',\n        width: '200%',\n        zIndex: 10,\n    },\n    button: {\n        pointerEvents: 'auto',\n    },\n    inactiveButton: {\n        color: 'rgba(72, 72, 72, 0.7)',\n        pointerEvents: 'auto',\n    },\n    inactiveTopButton: {\n        color: 'rgba(255, 255, 255, 0.5)',\n        pointerEvents: 'auto',\n    },\n    progress: {\n        margin: 5,\n    },\n    topButton: {\n        pointerEvents: 'auto',\n        color: '#fff',\n    },\n    gridContainer: {\n        pointerEvents: 'auto',\n        padding: 2,\n    },\n}));\n\nconst useProgressBarStyles = makeStyles((theme) => ({\n    root: {\n        height: 10,\n    },\n    container: {\n        height: 10,\n        pointerEvents: 'auto',\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        position: 'absolute',\n        width: 'calc(100% - 20px)',\n        marginLeft: 10,\n    },\n    mouseEventListener: {\n        zIndex: 1,\n        height: 10,\n        cursor: 'pointer',\n        pointerEvents: 'auto',\n        position: 'absolute',\n        width: '100%',\n    },\n    fillContainer: {\n        background: 'rgba(30,30,30,0.7)',\n        width: '100%',\n        height: 5,\n        position: 'relative',\n    },\n    fillContainerThick: {\n        transition: theme.transitions.create('height', {\n            easing: theme.transitions.easing.easeInOut,\n            duration: 50,\n        }),\n        height: 8,\n    },\n    fill: {\n        background: 'linear-gradient(to left, #ff1f62, #49007a)',\n        height: '100%',\n    },\n    handleContainer: {\n        position: 'absolute',\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        height: '100%',\n        bottom: 0,\n    },\n    handle: {\n        borderRadius: '50%',\n        width: 16,\n        height: 16,\n        opacity: 0,\n        left: -8,\n        background: 'white',\n        position: 'absolute',\n    },\n    handleOn: {\n        opacity: 1,\n        transition: theme.transitions.create('opacity', {\n            easing: theme.transitions.easing.easeInOut,\n            duration: theme.transitions.duration.shortest,\n        }),\n    },\n}));\n\nconst VolumeSlider = withStyles((theme) => ({\n    root: {\n        color: 'white',\n        verticalAlign: 'middle',\n    },\n    thumb: {\n        backgroundColor: 'white',\n        color: 'white',\n        '&:focus': {\n            boxShadow: 'inherit',\n        },\n        '&:hover, &$active': {\n            boxShadow: '0px 0px 0px 8px rgba(255, 255, 255, 0.1)',\n        },\n    },\n    active: {\n        color: 'white',\n    },\n}))(Slider);\n\nfunction displayTime(milliseconds: number) {\n    const seconds = Math.floor(milliseconds / 1000);\n    const minutes = Math.floor(seconds / 60);\n    const secondsInMinute = seconds % 60;\n    return String(minutes) + ':' + String(secondsInMinute).padStart(2, '0');\n}\n\nfunction elementWidth(element: HTMLElement) {\n    const rect = element.getBoundingClientRect();\n    return rect.right - rect.left;\n}\n\ninterface ProgressBarProps {\n    onSeek: (progress: number) => void;\n    value: number;\n}\n\nfunction ProgressBar({ onSeek, value }: ProgressBarProps) {\n    const classes = useProgressBarStyles();\n    const [mouseOver, setMouseOver] = useState(false);\n    const containerRef = useRef(null);\n\n    const handleClick = useCallback(\n        (e: React.MouseEvent<HTMLDivElement>) => {\n            const rect = e.currentTarget.getBoundingClientRect();\n            // Account for margins by subtracting 10 from left/right sides\n            const width = rect.right - rect.left - 20;\n            const progress = Math.min(1, Math.max(0, (e.pageX - rect.left - 10) / width));\n            onSeek(progress);\n        },\n        [onSeek]\n    );\n\n    const handleMouseOver = useCallback(() => setMouseOver(true), []);\n    const handleMouseOut = useCallback(() => setMouseOver(false), []);\n    const progressWidth = containerRef.current ? (elementWidth(containerRef.current) * value) / 100 : 0;\n    const fillStyle = { width: progressWidth };\n    const handleStyle = { marginLeft: progressWidth };\n    const fillContainerClassName = mouseOver\n        ? classes.fillContainer + ' ' + classes.fillContainerThick\n        : classes.fillContainer;\n    const handleClassName = mouseOver ? classes.handle + ' ' + classes.handleOn : classes.handle;\n\n    return (\n        <div className={classes.root}>\n            <div ref={containerRef} className={classes.container}>\n                <div className={fillContainerClassName}>\n                    <div className={classes.fill} style={fillStyle}></div>\n                    <div className={classes.handleContainer}>\n                        <div className={handleClassName} style={handleStyle} />\n                    </div>\n                </div>\n            </div>\n            <div\n                className={classes.mouseEventListener}\n                onClick={handleClick}\n                onMouseOver={handleMouseOver}\n                onMouseOut={handleMouseOut}\n            ></div>\n        </div>\n    );\n}\n\ninterface AudioTrackSelectorProps {\n    open: boolean;\n    anchorEl?: Element;\n    audioTracks?: AudioTrackModel[];\n    selectedAudioTrack?: string;\n    onAudioTrackSelected: (id: string) => void;\n    onClose: () => void;\n}\n\nfunction AudioTrackSelector({\n    open,\n    anchorEl,\n    audioTracks,\n    selectedAudioTrack,\n    onAudioTrackSelected,\n    onClose,\n}: AudioTrackSelectorProps) {\n    if (!audioTracks || audioTracks.length === 0) {\n        return null;\n    }\n\n    const list = audioTracks.map((t) => {\n        return (\n            <ListItem\n                key={t.id}\n                selected={t.id === selectedAudioTrack}\n                button\n                onClick={() => onAudioTrackSelected(t.id)}\n            >\n                {t.language} {t.label}\n            </ListItem>\n        );\n    });\n\n    return (\n        <div>\n            <Popover\n                disableEnforceFocus={true}\n                open={open}\n                anchorEl={anchorEl}\n                onClose={onClose}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n            >\n                <List>{list}</List>\n            </Popover>\n        </div>\n    );\n}\n\ninterface TabSelectorProps {\n    open: boolean;\n    anchorEl?: Element;\n    tabs?: VideoTabModel[];\n    selectedTab?: VideoTabModel;\n    onTabSelected: (tab: VideoTabModel) => void;\n    onClose: () => void;\n}\n\nfunction TabSelector({ open, anchorEl, onClose, tabs, selectedTab, onTabSelected }: TabSelectorProps) {\n    if (!tabs || tabs.length === 0) {\n        return null;\n    }\n\n    const list = tabs.map((t) => {\n        return (\n            <ListItem\n                key={`${t.id}:${t.src}`}\n                selected={selectedTab && t.id === selectedTab.id && t.src === selectedTab.src}\n                button\n                onClick={() => onTabSelected(t)}\n            >\n                {t.id} {t.title} {t.src}\n            </ListItem>\n        );\n    });\n\n    return (\n        <div>\n            <Popover\n                disableEnforceFocus={true}\n                open={open}\n                anchorEl={anchorEl}\n                onClose={onClose}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n            >\n                <List>{list}</List>\n            </Popover>\n        </div>\n    );\n}\n\ninterface MediaUnloaderProps {\n    open: boolean;\n    anchorEl?: Element;\n    file?: string;\n    onUnload: () => void;\n    onClose: () => void;\n}\n\nfunction MediaUnloader({ open, anchorEl, onUnload, onClose, file }: MediaUnloaderProps) {\n    return (\n        <div>\n            <Popover\n                disableEnforceFocus={true}\n                open={open}\n                anchorEl={anchorEl}\n                onClose={onClose}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n            >\n                <List>\n                    <ListItem button onClick={(e) => onUnload()}>\n                        Unload {file}\n                    </ListItem>\n                </List>\n            </Popover>\n        </div>\n    );\n}\n\ninterface PlayModeSelectorProps {\n    open: boolean;\n    anchorEl?: Element;\n    selectedPlayMode?: PlayMode;\n    onPlayMode: (playMode: PlayMode) => void;\n    onClose: () => void;\n}\n\nfunction PlayModeSelector({ open, anchorEl, selectedPlayMode, onPlayMode, onClose }: PlayModeSelectorProps) {\n    return (\n        <div>\n            <Popover\n                disableEnforceFocus={true}\n                open={open}\n                anchorEl={anchorEl}\n                onClose={onClose}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n            >\n                <List>\n                    <ListItem\n                        selected={selectedPlayMode === PlayMode.normal}\n                        button\n                        onClick={(e) => onPlayMode(PlayMode.normal)}\n                    >\n                        Normal\n                    </ListItem>\n                    <ListItem\n                        selected={selectedPlayMode === PlayMode.condensed}\n                        button\n                        onClick={(e) => onPlayMode(PlayMode.condensed)}\n                    >\n                        Condensed\n                    </ListItem>\n                    <ListItem\n                        selected={selectedPlayMode === PlayMode.autoPause}\n                        button\n                        onClick={(e) => onPlayMode(PlayMode.autoPause)}\n                    >\n                        Auto-pause\n                    </ListItem>\n                </List>\n            </Popover>\n        </div>\n    );\n}\n\nexport interface Point {\n    x: number;\n    y: number;\n}\n\ninterface ControlsProps {\n    clock: Clock;\n    playing: boolean;\n    length: number;\n    offsetEnabled?: boolean;\n    displayLength?: number;\n    offset: number;\n    playbackRate: number;\n    playbackRateEnabled?: boolean;\n    onAudioTrackSelected: (id: string) => void;\n    onSeek: (progress: number) => void;\n    mousePositionRef: MutableRefObject<Point>;\n    onShow?: (show: boolean) => void;\n    onPause: () => void;\n    onPlay: () => void;\n    onTabSelected?: (tab: VideoTabModel) => void;\n    onUnloadAudio?: () => void;\n    onUnloadVideo?: () => void;\n    onOffsetChange: (offset: number) => void;\n    onPlaybackRateChange: (playbackRate: number) => void;\n    onVolumeChange: (volume: number) => void;\n    disableKeyEvents?: boolean;\n    playbackPreferences: PlaybackPreferences;\n    closeEnabled?: boolean;\n    onClose?: () => void;\n    volumeEnabled?: boolean;\n    playMode?: PlayMode;\n    playModeEnabled?: boolean;\n    onPlayMode?: (playMode: PlayMode) => void;\n    subtitlesEnabled?: boolean;\n    subtitlesToggle?: boolean;\n    onSubtitlesToggle?: () => void;\n    videoFile?: string;\n    audioFile?: string;\n    audioTracks?: AudioTrackModel[];\n    selectedAudioTrack?: string;\n    tabs?: VideoTabModel[];\n    selectedTab?: VideoTabModel;\n    popOutEnabled?: boolean;\n    popOut?: boolean;\n    onPopOutToggle?: () => void;\n    fullscreenEnabled?: boolean;\n    fullscreen?: boolean;\n    onFullscreenToggle?: () => void;\n    hideSubtitlePlayerToggleEnabled?: boolean;\n    subtitlePlayerHidden?: boolean;\n    onHideSubtitlePlayerToggle?: () => void;\n    showOnMouseMovement: boolean;\n    theaterModeToggleEnabled?: boolean;\n    theaterModeEnabled?: boolean;\n    onTheaterModeToggle?: () => void;\n}\n\nexport default function Controls({\n    clock,\n    playing,\n    length,\n    offsetEnabled,\n    displayLength,\n    offset,\n    playbackRate,\n    playbackRateEnabled,\n    onAudioTrackSelected,\n    onSeek,\n    mousePositionRef,\n    onShow,\n    onPause,\n    onPlay,\n    onTabSelected,\n    onUnloadAudio,\n    onUnloadVideo,\n    onOffsetChange,\n    onPlaybackRateChange,\n    onVolumeChange,\n    disableKeyEvents,\n    playbackPreferences,\n    closeEnabled,\n    onClose,\n    volumeEnabled,\n    playMode,\n    playModeEnabled,\n    onPlayMode,\n    subtitlesEnabled,\n    subtitlesToggle,\n    onSubtitlesToggle,\n    videoFile,\n    audioFile,\n    audioTracks,\n    selectedAudioTrack,\n    tabs,\n    selectedTab,\n    popOutEnabled,\n    popOut,\n    onPopOutToggle,\n    fullscreenEnabled,\n    fullscreen,\n    onFullscreenToggle,\n    hideSubtitlePlayerToggleEnabled,\n    subtitlePlayerHidden,\n    onHideSubtitlePlayerToggle,\n    showOnMouseMovement,\n    theaterModeToggleEnabled,\n    theaterModeEnabled,\n    onTheaterModeToggle,\n}: ControlsProps) {\n    const classes = useControlStyles();\n    const [show, setShow] = useState<boolean>(true);\n    const [audioTrackSelectorOpen, setAudioTrackSelectorOpen] = useState<boolean>(false);\n    const [audioTrackSelectorAnchorEl, setAudioTrackSelectorAnchorEl] = useState<Element>();\n    const [tabSelectorOpen, setTabSelectorOpen] = useState<boolean>(false);\n    const [tabSelectorAnchorEl, setTabSelectorAnchorEl] = useState<Element>();\n    const [audioUnloaderOpen, setAudioUnloaderOpen] = useState<boolean>(false);\n    const [audioUnloaderAnchorEl, setAudioUnloaderAnchorEl] = useState<Element>();\n    const [videoUnloaderOpen, setVideoUnloaderOpen] = useState<boolean>(false);\n    const [videoUnloaderAnchorEl, setVideoUnloaderAnchorEl] = useState<Element>();\n    const [playModeSelectorOpen, setPlayModeSelectorOpen] = useState<boolean>(false);\n    const [playModeSelectorAnchorEl, setPlayModeSelectorAnchorEl] = useState<Element>();\n    const [showVolumeBar, setShowVolumeBar] = useState<boolean>(false);\n    const [volume, setVolume] = useState<number>(100);\n    const [lastCommittedVolume, setLastCommittedVolume] = useState<number>(100);\n\n    const lastMousePositionRef = useRef<Point>({ x: 0, y: 0 });\n    const lastShowTimestampRef = useRef<number>(Date.now());\n    const lastNumberInputChangeTimestampRef = useRef<number>(Date.now());\n    const lastShowRef = useRef<boolean>(true);\n    const forceShowRef = useRef<boolean>(false);\n    const [offsetInputWidth, setOffsetInputWidth] = useState<number>(5);\n    const [playbackRateInputWidth, setPlaybackRateInputWidth] = useState<number>(5);\n    const offsetInputRef = useRef<HTMLInputElement>();\n    const playbackRateInputRef = useRef<HTMLInputElement>();\n    const containerRef = useRef<HTMLDivElement>(null);\n    const closeButtonRef = useRef<HTMLButtonElement>(null);\n    const [, updateState] = useState<any>();\n    const forceUpdate = useCallback(() => updateState({}), []);\n\n    const handleSeek = useCallback(\n        (progress: number) => {\n            onSeek(progress);\n        },\n        [onSeek]\n    );\n\n    function handleMouseOver() {\n        forceShowRef.current = true;\n    }\n\n    function handleMouseOut() {\n        forceShowRef.current = false;\n    }\n\n    useEffect(() => {\n        const savedVolume = Number(playbackPreferences.volume);\n        setVolume(savedVolume);\n        onVolumeChange(savedVolume / 100);\n\n        if (savedVolume > 0) {\n            setLastCommittedVolume(savedVolume);\n        }\n    }, [playbackPreferences, onVolumeChange]);\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            let currentShow: boolean;\n\n            if (showOnMouseMovement) {\n                currentShow =\n                    Date.now() - lastShowTimestampRef.current < 2000 ||\n                    Math.pow(mousePositionRef.current.x - lastMousePositionRef.current.x, 2) +\n                        Math.pow(mousePositionRef.current.y - lastMousePositionRef.current.y, 2) >\n                        100;\n            } else {\n                currentShow =\n                    ((containerRef.current && mousePositionRef.current.y > containerRef.current.offsetTop - 20) ||\n                        (closeButtonRef.current &&\n                            mousePositionRef.current.y < closeButtonRef.current.offsetHeight + 20)) ??\n                    false;\n            }\n\n            currentShow =\n                currentShow ||\n                forceShowRef.current ||\n                offsetInputRef.current === document.activeElement ||\n                playbackRateInputRef.current === document.activeElement ||\n                Date.now() - lastNumberInputChangeTimestampRef.current < 2000;\n\n            if (currentShow && !lastShowRef.current) {\n                lastShowTimestampRef.current = Date.now();\n                setShow(currentShow);\n            } else if (!currentShow && lastShowRef.current) {\n                setShow(currentShow);\n            }\n\n            lastShowRef.current = currentShow;\n            lastMousePositionRef.current.x = mousePositionRef.current.x;\n            lastMousePositionRef.current.y = mousePositionRef.current.y;\n        }, 100);\n        return () => clearInterval(interval);\n    }, [mousePositionRef, showOnMouseMovement]);\n\n    useEffect(() => onShow?.(show), [onShow, show]);\n\n    const updateOffset = useCallback((offset: number) => {\n        if (offsetInputRef.current) {\n            if (offset === 0) {\n                offsetInputRef.current.value = '';\n                setOffsetInputWidth(5);\n            } else {\n                const offsetSeconds = offset / 1000;\n                const value = offsetSeconds >= 0 ? '+' + offsetSeconds.toFixed(2) : String(offsetSeconds.toFixed(2));\n                offsetInputRef.current.value = value;\n                lastNumberInputChangeTimestampRef.current = Date.now();\n                setOffsetInputWidth(value.length);\n            }\n            offsetInputRef.current.blur();\n        }\n    }, []);\n\n    const updatePlaybackRate = useCallback((playbackRate: number) => {\n        if (playbackRateInputRef.current) {\n            if (playbackRate === 1) {\n                playbackRateInputRef.current.value = '';\n                setPlaybackRateInputWidth(5);\n            } else {\n                const value = '×' + String(playbackRate.toFixed(2));\n                playbackRateInputRef.current.value = value;\n                lastNumberInputChangeTimestampRef.current = Date.now();\n                setPlaybackRateInputWidth(value.length);\n            }\n            playbackRateInputRef.current.blur();\n        }\n    }, []);\n\n    useEffect(() => {\n        if (disableKeyEvents) {\n            return;\n        }\n\n        function handleKey(event: KeyboardEvent) {\n            if (event.key === 'Enter') {\n                if (offsetInputRef.current === document.activeElement) {\n                    const newOffset = Number(offsetInputRef.current.value);\n\n                    if (newOffset === offset) {\n                        updateOffset(offset);\n                        return;\n                    }\n\n                    if (Number.isNaN(newOffset)) {\n                        return;\n                    }\n\n                    onOffsetChange(newOffset * 1000);\n                } else if (playbackRateInputRef.current === document.activeElement) {\n                    const newPlaybackRate = Number(playbackRateInputRef.current.value);\n\n                    if (playbackRate === newPlaybackRate) {\n                        updatePlaybackRate(playbackRate);\n                        return;\n                    }\n\n                    if (Number.isNaN(newPlaybackRate) || newPlaybackRate < 0.1 || newPlaybackRate > 5) {\n                        return;\n                    }\n\n                    onPlaybackRateChange(newPlaybackRate);\n                }\n            }\n        }\n\n        window.addEventListener('keydown', handleKey);\n\n        return () => {\n            window.removeEventListener('keydown', handleKey);\n        };\n    }, [\n        onOffsetChange,\n        onPlaybackRateChange,\n        updateOffset,\n        updatePlaybackRate,\n        offset,\n        playbackRate,\n        disableKeyEvents,\n    ]);\n\n    const handleNumberInputClicked = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n        const inputElement = e.target as HTMLInputElement;\n        inputElement.setSelectionRange(0, inputElement.value?.length || 0);\n    }, []);\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            forceUpdate();\n        }, 100);\n\n        return () => clearInterval(interval);\n    }, [forceUpdate]);\n\n    useEffect(() => {\n        updateOffset(offset);\n    }, [offset, updateOffset]);\n\n    useEffect(() => {\n        updatePlaybackRate(playbackRate);\n    }, [playbackRate, updatePlaybackRate]);\n\n    const handleAudioTrackSelectorClosed = useCallback(() => {\n        setAudioTrackSelectorAnchorEl(undefined);\n        setAudioTrackSelectorOpen(false);\n    }, []);\n\n    const handleAudioTrackSelectorOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setAudioTrackSelectorAnchorEl(e.currentTarget);\n        setAudioTrackSelectorOpen(true);\n    }, []);\n\n    const handleAudioTrackSelected = useCallback(\n        (id: string) => {\n            onAudioTrackSelected(id);\n            setAudioTrackSelectorAnchorEl(undefined);\n            setAudioTrackSelectorOpen(false);\n        },\n        [onAudioTrackSelected]\n    );\n\n    const handleTabSelectorClosed = useCallback(() => {\n        setTabSelectorAnchorEl(undefined);\n        setTabSelectorOpen(false);\n    }, []);\n\n    const handleTabSelectorOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setTabSelectorAnchorEl(e.currentTarget);\n        setTabSelectorOpen(true);\n    }, []);\n\n    const handleTabSelected = useCallback(\n        (tab: VideoTabModel) => {\n            onTabSelected?.(tab);\n            setTabSelectorAnchorEl(undefined);\n            setTabSelectorOpen(false);\n        },\n        [onTabSelected]\n    );\n\n    const handleAudioUnloaderClosed = useCallback(() => {\n        setAudioUnloaderAnchorEl(undefined);\n        setAudioUnloaderOpen(false);\n    }, []);\n\n    const handleAudioUnloaderOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setAudioUnloaderAnchorEl(e.currentTarget);\n        setAudioUnloaderOpen(true);\n    }, []);\n\n    const handleUnloadAudio = useCallback(() => {\n        onUnloadAudio?.();\n        setAudioUnloaderOpen(false);\n    }, [onUnloadAudio]);\n\n    const handleVideoUnloaderClosed = useCallback(() => {\n        setVideoUnloaderAnchorEl(undefined);\n        setVideoUnloaderOpen(false);\n    }, []);\n\n    const handleVideoUnloaderOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setVideoUnloaderAnchorEl(e.currentTarget);\n        setVideoUnloaderOpen(true);\n    }, []);\n\n    const handleUnloadVideo = useCallback(() => {\n        onUnloadVideo?.();\n        setVideoUnloaderOpen(false);\n    }, [onUnloadVideo]);\n\n    const handlePlayModeSelectorClosed = useCallback(() => {\n        setPlayModeSelectorAnchorEl(undefined);\n        setPlayModeSelectorOpen(false);\n    }, []);\n\n    const handlePlayModeSelectorOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setPlayModeSelectorAnchorEl(e.currentTarget);\n        setPlayModeSelectorOpen(true);\n    }, []);\n\n    const handlePlayModeSelected = useCallback(\n        (playMode: PlayMode) => {\n            onPlayMode?.(playMode);\n            setPlayModeSelectorAnchorEl(undefined);\n            setPlayModeSelectorOpen(false);\n        },\n        [onPlayMode]\n    );\n\n    const handleVolumeMouseOut = useCallback(() => setShowVolumeBar(false), []);\n    const handleVolumeMouseOver = useCallback(() => setShowVolumeBar(true), []);\n\n    const handleVolumeChange = useCallback(\n        (e: React.ChangeEvent<{}>, value: number | number[]) => {\n            if (typeof value !== 'number') {\n                return;\n            }\n\n            setVolume(value);\n            onVolumeChange(value / 100);\n        },\n        [onVolumeChange]\n    );\n\n    const handleVolumeChangeCommitted = useCallback(\n        (e: React.ChangeEvent<{}>, value: number | number[]) => {\n            if (typeof value !== 'number') {\n                return;\n            }\n\n            if (value > 0) {\n                setLastCommittedVolume(value);\n            }\n\n            playbackPreferences.volume = value;\n        },\n        [playbackPreferences]\n    );\n\n    const handleVolumeToggle = useCallback(() => {\n        setVolume((volume) => {\n            const newVolume = volume > 0 ? 0 : lastCommittedVolume;\n            onVolumeChange(newVolume / 100);\n            return newVolume;\n        });\n    }, [onVolumeChange, lastCommittedVolume]);\n\n    const progress = clock.progress(length);\n\n    return (\n        <React.Fragment>\n            <Fade in={show} timeout={200}>\n                <Grid container style={{ position: 'absolute', top: 0 }}>\n                    <Grid item style={{ flexGrow: 1 }}>\n                        {closeEnabled && (\n                            <IconButton\n                                ref={closeButtonRef}\n                                color=\"inherit\"\n                                className={classes.topButton}\n                                onClick={onClose}\n                                onMouseOver={handleMouseOver}\n                                onMouseOut={handleMouseOut}\n                            >\n                                <CloseIcon />\n                            </IconButton>\n                        )}\n                    </Grid>\n                    <Grid item>\n                        {theaterModeToggleEnabled && (\n                            <IconButton\n                                color=\"inherit\"\n                                className={theaterModeEnabled ? classes.topButton : classes.inactiveTopButton}\n                                onClick={onTheaterModeToggle}\n                                onMouseOver={handleMouseOver}\n                                onMouseOut={handleMouseOut}\n                            >\n                                <AspectRatioIcon />\n                            </IconButton>\n                        )}\n                        {hideSubtitlePlayerToggleEnabled && (\n                            <IconButton\n                                color=\"inherit\"\n                                className={classes.topButton}\n                                onClick={onHideSubtitlePlayerToggle}\n                                onMouseOver={handleMouseOver}\n                                onMouseOut={handleMouseOut}\n                            >\n                                {subtitlePlayerHidden ? <ArrowBackIcon /> : <ArrowForwardIcon />}\n                            </IconButton>\n                        )}\n                    </Grid>\n                </Grid>\n            </Fade>\n            <div\n                ref={containerRef}\n                className={classes.container}\n                onMouseOver={handleMouseOver}\n                onMouseOut={handleMouseOut}\n            >\n                <Fade in={show} timeout={200}>\n                    <div className={classes.subContainer}>\n                        <ProgressBar onSeek={handleSeek} value={progress * 100} />\n                        <Grid container className={classes.gridContainer} direction=\"row\">\n                            <Grid item>\n                                <IconButton color=\"inherit\" onClick={() => (playing ? onPause() : onPlay())}>\n                                    {playing ? (\n                                        <PauseIcon className={classes.button} />\n                                    ) : (\n                                        <PlayArrowIcon className={classes.button} />\n                                    )}\n                                </IconButton>\n                            </Grid>\n                            {volumeEnabled && (\n                                <Grid\n                                    item\n                                    onMouseOver={handleVolumeMouseOver}\n                                    onMouseOut={handleVolumeMouseOut}\n                                    className={\n                                        showVolumeBar\n                                            ? classes.volumeInputContainerShown\n                                            : classes.volumeInputContainerHidden\n                                    }\n                                >\n                                    <IconButton color=\"inherit\" onClick={handleVolumeToggle}>\n                                        {volume === 0 ? <VolumeOffIcon /> : <VolumeUpIcon />}\n                                    </IconButton>\n                                    <VolumeSlider\n                                        onChange={handleVolumeChange}\n                                        onChangeCommitted={handleVolumeChangeCommitted}\n                                        value={volume}\n                                        defaultValue={100}\n                                        classes={{\n                                            root: showVolumeBar ? classes.volumeInputShown : classes.volumeInputHidden,\n                                            thumb: showVolumeBar\n                                                ? classes.volumeInputThumbShown\n                                                : classes.volumeInputThumbHidden,\n                                        }}\n                                    />\n                                </Grid>\n                            )}\n                            <Grid item>\n                                <div className={classes.timeDisplay}>\n                                    {displayTime(progress * length)} / {displayTime(displayLength || length)}\n                                </div>\n                            </Grid>\n                            {offsetEnabled && (\n                                <Grid item>\n                                    <Tooltip title=\"Subtitle Offset\">\n                                        <Input\n                                            style={{\n                                                width: `${offsetInputWidth}ch`,\n                                            }}\n                                            inputRef={offsetInputRef}\n                                            disableUnderline={true}\n                                            className={classes.numberInput}\n                                            placeholder={'±' + Number(0).toFixed(2)}\n                                            onClick={handleNumberInputClicked}\n                                            onChange={(e) => setOffsetInputWidth(Math.max(5, e.target.value.length))}\n                                        />\n                                    </Tooltip>\n                                </Grid>\n                            )}\n                            {playbackRateEnabled && (\n                                <Grid item>\n                                    <Tooltip title=\"Playback Rate\">\n                                        <Input\n                                            style={{\n                                                width: `${playbackRateInputWidth}ch`,\n                                                marginLeft: 4,\n                                            }}\n                                            inputRef={playbackRateInputRef}\n                                            disableUnderline={true}\n                                            className={classes.numberInput}\n                                            placeholder={'×' + Number(1).toFixed(2)}\n                                            onClick={handleNumberInputClicked}\n                                            onChange={(e) =>\n                                                setPlaybackRateInputWidth(Math.max(5, e.target.value.length))\n                                            }\n                                        />\n                                    </Tooltip>\n                                </Grid>\n                            )}\n                            <Grid item style={{ flexGrow: 1 }}></Grid>\n                            {subtitlesToggle && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={onSubtitlesToggle}>\n                                        <SubtitlesIcon\n                                            className={subtitlesEnabled ? classes.button : classes.inactiveButton}\n                                        />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {videoFile && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={handleVideoUnloaderOpened}>\n                                        <VideocamIcon className={classes.button} />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {audioFile && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={handleAudioUnloaderOpened}>\n                                        <AudiotrackIcon className={classes.button} />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {audioTracks && audioTracks.length > 1 && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={handleAudioTrackSelectorOpened}>\n                                        <QueueMusicIcon className={classes.button} />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {tabs && tabs.length > 0 && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={handleTabSelectorOpened}>\n                                        <VideocamIcon\n                                            className={selectedTab ? classes.button : classes.inactiveButton}\n                                        />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {playModeEnabled && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={handlePlayModeSelectorOpened}>\n                                        <TuneIcon\n                                            className={playModeEnabled ? classes.button : classes.inactiveButton}\n                                        />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {popOutEnabled && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={onPopOutToggle}>\n                                        <OpenInNewIcon\n                                            className={classes.button}\n                                            style={popOut ? { transform: 'rotateX(180deg)' } : {}}\n                                        />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {fullscreenEnabled && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={onFullscreenToggle}>\n                                        {fullscreen ? (\n                                            <FullscreenExitIcon className={classes.button} />\n                                        ) : (\n                                            <FullscreenIcon className={classes.button} />\n                                        )}\n                                    </IconButton>\n                                </Grid>\n                            )}\n                        </Grid>\n                    </div>\n                </Fade>\n                <TabSelector\n                    open={tabSelectorOpen && show}\n                    anchorEl={tabSelectorAnchorEl}\n                    tabs={tabs}\n                    selectedTab={selectedTab}\n                    onClose={handleTabSelectorClosed}\n                    onTabSelected={handleTabSelected}\n                />\n                <AudioTrackSelector\n                    open={audioTrackSelectorOpen && show}\n                    anchorEl={audioTrackSelectorAnchorEl}\n                    audioTracks={audioTracks}\n                    selectedAudioTrack={selectedAudioTrack}\n                    onClose={handleAudioTrackSelectorClosed}\n                    onAudioTrackSelected={handleAudioTrackSelected}\n                />\n                <MediaUnloader\n                    open={audioUnloaderOpen}\n                    anchorEl={audioUnloaderAnchorEl}\n                    file={audioFile}\n                    onClose={handleAudioUnloaderClosed}\n                    onUnload={handleUnloadAudio}\n                />\n                <MediaUnloader\n                    open={videoUnloaderOpen}\n                    anchorEl={videoUnloaderAnchorEl}\n                    file={videoFile}\n                    onClose={handleVideoUnloaderClosed}\n                    onUnload={handleUnloadVideo}\n                />\n                <PlayModeSelector\n                    open={playModeSelectorOpen && show}\n                    anchorEl={playModeSelectorAnchorEl}\n                    selectedPlayMode={playMode}\n                    onClose={handlePlayModeSelectorClosed}\n                    onPlayMode={handlePlayModeSelected}\n                />\n            </div>\n        </React.Fragment>\n    );\n}\n","import { RefObject } from \"react\";\n\nexport interface MediaElement {\n    currentTime: number;\n    readyState: number;\n    playbackRate: number;\n    oncanplay: ((ev: Event) => void) | null;\n    play: () => Promise<void>;\n    pause: () => void;\n    duration: number;\n}\n\nexport default class MediaAdapter {\n    private readonly ref: RefObject<MediaElement | undefined>;\n    private readonly readyResolves: (() => void)[];\n\n    constructor(ref: RefObject<MediaElement | undefined>) {\n        this.ref = ref;\n        this.readyResolves = [];\n    }\n\n    async seek(time: number) {\n        return new Promise((resolve, reject) => {\n            if (this.ref.current) {\n                this.ref.current.currentTime = time;\n                this._onMediaCanPlay(() => resolve(undefined));\n            } else {\n                resolve(undefined);\n            }\n        });\n    }\n\n    async onReady() {\n        return new Promise((resolve, reject) => {\n            if (this.ref.current) {\n                this._onMediaCanPlay(() => resolve(undefined));\n            } else {\n                resolve(undefined);\n            }\n        });\n    }\n\n    _onMediaCanPlay(callback: () => void) {\n        if (this.ref.current?.readyState === 4) {\n            callback();\n            return;\n        }\n\n        if (this.ref.current && !this.ref.current.oncanplay) {\n            this.ref.current.oncanplay = (e) => {\n                for (const resolve of this.readyResolves) {\n                    resolve();\n                }\n\n                this.readyResolves.length = 0;\n\n                if (this.ref.current) {\n                    this.ref.current.oncanplay = null;\n                }\n            };\n        }\n\n        this.readyResolves.push(callback);\n    }\n\n    play() {\n        this.ref.current?.play();\n    }\n\n    pause() {\n        this.ref.current?.pause();\n    }\n\n    playbackRate(playbackRate: number) {\n        if (this.ref.current) {\n            this.ref.current.playbackRate = playbackRate;\n        }\n    }\n}\n","import React, { useCallback, useEffect, useState, useMemo, useRef, createRef, RefObject } from 'react';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport { keysAreEqual } from '../services/util';\nimport { useWindowSize } from '../hooks/useWindowSize';\nimport {\n    AsbplayerSettingsProvider,\n    PostMineAction,\n    surroundingSubtitles,\n    SubtitleModel,\n    SubtitleCollection,\n    KeyBinder,\n    AutoPauseContext,\n} from '@project/common';\nimport { SubtitleTextImage } from '@project/common/components';\nimport FileCopy from '@material-ui/icons/FileCopy';\nimport IconButton from '@material-ui/core/IconButton';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableRow, { TableRowProps } from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\nimport Clock from '../services/Clock';\n\ninterface StylesProps {\n    compressed: boolean;\n    appBarHidden: boolean;\n    windowWidth: number;\n}\n\nconst useSubtitlePlayerStyles = makeStyles<Theme, StylesProps, string>((theme) => ({\n    container: {\n        height: ({ appBarHidden }) => (appBarHidden ? '100vh' : 'calc(100vh - 64px)'),\n        position: 'relative',\n        overflowX: 'hidden',\n        backgroundColor: theme.palette.background.default,\n        width: ({ compressed, windowWidth }) => (compressed ? Math.max(350, 0.25 * windowWidth) : '100%'),\n    },\n    table: {\n        backgroundColor: theme.palette.background.default,\n        marginBottom: 75, // so the last row doesn't collide with controls\n    },\n    noSubtitles: {\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        padding: 15,\n        textAlign: 'center',\n    },\n}));\n\nconst useSubtitleRowStyles = makeStyles((theme) => ({\n    subtitleRow: {\n        '&:hover': {\n            backgroundColor: theme.palette.action.hover,\n        },\n    },\n    subtitle: {\n        fontSize: 20,\n        paddingRight: 0,\n        minWidth: 200,\n        width: '100%',\n        overflowWrap: 'anywhere',\n        whiteSpace: 'pre-wrap',\n    },\n    compressedSubtitle: {\n        fontSize: 16,\n        paddingRight: 0,\n        minWidth: 200,\n        width: '100%',\n        overflowWrap: 'anywhere',\n        whiteSpace: 'pre-wrap',\n    },\n    disabledSubtitle: {\n        color: 'transparent',\n        backgroundColor: theme.palette.action.disabledBackground,\n        borderRadius: 5,\n    },\n    timestamp: {\n        fontSize: 14,\n        color: '#aaaaaa',\n        textAlign: 'right',\n        paddingRight: 15,\n        paddingLeft: 5,\n    },\n    copyButton: {\n        textAlign: 'right',\n        padding: 0,\n    },\n}));\n\nexport interface DisplaySubtitleModel extends SubtitleModel {\n    displayTime: string;\n    index: number;\n}\n\ninterface SubtitleRowProps extends TableRowProps {\n    index: number;\n    compressed: boolean;\n    selected: boolean;\n    disabled: boolean;\n    subtitle: DisplaySubtitleModel;\n    copyButtonEnabled: boolean;\n    subtitleRef: RefObject<HTMLTableRowElement>;\n    onClickSubtitle: (index: number) => void;\n    onCopySubtitle: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>, index: number) => void;\n}\n\nconst SubtitleRow = React.memo((props: SubtitleRowProps) => {\n    const {\n        index,\n        selected,\n        subtitleRef,\n        onClickSubtitle,\n        onCopySubtitle,\n        compressed,\n        disabled,\n        subtitle,\n        copyButtonEnabled,\n        ...tableRowProps\n    } = props;\n    const classes = useSubtitleRowStyles();\n    const textRef = useRef<HTMLSpanElement>(null);\n    const [textSelected, setTextSelected] = useState<boolean>(false);\n    let className = compressed ? classes.compressedSubtitle : classes.subtitle;\n    let disabledClassName = disabled ? classes.disabledSubtitle : '';\n\n    if (subtitle.start < 0 || subtitle.end < 0) {\n        return null;\n    }\n\n    function handleMouseUp() {\n        const selection = document.getSelection();\n        const selected =\n            selection?.type === 'Range' && textRef.current?.isSameNode(selection.anchorNode?.parentNode ?? null);\n        setTextSelected(selected ?? false);\n    }\n\n    const content = subtitle.textImage ? (\n        <SubtitleTextImage availableWidth={window.screen.availWidth / 2} subtitle={subtitle} scale={1} />\n    ) : (\n        <span ref={textRef} className={disabledClassName}>\n            {subtitle.text}\n        </span>\n    );\n\n    return (\n        <TableRow\n            onClick={() => !textSelected && onClickSubtitle(index)}\n            onMouseUp={handleMouseUp}\n            ref={subtitleRef}\n            className={classes.subtitleRow}\n            selected={selected}\n            {...tableRowProps}\n        >\n            <TableCell className={className}>{content}</TableCell>\n            {copyButtonEnabled && (\n                <TableCell className={classes.copyButton}>\n                    <IconButton onClick={(e) => onCopySubtitle(e, index)}>\n                        <FileCopy fontSize={compressed ? 'small' : 'medium'} />\n                    </IconButton>\n                </TableCell>\n            )}\n            <TableCell className={classes.timestamp}>\n                <div>{`\\n${subtitle.displayTime}\\n`}</div>\n            </TableCell>\n        </TableRow>\n    );\n});\n\ninterface SubtitlePlayerProps {\n    clock: Clock;\n    onSeek: (progress: number, shouldPlay: boolean) => void;\n    onCopy: (\n        subtitle: SubtitleModel,\n        surroundingSubtitles: SubtitleModel[],\n        postMineAction: PostMineAction,\n        preventDuplicate: boolean\n    ) => void;\n    onOffsetChange: (offset: number) => void;\n    onToggleSubtitleTrack: (track: number) => void;\n    onSubtitlesSelected: (subtitles: SubtitleModel[]) => void;\n    autoPauseContext: AutoPauseContext;\n    playing: boolean;\n    subtitles?: DisplaySubtitleModel[];\n    subtitleCollection?: SubtitleCollection<DisplaySubtitleModel>;\n    length: number;\n    jumpToSubtitle?: SubtitleModel;\n    compressed: boolean;\n    copyButtonEnabled: boolean;\n    loading: boolean;\n    drawerOpen: boolean;\n    appBarHidden: boolean;\n    displayHelp?: string;\n    disableKeyEvents: boolean;\n    lastJumpToTopTimestamp: number;\n    hidden: boolean;\n    disabledSubtitleTracks: { [track: number]: boolean };\n    settingsProvider: AsbplayerSettingsProvider;\n    keyBinder: KeyBinder;\n}\n\nexport default function SubtitlePlayer({\n    clock,\n    onSeek,\n    onCopy,\n    onOffsetChange,\n    onToggleSubtitleTrack,\n    onSubtitlesSelected,\n    autoPauseContext,\n    playing,\n    subtitles,\n    subtitleCollection,\n    length,\n    jumpToSubtitle,\n    compressed,\n    copyButtonEnabled,\n    loading,\n    drawerOpen,\n    appBarHidden,\n    displayHelp,\n    disableKeyEvents,\n    lastJumpToTopTimestamp,\n    hidden,\n    disabledSubtitleTracks,\n    settingsProvider,\n    keyBinder,\n}: SubtitlePlayerProps) {\n    const playingRef = useRef<boolean>();\n    playingRef.current = playing;\n    const clockRef = useRef<Clock>(clock);\n    clockRef.current = clock;\n    const subtitleListRef = useRef<DisplaySubtitleModel[]>();\n    subtitleListRef.current = subtitles;\n    const subtitleRefs = useMemo<RefObject<HTMLTableRowElement>[]>(\n        () =>\n            subtitles\n                ? Array(subtitles.length)\n                      .fill(undefined)\n                      .map((_) => createRef<HTMLTableRowElement>())\n                : [],\n        [subtitles]\n    );\n    const subtitleCollectionRef = useRef<SubtitleCollection<DisplaySubtitleModel>>(\n        SubtitleCollection.empty<DisplaySubtitleModel>()\n    );\n    subtitleCollectionRef.current = subtitleCollection ?? SubtitleCollection.empty<DisplaySubtitleModel>();\n    const subtitleRefsRef = useRef<RefObject<HTMLTableRowElement>[]>([]);\n    subtitleRefsRef.current = subtitleRefs;\n    const disableKeyEventsRef = useRef<boolean>();\n    disableKeyEventsRef.current = disableKeyEvents;\n    const [selectedSubtitleIndexes, setSelectedSubtitleIndexes] = useState<{ [index: number]: boolean }>({});\n    const selectedSubtitleIndexesRef = useRef<{ [index: number]: boolean }>({});\n    const lengthRef = useRef<number>(0);\n    lengthRef.current = length;\n    const hiddenRef = useRef<boolean>(false);\n    hiddenRef.current = hidden;\n    const lastScrollTimestampRef = useRef<number>(0);\n    const requestAnimationRef = useRef<number>();\n    const containerRef = useRef<HTMLElement>();\n    const drawerOpenRef = useRef<boolean>();\n    drawerOpenRef.current = drawerOpen;\n    const [windowWidth] = useWindowSize(true);\n    const classes = useSubtitlePlayerStyles({ compressed, windowWidth, appBarHidden });\n    const autoPauseContextRef = useRef<AutoPauseContext>();\n    autoPauseContextRef.current = autoPauseContext;\n    const onSubtitlesSelectedRef = useRef<(subtitles: SubtitleModel[]) => void>();\n    onSubtitlesSelectedRef.current = onSubtitlesSelected;\n\n    // This effect should be scheduled only once as re-scheduling seems to cause performance issues.\n    // Therefore all of the state it operates on is contained in refs.\n    useEffect(() => {\n        const update = () => {\n            const subtitleRefs = subtitleRefsRef.current;\n            const clock = clockRef.current;\n            const currentSubtitleIndexes: { [index: number]: boolean } = {};\n            const timestamp = clock.time(lengthRef.current);\n\n            let slice = subtitleCollectionRef.current.subtitlesAt(timestamp);\n            const showing = slice.showing.length === 0 ? slice.lastShown ?? [] : slice.showing;\n            let smallestIndex: number | undefined;\n\n            for (const s of showing) {\n                currentSubtitleIndexes[s.index] = true;\n\n                if (smallestIndex === undefined || s.index < smallestIndex) {\n                    smallestIndex = s.index;\n                }\n            }\n\n            if (!keysAreEqual(currentSubtitleIndexes, selectedSubtitleIndexesRef.current)) {\n                selectedSubtitleIndexesRef.current = currentSubtitleIndexes;\n                setSelectedSubtitleIndexes(currentSubtitleIndexes);\n                onSubtitlesSelectedRef.current?.(showing);\n\n                if (smallestIndex !== undefined) {\n                    const scrollToSubtitleRef = subtitleRefs[smallestIndex];\n                    const allowScroll = !hiddenRef.current && Date.now() - lastScrollTimestampRef.current > 5000;\n\n                    if (scrollToSubtitleRef?.current && allowScroll) {\n                        scrollToSubtitleRef.current.scrollIntoView({\n                            block: 'center',\n                            inline: 'nearest',\n                            behavior: 'smooth',\n                        });\n                    }\n                }\n            }\n\n            if (slice.startedShowing !== undefined) {\n                autoPauseContextRef.current?.startedShowing(slice.startedShowing);\n            }\n\n            if (slice.willStopShowing !== undefined) {\n                autoPauseContextRef.current?.willStopShowing(slice.willStopShowing);\n            }\n\n            requestAnimationRef.current = requestAnimationFrame(update);\n        };\n\n        requestAnimationRef.current = requestAnimationFrame(update);\n\n        return () => {\n            if (requestAnimationRef.current !== undefined) {\n                cancelAnimationFrame(requestAnimationRef.current);\n            }\n        };\n    }, []);\n\n    const scrollToCurrentSubtitle = useCallback(() => {\n        const selectedSubtitleIndexes = selectedSubtitleIndexesRef.current;\n\n        if (!selectedSubtitleIndexes) {\n            return;\n        }\n\n        const indexes = Object.keys(selectedSubtitleIndexes);\n\n        if (indexes.length === 0) {\n            return;\n        }\n\n        const scrollToSubtitleRef = subtitleRefs[Number(indexes[0])];\n\n        scrollToSubtitleRef?.current?.scrollIntoView({\n            block: 'center',\n            inline: 'nearest',\n            behavior: 'smooth',\n        });\n    }, [subtitleRefs]);\n\n    useEffect(() => {\n        if (hidden) {\n            return;\n        }\n\n        function scrollIfVisible() {\n            if (document.visibilityState === 'visible') {\n                scrollToCurrentSubtitle();\n            }\n        }\n\n        document.addEventListener('visibilitychange', scrollIfVisible);\n\n        return () => document.removeEventListener('visibilitychange', scrollIfVisible);\n    }, [hidden, selectedSubtitleIndexes, subtitleRefs, scrollToCurrentSubtitle]);\n\n    useEffect(() => {\n        if (!hidden) {\n            scrollToCurrentSubtitle();\n        }\n    }, [hidden, scrollToCurrentSubtitle]);\n\n    useEffect(() => {\n        if (hiddenRef.current) {\n            return;\n        }\n\n        const subtitleRefs = subtitleRefsRef.current;\n\n        if (!subtitleRefs || subtitleRefs.length === 0) {\n            return;\n        }\n\n        const firstSubtitleRef = subtitleRefs[0];\n        firstSubtitleRef?.current?.scrollIntoView({\n            block: 'center',\n            inline: 'nearest',\n            behavior: 'smooth',\n        });\n    }, [lastJumpToTopTimestamp]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindAdjustOffset(\n            (event, offset) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onOffsetChange(offset);\n            },\n            () => disableKeyEvents,\n            () => subtitles\n        );\n\n        return () => unbind();\n    }, [keyBinder, onOffsetChange, disableKeyEvents, subtitles]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindOffsetToSubtitle(\n            (event, offset) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onOffsetChange(offset);\n            },\n            () => disableKeyEvents,\n            () => clock.time(length),\n            () => subtitles\n        );\n\n        return () => unbind();\n    }, [keyBinder, onOffsetChange, disableKeyEvents, clock, subtitles, length]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindSeekToSubtitle(\n            (event, subtitle) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onSeek(subtitle.start, playingRef.current ?? false);\n            },\n            () => disableKeyEvents,\n            () => clock.time(length),\n            () => subtitles\n        );\n\n        return () => unbind();\n    }, [keyBinder, onSeek, subtitles, disableKeyEvents, clock, length]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindSeekToBeginningOfCurrentSubtitle(\n            (event, subtitle) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onSeek(subtitle.start, playingRef.current ?? false);\n            },\n            () => disableKeyEvents,\n            () => clock.time(length),\n            () => subtitles\n        );\n\n        return () => unbind();\n    }, [keyBinder, onSeek, subtitles, disableKeyEvents, clock, length]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindSeekBackwardOrForward(\n            (event, forward) => {\n                event.stopPropagation();\n                event.preventDefault();\n                if (forward) {\n                    onSeek(Math.min(length, clock.time(length) + 10000), playingRef.current ?? false);\n                } else {\n                    onSeek(Math.max(0, clock.time(length) - 10000), playingRef.current ?? false);\n                }\n            },\n            () => disableKeyEvents\n        );\n\n        return () => unbind();\n    }, [keyBinder, clock, length, disableKeyEvents, onSeek]);\n\n    useEffect(() => {\n        function handleScroll() {\n            lastScrollTimestampRef.current = Date.now();\n        }\n\n        const table = containerRef.current;\n        table?.addEventListener('wheel', handleScroll);\n\n        return () => table?.removeEventListener('wheel', handleScroll);\n    }, [containerRef, lastScrollTimestampRef]);\n\n    useEffect(() => {\n        if (hidden) {\n            return;\n        }\n\n        if (!jumpToSubtitle || !subtitles) {\n            return;\n        }\n\n        let jumpToIndex = -1;\n        let i = 0;\n\n        for (let s of subtitles) {\n            if (s.originalStart === jumpToSubtitle.originalStart && s.text === jumpToSubtitle.text) {\n                jumpToIndex = i;\n                break;\n            }\n\n            ++i;\n        }\n\n        if (jumpToIndex !== -1) {\n            subtitleRefs[jumpToIndex]?.current?.scrollIntoView({\n                block: 'center',\n                inline: 'nearest',\n                behavior: 'smooth',\n            });\n        }\n    }, [hidden, jumpToSubtitle, subtitles, subtitleRefs]);\n\n    const calculateSurroundingSubtitlesForIndex = useCallback(\n        (index: number) => {\n            if (!selectedSubtitleIndexesRef.current || !subtitles) {\n                return [];\n            }\n\n            return surroundingSubtitles(\n                subtitles,\n                index,\n                settingsProvider.surroundingSubtitlesCountRadius,\n                settingsProvider.surroundingSubtitlesTimeRadius\n            );\n        },\n        [subtitles, settingsProvider.surroundingSubtitlesCountRadius, settingsProvider.surroundingSubtitlesTimeRadius]\n    );\n\n    const calculateSurroundingSubtitles = useCallback(() => {\n        if (!selectedSubtitleIndexesRef.current) {\n            return [];\n        }\n        const index = Math.min(...Object.keys(selectedSubtitleIndexesRef.current).map((i) => Number(i)));\n        return calculateSurroundingSubtitlesForIndex(index);\n    }, [calculateSurroundingSubtitlesForIndex]);\n\n    const calculateCurrentSubtitle = useCallback(() => {\n        const subtitleIndexes = Object.keys(selectedSubtitleIndexesRef.current).map((i) => Number(i));\n\n        if (!subtitles || !subtitleIndexes || subtitleIndexes.length === 0) {\n            return undefined;\n        }\n\n        const index = Math.min(...subtitleIndexes);\n        return subtitles[index];\n    }, [subtitles]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindCopy(\n            (event, subtitle) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onCopy(subtitle, calculateSurroundingSubtitles(), PostMineAction.none, false);\n            },\n            () => disableKeyEventsRef.current ?? false,\n            () => calculateCurrentSubtitle()\n        );\n\n        return () => unbind();\n    }, [keyBinder, calculateCurrentSubtitle, calculateSurroundingSubtitles, onCopy]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindToggleSubtitleTrackInList(\n            (event, track) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onToggleSubtitleTrack(track);\n            },\n            () => disableKeyEvents\n        );\n\n        return () => unbind();\n    }, [keyBinder, disableKeyEvents, onToggleSubtitleTrack]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindAnkiExport(\n            (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n                const subtitleIndexes = Object.keys(selectedSubtitleIndexesRef.current).map((i) => Number(i));\n\n                if (subtitles && subtitleIndexes && subtitleIndexes.length > 0) {\n                    const index = Math.min(...subtitleIndexes);\n                    onCopy(\n                        subtitles[index],\n                        calculateSurroundingSubtitlesForIndex(index),\n                        PostMineAction.showAnkiDialog,\n                        true\n                    );\n                }\n            },\n            () => !subtitles || subtitles.length === 0 || disableKeyEvents\n        );\n\n        return () => unbind();\n    }, [keyBinder, onCopy, disableKeyEvents, subtitles, calculateSurroundingSubtitlesForIndex]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindUpdateLastCard(\n            (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n                const subtitleIndexes = Object.keys(selectedSubtitleIndexesRef.current).map((i) => Number(i));\n\n                if (subtitles && subtitleIndexes && subtitleIndexes.length > 0) {\n                    const index = Math.min(...subtitleIndexes);\n                    onCopy(\n                        subtitles[index],\n                        calculateSurroundingSubtitlesForIndex(index),\n                        PostMineAction.updateLastCard,\n                        true\n                    );\n                }\n            },\n            () => !subtitles || subtitles.length === 0 || disableKeyEvents\n        );\n\n        return () => unbind();\n    }, [keyBinder, onCopy, disableKeyEvents, subtitles, calculateSurroundingSubtitlesForIndex]);\n\n    const handleClick = useCallback(\n        (index: number) => {\n            if (!subtitles) {\n                return;\n            }\n\n            const selectedSubtitleIndexes = selectedSubtitleIndexesRef.current || {};\n            onSeek(subtitles[index].start, !playingRef.current && index in selectedSubtitleIndexes);\n        },\n        [subtitles, onSeek]\n    );\n\n    const handleCopy = useCallback(\n        (e: React.MouseEvent<HTMLButtonElement, MouseEvent>, index: number) => {\n            e.preventDefault();\n            e.stopPropagation();\n\n            if (!subtitles) {\n                return;\n            }\n\n            onCopy(subtitles[index], calculateSurroundingSubtitlesForIndex(index), PostMineAction.none, false);\n        },\n        [subtitles, calculateSurroundingSubtitlesForIndex, onCopy]\n    );\n\n    let subtitleTable = null;\n\n    if (!subtitles || subtitles.length === 0) {\n        if (!loading && displayHelp) {\n            subtitleTable = !loading && displayHelp && (\n                <div className={classes.noSubtitles}>\n                    <Typography variant=\"h6\">{displayHelp}</Typography>\n                </div>\n            );\n        } else if (subtitles && subtitles.length === 0) {\n            subtitleTable = (\n                <div className={classes.noSubtitles}>\n                    <Typography variant=\"h6\">No subtitles</Typography>\n                </div>\n            );\n        }\n    } else {\n        subtitleTable = (\n            <TableContainer className={classes.table}>\n                <Table>\n                    <TableBody>\n                        {subtitles.map((s: SubtitleModel, index: number) => {\n                            const selected = index in selectedSubtitleIndexes;\n\n                            return (\n                                <SubtitleRow\n                                    key={index}\n                                    index={index}\n                                    compressed={compressed}\n                                    selected={selected}\n                                    copyButtonEnabled={copyButtonEnabled}\n                                    disabled={disabledSubtitleTracks[s.track]}\n                                    subtitle={subtitles[index]}\n                                    subtitleRef={subtitleRefs[index]}\n                                    onClickSubtitle={handleClick}\n                                    onCopySubtitle={handleCopy}\n                                />\n                            );\n                        })}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        );\n    }\n\n    return (\n        <Paper square elevation={0} ref={containerRef} className={classes.container}>\n            {subtitleTable}\n        </Paper>\n    );\n}\n","import {\n    AlertMessage,\n    AnkiSettings,\n    AnkiSettingsToVideoMessage,\n    AppBarToggleMessageToVideoMessage,\n    AudioModel,\n    AudioTrackModel,\n    AudioTrackSelectedFromVideoMessage,\n    AudioTrackSelectedToVideoMessage,\n    CopyMessage,\n    CurrentTimeFromVideoMessage,\n    CurrentTimeToVideoMessage,\n    FullscreenToggleMessageToVideoMessage,\n    HideSubtitlePlayerToggleToVideoMessage,\n    ImageModel,\n    MiscSettings,\n    MiscSettingsToVideoMessage,\n    OffsetFromVideoMessage,\n    OffsetToVideoMessage,\n    PauseFromVideoMessage,\n    PlaybackRateFromVideoMessage,\n    PlaybackRateToVideoMessage,\n    PlayFromVideoMessage,\n    PlayMode,\n    PlayModeMessage,\n    PostMineAction,\n    ReadyFromVideoMessage,\n    ReadyStateFromVideoMessage,\n    ReadyToVideoMessage,\n    SubtitleModel,\n    SubtitleSettings,\n    SubtitleSettingsToVideoMessage,\n    SubtitlesToVideoMessage,\n    ToggleSubtitleTrackInListFromVideoMessage,\n} from '@project/common';\nimport { VideoProtocol } from './VideoProtocol';\n\nexport default class VideoChannel {\n    private readonly protocol: VideoProtocol;\n    private time: number;\n    private isReady: boolean;\n    private readyCallbacks: ((paused: boolean) => void)[];\n    private playCallbacks: ((echo: boolean) => void)[];\n    private pauseCallbacks: ((echo: boolean) => void)[];\n    private audioTrackSelectedCallbacks: ((audioTrack: string) => void)[];\n    private currentTimeCallbacks: ((currentTime: number, echo: boolean) => void)[];\n    private exitCallbacks: (() => void)[];\n    private offsetCallbacks: ((offset: number) => void)[];\n    private playbackRateCallbacks: ((playbackRate: number, echo: boolean) => void)[];\n    private popOutToggleCallbacks: (() => void)[];\n    private copyCallbacks: ((\n        subtitle: SubtitleModel,\n        surroundingSubtitles: SubtitleModel[],\n        audio: AudioModel | undefined,\n        image: ImageModel | undefined,\n        url: string | undefined,\n        postMineAction: PostMineAction,\n        preventDuplicate: boolean,\n        id: string | undefined\n    ) => void)[];\n    private playModeCallbacks: ((mode: PlayMode) => void)[];\n    private hideSubtitlePlayerToggleCallbacks: (() => void)[];\n    private appBarToggleCallbacks: (() => void)[];\n    private fullscreenToggleCallbacks: (() => void)[];\n    private ankiDialogRequestCallbacks: (() => void)[];\n    private toggleSubtitleTrackInListCallbacks: ((track: number) => void)[];\n\n    readyState: number;\n    oncanplay: ((ev: Event) => void) | null = null;\n    audioTracks?: AudioTrackModel[];\n    selectedAudioTrack?: string;\n    duration: number;\n    _playbackRate: number;\n\n    constructor(protocol: VideoProtocol) {\n        this.protocol = protocol;\n        this.time = 0;\n        this.duration = 0;\n        this.isReady = false;\n        this.readyState = 0;\n        this._playbackRate = 1;\n        this.selectedAudioTrack = undefined;\n        this.readyCallbacks = [];\n        this.playCallbacks = [];\n        this.pauseCallbacks = [];\n        this.currentTimeCallbacks = [];\n        this.audioTrackSelectedCallbacks = [];\n        this.exitCallbacks = [];\n        this.offsetCallbacks = [];\n        this.playbackRateCallbacks = [];\n        this.popOutToggleCallbacks = [];\n        this.copyCallbacks = [];\n        this.playModeCallbacks = [];\n        this.hideSubtitlePlayerToggleCallbacks = [];\n        this.appBarToggleCallbacks = [];\n        this.fullscreenToggleCallbacks = [];\n        this.ankiDialogRequestCallbacks = [];\n        this.toggleSubtitleTrackInListCallbacks = [];\n\n        const that = this;\n\n        this.protocol.onMessage = (event) => {\n            switch (event.data.command) {\n                case 'ready':\n                    const readyMessage = event.data as ReadyFromVideoMessage;\n\n                    that.duration = readyMessage.duration;\n                    that.isReady = true;\n                    that.audioTracks = readyMessage.audioTracks;\n                    that.selectedAudioTrack = readyMessage.selectedAudioTrack;\n                    that.readyState = 4;\n                    that.time = readyMessage.currentTime;\n                    this._playbackRate = readyMessage.playbackRate;\n\n                    for (let callback of that.readyCallbacks) {\n                        callback(readyMessage.paused);\n                    }\n                    break;\n                case 'readyState':\n                    const readyStateMessage = event.data as ReadyStateFromVideoMessage;\n\n                    that.readyState = readyStateMessage.value;\n                    if (that.readyState === 4) {\n                        that.oncanplay?.(new Event('canplay'));\n                    }\n                    break;\n                case 'play':\n                    const playMessage = event.data as PlayFromVideoMessage;\n\n                    for (let callback of that.playCallbacks) {\n                        callback(playMessage.echo);\n                    }\n                    break;\n                case 'pause':\n                    const pauseMessage = event.data as PauseFromVideoMessage;\n\n                    for (let callback of that.pauseCallbacks) {\n                        callback(pauseMessage.echo);\n                    }\n                    break;\n                case 'audioTrackSelected':\n                    const audioTrackSelectedMessage = event.data as AudioTrackSelectedFromVideoMessage;\n\n                    for (let callback of that.audioTrackSelectedCallbacks) {\n                        that.selectedAudioTrack = audioTrackSelectedMessage.id;\n                        callback(audioTrackSelectedMessage.id);\n                    }\n                    break;\n                case 'currentTime':\n                    const currentTimeMessage = event.data as CurrentTimeFromVideoMessage;\n\n                    for (let callback of that.currentTimeCallbacks) {\n                        callback(currentTimeMessage.value, currentTimeMessage.echo);\n                    }\n                    break;\n                case 'exit':\n                    for (let callback of that.exitCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'offset':\n                    const offsetMessage = event.data as OffsetFromVideoMessage;\n\n                    for (let callback of that.offsetCallbacks) {\n                        callback(offsetMessage.value);\n                    }\n                    break;\n                case 'playbackRate':\n                    const playbackRateMessage = event.data as PlaybackRateFromVideoMessage;\n\n                    for (const callback of that.playbackRateCallbacks) {\n                        callback(playbackRateMessage.value, playbackRateMessage.echo);\n                    }\n                    break;\n                case 'popOutToggle':\n                    for (let callback of that.popOutToggleCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'copy':\n                    for (let callback of that.copyCallbacks) {\n                        const copyMessage = event.data as CopyMessage;\n\n                        callback(\n                            copyMessage.subtitle,\n                            copyMessage.surroundingSubtitles,\n                            copyMessage.audio,\n                            copyMessage.image,\n                            copyMessage.url,\n                            copyMessage.postMineAction ?? PostMineAction.none,\n                            copyMessage.preventDuplicate ?? false,\n                            copyMessage.id\n                        );\n                    }\n                    break;\n                case 'playMode':\n                    for (let callback of that.playModeCallbacks) {\n                        const playModeMessage = event.data as PlayModeMessage;\n                        callback(playModeMessage.playMode);\n                    }\n                    break;\n                case 'hideSubtitlePlayerToggle':\n                    for (let callback of that.hideSubtitlePlayerToggleCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'appBarToggle':\n                    for (let callback of that.appBarToggleCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'fullscreenToggle':\n                    for (const callback of this.fullscreenToggleCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'sync':\n                    // ignore\n                    break;\n                case 'syncv2':\n                    // ignore\n                    break;\n                case 'ankiDialogRequest':\n                    for (let callback of that.ankiDialogRequestCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'toggleSubtitleTrackInList':\n                    const toggleSubtitleTrackInListMessage = event.data as ToggleSubtitleTrackInListFromVideoMessage;\n\n                    for (const callback of that.toggleSubtitleTrackInListCallbacks) {\n                        callback(toggleSubtitleTrackInListMessage.track);\n                    }\n                    break;\n                default:\n                    console.error('Unrecognized event ' + event.data.command);\n            }\n        };\n    }\n\n    get currentTime() {\n        return this.time;\n    }\n\n    set currentTime(value: number) {\n        this.time = value;\n        this.readyState = 3;\n        const message: CurrentTimeToVideoMessage = { command: 'currentTime', value: this.time };\n        this.protocol.postMessage(message);\n    }\n\n    get playbackRate() {\n        return this._playbackRate;\n    }\n\n\n    set playbackRate(playbackRate: number) {\n        const message: PlaybackRateToVideoMessage = { command: 'playbackRate', value: playbackRate };\n        this.protocol.postMessage(message);\n    }\n\n    onReady(callback: (paused: boolean) => void) {\n        if (this.isReady) {\n            callback(false);\n        }\n        this.readyCallbacks.push(callback);\n    }\n\n    onPlay(callback: (echo: boolean) => void) {\n        this.playCallbacks.push(callback);\n    }\n\n    onPause(callback: (echo: boolean) => void) {\n        this.pauseCallbacks.push(callback);\n    }\n\n    onCurrentTime(callback: (currentTime: number, echo: boolean) => void) {\n        this.currentTimeCallbacks.push(callback);\n    }\n\n    onAudioTrackSelected(callback: (id: string) => void) {\n        this.audioTrackSelectedCallbacks.push(callback);\n    }\n\n    onExit(callback: () => void) {\n        this.exitCallbacks.push(callback);\n    }\n\n    onOffset(callback: (offset: number) => void) {\n        this.offsetCallbacks.push(callback);\n    }\n\n    onPlaybackRate(callback: (playbackRate: number, echo: boolean) => void) {\n        this.playbackRateCallbacks.push(callback);\n    }\n\n    onPopOutToggle(callback: () => void) {\n        this.popOutToggleCallbacks.push(callback);\n    }\n\n    onCopy(\n        callback: (\n            subtitle: SubtitleModel,\n            surroundingSubtitles: SubtitleModel[],\n            audio: AudioModel | undefined,\n            image: ImageModel | undefined,\n            url: string | undefined,\n            postMineAction: PostMineAction,\n            preventDuplicate: boolean,\n            id: string | undefined\n        ) => void\n    ) {\n        this.copyCallbacks.push(callback);\n    }\n\n    onPlayMode(callback: (playMode: PlayMode) => void) {\n        this.playModeCallbacks.push(callback);\n    }\n\n    onHideSubtitlePlayerToggle(callback: () => void) {\n        this.hideSubtitlePlayerToggleCallbacks.push(callback);\n    }\n\n    onAppBarToggle(callback: () => void) {\n        this.appBarToggleCallbacks.push(callback);\n    }\n\n    onFullscreenToggle(callback: () => void) {\n        this.fullscreenToggleCallbacks.push(callback);\n    }\n\n    onAnkiDialogRequest(callback: () => void) {\n        this.ankiDialogRequestCallbacks.push(callback);\n    }\n\n    onToggleSubtitleTrackInList(callback: (track: number) => void) {\n        this.toggleSubtitleTrackInListCallbacks.push(callback);\n    }\n\n    ready(duration: number, videoFileName?: string) {\n        const message: ReadyToVideoMessage = { command: 'ready', duration, videoFileName };\n        this.protocol.postMessage(message);\n    }\n\n    init() {\n        this.protocol.postMessage({ command: 'init' });\n    }\n\n    // Return a promise to implement the analogous HTMLMediaElement method\n    play(): Promise<void> {\n        this.protocol.postMessage({ command: 'play' });\n        return new Promise((resolve, reject) => resolve());\n    }\n\n    pause() {\n        this.protocol.postMessage({ command: 'pause' });\n    }\n\n    audioTrackSelected(id: string) {\n        const message: AudioTrackSelectedToVideoMessage = { command: 'audioTrackSelected', id: id };\n        this.protocol.postMessage(message);\n    }\n\n    subtitles(subtitles: SubtitleModel[], subtitleFileNames: string[]) {\n        this.protocol.postMessage({\n            command: 'subtitles',\n            value: subtitles,\n            name: subtitleFileNames.length > 0 ? subtitleFileNames[0] : null,\n            names: subtitleFileNames,\n        } as SubtitlesToVideoMessage);\n    }\n\n    offset(offset: number) {\n        const message: OffsetToVideoMessage = { command: 'offset', value: offset };\n        this.protocol.postMessage(message);\n    }\n\n    subtitleSettings(settings: SubtitleSettings) {\n        const message: SubtitleSettingsToVideoMessage = { command: 'subtitleSettings', value: settings };\n        this.protocol.postMessage(message);\n    }\n\n    playMode(playMode: PlayMode) {\n        const message: PlayModeMessage = {\n            command: 'playMode',\n            playMode: playMode,\n        };\n        this.protocol.postMessage(message);\n    }\n\n    hideSubtitlePlayerToggle(hidden: boolean) {\n        const message: HideSubtitlePlayerToggleToVideoMessage = {\n            command: 'hideSubtitlePlayerToggle',\n            value: hidden,\n        };\n        this.protocol.postMessage(message);\n    }\n\n    appBarToggle(hidden: boolean) {\n        const message: AppBarToggleMessageToVideoMessage = {\n            command: 'appBarToggle',\n            value: hidden,\n        };\n        this.protocol.postMessage(message);\n    }\n\n    fullscreenToggle(fullscreen: boolean) {\n        const message: FullscreenToggleMessageToVideoMessage = {\n            command: 'fullscreenToggle',\n            value: fullscreen,\n        };\n        this.protocol.postMessage(message);\n    }\n\n    ankiSettings(settings: AnkiSettings) {\n        const message: AnkiSettingsToVideoMessage = { command: 'ankiSettings', value: settings };\n        this.protocol.postMessage(message);\n    }\n\n    miscSettings(settings: MiscSettings) {\n        const message: MiscSettingsToVideoMessage = { command: 'miscSettings', value: settings };\n        this.protocol.postMessage(message);\n    }\n\n    alert(message: string, severity: string) {\n        const msg: AlertMessage = { command: 'alert', message, severity };\n        this.protocol.postMessage(msg);\n    }\n\n    close() {\n        this.protocol.postMessage({ command: 'close' });\n        this.protocol.close();\n        this.readyCallbacks = [];\n        this.playCallbacks = [];\n        this.pauseCallbacks = [];\n        this.currentTimeCallbacks = [];\n        this.audioTrackSelectedCallbacks = [];\n        this.exitCallbacks = [];\n        this.offsetCallbacks = [];\n        this.playbackRateCallbacks = [];\n        this.popOutToggleCallbacks = [];\n        this.copyCallbacks = [];\n        this.playModeCallbacks = [];\n        this.hideSubtitlePlayerToggleCallbacks = [];\n        this.appBarToggleCallbacks = [];\n        this.fullscreenToggleCallbacks = [];\n        this.ankiDialogRequestCallbacks = [];\n        this.toggleSubtitleTrackInListCallbacks = [];\n    }\n}\n","import React, { useEffect, useState, useMemo, useCallback, useRef, MutableRefObject } from 'react';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport { v4 as uuidv4 } from 'uuid';\nimport {\n    AsbplayerSettingsProvider,\n    AudioModel,\n    AudioTrackModel,\n    AutoPauseContext,\n    AutoPausePreference,\n    ImageModel,\n    KeyBinder,\n    mockSurroundingSubtitles,\n    PlayMode,\n    PostMineAction,\n    SubtitleCollection,\n    SubtitleModel,\n    VideoTabModel,\n} from '@project/common';\nimport { timeDurationDisplay } from '../services/util';\nimport BroadcastChannelVideoProtocol from '../services/BroadcastChannelVideoProtocol';\nimport ChromeTabVideoProtocol from '../services/ChromeTabVideoProtocol';\nimport Clock from '../services/Clock';\nimport Controls, { Point } from './Controls';\nimport Grid from '@material-ui/core/Grid';\nimport MediaAdapter, { MediaElement } from '../services/MediaAdapter';\nimport SubtitlePlayer, { DisplaySubtitleModel } from './SubtitlePlayer';\nimport VideoChannel from '../services/VideoChannel';\nimport ChromeExtension from '../services/ChromeExtension';\nimport SubtitleReader from '../services/SubtitleReader';\nimport PlaybackPreferences from '../services/PlaybackPreferences';\nimport lte from 'semver/functions/lte';\nimport gte from 'semver/functions/gte';\n\ninterface StylesProps {\n    appBarHidden: boolean;\n}\n\nconst useStyles = makeStyles<Theme, StylesProps>({\n    root: ({ appBarHidden }) => ({\n        height: appBarHidden ? '100vh' : 'calc(100vh - 64px)',\n        position: 'relative',\n        overflowX: 'hidden',\n    }),\n    container: {\n        width: '100%',\n        height: '100%',\n    },\n    videoFrame: {\n        width: '100%',\n        height: '100%',\n        border: 0,\n        display: 'block',\n    },\n});\n\nfunction trackLength(\n    audioRef: MutableRefObject<HTMLAudioElement | null>,\n    videoRef: MutableRefObject<MediaElement | undefined>,\n    subtitles: SubtitleModel[] | undefined,\n    useOffset?: boolean\n) {\n    let subtitlesLength;\n    if (subtitles && subtitles.length > 0) {\n        if (useOffset) {\n            subtitlesLength = subtitles[subtitles.length - 1].end;\n        } else {\n            subtitlesLength = subtitles[subtitles.length - 1].originalEnd;\n        }\n    } else {\n        subtitlesLength = 0;\n    }\n\n    const audioLength = audioRef.current && audioRef.current.duration ? 1000 * audioRef.current.duration : 0;\n\n    const videoLength = videoRef.current && videoRef.current.duration ? 1000 * videoRef.current.duration : 0;\n\n    return Math.max(videoLength, Math.max(subtitlesLength, audioLength));\n}\n\nexport interface MediaSources {\n    subtitleFiles: File[];\n    flattenSubtitleFiles?: boolean;\n    audioFile?: File;\n    audioFileUrl?: string;\n    videoFile?: File;\n    videoFileUrl?: string;\n}\n\nexport interface AnkiDialogFinishedRequest {\n    resume: boolean;\n    timestamp: number;\n}\n\ninterface PlayerProps {\n    sources: MediaSources;\n    subtitleReader: SubtitleReader;\n    settingsProvider: AsbplayerSettingsProvider;\n    playbackPreferences: PlaybackPreferences;\n    keyBinder: KeyBinder;\n    extension: ChromeExtension;\n    videoFrameRef: MutableRefObject<HTMLIFrameElement | null>;\n    videoChannelRef: MutableRefObject<VideoChannel | null>;\n    drawerOpen: boolean;\n    appBarHidden: boolean;\n    videoFullscreen: boolean;\n    hideSubtitlePlayer: boolean;\n    videoPopOut: boolean;\n    tab?: VideoTabModel;\n    availableTabs: VideoTabModel[];\n    ankiDialogRequested: boolean;\n    ankiDialogFinishedRequest: AnkiDialogFinishedRequest;\n    onError: (error: string) => void;\n    onUnloadAudio: (url: string) => void;\n    onUnloadVideo: (url: string) => void;\n    onCopy: (\n        subtitle: SubtitleModel,\n        surroundingSubtitles: SubtitleModel[],\n        audioFile: File | undefined,\n        videoFile: File | undefined,\n        subtitleFile: File | undefined,\n        mediaTimestamp: number | undefined,\n        audioTrack: string | undefined,\n        filePlaybackRate: number | undefined,\n        audio: AudioModel | undefined,\n        image: ImageModel | undefined,\n        url: string | undefined,\n        postMineAction: PostMineAction | undefined,\n        preventDuplicate: boolean | undefined,\n        id: string | undefined\n    ) => void;\n    onLoaded: () => void;\n    onTabSelected: (tab: VideoTabModel) => void;\n    onAnkiDialogRequest: () => void;\n    onAppBarToggle: () => void;\n    onFullscreenToggle: () => void;\n    onHideSubtitlePlayer: () => void;\n    onVideoPopOut: () => void;\n    onPlayModeChangedViaBind: (oldPlayMode: PlayMode, newPlayMode: PlayMode) => void;\n    disableKeyEvents: boolean;\n    jumpToSubtitle?: SubtitleModel;\n    rewindSubtitle?: SubtitleModel;\n}\n\nexport default function Player({\n    sources: { subtitleFiles, flattenSubtitleFiles, audioFile, audioFileUrl, videoFile, videoFileUrl },\n    subtitleReader,\n    settingsProvider,\n    playbackPreferences,\n    keyBinder,\n    extension,\n    videoFrameRef,\n    videoChannelRef,\n    drawerOpen,\n    appBarHidden,\n    videoFullscreen,\n    hideSubtitlePlayer,\n    videoPopOut,\n    tab,\n    availableTabs,\n    ankiDialogRequested,\n    ankiDialogFinishedRequest,\n    onError,\n    onUnloadAudio,\n    onUnloadVideo,\n    onCopy,\n    onLoaded,\n    onTabSelected,\n    onAnkiDialogRequest,\n    onAppBarToggle,\n    onFullscreenToggle,\n    onHideSubtitlePlayer,\n    onVideoPopOut,\n    onPlayModeChangedViaBind,\n    disableKeyEvents,\n    jumpToSubtitle,\n    rewindSubtitle,\n}: PlayerProps) {\n    const [playMode, setPlayMode] = useState<PlayMode>(PlayMode.normal);\n    const playModeRef = useRef<PlayMode>();\n    playModeRef.current = playMode;\n    const [subtitles, setSubtitles] = useState<DisplaySubtitleModel[]>();\n    const subtitleCollection = useMemo<SubtitleCollection<DisplaySubtitleModel>>(\n        () =>\n            new SubtitleCollection(subtitles ?? [], {\n                returnLastShown: true,\n                returnNextToShow: playMode === PlayMode.condensed,\n                showingCheckRadiusMs: 100,\n            }),\n        [subtitles, playMode]\n    );\n    const subtitlesRef = useRef<SubtitleModel[]>();\n    subtitlesRef.current = subtitles;\n    const playModeEnabled = subtitles && subtitles.length > 0 && Boolean(videoFileUrl || audioFileUrl);\n    const [loadingSubtitles, setLoadingSubtitles] = useState<boolean>(false);\n    const [playing, setPlaying] = useState<boolean>(false);\n    const [lastJumpToTopTimestamp, setLastJumpToTopTimestamp] = useState<number>(0);\n    const [offset, setOffset] = useState<number>(0);\n    const [playbackRate, setPlaybackRate] = useState<number>(1);\n    const playingRef = useRef<boolean>();\n    playingRef.current = playing;\n    const [, updateState] = useState<any>();\n    const [audioTracks, setAudioTracks] = useState<AudioTrackModel[]>();\n    const [selectedAudioTrack, setSelectedAudioTrack] = useState<string>();\n    const [channelId, setChannelId] = useState<string>();\n    const [, setResumeOnFinishedAnkiDialogRequest] = useState<boolean>(false);\n    const hideSubtitlePlayerRef = useRef<boolean>();\n    hideSubtitlePlayerRef.current = hideSubtitlePlayer;\n    const [disabledSubtitleTracks, setDisabledSubtitleTracks] = useState<{ [track: number]: boolean }>({});\n    const forceUpdate = useCallback(() => updateState({}), []);\n    const mousePositionRef = useRef<Point>({ x: 0, y: 0 });\n    const audioRef = useRef<HTMLAudioElement>(null);\n    const videoRef = useRef<MediaElement>();\n    const mediaAdapter = useMemo(() => {\n        if (audioFileUrl) {\n            return new MediaAdapter(audioRef);\n        } else if (videoFileUrl || tab) {\n            return new MediaAdapter(videoRef);\n        }\n\n        return new MediaAdapter({ current: null });\n    }, [audioFileUrl, videoFileUrl, tab]);\n    const clock = useMemo<Clock>(() => new Clock(), []);\n    const classes = useStyles({ appBarHidden });\n    const lengthRef = useRef<number>(0);\n    lengthRef.current = trackLength(audioRef, videoRef, subtitles, true);\n\n    const handleOnStartedShowingSubtitle = useCallback(() => {\n        if (\n            playMode !== PlayMode.autoPause ||\n            settingsProvider.autoPausePreference !== AutoPausePreference.atStart ||\n            videoFileUrl // Let VideoPlayer do the auto-pausing\n        ) {\n            return;\n        }\n\n        pause(clock, mediaAdapter, true);\n    }, [playMode, clock, mediaAdapter, videoFileUrl, settingsProvider]);\n\n    const handleOnWillStopShowingSubtitle = useCallback(() => {\n        if (\n            playMode !== PlayMode.autoPause ||\n            settingsProvider.autoPausePreference !== AutoPausePreference.atEnd ||\n            videoFileUrl // Let VideoPlayer do the auto-pausing\n        ) {\n            return;\n        }\n\n        pause(clock, mediaAdapter, true);\n    }, [playMode, clock, mediaAdapter, videoFileUrl, settingsProvider]);\n\n    const autoPauseContext = useMemo(() => {\n        const context = new AutoPauseContext();\n        context.onStartedShowing = handleOnStartedShowingSubtitle;\n        context.onWillStopShowing = handleOnWillStopShowingSubtitle;\n        return context;\n    }, [handleOnStartedShowingSubtitle, handleOnWillStopShowingSubtitle]);\n    const autoPauseContextRef = useRef<AutoPauseContext>();\n    autoPauseContextRef.current = autoPauseContext;\n\n    const seek = useCallback(\n        async (time: number, clock: Clock, forwardToMedia: boolean) => {\n            clock.setTime(time);\n            forceUpdate();\n\n            if (forwardToMedia) {\n                await mediaAdapter.seek(time / 1000);\n            }\n\n            autoPauseContextRef.current?.clear();\n        },\n        [forceUpdate, mediaAdapter]\n    );\n\n    const updatePlaybackRate = useCallback(\n        (playbackRate: number, forwardToMedia: boolean) => {\n            clock.rate = playbackRate;\n            setPlaybackRate(playbackRate);\n\n            if (forwardToMedia) {\n                mediaAdapter.playbackRate(playbackRate);\n            }\n        },\n        [clock, mediaAdapter]\n    );\n\n    const applyOffset = useCallback(\n        (offset: number, forwardToVideo: boolean) => {\n            setOffset(offset);\n            setSubtitles((subtitles) => {\n                if (!subtitles) {\n                    return;\n                }\n\n                const length = subtitles.length > 0 ? subtitles[subtitles.length - 1].end + offset : 0;\n\n                const newSubtitles = subtitles.map((s, i) => ({\n                    text: s.text,\n                    textImage: s.textImage,\n                    start: s.originalStart + offset,\n                    originalStart: s.originalStart,\n                    end: s.originalEnd + offset,\n                    originalEnd: s.originalEnd,\n                    displayTime: timeDurationDisplay(s.originalStart + offset, length),\n                    track: s.track,\n                    index: i,\n                }));\n\n                if (forwardToVideo) {\n                    if (videoRef.current instanceof VideoChannel) {\n                        videoRef.current.offset(offset);\n\n                        // Older versions of extension don't support the offset message\n                        if (tab !== undefined && extension.installed && lte(extension.version, '0.22.0')) {\n                            videoRef.current.subtitles(\n                                newSubtitles,\n                                subtitleFiles.map((f) => f.name)\n                            );\n                        }\n                    }\n                }\n\n                return newSubtitles;\n            });\n            playbackPreferences.offset = offset;\n        },\n        [subtitleFiles, extension, playbackPreferences, tab]\n    );\n\n    useEffect(() => {\n        let channel: VideoChannel | undefined = undefined;\n        let channelClosed = false;\n\n        async function init() {\n            if (videoRef.current instanceof VideoChannel) {\n                videoRef.current.close();\n            }\n            videoRef.current = undefined;\n            videoChannelRef.current = null;\n            clock.setTime(0);\n            clock.stop();\n            const offset = playbackPreferences.offset;\n            setOffset(offset);\n            setPlaying(false);\n            setAudioTracks(undefined);\n            setSelectedAudioTrack(undefined);\n            setPlayMode(PlayMode.normal);\n\n            if (audioRef.current) {\n                audioRef.current.currentTime = 0;\n                audioRef.current.pause();\n            }\n\n            let subtitles: DisplaySubtitleModel[] | undefined;\n\n            if (subtitleFiles.length > 0) {\n                setLoadingSubtitles(true);\n\n                try {\n                    const nodes = await subtitleReader.subtitles(subtitleFiles, flattenSubtitleFiles);\n                    const length = nodes.length > 0 ? nodes[nodes.length - 1].end + offset : 0;\n\n                    subtitles = nodes.map((s, i) => ({\n                        text: s.text,\n                        textImage: s.textImage,\n                        start: s.start + offset,\n                        originalStart: s.start,\n                        end: s.end + offset,\n                        originalEnd: s.end,\n                        displayTime: timeDurationDisplay(s.start + offset, length),\n                        track: s.track,\n                        index: i,\n                    }));\n\n                    setSubtitles(subtitles);\n                    setLastJumpToTopTimestamp(Date.now());\n                } catch (e) {\n                    if (e instanceof Error) {\n                        onError(e.message);\n                    } else {\n                        onError(String(e));\n                    }\n\n                    setSubtitles([]);\n                } finally {\n                    setLoadingSubtitles(false);\n                }\n            } else {\n                subtitles = undefined;\n            }\n\n            if (audioFileUrl) {\n                await mediaAdapter.onReady();\n                forceUpdate();\n            } else if (videoFileUrl || tab) {\n                if (channelClosed) {\n                    return;\n                }\n\n                if (videoFileUrl) {\n                    const channelId = uuidv4();\n                    channel = new VideoChannel(new BroadcastChannelVideoProtocol(channelId));\n                    setChannelId(channelId);\n                } else if (tab) {\n                    channel = new VideoChannel(new ChromeTabVideoProtocol(tab.id, tab.src, extension));\n                    channel.init();\n                } else {\n                    // Not possible\n                    // But throw error so typescript recognizes channel as defined\n                    throw new Error('Unreachable code');\n                }\n\n                videoRef.current = channel;\n                videoChannelRef.current = channel;\n                let subscribed = false;\n\n                channel.onExit(() => videoFileUrl && onUnloadVideo(videoFileUrl));\n                channel.onPopOutToggle(() => onVideoPopOut());\n                channel.onHideSubtitlePlayerToggle(() => {\n                    onHideSubtitlePlayer();\n                });\n                channel.onAppBarToggle(() => {\n                    onAppBarToggle();\n                });\n                channel.onFullscreenToggle(() => {\n                    onFullscreenToggle();\n                });\n                channel.onReady((paused) => {\n                    lengthRef.current = trackLength(audioRef, videoRef, subtitlesRef.current);\n                    channel?.ready(lengthRef.current, videoFile?.name);\n\n                    if (subtitlesRef.current) {\n                        channel?.subtitleSettings(settingsProvider.subtitleSettings);\n                        channel?.subtitles(\n                            subtitlesRef.current,\n                            flattenSubtitleFiles ? [subtitleFiles[0].name] : subtitleFiles.map((f) => f.name)\n                        );\n                    }\n\n                    channel?.ankiSettings(settingsProvider.ankiSettings);\n                    channel?.miscSettings(settingsProvider.miscSettings);\n                    channel?.playMode(playModeRef.current!);\n                    channel?.hideSubtitlePlayerToggle(hideSubtitlePlayerRef.current ?? false);\n\n                    if (channel?.audioTracks && channel?.audioTracks?.length > 1) {\n                        setAudioTracks(channel?.audioTracks);\n                        setSelectedAudioTrack(channel?.selectedAudioTrack);\n                    } else {\n                        setAudioTracks(undefined);\n                        setSelectedAudioTrack(undefined);\n                    }\n\n                    if (videoRef.current) {\n                        clock.setTime(videoRef.current.currentTime * 1000);\n                    }\n\n                    if (paused) {\n                        clock.stop();\n                    } else {\n                        clock.start();\n                    }\n\n                    setPlaying(!paused);\n\n                    if (channel?.playbackRate) {\n                        clock.rate = channel.playbackRate;\n                        setPlaybackRate(channel.playbackRate);\n                    }\n\n                    if (!subscribed) {\n                        channel?.onPlay((forwardToMedia) => play(clock, mediaAdapter, forwardToMedia));\n                        channel?.onPause((forwardToMedia) => pause(clock, mediaAdapter, forwardToMedia));\n                        channel?.onOffset((offset) => applyOffset(Math.max(-lengthRef.current ?? 0, offset), false));\n                        channel?.onPlaybackRate((playbackRate, forwardToMedia) =>\n                            updatePlaybackRate(playbackRate, forwardToMedia)\n                        );\n                        channel?.onCopy(\n                            (subtitle, surroundingSubtitles, audio, image, url, postMineAction, preventDuplicate, id) =>\n                                onCopy(\n                                    subtitle,\n                                    surroundingSubtitles,\n                                    audioFile,\n                                    videoFile,\n                                    subtitle ? subtitleFiles[subtitle.track] : undefined,\n                                    clock.time(lengthRef.current),\n                                    channel?.selectedAudioTrack,\n                                    channel?.playbackRate,\n                                    audio,\n                                    image,\n                                    url,\n                                    postMineAction,\n                                    preventDuplicate,\n                                    id\n                                )\n                        );\n                        channel?.onPlayMode((playMode) => {\n                            setPlayMode(playMode);\n                            channel?.playMode(playMode);\n                        });\n                        channel?.onCurrentTime(async (currentTime, forwardToMedia) => {\n                            if (playingRef.current) {\n                                clock.stop();\n                            }\n\n                            await seek(currentTime * 1000, clock, forwardToMedia);\n\n                            if (playingRef.current) {\n                                clock.start();\n                            }\n                        });\n                        channel?.onAudioTrackSelected(async (id) => {\n                            if (playingRef.current) {\n                                clock.stop();\n                            }\n\n                            await mediaAdapter.onReady();\n                            if (playingRef.current) {\n                                clock.start();\n                            }\n\n                            setSelectedAudioTrack(id);\n                        });\n                        channel?.onAnkiDialogRequest(() => onAnkiDialogRequest());\n                        channel?.onToggleSubtitleTrackInList((track) =>\n                            setDisabledSubtitleTracks((tracks) => {\n                                const newTracks = { ...tracks };\n                                newTracks[track] = !tracks[track];\n                                return newTracks;\n                            })\n                        );\n\n                        subscribed = true;\n                    }\n                });\n            }\n        }\n\n        init().then(() => onLoaded());\n\n        return () => {\n            channel?.close();\n            channelClosed = true;\n        };\n    }, [\n        subtitleReader,\n        extension,\n        settingsProvider,\n        playbackPreferences,\n        clock,\n        mediaAdapter,\n        seek,\n        onLoaded,\n        onError,\n        onUnloadVideo,\n        onCopy,\n        onAnkiDialogRequest,\n        onHideSubtitlePlayer,\n        onAppBarToggle,\n        onFullscreenToggle,\n        onVideoPopOut,\n        subtitleFiles,\n        audioFile,\n        audioFileUrl,\n        videoFile,\n        videoFileUrl,\n        tab,\n        forceUpdate,\n        videoFrameRef,\n        videoChannelRef,\n        applyOffset,\n        updatePlaybackRate,\n        flattenSubtitleFiles,\n    ]);\n\n    function play(clock: Clock, mediaAdapter: MediaAdapter, forwardToMedia: boolean) {\n        setPlaying(true);\n        clock.start();\n\n        if (forwardToMedia) {\n            mediaAdapter.play();\n        }\n    }\n\n    function pause(clock: Clock, mediaAdapter: MediaAdapter, forwardToMedia: boolean) {\n        setPlaying(false);\n        clock.stop();\n\n        if (forwardToMedia) {\n            mediaAdapter.pause();\n        }\n    }\n\n    useEffect(() => {\n        if (ankiDialogFinishedRequest && ankiDialogFinishedRequest.timestamp > 0) {\n            setResumeOnFinishedAnkiDialogRequest((resumeOnFinishedAnkiDialogRequest) => {\n                if (resumeOnFinishedAnkiDialogRequest && ankiDialogFinishedRequest.resume) {\n                    play(clock, mediaAdapter, true);\n                }\n\n                return false;\n            });\n        }\n    }, [ankiDialogFinishedRequest, clock, mediaAdapter]);\n\n    useEffect(() => {\n        if (ankiDialogRequested && playingRef.current) {\n            pause(clock, mediaAdapter, true);\n            setResumeOnFinishedAnkiDialogRequest(true);\n        }\n    }, [ankiDialogRequested, clock, mediaAdapter]);\n\n    useEffect(() => {\n        if (playMode !== PlayMode.condensed) {\n            return;\n        }\n\n        if (!subtitles || subtitles.length === 0) {\n            return;\n        }\n\n        let seeking = false;\n        let expectedSeekTime = 1000;\n\n        const interval = setInterval(async () => {\n            const length = lengthRef.current;\n\n            if (!length) {\n                return;\n            }\n\n            const timestamp = clock.time(length);\n            const slice = subtitleCollection.subtitlesAt(timestamp);\n\n            if (slice.nextToShow && slice.nextToShow.length > 0) {\n                const nextSubtitle = slice.nextToShow[0];\n\n                if (nextSubtitle.start - timestamp < expectedSeekTime + 500) {\n                    return;\n                }\n\n                if (playingRef.current) {\n                    clock.stop();\n                }\n\n                if (!seeking) {\n                    seeking = true;\n                    const t0 = Date.now();\n                    await seek(nextSubtitle.start, clock, true);\n                    expectedSeekTime = Date.now() - t0;\n                    seeking = false;\n                }\n\n                if (playingRef.current) {\n                    clock.start();\n                }\n            }\n        }, 100);\n\n        return () => clearInterval(interval);\n    }, [subtitles, subtitleCollection, playMode, clock, seek]);\n\n    useEffect(() => {\n        if (videoPopOut && channelId && videoFileUrl) {\n            window.open(\n                process.env.PUBLIC_URL +\n                    '/?video=' +\n                    encodeURIComponent(videoFileUrl) +\n                    '&channel=' +\n                    channelId +\n                    '&popout=true',\n                'asbplayer-video-' + videoFileUrl,\n                'resizable,width=800,height=450'\n            );\n        }\n\n        setLastJumpToTopTimestamp(Date.now());\n    }, [videoPopOut, channelId, videoFileUrl, videoFrameRef]);\n\n    const handlePlay = useCallback(() => play(clock, mediaAdapter, true), [clock, mediaAdapter]);\n    const handlePause = useCallback(() => pause(clock, mediaAdapter, true), [clock, mediaAdapter]);\n    const handleSeek = useCallback(\n        async (progress: number) => {\n            if (!lengthRef.current) {\n                return;\n            }\n\n            if (playingRef.current) {\n                clock.stop();\n            }\n\n            await seek(progress * lengthRef.current, clock, true);\n\n            if (playingRef.current) {\n                clock.start();\n            }\n        },\n        [clock, seek]\n    );\n\n    const handleSeekToSubtitle = useCallback(\n        async (time: number, shouldPlay: boolean) => {\n            if (!shouldPlay) {\n                pause(clock, mediaAdapter, true);\n            }\n\n            if (playingRef.current) {\n                clock.stop();\n            }\n\n            await seek(time, clock, true);\n\n            if (shouldPlay && !playingRef.current) {\n                // play method will start the clock again\n                play(clock, mediaAdapter, true);\n            }\n        },\n        [clock, seek, mediaAdapter]\n    );\n\n    const handleCopyFromSubtitlePlayer = useCallback(\n        (\n            subtitle: SubtitleModel,\n            surroundingSubtitles: SubtitleModel[],\n            postMineAction: PostMineAction,\n            preventDuplicate: boolean\n        ) => {\n            onCopy(\n                subtitle,\n                surroundingSubtitles,\n                audioFile,\n                videoFile,\n                subtitleFiles[subtitle.track],\n                clock.time(lengthRef.current),\n                selectedAudioTrack,\n                playbackRate,\n                undefined,\n                undefined,\n                undefined,\n                postMineAction,\n                preventDuplicate,\n                undefined\n            );\n        },\n        [clock, onCopy, audioFile, videoFile, subtitleFiles, selectedAudioTrack, playbackRate]\n    );\n\n    const handleMouseMove = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n        mousePositionRef.current.x = e.screenX;\n        mousePositionRef.current.y = e.screenY;\n    }, []);\n\n    const handleAudioTrackSelected = useCallback(\n        async (id: string) => {\n            if (videoRef.current instanceof VideoChannel) {\n                videoRef.current.audioTrackSelected(id);\n            }\n\n            pause(clock, mediaAdapter, true);\n\n            await seek(0, clock, true);\n\n            if (playingRef.current) {\n                play(clock, mediaAdapter, true);\n            }\n        },\n        [clock, mediaAdapter, seek]\n    );\n\n    const handleOffsetChange = useCallback(\n        (offset: number) => {\n            applyOffset(Math.max(-lengthRef.current ?? 0, offset), true);\n        },\n        [applyOffset]\n    );\n\n    const handleVolumeChange = useCallback((volume: number) => {\n        if (audioRef.current instanceof HTMLMediaElement) {\n            audioRef.current.volume = volume;\n        }\n    }, []);\n\n    const handlePlaybackRateChange = useCallback(\n        (playbackRate: number) => {\n            updatePlaybackRate(playbackRate, true);\n        },\n        [updatePlaybackRate]\n    );\n\n    const handlePlayMode = useCallback((playMode: PlayMode) => setPlayMode(playMode), []);\n\n    const handleToggleSubtitleTrack = useCallback(\n        (track: number) =>\n            setDisabledSubtitleTracks((tracks) => {\n                const newTracks = { ...tracks };\n                newTracks[track] = !tracks[track];\n                return newTracks;\n            }),\n        []\n    );\n\n    const handleSubtitlesSelected = useCallback(\n        (subtitles: SubtitleModel[]) => {\n            if (subtitles.length === 0 || !settingsProvider.autoCopyCurrentSubtitle || !document.hasFocus()) {\n                return;\n            }\n\n            navigator.clipboard.writeText(subtitles.map((s) => s.text).join('\\n')).catch((e) => {\n                // ignore\n            });\n        },\n        [settingsProvider.autoCopyCurrentSubtitle]\n    );\n\n    useEffect(() => {\n        if (tab) {\n            return;\n        }\n\n        const interval = setInterval(async () => {\n            const length = lengthRef.current;\n            const progress = clock.progress(length);\n\n            if (progress >= 1) {\n                pause(clock, mediaAdapter, true);\n                await seek(0, clock, true);\n                setLastJumpToTopTimestamp(Date.now());\n            }\n        }, 1000);\n\n        return () => clearInterval(interval);\n    }, [clock, subtitles, mediaAdapter, seek, tab]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindPlay(\n            (event) => {\n                event.preventDefault();\n\n                if (playing) {\n                    pause(clock, mediaAdapter, true);\n                } else {\n                    play(clock, mediaAdapter, true);\n                }\n            },\n            () => disableKeyEvents\n        );\n\n        return () => unbind();\n    }, [keyBinder, playing, clock, mediaAdapter, disableKeyEvents]);\n\n    useEffect(() => {\n        return keyBinder.bindAdjustPlaybackRate(\n            (event, increase) => {\n                event.preventDefault();\n                if (increase) {\n                    updatePlaybackRate(Math.min(5, playbackRate + 0.1), true);\n                } else {\n                    updatePlaybackRate(Math.max(0.1, playbackRate - 0.1), true);\n                }\n            },\n            () => disableKeyEvents\n        );\n    }, [updatePlaybackRate, playbackRate, disableKeyEvents, keyBinder]);\n\n    const togglePlayMode = useCallback(\n        (event: KeyboardEvent, togglePlayMode: PlayMode) => {\n            if (!playModeEnabled) {\n                return;\n            }\n\n            event.preventDefault();\n            const newPlayMode = playMode === togglePlayMode ? PlayMode.normal : togglePlayMode;\n            setPlayMode(newPlayMode);\n            onPlayModeChangedViaBind(playMode, newPlayMode);\n\n            if (videoRef.current instanceof VideoChannel) {\n                videoRef.current.playMode(newPlayMode);\n            }\n        },\n        [playMode, playModeEnabled, onPlayModeChangedViaBind]\n    );\n\n    useEffect(() => {\n        return keyBinder.bindAutoPause(\n            (event) => togglePlayMode(event, PlayMode.autoPause),\n            () => disableKeyEvents\n        );\n    }, [togglePlayMode, keyBinder, disableKeyEvents]);\n\n    useEffect(() => {\n        return keyBinder.bindCondensedPlayback(\n            (event) => togglePlayMode(event, PlayMode.condensed),\n            () => disableKeyEvents\n        );\n    }, [togglePlayMode, keyBinder, disableKeyEvents]);\n\n    useEffect(() => {\n        if ((audioFile || videoFile) && (!subtitles || subtitles.length === 0)) {\n            const unbindCopy = keyBinder.bindCopy(\n                (event, subtitle) => {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    const surroundingSubtitles = mockSurroundingSubtitles(subtitle, lengthRef.current, 5000);\n                    onCopy(\n                        subtitle,\n                        surroundingSubtitles,\n                        audioFile,\n                        videoFile,\n                        undefined,\n                        clock.time(lengthRef.current),\n                        selectedAudioTrack,\n                        playbackRate,\n                        undefined,\n                        undefined,\n                        undefined,\n                        undefined,\n                        undefined,\n                        undefined\n                    );\n                },\n                () => disableKeyEvents,\n                () => {\n                    if (!lengthRef.current) {\n                        return undefined;\n                    }\n\n                    const timestamp = clock.time(lengthRef.current);\n                    const end = Math.min(timestamp + 5000, lengthRef.current);\n\n                    return {\n                        text: '',\n                        start: timestamp,\n                        originalStart: timestamp,\n                        end: end,\n                        originalEnd: end,\n                        track: 0,\n                    };\n                }\n            );\n\n            const unbindAnkiExport = keyBinder.bindAnkiExport(\n                (event) => {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    const timestamp = clock.time(lengthRef.current);\n                    const end = Math.min(timestamp + 5000, lengthRef.current);\n                    const subtitle = {\n                        text: '',\n                        start: timestamp,\n                        originalStart: timestamp,\n                        end: end,\n                        originalEnd: end,\n                        track: 0,\n                    };\n                    const surroundingSubtitles = mockSurroundingSubtitles(subtitle, lengthRef.current, 5000);\n                    onCopy(\n                        subtitle,\n                        surroundingSubtitles,\n                        audioFile,\n                        videoFile,\n                        undefined,\n                        timestamp,\n                        selectedAudioTrack,\n                        playbackRate,\n                        undefined,\n                        undefined,\n                        undefined,\n                        PostMineAction.showAnkiDialog,\n                        undefined,\n                        undefined\n                    );\n                },\n                () => false\n            );\n\n            return () => {\n                unbindCopy();\n                unbindAnkiExport();\n            };\n        }\n    }, [\n        keyBinder,\n        audioFile,\n        videoFile,\n        subtitles,\n        clock,\n        playbackRate,\n        selectedAudioTrack,\n        disableKeyEvents,\n        onCopy,\n        onAnkiDialogRequest,\n    ]);\n\n    useEffect(() => {\n        if (videoRef.current instanceof VideoChannel) {\n            videoRef.current.appBarToggle(appBarHidden);\n        }\n    }, [appBarHidden]);\n\n    useEffect(() => {\n        if (videoRef.current instanceof VideoChannel) {\n            videoRef.current.hideSubtitlePlayerToggle(hideSubtitlePlayer);\n        }\n    }, [hideSubtitlePlayer]);\n\n    useEffect(() => {\n        if (videoRef.current instanceof VideoChannel) {\n            videoRef.current.fullscreenToggle(videoFullscreen);\n        }\n    }, [videoFullscreen]);\n\n    useEffect(() => {\n        if (!rewindSubtitle) {\n            return;\n        }\n\n        if (playingRef.current) {\n            clock.stop();\n        }\n\n        handleSeekToSubtitle(rewindSubtitle.start, false);\n    }, [clock, rewindSubtitle, handleSeekToSubtitle]);\n\n    const length = lengthRef.current;\n    const loaded = audioFileUrl || videoFileUrl || subtitles;\n    const videoInWindow = Boolean(loaded && videoFileUrl && !videoPopOut);\n\n    return (\n        <div onMouseMove={handleMouseMove} className={classes.root}>\n            <Grid container direction=\"row\" wrap=\"nowrap\" className={classes.container}>\n                {videoInWindow && (\n                    <Grid item style={{ flexGrow: 1, minWidth: 600 }}>\n                        <iframe\n                            ref={videoFrameRef}\n                            className={classes.videoFrame}\n                            src={\n                                process.env.PUBLIC_URL +\n                                '/?video=' +\n                                encodeURIComponent(videoFileUrl!) +\n                                '&channel=' +\n                                channelId +\n                                '&popout=false'\n                            }\n                            title=\"asbplayer\"\n                        />\n                    </Grid>\n                )}\n                {(!videoInWindow || (subtitles && subtitles?.length > 0)) && (\n                    <Grid\n                        item\n                        style={{\n                            flexGrow: videoInWindow ? 0 : 1,\n                            width: videoInWindow && hideSubtitlePlayer ? 0 : 'auto',\n                        }}\n                    >\n                        {loaded && !(videoFileUrl && !videoPopOut) && (\n                            <Controls\n                                mousePositionRef={mousePositionRef}\n                                playing={playing}\n                                clock={clock}\n                                length={length}\n                                displayLength={trackLength(audioRef, videoRef, subtitles, false)}\n                                audioTracks={audioTracks}\n                                selectedAudioTrack={selectedAudioTrack}\n                                tabs={(!videoFileUrl && !audioFileUrl && availableTabs) || undefined}\n                                selectedTab={tab}\n                                audioFile={audioFile?.name}\n                                videoFile={videoFile?.name}\n                                offsetEnabled={true}\n                                offset={offset}\n                                playbackRate={playbackRate}\n                                playbackRateEnabled={!tab || (extension.installed && gte(extension.version, '0.24.0'))}\n                                onPlaybackRateChange={handlePlaybackRateChange}\n                                volumeEnabled={Boolean(audioFileUrl)}\n                                playModeEnabled={playModeEnabled}\n                                playMode={playMode}\n                                onPlay={handlePlay}\n                                onPause={handlePause}\n                                onSeek={handleSeek}\n                                onAudioTrackSelected={handleAudioTrackSelected}\n                                onTabSelected={onTabSelected}\n                                onUnloadAudio={() => audioFileUrl && onUnloadAudio(audioFileUrl)}\n                                onUnloadVideo={() => videoFileUrl && onUnloadVideo(videoFileUrl)}\n                                onOffsetChange={handleOffsetChange}\n                                onVolumeChange={handleVolumeChange}\n                                onPlayMode={handlePlayMode}\n                                disableKeyEvents={disableKeyEvents}\n                                playbackPreferences={playbackPreferences}\n                                showOnMouseMovement={true}\n                            />\n                        )}\n                        <SubtitlePlayer\n                            playing={playing}\n                            subtitles={subtitles}\n                            subtitleCollection={subtitleCollection}\n                            clock={clock}\n                            length={length}\n                            jumpToSubtitle={jumpToSubtitle}\n                            drawerOpen={drawerOpen}\n                            appBarHidden={appBarHidden}\n                            compressed={Boolean(videoFileUrl && !videoPopOut)}\n                            copyButtonEnabled={tab === undefined}\n                            loading={loadingSubtitles}\n                            displayHelp={audioFile?.name || (videoPopOut && videoFile?.name) || undefined}\n                            disableKeyEvents={disableKeyEvents}\n                            lastJumpToTopTimestamp={lastJumpToTopTimestamp}\n                            hidden={videoInWindow && hideSubtitlePlayer}\n                            disabledSubtitleTracks={disabledSubtitleTracks}\n                            onSeek={handleSeekToSubtitle}\n                            onCopy={handleCopyFromSubtitlePlayer}\n                            onOffsetChange={handleOffsetChange}\n                            onToggleSubtitleTrack={handleToggleSubtitleTrack}\n                            onSubtitlesSelected={handleSubtitlesSelected}\n                            autoPauseContext={autoPauseContext}\n                            settingsProvider={settingsProvider}\n                            keyBinder={keyBinder}\n                        />\n                    </Grid>\n                )}\n            </Grid>\n            <audio ref={audioRef} src={audioFileUrl} />\n        </div>\n    );\n}\n","import { useState, useEffect } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\ninterface Props {\n    open: boolean;\n    onProceed: (fieldName: string) => void;\n    onCancel: () => void;\n    existingCustomFieldNames: string[];\n}\n\nexport default function CustomFieldDialog({ open, onProceed, onCancel, existingCustomFieldNames }: Props) {\n    const [fieldName, setFieldName] = useState<string>('');\n\n    useEffect(() => {\n        setFieldName('');\n    }, [open]);\n\n    const fieldExists = [\n        ...existingCustomFieldNames,\n        'Sentence',\n        'Word',\n        'Definition',\n        'Source',\n        'Image',\n        'Audio',\n    ].includes(fieldName);\n\n    return (\n        <Dialog\n            open={open}\n            disableEnforceFocus\n            fullWidth\n            maxWidth=\"xs\"\n            onClose={onCancel}\n        >\n            <DialogTitle>New Custom Field</DialogTitle>\n            <DialogContent>\n                <form>\n                    <TextField\n                        error={fieldExists}\n                        helperText={fieldExists && `Field ${fieldName} already exists`}\n                        variant=\"filled\"\n                        fullWidth\n                        label=\"Field Name\"\n                        value={fieldName}\n                        color=\"secondary\"\n                        onChange={(e) => setFieldName(e.target.value)}\n                    />\n                </form>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={() => onCancel()}>Cancel</Button>\n                <Button disabled={fieldExists || fieldName.trim() === ''} onClick={() => onProceed(fieldName.trim())}>\n                    Create\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n","import React, { useCallback, useState, useEffect, useMemo, ChangeEvent, ReactNode, useRef } from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport { computeStyles } from '../services/util';\nimport Button from '@material-ui/core/Button';\nimport CustomFieldDialog from './CustomFieldDialog';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport EditIcon from '@material-ui/icons/Edit';\nimport InfoIcon from '@material-ui/icons/Info';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Grid from '@material-ui/core/Grid';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Link from '@material-ui/core/Link';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Radio from '@material-ui/core/Radio';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport Select from '@material-ui/core/Select';\nimport TextField from '@material-ui/core/TextField';\nimport { Theme } from '@material-ui/core/styles';\nimport { Anki, AsbplayerSettings, AutoPausePreference, KeyBindSet, KeyBindName } from '@project/common';\nimport { TagsTextField } from '@project/common/components';\nimport hotkeys from 'hotkeys-js';\nimport Typography from '@material-ui/core/Typography';\nimport ChromeExtension from '../services/ChromeExtension';\nimport { isMacOs } from 'react-device-detect';\nimport Switch from '@material-ui/core/Switch';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nconst useStyles = makeStyles<Theme>((theme) => ({\n    root: {\n        '& .MuiTextField-root': {\n            marginTop: theme.spacing(1),\n            marginBottom: theme.spacing(1),\n        },\n    },\n    subtitleSetting: {\n        '& .MuiTextField-root': {\n            marginTop: theme.spacing(1),\n            marginBottom: theme.spacing(1),\n        },\n    },\n    subtitlePreview: {\n        backgroundImage: `linear-gradient(45deg, ${theme.palette.action.disabledBackground} 25%, transparent 25%), linear-gradient(-45deg, ${theme.palette.action.disabledBackground} 25%, transparent 25%), linear-gradient(45deg, transparent 75%, ${theme.palette.action.disabledBackground} 75%), linear-gradient(-45deg, transparent 75%,${theme.palette.action.disabledBackground} 75%)`,\n        backgroundSize: '20px 20px',\n        backgroundPosition: '0 0, 0 10px, 10px -10px, -10px 0px',\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n        maxWidth: '100%',\n        padding: 10,\n    },\n    subtitlePreviewInput: {\n        border: 'none',\n        width: '100%',\n        textAlign: 'center',\n        backgroundColor: 'rgba(0,0,0,0)',\n        '&:focus': {\n            outline: 'none',\n        },\n    },\n    addFieldButton: {\n        width: '100%',\n    },\n    switchLabel: {\n        justifyContent: 'space-between',\n        marginLeft: 0,\n    },\n}));\n\nconst useSelectableSettingStyles = makeStyles<Theme>((theme) => ({\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n    },\n    root: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'end',\n        alignItems: 'flex-end',\n    },\n}));\n\nfunction regexIsValid(regex: string) {\n    try {\n        new RegExp(regex.trim());\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\n\ninterface SelectableSettingProps {\n    label: string;\n    value: string;\n    selections?: string[];\n    removable?: boolean;\n    onChange: (event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => void;\n    onSelectionChange: (event: ChangeEvent<{ name?: string | undefined; value: unknown }>, child: ReactNode) => void;\n    onRemoval?: () => void;\n}\n\nfunction SelectableSetting({\n    label,\n    value,\n    selections,\n    removable,\n    onChange,\n    onSelectionChange,\n    onRemoval,\n}: SelectableSettingProps) {\n    const classes = useSelectableSettingStyles();\n\n    return (\n        <div className={classes.root}>\n            <TextField\n                label={label}\n                value={value}\n                onChange={onChange}\n                fullWidth\n                color=\"secondary\"\n                InputProps={{\n                    endAdornment: removable && (\n                        <InputAdornment position=\"end\">\n                            <IconButton onClick={(e) => onRemoval?.()}>\n                                <DeleteIcon />\n                            </IconButton>\n                        </InputAdornment>\n                    ),\n                }}\n            />\n            <FormControl className={classes.formControl}>\n                <InputLabel></InputLabel>\n                <Select value={value} disabled={!selections} color=\"secondary\" onChange={onSelectionChange}>\n                    {selections &&\n                        selections.map((s) => (\n                            <MenuItem key={s} value={s}>\n                                {s}\n                            </MenuItem>\n                        ))}\n                </Select>\n            </FormControl>\n        </div>\n    );\n}\n\ninterface KeyBindProperties {\n    label: string;\n    extensionOverridden: boolean;\n}\n\nconst keyBindProperties: { [key in KeyBindName]: KeyBindProperties } = {\n    copySubtitle: { label: 'Mine current subtitle', extensionOverridden: true },\n    ankiExport: { label: 'Mine current subtitle and open Anki dialog', extensionOverridden: true },\n    updateLastCard: {\n        label: 'Update last-created Anki card with asbplayer-captured screenshot, audio, etc.',\n        extensionOverridden: true,\n    },\n    togglePlay: { label: 'Play/pause', extensionOverridden: false },\n    toggleAutoPause: { label: 'Toggle auto-pause', extensionOverridden: false },\n    toggleCondensedPlayback: { label: 'Toggle condensed playback', extensionOverridden: false },\n    toggleSubtitles: { label: 'Toggle subtitles', extensionOverridden: false },\n    toggleVideoSubtitleTrack1: { label: 'Toggle subtitle track 1 in video', extensionOverridden: false },\n    toggleVideoSubtitleTrack2: { label: 'Toggle subtitle track 2 in video', extensionOverridden: false },\n    toggleAsbplayerSubtitleTrack1: { label: 'Toggle subtitle track 1 in asbplayer', extensionOverridden: false },\n    toggleAsbplayerSubtitleTrack2: { label: 'Toggle subtitle track 2 in asbplayer', extensionOverridden: false },\n    seekBackward: { label: 'Seek backward 10 seconds', extensionOverridden: false },\n    seekForward: { label: 'Seek forward 10 seconds', extensionOverridden: false },\n    seekToPreviousSubtitle: { label: 'Seek to previous subtitle', extensionOverridden: false },\n    seekToNextSubtitle: { label: 'Seek to next subtitle', extensionOverridden: false },\n    seekToBeginningOfCurrentSubtitle: { label: 'Seek to beginning of current subtitle', extensionOverridden: false },\n    adjustOffsetToPreviousSubtitle: {\n        label: 'Adjust subtitle offset so that previous subtitle is at current timestamp',\n        extensionOverridden: false,\n    },\n    adjustOffsetToNextSubtitle: {\n        label: 'Adjust subtitle offset so that next subtitle is at current timestamp',\n        extensionOverridden: false,\n    },\n    increaseOffset: { label: 'Adjust subtitle offset by +100ms', extensionOverridden: false },\n    decreaseOffset: { label: 'Adjust subtitle offset by -100ms', extensionOverridden: false },\n    increasePlaybackRate: { label: 'Adjust playback rate by +0.1', extensionOverridden: false },\n    decreasePlaybackRate: { label: 'Adjust playback rate by -0.1', extensionOverridden: false },\n};\n\n// hotkeys only returns strings for a Mac while requiring the OS-specific keys for the actual binds\nconst modifierKeyReplacements: { [key: string]: string } = isMacOs\n    ? {}\n    : {\n          '⌃': 'ctrl',\n          '⇧': 'shift',\n          '⌥': 'alt',\n      };\n\nconst modifierKeys = ['⌃', '⇧', '⌥', 'ctrl', 'shift', 'alt', 'option', 'control', 'command', '⌘'];\n\nconst useKeyBindFieldStyles = makeStyles<Theme>((theme) => ({\n    container: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n    },\n    labelItem: {},\n}));\n\ninterface KeyBindFieldProps {\n    label: string;\n    keys: string;\n    extensionOverridden: boolean;\n    onKeysChange: (keys: string) => void;\n    onOpenExtensionShortcuts: () => void;\n}\n\nfunction KeyBindField({ label, keys, extensionOverridden, onKeysChange, onOpenExtensionShortcuts }: KeyBindFieldProps) {\n    const classes = useKeyBindFieldStyles();\n    const [currentKeyString, setCurrentKeyString] = useState<string>(keys);\n    const currentKeyStringRef = useRef<string>();\n    currentKeyStringRef.current = currentKeyString;\n    const onKeysChangeRef = useRef<(keys: string) => void>();\n    onKeysChangeRef.current = onKeysChange;\n    const [editing, setEditing] = useState<boolean>(false);\n\n    useEffect(() => setCurrentKeyString(keys), [keys]);\n\n    const handleEditKeyBinding = useCallback(\n        (event: React.MouseEvent) => {\n            if (event.nativeEvent.detail === 0) {\n                return;\n            }\n\n            if (extensionOverridden) {\n                onOpenExtensionShortcuts();\n                return;\n            }\n\n            setCurrentKeyString('');\n            setEditing(true);\n        },\n        [onOpenExtensionShortcuts, extensionOverridden]\n    );\n\n    const ref = useRef<HTMLButtonElement>(null);\n\n    useEffect(() => {\n        if (!editing) {\n            return;\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (event.type === 'keydown') {\n                // The ts declaration is missing getPressedKeyString()\n                // @ts-ignore\n                const pressed = hotkeys.getPressedKeyString() as string[];\n                setCurrentKeyString(\n                    pressed\n                        .map((key) => {\n                            return modifierKeyReplacements[key] ?? key;\n                        })\n                        .sort((a, b) => {\n                            const isAModifier = modifierKeys.includes(a);\n                            const isBModifier = modifierKeys.includes(b);\n\n                            if (isAModifier && !isBModifier) {\n                                return -1;\n                            }\n\n                            if (!isAModifier && isBModifier) {\n                                return 1;\n                            }\n\n                            return 0;\n                        })\n                        .join('+')\n                );\n            } else if (event.type === 'keyup') {\n                setEditing(false);\n\n                // Need to use refs because hotkeys returns the wrong keys\n                // if the handler is bound/unbound.\n                if (currentKeyStringRef.current) {\n                    onKeysChangeRef.current!(currentKeyStringRef.current);\n                }\n            }\n        };\n\n        hotkeys('*', { keyup: true }, handler);\n        return () => hotkeys.unbind('*', handler);\n    }, [editing]);\n\n    useEffect(() => {\n        const handler = (event: MouseEvent) => {\n            if (editing && !ref.current?.contains(event.target as Node)) {\n                setEditing(false);\n                setCurrentKeyString('');\n                onKeysChange('');\n            }\n        };\n        window.document.addEventListener('click', handler);\n        return () => window.document.removeEventListener('click', handler);\n    }, [editing, onKeysChange]);\n\n    let placeholder: string;\n\n    if (editing) {\n        placeholder = 'Recording';\n    } else if (extensionOverridden) {\n        placeholder = 'Overridden';\n    } else {\n        placeholder = 'Unbound';\n    }\n\n    return (\n        <Grid container className={classes.container} wrap={'nowrap'} spacing={1}>\n            <Grid item className={classes.labelItem} xs={6}>\n                <Typography>{label}</Typography>\n            </Grid>\n            <Grid item xs={6}>\n                <TextField\n                    placeholder={placeholder}\n                    size=\"small\"\n                    contentEditable={false}\n                    disabled={extensionOverridden}\n                    helperText={extensionOverridden ? 'Extension shortcut' : undefined}\n                    value={currentKeyString}\n                    color=\"secondary\"\n                    InputProps={{\n                        endAdornment: (\n                            <InputAdornment position=\"end\">\n                                <IconButton ref={ref} onClick={handleEditKeyBinding}>\n                                    <EditIcon />\n                                </IconButton>\n                            </InputAdornment>\n                        ),\n                    }}\n                />\n            </Grid>\n        </Grid>\n    );\n}\n\ninterface Props {\n    anki: Anki;\n    extension: ChromeExtension;\n    open: boolean;\n    settings: AsbplayerSettings;\n    scrollToId?: string;\n    onClose: (settings: AsbplayerSettings) => void;\n}\n\nexport default function SettingsDialog({ anki, extension, open, settings, scrollToId, onClose }: Props) {\n    const classes = useStyles();\n    const [ankiConnectUrl, setAnkiConnectUrl] = useState<string>(settings.ankiConnectUrl);\n    const [ankiConnectUrlError, setAnkiConnectUrlError] = useState<string>();\n    const [ankiConnectUrlChangeTimestamp, setAnkiConnectUrlChangeTimestamp] = useState<number>(0);\n    const [deck, setDeck] = useState<string>(settings.deck || '');\n    const [deckNames, setDeckNames] = useState<string[]>();\n    const [noteType, setNoteType] = useState<string>(settings.noteType || '');\n    const [modelNames, setModelNames] = useState<string[]>();\n    const [sentenceField, setSentenceField] = useState<string>(settings.sentenceField || '');\n    const [definitionField, setDefinitionField] = useState<string>(settings.definitionField || '');\n    const [audioField, setAudioField] = useState<string>(settings.audioField || '');\n    const [imageField, setImageField] = useState<string>(settings.imageField || '');\n    const [wordField, setWordField] = useState<string>(settings.wordField || '');\n    const [sourceField, setSourceField] = useState<string>(settings.sourceField || '');\n    const [urlField, setUrlField] = useState<string>(settings.urlField || '');\n    const [customFields, setCustomFields] = useState<{ [key: string]: string }>(settings.customAnkiFields);\n    const [tags, setTags] = useState<string[]>(settings.tags);\n    const [preferMp3, setPreferMp3] = useState<boolean>(settings.preferMp3);\n    const [fieldNames, setFieldNames] = useState<string[]>();\n    const [customFieldDialogOpen, setCustomFieldDialogOpen] = useState<boolean>(false);\n    const [audioPaddingStart, setAudioPaddingStart] = useState<number>(settings.audioPaddingStart);\n    const [audioPaddingEnd, setAudioPaddingEnd] = useState<number>(settings.audioPaddingEnd);\n    const [maxImageWidth, setMaxImageWidth] = useState<number>(settings.maxImageWidth);\n    const [maxImageHeight, setMaxImageHeight] = useState<number>(settings.maxImageHeight);\n    const [surroundingSubtitlesCountRadius, setSurroundingSubtitlesCountRadius] = useState<number>(\n        settings.surroundingSubtitlesCountRadius\n    );\n    const [surroundingSubtitlesTimeRadius, setSurroundingSubtitlesTimeRadius] = useState<number>(\n        settings.surroundingSubtitlesTimeRadius\n    );\n    const [subtitleColor, setSubtitleColor] = useState<string>(settings.subtitleColor);\n    const [subtitleSize, setSubtitleSize] = useState<number>(settings.subtitleSize);\n    const [subtitleOutlineColor, setSubtitleOutlineColor] = useState<string>(settings.subtitleOutlineColor);\n    const [subtitleOutlineThickness, setSubtitleOutlineThickness] = useState<number>(settings.subtitleOutlineThickness);\n    const [subtitleBackgroundColor, setSubtitleBackgroundColor] = useState<string>(settings.subtitleBackgroundColor);\n    const [subtitleBackgroundOpacity, setSubtitleBackgroundOpacity] = useState<number>(\n        settings.subtitleBackgroundOpacity\n    );\n    const [subtitleFontFamily, setSubtitleFontFamily] = useState<string>(settings.subtitleFontFamily);\n    const [imageBasedSubtitleScaleFactor, setImageBasedSubtitleScaleFactor] = useState<number>(\n        settings.imageBasedSubtitleScaleFactor\n    );\n    const [subtitlePreview, setSubtitlePreview] = useState<string>(settings.subtitlePreview);\n    const [themeType, setThemeType] = useState<'dark' | 'light'>(settings.themeType);\n    const [copyToClipboardOnMine, setCopyToClipboardOnMine] = useState<boolean>(settings.copyToClipboardOnMine);\n    const [autoPausePreference, setAutoPausePreference] = useState<AutoPausePreference>(settings.autoPausePreference);\n    const [keyBindSet, setKeyBindSet] = useState<KeyBindSet>(settings.keyBindSet);\n    const [rememberSubtitleOffset, setRememberSubtitleOffset] = useState<boolean>(settings.rememberSubtitleOffset);\n    const [autoCopyCurrentSubtitle, setAutoCopyCurrentSubtitle] = useState<boolean>(settings.autoCopyCurrentSubtitle);\n    const [subtitleRegexFilter, setSubtitleRegexFilter] = useState<string>(settings.subtitleRegexFilter);\n    const [subtitleRegexFilterTextReplacement, setSubtitleRegexFilterTextReplacement] = useState<string>(\n        settings.subtitleRegexFilterTextReplacement\n    );\n\n    const handleAnkiConnectUrlChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n        setAnkiConnectUrl(e.target.value);\n        setAnkiConnectUrlChangeTimestamp(Date.now());\n    }, []);\n\n    const handleRetryAnkiConnectUrl = useCallback(\n        (e: React.MouseEvent<HTMLButtonElement>) => setAnkiConnectUrlChangeTimestamp(Date.now()),\n        []\n    );\n    const handleDeckChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setDeck(e.target.value),\n        []\n    );\n    const handleDeckSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setDeck(e.target.value as string),\n        []\n    );\n    const handleNoteTypeChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setNoteType(e.target.value),\n        []\n    );\n    const handleNoteTypeSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setNoteType(e.target.value as string),\n        []\n    );\n    const handleSentenceFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSentenceField(e.target.value),\n        []\n    );\n    const handleSentenceFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setSentenceField(e.target.value as string),\n        []\n    );\n    const handleDefinitionFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setDefinitionField(e.target.value),\n        []\n    );\n    const handleDefinitionFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setDefinitionField(e.target.value as string),\n        []\n    );\n    const handleAudioFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setAudioField(e.target.value),\n        []\n    );\n    const handleAudioFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setAudioField(e.target.value as string),\n        []\n    );\n    const handleImageFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setImageField(e.target.value),\n        []\n    );\n    const handleImageFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setImageField(e.target.value as string),\n        []\n    );\n    const handleWordFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setWordField(e.target.value),\n        []\n    );\n    const handleWordFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setWordField(e.target.value as string),\n        []\n    );\n    const handleSourceFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSourceField(e.target.value),\n        []\n    );\n    const handleSourceFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setSourceField(e.target.value as string),\n        []\n    );\n    const handleUrlFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setUrlField(e.target.value),\n        []\n    );\n    const handleUrlFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setUrlField(e.target.value as string),\n        []\n    );\n    const handleAudioPaddingStart = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setAudioPaddingStart(Number(e.target.value)),\n        []\n    );\n    const handleAudioPaddingEnd = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setAudioPaddingEnd(Number(e.target.value)),\n        []\n    );\n    const handleMaxImageWidth = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setMaxImageWidth(Number(e.target.value)),\n        []\n    );\n    const handleMaxImageHeight = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setMaxImageHeight(Number(e.target.value)),\n        []\n    );\n    const handleSurroundingSubtitlesCountRadius = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) =>\n            setSurroundingSubtitlesCountRadius(Number(e.target.value)),\n        []\n    );\n    const handleSurroundingSubtitlesTimeRadius = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) =>\n            setSurroundingSubtitlesTimeRadius(Number(e.target.value)),\n        []\n    );\n    const handleSubtitleColorChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleColor(e.target.value),\n        []\n    );\n    const handleSubtitleSizeChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleSize(Number(e.target.value)),\n        []\n    );\n    const handleSubtitleOutlineColorChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleOutlineColor(e.target.value),\n        []\n    );\n    const handleSubtitleOutlineThicknessChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleOutlineThickness(Number(e.target.value)),\n        []\n    );\n    const handleSubtitleBackgroundColorChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleBackgroundColor(e.target.value),\n        []\n    );\n    const handleSubtitleBackgroundOpacityChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) =>\n            setSubtitleBackgroundOpacity(Number(e.target.value)),\n        []\n    );\n    const handleSubtitleFontFamilyChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleFontFamily(e.target.value),\n        []\n    );\n    const handleSubtitlePreviewChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitlePreview(e.target.value),\n        []\n    );\n    const handleImageBasedSubtitleScaleFactorChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) =>\n            setImageBasedSubtitleScaleFactor(Number(e.target.value)),\n        []\n    );\n    const handleAddCustomField = useCallback((customFieldName: string) => {\n        setCustomFields((oldCustomFields: { [key: string]: string }) => {\n            const newCustomFields: { [key: string]: string } = {};\n            Object.assign(newCustomFields, oldCustomFields);\n            newCustomFields[customFieldName] = '';\n            return newCustomFields;\n        });\n        setCustomFieldDialogOpen(false);\n    }, []);\n    const handleCustomFieldChange = useCallback((customFieldName: string, value: string) => {\n        setCustomFields((oldCustomFields: { [key: string]: string }) => {\n            const newCustomFields: { [key: string]: string } = {};\n            Object.assign(newCustomFields, oldCustomFields);\n            newCustomFields[customFieldName] = value;\n            return newCustomFields;\n        });\n    }, []);\n    const handleCustomFieldRemoval = useCallback(\n        (customFieldName: string) =>\n            setCustomFields((oldCustomFields: { [key: string]: string }) => {\n                const newCustomFields: { [key: string]: string } = {};\n                Object.assign(newCustomFields, oldCustomFields);\n                delete newCustomFields[customFieldName];\n                return newCustomFields;\n            }),\n        []\n    );\n    const handleTagsChange = useCallback((newTags: string[]) => {\n        setTags(newTags);\n    }, []);\n    const handlePreferMp3Change = useCallback((e: ChangeEvent<HTMLInputElement>) => setPreferMp3(e.target.checked), []);\n    const handleThemeTypeChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        if (e.target.value !== 'dark' && e.target.value !== 'light') {\n            throw new Error(`Invalid theme type ${e.target.value}`);\n        }\n\n        setThemeType(e.target.value);\n    }, []);\n    const handleCopyToClipboardOnMine = useCallback(\n        (e: ChangeEvent<HTMLInputElement>) => setCopyToClipboardOnMine(e.target.checked),\n        []\n    );\n    const handleAutoPausePreferenceChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        setAutoPausePreference(Number(e.target.value) as AutoPausePreference);\n    }, []);\n    const handleKeysChange = useCallback((keys: string, keyBindName: KeyBindName) => {\n        setKeyBindSet((keyBindSet) => {\n            const newKeyBindSet = { ...keyBindSet };\n            newKeyBindSet[keyBindName] = { keys };\n            return newKeyBindSet;\n        });\n    }, []);\n    const handleRememberSubtitleOffsetChange = useCallback(\n        (e: ChangeEvent<HTMLInputElement>) => setRememberSubtitleOffset(e.target.checked),\n        []\n    );\n    const handleAutoCopyCurrentSubtitle = useCallback(\n        (e: ChangeEvent<HTMLInputElement>) => setAutoCopyCurrentSubtitle(e.target.checked),\n        []\n    );\n    const handleSubtitleRegexFilter = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleRegexFilter(e.target.value.trim()),\n        []\n    );\n    const handleSubtitleRegexFilterTextReplacement = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) =>\n            setSubtitleRegexFilterTextReplacement(e.target.value),\n        []\n    );\n\n    const subtitlePreviewStyles = useMemo(\n        () =>\n            computeStyles({\n                subtitleColor: subtitleColor,\n                subtitleSize: subtitleSize,\n                subtitleOutlineThickness: subtitleOutlineThickness,\n                subtitleOutlineColor: subtitleOutlineColor,\n                subtitleBackgroundOpacity: subtitleBackgroundOpacity,\n                subtitleBackgroundColor: subtitleBackgroundColor,\n                subtitleFontFamily: subtitleFontFamily,\n            }),\n        [\n            subtitleColor,\n            subtitleSize,\n            subtitleOutlineThickness,\n            subtitleOutlineColor,\n            subtitleBackgroundOpacity,\n            subtitleBackgroundColor,\n            subtitleFontFamily,\n        ]\n    );\n\n    useEffect(() => {\n        let canceled = false;\n\n        const timeout = setTimeout(async () => {\n            try {\n                if (canceled) {\n                    return;\n                }\n\n                await anki.requestPermission(ankiConnectUrl);\n                setDeckNames(await anki.deckNames(ankiConnectUrl));\n                setModelNames(await anki.modelNames(ankiConnectUrl));\n                setAnkiConnectUrlError(undefined);\n            } catch (e) {\n                if (canceled) {\n                    return;\n                }\n\n                console.error(e);\n                setDeckNames(undefined);\n                setModelNames(undefined);\n\n                if (e instanceof Error) {\n                    setAnkiConnectUrlError(e.message);\n                } else if (typeof e === 'string') {\n                    setAnkiConnectUrlError(e);\n                } else {\n                    setAnkiConnectUrlError(String(e));\n                }\n            }\n        }, 1000);\n\n        return () => {\n            canceled = true;\n            clearTimeout(timeout);\n        };\n    }, [anki, ankiConnectUrl, ankiConnectUrlChangeTimestamp]);\n\n    useEffect(() => {\n        if (!noteType || ankiConnectUrlError) {\n            return undefined;\n        }\n\n        let canceled = false;\n\n        async function refreshFieldNames() {\n            try {\n                if (canceled) {\n                    return;\n                }\n\n                setFieldNames(['', ...(await anki.modelFieldNames(noteType, ankiConnectUrl))]);\n                setAnkiConnectUrlError(undefined);\n            } catch (e) {\n                if (canceled) {\n                    return;\n                }\n\n                console.error(e);\n                setFieldNames(undefined);\n\n                if (e instanceof Error) {\n                    setAnkiConnectUrlError(e.message);\n                } else if (typeof e === 'string') {\n                    setAnkiConnectUrlError(e);\n                } else {\n                    setAnkiConnectUrlError(String(e));\n                }\n            }\n        }\n\n        refreshFieldNames();\n\n        return () => {\n            canceled = true;\n        };\n    }, [anki, noteType, ankiConnectUrl, ankiConnectUrlError, ankiConnectUrlChangeTimestamp]);\n\n    const handleClose = useCallback(() => {\n        onClose({\n            ankiConnectUrl: ankiConnectUrl,\n            deck: deck,\n            noteType: noteType,\n            sentenceField: sentenceField,\n            definitionField: definitionField,\n            audioField: audioField,\n            imageField: imageField,\n            wordField: wordField,\n            sourceField: sourceField,\n            urlField: urlField,\n            tags: tags.filter((t) => t !== ''),\n            subtitleSize: Number(subtitleSize),\n            subtitleColor: subtitleColor,\n            subtitleOutlineThickness: Number(subtitleOutlineThickness),\n            subtitleOutlineColor: subtitleOutlineColor,\n            subtitleBackgroundColor: subtitleBackgroundColor,\n            subtitleBackgroundOpacity: Number(subtitleBackgroundOpacity),\n            subtitleFontFamily: subtitleFontFamily,\n            subtitlePreview: subtitlePreview,\n            imageBasedSubtitleScaleFactor: imageBasedSubtitleScaleFactor,\n            customAnkiFields: customFields,\n            preferMp3: preferMp3,\n            themeType: themeType,\n            audioPaddingStart: audioPaddingStart,\n            audioPaddingEnd: audioPaddingEnd,\n            maxImageWidth: maxImageWidth,\n            maxImageHeight: maxImageHeight,\n            surroundingSubtitlesCountRadius: surroundingSubtitlesCountRadius,\n            surroundingSubtitlesTimeRadius: surroundingSubtitlesTimeRadius,\n            copyToClipboardOnMine: copyToClipboardOnMine,\n            autoPausePreference: autoPausePreference,\n            keyBindSet: keyBindSet,\n            rememberSubtitleOffset: rememberSubtitleOffset,\n            autoCopyCurrentSubtitle: autoCopyCurrentSubtitle,\n            subtitleRegexFilter: subtitleRegexFilter,\n            subtitleRegexFilterTextReplacement: subtitleRegexFilterTextReplacement,\n        });\n    }, [\n        onClose,\n        ankiConnectUrl,\n        deck,\n        noteType,\n        sentenceField,\n        definitionField,\n        audioField,\n        imageField,\n        wordField,\n        sourceField,\n        urlField,\n        customFields,\n        tags,\n        preferMp3,\n        subtitleSize,\n        subtitleColor,\n        subtitleOutlineThickness,\n        subtitleOutlineColor,\n        subtitleBackgroundColor,\n        subtitleBackgroundOpacity,\n        subtitleFontFamily,\n        subtitlePreview,\n        imageBasedSubtitleScaleFactor,\n        themeType,\n        audioPaddingStart,\n        audioPaddingEnd,\n        maxImageWidth,\n        maxImageHeight,\n        surroundingSubtitlesCountRadius,\n        surroundingSubtitlesTimeRadius,\n        copyToClipboardOnMine,\n        autoPausePreference,\n        keyBindSet,\n        rememberSubtitleOffset,\n        autoCopyCurrentSubtitle,\n        subtitleRegexFilter,\n        subtitleRegexFilterTextReplacement,\n    ]);\n\n    const customFieldInputs = Object.keys(customFields).map((customFieldName) => {\n        return (\n            <SelectableSetting\n                key={customFieldName}\n                label={`${customFieldName} Field`}\n                value={customFields[customFieldName]}\n                selections={fieldNames!}\n                onChange={(e) => handleCustomFieldChange(customFieldName, e.target.value)}\n                onSelectionChange={(e) => handleCustomFieldChange(customFieldName, e.target.value as string)}\n                onRemoval={() => handleCustomFieldRemoval(customFieldName)}\n                removable={true}\n            />\n        );\n    });\n\n    useEffect(() => {\n        if (!scrollToId) {\n            return;\n        }\n\n        setTimeout(() => document.getElementById(scrollToId)?.scrollIntoView({ behavior: 'smooth' }), 0);\n    }, [scrollToId]);\n\n    const validRegex = regexIsValid(subtitleRegexFilter);\n\n    return (\n        <React.Fragment>\n            <CustomFieldDialog\n                open={customFieldDialogOpen}\n                existingCustomFieldNames={Object.keys(customFields)}\n                onProceed={handleAddCustomField}\n                onCancel={() => setCustomFieldDialogOpen(false)}\n            />\n            <Dialog open={open} maxWidth=\"xs\" fullWidth onClose={handleClose}>\n                <DialogTitle>Settings</DialogTitle>\n                <DialogContent>\n                    <Grid container direction=\"column\" spacing={3}>\n                        <Grid item id=\"anki-settings\">\n                            <FormLabel>Anki</FormLabel>\n                            <FormGroup className={classes.root}>\n                                <TextField\n                                    label=\"Anki Connect URL\"\n                                    value={ankiConnectUrl}\n                                    error={Boolean(ankiConnectUrlError)}\n                                    helperText={ankiConnectUrlError}\n                                    color=\"secondary\"\n                                    onChange={handleAnkiConnectUrlChange}\n                                    InputProps={{\n                                        endAdornment: (\n                                            <InputAdornment position=\"end\">\n                                                <IconButton onClick={handleRetryAnkiConnectUrl}>\n                                                    <RefreshIcon />\n                                                </IconButton>\n                                            </InputAdornment>\n                                        ),\n                                    }}\n                                />\n                                <FormHelperText>\n                                    Ensure that {window.location.protocol + '//' + window.location.hostname} is in the\n                                    webCorsOriginList in your AnkiConnect settings as in this{' '}\n                                    <Link\n                                        color=\"secondary\"\n                                        target=\"_blank\"\n                                        rel=\"noreferrer\"\n                                        href=\"https://youtu.be/Mv7fEVb6PHo?t=44\"\n                                    >\n                                        video\n                                    </Link>\n                                    .\n                                </FormHelperText>\n                                <SelectableSetting\n                                    label=\"Deck\"\n                                    value={deck}\n                                    selections={deckNames}\n                                    onChange={handleDeckChange}\n                                    onSelectionChange={handleDeckSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"Note Type\"\n                                    value={noteType}\n                                    selections={modelNames}\n                                    onChange={handleNoteTypeChange}\n                                    onSelectionChange={handleNoteTypeSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"Sentence Field\"\n                                    value={sentenceField}\n                                    selections={fieldNames}\n                                    onChange={handleSentenceFieldChange}\n                                    onSelectionChange={handleSentenceFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"Definition Field\"\n                                    value={definitionField}\n                                    selections={fieldNames}\n                                    onChange={handleDefinitionFieldChange}\n                                    onSelectionChange={handleDefinitionFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"Word Field\"\n                                    value={wordField}\n                                    selections={fieldNames}\n                                    onChange={handleWordFieldChange}\n                                    onSelectionChange={handleWordFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"Audio Field\"\n                                    value={audioField}\n                                    selections={fieldNames}\n                                    onChange={handleAudioFieldChange}\n                                    onSelectionChange={handleAudioFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"Image Field\"\n                                    value={imageField}\n                                    selections={fieldNames}\n                                    onChange={handleImageFieldChange}\n                                    onSelectionChange={handleImageFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"Source Field\"\n                                    value={sourceField}\n                                    selections={fieldNames}\n                                    onChange={handleSourceFieldChange}\n                                    onSelectionChange={handleSourceFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"URL Field\"\n                                    value={urlField}\n                                    selections={fieldNames}\n                                    onChange={handleUrlFieldChange}\n                                    onSelectionChange={handleUrlFieldSelectionChange}\n                                />\n                                {customFieldInputs}\n                                <Button\n                                    className={classes.addFieldButton}\n                                    onClick={(e) => setCustomFieldDialogOpen(true)}\n                                >\n                                    Add Custom Field\n                                </Button>\n                                <TagsTextField\n                                    label=\"Tags\"\n                                    helperText=\"Comma-separated list of strings\"\n                                    fullWidth\n                                    color=\"secondary\"\n                                    tags={tags}\n                                    onTagsChange={handleTagsChange}\n                                />\n                            </FormGroup>\n                        </Grid>\n                        <Grid item id=\"mining-settings\">\n                            <FormLabel>Mining</FormLabel>\n                            <FormGroup className={classes.root}>\n                                <FormControlLabel\n                                    control={<Switch checked={preferMp3} onChange={handlePreferMp3Change} />}\n                                    label=\"Re-encode audio as mp3 (slower)\"\n                                    labelPlacement=\"start\"\n                                    className={classes.switchLabel}\n                                />\n                                <FormControlLabel\n                                    control={\n                                        <Switch\n                                            checked={copyToClipboardOnMine}\n                                            onChange={handleCopyToClipboardOnMine}\n                                        />\n                                    }\n                                    label=\"Copy mined subtitles to clipboard\"\n                                    labelPlacement=\"start\"\n                                    className={classes.switchLabel}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label=\"Audio Padding Start\"\n                                    fullWidth\n                                    value={audioPaddingStart}\n                                    color=\"secondary\"\n                                    onChange={handleAudioPaddingStart}\n                                    inputProps={{\n                                        min: 0,\n                                        step: 1,\n                                    }}\n                                    InputProps={{\n                                        endAdornment: <InputAdornment position=\"end\">ms</InputAdornment>,\n                                    }}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label=\"Audio Padding End\"\n                                    fullWidth\n                                    value={audioPaddingEnd}\n                                    color=\"secondary\"\n                                    onChange={handleAudioPaddingEnd}\n                                    inputProps={{\n                                        min: 0,\n                                        step: 1,\n                                    }}\n                                    InputProps={{\n                                        endAdornment: <InputAdornment position=\"end\">ms</InputAdornment>,\n                                    }}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label=\"Max Image Width\"\n                                    fullWidth\n                                    value={maxImageWidth}\n                                    color=\"secondary\"\n                                    onChange={handleMaxImageWidth}\n                                    inputProps={{\n                                        min: 0,\n                                        step: 1,\n                                    }}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label=\"Max Image Height\"\n                                    fullWidth\n                                    value={maxImageHeight}\n                                    color=\"secondary\"\n                                    onChange={handleMaxImageHeight}\n                                    inputProps={{\n                                        min: 0,\n                                        step: 1,\n                                    }}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label=\"Surrounding Subtitles Count Radius\"\n                                    fullWidth\n                                    value={surroundingSubtitlesCountRadius}\n                                    color=\"secondary\"\n                                    onChange={handleSurroundingSubtitlesCountRadius}\n                                    inputProps={{\n                                        min: 1,\n                                        step: 1,\n                                    }}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label=\"Surrounding Subtitles Time Radius\"\n                                    fullWidth\n                                    value={surroundingSubtitlesTimeRadius}\n                                    color=\"secondary\"\n                                    onChange={handleSurroundingSubtitlesTimeRadius}\n                                    inputProps={{\n                                        min: 0,\n                                        step: 1,\n                                    }}\n                                    InputProps={{\n                                        endAdornment: <InputAdornment position=\"end\">ms</InputAdornment>,\n                                    }}\n                                />\n                            </FormGroup>\n                        </Grid>\n                        <Grid item id=\"misc-settings\">\n                            <FormLabel>Misc</FormLabel>\n                            <FormGroup className={classes.root}>\n                                <FormControlLabel\n                                    control={\n                                        <Switch\n                                            checked={rememberSubtitleOffset}\n                                            onChange={handleRememberSubtitleOffsetChange}\n                                        />\n                                    }\n                                    label=\"Remember subtitle offset\"\n                                    labelPlacement=\"start\"\n                                    className={classes.switchLabel}\n                                />\n                                <FormControlLabel\n                                    control={\n                                        <Switch\n                                            checked={autoCopyCurrentSubtitle}\n                                            onChange={handleAutoCopyCurrentSubtitle}\n                                        />\n                                    }\n                                    label=\"Auto-copy current subtitle to clipboard\"\n                                    labelPlacement=\"start\"\n                                    className={classes.switchLabel}\n                                />\n                                <TextField\n                                    label=\"Subtitle Regex Filter\"\n                                    fullWidth\n                                    value={subtitleRegexFilter}\n                                    color=\"secondary\"\n                                    error={!validRegex}\n                                    helperText={validRegex ? undefined : 'Invalid regular expression'}\n                                    onChange={handleSubtitleRegexFilter}\n                                />\n                                <TextField\n                                    label=\"Subtitle Regex Filter Text Replacement\"\n                                    fullWidth\n                                    value={subtitleRegexFilterTextReplacement}\n                                    color=\"secondary\"\n                                    onChange={handleSubtitleRegexFilterTextReplacement}\n                                />\n                            </FormGroup>\n                        </Grid>\n                        <Grid item id=\"auto-pause-settings\">\n                            <Grid container direction=\"row\" spacing={1}>\n                                <Grid item>\n                                    <FormLabel>Auto-pause Preference</FormLabel>\n                                </Grid>\n                                <Grid item>\n                                    <Tooltip\n                                        title=\"Does not enable auto-pause. Sets the preference for when to pause when auto-pause is\n                                    enabled.\"\n                                        placement=\"top\"\n                                    >\n                                        <InfoIcon fontSize=\"small\" />\n                                    </Tooltip>\n                                </Grid>\n                            </Grid>\n                            <RadioGroup row>\n                                <FormControlLabel\n                                    control={\n                                        <Radio\n                                            checked={autoPausePreference === AutoPausePreference.atStart}\n                                            value={AutoPausePreference.atStart}\n                                            onChange={handleAutoPausePreferenceChange}\n                                        />\n                                    }\n                                    label=\"At Subtitle Start\"\n                                />\n                                <FormControlLabel\n                                    control={\n                                        <Radio\n                                            checked={autoPausePreference === AutoPausePreference.atEnd}\n                                            value={AutoPausePreference.atEnd}\n                                            onChange={handleAutoPausePreferenceChange}\n                                        />\n                                    }\n                                    label=\"At Subtitle End\"\n                                />\n                            </RadioGroup>\n                        </Grid>\n                        <Grid item id=\"video-subtitle-appearance\">\n                            <FormLabel>Video Subtitle Appearance</FormLabel>\n                            <FormGroup className={classes.root}>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"color\"\n                                        label=\"Subtitle Color\"\n                                        fullWidth\n                                        value={subtitleColor}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleColorChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"number\"\n                                        label=\"Subtitle Size\"\n                                        fullWidth\n                                        value={subtitleSize}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleSizeChange}\n                                        inputProps={{\n                                            min: 1,\n                                            step: 1,\n                                        }}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"color\"\n                                        label=\"Subtitle Outline Color\"\n                                        fullWidth\n                                        value={subtitleOutlineColor}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleOutlineColorChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"number\"\n                                        label=\"Subtitle Outline Thickness\"\n                                        fullWidth\n                                        value={subtitleOutlineThickness}\n                                        onChange={handleSubtitleOutlineThicknessChange}\n                                        inputProps={{\n                                            min: 0,\n                                            step: 1,\n                                        }}\n                                        color=\"secondary\"\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"color\"\n                                        label=\"Subtitle Background Color\"\n                                        fullWidth\n                                        value={subtitleBackgroundColor}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleBackgroundColorChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"number\"\n                                        label=\"Subtitle Background Opacity\"\n                                        fullWidth\n                                        inputProps={{\n                                            min: 0,\n                                            max: 1,\n                                            step: 0.1,\n                                        }}\n                                        value={subtitleBackgroundOpacity}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleBackgroundOpacityChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"text\"\n                                        label=\"Subtitle Font Family\"\n                                        placeholder=\"Inherited\"\n                                        fullWidth\n                                        value={subtitleFontFamily}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleFontFamilyChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"number\"\n                                        label=\"Image-based Subtitle Scale Factor\"\n                                        placeholder=\"Inherited\"\n                                        fullWidth\n                                        inputProps={{\n                                            min: 0,\n                                            max: 1,\n                                            step: 0.1,\n                                        }}\n                                        value={imageBasedSubtitleScaleFactor}\n                                        color=\"secondary\"\n                                        onChange={handleImageBasedSubtitleScaleFactorChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitlePreview}>\n                                    <input\n                                        value={subtitlePreview}\n                                        className={classes.subtitlePreviewInput}\n                                        onChange={handleSubtitlePreviewChange}\n                                        style={subtitlePreviewStyles}\n                                    />\n                                </div>\n                            </FormGroup>\n                        </Grid>\n                        <Grid item id=\"theme-settings\">\n                            <FormLabel>Theme</FormLabel>\n                            <div>\n                                <FormControlLabel\n                                    control={\n                                        <Radio\n                                            checked={themeType === 'light'}\n                                            value=\"light\"\n                                            onChange={handleThemeTypeChange}\n                                        />\n                                    }\n                                    label=\"Light\"\n                                />\n                                <FormControlLabel\n                                    control={\n                                        <Radio\n                                            checked={themeType === 'dark'}\n                                            value=\"dark\"\n                                            onChange={handleThemeTypeChange}\n                                        />\n                                    }\n                                    label=\"Dark\"\n                                />\n                            </div>\n                        </Grid>\n                        <Grid item id=\"keyboard-shortcuts\">\n                            <FormLabel>Keyboard Shortcuts</FormLabel>\n                            <FormGroup>\n                                {Object.keys(keyBindProperties).map((key) => {\n                                    const keyBindName = key as KeyBindName;\n                                    const properties = keyBindProperties[keyBindName];\n                                    return (\n                                        <KeyBindField\n                                            key={key}\n                                            label={properties.label}\n                                            keys={\n                                                extension.installed && properties.extensionOverridden\n                                                    ? extension.extensionCommands[keyBindName] ?? ''\n                                                    : keyBindSet[keyBindName].keys\n                                            }\n                                            extensionOverridden={extension.installed && properties.extensionOverridden}\n                                            onKeysChange={(keys) => handleKeysChange(keys, keyBindName)}\n                                            onOpenExtensionShortcuts={() => extension.openShortcuts()}\n                                        />\n                                    );\n                                })}\n                            </FormGroup>\n                        </Grid>\n                    </Grid>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose}>OK</Button>\n                </DialogActions>\n            </Dialog>\n        </React.Fragment>\n    );\n}\n","export default class CachedLocalStorage {\n    private readonly _cache: { [key: string]: string | null } = {};\n\n    get(key: string): string | null {\n        let cached = this._cache[key];\n\n        if (cached === undefined) {\n            const fromStorage = localStorage.getItem(key);\n            this._cache[key] = fromStorage;\n            return fromStorage;\n        }\n\n        return cached;\n    }\n\n    set(key: string, value: string) {\n        localStorage.setItem(key, value);\n        this._cache[key] = value;\n    }\n\n    delete(key: string) {\n        delete this._cache[key];\n        localStorage.removeItem(key);\n    }\n}\n","import {\n    AsbplayerSettings,\n    AsbplayerSettingsProvider,\n    AutoPausePreference,\n    KeyBindName,\n    KeyBindSet,\n} from '@project/common';\nimport { isMacOs } from 'react-device-detect';\nimport CachedLocalStorage from './CachedLocalStorage';\n\nconst defaultAnkiConnectUrl = 'http://127.0.0.1:8765';\nconst defaultSubtitleSize = 36;\nconst defaultSubtitleColor = '#ffffff';\nconst defaultSubtitleOutlineThickness = 0;\nconst defaultSubtitleOutlineColor = '#000000';\nconst defaultSubtitleBackgroundColor = '#000000';\nconst defaultSubtitleBackgroundOpacity = 0.5;\nconst defaultSubtitleFontFamily = '';\nconst defaultSubtitlePreview = 'アあ安';\nconst defaultAudioPaddingStart = 0;\nconst defaultAudioPaddingEnd = 500;\nconst defaultMaxImageWidth = 0;\nconst defaultMaxImageHeight = 0;\nconst defaultSurroundingSubtitlesCountRadius = 2;\nconst defaultSurroundingSubtitlesTimeRadius = 10000;\nconst defaultAutoPausePreference = AutoPausePreference.atEnd;\nconst defaultKeyBindSet: KeyBindSet = {\n    togglePlay: { keys: 'space' },\n    toggleAutoPause: { keys: isMacOs ? '⇧+P' : 'shift+P' },\n    toggleCondensedPlayback: { keys: isMacOs ? '⇧+O' : 'shift+O' },\n    toggleSubtitles: { keys: 'S' },\n    toggleVideoSubtitleTrack1: { keys: '1' },\n    toggleVideoSubtitleTrack2: { keys: '2' },\n    toggleAsbplayerSubtitleTrack1: { keys: 'W+1' },\n    toggleAsbplayerSubtitleTrack2: { keys: 'W+2' },\n    seekBackward: { keys: 'A' },\n    seekForward: { keys: 'D' },\n    seekToPreviousSubtitle: { keys: 'left' },\n    seekToNextSubtitle: { keys: 'right' },\n    seekToBeginningOfCurrentSubtitle: { keys: 'down' },\n    adjustOffsetToPreviousSubtitle: { keys: isMacOs ? '⇧+left' : 'ctrl+left' },\n    adjustOffsetToNextSubtitle: { keys: isMacOs ? '⇧+right' : 'ctrl+right' },\n    decreaseOffset: { keys: isMacOs ? '⇧+⌃+right' : 'ctrl+shift+right' },\n    increaseOffset: { keys: isMacOs ? '⇧+⌃+left' : 'ctrl+shift+left' },\n    copySubtitle: { keys: isMacOs ? '⇧+⌃+Z' : 'ctrl+shift+Z' },\n    ankiExport: { keys: isMacOs ? '⇧+⌃+X' : 'ctrl+shift+X' },\n    updateLastCard: { keys: isMacOs ? '⇧+⌃+U' : 'ctrl+shift+U' },\n    decreasePlaybackRate: { keys: isMacOs ? '⇧+⌃+[' : 'ctrl+shift+[' },\n    increasePlaybackRate: { keys: isMacOs ? '⇧+⌃+]' : 'ctrl+shift+]' },\n};\nconst defaultPreferMp3 = true;\n\nconst ankiConnectUrlKey = 'ankiConnectUrl';\nconst deckKey = 'deck';\nconst noteTypeKey = 'noteType';\nconst sentenceFieldKey = 'sentenceField';\nconst definitionFieldKey = 'definitionField';\nconst audioFieldKey = 'audioField';\nconst imageFieldKey = 'imageField';\nconst wordFieldKey = 'wordField';\nconst sourceFieldKey = 'sourceField';\nconst urlFieldKey = 'urlField';\nconst customAnkiFieldsKey = 'customAnkiFields';\nconst tagsKey = 'tags';\nconst subtitleSizeKey = 'subtitleSize';\nconst subtitleColorKey = 'subtitleColor';\nconst subtitleOutlineThicknessKey = 'subtitleOutlineThickness';\nconst subtitleOutlineColorKey = 'subtitleOutlineColor';\nconst subtitleBackgroundColorKey = 'subtitleBackgroundColor';\nconst subtitleBackgroundOpacityKey = 'subtitleBackgroundOpacity';\nconst subtitleFontFamilyKey = 'subtitleFontFamily';\nconst subtitlePreviewKey = 'subtitlePreview';\nconst imageBasedSubtitleScaleFactorKey = 'imageBasedSubtitleScaleFactor';\nconst audioPaddingStartKey = 'audioPaddingStart';\nconst audioPaddingEndKey = 'audioPaddingEnd';\nconst maxImageWidthKey = 'maxImageWidth';\nconst maxImageHeightKey = 'maxImageHeight';\nconst surroundingSubtitlesCountRadiusKey = 'surroundingSubtitlesCountRadius';\nconst surroundingSubtitlesTimeRadiusKey = 'surroundingSubtitlesTimeRadius';\nconst preferMp3Key = 'preferMp3';\nconst themeTypeKey = 'themeType';\nconst copyToClipboardOnMineKey = 'copyToClipboardOnMine';\nconst autoPausePreferenceKey = 'autoPausePreference';\nconst keyBindSetKey = 'keyBindSet';\nconst rememberSubtitleOffsetKey = 'rememberSubtitleOffset';\nconst autoCopyCurrentSubtitleKey = 'autoCopyCurrentSubtitle';\nconst subtitleRegexFilterKey = 'subtitleRegexFilter';\nconst subtitleRegexFilterTextReplacementKey = 'subtitleRegexFilterTextReplacement';\n\nexport default class SettingsProvider implements AsbplayerSettingsProvider {\n    private _tags?: string[];\n    private _keyBindSet?: KeyBindSet;\n    private _storage = new CachedLocalStorage();\n\n    constructor() {\n        // Cache for use in useEffect dependencies\n        this._tags = this.tags;\n        this._keyBindSet = this.keyBindSet;\n    }\n\n    get settings(): AsbplayerSettings {\n        return {\n            ankiConnectUrl: this.ankiConnectUrl,\n            deck: this.deck,\n            noteType: this.noteType,\n            sentenceField: this.sentenceField,\n            definitionField: this.definitionField,\n            audioField: this.audioField,\n            imageField: this.imageField,\n            wordField: this.wordField,\n            urlField: this.urlField,\n            customAnkiFields: this.customAnkiFields,\n            tags: this.tags,\n            sourceField: this.sourceField,\n            subtitleSize: this.subtitleSize,\n            subtitleColor: this.subtitleColor,\n            subtitleOutlineThickness: this.subtitleOutlineThickness,\n            subtitleOutlineColor: this.subtitleOutlineColor,\n            subtitleBackgroundColor: this.subtitleBackgroundColor,\n            subtitleBackgroundOpacity: this.subtitleBackgroundOpacity,\n            subtitleFontFamily: this.subtitleFontFamily,\n            subtitlePreview: this.subtitlePreview,\n            imageBasedSubtitleScaleFactor: this.imageBasedSubtitleScaleFactor,\n            preferMp3: this.preferMp3,\n            themeType: this.themeType,\n            audioPaddingStart: this.audioPaddingStart,\n            audioPaddingEnd: this.audioPaddingEnd,\n            maxImageWidth: this.maxImageWidth,\n            maxImageHeight: this.maxImageHeight,\n            surroundingSubtitlesCountRadius: this.surroundingSubtitlesCountRadius,\n            surroundingSubtitlesTimeRadius: this.surroundingSubtitlesTimeRadius,\n            copyToClipboardOnMine: this.copyToClipboardOnMine,\n            autoPausePreference: this.autoPausePreference,\n            keyBindSet: this.keyBindSet,\n            rememberSubtitleOffset: this.rememberSubtitleOffset,\n            autoCopyCurrentSubtitle: this.autoCopyCurrentSubtitle,\n            subtitleRegexFilter: this.subtitleRegexFilter,\n            subtitleRegexFilterTextReplacement: this.subtitleRegexFilterTextReplacement,\n        };\n    }\n\n    set settings(newSettings: AsbplayerSettings) {\n        this.ankiConnectUrl = newSettings.ankiConnectUrl;\n        this.deck = newSettings.deck;\n        this.noteType = newSettings.noteType;\n        this.sentenceField = newSettings.sentenceField;\n        this.definitionField = newSettings.definitionField;\n        this.audioField = newSettings.audioField;\n        this.imageField = newSettings.imageField;\n        this.wordField = newSettings.wordField;\n        this.sourceField = newSettings.sourceField;\n        this.urlField = newSettings.urlField;\n        this.tags = newSettings.tags;\n        this.subtitleSize = newSettings.subtitleSize;\n        this.subtitleColor = newSettings.subtitleColor;\n        this.subtitleOutlineThickness = newSettings.subtitleOutlineThickness;\n        this.subtitleOutlineColor = newSettings.subtitleOutlineColor;\n        this.subtitleBackgroundColor = newSettings.subtitleBackgroundColor;\n        this.subtitleBackgroundOpacity = newSettings.subtitleBackgroundOpacity;\n        this.subtitleFontFamily = newSettings.subtitleFontFamily;\n        this.subtitlePreview = newSettings.subtitlePreview;\n        this.imageBasedSubtitleScaleFactor = newSettings.imageBasedSubtitleScaleFactor;\n        this.customAnkiFields = newSettings.customAnkiFields;\n        this.preferMp3 = newSettings.preferMp3;\n        this.themeType = newSettings.themeType;\n        this.audioPaddingStart = newSettings.audioPaddingStart;\n        this.audioPaddingEnd = newSettings.audioPaddingEnd;\n        this.maxImageWidth = newSettings.maxImageWidth;\n        this.maxImageHeight = newSettings.maxImageHeight;\n        this.surroundingSubtitlesCountRadius = newSettings.surroundingSubtitlesCountRadius;\n        this.surroundingSubtitlesTimeRadius = newSettings.surroundingSubtitlesTimeRadius;\n        this.copyToClipboardOnMine = newSettings.copyToClipboardOnMine;\n        this.autoPausePreference = newSettings.autoPausePreference;\n        this.keyBindSet = newSettings.keyBindSet;\n        this.rememberSubtitleOffset = newSettings.rememberSubtitleOffset;\n        this.autoCopyCurrentSubtitle = newSettings.autoCopyCurrentSubtitle;\n        this.subtitleRegexFilter = newSettings.subtitleRegexFilter;\n        this.subtitleRegexFilterTextReplacement = newSettings.subtitleRegexFilterTextReplacement;\n    }\n\n    get subtitleSettings() {\n        return {\n            subtitleSize: this.subtitleSize,\n            subtitleColor: this.subtitleColor,\n            subtitleOutlineThickness: this.subtitleOutlineThickness,\n            subtitleOutlineColor: this.subtitleOutlineColor,\n            subtitleBackgroundColor: this.subtitleBackgroundColor,\n            subtitleBackgroundOpacity: this.subtitleBackgroundOpacity,\n            subtitleFontFamily: this.subtitleFontFamily,\n            imageBasedSubtitleScaleFactor: this.imageBasedSubtitleScaleFactor,\n        };\n    }\n\n    get ankiSettings() {\n        return {\n            ankiConnectUrl: this.ankiConnectUrl,\n            deck: this.deck,\n            noteType: this.noteType,\n            sentenceField: this.sentenceField,\n            definitionField: this.definitionField,\n            audioField: this.audioField,\n            imageField: this.imageField,\n            wordField: this.wordField,\n            sourceField: this.sourceField,\n            urlField: this.urlField,\n            customAnkiFields: this.customAnkiFields,\n            tags: this.tags,\n            preferMp3: this.preferMp3,\n            audioPaddingStart: this.audioPaddingStart,\n            audioPaddingEnd: this.audioPaddingEnd,\n            maxImageWidth: this.maxImageWidth,\n            maxImageHeight: this.maxImageHeight,\n            surroundingSubtitlesCountRadius: this.surroundingSubtitlesCountRadius,\n            surroundingSubtitlesTimeRadius: this.surroundingSubtitlesTimeRadius,\n        };\n    }\n\n    get miscSettings() {\n        return {\n            themeType: this.themeType,\n            copyToClipboardOnMine: this.copyToClipboardOnMine,\n            autoPausePreference: this.autoPausePreference,\n            keyBindSet: this.keyBindSet,\n            rememberSubtitleOffset: this.rememberSubtitleOffset,\n            autoCopyCurrentSubtitle: this.autoCopyCurrentSubtitle,\n            subtitleRegexFilter: this.subtitleRegexFilter,\n            subtitleRegexFilterTextReplacement: this.subtitleRegexFilterTextReplacement,\n        };\n    }\n\n    _getNumberItem(key: string, defaultValue: number) {\n        const value = this._storage.get(key);\n\n        if (value === null) {\n            return defaultValue;\n        }\n\n        return Number(value);\n    }\n\n    _setOptionalItem(key: string, value?: string) {\n        if (typeof value === 'undefined') {\n            this._storage.delete(key);\n        } else {\n            this._storage.set(key, value);\n        }\n    }\n\n    get ankiConnectUrl() {\n        return this._storage.get(ankiConnectUrlKey) || defaultAnkiConnectUrl;\n    }\n\n    set ankiConnectUrl(url) {\n        this._storage.set(ankiConnectUrlKey, url);\n    }\n\n    get deck() {\n        return this._storage.get(deckKey) ?? undefined;\n    }\n\n    set deck(deck) {\n        this._setOptionalItem(deckKey, deck);\n    }\n\n    get noteType() {\n        return this._storage.get(noteTypeKey) ?? undefined;\n    }\n\n    set noteType(noteType) {\n        this._setOptionalItem(noteTypeKey, noteType);\n    }\n\n    get sentenceField() {\n        return this._storage.get(sentenceFieldKey) ?? undefined;\n    }\n\n    set sentenceField(sentenceField) {\n        this._setOptionalItem(sentenceFieldKey, sentenceField);\n    }\n\n    get definitionField() {\n        return this._storage.get(definitionFieldKey) ?? undefined;\n    }\n\n    set definitionField(definitionField) {\n        this._setOptionalItem(definitionFieldKey, definitionField);\n    }\n\n    get audioField() {\n        return this._storage.get(audioFieldKey) ?? undefined;\n    }\n\n    set audioField(audioField) {\n        this._setOptionalItem(audioFieldKey, audioField);\n    }\n\n    get imageField() {\n        return this._storage.get(imageFieldKey) ?? undefined;\n    }\n\n    set imageField(imageField) {\n        this._setOptionalItem(imageFieldKey, imageField);\n    }\n\n    get wordField() {\n        return this._storage.get(wordFieldKey) ?? undefined;\n    }\n\n    set wordField(wordField) {\n        this._setOptionalItem(wordFieldKey, wordField);\n    }\n\n    get sourceField() {\n        return this._storage.get(sourceFieldKey) ?? undefined;\n    }\n\n    set sourceField(sourceField) {\n        this._setOptionalItem(sourceFieldKey, sourceField);\n    }\n\n    get urlField() {\n        return this._storage.get(urlFieldKey) ?? undefined;\n    }\n\n    set urlField(urlField) {\n        this._setOptionalItem(urlFieldKey, urlField);\n    }\n\n    get customAnkiFields() {\n        const ankiFieldsString = this._storage.get(customAnkiFieldsKey);\n\n        if (ankiFieldsString) {\n            return JSON.parse(ankiFieldsString);\n        }\n\n        return {};\n    }\n\n    set customAnkiFields(customAnkiFields) {\n        this._storage.set(customAnkiFieldsKey, JSON.stringify(customAnkiFields));\n    }\n\n    get tags() {\n        if (typeof this._tags !== 'undefined') {\n            return this._tags;\n        }\n\n        const tagsString = this._storage.get(tagsKey);\n\n        if (tagsString) {\n            this._tags = JSON.parse(tagsString) as string[];\n            return this._tags;\n        }\n\n        return [];\n    }\n\n    set tags(tags) {\n        this._storage.set(tagsKey, JSON.stringify(tags));\n        this._tags = undefined;\n    }\n\n    get subtitleColor() {\n        return this._storage.get(subtitleColorKey) || defaultSubtitleColor;\n    }\n\n    set subtitleColor(subtitleColor) {\n        this._storage.set(subtitleColorKey, subtitleColor);\n    }\n\n    get subtitleSize() {\n        return this._getNumberItem(subtitleSizeKey, defaultSubtitleSize);\n    }\n\n    set subtitleSize(subtitleSize) {\n        this._storage.set(subtitleSizeKey, String(subtitleSize));\n    }\n\n    get subtitleOutlineColor() {\n        return this._storage.get(subtitleOutlineColorKey) || defaultSubtitleOutlineColor;\n    }\n\n    set subtitleOutlineColor(subtitleOutlineColor) {\n        this._storage.set(subtitleOutlineColorKey, subtitleOutlineColor);\n    }\n\n    get subtitleOutlineThickness() {\n        return this._getNumberItem(subtitleOutlineThicknessKey, defaultSubtitleOutlineThickness);\n    }\n\n    set subtitleOutlineThickness(subtitleOutlineThickness) {\n        this._storage.set(subtitleOutlineThicknessKey, String(subtitleOutlineThickness));\n    }\n\n    get subtitleBackgroundColor() {\n        return this._storage.get(subtitleBackgroundColorKey) || defaultSubtitleBackgroundColor;\n    }\n\n    set subtitleBackgroundColor(subtitleBackgroundColor) {\n        this._storage.set(subtitleBackgroundColorKey, subtitleBackgroundColor);\n    }\n\n    get subtitleBackgroundOpacity() {\n        return this._getNumberItem(subtitleBackgroundOpacityKey, defaultSubtitleBackgroundOpacity);\n    }\n\n    set subtitleBackgroundOpacity(subtitleBackgroundOpacity) {\n        this._storage.set(subtitleBackgroundOpacityKey, String(subtitleBackgroundOpacity));\n    }\n\n    get subtitleFontFamily() {\n        return this._storage.get(subtitleFontFamilyKey) || defaultSubtitleFontFamily;\n    }\n\n    set subtitleFontFamily(subtitleFontFamily) {\n        this._storage.set(subtitleFontFamilyKey, subtitleFontFamily);\n    }\n\n    get subtitlePreview() {\n        return this._storage.get(subtitlePreviewKey) || defaultSubtitlePreview;\n    }\n\n    set subtitlePreview(subtitlePreview) {\n        this._storage.set(subtitlePreviewKey, subtitlePreview);\n    }\n\n    get imageBasedSubtitleScaleFactor() {\n        return this._getNumberItem(imageBasedSubtitleScaleFactorKey, 1);\n    }\n\n    set imageBasedSubtitleScaleFactor(imageBasedSubtitleScaleFactor: number) {\n        this._storage.set(imageBasedSubtitleScaleFactorKey, String(imageBasedSubtitleScaleFactor));\n    }\n\n    get preferMp3(): boolean {\n        const value = this._storage.get(preferMp3Key);\n\n        if (value !== null) {\n            if (value === 'true') {\n                return true;\n            }\n\n            return false;\n        }\n\n        return defaultPreferMp3;\n    }\n\n    set preferMp3(preferMp3) {\n        this._storage.set(preferMp3Key, String(preferMp3));\n    }\n\n    get themeType() {\n        const themeType = this._storage.get(themeTypeKey) as 'dark' | 'light' | null;\n\n        if (themeType === null) {\n            return 'dark';\n        }\n\n        return themeType;\n    }\n\n    set themeType(themeType: 'dark' | 'light') {\n        this._storage.set(themeTypeKey, themeType);\n    }\n\n    get audioPaddingStart() {\n        const value = this._storage.get(audioPaddingStartKey);\n\n        if (!value) {\n            return defaultAudioPaddingStart;\n        }\n\n        return Number(value);\n    }\n\n    set audioPaddingStart(audioPaddingStart) {\n        this._storage.set(audioPaddingStartKey, String(audioPaddingStart));\n    }\n\n    get audioPaddingEnd() {\n        return this._getNumberItem(audioPaddingEndKey, defaultAudioPaddingEnd);\n    }\n\n    set audioPaddingEnd(audioPaddingEnd) {\n        this._storage.set(audioPaddingEndKey, String(audioPaddingEnd));\n    }\n\n    get maxImageWidth() {\n        const value = this._storage.get(maxImageWidthKey);\n\n        if (!value) {\n            return defaultMaxImageWidth;\n        }\n\n        return Number(value);\n    }\n\n    set maxImageWidth(maxImageWidth) {\n        this._storage.set(maxImageWidthKey, String(maxImageWidth));\n    }\n\n    get maxImageHeight() {\n        return this._getNumberItem(maxImageHeightKey, defaultMaxImageHeight);\n    }\n\n    set maxImageHeight(maxImageHeight) {\n        this._storage.set(maxImageHeightKey, String(maxImageHeight));\n    }\n\n    get surroundingSubtitlesCountRadius() {\n        return this._getNumberItem(surroundingSubtitlesCountRadiusKey, defaultSurroundingSubtitlesCountRadius);\n    }\n\n    set surroundingSubtitlesCountRadius(surroundingSubtitlesCountRadius) {\n        this._storage.set(surroundingSubtitlesCountRadiusKey, String(surroundingSubtitlesCountRadius));\n    }\n\n    get surroundingSubtitlesTimeRadius() {\n        return this._getNumberItem(surroundingSubtitlesTimeRadiusKey, defaultSurroundingSubtitlesTimeRadius);\n    }\n\n    set surroundingSubtitlesTimeRadius(surroundingSubtitlesTimeRadius) {\n        this._storage.set(surroundingSubtitlesTimeRadiusKey, String(surroundingSubtitlesTimeRadius));\n    }\n\n    get copyToClipboardOnMine() {\n        return this._storage.get(copyToClipboardOnMineKey) === 'true' || false;\n    }\n\n    set copyToClipboardOnMine(copyToClipboardOnMine) {\n        this._storage.set(copyToClipboardOnMineKey, String(copyToClipboardOnMine));\n    }\n\n    get autoPausePreference() {\n        return this._getNumberItem(autoPausePreferenceKey, defaultAutoPausePreference);\n    }\n\n    set autoPausePreference(autoPausePreference) {\n        this._storage.set(autoPausePreferenceKey, String(autoPausePreference));\n    }\n\n    get keyBindSet() {\n        if (this._keyBindSet !== undefined) {\n            return this._keyBindSet;\n        }\n\n        let serialized = this._storage.get(keyBindSetKey);\n\n        if (serialized === null) {\n            this._keyBindSet = defaultKeyBindSet;\n            return defaultKeyBindSet;\n        }\n\n        const keyBindSet = JSON.parse(serialized);\n\n        for (const key of Object.keys(defaultKeyBindSet)) {\n            const keyBindName = key as KeyBindName;\n\n            if (keyBindSet[keyBindName] === undefined) {\n                keyBindSet[keyBindName] = defaultKeyBindSet[keyBindName];\n            }\n        }\n\n        this._keyBindSet = keyBindSet;\n        return keyBindSet as KeyBindSet;\n    }\n\n    set keyBindSet(keyBindSet) {\n        this._storage.set(keyBindSetKey, JSON.stringify(keyBindSet));\n        this._keyBindSet = undefined;\n    }\n\n    get rememberSubtitleOffset() {\n        return this._storage.get(rememberSubtitleOffsetKey) === 'true' || false;\n    }\n\n    set rememberSubtitleOffset(rememberSubtitleOffset) {\n        this._storage.set(rememberSubtitleOffsetKey, String(rememberSubtitleOffset));\n    }\n\n    get autoCopyCurrentSubtitle() {\n        return this._storage.get(autoCopyCurrentSubtitleKey) === 'true' || false;\n    }\n\n    set autoCopyCurrentSubtitle(autoCopyCurrentSubtitle) {\n        this._storage.set(autoCopyCurrentSubtitleKey, String(autoCopyCurrentSubtitle));\n    }\n\n    get subtitleRegexFilter() {\n        return this._storage.get(subtitleRegexFilterKey) ?? '';\n    }\n\n    set subtitleRegexFilter(subtitleRegexFilter: string) {\n        this._storage.set(subtitleRegexFilterKey, subtitleRegexFilter);\n    }\n\n    get subtitleRegexFilterTextReplacement() {\n        return this._storage.get(subtitleRegexFilterTextReplacementKey) ?? '';\n    }\n\n    set subtitleRegexFilterTextReplacement(subtitleRegexFilterTextReplacement: string) {\n        this._storage.set(subtitleRegexFilterTextReplacementKey, subtitleRegexFilterTextReplacement);\n    }\n}\n","import {\n    AlertMessage,\n    AnkiDialogRequestFromVideoMessage,\n    AnkiSettings,\n    AnkiSettingsToVideoMessage,\n    AppBarToggleMessageToVideoMessage,\n    AudioTrackModel,\n    AudioTrackSelectedFromVideoMessage,\n    AudioTrackSelectedToVideoMessage,\n    CopyMessage,\n    CurrentTimeToVideoMessage,\n    FullscreenToggleMessageToVideoMessage,\n    HideSubtitlePlayerToggleToVideoMessage,\n    MiscSettings,\n    MiscSettingsToVideoMessage,\n    OffsetFromVideoMessage,\n    OffsetToVideoMessage,\n    PauseFromVideoMessage,\n    PlaybackRateFromVideoMessage,\n    PlaybackRateToVideoMessage,\n    PlayFromVideoMessage,\n    PlayMode,\n    PlayModeMessage,\n    PostMineAction,\n    ReadyFromVideoMessage,\n    ReadyStateFromVideoMessage,\n    ReadyToVideoMessage,\n    SubtitleModel,\n    SubtitleSettings,\n    SubtitleSettingsToVideoMessage,\n    SubtitlesToVideoMessage,\n    ToggleSubtitleTrackInListFromVideoMessage,\n} from '@project/common';\n\nexport default class PlayerChannel {\n    private channel?: BroadcastChannel;\n    private readyCallbacks: ((duration: number, videoFileName?: string) => void)[];\n    private playCallbacks: (() => void)[];\n    private pauseCallbacks: (() => void)[];\n    private currentTimeCallbacks: ((currentTime: number) => void)[];\n    private audioTrackSelectedCallbacks: ((id: string) => void)[];\n    private closeCallbacks: (() => void)[];\n    private subtitlesCallbacks: ((subtitles: SubtitleModel[]) => void)[];\n    private offsetCallbacks: ((offset: number) => void)[];\n    private playbackRateCallbacks: ((playbackRate: number) => void)[];\n    private playModeCallbacks: ((playMode: PlayMode) => void)[];\n    private hideSubtitlePlayerToggleCallbacks: ((hidden: boolean) => void)[];\n    private appBarToggleCallbacks: ((hidden: boolean) => void)[];\n    private fullscreenToggleCallbacks: ((hidden: boolean) => void)[];\n    private subtitleSettingsCallbacks: ((subtitleSettings: SubtitleSettings) => void)[];\n    private miscSettingsCallbacks: ((miscSettings: MiscSettings) => void)[];\n    private ankiSettingsCallbacks: ((ankiSettings: AnkiSettings) => void)[];\n    private alertCallbacks: ((message: string, severity: string) => void)[];\n\n    constructor(channel: string) {\n        this.channel = new BroadcastChannel(channel);\n        this.playCallbacks = [];\n        this.pauseCallbacks = [];\n        this.currentTimeCallbacks = [];\n        this.audioTrackSelectedCallbacks = [];\n        this.closeCallbacks = [];\n        this.readyCallbacks = [];\n        this.subtitlesCallbacks = [];\n        this.offsetCallbacks = [];\n        this.playbackRateCallbacks = [];\n        this.playModeCallbacks = [];\n        this.hideSubtitlePlayerToggleCallbacks = [];\n        this.appBarToggleCallbacks = [];\n        this.fullscreenToggleCallbacks = [];\n        this.subtitleSettingsCallbacks = [];\n        this.miscSettingsCallbacks = [];\n        this.ankiSettingsCallbacks = [];\n        this.alertCallbacks = [];\n\n        const that = this;\n\n        this.channel.onmessage = (event) => {\n            switch (event.data.command) {\n                case 'init':\n                    // ignore, this is for the chrome extension\n                    break;\n                case 'ready':\n                    const readyMessage = event.data as ReadyToVideoMessage;\n\n                    for (let callback of that.readyCallbacks) {\n                        callback(readyMessage.duration, readyMessage.videoFileName);\n                    }\n                    break;\n                case 'play':\n                    for (let callback of that.playCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'pause':\n                    for (let callback of that.pauseCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'currentTime':\n                    const currentTimeMessage = event.data as CurrentTimeToVideoMessage;\n\n                    for (let callback of that.currentTimeCallbacks) {\n                        callback(currentTimeMessage.value);\n                    }\n                    break;\n                case 'audioTrackSelected':\n                    const audioTrackSelectedMessage = event.data as AudioTrackSelectedToVideoMessage;\n\n                    for (let callback of that.audioTrackSelectedCallbacks) {\n                        callback(audioTrackSelectedMessage.id);\n                    }\n                    break;\n                case 'close':\n                    for (let callback of that.closeCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'subtitles':\n                    const subtitlesMessage = event.data as SubtitlesToVideoMessage;\n\n                    for (let callback of that.subtitlesCallbacks) {\n                        callback(subtitlesMessage.value);\n                    }\n                    break;\n                case 'offset':\n                    const offsetMessage = event.data as OffsetToVideoMessage;\n\n                    for (const callback of that.offsetCallbacks) {\n                        callback(offsetMessage.value);\n                    }\n                    break;\n                case 'playbackRate':\n                    const playbackRateMessage = event.data as PlaybackRateToVideoMessage;\n\n                    for (const callback of that.playbackRateCallbacks) {\n                        callback(playbackRateMessage.value);\n                    }\n                    break;\n                case 'subtitleSettings':\n                    const subtitleSettingsMessage = event.data as SubtitleSettingsToVideoMessage;\n\n                    for (let callback of that.subtitleSettingsCallbacks) {\n                        callback(subtitleSettingsMessage.value);\n                    }\n                    break;\n                case 'playMode':\n                    const playModeMessage = event.data as PlayModeMessage;\n\n                    for (let callback of that.playModeCallbacks) {\n                        callback(playModeMessage.playMode);\n                    }\n                    break;\n                case 'hideSubtitlePlayerToggle':\n                    const hideSubtitlePlayerToggleMessage = event.data as HideSubtitlePlayerToggleToVideoMessage;\n\n                    for (let callback of that.hideSubtitlePlayerToggleCallbacks) {\n                        callback(hideSubtitlePlayerToggleMessage.value);\n                    }\n                    break;\n                case 'appBarToggle':\n                    const appBarToggleMessage = event.data as AppBarToggleMessageToVideoMessage;\n\n                    for (let callback of that.appBarToggleCallbacks) {\n                        callback(appBarToggleMessage.value);\n                    }\n                    break;\n                case 'fullscreenToggle':\n                    const fullscreenToggleMessage = event.data as FullscreenToggleMessageToVideoMessage;\n\n                    for (const callback of that.fullscreenToggleCallbacks) {\n                        callback(fullscreenToggleMessage.value);\n                    }\n                    break;\n                case 'ankiSettings':\n                    const ankiSettingsMessage = event.data as AnkiSettingsToVideoMessage;\n\n                    for (let callback of that.ankiSettingsCallbacks) {\n                        callback(ankiSettingsMessage.value);\n                    }\n                    break;\n                case 'miscSettings':\n                    const miscSettingsMessage = event.data as MiscSettingsToVideoMessage;\n\n                    for (let callback of that.miscSettingsCallbacks) {\n                        callback(miscSettingsMessage.value);\n                    }\n                    break;\n                case 'alert':\n                    const alertMessage = event.data as AlertMessage;\n\n                    for (const callback of that.alertCallbacks) {\n                        callback(alertMessage.message, alertMessage.severity);\n                    }\n                    break;\n                default:\n                    console.error('Unrecognized event ' + event.data.command);\n            }\n        };\n    }\n\n    set currentTime(value: number) {\n        this.channel?.postMessage({ command: 'currentTime', value: value, echo: true });\n    }\n\n    onPlay(callback: () => void) {\n        this.playCallbacks.push(callback);\n    }\n\n    onPause(callback: () => void) {\n        this.pauseCallbacks.push(callback);\n    }\n\n    onCurrentTime(callback: (currentTime: number) => void) {\n        this.currentTimeCallbacks.push(callback);\n    }\n\n    onAudioTrackSelected(callback: (id: string) => void) {\n        this.audioTrackSelectedCallbacks.push(callback);\n    }\n\n    onClose(callback: () => void) {\n        this.closeCallbacks.push(callback);\n    }\n\n    onReady(callback: (duration: number, videoFileName?: string) => void) {\n        this.readyCallbacks.push(callback);\n    }\n\n    onSubtitles(callback: (subtitles: SubtitleModel[]) => void) {\n        this.subtitlesCallbacks.push(callback);\n    }\n\n    onOffset(callback: (offset: number) => void) {\n        this.offsetCallbacks.push(callback);\n    }\n\n    onPlaybackRate(callback: (playbackRate: number) => void) {\n        this.playbackRateCallbacks.push(callback);\n    }\n\n    onPlayMode(callback: (playMode: PlayMode) => void) {\n        this.playModeCallbacks.push(callback);\n    }\n\n    onHideSubtitlePlayerToggle(callback: (hidden: boolean) => void) {\n        this.hideSubtitlePlayerToggleCallbacks.push(callback);\n    }\n\n    onAppBarToggle(callback: (hidden: boolean) => void) {\n        this.appBarToggleCallbacks.push(callback);\n    }\n\n    onFullscreenToggle(callback: (fullscreen: boolean) => void) {\n        this.fullscreenToggleCallbacks.push(callback);\n    }\n\n    onSubtitleSettings(callback: (subtitleSettings: SubtitleSettings) => void) {\n        this.subtitleSettingsCallbacks.push(callback);\n    }\n\n    onMiscSettings(callback: (miscSettings: MiscSettings) => void) {\n        this.miscSettingsCallbacks.push(callback);\n    }\n\n    onAnkiSettings(callback: (ankiSettings: AnkiSettings) => void) {\n        this.ankiSettingsCallbacks.push(callback);\n    }\n\n    onAlert(callback: (message: string, severity: string) => void) {\n        this.alertCallbacks.push(callback);\n    }\n\n    ready(\n        duration: number,\n        paused: boolean,\n        playbackRate: number,\n        audioTracks: AudioTrackModel[] | undefined,\n        selectedAudioTrack: string | undefined\n    ) {\n        const message: ReadyFromVideoMessage = {\n            command: 'ready',\n            duration: duration,\n            paused: paused,\n            currentTime: 0,\n            audioTracks: audioTracks,\n            selectedAudioTrack: selectedAudioTrack,\n            playbackRate: playbackRate,\n        };\n\n        this.channel?.postMessage(message);\n    }\n\n    readyState(readyState: number) {\n        const message: ReadyStateFromVideoMessage = { command: 'readyState', value: readyState };\n        this.channel?.postMessage(message);\n    }\n\n    play() {\n        const message: PlayFromVideoMessage = { command: 'play', echo: true };\n        this.channel?.postMessage(message);\n    }\n\n    pause() {\n        const message: PauseFromVideoMessage = { command: 'pause', echo: true };\n        this.channel?.postMessage(message);\n    }\n\n    audioTrackSelected(id: string) {\n        const message: AudioTrackSelectedFromVideoMessage = { command: 'audioTrackSelected', id: id };\n        this.channel?.postMessage(message);\n    }\n\n    offset(offset: number) {\n        const message: OffsetFromVideoMessage = { command: 'offset', value: offset };\n        this.channel?.postMessage(message);\n    }\n\n    playbackRate(playbackRate: number) {\n        const message: PlaybackRateFromVideoMessage = { command: 'playbackRate', value: playbackRate, echo: true };\n        this.channel?.postMessage(message);\n    }\n\n    popOutToggle() {\n        this.channel?.postMessage({ command: 'popOutToggle' });\n    }\n\n    copy(\n        subtitle: SubtitleModel,\n        surroundingSubtitles: SubtitleModel[],\n        postMineAction: PostMineAction,\n        preventDuplicate?: boolean\n    ) {\n        const message: CopyMessage = {\n            command: 'copy',\n            subtitle: subtitle,\n            surroundingSubtitles: surroundingSubtitles,\n            preventDuplicate: preventDuplicate,\n            postMineAction: postMineAction,\n        };\n\n        this.channel?.postMessage(message);\n    }\n\n    playMode(playMode: PlayMode) {\n        this.channel?.postMessage({ command: 'playMode', playMode: playMode });\n    }\n\n    hideSubtitlePlayerToggle() {\n        this.channel?.postMessage({ command: 'hideSubtitlePlayerToggle' });\n    }\n\n    appBarToggle() {\n        this.channel?.postMessage({ command: 'appBarToggle' });\n    }\n\n    fullscreenToggle() {\n        this.channel?.postMessage({ command: 'fullscreenToggle' });\n    }\n\n    ankiDialogRequest(forwardToVideo: boolean) {\n        const message: AnkiDialogRequestFromVideoMessage = {\n            command: 'ankiDialogRequest',\n        };\n        this.channel?.postMessage(message);\n    }\n\n    toggleSubtitleTrackInList(track: number) {\n        const message: ToggleSubtitleTrackInListFromVideoMessage = {\n            command: 'toggleSubtitleTrackInList',\n            track: track,\n        };\n        this.channel?.postMessage(message);\n    }\n\n    close() {\n        if (this.channel) {\n            this.channel.postMessage({ command: 'exit' });\n            this.channel.close();\n            this.channel = undefined;\n            this.playCallbacks = [];\n            this.pauseCallbacks = [];\n            this.currentTimeCallbacks = [];\n            this.audioTrackSelectedCallbacks = [];\n            this.closeCallbacks = [];\n            this.readyCallbacks = [];\n            this.subtitlesCallbacks = [];\n            this.offsetCallbacks = [];\n            this.playbackRateCallbacks = [];\n            this.playModeCallbacks = [];\n            this.hideSubtitlePlayerToggleCallbacks = [];\n            this.appBarToggleCallbacks = [];\n            this.fullscreenToggleCallbacks = [];\n            this.subtitleSettingsCallbacks = [];\n            this.miscSettingsCallbacks = [];\n            this.ankiSettingsCallbacks = [];\n            this.alertCallbacks = [];\n        }\n    }\n}\n","import { CopySubtitleMessage, DefaultKeyBinder, KeyBinder, PostMineAction, SubtitleModel } from '@project/common';\nimport ChromeExtension, { ExtensionMessage } from './ChromeExtension';\n\nexport default class AppKeyBinder implements KeyBinder {\n    private readonly defaultKeyBinder: DefaultKeyBinder;\n    private readonly extension: ChromeExtension;\n    private readonly copyHandlers: ((event: KeyboardEvent) => void)[] = [];\n    private readonly ankiExportHandlers: ((event: KeyboardEvent) => void)[] = [];\n    private readonly updateLastCardHandlers: ((event: KeyboardEvent) => void)[] = [];\n    private readonly onExtensionMessage: (message: ExtensionMessage) => void;\n\n    constructor(keyBinder: DefaultKeyBinder, extension: ChromeExtension) {\n        this.defaultKeyBinder = keyBinder;\n        this.extension = extension;\n\n        this.onExtensionMessage = (message: ExtensionMessage) => {\n            if (message.data.command === 'copy-subtitle') {\n                const command = message.data as CopySubtitleMessage;\n                let handlers: ((event: KeyboardEvent) => void)[] | undefined;\n\n                switch (command.postMineAction) {\n                    case PostMineAction.none:\n                        handlers = this.copyHandlers;\n                        break;\n                    case PostMineAction.showAnkiDialog:\n                        handlers = this.ankiExportHandlers;\n                        break;\n                    case PostMineAction.updateLastCard:\n                        handlers = this.updateLastCardHandlers;\n                        break;\n                    default:\n                        console.error('Unknown post mine action ' + command.postMineAction);\n                }\n\n                for (const h of handlers!) {\n                    h(new KeyboardEvent('mock'));\n                }\n            }\n        };\n        extension.subscribe(this.onExtensionMessage);\n    }\n\n    bindCopy<T extends SubtitleModel = SubtitleModel>(\n        onCopy: (event: KeyboardEvent, subtitle: T) => void,\n        disabledGetter: () => boolean,\n        subtitleGetter: () => T | undefined,\n        useCapture?: boolean | undefined\n    ): () => void {\n        if (this.extension.installed) {\n            const handler = this.defaultKeyBinder.copyHandler(onCopy, disabledGetter, subtitleGetter);\n            this.copyHandlers.push(handler);\n            return () => {\n                this._remove(handler, this.copyHandlers);\n            };\n        }\n\n        return this.defaultKeyBinder.bindCopy(onCopy, disabledGetter, subtitleGetter, useCapture);\n    }\n\n    bindAnkiExport(\n        onAnkiExport: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        if (this.extension.installed) {\n            const handler = this.defaultKeyBinder.ankiExportHandler(onAnkiExport, disabledGetter);\n            this.ankiExportHandlers.push(handler);\n            return () => {\n                this._remove(handler, this.ankiExportHandlers);\n            };\n        }\n\n        return this.defaultKeyBinder.bindAnkiExport(onAnkiExport, disabledGetter, useCapture);\n    }\n\n    bindUpdateLastCard(\n        onUpdateLastCard: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        if (this.extension.installed) {\n            const handler = this.defaultKeyBinder.updateLastCardHandler(onUpdateLastCard, disabledGetter);\n            this.updateLastCardHandlers.push(handler);\n            return () => {\n                this._remove(handler, this.updateLastCardHandlers);\n            };\n        }\n\n        return this.defaultKeyBinder.bindUpdateLastCard(onUpdateLastCard, disabledGetter, useCapture);\n    }\n\n    private _remove(callback: (event: KeyboardEvent) => void, list: ((event: KeyboardEvent) => void)[]) {\n        for (let i = list.length - 1; i >= 0; --i) {\n            if (callback === list[i]) {\n                list.splice(i, 1);\n                break;\n            }\n        }\n    }\n\n    bindSeekToSubtitle(\n        onSeekToSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindSeekToSubtitle(\n            onSeekToSubtitle,\n            disabledGetter,\n            timeGetter,\n            subtitlesGetter,\n            useCapture\n        );\n    }\n\n    bindSeekToBeginningOfCurrentSubtitle(\n        onSeekToBeginningOfCurrentSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindSeekToBeginningOfCurrentSubtitle(\n            onSeekToBeginningOfCurrentSubtitle,\n            disabledGetter,\n            timeGetter,\n            subtitlesGetter,\n            useCapture\n        );\n    }\n\n    bindSeekBackwardOrForward(\n        onSeekBackwardOrForward: (event: KeyboardEvent, forward: boolean) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindSeekBackwardOrForward(onSeekBackwardOrForward, disabledGetter, useCapture);\n    }\n\n    bindOffsetToSubtitle(\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindOffsetToSubtitle(\n            onOffsetChange,\n            disabledGetter,\n            timeGetter,\n            subtitlesGetter,\n            useCapture\n        );\n    }\n\n    bindAdjustOffset(\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\n        disabledGetter: () => boolean,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindAdjustOffset(onOffsetChange, disabledGetter, subtitlesGetter, useCapture);\n    }\n\n    bindAdjustPlaybackRate(\n        onAdjustPlaybackRate: (event: KeyboardEvent, increase: boolean) => void,\n        disabledGetter: () => boolean,\n        useCapture = false\n    ) {\n        return this.defaultKeyBinder.bindAdjustPlaybackRate(onAdjustPlaybackRate, disabledGetter, useCapture);\n    }\n\n    bindToggleSubtitles(\n        onToggleSubtitles: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindToggleSubtitles(onToggleSubtitles, disabledGetter, useCapture);\n    }\n\n    bindToggleSubtitleTrackInVideo(\n        onToggleSubtitleTrack: (event: KeyboardEvent, extra: any) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindToggleSubtitleTrackInVideo(onToggleSubtitleTrack, disabledGetter, useCapture);\n    }\n\n    bindToggleSubtitleTrackInList(\n        onToggleSubtitleTrackInList: (event: KeyboardEvent, extra: any) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindToggleSubtitleTrackInList(\n            onToggleSubtitleTrackInList,\n            disabledGetter,\n            useCapture\n        );\n    }\n\n    bindPlay(\n        onPlay: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindPlay(onPlay, disabledGetter, useCapture);\n    }\n\n    bindAutoPause(\n        onAutoPause: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindAutoPause(onAutoPause, disabledGetter, useCapture);\n    }\n\n    bindCondensedPlayback(\n        onCondensedPlayback: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindCondensedPlayback(onCondensedPlayback, disabledGetter, useCapture);\n    }\n}\n","import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { isMobile } from 'react-device-detect';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useWindowSize } from '../hooks/useWindowSize';\nimport { arrayEquals, computeStyles } from '../services/util';\nimport {\n    surroundingSubtitles,\n    mockSurroundingSubtitles,\n    SubtitleModel,\n    AudioTrackModel,\n    PostMineAction,\n    PlayMode,\n    MiscSettings,\n    SubtitleSettings,\n    DefaultKeyBinder,\n    AnkiSettings,\n    SubtitleCollection,\n    AutoPausePreference,\n    AutoPauseContext,\n} from '@project/common';\nimport { SubtitleTextImage } from '@project/common/components';\nimport Clock from '../services/Clock';\nimport Controls, { Point } from './Controls';\nimport PlayerChannel from '../services/PlayerChannel';\nimport SettingsProvider from '../services/SettingsProvider';\nimport AppKeyBinder from '../services/AppKeyBinder';\nimport ChromeExtension from '../services/ChromeExtension';\nimport PlaybackPreferences from '../services/PlaybackPreferences';\nimport { AnkiDialogFinishedRequest } from './Player';\nimport { Color } from '@material-ui/lab/Alert';\nimport Alert from './Alert';\n\ninterface ExperimentalHTMLVideoElement extends HTMLVideoElement {\n    readonly audioTracks: any;\n}\n\nconst useStyles = makeStyles({\n    root: {\n        position: 'relative',\n        backgroundColor: 'black',\n        height: '100vh',\n        overflow: 'hidden',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    video: {\n        margin: 'auto',\n    },\n    cursorHidden: {\n        cursor: 'none',\n    },\n    subtitleContainer: {\n        position: 'absolute',\n        paddingLeft: 20,\n        paddingRight: 20,\n        bottom: 100,\n        textAlign: 'center',\n        whiteSpace: 'pre-wrap',\n        lineHeight: 'normal',\n    },\n});\n\nfunction notifyReady(\n    element: ExperimentalHTMLVideoElement,\n    playerChannel: PlayerChannel,\n    setAudioTracks: React.Dispatch<React.SetStateAction<AudioTrackModel[] | undefined>>,\n    setSelectedAudioTrack: React.Dispatch<React.SetStateAction<string | undefined>>\n) {\n    if (window.outerWidth && element.videoWidth > 0 && element.videoHeight > 0) {\n        const availWidth = window.screen.availWidth - (window.outerWidth - window.innerWidth);\n        const availHeight = window.screen.availHeight - (window.outerHeight - window.innerHeight);\n        const resizeRatio = Math.min(1, Math.min(availWidth / element.videoWidth, availHeight / element.videoHeight));\n\n        window.resizeTo(\n            resizeRatio * element.videoWidth + (window.outerWidth - window.innerWidth),\n            resizeRatio * element.videoHeight + (window.outerHeight - window.innerHeight)\n        );\n    }\n\n    let tracks: AudioTrackModel[] | undefined;\n    let selectedTrack: string | undefined;\n\n    if (element.audioTracks) {\n        tracks = [];\n\n        for (let t of element.audioTracks) {\n            tracks.push({\n                id: t.id,\n                label: t.label,\n                language: t.language,\n            });\n\n            if (t.enabled) {\n                selectedTrack = t.id;\n            }\n        }\n    } else {\n        tracks = undefined;\n        selectedTrack = undefined;\n    }\n\n    setAudioTracks(tracks);\n    setSelectedAudioTrack(selectedTrack);\n    playerChannel.ready(element.duration, element.paused, element.playbackRate, tracks, selectedTrack);\n}\n\nfunction errorMessage(element: HTMLVideoElement) {\n    let error;\n    switch (element.error?.code) {\n        case 1:\n            error = 'Aborted';\n            break;\n        case 2:\n            error = 'Network error';\n            break;\n        case 3:\n            error = 'Decoding error';\n            break;\n        case 4:\n            error = 'Source not supported';\n            break;\n        default:\n            error = 'Unknown error';\n            break;\n    }\n\n    return error + ': ' + (element.error?.message || '<details missing>');\n}\n\ninterface Props {\n    settingsProvider: SettingsProvider;\n    playbackPreferences: PlaybackPreferences;\n    extension: ChromeExtension;\n    videoFile: string;\n    channel: string;\n    popOut: boolean;\n    ankiDialogFinishedRequest: AnkiDialogFinishedRequest;\n    onAnkiDialogRequest: (\n        videoFileUrl: string,\n        videoFileName: string,\n        selectedAudioTrack: string | undefined,\n        playbackRate: number,\n        subtitle: SubtitleModel,\n        surroundingSubtitles: SubtitleModel[],\n        timestamp: number\n    ) => void;\n    onError: (error: string) => void;\n    onPlayModeChangedViaBind: (oldPlayMode: PlayMode, newPlayMode: PlayMode) => void;\n}\n\ninterface IndexedSubtitleModel extends SubtitleModel {\n    index: number;\n}\n\nexport default function VideoPlayer({\n    settingsProvider,\n    playbackPreferences,\n    extension,\n    videoFile,\n    channel,\n    popOut,\n    ankiDialogFinishedRequest,\n    onAnkiDialogRequest,\n    onError,\n    onPlayModeChangedViaBind,\n}: Props) {\n    const classes = useStyles();\n    const poppingInRef = useRef<boolean>();\n    const videoRef = useRef<ExperimentalHTMLVideoElement>();\n    const [windowWidth, windowHeight] = useWindowSize(true);\n    if (videoRef.current) {\n        videoRef.current.width = windowWidth;\n        videoRef.current.height = windowHeight;\n    }\n    const playerChannel = useMemo(() => new PlayerChannel(channel), [channel]);\n    const [playing, setPlaying] = useState<boolean>(false);\n    const [fullscreen, setFullscreen] = useState<boolean>(false);\n    const playingRef = useRef<boolean>();\n    playingRef.current = playing;\n    const [length, setLength] = useState<number>(0);\n    const [videoFileName, setVideoFileName] = useState<string>();\n    const [offset, setOffset] = useState<number>(0);\n    const [playbackRate, setPlaybackRate] = useState<number>(1);\n    const [audioTracks, setAudioTracks] = useState<AudioTrackModel[]>();\n    const [selectedAudioTrack, setSelectedAudioTrack] = useState<string>();\n    const [, setResumeOnFinishedAnkiDialogRequest] = useState<boolean>(false);\n    const [subtitles, setSubtitles] = useState<IndexedSubtitleModel[]>([]);\n    const subtitleCollection = useMemo<SubtitleCollection<IndexedSubtitleModel>>(\n        () =>\n            new SubtitleCollection<IndexedSubtitleModel>(subtitles, {\n                returnLastShown: false,\n                showingCheckRadiusMs: 150,\n            }),\n        [subtitles]\n    );\n    const [showSubtitles, setShowSubtitles] = useState<IndexedSubtitleModel[]>([]);\n    const [subtitlesEnabled, setSubtitlesEnabled] = useState(true);\n    const [disabledSubtitleTracks, setDisabledSubtitleTracks] = useState<{ [index: number]: boolean }>({});\n    const [playMode, setPlayMode] = useState<PlayMode>(PlayMode.normal);\n    const [subtitlePlayerHidden, setSubtitlePlayerHidden] = useState<boolean>(false);\n    const [appBarHidden, setAppBarHidden] = useState<boolean>(playbackPreferences.theaterMode);\n    const showSubtitlesRef = useRef<IndexedSubtitleModel[]>([]);\n    showSubtitlesRef.current = showSubtitles;\n    const clock = useMemo<Clock>(() => new Clock(), []);\n    const mousePositionRef = useRef<Point>({ x: 0, y: 0 });\n    const [showCursor, setShowCursor] = useState<boolean>(false);\n    const lastMouseMovementTimestamp = useRef<number>(0);\n    const containerRef = useRef<HTMLDivElement>(null);\n    const [miscSettings, setMiscSettings] = useState<MiscSettings>(settingsProvider.miscSettings);\n    const [subtitleSettings, setSubtitleSettings] = useState<SubtitleSettings>(settingsProvider.subtitleSettings);\n    const [ankiSettings, setAnkiSettings] = useState<AnkiSettings>(settingsProvider.ankiSettings);\n    const [alertOpen, setAlertOpen] = useState<boolean>(false);\n    const [alertMessage, setAlertMessage] = useState<string>('');\n    const [alertSeverity, setAlertSeverity] = useState<Color>('info');\n    const autoPauseContext = useMemo(() => {\n        const context = new AutoPauseContext();\n        context.onStartedShowing = () => {\n            if (playMode !== PlayMode.autoPause || miscSettings.autoPausePreference !== AutoPausePreference.atStart) {\n                return;\n            }\n\n            playerChannel.pause();\n        };\n        context.onWillStopShowing = () => {\n            if (playMode !== PlayMode.autoPause || miscSettings.autoPausePreference !== AutoPausePreference.atEnd) {\n                return;\n            }\n\n            playerChannel.pause();\n        };\n        return context;\n    }, [playerChannel, miscSettings, playMode]);\n    const autoPauseContextRef = useRef<AutoPauseContext>();\n    autoPauseContextRef.current = autoPauseContext;\n\n    const keyBinder = useMemo<AppKeyBinder>(\n        () => new AppKeyBinder(new DefaultKeyBinder(miscSettings.keyBindSet), extension),\n        [miscSettings.keyBindSet, extension]\n    );\n    const videoRefCallback = useCallback(\n        (element: HTMLVideoElement) => {\n            if (element) {\n                const videoElement = element as ExperimentalHTMLVideoElement;\n                videoRef.current = videoElement;\n\n                if (videoElement.readyState === 4) {\n                    notifyReady(videoElement, playerChannel, setAudioTracks, setSelectedAudioTrack);\n                } else {\n                    videoElement.onloadeddata = (event) => {\n                        notifyReady(videoElement, playerChannel, setAudioTracks, setSelectedAudioTrack);\n                    };\n                }\n\n                videoElement.oncanplay = (event) => {\n                    playerChannel.readyState(4);\n\n                    if (playingRef.current) {\n                        clock.start();\n                    }\n                };\n\n                videoElement.ontimeupdate = (event) => clock.setTime(element.currentTime * 1000);\n\n                videoElement.onerror = (event) => onError(errorMessage(element));\n            }\n        },\n        [clock, playerChannel, onError]\n    );\n\n    function selectAudioTrack(id: string) {\n        const audioTracks = videoRef.current?.audioTracks;\n\n        if (!audioTracks) {\n            return;\n        }\n\n        // @ts-ignore\n        for (const t of audioTracks) {\n            if (t.id === id) {\n                t.enabled = true;\n            } else {\n                t.enabled = false;\n            }\n        }\n    }\n\n    const updateSubtitlesWithOffset = useCallback((offset: number) => {\n        setOffset(offset);\n        setSubtitles((subtitles) =>\n            subtitles.map((s, i) => ({\n                text: s.text,\n                textImage: s.textImage,\n                start: s.originalStart + offset,\n                originalStart: s.originalStart,\n                end: s.originalEnd + offset,\n                originalEnd: s.originalEnd,\n                track: s.track,\n                index: i,\n            }))\n        );\n    }, []);\n\n    const updatePlaybackRate = useCallback(\n        (playbackRate: number, forwardToPlayer: boolean) => {\n            if (videoRef.current) {\n                videoRef.current.playbackRate = playbackRate;\n                clock.rate = playbackRate;\n                setPlaybackRate(playbackRate);\n\n                if (forwardToPlayer) {\n                    playerChannel.playbackRate(playbackRate);\n                }\n            }\n        },\n        [playerChannel, clock]\n    );\n\n    useEffect(() => {\n        playerChannel.onReady((duration, videoFileName) => {\n            setLength(duration);\n            setVideoFileName(videoFileName);\n        });\n\n        playerChannel.onPlay(async () => {\n            await videoRef.current?.play();\n            clock.start();\n            setPlaying(true);\n        });\n\n        playerChannel.onPause(() => {\n            videoRef.current?.pause();\n            clock.stop();\n            setPlaying(false);\n        });\n\n        playerChannel.onCurrentTime((currentTime) => {\n            if (videoRef.current) {\n                videoRef.current.currentTime = currentTime;\n            }\n\n            if (videoRef.current?.readyState === 4) {\n                playerChannel.readyState(4);\n            }\n\n            clock.stop();\n            clock.setTime(currentTime * 1000);\n            autoPauseContextRef.current?.clear();\n        });\n\n        playerChannel.onAudioTrackSelected((id) => {\n            selectAudioTrack(id);\n            setSelectedAudioTrack(id);\n            playerChannel.audioTrackSelected(id);\n        });\n\n        playerChannel.onClose(() => {\n            playerChannel.close();\n            window.close();\n        });\n\n        playerChannel.onSubtitles((subtitles) => {\n            setSubtitles(subtitles.map((s, i) => ({ ...s, index: i })));\n\n            if (subtitles && subtitles.length > 0) {\n                const s = subtitles[0];\n                const offset = s.start - s.originalStart;\n                setOffset(offset);\n            }\n\n            autoPauseContextRef.current?.clear();\n        });\n\n        playerChannel.onPlayMode((playMode) => setPlayMode(playMode));\n        playerChannel.onHideSubtitlePlayerToggle((hidden) => setSubtitlePlayerHidden(hidden));\n        playerChannel.onAppBarToggle((hidden) => setAppBarHidden(hidden));\n        playerChannel.onFullscreenToggle((fullscreen) => setFullscreen(fullscreen));\n        playerChannel.onSubtitleSettings(setSubtitleSettings);\n        playerChannel.onMiscSettings(setMiscSettings);\n        playerChannel.onAnkiSettings(setAnkiSettings);\n        playerChannel.onOffset(updateSubtitlesWithOffset);\n        playerChannel.onPlaybackRate((playbackRate) => {\n            updatePlaybackRate(playbackRate, false);\n        });\n        playerChannel.onAlert((message, severity) => {\n            if (popOut) {\n                setAlertOpen(true);\n                setAlertMessage(message);\n                setAlertSeverity(severity as Color);\n            }\n        });\n\n        window.onbeforeunload = (e) => {\n            if (!poppingInRef.current) {\n                playerChannel.close();\n            }\n        };\n\n        return () => playerChannel.close();\n    }, [clock, playerChannel, updateSubtitlesWithOffset, updatePlaybackRate, popOut]);\n\n    const handlePlay = useCallback(() => {\n        if (videoRef.current) {\n            playerChannel.play();\n        }\n    }, [playerChannel]);\n\n    const handlePause = useCallback(() => playerChannel.pause(), [playerChannel]);\n\n    const handleSeek = useCallback(\n        (progress: number) => {\n            if (playingRef.current) {\n                clock.stop();\n            }\n\n            const time = progress * length;\n            playerChannel.currentTime = time / 1000;\n        },\n        [length, clock, playerChannel]\n    );\n\n    function handleMouseMove(e: React.MouseEvent<HTMLDivElement>) {\n        lastMouseMovementTimestamp.current = Date.now();\n\n        if (!containerRef.current) {\n            return;\n        }\n\n        var bounds = containerRef.current.getBoundingClientRect();\n        mousePositionRef.current.x = e.clientX - bounds.left;\n        mousePositionRef.current.y = e.clientY - bounds.top;\n    }\n\n    const handleAudioTrackSelected = useCallback(\n        (id: string) => {\n            if (playingRef.current) {\n                clock.stop();\n                playerChannel.pause();\n            }\n\n            selectAudioTrack(id);\n            setSelectedAudioTrack(id);\n            playerChannel.currentTime = 0;\n            playerChannel.audioTrackSelected(id);\n        },\n        [playerChannel, clock]\n    );\n\n    useEffect(() => {\n        if (!subtitles || subtitles.length === 0) {\n            return;\n        }\n\n        const interval = setInterval(() => {\n            const now = clock.time(length);\n            let showSubtitles = [];\n            const slice = subtitleCollection.subtitlesAt(now);\n\n            for (const s of slice.showing) {\n                if (!disabledSubtitleTracks[s.track]) {\n                    showSubtitles.push(s);\n                }\n            }\n\n            if (slice.startedShowing && !disabledSubtitleTracks[slice.startedShowing.track]) {\n                autoPauseContext.startedShowing(slice.startedShowing);\n            }\n\n            if (slice.willStopShowing && !disabledSubtitleTracks[slice.willStopShowing.track]) {\n                autoPauseContext.willStopShowing(slice.willStopShowing);\n            }\n\n            showSubtitles = showSubtitles.sort((s1, s2) => s1.track - s2.track);\n\n            if (!arrayEquals(showSubtitles, showSubtitlesRef.current, (s1, s2) => s1.index === s2.index)) {\n                setShowSubtitles(showSubtitles);\n                if (showSubtitles.length > 0 && miscSettings.autoCopyCurrentSubtitle && document.hasFocus()) {\n                    navigator.clipboard.writeText(showSubtitles.map((s) => s.text).join('\\n')).catch((e) => {\n                        // ignore\n                    });\n                }\n            }\n        }, 100);\n\n        return () => clearTimeout(interval);\n    }, [\n        subtitleCollection,\n        playerChannel,\n        subtitles,\n        disabledSubtitleTracks,\n        clock,\n        length,\n        autoPauseContext,\n        miscSettings,\n    ]);\n\n    const handleOffsetChange = useCallback(\n        (offset: number) => {\n            updateSubtitlesWithOffset(offset);\n            playerChannel.offset(offset);\n        },\n        [playerChannel, updateSubtitlesWithOffset]\n    );\n\n    const handlePlaybackRateChange = useCallback(\n        (playbackRate: number) => {\n            updatePlaybackRate(playbackRate, true);\n        },\n        [updatePlaybackRate]\n    );\n\n    useEffect(() => {\n        return keyBinder.bindSeekToSubtitle(\n            (event, subtitle) => {\n                event.stopPropagation();\n                event.preventDefault();\n                playerChannel.currentTime = subtitle.start / 1000;\n            },\n            () => !videoRef.current,\n            () => clock.time(length),\n            () => subtitles\n        );\n    }, [keyBinder, playerChannel, subtitles, length, clock]);\n\n    useEffect(() => {\n        return keyBinder.bindSeekToBeginningOfCurrentSubtitle(\n            (event, subtitle) => {\n                event.stopPropagation();\n                event.preventDefault();\n                playerChannel.currentTime = subtitle.start / 1000;\n            },\n            () => !videoRef.current,\n            () => clock.time(length),\n            () => subtitles\n        );\n    }, [keyBinder, playerChannel, subtitles, length, clock]);\n\n    useEffect(() => {\n        return keyBinder.bindSeekBackwardOrForward(\n            (event, forward) => {\n                event.stopPropagation();\n                event.preventDefault();\n                const timestamp = clock.time(length);\n\n                if (forward) {\n                    playerChannel.currentTime = Math.min(length / 1000, (timestamp + 10000) / 1000);\n                } else {\n                    playerChannel.currentTime = Math.max(0, (timestamp - 10000) / 1000);\n                }\n            },\n            () => !videoRef.current\n        );\n    }, [keyBinder, playerChannel, length, clock]);\n\n    const calculateSurroundingSubtitles = useCallback(\n        (index: number) => {\n            return surroundingSubtitles(\n                subtitles,\n                index,\n                ankiSettings.surroundingSubtitlesCountRadius,\n                ankiSettings.surroundingSubtitlesTimeRadius\n            );\n        },\n        [subtitles, ankiSettings.surroundingSubtitlesCountRadius, ankiSettings.surroundingSubtitlesTimeRadius]\n    );\n\n    useEffect(() => {\n        return keyBinder.bindCopy<IndexedSubtitleModel>(\n            (event, subtitle) => {\n                event.stopPropagation();\n                event.preventDefault();\n\n                const noSubtitles = !subtitles || subtitles.length === 0;\n\n                playerChannel.copy(\n                    subtitle,\n                    noSubtitles\n                        ? mockSurroundingSubtitles(subtitle, length, 5000)\n                        : calculateSurroundingSubtitles(subtitle.index),\n                    PostMineAction.none\n                );\n            },\n            () => false,\n            () => {\n                if (!subtitles || subtitles.length === 0) {\n                    const timestamp = clock.time(length);\n                    const end = Math.min(timestamp + 5000, length);\n\n                    return {\n                        text: '',\n                        start: timestamp,\n                        originalStart: timestamp,\n                        end: end,\n                        originalEnd: end,\n                        track: 0,\n                        index: 0,\n                    };\n                }\n\n                if (!showSubtitlesRef.current || showSubtitlesRef.current.length === 0) {\n                    return undefined;\n                }\n\n                return showSubtitlesRef.current[0];\n            }\n        );\n    }, [keyBinder, playerChannel, clock, length, subtitles, calculateSurroundingSubtitles]);\n\n    useEffect(() => {\n        return keyBinder.bindAdjustOffset(\n            (event, offset) => {\n                event.preventDefault();\n                event.stopPropagation();\n                handleOffsetChange(offset);\n            },\n            () => false,\n            () => subtitles\n        );\n    }, [keyBinder, handleOffsetChange, subtitles]);\n\n    useEffect(() => {\n        return keyBinder.bindAdjustPlaybackRate(\n            (event, increase) => {\n                event.preventDefault();\n                if (increase) {\n                    updatePlaybackRate(Math.min(5, playbackRate + 0.1), true);\n                } else {\n                    updatePlaybackRate(Math.max(0.1, playbackRate - 0.1), true);\n                }\n            },\n            () => false\n        );\n    }, [updatePlaybackRate, playbackRate, keyBinder]);\n\n    useEffect(() => {\n        return keyBinder.bindToggleSubtitles(\n            (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n                setSubtitlesEnabled((enabled) => !enabled);\n            },\n            () => false\n        );\n    }, [keyBinder]);\n\n    useEffect(() => {\n        return keyBinder.bindToggleSubtitleTrackInVideo(\n            (event, track) => {\n                event.preventDefault();\n                event.stopPropagation();\n                setDisabledSubtitleTracks((tracks) => {\n                    const newTracks = { ...tracks };\n                    newTracks[track] = !tracks[track];\n                    return newTracks;\n                });\n            },\n            () => false\n        );\n    }, [keyBinder]);\n\n    useEffect(() => {\n        return keyBinder.bindToggleSubtitleTrackInList(\n            (event, track) => {\n                event.preventDefault();\n                event.stopPropagation();\n                playerChannel.toggleSubtitleTrackInList(track);\n            },\n            () => false\n        );\n    }, [keyBinder, playerChannel]);\n\n    useEffect(() => {\n        return keyBinder.bindOffsetToSubtitle(\n            (event, offset) => {\n                event.preventDefault();\n                event.stopPropagation();\n                handleOffsetChange(offset);\n            },\n            () => false,\n            () => clock.time(length),\n            () => subtitles\n        );\n    }, [keyBinder, handleOffsetChange, subtitles, clock, length]);\n\n    const extractSubtitles = useCallback(\n        (\n            noSubtitleCallback: (subtitle: SubtitleModel, surroundingSubtitles: SubtitleModel[]) => void,\n            subtitleCallback: (subtitle: SubtitleModel, surroundingSubtitles: SubtitleModel[]) => void\n        ) => {\n            if (!subtitles || subtitles.length === 0) {\n                const timestamp = clock.time(length);\n                const end = Math.min(timestamp + 5000, length);\n                const subtitle = {\n                    text: '',\n                    start: timestamp,\n                    originalStart: timestamp,\n                    end: end,\n                    originalEnd: end,\n                    track: 0,\n                };\n\n                noSubtitleCallback(subtitle, mockSurroundingSubtitles(subtitle, length, 5000));\n            } else if (showSubtitlesRef.current && showSubtitlesRef.current.length > 0) {\n                const currentSubtitle = showSubtitlesRef.current[0];\n                subtitleCallback(currentSubtitle, calculateSurroundingSubtitles(currentSubtitle.index));\n            }\n        },\n        [subtitles, calculateSurroundingSubtitles, length, clock]\n    );\n\n    useEffect(() => {\n        return keyBinder.bindAnkiExport(\n            (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n\n                if (popOut) {\n                    extractSubtitles(\n                        (subtitle, surroundingSubtitles) => {\n                            playerChannel.copy(subtitle, surroundingSubtitles, PostMineAction.none, false);\n                            onAnkiDialogRequest(\n                                videoFile,\n                                videoFileName ?? '',\n                                selectedAudioTrack,\n                                playbackRate,\n                                subtitle,\n                                surroundingSubtitles,\n                                clock.time(length)\n                            );\n                        },\n                        (subtitle, surroundingSubtitles) => {\n                            playerChannel.copy(subtitle, surroundingSubtitles, PostMineAction.none, true);\n                            onAnkiDialogRequest(\n                                videoFile,\n                                videoFileName ?? '',\n                                selectedAudioTrack,\n                                playbackRate,\n                                subtitle,\n                                surroundingSubtitles,\n                                clock.time(length)\n                            );\n                        }\n                    );\n\n                    if (playing) {\n                        playerChannel.pause();\n                        setResumeOnFinishedAnkiDialogRequest(true);\n                    }\n                } else {\n                    extractSubtitles(\n                        (subtitle, surroundingSubtitles) =>\n                            playerChannel.copy(subtitle, surroundingSubtitles, PostMineAction.showAnkiDialog, false),\n                        (subtitle, surroundingSubtitles) =>\n                            playerChannel.copy(subtitle, surroundingSubtitles, PostMineAction.showAnkiDialog, true)\n                    );\n                }\n            },\n            () => false\n        );\n    }, [\n        keyBinder,\n        playerChannel,\n        extractSubtitles,\n        clock,\n        length,\n        videoFile,\n        videoFileName,\n        selectedAudioTrack,\n        playbackRate,\n        onAnkiDialogRequest,\n        popOut,\n        playing,\n    ]);\n\n    useEffect(() => {\n        if (ankiDialogFinishedRequest && ankiDialogFinishedRequest.timestamp > 0) {\n            setResumeOnFinishedAnkiDialogRequest((resumeOnFinishedAnkiDialogRequest) => {\n                if (resumeOnFinishedAnkiDialogRequest && ankiDialogFinishedRequest.resume) {\n                    playerChannel.play();\n                }\n\n                return false;\n            });\n        }\n    }, [ankiDialogFinishedRequest, playerChannel]);\n\n    useEffect(() => {\n        return keyBinder.bindUpdateLastCard(\n            (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n\n                extractSubtitles(\n                    (subtitle, surroundingSubtitles) =>\n                        playerChannel.copy(subtitle, surroundingSubtitles, PostMineAction.updateLastCard, false),\n                    (subtitle, surroundingSubtitles) =>\n                        playerChannel.copy(subtitle, surroundingSubtitles, PostMineAction.updateLastCard, true)\n                );\n            },\n            () => false\n        );\n    }, [keyBinder, playerChannel, extractSubtitles]);\n\n    useEffect(() => {\n        return keyBinder.bindPlay(\n            (event) => {\n                event.preventDefault();\n\n                if (playing) {\n                    playerChannel.pause();\n                } else {\n                    playerChannel.play();\n                }\n            },\n            () => false\n        );\n    }, [keyBinder, playing, playerChannel]);\n\n    const togglePlayMode = useCallback(\n        (event: KeyboardEvent, togglePlayMode: PlayMode) => {\n            event.preventDefault();\n            const newPlayMode = playMode === togglePlayMode ? PlayMode.normal : togglePlayMode;\n            playerChannel.playMode(newPlayMode);\n            onPlayModeChangedViaBind(playMode, newPlayMode);\n        },\n        [playMode, playerChannel, onPlayModeChangedViaBind]\n    );\n\n    useEffect(() => {\n        return keyBinder.bindAutoPause(\n            (event) => togglePlayMode(event, PlayMode.autoPause),\n            () => false\n        );\n    }, [keyBinder, togglePlayMode]);\n\n    useEffect(() => {\n        return keyBinder.bindCondensedPlayback(\n            (event) => togglePlayMode(event, PlayMode.condensed),\n            () => false\n        );\n    }, [keyBinder, togglePlayMode]);\n\n    const handleSubtitlesToggle = useCallback(() => setSubtitlesEnabled((subtitlesEnabled) => !subtitlesEnabled), []);\n\n    const handleFullscreenToggle = useCallback(() => {\n        if (popOut) {\n            setFullscreen((fullscreen) => {\n                if (fullscreen) {\n                    document.exitFullscreen();\n                } else {\n                    document.documentElement.requestFullscreen();\n                }\n\n                return !fullscreen;\n            });\n        } else {\n            playerChannel.fullscreenToggle();\n        }\n    }, [playerChannel, popOut]);\n\n    const handleVolumeChange = useCallback((volume: number) => {\n        if (videoRef.current) {\n            videoRef.current.volume = volume;\n        }\n    }, []);\n\n    const handlePopOutToggle = useCallback(() => {\n        playerChannel.popOutToggle();\n        if (popOut) {\n            poppingInRef.current = true;\n            window.close();\n        }\n    }, [playerChannel, popOut]);\n\n    const handlePlayMode = useCallback(\n        (playMode: PlayMode) => {\n            playerChannel.playMode(playMode);\n        },\n        [playerChannel]\n    );\n\n    const handleClose = useCallback(() => {\n        playerChannel.close();\n        window.close();\n    }, [playerChannel]);\n\n    const handleHideSubtitlePlayerToggle = useCallback(() => {\n        playerChannel.hideSubtitlePlayerToggle();\n    }, [playerChannel]);\n\n    const handleTheaterModeToggle = useCallback(() => {\n        playerChannel.appBarToggle();\n    }, [playerChannel]);\n\n    const handleClick = useCallback(() => {\n        if (playing) {\n            playerChannel.pause();\n        } else {\n            playerChannel.play();\n        }\n    }, [playerChannel, playing]);\n\n    const handleDoubleClick = useCallback(() => handleFullscreenToggle(), [handleFullscreenToggle]);\n\n    const {\n        subtitleSize,\n        subtitleColor,\n        subtitleOutlineThickness,\n        subtitleOutlineColor,\n        subtitleBackgroundColor,\n        subtitleBackgroundOpacity,\n        subtitleFontFamily,\n        imageBasedSubtitleScaleFactor,\n    } = subtitleSettings;\n    const subtitleStyles = useMemo(\n        () =>\n            computeStyles({\n                subtitleSize,\n                subtitleColor,\n                subtitleOutlineThickness,\n                subtitleOutlineColor,\n                subtitleBackgroundColor,\n                subtitleBackgroundOpacity,\n                subtitleFontFamily,\n            }),\n        [\n            subtitleSize,\n            subtitleColor,\n            subtitleOutlineThickness,\n            subtitleOutlineColor,\n            subtitleBackgroundColor,\n            subtitleBackgroundOpacity,\n            subtitleFontFamily,\n        ]\n    );\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            if (Date.now() - lastMouseMovementTimestamp.current > 300) {\n                if (showCursor) {\n                    setShowCursor(false);\n                }\n            } else if (!showCursor) {\n                setShowCursor(true);\n            }\n        }, 100);\n\n        return () => clearInterval(interval);\n    }, [showCursor]);\n\n    const handleAlertClosed = useCallback(() => setAlertOpen(false), []);\n\n    return (\n        <div ref={containerRef} onMouseMove={handleMouseMove} className={classes.root}>\n            <Alert open={alertOpen} onClose={handleAlertClosed} autoHideDuration={3000} severity={alertSeverity}>\n                {alertMessage}\n            </Alert>\n            <video\n                preload=\"auto\"\n                controls={false}\n                onClick={handleClick}\n                onDoubleClick={handleDoubleClick}\n                className={showCursor ? classes.video : `${classes.cursorHidden} ${classes.video}`}\n                ref={videoRefCallback}\n                src={videoFile}\n            />\n            {subtitlesEnabled && (\n                <div className={classes.subtitleContainer}>\n                    {showSubtitles.map((subtitle, index) => {\n                        let content;\n\n                        if (subtitle.textImage) {\n                            content = (\n                                <SubtitleTextImage\n                                    availableWidth={videoRef.current?.width ?? window.screen.availWidth}\n                                    subtitle={subtitle}\n                                    scale={imageBasedSubtitleScaleFactor}\n                                />\n                            );\n                        } else {\n                            content = <span style={subtitleStyles}>{subtitle.text}</span>;\n                        }\n\n                        if (index < showSubtitles.length - 1) {\n                            return (\n                                <React.Fragment key={subtitle.index}>\n                                    {content}\n                                    <br />\n                                </React.Fragment>\n                            );\n                        }\n\n                        return <React.Fragment key={subtitle.index}>{content}</React.Fragment>;\n                    })}\n                </div>\n            )}\n            <Controls\n                mousePositionRef={mousePositionRef}\n                playing={playing}\n                clock={clock}\n                length={length}\n                audioTracks={audioTracks}\n                selectedAudioTrack={selectedAudioTrack}\n                subtitlesToggle={subtitles && subtitles.length > 0}\n                subtitlesEnabled={subtitlesEnabled}\n                offsetEnabled={true}\n                offset={offset}\n                playbackRate={playbackRate}\n                playbackRateEnabled={true}\n                fullscreenEnabled={true}\n                fullscreen={fullscreen}\n                closeEnabled={!popOut}\n                popOut={popOut}\n                volumeEnabled={true}\n                popOutEnabled={!isMobile}\n                playModeEnabled={subtitles && subtitles.length > 0}\n                playMode={playMode}\n                hideSubtitlePlayerToggleEnabled={subtitles?.length > 0 && !popOut && !fullscreen}\n                subtitlePlayerHidden={subtitlePlayerHidden}\n                onPlay={handlePlay}\n                onPause={handlePause}\n                onSeek={handleSeek}\n                onAudioTrackSelected={handleAudioTrackSelected}\n                onSubtitlesToggle={handleSubtitlesToggle}\n                onFullscreenToggle={handleFullscreenToggle}\n                onVolumeChange={handleVolumeChange}\n                onOffsetChange={handleOffsetChange}\n                onPlaybackRateChange={handlePlaybackRateChange}\n                onPopOutToggle={handlePopOutToggle}\n                onPlayMode={handlePlayMode}\n                onClose={handleClose}\n                onHideSubtitlePlayerToggle={handleHideSubtitlePlayerToggle}\n                playbackPreferences={playbackPreferences}\n                showOnMouseMovement={false}\n                theaterModeToggleEnabled={!popOut && !fullscreen}\n                theaterModeEnabled={appBarHidden}\n                onTheaterModeToggle={handleTheaterModeToggle}\n            />\n        </div>\n    );\n}\n","import {\n    AsbPlayerToVideoCommandV2,\n    ExtensionToAsbPlayerCommand,\n    ExtensionToAsbPlayerCommandTabsCommand,\n    Message,\n    VideoTabModel,\n} from '@project/common';\nimport { gt } from 'semver';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport interface ExtensionMessage {\n    data: Message;\n    tabId?: number;\n    src?: string;\n}\n\nconst id = uuidv4();\n\nexport default class ChromeExtension {\n    readonly version: string;\n    readonly extensionCommands: { [key: string]: string | undefined };\n\n    tabs: VideoTabModel[];\n    installed: boolean;\n\n    private readonly windowEventListener: (event: MessageEvent) => void;\n    private onMessageCallbacks: Array<(message: ExtensionMessage) => void>;\n    private onTabsCallbacks: Array<(tabs: VideoTabModel[]) => void>;\n    private heartbeatStarted = false;\n\n    constructor(version?: string, extensionCommands?: { [key: string]: string | undefined }) {\n        this.onMessageCallbacks = [];\n        this.onTabsCallbacks = [];\n        this.tabs = [];\n        this.installed = version !== undefined;\n        this.version = version ?? '';\n        this.extensionCommands = extensionCommands ?? {};\n        this.windowEventListener = (event: MessageEvent) => {\n            if (event.source !== window) {\n                return;\n            }\n\n            if (event.data.sender !== 'asbplayer-extension-to-player' || !event.data.message) {\n                return;\n            }\n\n            if (event.data.message.command === 'tabs') {\n                const tabsCommand = event.data as ExtensionToAsbPlayerCommandTabsCommand;\n                this.tabs = tabsCommand.message.tabs;\n\n                for (let c of this.onTabsCallbacks) {\n                    c(this.tabs);\n                }\n\n                if (tabsCommand.message.ackRequested) {\n                    window.postMessage(\n                        {\n                            sender: 'asbplayerv2',\n                            message: {\n                                command: 'ackTabs',\n                                id: id,\n                                receivedTabs: this.tabs,\n                            },\n                        },\n                        '*'\n                    );\n                }\n            } else {\n                const command = event.data as ExtensionToAsbPlayerCommand<Message>;\n\n                for (let c of this.onMessageCallbacks) {\n                    c({\n                        data: command.message,\n                        tabId: command.tabId,\n                        src: command.src,\n                    });\n                }\n            }\n        };\n\n        window.addEventListener('message', this.windowEventListener);\n    }\n\n    startHeartbeat(fromVideoPlayer: boolean) {\n        if (!this.installed) {\n            return;\n        }\n\n        if (!this.heartbeatStarted) {\n            if (fromVideoPlayer) {\n                if (gt(this.version, '0.23.0')) {\n                    setInterval(() => this._sendHeartbeat(true), 1000);\n                }\n            } else {\n                setInterval(() => this._sendHeartbeat(false), 1000);\n            }\n\n            this.heartbeatStarted = true;\n        }\n    }\n\n    private _sendHeartbeat(fromVideoPlayer: boolean) {\n        window.postMessage(\n            {\n                sender: 'asbplayerv2',\n                message: {\n                    command: 'heartbeat',\n                    id: id,\n                    receivedTabs: fromVideoPlayer ? [] : this.tabs,\n                    videoPlayer: fromVideoPlayer\n                },\n            },\n            '*'\n        );\n    }\n\n    openShortcuts() {\n        window.postMessage({\n            sender: 'asbplayerv2',\n            message: {\n                command: 'open-extension-shortcuts',\n            },\n        });\n    }\n\n    sendMessage(message: Message, tabId: number, src: string) {\n        const command: AsbPlayerToVideoCommandV2<Message> = {\n            sender: 'asbplayerv2',\n            message: message,\n            tabId: tabId,\n            src: src,\n        };\n        window.postMessage(command, '*');\n    }\n\n    publishMessage(message: Message) {\n        for (const tab of this.tabs) {\n            const command: AsbPlayerToVideoCommandV2<Message> = {\n                sender: 'asbplayerv2',\n                message: message,\n                tabId: tab.id,\n                src: tab.src,\n            };\n            window.postMessage(command, '*');\n        }\n    }\n\n    subscribeTabs(callback: (tabs: VideoTabModel[]) => void) {\n        this.onTabsCallbacks.push(callback);\n        return () => this._remove(callback, this.onTabsCallbacks);\n    }\n\n    subscribe(callback: (message: ExtensionMessage) => void) {\n        this.onMessageCallbacks.push(callback);\n        return () => this._remove(callback, this.onMessageCallbacks);\n    }\n\n    _remove(callback: Function, callbacks: Function[]) {\n        for (let i = callbacks.length - 1; i >= 0; --i) {\n            if (callback === callbacks[i]) {\n                callbacks.splice(i, 1);\n                break;\n            }\n        }\n    }\n\n    unbind() {\n        window.removeEventListener('message', this.windowEventListener);\n        this.onMessageCallbacks = [];\n        this.onTabsCallbacks = [];\n    }\n}\n","import { ExtensionVersionMessage } from '@project/common';\nimport ChromeExtension from './ChromeExtension';\n\nconst keyBindNameMap: any = {\n    'copy-subtitle': 'copySubtitle',\n    'copy-subtitle-with-dialog': 'ankiExport',\n    'update-last-card': 'updateLastCard',\n};\n\nexport class ChromeExtensionProvider {\n    extension: ChromeExtension = new ChromeExtension();\n    private readonly callbacks: ((extension: ChromeExtension) => void)[] = [];\n\n    constructor() {\n        const listener = (event: MessageEvent) => {\n            if (event.source !== window) {\n                return;\n            }\n\n            if (event.data.sender === 'asbplayer-extension-to-player') {\n                if (event.data.message.command === 'version') {\n                    const message = event.data.message as ExtensionVersionMessage;\n\n                    for (const callback of this.callbacks) {\n                        this.extension.unbind();\n                        const translatedCommands: { [key: string]: string | undefined } = {};\n                        const extensionCommands = message.extensionCommands ?? {};\n                        \n                        for (const extensionCommandName of Object.keys(extensionCommands)) {\n                            translatedCommands[keyBindNameMap[extensionCommandName]] =\n                                extensionCommands[extensionCommandName];\n                        }\n\n                        this.extension = new ChromeExtension(message.version, translatedCommands);\n                        callback(this.extension);\n                    }\n\n                    window.removeEventListener('message', listener);\n                }\n            }\n        };\n\n        window.addEventListener('message', listener);\n    }\n\n    onChromeExtension(callback: (extension: ChromeExtension) => void) {\n        this.callbacks.push(callback);\n        callback(this.extension);\n    }\n}\n","import SettingsProvider from './SettingsProvider';\n\nconst volumeKey = 'volume';\nconst theaterModeKey = 'theaterMode';\nconst offsetKey = 'offset';\nconst defaultVolume = 100;\n\nexport default class PlaybackPreferences {\n    private readonly settingsProvider: SettingsProvider;\n\n    constructor(settingsProvider: SettingsProvider) {\n        this.settingsProvider = settingsProvider;\n    }\n\n    get volume() {\n        const value = localStorage.getItem(volumeKey);\n\n        if (value === null) {\n            return defaultVolume;\n        }\n\n        return Number(value);\n    }\n\n    set volume(volume) {\n        localStorage.setItem(volumeKey, String(volume));\n    }\n\n    get theaterMode() {\n        return localStorage.getItem(theaterModeKey) === 'true' || false;\n    }\n\n    set theaterMode(theaterMode) {\n        localStorage.setItem(theaterModeKey, String(theaterMode));\n    }\n\n    get offset(): number {\n        if (!this.settingsProvider.rememberSubtitleOffset) {\n            return 0;\n        }\n\n        const value = localStorage.getItem(offsetKey);\n\n        if (value === null) {\n            return 0;\n        }\n\n        return Number(value);\n    }\n\n    set offset(offset: number) {\n        localStorage.setItem(offsetKey, String(offset));\n    }\n}\n","import React, { useCallback, useEffect, useState, useMemo, useRef } from 'react';\nimport { Route, Navigate, Routes, useLocation, useSearchParams } from 'react-router-dom';\nimport { ThemeProvider, createTheme, makeStyles, Theme } from '@material-ui/core/styles';\nimport { useWindowSize } from '../hooks/useWindowSize';\nimport { red } from '@material-ui/core/colors';\nimport {\n    Anki,\n    AudioClip,\n    Image,\n    humanReadableTime,\n    AnkiDialogSliderContext,\n    SubtitleModel,\n    VideoTabModel,\n    LegacyPlayerSyncMessage,\n    PlayerSyncMessage,\n    AudioModel,\n    ImageModel,\n    AsbplayerSettings,\n    PostMineAction,\n    PlayMode,\n    download,\n    extractText,\n} from '@project/common';\nimport { v4 as uuidv4 } from 'uuid';\nimport clsx from 'clsx';\nimport Alert from './Alert';\nimport { AnkiDialog, ImageDialog } from '@project/common/components';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport DragOverlay from './DragOverlay';\nimport SubtitleReader from '../services/SubtitleReader';\nimport Bar from './Bar';\nimport ChromeExtension, { ExtensionMessage } from '../services/ChromeExtension';\nimport CopyHistory, { CopyHistoryItem } from './CopyHistory';\nimport LandingPage from './LandingPage';\nimport Player, { AnkiDialogFinishedRequest, MediaSources } from './Player';\nimport SettingsDialog from './SettingsDialog';\nimport SettingsProvider from '../services/SettingsProvider';\nimport VideoPlayer from './VideoPlayer';\nimport { Color } from '@material-ui/lab';\nimport { AnkiExportMode } from '@project/common';\nimport { DefaultKeyBinder } from '@project/common/src/KeyBinder';\nimport AppKeyBinder from '../services/AppKeyBinder';\nimport VideoChannel from '../services/VideoChannel';\nimport { ChromeExtensionProvider } from '../services/ChromeExtensionProvider';\nimport PlaybackPreferences from '../services/PlaybackPreferences';\n\nconst latestExtensionVersion = '0.25.0';\nconst extensionUrl = 'https://github.com/killergerbah/asbplayer/releases/latest';\n\nconst useContentStyles = makeStyles<Theme, ContentProps>((theme) => ({\n    content: {\n        flexGrow: 1,\n        transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n        marginRight: 0,\n    },\n    contentShift: ({ drawerWidth }) => ({\n        transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n        marginRight: drawerWidth,\n    }),\n}));\n\nfunction extractSources(files: FileList | File[]): MediaSources {\n    let subtitleFiles = [];\n    let audioFile = undefined;\n    let videoFile = undefined;\n\n    for (let i = 0; i < files.length; ++i) {\n        const f = files[i];\n        const extensionStartIndex = f.name.lastIndexOf('.');\n\n        if (extensionStartIndex === -1) {\n            throw new Error('Unable to determine extension of ' + f.name);\n        }\n\n        const extension = f.name.substring(extensionStartIndex + 1, f.name.length);\n        switch (extension) {\n            case 'ass':\n            case 'srt':\n            case 'vtt':\n            case 'nfvtt':\n            case 'sup':\n            case 'ytxml':\n            case 'dfxp':\n            case 'ttml2':\n                subtitleFiles.push(f);\n                break;\n            case 'mkv':\n            case 'mp4':\n            case 'avi':\n                if (videoFile) {\n                    throw new Error('Cannot open two video files simultaneously');\n                }\n                videoFile = f;\n                break;\n            case 'mp3':\n            case 'm4a':\n            case 'aac':\n            case 'flac':\n            case 'ogg':\n            case 'wav':\n            case 'opus':\n                if (audioFile) {\n                    throw new Error('Cannot open two audio files simultaneously');\n                }\n                audioFile = f;\n                break;\n            default:\n                throw new Error('Unsupported extension ' + extension);\n        }\n    }\n\n    if (videoFile && audioFile) {\n        throw new Error('Cannot load both an audio and video file simultaneously');\n    }\n\n    return { subtitleFiles: subtitleFiles, audioFile: audioFile, videoFile: videoFile };\n}\n\nfunction audioClipFromItem(\n    item: CopyHistoryItem,\n    sliderContext: AnkiDialogSliderContext | undefined,\n    paddingStart: number,\n    paddingEnd: number\n) {\n    if (item.audio) {\n        const start = item.audio.start ?? item.start;\n        const end = item.audio.end ?? item.end;\n\n        return AudioClip.fromBase64(\n            item.subtitleFile!.name,\n            Math.max(0, start - (item.audio.paddingStart ?? 0)),\n            end + (item.audio.paddingEnd ?? 0),\n            item.audio.playbackRate ?? 1,\n            item.audio.base64,\n            item.audio.extension\n        );\n    }\n\n    if (item.audioFile || item.videoFile) {\n        let start;\n        let end;\n\n        if (sliderContext) {\n            start = sliderContext.subtitleStart;\n            end = sliderContext.subtitleEnd;\n        } else {\n            start = item.start;\n            end = item.end;\n        }\n\n        return AudioClip.fromFile(\n            (item.audioFile || item.videoFile)!,\n            Math.max(0, start - paddingStart),\n            end + paddingEnd,\n            item.filePlaybackRate ?? 1,\n            item.audioTrack\n        );\n    }\n\n    return undefined;\n}\n\nfunction imageFromItem(item: CopyHistoryItem, maxWidth: number, maxHeight: number) {\n    if (item.image) {\n        return Image.fromBase64(item.subtitleFile!.name, item.start, item.image.base64, item.image.extension);\n    }\n\n    if (item.videoFile) {\n        return Image.fromFile(item.videoFile, item.mediaTimestamp ?? item.start, maxWidth, maxHeight);\n    }\n\n    return undefined;\n}\n\nfunction itemSourceString(item: CopyHistoryItem | undefined) {\n    if (!item) {\n        return undefined;\n    }\n\n    const source = item.subtitleFile?.name ?? item.audioFile?.name ?? item.videoFile?.name;\n\n    if (!source) {\n        return undefined;\n    }\n\n    return `${source} (${humanReadableTime(item.start)})`;\n}\n\nfunction itemSliderContext(item: CopyHistoryItem) {\n    if (!item) {\n        return undefined;\n    }\n\n    return {\n        subtitleStart: item.start,\n        subtitleEnd: item.end,\n        subtitles: item.surroundingSubtitles || [\n            { start: item.start, end: item.end, text: item.text, track: item.track },\n        ],\n    };\n}\n\nfunction revokeUrls(sources: MediaSources) {\n    if (sources.audioFileUrl) {\n        URL.revokeObjectURL(sources.audioFileUrl);\n    }\n\n    if (sources.videoFileUrl) {\n        URL.revokeObjectURL(sources.videoFileUrl);\n    }\n}\n\ninterface NavigateToVideoProps {\n    searchParams: URLSearchParams;\n}\n\nfunction NavigateToVideo({ searchParams }: NavigateToVideoProps) {\n    const videoFile = searchParams.get('video')!;\n    const channel = searchParams.get('channel')!;\n    const popOut = searchParams.get('popout')!;\n\n    return (\n        <Navigate to={'/video?video=' + encodeURIComponent(videoFile) + '&channel=' + channel + '&popout=' + popOut} />\n    );\n}\n\ninterface RenderVideoProps {\n    searchParams: URLSearchParams;\n    settingsProvider: SettingsProvider;\n    playbackPreferences: PlaybackPreferences;\n    extension: ChromeExtension;\n    ankiDialogFinishedRequest: AnkiDialogFinishedRequest;\n    onAnkiDialogRequest: (\n        videoFileUrl: string,\n        videoFileName: string,\n        selectedAudioTrack: string | undefined,\n        playbackRate: number,\n        subtitle: SubtitleModel,\n        surroundingSubtitles: SubtitleModel[],\n        timestamp: number\n    ) => void;\n    onError: (error: string) => void;\n    onPlayModeChangedViaBind: (oldPlayMode: PlayMode, newPlayMode: PlayMode) => void;\n}\n\nfunction RenderVideo({\n    searchParams,\n    settingsProvider,\n    playbackPreferences,\n    extension,\n    ankiDialogFinishedRequest,\n    onAnkiDialogRequest,\n    onError,\n    onPlayModeChangedViaBind,\n}: RenderVideoProps) {\n    const videoFile = searchParams.get('video')!;\n    const channel = searchParams.get('channel')!;\n    const popOut = searchParams.get('popout')! === 'true';\n\n    return (\n        <VideoPlayer\n            settingsProvider={settingsProvider}\n            playbackPreferences={playbackPreferences}\n            extension={extension}\n            videoFile={videoFile}\n            popOut={popOut}\n            channel={channel}\n            ankiDialogFinishedRequest={ankiDialogFinishedRequest}\n            onAnkiDialogRequest={onAnkiDialogRequest}\n            onError={onError}\n            onPlayModeChangedViaBind={onPlayModeChangedViaBind}\n        />\n    );\n}\n\ninterface ContentProps {\n    drawerOpen: boolean;\n    drawerWidth: number;\n    children: React.ReactNode[];\n}\n\nfunction Content(props: ContentProps) {\n    const classes = useContentStyles(props);\n\n    return (\n        <main\n            className={clsx(classes.content, {\n                [classes.contentShift]: props.drawerOpen,\n            })}\n        >\n            {props.children}\n        </main>\n    );\n}\n\nfunction App() {\n    const settingsProvider = useMemo<SettingsProvider>(() => new SettingsProvider(), []);\n    const subtitleReader = useMemo<SubtitleReader>(() => {\n        let regex: RegExp | undefined;\n\n        try {\n            regex =\n                settingsProvider.subtitleRegexFilter.trim() === ''\n                    ? undefined\n                    : new RegExp(settingsProvider.subtitleRegexFilter);\n        } catch (e) {\n            regex = undefined;\n        }\n\n        if (regex !== undefined) {\n            return new SubtitleReader({ regex, replacement: settingsProvider.subtitleRegexFilterTextReplacement });\n        }\n\n        return new SubtitleReader();\n    }, [settingsProvider.subtitleRegexFilter, settingsProvider.subtitleRegexFilterTextReplacement]);\n    const playbackPreferences = useMemo<PlaybackPreferences>(\n        () => new PlaybackPreferences(settingsProvider),\n        [settingsProvider]\n    );\n    const theme = useMemo<Theme>(\n        () =>\n            createTheme({\n                palette: {\n                    primary: {\n                        main: '#49007a',\n                    },\n                    secondary: {\n                        main: '#ff1f62',\n                    },\n                    error: {\n                        main: red.A400,\n                    },\n                    type: settingsProvider.themeType,\n                },\n            }),\n        [settingsProvider.themeType]\n    );\n    const anki = useMemo<Anki>(() => new Anki(settingsProvider), [settingsProvider]);\n    const location = useLocation();\n    const [searchParams] = useSearchParams();\n\n    const inVideoPlayer = location.pathname === '/video' || searchParams.get('video') !== null;\n    const extensionProvider = useMemo(() => new ChromeExtensionProvider(), []);\n    const [extension, setExtension] = useState<ChromeExtension>(extensionProvider.extension);\n    const [videoFullscreen, setVideoFullscreen] = useState<boolean>(false);\n    useEffect(() => extensionProvider.onChromeExtension(setExtension), [extensionProvider]);\n    const keyBinder = useMemo<AppKeyBinder>(\n        () => new AppKeyBinder(new DefaultKeyBinder(settingsProvider.keyBindSet), extension),\n        [settingsProvider.keyBindSet, extension]\n    );\n    const videoFrameRef = useRef<HTMLIFrameElement>(null);\n    const videoChannelRef = useRef<VideoChannel>(null);\n    const [width] = useWindowSize(!inVideoPlayer);\n    const drawerRatio = videoFrameRef.current ? 0.2 : 0.3;\n    const minDrawerSize = videoFrameRef.current ? 150 : 300;\n    const drawerWidth = Math.max(minDrawerSize, width * drawerRatio);\n    const [copiedSubtitles, setCopiedSubtitles] = useState<CopyHistoryItem[]>([]);\n    const copiedSubtitlesRef = useRef<CopyHistoryItem[]>([]);\n    copiedSubtitlesRef.current = copiedSubtitles;\n    const [copyHistoryOpen, setCopyHistoryOpen] = useState<boolean>(false);\n    const [theaterMode, setTheaterMode] = useState<boolean>(playbackPreferences.theaterMode);\n    const [hideSubtitlePlayer, setHideSubtitlePlayer] = useState<boolean>(false);\n    const [videoPopOut, setVideoPopOut] = useState<boolean>(false);\n    const [alert, setAlert] = useState<string>();\n    const [alertOpen, setAlertOpen] = useState<boolean>(false);\n    const [alertSeverity, setAlertSeverity] = useState<Color>();\n    const [jumpToSubtitle, setJumpToSubtitle] = useState<SubtitleModel>();\n    const [rewindSubtitle, setRewindSubtitle] = useState<SubtitleModel>();\n    const [sources, setSources] = useState<MediaSources>({ subtitleFiles: [] });\n    const [loading, setLoading] = useState<boolean>(false);\n    const [dragging, setDragging] = useState<boolean>(false);\n    const dragEnterRef = useRef<Element | null>(null);\n    const [fileName, setFileName] = useState<string>();\n    const [ankiDialogOpen, setAnkiDialogOpen] = useState<boolean>(false);\n    const [ankiDialogDisabled, setAnkiDialogDisabled] = useState<boolean>(false);\n    const [ankiDialogItem, setAnkiDialogItem] = useState<CopyHistoryItem>();\n    const ankiDialogItemSliderContext = useMemo<AnkiDialogSliderContext | undefined>(\n        () => ankiDialogItem && itemSliderContext(ankiDialogItem),\n        [ankiDialogItem]\n    );\n    const ankiDialogAudioClip = useMemo<AudioClip | undefined>(\n        () =>\n            ankiDialogItem &&\n            audioClipFromItem(\n                ankiDialogItem,\n                ankiDialogItemSliderContext,\n                settingsProvider.audioPaddingStart,\n                settingsProvider.audioPaddingEnd\n            ),\n        [\n            ankiDialogItem,\n            ankiDialogItemSliderContext,\n            settingsProvider.audioPaddingStart,\n            settingsProvider.audioPaddingEnd,\n        ]\n    );\n    const ankiDialogImage = useMemo<Image | undefined>(\n        () =>\n            ankiDialogItem &&\n            imageFromItem(ankiDialogItem, settingsProvider.maxImageWidth, settingsProvider.maxImageHeight),\n        [ankiDialogItem, settingsProvider.maxImageWidth, settingsProvider.maxImageHeight]\n    );\n    const [ankiDialogRequested, setAnkiDialogRequested] = useState<boolean>(false);\n    const [ankiDialogFinishedRequest, setAnkiDialogFinishedRequest] = useState<AnkiDialogFinishedRequest>({\n        timestamp: 0,\n        resume: false,\n    });\n    const [settingsDialogOpen, setSettingsDialogOpen] = useState<boolean>(false);\n    const [settingsDialogScrollToId, setSettingsDialogScrollToId] = useState<string>();\n    const [imageDialogOpen, setImageDialogOpen] = useState<boolean>(false);\n    const [disableKeyEvents, setDisableKeyEvents] = useState<boolean>(false);\n    const [image, setImage] = useState<Image>();\n    const [tab, setTab] = useState<VideoTabModel>();\n    const [availableTabs, setAvailableTabs] = useState<VideoTabModel[]>([]);\n    const fileInputRef = useRef<HTMLInputElement>(null);\n    const ankiDialogRequestedRef = useRef<boolean>(false);\n    ankiDialogRequestedRef.current = ankiDialogRequested;\n    const { subtitleFiles } = sources;\n\n    const handleError = useCallback((message: string) => {\n        setAlertSeverity('error');\n        setAlert(message);\n        setAlertOpen(true);\n    }, []);\n\n    const handleAnkiDialogRequest = useCallback((ankiDialogItem?: CopyHistoryItem) => {\n        if (!ankiDialogItem && copiedSubtitlesRef.current!.length === 0) {\n            return;\n        }\n\n        const item = ankiDialogItem ?? copiedSubtitlesRef.current[copiedSubtitlesRef.current.length - 1];\n        setAnkiDialogItem(item);\n        setAnkiDialogOpen(true);\n        setAnkiDialogDisabled(false);\n        setDisableKeyEvents(true);\n        setAnkiDialogRequested(true);\n    }, []);\n\n    const handleAnkiDialogRequestFromVideoPlayer = useCallback(\n        async (\n            videoFileUrl: string,\n            videoFileName: string,\n            selectedAudioTrack: string | undefined,\n            playbackRate: number,\n            subtitle: SubtitleModel,\n            surroundingSubtitles: SubtitleModel[],\n            timestamp: number\n        ) => {\n            const item = {\n                ...subtitle,\n                surroundingSubtitles: surroundingSubtitles,\n                timestamp: Date.now(),\n                id: uuidv4(),\n                name: videoFileName,\n                mediaTimestamp: timestamp,\n                videoFile: await fetch(videoFileUrl)\n                    .then((r) => r.blob())\n                    .then((blobFile) => new File([blobFile], videoFileName)),\n                selectedAudioTrack: selectedAudioTrack,\n                filePlaybackRate: playbackRate,\n            };\n            handleAnkiDialogRequest(item);\n        },\n        [handleAnkiDialogRequest]\n    );\n\n    const handleAnkiDialogProceed = useCallback(\n        async (\n            text: string,\n            definition: string,\n            audioClip: AudioClip | undefined,\n            image: Image | undefined,\n            word: string,\n            source: string,\n            url: string,\n            customFieldValues: { [key: string]: string },\n            tags: string[],\n            mode: AnkiExportMode\n        ) => {\n            setAnkiDialogDisabled(true);\n\n            try {\n                const result = await anki.export(\n                    text,\n                    definition,\n                    audioClip,\n                    image,\n                    word,\n                    source,\n                    url,\n                    customFieldValues,\n                    tags,\n                    mode\n                );\n\n                if (mode !== 'gui') {\n                    if (mode === 'default') {\n                        setAlertSeverity('success');\n                        setAlert('Exported card: ' + result);\n                        setAlertOpen(true);\n                    } else if (mode === 'updateLast') {\n                        setAlertSeverity('success');\n                        setAlert('Updated card: ' + result);\n                        setAlertOpen(true);\n                    }\n\n                    setAnkiDialogOpen(false);\n\n                    // We need the ref to avoid causing a state change that would re-init Player\n                    // It's a future task to make the Player init hook depend on less state\n                    if (ankiDialogRequestedRef.current) {\n                        setAnkiDialogFinishedRequest({ timestamp: Date.now(), resume: true });\n                        setAnkiDialogRequested(false);\n                    }\n                }\n            } catch (e) {\n                console.error(e);\n                if (e instanceof Error) {\n                    handleError(e.message);\n                } else {\n                    handleError(String(e));\n                }\n            } finally {\n                setAnkiDialogDisabled(false);\n                setDisableKeyEvents(false);\n            }\n        },\n        [anki, handleError]\n    );\n\n    const handleCopy = useCallback(\n        (\n            subtitle: SubtitleModel,\n            surroundingSubtitles: SubtitleModel[],\n            audioFile: File | undefined,\n            videoFile: File | undefined,\n            subtitleFile: File | undefined,\n            mediaTimestamp: number | undefined,\n            audioTrack: string | undefined,\n            filePlaybackRate: number | undefined,\n            audio: AudioModel | undefined,\n            image: ImageModel | undefined,\n            url: string | undefined,\n            postMineAction: PostMineAction | undefined,\n            preventDuplicate: boolean | undefined,\n            id: string | undefined\n        ) => {\n            if (subtitle && settingsProvider.copyToClipboardOnMine) {\n                navigator.clipboard.writeText(subtitle.text);\n            }\n\n            const newCopiedSubtitle = {\n                ...subtitle,\n                surroundingSubtitles: surroundingSubtitles,\n                timestamp: Date.now(),\n                id: id || uuidv4(),\n                name: fileName!,\n                subtitleFile: subtitleFile,\n                audioFile: audioFile,\n                videoFile: videoFile,\n                filePlaybackRate: filePlaybackRate,\n                mediaTimestamp: mediaTimestamp,\n                audioTrack: audioTrack,\n                audio: audio,\n                image: image,\n                url: url,\n            };\n\n            setCopiedSubtitles((copiedSubtitles) => {\n                if (preventDuplicate && copiedSubtitles.length > 0) {\n                    const last = copiedSubtitles[copiedSubtitles.length - 1];\n\n                    if (\n                        subtitle.start === last.start &&\n                        subtitle.end === last.end &&\n                        subtitle.text === last.text &&\n                        subtitleFile?.name === last.subtitleFile?.name\n                    ) {\n                        if (mediaTimestamp !== undefined && mediaTimestamp !== last.mediaTimestamp) {\n                            const newCopiedSubtitles = [...copiedSubtitles];\n                            newCopiedSubtitles[newCopiedSubtitles.length - 1] = newCopiedSubtitle;\n                            return newCopiedSubtitles;\n                        }\n\n                        return copiedSubtitles;\n                    }\n                }\n\n                // Note: we are not dealing with the case where an item with the given ID is already in the list\n                return [...copiedSubtitles, newCopiedSubtitle];\n            });\n\n            switch (postMineAction ?? PostMineAction.none) {\n                case PostMineAction.none:\n                    break;\n                case PostMineAction.showAnkiDialog:\n                    handleAnkiDialogRequest(newCopiedSubtitle);\n                    break;\n                case PostMineAction.updateLastCard:\n                    // FIXME: We should really rename the functions below because we're actually skipping the Anki dialog in this case\n                    setAnkiDialogRequested(true);\n                    let audioClip = audioClipFromItem(\n                        newCopiedSubtitle,\n                        undefined,\n                        settingsProvider.audioPaddingStart,\n                        settingsProvider.audioPaddingEnd\n                    );\n\n                    if (audioClip && settingsProvider.preferMp3) {\n                        audioClip = audioClip.toMp3();\n                    }\n\n                    handleAnkiDialogProceed(\n                        extractText(subtitle, surroundingSubtitles),\n                        '',\n                        audioClip,\n                        imageFromItem(\n                            newCopiedSubtitle,\n                            settingsProvider.maxImageWidth,\n                            settingsProvider.maxImageHeight\n                        ),\n                        '',\n                        itemSourceString(newCopiedSubtitle) ?? '',\n                        '',\n                        {},\n                        settingsProvider.tags,\n                        'updateLast'\n                    );\n                    break;\n                default:\n                    throw new Error('Unknown post mine action: ' + postMineAction);\n            }\n\n            if (subtitle) {\n                setAlertSeverity('success');\n                setAlert(\n                    subtitle.text === '' ? `Saved ${humanReadableTime(subtitle.start)}` : `Copied: \"${subtitle.text}\"`\n                );\n                setAlertOpen(true);\n            }\n        },\n        [fileName, settingsProvider, handleAnkiDialogProceed, handleAnkiDialogRequest]\n    );\n\n    const handleOpenCopyHistory = useCallback(() => {\n        setCopyHistoryOpen((copyHistoryOpen) => !copyHistoryOpen);\n        setVideoFullscreen(false);\n    }, []);\n    const handleCloseCopyHistory = useCallback(() => setCopyHistoryOpen(false), []);\n    const handleAppBarToggle = useCallback(() => {\n        const newValue = !playbackPreferences.theaterMode;\n        playbackPreferences.theaterMode = newValue;\n        setTheaterMode(newValue);\n        setVideoFullscreen(false);\n    }, [playbackPreferences]);\n    const handleFullscreenToggle = useCallback(() => {\n        setVideoFullscreen((fullscreen) => !fullscreen);\n    }, []);\n    useEffect(() => {\n        if (videoFullscreen) {\n            if (!document.fullscreenElement) {\n                document.documentElement.requestFullscreen();\n            }\n        } else if (document.fullscreenElement) {\n            document.exitFullscreen();\n        }\n    }, [videoFullscreen]);\n    useEffect(() => {\n        const listener = () => {\n            if (!document.fullscreenElement) {\n                setVideoFullscreen(false);\n            }\n        };\n        document.addEventListener('fullscreenchange', listener);\n        return () => document.removeEventListener('fullscreenchange', listener);\n    }, []);\n    const handleHideSubtitlePlayer = useCallback(() => {\n        setHideSubtitlePlayer((hidden) => !hidden);\n    }, []);\n    const handleVideoPopOut = useCallback(() => {\n        setVideoPopOut((videoPopOut) => !videoPopOut);\n    }, []);\n    const handleOpenSettings = useCallback(() => {\n        setDisableKeyEvents(true);\n        setSettingsDialogOpen(true);\n    }, []);\n    const handleAlertClosed = useCallback(() => setAlertOpen(false), []);\n    const handleImageDialogClosed = useCallback(() => setImageDialogOpen(false), []);\n    const handleCloseSettings = useCallback(\n        (newSettings: AsbplayerSettings) => {\n            settingsProvider.settings = newSettings;\n            setSettingsDialogOpen(false);\n            setSettingsDialogScrollToId(undefined);\n\n            // ATM only the Anki dialog may appear under the settings dialog,\n            // so it's the only one we need to check to re-enable key events\n            setDisableKeyEvents(ankiDialogOpen);\n\n            videoChannelRef.current?.subtitleSettings(settingsProvider.subtitleSettings);\n            videoChannelRef.current?.ankiSettings(settingsProvider.ankiSettings);\n            videoChannelRef.current?.miscSettings(settingsProvider.miscSettings);\n        },\n        [settingsProvider, ankiDialogOpen]\n    );\n\n    const handleDeleteCopyHistoryItem = useCallback(\n        (item: CopyHistoryItem) => {\n            const newCopiedSubtitles = [];\n\n            for (let subtitle of copiedSubtitles) {\n                if (item.id !== subtitle.id) {\n                    newCopiedSubtitles.push(subtitle);\n                }\n            }\n\n            setCopiedSubtitles(newCopiedSubtitles);\n        },\n        [copiedSubtitles]\n    );\n\n    const handleUnloadAudio = useCallback(\n        (audioFileUrl: string) => {\n            if (audioFileUrl !== sources.audioFileUrl) {\n                return;\n            }\n\n            setSources((previous) => {\n                URL.revokeObjectURL(audioFileUrl);\n\n                return {\n                    subtitleFiles: previous.subtitleFiles,\n                    audioFile: undefined,\n                    audioFileUrl: undefined,\n                    videoFile: previous.videoFile,\n                    videoFileUrl: previous.videoFileUrl,\n                };\n            });\n        },\n        [sources]\n    );\n\n    const handleUnloadVideo = useCallback(\n        (videoFileUrl: string) => {\n            if (videoFileUrl !== sources.videoFileUrl) {\n                return;\n            }\n\n            setSources((previous) => {\n                URL.revokeObjectURL(videoFileUrl);\n\n                return {\n                    subtitleFiles: previous.subtitleFiles,\n                    audioFile: previous.audioFile,\n                    audioFileUrl: previous.audioFileUrl,\n                    videoFile: undefined,\n                    videoFileUrl: undefined,\n                };\n            });\n            setVideoFullscreen(false);\n        },\n        [sources]\n    );\n\n    const handleClipAudio = useCallback(\n        async (item: CopyHistoryItem) => {\n            try {\n                const clip = await audioClipFromItem(\n                    item,\n                    undefined,\n                    settingsProvider.audioPaddingStart,\n                    settingsProvider.audioPaddingEnd\n                );\n\n                if (settingsProvider.preferMp3) {\n                    clip!.toMp3().download();\n                } else {\n                    clip!.download();\n                }\n            } catch (e) {\n                console.error(e);\n                if (e instanceof Error) {\n                    handleError(e.message);\n                } else {\n                    handleError(String(e));\n                }\n            }\n        },\n        [handleError, settingsProvider]\n    );\n\n    const handleDownloadImage = useCallback(\n        async (item: CopyHistoryItem) => {\n            try {\n                (await imageFromItem(\n                    item,\n                    settingsProvider.maxImageWidth,\n                    settingsProvider.maxImageHeight\n                ))!.download();\n            } catch (e) {\n                console.error(e);\n                if (e instanceof Error) {\n                    handleError(e.message);\n                } else {\n                    handleError(String(e));\n                }\n            }\n        },\n        [handleError, settingsProvider]\n    );\n\n    const handleDownloadCopyHistorySectionAsSrt = useCallback(\n        (name: string, items: CopyHistoryItem[]) => {\n            const deduplicated: SubtitleModel[] = [];\n\n            for (const item of items) {\n                if (\n                    deduplicated.find((i) => i.start === item.start && i.end === item.end && i.text === item.text) ===\n                    undefined\n                ) {\n                    deduplicated.push(item);\n                }\n            }\n\n            download(\n                new Blob([subtitleReader.subtitlesToSrt(deduplicated)], { type: 'text/plain' }),\n                `${name}_MiningHistory_${new Date().toISOString()}.srt`\n            );\n        },\n        [subtitleReader]\n    );\n\n    const handleSelectCopyHistoryItem = useCallback(\n        (item: CopyHistoryItem) => {\n            if (!subtitleFiles.find((f) => f.name === item.subtitleFile?.name)) {\n                handleError('Subtitle file ' + item.subtitleFile?.name + ' is not open.');\n                return;\n            }\n\n            setJumpToSubtitle({\n                text: item.text,\n                start: item.start,\n                end: item.end,\n                originalStart: item.originalStart,\n                originalEnd: item.originalEnd,\n                track: item.track,\n            });\n        },\n        [subtitleFiles, handleError]\n    );\n\n    const handleAnki = useCallback((item: CopyHistoryItem) => {\n        setAnkiDialogItem(item);\n        setAnkiDialogOpen(true);\n        setAnkiDialogDisabled(false);\n        setDisableKeyEvents(true);\n    }, []);\n\n    const handleAnkiDialogCancel = useCallback(() => {\n        setAnkiDialogOpen(false);\n        setAnkiDialogDisabled(false);\n        setDisableKeyEvents(false);\n\n        if (ankiDialogRequested) {\n            setAnkiDialogFinishedRequest({ timestamp: Date.now(), resume: true });\n            setAnkiDialogRequested(false);\n        }\n    }, [ankiDialogRequested]);\n\n    const handleAnkiDialogRewind = useCallback(() => {\n        if (!ankiDialogItem) {\n            return;\n        }\n\n        if (!subtitleFiles.find((f) => f.name === ankiDialogItem.subtitleFile?.name)) {\n            handleError('Subtitle file ' + ankiDialogItem.subtitleFile?.name + ' is not open.');\n            return;\n        }\n\n        const subtitle = {\n            text: ankiDialogItem.text,\n            start: ankiDialogItem.start,\n            end: ankiDialogItem.end,\n            originalStart: ankiDialogItem.originalStart,\n            originalEnd: ankiDialogItem.originalEnd,\n            track: ankiDialogItem.track,\n        };\n        setRewindSubtitle(subtitle);\n        setJumpToSubtitle(subtitle);\n\n        handleAnkiDialogCancel();\n    }, [ankiDialogItem, subtitleFiles, handleAnkiDialogCancel, handleError]);\n\n    const handleViewImage = useCallback((image: Image) => {\n        setImage(image);\n        setImageDialogOpen(true);\n    }, []);\n\n    useEffect(() => {\n        function onTabs(tabs: VideoTabModel[]) {\n            if (tabs.length !== availableTabs.length) {\n                setAvailableTabs(tabs);\n            } else {\n                let update = false;\n\n                for (let i = 0; i < availableTabs.length; ++i) {\n                    const t1 = availableTabs[i];\n                    const t2 = tabs[i];\n                    if (t1.id !== t2.id || t1.title !== t2.title || t1.src !== t2.src) {\n                        update = true;\n                        break;\n                    }\n                }\n\n                if (update) {\n                    setAvailableTabs(tabs);\n                }\n            }\n\n            let selectedTabMissing = tab && tabs.filter((t) => t.id === tab.id && t.src === tab.src).length === 0;\n\n            if (selectedTabMissing) {\n                setTab(undefined);\n                handleError('Lost connection with tab ' + tab!.id + ' ' + tab!.title);\n            }\n        }\n\n        return extension.subscribeTabs(onTabs);\n    }, [availableTabs, tab, extension, handleError]);\n\n    const handleTabSelected = useCallback((tab: VideoTabModel) => setTab(tab), []);\n\n    const handleFiles = useCallback(\n        (files: FileList | File[]) => {\n            try {\n                let { subtitleFiles, audioFile, videoFile } = extractSources(files);\n\n                setSources((previous) => {\n                    setLoading(true);\n\n                    let videoFileUrl = undefined;\n                    let audioFileUrl = undefined;\n\n                    if (videoFile || audioFile) {\n                        revokeUrls(previous);\n\n                        if (videoFile) {\n                            videoFileUrl = URL.createObjectURL(videoFile);\n                        } else if (audioFile) {\n                            audioFileUrl = URL.createObjectURL(audioFile);\n                        }\n\n                        setTab(undefined);\n                    } else {\n                        videoFile = previous.videoFile;\n                        videoFileUrl = previous.videoFileUrl;\n                        audioFile = previous.audioFile;\n                        audioFileUrl = previous.audioFileUrl;\n                    }\n\n                    const sources = {\n                        subtitleFiles: subtitleFiles.length === 0 ? previous.subtitleFiles : subtitleFiles,\n                        audioFile: audioFile,\n                        audioFileUrl: audioFileUrl,\n                        videoFile: videoFile,\n                        videoFileUrl: videoFileUrl,\n                    };\n\n                    return sources;\n                });\n\n                if (subtitleFiles.length > 0) {\n                    const subtitleFileName = subtitleFiles[0].name;\n                    setFileName(subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')));\n                }\n            } catch (e) {\n                console.error(e);\n                if (e instanceof Error) {\n                    handleError(e.message);\n                } else {\n                    handleError(String(e));\n                }\n            }\n        },\n        [handleError]\n    );\n\n    const handleDirectory = useCallback(\n        async (items: DataTransferItemList) => {\n            if (items.length !== 1) {\n                handleError('Cannot load more than one directory at a time');\n                return;\n            }\n\n            const fileSystemEntry = items[0].webkitGetAsEntry();\n\n            if (!fileSystemEntry || !fileSystemEntry.isDirectory) {\n                handleError('Failed to load directory');\n                return;\n            }\n\n            const fileSystemDirectoryEntry = fileSystemEntry as FileSystemDirectoryEntry;\n\n            try {\n                const entries = await new Promise<FileSystemEntry[]>((resolve, reject) =>\n                    fileSystemDirectoryEntry.createReader().readEntries(resolve, reject)\n                );\n\n                if (entries.find((e) => e.isDirectory)) {\n                    handleError('Cannot load a directory with subdirectories');\n                    return;\n                }\n\n                const filePromises = entries.map(\n                    (e) => new Promise<File>((resolve, reject) => (e as FileSystemFileEntry).file(resolve, reject))\n                );\n                const files: File[] = [];\n\n                for (const f of filePromises) {\n                    files.push(await f);\n                }\n\n                handleFiles(files);\n            } catch (e) {\n                console.error(e);\n                if (e instanceof Error) {\n                    handleError(e.message);\n                } else {\n                    handleError(String(e));\n                }\n            }\n        },\n        [handleError, handleFiles]\n    );\n\n    useEffect(() => {\n        if (inVideoPlayer) {\n            extension.startHeartbeat(true);\n            return undefined;\n        }\n\n        async function onMessage(message: ExtensionMessage) {\n            if (message.data.command === 'sync' || message.data.command === 'syncv2') {\n                const tabs = extension.tabs.filter((t) => {\n                    if (t.id !== message.tabId) {\n                        return false;\n                    }\n\n                    return !message.src || t.src === message.src;\n                });\n\n                if (tabs.length === 0) {\n                    if (message.src) {\n                        console.error(\n                            'Received sync request but the requesting tab ID ' +\n                                message.tabId +\n                                ' with src ' +\n                                message.src +\n                                ' was not found'\n                        );\n                    } else {\n                        console.error(\n                            'Received sync request but the requesting tab ID ' + message.tabId + ' was not found'\n                        );\n                    }\n\n                    return;\n                }\n\n                const tab = tabs[0];\n                let subtitleFiles: File[];\n                let flatten = false;\n\n                if (message.data.command === 'sync') {\n                    const syncMessage = message.data as LegacyPlayerSyncMessage;\n                    subtitleFiles = [\n                        new File(\n                            [await (await fetch('data:text/plain;base64,' + syncMessage.subtitles.base64)).blob()],\n                            syncMessage.subtitles.name\n                        ),\n                    ];\n                } else if (message.data.command === 'syncv2') {\n                    const syncMessage = message.data as PlayerSyncMessage;\n                    subtitleFiles = await Promise.all(\n                        syncMessage.subtitles.map(\n                            async (s) =>\n                                new File([await (await fetch('data:text/plain;base64,' + s.base64)).blob()], s.name)\n                        )\n                    );\n                    flatten = syncMessage.flatten ?? false;\n                } else {\n                    console.error('Unknown message ' + message.data.command);\n                    return;\n                }\n\n                const subtitleFileName = subtitleFiles[0].name;\n                setFileName(subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')));\n                setSources({\n                    subtitleFiles: subtitleFiles,\n                    flattenSubtitleFiles: flatten,\n                    audioFile: undefined,\n                    audioFileUrl: undefined,\n                    videoFile: undefined,\n                    videoFileUrl: undefined,\n                });\n                setTab(tab);\n            } else if (message.data.command === 'edit-keyboard-shortcuts') {\n                setSettingsDialogOpen(true);\n                setSettingsDialogScrollToId('keyboard-shortcuts');\n            }\n        }\n\n        const unsubscribe = extension.subscribe(onMessage);\n        extension.startHeartbeat(false);\n        return unsubscribe;\n    }, [extension, inVideoPlayer]);\n\n    const handleAutoPauseModeChangedViaBind = useCallback((oldPlayMode: PlayMode, newPlayMode: PlayMode) => {\n        switch (newPlayMode) {\n            case PlayMode.autoPause:\n                setAlert('Auto-pause: On');\n                break;\n            case PlayMode.condensed:\n                setAlert('Condensed playback: On');\n                break;\n            case PlayMode.normal:\n                if (oldPlayMode === PlayMode.autoPause) {\n                    setAlert('Auto-pause: Off');\n                } else if (oldPlayMode === PlayMode.condensed) {\n                    setAlert('Condensed playback: Off');\n                }\n                break;\n        }\n\n        setAlertSeverity('info');\n        setAlertOpen(true);\n    }, []);\n\n    const handleDrop = useCallback(\n        (e: React.DragEvent) => {\n            if (ankiDialogOpen) {\n                return;\n            }\n\n            e.preventDefault();\n\n            if (inVideoPlayer) {\n                handleError('Video player cannot receive dropped files. Drop outside of the video frame instead.');\n                return;\n            }\n\n            setDragging(false);\n            dragEnterRef.current = null;\n\n            function allDirectories(items: DataTransferItemList) {\n                for (let i = 0; i < items.length; ++i) {\n                    if (!items[i].webkitGetAsEntry()?.isDirectory) {\n                        return false;\n                    }\n                }\n\n                return true;\n            }\n\n            if (e.dataTransfer.items && e.dataTransfer.items.length > 0 && allDirectories(e.dataTransfer.items)) {\n                handleDirectory(e.dataTransfer.items);\n            } else if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n                handleFiles(e.dataTransfer.files);\n            }\n        },\n        [inVideoPlayer, handleError, handleFiles, handleDirectory, ankiDialogOpen]\n    );\n\n    const handleFileInputChange = useCallback(() => {\n        const files = fileInputRef.current?.files;\n\n        if (files && files.length > 0) {\n            handleFiles(files);\n        }\n    }, [handleFiles]);\n\n    const handleFileSelector = useCallback(() => fileInputRef.current?.click(), []);\n\n    const handleDownloadSubtitleFilesAsSrt = useCallback(async () => {\n        if (sources.subtitleFiles === undefined) {\n            return;\n        }\n\n        const nonSupSubtitleFiles = sources.subtitleFiles.filter((f) => !f.name.endsWith('.sup'));\n\n        if (nonSupSubtitleFiles.length === 0) {\n            return;\n        }\n\n        download(\n            new Blob([await subtitleReader.filesToSrt(nonSupSubtitleFiles)], {\n                type: 'text/plain',\n            }),\n            `${fileName}.srt`\n        );\n    }, [fileName, sources.subtitleFiles, subtitleReader]);\n\n    const handleDragOver = useCallback(\n        (e: React.DragEvent<HTMLDivElement>) => {\n            if (ankiDialogOpen) {\n                return;\n            }\n\n            e.preventDefault();\n        },\n        [ankiDialogOpen]\n    );\n\n    const handleDragEnter = useCallback(\n        (e: React.DragEvent<HTMLDivElement>) => {\n            if (ankiDialogOpen) {\n                return;\n            }\n\n            e.preventDefault();\n            e.stopPropagation();\n\n            if (!inVideoPlayer) {\n                dragEnterRef.current = e.target as Element;\n                setDragging(true);\n            }\n        },\n        [inVideoPlayer, ankiDialogOpen]\n    );\n\n    const handleDragLeave = useCallback(\n        (e: React.DragEvent<HTMLDivElement>) => {\n            e.nativeEvent.preventDefault();\n            e.nativeEvent.stopPropagation();\n\n            if (!inVideoPlayer && dragEnterRef.current === e.target) {\n                setDragging(false);\n            }\n        },\n        [inVideoPlayer]\n    );\n\n    const handleSourcesLoaded = useCallback(() => setLoading(false), []);\n\n    useEffect(() => {\n        var view = searchParams.get('view');\n        if (view === 'settings') {\n            setSettingsDialogOpen(true);\n\n            if (location.hash && location.hash.startsWith('#')) {\n                const id = location.hash.substring(1, location.hash.length);\n                setSettingsDialogScrollToId(id);\n            }\n        }\n    }, [searchParams, location]);\n\n    useEffect(() => {\n        if (alertOpen && alert && alertSeverity) {\n            videoChannelRef.current?.alert(alert, alertSeverity);\n        }\n    }, [alert, alertSeverity, alertOpen]);\n\n    if (location.pathname === '/' && searchParams.get('video')) {\n        return <NavigateToVideo searchParams={searchParams} />;\n    }\n\n    const nothingLoaded =\n        (loading && !videoFrameRef.current) ||\n        (sources.subtitleFiles.length === 0 && !sources.audioFile && !sources.videoFile);\n    const appBarHidden = sources.videoFile !== undefined && ((theaterMode && !videoPopOut) || videoFullscreen);\n    const effectiveCopyHistoryOpen = copyHistoryOpen && !videoFullscreen;\n\n    return (\n        <ThemeProvider theme={theme}>\n            <CssBaseline />\n            <div\n                onDrop={handleDrop}\n                onDragOver={handleDragOver}\n                onDragEnter={handleDragEnter}\n                onDragLeave={handleDragLeave}\n            >\n                <Alert open={alertOpen} onClose={handleAlertClosed} autoHideDuration={3000} severity={alertSeverity}>\n                    {alert}\n                </Alert>\n                <Routes>\n                    <Route\n                        path=\"/video\"\n                        element={\n                            <>\n                                <RenderVideo\n                                    searchParams={searchParams}\n                                    settingsProvider={settingsProvider}\n                                    playbackPreferences={playbackPreferences}\n                                    extension={extension}\n                                    ankiDialogFinishedRequest={ankiDialogFinishedRequest}\n                                    onAnkiDialogRequest={handleAnkiDialogRequestFromVideoPlayer}\n                                    onError={handleError}\n                                    onPlayModeChangedViaBind={handleAutoPauseModeChangedViaBind}\n                                />\n                                <AnkiDialog\n                                    open={ankiDialogOpen}\n                                    disabled={ankiDialogDisabled}\n                                    audioClip={ankiDialogAudioClip}\n                                    image={ankiDialogImage}\n                                    source={itemSourceString(ankiDialogItem)}\n                                    url={ankiDialogItem?.url}\n                                    sliderContext={ankiDialogItemSliderContext}\n                                    customFields={settingsProvider.customAnkiFields}\n                                    anki={anki}\n                                    settingsProvider={settingsProvider}\n                                    onCancel={handleAnkiDialogCancel}\n                                    onRewind={handleAnkiDialogRewind}\n                                    onProceed={handleAnkiDialogProceed}\n                                    onViewImage={handleViewImage}\n                                />\n                                <ImageDialog open={imageDialogOpen} image={image} onClose={handleImageDialogClosed} />\n                            </>\n                        }\n                    />\n                    <Route\n                        path=\"/\"\n                        element={\n                            <div>\n                                <CopyHistory\n                                    items={copiedSubtitles}\n                                    open={effectiveCopyHistoryOpen}\n                                    drawerWidth={drawerWidth}\n                                    onClose={handleCloseCopyHistory}\n                                    onDelete={handleDeleteCopyHistoryItem}\n                                    onClipAudio={handleClipAudio}\n                                    onDownloadImage={handleDownloadImage}\n                                    onDownloadSectionAsSrt={handleDownloadCopyHistorySectionAsSrt}\n                                    onSelect={handleSelectCopyHistoryItem}\n                                    onAnki={handleAnki}\n                                />\n                                <AnkiDialog\n                                    open={ankiDialogOpen}\n                                    disabled={ankiDialogDisabled}\n                                    audioClip={ankiDialogAudioClip}\n                                    image={ankiDialogImage}\n                                    source={itemSourceString(ankiDialogItem)}\n                                    url={ankiDialogItem?.url}\n                                    sliderContext={ankiDialogItemSliderContext}\n                                    customFields={settingsProvider.customAnkiFields}\n                                    anki={anki}\n                                    settingsProvider={settingsProvider}\n                                    onCancel={handleAnkiDialogCancel}\n                                    onRewind={handleAnkiDialogRewind}\n                                    onProceed={handleAnkiDialogProceed}\n                                    onViewImage={handleViewImage}\n                                    onOpenSettings={handleOpenSettings}\n                                />\n                                <ImageDialog open={imageDialogOpen} image={image} onClose={handleImageDialogClosed} />\n                                <SettingsDialog\n                                    anki={anki}\n                                    extension={extension}\n                                    open={settingsDialogOpen}\n                                    onClose={handleCloseSettings}\n                                    settings={settingsProvider.settings}\n                                    scrollToId={settingsDialogScrollToId}\n                                />\n                                <Bar\n                                    title={fileName || 'asbplayer'}\n                                    drawerWidth={drawerWidth}\n                                    drawerOpen={effectiveCopyHistoryOpen}\n                                    hidden={appBarHidden}\n                                    subtitleFiles={sources.subtitleFiles}\n                                    onOpenCopyHistory={handleOpenCopyHistory}\n                                    onDownloadSubtitleFilesAsSrt={handleDownloadSubtitleFilesAsSrt}\n                                    onOpenSettings={handleOpenSettings}\n                                    onFileSelector={handleFileSelector}\n                                />\n                                <input\n                                    ref={fileInputRef}\n                                    onChange={handleFileInputChange}\n                                    type=\"file\"\n                                    accept=\".srt,.ass,.vtt,.sup,.mp3,.m4a,.aac,.flac,.ogg,.wav,.opus,.mkv,.mp4,.avi\"\n                                    multiple\n                                    hidden\n                                />\n                                <Content drawerWidth={drawerWidth} drawerOpen={effectiveCopyHistoryOpen}>\n                                    {nothingLoaded && (\n                                        <LandingPage\n                                            latestExtensionVersion={latestExtensionVersion}\n                                            extensionUrl={extensionUrl}\n                                            extension={extension}\n                                            loading={loading}\n                                            dragging={dragging}\n                                            appBarHidden={appBarHidden}\n                                            onFileSelector={handleFileSelector}\n                                        />\n                                    )}\n                                    <DragOverlay dragging={dragging} appBarHidden={appBarHidden} loading={loading} />\n                                    <Player\n                                        subtitleReader={subtitleReader}\n                                        settingsProvider={settingsProvider}\n                                        playbackPreferences={playbackPreferences}\n                                        onCopy={handleCopy}\n                                        onError={handleError}\n                                        onUnloadAudio={handleUnloadAudio}\n                                        onUnloadVideo={handleUnloadVideo}\n                                        onLoaded={handleSourcesLoaded}\n                                        onTabSelected={handleTabSelected}\n                                        onAnkiDialogRequest={handleAnkiDialogRequest}\n                                        onAppBarToggle={handleAppBarToggle}\n                                        onFullscreenToggle={handleFullscreenToggle}\n                                        onHideSubtitlePlayer={handleHideSubtitlePlayer}\n                                        onVideoPopOut={handleVideoPopOut}\n                                        onPlayModeChangedViaBind={handleAutoPauseModeChangedViaBind}\n                                        tab={tab}\n                                        availableTabs={availableTabs}\n                                        sources={sources}\n                                        jumpToSubtitle={jumpToSubtitle}\n                                        rewindSubtitle={rewindSubtitle}\n                                        videoFrameRef={videoFrameRef}\n                                        videoChannelRef={videoChannelRef}\n                                        extension={extension}\n                                        drawerOpen={effectiveCopyHistoryOpen}\n                                        appBarHidden={appBarHidden}\n                                        videoFullscreen={videoFullscreen}\n                                        hideSubtitlePlayer={hideSubtitlePlayer || videoFullscreen}\n                                        videoPopOut={videoPopOut}\n                                        disableKeyEvents={disableKeyEvents}\n                                        ankiDialogRequested={ankiDialogRequested}\n                                        ankiDialogFinishedRequest={ankiDialogFinishedRequest}\n                                        keyBinder={keyBinder}\n                                    />\n                                </Content>\n                            </div>\n                        }\n                    />\n                </Routes>\n            </div>\n        </ThemeProvider>\n    );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import '@fontsource/roboto';\nimport { createRoot } from 'react-dom/client';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\n\ncreateRoot(document.querySelector('#root')!).render(\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <App />\n    </BrowserRouter>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}