{"version":3,"sources":["hooks/useWindowSize/index.ts","../../common/src/KeyBinder.ts","../../common/src/Mp3Encoder.ts","../../common/src/mp3-encoder.js","../../common/src/Util.ts","../../common/src/AudioClip.ts","../../common/src/Model.ts","../../common/src/CanvasResizer.ts","../../common/src/Image.ts","../../common/src/Fetcher.ts","../../common/src/Anki.ts","../../common/src/SubtitleCollection.ts","components/Alert.tsx","../../common/components/src/TagsTextField.tsx","../../common/components/src/ImageDialog.tsx","../../common/components/src/SubtitleTextImage.tsx","../../common/components/src/AnkiDialog.tsx","components/background-colored.png","components/DragOverlay.tsx","services/SubtitleReader.ts","components/Bar.tsx","services/Util.ts","components/CopyHistory.tsx","components/LandingPage.tsx","services/BroadcastChannelVideoProtocol.ts","services/ChromeTabVideoProtocol.ts","services/Clock.ts","components/Controls.tsx","services/MediaAdapter.ts","components/SubtitlePlayer.tsx","services/VideoChannel.ts","components/Player.tsx","components/CustomFieldDialog.tsx","components/SettingsDialog.tsx","services/SettingsProvider.ts","services/PlayerChannel.ts","services/AppKeyBinder.ts","components/VideoPlayer.tsx","services/ChromeExtension.ts","services/ChromeExtensionProvider.ts","services/PlaybackPreferences.ts","components/App.tsx","reportWebVitals.js","index.tsx"],"names":["useWindowSize","enabled","useState","size","setSize","useLayoutEffect","updateSize","window","innerWidth","innerHeight","addEventListener","removeEventListener","DefaultKeyBinder","keyBindSet","this","onCopy","disabledGetter","subtitleGetter","useCapture","shortcut","copySubtitle","keys","handler","copyHandler","hotkeys","capture","unbind","event","subtitle","onAnkiExport","ankiExport","ankiExportHandler","onUpdateLastCard","updateLastCard","updateLastCardHandler","onSeekToSubtitle","timeGetter","subtitlesGetter","delegate","forward","subtitles","length","_adjacentSubtitle","start","end","previousShortcut","seekToPreviousSubtitle","nextShortcut","seekToNextSubtitle","previousHandler","nextHandler","onSeekToBeginningOfCurrentSubtitle","seekToBeginningOfCurrentSubtitle","_currentSubtitle","undefined","time","currentSubtitle","now","minDiff","Number","MAX_SAFE_INTEGER","i","s","diff","onSeekBackwardOrForward","backShortcut","seekBackward","seekForward","backHandler","onOffsetChange","subtitleStart","originalStart","adjustOffsetToPreviousSubtitle","adjustOffsetToNextSubtitle","adjacentSubtitleIndex","Math","max","increase","currentOffset","decreaseShortcut","decreaseOffset","increaseShortcut","increaseOffset","decreaseHandler","increaseHandler","onToggleSubtitles","toggleSubtitles","onToggleSubtitleTrack","shortcuts","toggleVideoSubtitleTrack1","toggleVideoSubtitleTrack2","filter","track","handlers","push","onToggleSubtitleTrackInList","toggleAsbplayerSubtitleTrack1","toggleAsbplayerSubtitleTrack2","onPlay","togglePlay","onAutoPause","toggleAutoPause","toggleCondensedPlayback","Mp3Encoder","blob","workerFactory","Promise","resolve","reject","a","reader","FileReader","onload","e","audioContext","AudioContext","target","Error","decodeAudioData","result","audioBuffer","channels","numberOfChannels","getChannelData","worker","postMessage","command","sampleRate","onmessage","Blob","data","buffer","type","terminate","onerror","error","message","readAsArrayBuffer","Worker_fn","Worker","humanReadableTime","timestamp","seconds","nearestTenth","totalSeconds","floor","round","minutes","hours","String","padStart","surroundingSubtitles","index","countRadius","timeRadius","startIndex","atBoundary","endIndex","slice","mockSurroundingSubtitles","middleSubtitle","maxTimestamp","offset","afterTimestamp","min","text","originalEnd","beforeTimestamp","unshift","initialIndex","sign","next","abs","download","name","url","URL","createObjectURL","document","createElement","body","appendChild","style","display","href","sanitize","click","revokeObjectURL","remove","PostMineAction","AutoPausePreference","PlayMode","defaultMp3WorkerFactory","Base64AudioData","baseName","base64","extension","_name","_base64","_extension","cachedBlob","_blob","audio","Audio","src","preload","load","play","setTimeout","pause","fetch","FileAudioData","file","trackId","recorderMimeType","_recorderConfiguration","recorderExtension","readAsDataURL","onloadend","substring","indexOf","_clipAudio","_audioElement","currentTime","_stopAudio","oncanplay","stream","_captureStream","recorder","MediaRecorder","mimeType","chunks","ondataavailable","onstop","stop","getAudioTracks","source","selectTrack","onloadedmetadata","audioTracks","t","id","captureStream","mozCaptureStream","audioStream","MediaStream","getVideoTracks","addTrack","AUDIO_TYPES","Object","isTypeSupported","map","Mp3AudioData","encode","isSliceable","AudioClip","mp3WorkerFactory","subtitleFileName","lastIndexOf","CanvasResizer","canvas","ctx","maxWidth","maxHeight","widthRatio","width","heightRatio","height","ratio","newWidth","newHeight","createImageBitmap","resizeWidth","resizeHeight","then","sprite","drawImage","catch","Base64ImageData","_dataUrl","FileImageData","_canvas","dataUrl","toDataURL","toBlob","video","_videoElement","videoWidth","videoHeight","getContext","resizer","resize","Image","bitMap","imageName","HttpFetcher","method","JSON","stringify","response","json","ankiQuerySpecialCharacters","Anki","settingsProvider","fetcher","ankiConnectUrl","_executeAction","modelName","word","query","wordField","_escapeQuery","escaped","char","includes","definition","audioClip","image","customFieldValues","tags","mode","fields","_appendField","sentenceField","definitionField","sourceField","urlField","customFieldName","customAnkiFields","params","note","deckName","deck","noteType","options","allowDuplicate","duplicateScope","duplicateScopeOptions","checkChildren","gui","updateLast","audioField","sanitizedName","_sanitizeFileName","_storeMediaFile","fileName","filename","imageField","recentNotes","sort","lastNoteId","notes","infoResponse","noteId","info","value","fieldName","multiline","newValue","split","join","existingValue","replacement","action","version","SubtitleCollection","tree","gapsTree","IntervalTree","returnLastShown","returnNextToShow","last","insert","lastShown","nextToShow","startedShowing","willStopShowing","interval","showing","search","gapIntervals","nextStart","high","showingCheckRadiusMs","emptySubtitleCollection","useAlertStyles","makeStyles","root","justifyContent","position","top","pointerEvents","zIndex","Alert","props","classes","useEffect","open","timeout","onClose","autoHideDuration","clearTimeout","className","Grow","in","severity","children","TagsTextField","onTagsChange","setValue","handleChange","useCallback","currentValue","endsWith","newTags","splitTags","tag","trim","extractTagsFromString","TextField","onChange","useStyles","theme","backgroundSize","ImageDialog","resizeRatio","setDataUrl","setWidth","setHeight","windowWidth","windowHeight","img","fetchImage","Dialog","Card","CardMedia","title","SubtitleTextImage","availableWidth","scale","textImage","screen","alt","marginBottom","spacing","flexGrow","mediaField","cursor","rangeSelectSlider","transform","sliderMarksFromSliderContext","sliderContext","boundary","seenTimestamps","label","mark","sliderValueLabelFormat","ms","subtitleIntersectsTimeInterval","ValueLabelComponent","Tooltip","enterTouchDelay","placement","useTextImageSetStyles","padding","backgroundColor","palette","disabledBackground","TextImageSet","selectedSubtitles","Paper","elevation","TextFieldEndAdornment","withStyles","InputAdornment","AnkiDialog","disabled","initialText","onProceed","onRewind","onCancel","onViewImage","onOpenSettings","onRerecord","initialAudioClip","initialSource","initialUrl","customFields","anki","initialDefinition","initialWord","initialCustomFieldValues","initialSelectedTimestampInterval","timestampInterval","forceTimestampBoundaryInterval","timestampBoundaryInterval","forceInitialTimestampInterval","initialTimestampInterval","initialLastAppliedTimestampIntervalToText","lastAppliedTimestampIntervalToText","initialLastAppliedTimestampIntervalToAudio","lastAppliedTimestampIntervalToAudio","stateRef","setDefinition","setText","setWord","lastSearchedWord","setLastSearchedWord","setSource","setTags","setUrl","duplicateNotes","setDuplicateNotes","wordTimestamp","setWordTimestamp","setCustomFieldValues","setTimestampInterval","setSelectedSubtitles","setInitialTimestampInterval","initialTimestampBoundaryInterval","setInitialTimestampBoundaryInterval","setTimestampBoundaryInterval","timestampMarks","setTimestampMarks","setLastAppliedTimestampIntervalToText","setLastAppliedTimestampIntervalToAudio","setAudioClip","dialogRefCallback","element","getBoundingClientRect","current","textForTimestampInterval","subtitleEnd","findIndex","subtitlesToDisplay","boundaryIntervalFromSliderContext","newAudioClip","preferMp3","toMp3","audioPaddingStart","audioPaddingEnd","Date","trimmedWord","findNotesWithWord","console","wordHelperText","handlePlayAudio","preventDefault","stopPropagation","handleCustomFieldChange","newCustomFieldValues","assign","handleViewImage","handleApplyTimestampIntervalToText","newText","handleTimestampIntervalChange","newTimestampInterval","expectedUnchangedText","handleApplyTimestampIntervalToAudio","handleResetTimestampInterval","handleZoomInTimestampInterval","newTimestampBoundaryInterval","handleZoomOutTimestampInterval","handleCopyImageToClipboard","navigator","clipboard","ClipboardItem","pngBlob","write","disableApplyTextSelection","audioActionElement","IconButton","onClick","edge","disableEnforceFocus","fullWidth","Toolbar","Typography","variant","DialogContent","ref","color","maxRows","InputProps","endAdornment","rows","helperText","findNotesWithWordGui","Grid","container","direction","item","Slider","valueLabelFormat","marks","step","valueLabelDisplay","marginTop","DialogActions","Button","dragging","appBarHidden","transparentBackground","content","flexDirection","alignItems","textAlign","backgroundRepeat","backgroundPosition","backgroundImage","coloredBackground","backgroundBlendMode","background","DragOverlay","loading","Fade","tagRegex","RegExp","assNewLineRegex","helperElement","helperCanvas","SubtitleReader","xmlParser","files","all","f","_subtitles","flatMap","nodes","n1","n2","parseSrt","node","cue","replace","isFromNetflix","parser","WebVTT","Parser","StringDecoder","cues","oncue","c","lines","newLines","line","_fixRTL","onflush","startTime","endTime","parse","flush","parseAss","dialogues","dialogue","slices","fragments","fragment","xml","_xmlParser","textNodes","elm","parseFloat","_decodeHTML","pipeThrough","parseDisplaySets","pipeTo","_displaySetsToSubtitles","imageDataArray","currentImageDisplaySet","WritableStream","displaySet","controller","objectDefinitionSegments","screenWidth","presentationCompositionSegment","screenHeight","Uint8ClampedArray","imageData","putImageData","header","presentationTimestamp","endDefinitionSegment","index1","index2","newLine","innerHTML","childNodes","nodeValue","XMLParser","ignoreAttributes","subtitleNode","writeSrt","format","subtitlesToSrt","leftButton","marginRight","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","drawerWidth","easeOut","enteringScreen","copyHistoryButton","copyHistoryButtonShift","hide","useCopyHistoryTooltipStyles","tooltip","show","CopyHistoryTooltip","toolTipProps","Bar","drawerOpen","hidden","subtitleFiles","onOpenCopyHistory","onFileSelector","onDownloadSubtitleFilesAsSrt","menuOpen","setMenuOpen","menuAnchorEl","setMenuAnchorEl","canSaveAsSrt","find","handleFileAction","currentTarget","handleMenuClose","handleOpenFilesFromMenu","handleDownloadSubtitleFilesAsSrt","Popover","anchorEl","anchorOrigin","vertical","horizontal","ListItem","button","AppBar","clsx","disableFocusListener","disableHoverListener","disableTouchListener","component","rel","computeStyles","subtitleColor","subtitleSize","subtitleOutlineThickness","subtitleOutlineColor","subtitleBackgroundOpacity","subtitleBackgroundColor","subtitleFontFamily","styles","fontSize","thickness","opacity","hex","exec","r","parseInt","g","b","hexToRgb","timeDurationDisplay","milliseconds","totalMilliseconds","includeMilliseconds","secs","mins","hrs","pad","n","zeros","drawer","flexShrink","drawerPaper","drawerHeader","mixins","toolbar","listContainer","overflowY","overflowX","listItem","hover","listItemGutters","paddingLeft","paddingRight","listItemIconRoot","minWidth","emptyState","emptyText","secondary","Menu","onSelect","onClipAudio","onDownloadImage","onDelete","handleCopy","writeText","handleJumpTo","handleClipAudio","handleDownloadImage","handleDelete","transformOrigin","ListItemText","primaryTypographyProps","primary","videoFile","audioFile","CopyHistory","scrollToBottomRefCallback","scrollIntoView","menuItem","setMenuItem","handleMenu","handleMenuClosed","items","currentKey","lastSeenItemName","itemNameCounters","itemsBySection","key","ListItemSecondaryAction","onDownloadSectionAsSrt","gutters","ListItemIcon","onAnki","wrap","Fragment","Drawer","anchor","paper","Divider","browseLink","LandingPage","latestExtensionVersion","extensionUrl","installedExtensionVersion","setInstalledExtensionVersion","fetchInstalledExtensionVersion","extensionUpdateAvailable","gt","extensionNotInstalled","Link","BroadcastChannelVideoProtocol","channelId","channel","onMessage","BroadcastChannel","that","close","ChromeTabVideoProtocol","tabId","listener","unsubscribeFromExtension","subscribe","sendMessage","Clock","accumulated","started","useControlStyles","left","bottom","buttonContainer","timeDisplay","marginLeft","offsetInput","volumeInputContainerShown","short","volumeInputContainerHidden","volumeInputHidden","volumeInputShown","volumeInputThumbHidden","volumeInputThumbShown","subContainer","inactiveButton","inactiveTopButton","progress","margin","topButton","gridContainer","useProgressBarStyles","mouseEventListener","fillContainer","fillContainerThick","easeInOut","fill","handleContainer","handle","borderRadius","handleOn","shortest","VolumeSlider","verticalAlign","thumb","boxShadow","active","displayTime","secondsInMinute","ProgressBar","onSeek","mouseOver","setMouseOver","containerRef","useRef","handleClick","rect","right","pageX","handleMouseOver","handleMouseOut","progressWidth","elementWidth","fillStyle","handleStyle","fillContainerClassName","handleClassName","onMouseOver","onMouseOut","AudioTrackSelector","selectedAudioTrack","onAudioTrackSelected","list","selected","language","TabSelector","tabs","selectedTab","onTabSelected","MediaUnloader","onUnload","PlayModeSelector","selectedPlayMode","onPlayMode","normal","condensed","autoPause","Controls","clock","playing","offsetEnabled","displayLength","mousePositionRef","onShow","onPause","onUnloadAudio","onUnloadVideo","onVolumeChange","disableKeyEvents","playbackPreferences","closeEnabled","volumeEnabled","playMode","playModeEnabled","subtitlesEnabled","subtitlesToggle","onSubtitlesToggle","popOutEnabled","popOut","onPopOutToggle","fullscreenEnabled","fullscreen","onFullscreenToggle","hideSubtitlePlayerToggleEnabled","subtitlePlayerHidden","onHideSubtitlePlayerToggle","showOnMouseMovement","theaterModeToggleEnabled","theaterModeEnabled","onTheaterModeToggle","setShow","audioTrackSelectorOpen","setAudioTrackSelectorOpen","audioTrackSelectorAnchorEl","setAudioTrackSelectorAnchorEl","tabSelectorOpen","setTabSelectorOpen","tabSelectorAnchorEl","setTabSelectorAnchorEl","audioUnloaderOpen","setAudioUnloaderOpen","audioUnloaderAnchorEl","setAudioUnloaderAnchorEl","videoUnloaderOpen","setVideoUnloaderOpen","videoUnloaderAnchorEl","setVideoUnloaderAnchorEl","playModeSelectorOpen","setPlayModeSelectorOpen","playModeSelectorAnchorEl","setPlayModeSelectorAnchorEl","showVolumeBar","setShowVolumeBar","volume","setVolume","lastCommittedVolume","setLastCommittedVolume","lastMousePositionRef","x","y","lastShowTimestampRef","lastOffsetInputChangeTimestampRef","lastShowRef","forceShowRef","offsetInputRef","closeButtonRef","updateState","forceUpdate","handleSeek","savedVolume","setInterval","currentShow","pow","offsetTop","offsetHeight","activeElement","clearInterval","handleKey","isNaN","blur","handleOffsetInputClicked","inputElement","setSelectionRange","offsetSeconds","toFixed","handleAudioTrackSelectorClosed","handleAudioTrackSelectorOpened","handleAudioTrackSelected","handleTabSelectorClosed","handleTabSelectorOpened","handleTabSelected","tab","handleAudioUnloaderClosed","handleAudioUnloaderOpened","handleUnloadAudio","handleVideoUnloaderClosed","handleVideoUnloaderOpened","handleUnloadVideo","handlePlayModeSelectorClosed","handlePlayModeSelectorOpened","handlePlayModeSelected","handleVolumeMouseOut","handleVolumeMouseOver","handleVolumeChange","handleVolumeChangeCommitted","handleVolumeToggle","newVolume","onChangeCommitted","defaultValue","Input","inputRef","disableUnderline","placeholder","MediaAdapter","readyResolves","_onMediaCanPlay","callback","readyState","useSubtitlePlayerStyles","default","compressed","table","noSubtitles","useSubtitleRowStyles","subtitleRow","overflowWrap","whiteSpace","compressedSubtitle","disabledSubtitle","copyButton","SubtitleRow","React","memo","subtitleRef","onClickSubtitle","onCopySubtitle","copyButtonEnabled","tableRowProps","textRef","textSelected","setTextSelected","disabledClassName","availWidth","TableRow","onMouseUp","selection","getSelection","isSameNode","anchorNode","parentNode","TableCell","SubtitlePlayer","onStartedShowing","onWillStopShowing","subtitleCollection","jumpToSubtitle","displayHelp","lastJumpToTopTimestamp","disabledSubtitleTracks","keyBinder","playingRef","clockRef","subtitleRefs","useMemo","Array","_","createRef","subtitleCollectionRef","empty","subtitleRefsRef","disableKeyEventsRef","selectedSubtitleIndexes","setSelectedSubtitleIndexes","selectedSubtitleIndexesRef","lengthRef","hiddenRef","lastScrollTimestampRef","requestAnimationRef","startedShowingSubtitleRef","onStartedShowingRef","willStopShowingSubtitleRef","onWillStopShowingRef","requestAnimationFrame","update","smallestIndex","currentSubtitleIndexes","subtitlesAt","keysAreEqual","scrollToSubtitleRef","allowScroll","block","inline","behavior","cancelAnimationFrame","scrollToCurrentSubtitle","indexes","scrollIfVisible","visibilityState","firstSubtitleRef","bindAdjustOffset","bindOffsetToSubtitle","bindSeekToSubtitle","bindSeekToBeginningOfCurrentSubtitle","bindSeekBackwardOrForward","handleScroll","jumpToIndex","calculateSurroundingSubtitlesForIndex","surroundingSubtitlesCountRadius","surroundingSubtitlesTimeRadius","calculateSurroundingSubtitles","calculateCurrentSubtitle","subtitleIndexes","bindCopy","none","bindToggleSubtitleTrackInList","bindAnkiExport","showAnkiDialog","bindUpdateLastCard","subtitleTable","TableContainer","Table","TableBody","square","VideoChannel","protocol","isReady","readyCallbacks","playCallbacks","pauseCallbacks","audioTrackSelectedCallbacks","currentTimeCallbacks","exitCallbacks","offsetCallbacks","popOutToggleCallbacks","copyCallbacks","playModeCallbacks","hideSubtitlePlayerToggleCallbacks","appBarToggleCallbacks","ankiDialogRequestCallbacks","toggleSubtitleTrackInListCallbacks","readyMessage","paused","readyStateMessage","Event","playMessage","echo","pauseMessage","audioTrackSelectedMessage","currentTimeMessage","offsetMessage","copyMessage","postMineAction","preventDuplicate","ankiDialogRequestMessage","forwardToVideo","toggleSubtitleTrackInListMessage","subtitleFileNames","names","settings","resume","videoFrame","border","trackLength","audioRef","videoRef","useOffset","subtitlesLength","audioLength","videoLength","Player","sources","audioFileUrl","videoFileUrl","subtitleReader","videoFrameRef","videoChannelRef","videoPopOut","availableTabs","ankiDialogRequestToVideo","ankiDialogRequested","ankiDialogFinishedRequest","onError","onLoaded","onAnkiDialogRequest","onAppBarToggle","onVideoPopOut","onPlayModeChangedViaBind","rewindSubtitle","setPlayMode","playModeRef","setSubtitles","subtitlesRef","Boolean","loadingSubtitles","setLoadingSubtitles","setPlaying","setLastJumpToTopTimestamp","setOffset","setAudioTracks","setSelectedAudioTrack","setChannelId","setResumeOnFinishedAnkiDialogRequest","hideSubtitlePlayer","setHideSubtitlePlayer","hideSubtitlePlayerRef","setDisabledSubtitleTracks","mediaAdapter","seek","forwardToMedia","setTime","applyOffset","newSubtitles","installed","lte","channelClosed","onReady","uuidv4","init","subscribed","onExit","hideSubtitlePlayerToggle","ready","subtitleSettings","ankiSettings","miscSettings","onOffset","fromVideo","onCurrentTime","tracks","newTracks","ankiDialogRequest","finishedAnkiDialogRequest","resumeOnFinishedAnkiDialogRequest","seeking","expectedSeekTime","nextSubtitle","t0","handleOnStartedShowingSubtitle","autoPausePreference","atStart","handleOnWillStopShowingSubtitle","atEnd","process","encodeURIComponent","handlePlay","handlePause","handleSeekToSubtitle","shouldPlay","handleCopyFromSubtitlePlayer","handleMouseMove","screenX","screenY","audioTrackSelected","handleOffsetChange","HTMLMediaElement","handlePlayMode","handleToggleSubtitleTrack","bindPlay","togglePlayMode","newPlayMode","bindAutoPause","bindCondensedPlayback","unbindCopy","unbindAnkiExport","appBarToggle","loaded","videoInWindow","onMouseMove","CustomFieldDialog","existingCustomFieldNames","setFieldName","fieldExists","DialogTitle","subtitleSetting","subtitlePreview","subtitlePreviewInput","outline","addFieldButton","switchLabel","useSelectableSettingStyles","formControl","SelectableSetting","selections","removable","onSelectionChange","onRemoval","FormControl","InputLabel","Select","MenuItem","keyBindProperties","extensionOverridden","modifierKeyReplacements","isMacOs","modifierKeys","useKeyBindFieldStyles","labelItem","KeyBindField","onKeysChange","onOpenExtensionShortcuts","currentKeyString","setCurrentKeyString","currentKeyStringRef","onKeysChangeRef","editing","setEditing","handleEditKeyBinding","nativeEvent","detail","pressed","getPressedKeyString","isAModifier","isBModifier","keyup","contains","xs","contentEditable","SettingsDialog","scrollToId","setAnkiConnectUrl","ankiConnectUrlError","setAnkiConnectUrlError","ankiConnectUrlChangeTimestamp","setAnkiConnectUrlChangeTimestamp","setDeck","deckNames","setDeckNames","setNoteType","modelNames","setModelNames","setSentenceField","setDefinitionField","setAudioField","setImageField","setWordField","setSourceField","setUrlField","setCustomFields","setPreferMp3","fieldNames","setFieldNames","customFieldDialogOpen","setCustomFieldDialogOpen","setAudioPaddingStart","setAudioPaddingEnd","maxImageWidth","setMaxImageWidth","maxImageHeight","setMaxImageHeight","setSurroundingSubtitlesCountRadius","setSurroundingSubtitlesTimeRadius","setSubtitleColor","setSubtitleSize","setSubtitleOutlineColor","setSubtitleOutlineThickness","setSubtitleBackgroundColor","setSubtitleBackgroundOpacity","setSubtitleFontFamily","imageBasedSubtitleScaleFactor","setImageBasedSubtitleScaleFactor","setSubtitlePreview","themeType","setThemeType","copyToClipboardOnMine","setCopyToClipboardOnMine","setAutoPausePreference","setKeyBindSet","rememberSubtitleOffset","setRememberSubtitleOffset","handleAnkiConnectUrlChange","handleRetryAnkiConnectUrl","handleDeckChange","handleDeckSelectionChange","handleNoteTypeChange","handleNoteTypeSelectionChange","handleSentenceFieldChange","handleSentenceFieldSelectionChange","handleDefinitionFieldChange","handleDefinitionFieldSelectionChange","handleAudioFieldChange","handleAudioFieldSelectionChange","handleImageFieldChange","handleImageFieldSelectionChange","handleWordFieldChange","handleWordFieldSelectionChange","handleSourceFieldChange","handleSourceFieldSelectionChange","handleUrlFieldChange","handleUrlFieldSelectionChange","handleAudioPaddingStart","handleAudioPaddingEnd","handleMaxImageWidth","handleMaxImageHeight","handleSurroundingSubtitlesCountRadius","handleSurroundingSubtitlesTimeRadius","handleSubtitleColorChange","handleSubtitleSizeChange","handleSubtitleOutlineColorChange","handleSubtitleOutlineThicknessChange","handleSubtitleBackgroundColorChange","handleSubtitleBackgroundOpacityChange","handleSubtitleFontFamilyChange","handleSubtitlePreviewChange","handleImageBasedSubtitleScaleFactorChange","handleAddCustomField","oldCustomFields","newCustomFields","handleCustomFieldRemoval","handleTagsChange","handlePreferMp3Change","checked","handleThemeTypeChange","handleCopyToClipboardOnMine","handleAutoPausePreferenceChange","handleKeysChange","keyBindName","newKeyBindSet","handleRememberSubtitleOffsetChange","subtitlePreviewStyles","canceled","requestPermission","refreshFieldNames","modelFieldNames","handleClose","customFieldInputs","getElementById","FormLabel","FormGroup","FormHelperText","location","hostname","FormControlLabel","control","Switch","labelPlacement","inputProps","RadioGroup","row","Radio","properties","extensionCommands","openShortcuts","defaultAutoPausePreference","defaultKeyBindSet","ankiConnectUrlKey","deckKey","noteTypeKey","sentenceFieldKey","definitionFieldKey","audioFieldKey","imageFieldKey","wordFieldKey","sourceFieldKey","urlFieldKey","customAnkiFieldsKey","tagsKey","subtitleSizeKey","subtitleColorKey","subtitleOutlineThicknessKey","subtitleOutlineColorKey","subtitleBackgroundColorKey","subtitleBackgroundOpacityKey","subtitleFontFamilyKey","subtitlePreviewKey","imageBasedSubtitleScaleFactorKey","audioPaddingStartKey","audioPaddingEndKey","maxImageWidthKey","maxImageHeightKey","surroundingSubtitlesCountRadiusKey","surroundingSubtitlesTimeRadiusKey","preferMp3Key","themeTypeKey","copyToClipboardOnMineKey","autoPausePreferenceKey","keyBindSetKey","rememberSubtitleOffsetKey","SettingsProvider","_tags","_keyBindSet","newSettings","localStorage","getItem","removeItem","setItem","_setOptionalItem","ankiFieldsString","tagsString","_getNumberItem","serialized","PlayerChannel","closeCallbacks","subtitlesCallbacks","finishedAnkiDialogRequestCallbacks","subtitleSettingsCallbacks","miscSettingsCallbacks","ankiSettingsCallbacks","subtitlesMessage","subtitleSettingsMessage","playModeMessage","hideSubtitlePlayerToggleMessage","appBarToggleMessage","finishedAnkiDialogRequestMessage","ankiSettingsMessage","miscSettingsMessage","playbackRate","AppKeyBinder","defaultKeyBinder","copyHandlers","ankiExportHandlers","updateLastCardHandlers","onExtensionMessage","h","KeyboardEvent","_remove","splice","bindToggleSubtitles","bindToggleSubtitleTrackInVideo","onCondensedPlayback","overflow","cursorHidden","subtitleContainer","lineHeight","notifyReady","playerChannel","outerWidth","availHeight","outerHeight","resizeTo","selectedTrack","VideoPlayer","poppingInRef","fullscreenElement","setFullscreen","useFullscreen","fullscreenRef","setLength","showSubtitles","setShowSubtitles","startedShowingSubtitle","setStartedShowingSubtitle","willStopShowingSubtitle","setWillStopShowingSubtitle","setSubtitlesEnabled","setSubtitlePlayerHidden","theaterMode","setAppBarHidden","showSubtitlesRef","showCursor","setShowCursor","lastMouseMovementTimestamp","alert","setAlert","alertOpen","setAlertOpen","returnToFullscreenOnFinishedAnkiDialogRequest","setReturnToFullscreenOnFinishedAnkiDialogRequest","returnToFullscreenOnFinishedAnkiDialogRequestRef","setMiscSettings","setSubtitleSettings","setAnkiSettings","videoRefCallback","videoElement","onloadeddata","ontimeupdate","code","errorMessage","selectAudioTrack","updateSubtitlesWithOffset","onSubtitles","exitFullscreen","onFinishedAnkiDialogRequest","requestFullscreen","onSubtitleSettings","onMiscSettings","onAnkiSettings","onbeforeunload","equals","arrayEquals","s1","s2","copy","toggleSubtitleTrackInList","extractSubtitles","noSubtitleCallback","subtitleCallback","handleSubtitlesToggle","handleFullscreenToggle","handlePopOutToggle","popOutToggle","handleHideSubtitlePlayerToggle","handleTheaterModeToggle","handleDoubleClick","handleAlertClosed","subtitleStyles","bounds","clientX","clientY","controls","onDoubleClick","isMobile","ChromeExtension","windowEventListener","onMessageCallbacks","onTabsCallbacks","heartbeatStarted","sender","tabsCommand","ackRequested","receivedTabs","_sendHeartbeat","callbacks","keyBindNameMap","ChromeExtensionProvider","translatedCommands","extensionCommandName","volumeKey","theaterModeKey","offsetKey","PlaybackPreferences","useContentStyles","contentShift","audioClipFromItem","paddingStart","paddingEnd","fromBase64","subtitleFile","fromFile","audioTrack","imageFromItem","mediaTimestamp","itemSourceString","NavigateToVideo","searchParams","get","to","RenderVideo","Content","App","createTheme","main","red","A400","useLocation","useSearchParams","inVideoPlayer","pathname","extensionProvider","setExtension","onChromeExtension","drawerRatio","minDrawerSize","copiedSubtitles","setCopiedSubtitles","copiedSubtitlesRef","copyHistoryOpen","setCopyHistoryOpen","setTheaterMode","setVideoPopOut","alertSeverity","setAlertSeverity","setJumpToSubtitle","setRewindSubtitle","setSources","setLoading","setDragging","dragEnterRef","setFileName","ankiDialogOpen","setAnkiDialogOpen","ankiDialogDisabled","setAnkiDialogDisabled","ankiDialogItem","setAnkiDialogItem","ankiDialogItemSliderContext","itemSliderContext","ankiDialogAudioClip","ankiDialogImage","setAnkiDialogRequestToVideo","setAnkiDialogRequested","setAnkiDialogFinishedRequest","settingsDialogOpen","setSettingsDialogOpen","settingsDialogScrollToId","setSettingsDialogScrollToId","imageDialogOpen","setImageDialogOpen","setDisableKeyEvents","setImage","setTab","setAvailableTabs","fileInputRef","ankiDialogRequestedRef","handleError","handleAnkiDialogRequest","handleAnkiDialogProceed","export","newCopiedSubtitle","newCopiedSubtitles","handleOpenCopyHistory","handleCloseCopyHistory","handleAppBarToggle","handleVideoPopOut","handleOpenSettings","handleImageDialogClosed","handleCloseSettings","handleDeleteCopyHistoryItem","previous","clip","handleDownloadCopyHistorySectionAsSrt","deduplicated","toISOString","handleSelectCopyHistoryItem","handleAnki","handleAnkiDialogCancel","handleAnkiDialogRewind","subscribeTabs","t1","t2","handleFiles","extensionStartIndex","extractSources","revokeUrls","handleDirectory","fileSystemEntry","webkitGetAsEntry","isDirectory","fileSystemDirectoryEntry","createReader","readEntries","entries","filePromises","unsubscribe","startHeartbeat","syncMessage","File","handleAutoPauseModeChangedViaBind","oldPlayMode","handleDrop","dataTransfer","allDirectories","handleFileInputChange","handleFileSelector","nonSupSubtitleFiles","filesToSrt","handleDragOver","handleDragEnter","handleDragLeave","handleSourcesLoaded","hash","startsWith","nothingLoaded","ThemeProvider","CssBaseline","onDrop","onDragOver","onDragEnter","onDragLeave","path","accept","multiple","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","createRoot","querySelector","render","basename"],"mappings":"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","file":"static/js/main.7c11ec91.chunk.js","sourcesContent":["import { useLayoutEffect, useState } from 'react';\n\n// https://stackoverflow.com/questions/19014250/rerender-view-on-browser-resize-with-react\nexport function useWindowSize(enabled: boolean) {\n    const [size, setSize] = useState([0, 0]);\n\n    useLayoutEffect(() => {\n        function updateSize() {\n            if (enabled) {\n                setSize([window.innerWidth, window.innerHeight]);\n            }\n        }\n\n        window.addEventListener('resize', updateSize);\n        updateSize();\n\n        return () => window.removeEventListener('resize', updateSize);\n    }, [enabled]);\n\n    return size;\n}\n","import { SubtitleModel } from './Model';\nimport hotkeys from 'hotkeys-js';\nimport { KeyBindSet } from './Settings';\n\nexport interface KeyBinder {\n    bindCopy<T extends SubtitleModel = SubtitleModel>(\n        onCopy: (event: KeyboardEvent, subtitle: T) => void,\n        disabledGetter: () => boolean,\n        subtitleGetter: () => T | undefined,\n        useCapture?: boolean\n    ): () => void;\n    bindAnkiExport(\n        onAnkiExport: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean\n    ): () => void;\n    bindUpdateLastCard(\n        onUpdateLastCard: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean\n    ): () => void;\n    bindSeekToSubtitle(\n        onSeekToSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean\n    ): () => void;\n    bindSeekToBeginningOfCurrentSubtitle(\n        onSeekToBeginningOfCurrentSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean\n    ): () => void;\n    bindSeekBackwardOrForward(\n        onSeekBackwardOrForward: (event: KeyboardEvent, forward: boolean) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean\n    ): () => void;\n    bindOffsetToSubtitle(\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean\n    ): () => void;\n    bindAdjustOffset(\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\n        disabledGetter: () => boolean,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean\n    ): () => void;\n    bindToggleSubtitles(\n        onToggleSubtitles: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean\n    ): () => void;\n    bindToggleSubtitleTrackInVideo(\n        onToggleSubtitleTrack: (event: KeyboardEvent, extra: any) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean\n    ): () => void;\n    bindToggleSubtitleTrackInList(\n        onToggleSubtitleTrackInList: (event: KeyboardEvent, extra: any) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean\n    ): () => void;\n    bindPlay(onPlay: (event: KeyboardEvent) => void, disabledGetter: () => boolean, useCapture?: boolean): () => void;\n    bindAutoPause(\n        onAutoPause: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean\n    ): () => void;\n    bindCondensedPlayback(\n        onCondensedPlayback: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean\n    ): () => void;\n}\n\nexport class DefaultKeyBinder implements KeyBinder {\n    private readonly keyBindSet: KeyBindSet;\n\n    constructor(keyBindSet: KeyBindSet) {\n        this.keyBindSet = keyBindSet;\n    }\n    bindCopy<T extends SubtitleModel = SubtitleModel>(\n        onCopy: (event: KeyboardEvent, subtitle: T) => void,\n        disabledGetter: () => boolean,\n        subtitleGetter: () => T | undefined,\n        useCapture = false\n    ) {\n        const shortcut = this.keyBindSet.copySubtitle.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = this.copyHandler(onCopy, disabledGetter, subtitleGetter);\n        hotkeys(shortcut, { capture: useCapture }, handler);\n        return () => hotkeys.unbind(shortcut, handler);\n    }\n\n    copyHandler<T extends SubtitleModel>(\n        onCopy: (event: KeyboardEvent, subtitle: T) => void,\n        disabledGetter: () => boolean,\n        subtitleGetter: () => T | undefined\n    ) {\n        return (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            const subtitle = subtitleGetter();\n\n            if (!subtitle) {\n                return;\n            }\n\n            onCopy(event, subtitle);\n        };\n    }\n\n    bindAnkiExport(onAnkiExport: (event: KeyboardEvent) => void, disabledGetter: () => boolean, useCapture = false) {\n        const shortcut = this.keyBindSet.ankiExport.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = this.ankiExportHandler(onAnkiExport, disabledGetter);\n        hotkeys(shortcut, { capture: useCapture }, handler);\n        return () => hotkeys.unbind(shortcut, handler);\n    }\n\n    ankiExportHandler(onAnkiExport: (event: KeyboardEvent) => void, disabledGetter: () => boolean) {\n        return (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onAnkiExport(event);\n        };\n    }\n\n    bindUpdateLastCard(\n        onUpdateLastCard: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture = false\n    ) {\n        const shortcut = this.keyBindSet.updateLastCard.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = this.updateLastCardHandler(onUpdateLastCard, disabledGetter);\n        hotkeys(shortcut, { capture: useCapture }, handler);\n        return () => hotkeys.unbind(shortcut, handler);\n    }\n\n    updateLastCardHandler(onUpdateLastCard: (event: KeyboardEvent) => void, disabledGetter: () => boolean) {\n        return (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onUpdateLastCard(event);\n        };\n    }\n\n    bindSeekToSubtitle(\n        onSeekToSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture = false\n    ) {\n        const delegate = (event: KeyboardEvent, forward: boolean) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            const subtitles = subtitlesGetter();\n\n            if (!subtitles || subtitles.length === 0) {\n                return;\n            }\n\n            const subtitle = this._adjacentSubtitle(forward, timeGetter(), subtitles);\n\n            if (subtitle !== null && subtitle.start >= 0 && subtitle.end >= 0) {\n                onSeekToSubtitle(event, subtitle);\n            }\n        };\n        const previousShortcut = this.keyBindSet.seekToPreviousSubtitle.keys;\n        const nextShortcut = this.keyBindSet.seekToNextSubtitle.keys;\n        const previousHandler = (event: KeyboardEvent) => delegate(event, false);\n        const nextHandler = (event: KeyboardEvent) => delegate(event, true);\n\n        if (previousShortcut) {\n            hotkeys(previousShortcut, { capture: useCapture }, previousHandler);\n        }\n\n        if (nextShortcut) {\n            hotkeys(nextShortcut, { capture: useCapture }, nextHandler);\n        }\n\n        return () => {\n            if (previousShortcut) {\n                hotkeys.unbind(previousShortcut, previousHandler);\n            }\n\n            if (nextShortcut) {\n                hotkeys.unbind(nextShortcut, nextHandler);\n            }\n        };\n    }\n\n    bindSeekToBeginningOfCurrentSubtitle(\n        onSeekToBeginningOfCurrentSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture = false\n    ) {\n        const shortcut = this.keyBindSet.seekToBeginningOfCurrentSubtitle.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            const subtitles = subtitlesGetter();\n\n            if (!subtitles || subtitles.length === 0) {\n                return;\n            }\n\n            const subtitle = this._currentSubtitle(timeGetter(), subtitles);\n\n            if (subtitle !== undefined && subtitle.start >= 0 && subtitle.end >= 0) {\n                onSeekToBeginningOfCurrentSubtitle(event, subtitle);\n            }\n        };\n        hotkeys(shortcut, { capture: useCapture }, handler);\n        return () => hotkeys.unbind(shortcut, handler);\n    }\n\n    _currentSubtitle(time: number, subtitles: SubtitleModel[]) {\n        const now = time;\n        let currentSubtitle: SubtitleModel | undefined;\n        let minDiff = Number.MAX_SAFE_INTEGER;\n\n        for (let i = 0; i < subtitles.length; ++i) {\n            const s = subtitles[i];\n\n            if (s.start < 0 || s.end < 0) {\n                continue;\n            }\n\n            const diff = now - s.start;\n\n            if (now >= s.start && now < s.end) {\n                if (diff < minDiff) {\n                    currentSubtitle = s;\n                    minDiff = diff;\n                }\n            }\n        }\n\n        return currentSubtitle;\n    }\n\n    bindSeekBackwardOrForward(\n        onSeekBackwardOrForward: (event: KeyboardEvent, forward: boolean) => void,\n        disabledGetter: () => boolean,\n        useCapture = false\n    ) {\n        const delegate = (event: KeyboardEvent, forward: boolean) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onSeekBackwardOrForward(event, forward);\n        };\n        const backShortcut = this.keyBindSet.seekBackward.keys;\n        const nextShortcut = this.keyBindSet.seekForward.keys;\n        const backHandler = (event: KeyboardEvent) => delegate(event, false);\n        const nextHandler = (event: KeyboardEvent) => delegate(event, true);\n\n        if (backShortcut) {\n            hotkeys(backShortcut, { capture: useCapture }, backHandler);\n        }\n\n        if (nextShortcut) {\n            hotkeys(nextShortcut, { capture: useCapture }, nextHandler);\n        }\n\n        return () => {\n            if (backShortcut) {\n                hotkeys.unbind(backShortcut, backHandler);\n            }\n\n            if (nextShortcut) {\n                hotkeys.unbind(nextShortcut, nextHandler);\n            }\n        };\n    }\n\n    bindOffsetToSubtitle(\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture = false\n    ) {\n        const delegate = (event: KeyboardEvent, forward: boolean) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            const subtitles = subtitlesGetter();\n\n            if (!subtitles || subtitles.length === 0) {\n                return;\n            }\n\n            const time = timeGetter();\n            const subtitle = this._adjacentSubtitle(forward, time, subtitles);\n\n            if (subtitle !== null) {\n                const subtitleStart = subtitle.originalStart;\n                const newOffset = time - subtitleStart;\n                onOffsetChange(event, newOffset);\n            }\n        };\n        const previousShortcut = this.keyBindSet.adjustOffsetToPreviousSubtitle.keys;\n        const nextShortcut = this.keyBindSet.adjustOffsetToNextSubtitle.keys;\n        const previousHandler = (event: KeyboardEvent) => delegate(event, false);\n        const nextHandler = (event: KeyboardEvent) => delegate(event, true);\n\n        if (previousShortcut) {\n            hotkeys(previousShortcut, { capture: useCapture }, previousHandler);\n        }\n\n        if (nextShortcut) {\n            hotkeys(nextShortcut, { capture: useCapture }, nextHandler);\n        }\n\n        return () => {\n            if (previousShortcut) {\n                hotkeys.unbind(previousShortcut, previousHandler);\n            }\n\n            if (nextShortcut) {\n                hotkeys.unbind(nextShortcut, nextHandler);\n            }\n        };\n    }\n\n    _adjacentSubtitle(forward: boolean, time: number, subtitles: SubtitleModel[]) {\n        const now = time;\n        let adjacentSubtitleIndex = -1;\n        let minDiff = Number.MAX_SAFE_INTEGER;\n\n        for (let i = 0; i < subtitles.length; ++i) {\n            const s = subtitles[i];\n            const diff = forward ? s.start - now : now - s.start;\n\n            if (minDiff <= diff) {\n                continue;\n            }\n\n            if (forward && now < s.start) {\n                minDiff = diff;\n                adjacentSubtitleIndex = i;\n            } else if (!forward && now > s.start) {\n                minDiff = diff;\n                adjacentSubtitleIndex = now < s.end ? Math.max(0, i - 1) : i;\n            }\n        }\n\n        if (adjacentSubtitleIndex !== -1) {\n            return subtitles[adjacentSubtitleIndex];\n        }\n\n        return null;\n    }\n\n    bindAdjustOffset(\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\n        disabledGetter: () => boolean,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture = false\n    ) {\n        const delegate = (event: KeyboardEvent, increase: boolean) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            const subtitles = subtitlesGetter();\n\n            if (!subtitles || subtitles.length === 0) {\n                return;\n            }\n\n            const currentOffset = subtitles[0].start - subtitles[0].originalStart;\n            const newOffset = currentOffset + (increase ? 100 : -100);\n            onOffsetChange(event, newOffset);\n        };\n\n        const decreaseShortcut = this.keyBindSet.decreaseOffset.keys;\n        const increaseShortcut = this.keyBindSet.increaseOffset.keys;\n        const decreaseHandler = (event: KeyboardEvent) => delegate(event, false);\n        const increaseHandler = (event: KeyboardEvent) => delegate(event, true);\n\n        hotkeys(decreaseShortcut, { capture: useCapture }, decreaseHandler);\n        hotkeys(increaseShortcut, { capture: useCapture }, increaseHandler);\n        return () => {\n            hotkeys.unbind(decreaseShortcut, decreaseHandler);\n            hotkeys.unbind(increaseShortcut, increaseHandler);\n        };\n    }\n\n    bindToggleSubtitles(\n        onToggleSubtitles: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture = false\n    ) {\n        const shortcut = this.keyBindSet.toggleSubtitles.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onToggleSubtitles(event);\n        };\n        hotkeys(shortcut, { capture: useCapture }, handler);\n        return () => {\n            hotkeys.unbind(shortcut, handler);\n        };\n    }\n\n    bindToggleSubtitleTrackInVideo(\n        onToggleSubtitleTrack: (event: KeyboardEvent, extra: any) => void,\n        disabledGetter: () => boolean,\n        useCapture = false\n    ) {\n        const shortcuts = [\n            this.keyBindSet.toggleVideoSubtitleTrack1.keys,\n            this.keyBindSet.toggleVideoSubtitleTrack2.keys,\n        ].filter((s) => s);\n\n        if (shortcuts.length === 0) {\n            return () => {};\n        }\n\n        const delegate = (event: KeyboardEvent, track: number) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onToggleSubtitleTrack(event, track);\n        };\n        let handlers: ((event: KeyboardEvent) => void)[] = [];\n\n        for (let i = 0; i < shortcuts.length; ++i) {\n            const handler = (event: KeyboardEvent) => delegate(event, i);\n            handlers.push(handler);\n            hotkeys(shortcuts[i], { capture: useCapture }, handler);\n        }\n\n        return () => {\n            for (let i = 0; i < shortcuts.length; ++i) {\n                const handler = handlers[i];\n                hotkeys.unbind(shortcuts[i], handler);\n            }\n        };\n    }\n\n    bindToggleSubtitleTrackInList(\n        onToggleSubtitleTrackInList: (event: KeyboardEvent, extra: any) => void,\n        disabledGetter: () => boolean,\n        useCapture = false\n    ) {\n        const shortcuts = [\n            this.keyBindSet.toggleAsbplayerSubtitleTrack1.keys,\n            this.keyBindSet.toggleAsbplayerSubtitleTrack2.keys,\n        ].filter((s) => s);\n\n        if (shortcuts.length === 0) {\n            return () => {};\n        }\n\n        const delegate = (event: KeyboardEvent, track: number) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onToggleSubtitleTrackInList(event, track);\n        };\n\n        let handlers: ((event: KeyboardEvent) => void)[] = [];\n\n        for (let i = 0; i < 9; ++i) {\n            const handler = (event: KeyboardEvent) => delegate(event, i);\n            handlers.push(handler);\n            hotkeys(shortcuts[i], { capture: useCapture }, handler);\n        }\n\n        return () => {\n            for (let i = 0; i < 9; ++i) {\n                const handler = handlers[i];\n                hotkeys.unbind(shortcuts[i], handler);\n            }\n        };\n    }\n\n    bindPlay(onPlay: (event: KeyboardEvent) => void, disabledGetter: () => boolean, useCapture = false) {\n        const shortcut = this.keyBindSet.togglePlay.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onPlay(event);\n        };\n\n        hotkeys(shortcut, { capture: useCapture }, handler);\n        return () => {\n            hotkeys.unbind(shortcut, handler);\n        };\n    }\n\n    bindAutoPause(onAutoPause: (event: KeyboardEvent) => void, disabledGetter: () => boolean, useCapture = false) {\n        const shortcut = this.keyBindSet.toggleAutoPause.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onAutoPause(event);\n        };\n        hotkeys(shortcut, { capture: useCapture }, handler);\n        return () => {\n            hotkeys.unbind(shortcut, handler);\n        };\n    }\n\n    bindCondensedPlayback(onAutoPause: (event: KeyboardEvent) => void, disabledGetter: () => boolean, useCapture = false) {\n        const shortcut = this.keyBindSet.toggleCondensedPlayback.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onAutoPause(event);\n        };\n        hotkeys(shortcut, { capture: useCapture }, handler);\n        return () => {\n            hotkeys.unbind(shortcut, handler);\n        };\n    }\n}\n","export default class Mp3Encoder {\n    static async encode(blob: Blob, workerFactory: () => Worker): Promise<Blob> {\n        return new Promise(async (resolve, reject) => {\n            var reader = new FileReader();\n            reader.onload = async (e) => {\n                try {\n                    const audioContext = new AudioContext();\n\n                    if (e.target === null) {\n                        reject(new Error(\"Could not obtain buffer to encode\"));\n                        return;\n                    }\n\n                    const audioBuffer = await audioContext.decodeAudioData(e.target.result as ArrayBuffer);\n                    const channels = [];\n\n                    for (let i = 0; i < audioBuffer.numberOfChannels; ++i) {\n                        channels.push(audioBuffer.getChannelData(i));\n                    }\n\n                    const worker = workerFactory();\n                    worker.postMessage({\n                        command: 'encode',\n                        audioBuffer: {\n                            channels: channels,\n                            numberOfChannels: audioBuffer.numberOfChannels,\n                            length: audioBuffer.length,\n                            sampleRate: audioBuffer.sampleRate,\n                        },\n                    });\n                    worker.onmessage = (e) => {\n                        resolve(new Blob(e.data.buffer, { type: 'audio/mp3' }));\n                        worker.terminate();\n                    };\n                    worker.onerror = (e) => {\n                        const error = e?.error ?? new Error('MP3 encoding failed: ' + e?.message);\n                        reject(error);\n                        worker.terminate();\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            };\n            reader.readAsArrayBuffer(blob);\n        });\n    }\n}\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/mp3-encoder.7f842300.worker.js\");\n}\n","import sanitize from 'sanitize-filename';\nimport { SubtitleModel } from './Model';\n\nexport function humanReadableTime(timestamp: number, nearestTenth = false): string {\n    const totalSeconds = Math.floor(timestamp / 1000);\n    let seconds;\n\n    if (nearestTenth) {\n        seconds = Math.round(((timestamp / 1000) % 60) * 10) / 10;\n    } else {\n        seconds = totalSeconds % 60;\n    }\n\n    const minutes = Math.floor(totalSeconds / 60) % 60;\n    const hours = Math.floor(totalSeconds / 3600);\n\n    if (hours > 0) {\n        return hours + 'h' + String(minutes).padStart(2, '0') + 'm' + String(seconds).padStart(2, '0') + 's';\n    }\n\n    return minutes + 'm' + String(seconds).padStart(2, '0') + 's';\n}\n\nexport function surroundingSubtitles(\n    subtitles: SubtitleModel[],\n    index: number,\n    countRadius: number,\n    timeRadius: number\n): SubtitleModel[] {\n    let startIndex = index;\n\n    for (let i = index; i >= 0; --i) {\n        startIndex = i;\n\n        if (atBoundary(subtitles, startIndex, index, countRadius, timeRadius, false)) {\n            break;\n        }\n    }\n\n    let endIndex = startIndex;\n\n    for (let i = index; i <= subtitles.length - 1; ++i) {\n        endIndex = i;\n\n        if (atBoundary(subtitles, endIndex, index, countRadius, timeRadius, true)) {\n            break;\n        }\n    }\n\n    return subtitles.slice(startIndex, endIndex + 1);\n}\n\nexport function mockSurroundingSubtitles(\n    middleSubtitle: SubtitleModel,\n    maxTimestamp: number,\n    timeRadius: number\n): SubtitleModel[] {\n    const subtitles = [middleSubtitle];\n    const offset = middleSubtitle.start - middleSubtitle.originalStart;\n\n    if (middleSubtitle.end < maxTimestamp) {\n        const afterTimestamp = Math.min(maxTimestamp, middleSubtitle.end + timeRadius);\n        subtitles.push({\n            text: '',\n            start: middleSubtitle.end,\n            end: afterTimestamp,\n            originalStart: middleSubtitle.end - offset,\n            originalEnd: afterTimestamp - offset,\n            track: middleSubtitle.track,\n        });\n    }\n\n    if (middleSubtitle.start > 0) {\n        const beforeTimestamp = Math.max(0, middleSubtitle.start - timeRadius);\n        subtitles.unshift({\n            text: '',\n            start: beforeTimestamp,\n            end: middleSubtitle.start,\n            originalStart: beforeTimestamp - offset,\n            originalEnd: middleSubtitle.start - offset,\n            track: middleSubtitle.track,\n        });\n    }\n\n    return subtitles;\n}\n\nfunction atBoundary(\n    subtitles: SubtitleModel[],\n    index: number,\n    initialIndex: number,\n    countRadius: number,\n    timeRadius: number,\n    sign: boolean\n): boolean {\n    let next;\n\n    if (sign) {\n        next = index + 1 < subtitles.length ? subtitles[index + 1] : null;\n    } else {\n        next = index - 1 >= 0 ? subtitles[index - 1] : null;\n    }\n\n    if (\n        Math.abs(initialIndex - index) >= countRadius &&\n        (next === null || Math.abs(next.start - subtitles[initialIndex].start) >= timeRadius)\n    ) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function download(blob: Blob, name: string) {\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    document.body.appendChild(a);\n    a.style.display = 'none';\n    a.href = url;\n    a.download = sanitize(name);\n    a.click();\n    URL.revokeObjectURL(url);\n    a.remove();\n}\n","import Mp3Encoder from './Mp3Encoder';\n// eslint-disable-next-line\n// @ts-ignore\nimport Worker from 'worker-loader!./mp3-encoder.js';\nimport { download } from './Util';\nconst defaultMp3WorkerFactory = () => new Worker();\n\ninterface ExperimentalAudioElement extends HTMLAudioElement {\n    audioTracks: any;\n    captureStream?: () => MediaStream;\n    mozCaptureStream?: () => MediaStream;\n}\n\ninterface AudioData {\n    name: string;\n    extension: string;\n    play: () => Promise<void>;\n    blob: () => Promise<Blob>;\n    base64: () => Promise<string>;\n    slice: (start: number, end: number) => AudioData;\n    isSliceable: () => boolean;\n}\n\nclass Base64AudioData implements AudioData {\n    private readonly _name: string;\n    private readonly start: number;\n    private readonly end: number;\n    private readonly _base64: string;\n    private readonly _extension: string;\n\n    private cachedBlob?: Blob;\n\n    constructor(baseName: string, start: number, end: number, base64: string, extension: string) {\n        this._name = baseName + '_' + Math.floor(start) + '_' + Math.floor(end);\n        this.start = start;\n        this.end = end;\n        this._base64 = base64;\n        this._extension = extension;\n    }\n\n    get name(): string {\n        return this._name;\n    }\n\n    get extension(): string {\n        return this._extension;\n    }\n\n    async base64() {\n        return this._base64;\n    }\n\n    async blob() {\n        return await this._blob();\n    }\n\n    async play(): Promise<void> {\n        const blob = await this._blob();\n        const audio = new Audio();\n        audio.src = URL.createObjectURL(blob);\n        audio.preload = 'none';\n        audio.load();\n\n        await audio.play();\n\n        return new Promise((resolve, reject) => {\n            setTimeout(() => {\n                audio.pause();\n                const src = audio.src;\n                audio.src = '';\n                URL.revokeObjectURL(src);\n                resolve(undefined);\n            }, this.end - this.start + 1000);\n        });\n    }\n\n    async _blob() {\n        if (!this.cachedBlob) {\n            this.cachedBlob = await (await fetch('data:audio/' + this.extension + ';base64,' + this._base64)).blob();\n        }\n\n        return this.cachedBlob;\n    }\n\n    slice(start: number, end: number): AudioData {\n        // Not supported\n        return this;\n    }\n\n    isSliceable() {\n        return false;\n    }\n}\n\nclass FileAudioData implements AudioData {\n    private readonly file: File;\n    private readonly _name: string;\n    private readonly start: number;\n    private readonly end: number;\n    private readonly trackId?: string;\n    private readonly _extension: string;\n    private readonly recorderMimeType: string;\n\n    private _blob?: Blob;\n\n    constructor(file: File, start: number, end: number, trackId?: string) {\n        const [recorderMimeType, recorderExtension] = FileAudioData._recorderConfiguration();\n        this.recorderMimeType = recorderMimeType;\n        this.file = file;\n        this._name = file.name + '_' + start + '_' + end;\n        this.start = start;\n        this.end = end;\n        this.trackId = trackId;\n        this._extension = recorderExtension;\n    }\n\n    private static _recorderConfiguration() {\n        const AUDIO_TYPES: { [key: string]: string } = {\n            'audio/ogg;codecs=opus': 'ogg',\n            'audio/webm;codecs=opus': 'webm',\n        };\n        return Object.keys(AUDIO_TYPES)\n            .filter(MediaRecorder.isTypeSupported)\n            .map((t) => [t as string, AUDIO_TYPES[t] as string])[0];\n    }\n\n    get name(): string {\n        return this._name;\n    }\n\n    get extension(): string {\n        return this._extension;\n    }\n\n    async base64() {\n        return new Promise<string>(async (resolve, reject) => {\n            var reader = new FileReader();\n            reader.readAsDataURL(await this.blob());\n            reader.onloadend = () => {\n                const result = reader.result as string;\n                const base64 = result.substring(result.indexOf(',') + 1);\n                resolve(base64);\n            };\n        });\n    }\n\n    async play() {\n        if (!this._blob) {\n            this._blob = await this._clipAudio();\n            return;\n        }\n\n        const audio = await this._audioElement(this._blob, false);\n        audio.currentTime = 0;\n        await audio.play();\n        await this._stopAudio(audio);\n    }\n\n    async blob() {\n        if (!this._blob) {\n            this._blob = await this._clipAudio();\n        }\n\n        return this._blob;\n    }\n\n    async _clipAudio(): Promise<Blob> {\n        return new Promise(async (resolve, reject) => {\n            const audio = await this._audioElement(this.file, true);\n\n            audio.oncanplay = async (e) => {\n                try {\n                    audio.play();\n                    const stream = this._captureStream(audio);\n                    const recorder = new MediaRecorder(stream, { mimeType: this.recorderMimeType });\n                    const chunks: BlobPart[] = [];\n\n                    recorder.ondataavailable = (e) => {\n                        chunks.push(e.data);\n                    };\n\n                    recorder.onstop = (e) => {\n                        resolve(new Blob(chunks, { type: this.recorderMimeType }));\n                    };\n\n                    recorder.start();\n                    await this._stopAudio(audio);\n                    recorder.stop();\n                    for (const track of stream.getAudioTracks()) {\n                        track.stop();\n                    }\n                } catch (e) {\n                    reject(e);\n                }\n            };\n        });\n    }\n\n    _audioElement(source: Blob, selectTrack: boolean): Promise<ExperimentalAudioElement> {\n        const audio = new Audio() as ExperimentalAudioElement;\n        audio.src = URL.createObjectURL(source);\n\n        return new Promise((resolve, reject) => {\n            audio.onloadedmetadata = (e) => {\n                if (selectTrack && this.trackId && audio.audioTracks && audio.audioTracks.length > 0) {\n                    // @ts-ignore\n                    for (const t of audio.audioTracks) {\n                        t.enabled = this.trackId === t.id;\n                    }\n                }\n\n                audio.currentTime = this.start / 1000;\n                resolve(audio);\n            };\n        });\n    }\n\n    _captureStream(audio: ExperimentalAudioElement) {\n        let stream: MediaStream | undefined;\n\n        if (typeof audio.captureStream === 'function') {\n            stream = audio.captureStream();\n        }\n\n        if (typeof audio.mozCaptureStream === 'function') {\n            stream = audio.mozCaptureStream();\n        }\n\n        if (stream === undefined) {\n            throw new Error('Unable to capture stream from audio');\n        }\n\n        const audioStream = new MediaStream();\n\n        for (const track of stream.getVideoTracks()) {\n            track.stop();\n        }\n\n        for (const track of stream.getAudioTracks()) {\n            if (track.enabled) {\n                audioStream.addTrack(track);\n            }\n        }\n\n        return audioStream;\n    }\n\n    async _stopAudio(audio: ExperimentalAudioElement): Promise<void> {\n        return new Promise((resolve, reject) => {\n            setTimeout(() => {\n                audio.pause();\n                const src = audio.src;\n                audio.src = '';\n                URL.revokeObjectURL(src);\n                resolve(undefined);\n            }, this.end - this.start + 100);\n        });\n    }\n\n    slice(start: number, end: number) {\n        return new FileAudioData(this.file, start, end, this.trackId);\n    }\n\n    isSliceable() {\n        return true;\n    }\n}\n\nclass Mp3AudioData implements AudioData {\n    private readonly data: AudioData;\n    private readonly workerFactory: () => Worker;\n    private _blob?: Blob;\n\n    constructor(data: AudioData, workerFactory: () => Worker) {\n        this.data = data;\n        this.workerFactory = workerFactory;\n    }\n\n    get name() {\n        return this.data.name;\n    }\n\n    get extension() {\n        return 'mp3';\n    }\n\n    async base64() {\n        return new Promise<string>(async (resolve, reject) => {\n            try {\n                var reader = new FileReader();\n                reader.readAsDataURL(await this.blob());\n                reader.onloadend = () => {\n                    const result = reader.result as string;\n                    const base64 = result.substring(result.indexOf(',') + 1);\n                    resolve(base64);\n                };\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    async play() {\n        await this.data.play();\n    }\n\n    async blob() {\n        if (!this._blob) {\n            this._blob = await Mp3Encoder.encode(await this.data.blob(), this.workerFactory);\n        }\n\n        return this._blob;\n    }\n\n    slice(start: number, end: number) {\n        return new Mp3AudioData(this.data.slice(start, end), this.workerFactory);\n    }\n\n    isSliceable() {\n        return this.data.isSliceable();\n    }\n}\n\nexport default class AudioClip {\n    private readonly data: AudioData;\n\n    constructor(data: AudioData) {\n        this.data = data;\n    }\n\n    static fromBase64(subtitleFileName: string, start: number, end: number, base64: string, extension: string) {\n        return new AudioClip(\n            new Base64AudioData(\n                subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')),\n                start,\n                end,\n                base64,\n                extension\n            )\n        );\n    }\n\n    static fromFile(file: File, start: number, end: number, trackId?: string) {\n        return new AudioClip(new FileAudioData(file, start, end, trackId));\n    }\n\n    get name() {\n        return this.data.name + '.' + this.data.extension;\n    }\n\n    async play() {\n        await this.data.play();\n    }\n\n    async base64() {\n        return await this.data.base64();\n    }\n\n    async download() {\n        const blob = await this.data.blob();\n        download(blob, this.name);\n    }\n\n    toMp3(mp3WorkerFactory = defaultMp3WorkerFactory) {\n        if (this.data instanceof Mp3AudioData) {\n            return this;\n        }\n\n        if (this.data.extension === 'mp3') {\n            return this;\n        }\n\n        return new AudioClip(new Mp3AudioData(this.data, mp3WorkerFactory));\n    }\n\n    slice(start: number, end: number) {\n        return new AudioClip(this.data.slice(start, end));\n    }\n\n    isSliceable() {\n        return this.data.isSliceable();\n    }\n}\n","import { AnkiSettings } from './Settings';\n\nexport interface RectModel {\n    readonly left: number;\n    readonly top: number;\n    readonly width: number;\n    readonly height: number;\n}\n\nexport interface DimensionsModel {\n    readonly width: number;\n    readonly height: number;\n}\n\nexport interface SubtitleTextImage {\n    readonly dataUrl: string;\n    readonly screen: DimensionsModel;\n    readonly image: DimensionsModel;\n}\n\nexport interface SubtitleModel {\n    readonly text: string;\n    readonly textImage?: SubtitleTextImage;\n    readonly start: number;\n    readonly end: number;\n    readonly originalStart: number;\n    readonly originalEnd: number;\n    readonly track: number;\n}\n\nexport interface CopiedSubtitleModel extends SubtitleModel {\n    surroundingSubtitles: SubtitleModel[];\n    timestamp: number;\n    id: string;\n    name: string;\n    subtitleFile?: File;\n    audioFile?: File;\n    videoFile?: File;\n    audioTrack?: number;\n    audio?: AudioModel;\n    image?: ImageModel;\n}\n\nexport interface ImageModel {\n    readonly base64: string;\n    readonly extension: 'jpeg';\n}\n\nexport interface AudioModel {\n    readonly base64: string;\n    readonly extension: 'webm' | 'mp3';\n    readonly paddingStart: number;\n    readonly paddingEnd: number;\n    readonly start?: number;\n    readonly end?: number;\n}\n\nexport interface AnkiDialogSliderContext {\n    subtitleStart: number;\n    subtitleEnd: number;\n    subtitles: SubtitleModel[];\n}\n\nexport interface AnkiUiState {\n    readonly type: 'initial' | 'resume';\n    readonly open: boolean;\n    readonly settingsProvider: AnkiSettings;\n    readonly subtitle: SubtitleModel;\n    readonly url: string;\n    readonly source: string;\n    readonly image?: ImageModel;\n    readonly audio?: AudioModel;\n    readonly themeType: string;\n    readonly dialogRequestedTimestamp: number;\n}\n\nexport interface AnkiUiInitialState extends AnkiUiState {\n    readonly type: 'initial';\n    readonly surroundingSubtitles: SubtitleModel[];\n}\n\nexport interface AnkiUiResumeState extends AnkiUiState {\n    readonly type: 'resume';\n\n    readonly text: string;\n    readonly initialTimestampInterval: number[];\n    readonly timestampInterval: number[];\n    readonly timestampBoundaryInterval?: number[];\n    readonly sliderContext: AnkiDialogSliderContext;\n    readonly definition: string;\n    readonly word: string;\n    readonly customFieldValues: { [key: string]: string };\n    readonly lastAppliedTimestampIntervalToText: number[];\n    readonly lastAppliedTimestampIntervalToAudio?: number[];\n}\n\nexport interface AnkiUiSavedState {\n    subtitle: SubtitleModel;\n    text: string;\n    sliderContext: AnkiDialogSliderContext;\n    definition: string;\n    image?: ImageModel;\n    audio?: AudioModel;\n    word: string;\n    source: string;\n    url: string;\n    customFieldValues: { [key: string]: string };\n    timestampInterval: number[];\n    initialTimestampInterval: number[];\n    timestampBoundaryInterval?: number[];\n    lastAppliedTimestampIntervalToText: number[];\n    lastAppliedTimestampIntervalToAudio?: number[];\n    dialogRequestedTimestamp: number;\n}\n\nexport interface VideoDataSubtitleTrack {\n    label: string;\n    language: string;\n    url: string;\n}\n\nexport interface ConfirmedVideoDataSubtitleTrack {\n    name: string;\n    language: string;\n    subtitleUrl: string;\n}\n\nexport interface VideoData {\n    basename: string;\n    error?: string;\n    subtitles: VideoDataSubtitleTrack[];\n    extension: string;\n}\n\nexport interface VideoDataUiState {\n    open?: boolean;\n    isLoading?: boolean;\n    suggestedName?: string;\n    subtitles?: VideoDataSubtitleTrack[];\n    error?: string;\n    themeType?: string;\n    selectedSubtitle?: string;\n    showSubSelect?: boolean;\n}\n\nexport interface VideoTabModel {\n    id: number; // Actually the tab ID\n    title?: string;\n    src: string; // Video src\n}\n\nexport interface Rgb {\n    r: number;\n    g: number;\n    b: number;\n}\n\nexport interface AudioTrackModel {\n    id: string;\n    label: string;\n    language: string;\n}\n\nexport enum PostMineAction {\n    none = 0,\n    showAnkiDialog = 1,\n    updateLastCard = 2,\n}\n\nexport enum AutoPausePreference {\n    atStart = 1,\n    atEnd = 2,\n}\n\nexport enum PlayMode {\n    normal = 1,\n    condensed = 2,\n    autoPause = 3,\n}\n","export default class CanvasResizer {\n    resize(\n        canvas: HTMLCanvasElement,\n        ctx: CanvasRenderingContext2D,\n        maxWidth: number,\n        maxHeight: number\n    ): Promise<HTMLCanvasElement> {\n        return new Promise((resolve, reject) => {\n            const widthRatio = maxWidth <= 0 ? 1 : maxWidth / canvas.width;\n            const heightRatio = maxHeight <= 0 ? 1 : maxHeight / canvas.height;\n            const ratio = Math.min(1, Math.min(widthRatio, heightRatio));\n\n            if (ratio < 1) {\n                const newWidth = canvas.width * ratio;\n                const newHeight = canvas.height * ratio;\n                createImageBitmap(canvas, { resizeWidth: newWidth, resizeHeight: newHeight })\n                    .then((sprite) => {\n                        canvas.width = newWidth;\n                        canvas.height = newHeight;\n                        ctx.drawImage(sprite, 0, 0);\n                        resolve(canvas);\n                    })\n                    .catch((e) => reject(e));\n            } else {\n                resolve(canvas);\n            }\n        });\n    }\n}\n","import { resolveConfig } from 'prettier';\nimport sanitize from 'sanitize-filename';\nimport CanvasResizer from './CanvasResizer';\nimport { download } from './Util';\n\nclass Base64ImageData implements ImageData {\n    private readonly _name: string;\n    private readonly _base64: string;\n    private readonly _extension: string;\n\n    private cachedBlob?: Blob;\n\n    constructor(name: string, base64: string, extension: string) {\n        this._name = name;\n        this._base64 = base64;\n        this._extension = extension;\n    }\n\n    get name() {\n        return this._name;\n    }\n\n    get extension() {\n        return this._extension;\n    }\n\n    async base64() {\n        return this._base64;\n    }\n\n    async blob() {\n        return await this._blob();\n    }\n\n    async _blob() {\n        if (!this.cachedBlob) {\n            this.cachedBlob = await (await fetch(this._dataUrl())).blob();\n        }\n\n        return this.cachedBlob;\n    }\n\n    async dataUrl() {\n        return this._dataUrl();\n    }\n\n    _dataUrl() {\n        return 'data:image/' + this.extension + ';base64,' + this._base64;\n    }\n}\n\nclass FileImageData implements ImageData {\n    private readonly file: File;\n    private readonly timestamp: number;\n    private readonly maxWidth: number;\n    private readonly maxHeight: number;\n    private readonly _name: string;\n\n    constructor(file: File, timestamp: number, maxWidth: number, maxHeight: number) {\n        this.file = file;\n        this._name = file.name + '_' + Math.floor(timestamp) + '.jpeg';\n        this.timestamp = timestamp;\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n    }\n\n    get name() {\n        return this._name;\n    }\n\n    get extension() {\n        return 'jpeg';\n    }\n\n    async base64(): Promise<string> {\n        return new Promise(async (resolve, reject) => {\n            const canvas = await this._canvas();\n            const dataUrl = canvas.toDataURL('image/jpeg');\n            resolve(dataUrl.substring(dataUrl.indexOf(',') + 1));\n        });\n    }\n\n    async blob(): Promise<Blob> {\n        return new Promise(async (resolve, reject) => {\n            const canvas = await this._canvas();\n            canvas.toBlob((blob) => {\n                if (blob === null) {\n                    reject(new Error('Could not obtain blob'));\n                } else {\n                    resolve(blob);\n                }\n            }, 'image/jpeg');\n        });\n    }\n\n    async dataUrl() {\n        const canvas = await this._canvas();\n        return canvas.toDataURL();\n    }\n\n    async _canvas(): Promise<HTMLCanvasElement> {\n        return new Promise(async (resolve, reject) => {\n            const video = this._videoElement(this.file);\n\n            video.oncanplay = async (e) => {\n                const canvas = document.createElement('canvas');\n                canvas.width = video.videoWidth;\n                canvas.height = video.videoHeight;\n                const ctx = canvas.getContext('2d');\n                ctx!.drawImage(video, 0, 0, canvas.width, canvas.height);\n                if (this.maxWidth > 0 || this.maxHeight > 0) {\n                    const resizer = new CanvasResizer();\n                    await resizer.resize(canvas, ctx!, this.maxWidth, this.maxHeight);\n                    resolve(canvas);\n                } else {\n                    resolve(canvas);\n                }\n                URL.revokeObjectURL(video.src);\n            };\n        });\n    }\n\n    _videoElement(source: File) {\n        const video = document.createElement('video');\n        video.src = URL.createObjectURL(source);\n        video.preload = 'none';\n        video.currentTime = this.timestamp / 1000;\n        video.load();\n\n        return video;\n    }\n}\n\ninterface ImageData {\n    name: string;\n    extension: string;\n    base64: () => Promise<string>;\n    dataUrl: () => Promise<string>;\n    blob: () => Promise<Blob>;\n}\n\nexport default class Image {\n    private readonly data: ImageData;\n\n    constructor(data: ImageData) {\n        this.data = data;\n    }\n\n    static fromBase64(subtitleFileName: string, timestamp: number, base64: string, extension: string) {\n        const imageName =\n            subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')) +\n            '_' +\n            Math.floor(timestamp) +\n            '.' +\n            extension;\n        return new Image(new Base64ImageData(imageName, base64, extension));\n    }\n\n    static fromFile(file: File, timestamp: number, maxWidth: number, maxHeight: number) {\n        return new Image(new FileImageData(file, timestamp, maxWidth, maxHeight));\n    }\n\n    get name() {\n        return this.data.name;\n    }\n\n    get extension() {\n        return this.data.extension;\n    }\n\n    async base64() {\n        return await this.data.base64();\n    }\n\n    async dataUrl() {\n        return await this.data.dataUrl();\n    }\n\n    async blob() {\n        return await this.data.blob();\n    }\n\n    async pngBlob() {\n        return new Promise<Blob>(async (resolve, reject) => {\n            try {\n                createImageBitmap(await this.blob()).then((bitMap) => {\n                    const canvas = document.createElement('canvas');\n                    canvas.width = bitMap.width;\n                    canvas.height = bitMap.height;\n                    canvas.getContext('2d')!.drawImage(bitMap, 0, 0);\n                    canvas.toBlob((blob) => {\n                        if (blob) {\n                            resolve(blob);\n                        } else {\n                            reject('Failed to convert to PNG');\n                        }\n                    }, 'image/png');\n                });\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    async download() {\n        const blob = await this.data.blob();\n        download(blob, this.data.name);\n    }\n}\n","export interface Fetcher {\n    fetch: (url: string, body: any) => Promise<any>;\n}\n\nexport class HttpFetcher implements Fetcher {\n    async fetch(url: string, body: any) {\n        const response = await fetch(url, {\n            method: 'POST',\n            body: JSON.stringify(body),\n        });\n        return await response.json();\n    }\n}\n","import AudioClip from './AudioClip';\nimport Image from './Image';\nimport { HttpFetcher, Fetcher } from './Fetcher';\nimport { AnkiSettings } from './Settings';\nimport sanitize from 'sanitize-filename';\n\nconst ankiQuerySpecialCharacters = ['\"', '*', '_', '\\\\', ':'];\n\nexport type AnkiExportMode = 'gui' | 'updateLast' | 'default';\n\nexport class Anki {\n    private readonly settingsProvider: AnkiSettings;\n    private readonly fetcher: Fetcher;\n\n    constructor(settingsProvider: AnkiSettings, fetcher = new HttpFetcher()) {\n        this.settingsProvider = settingsProvider;\n        this.fetcher = fetcher;\n    }\n\n    async deckNames(ankiConnectUrl?: string) {\n        const response = await this._executeAction('deckNames', null, ankiConnectUrl);\n        return response.result;\n    }\n\n    async modelNames(ankiConnectUrl?: string) {\n        const response = await this._executeAction('modelNames', null, ankiConnectUrl);\n        return response.result;\n    }\n\n    async modelFieldNames(modelName: string, ankiConnectUrl?: string) {\n        const response = await this._executeAction('modelFieldNames', { modelName: modelName }, ankiConnectUrl);\n        return response.result;\n    }\n\n    async findNotesWithWord(word: string, ankiConnectUrl?: string) {\n        const response = await this._executeAction(\n            'findNotes',\n            { query: this.settingsProvider.wordField + ':' + this._escapeQuery(word) },\n            ankiConnectUrl\n        );\n        return response.result;\n    }\n\n    async findNotesWithWordGui(word: string, ankiConnectUrl?: string) {\n        const response = await this._executeAction(\n            'guiBrowse',\n            { query: this.settingsProvider.wordField + ':' + this._escapeQuery(word) },\n            ankiConnectUrl\n        );\n        return response.result;\n    }\n\n    _escapeQuery(query: string) {\n        let escaped = '';\n\n        for (let i = 0; i < query.length; ++i) {\n            const char = query[i];\n            if (ankiQuerySpecialCharacters.includes(char)) {\n                escaped += `\\\\${char}`;\n            } else {\n                escaped += char;\n            }\n        }\n\n        return `\"${escaped}\"`;\n    }\n\n    async requestPermission(ankiConnectUrl?: string) {\n        const response = await this._executeAction('requestPermission', null, ankiConnectUrl);\n        return response.result;\n    }\n\n    async export(\n        text: string | undefined,\n        definition: string | undefined,\n        audioClip: AudioClip | undefined,\n        image: Image | undefined,\n        word: string | undefined,\n        source: string | undefined,\n        url: string | undefined,\n        customFieldValues: { [key: string]: string },\n        tags: string[],\n        mode: AnkiExportMode,\n        ankiConnectUrl?: string\n    ) {\n        const fields = {};\n\n        this._appendField(fields, this.settingsProvider.sentenceField, text, true);\n        this._appendField(fields, this.settingsProvider.definitionField, definition, true);\n        this._appendField(fields, this.settingsProvider.wordField, word, false);\n        this._appendField(fields, this.settingsProvider.sourceField, source, false);\n        this._appendField(fields, this.settingsProvider.urlField, url, false);\n\n        if (customFieldValues) {\n            for (const customFieldName of Object.keys(customFieldValues)) {\n                this._appendField(\n                    fields,\n                    this.settingsProvider.customAnkiFields[customFieldName],\n                    customFieldValues[customFieldName],\n                    true\n                );\n            }\n        }\n\n        const params: any = {\n            note: {\n                deckName: this.settingsProvider.deck,\n                modelName: this.settingsProvider.noteType,\n                tags: tags,\n                options: {\n                    allowDuplicate: false,\n                    duplicateScope: 'deck',\n                    duplicateScopeOptions: {\n                        deckName: this.settingsProvider.deck,\n                        checkChildren: false,\n                    },\n                },\n            },\n        };\n\n        const gui = mode === 'gui';\n        const updateLast = mode === 'updateLast';\n\n        if (this.settingsProvider.audioField && audioClip) {\n            const sanitizedName = this._sanitizeFileName(audioClip.name);\n\n            if (gui || updateLast) {\n                const fileName = (await this._storeMediaFile(sanitizedName, await audioClip.base64(), ankiConnectUrl))\n                    .result;\n                this._appendField(fields, this.settingsProvider.audioField, `[sound:${fileName}]`, false);\n            } else {\n                params.note['audio'] = {\n                    filename: sanitizedName,\n                    data: await audioClip.base64(),\n                    fields: [this.settingsProvider.audioField],\n                };\n            }\n        }\n\n        if (this.settingsProvider.imageField && image) {\n            const sanitizedName = this._sanitizeFileName(image.name);\n\n            if (gui || updateLast) {\n                const fileName = (await this._storeMediaFile(sanitizedName, await image.base64(), ankiConnectUrl))\n                    .result;\n                this._appendField(\n                    fields,\n                    this.settingsProvider.imageField,\n                    `<div><img src=\"${fileName}\"></div>`,\n                    false\n                );\n            } else {\n                params.note['picture'] = {\n                    filename: sanitizedName,\n                    data: await image.base64(),\n                    fields: [this.settingsProvider.imageField],\n                };\n            }\n        }\n\n        params.note['fields'] = fields;\n\n        switch (mode) {\n            case 'gui':\n                return (await this._executeAction('guiAddCards', params, ankiConnectUrl)).result;\n            case 'updateLast':\n                const recentNotes = (\n                    await this._executeAction('findNotes', { query: 'added:1' }, ankiConnectUrl)\n                ).result.sort();\n\n                if (recentNotes.length === 0) {\n                    throw new Error('Could not find note to update');\n                }\n\n                const lastNoteId = recentNotes[recentNotes.length - 1];\n                params.note['id'] = lastNoteId;\n                const infoResponse = await this._executeAction('notesInfo', { notes: [lastNoteId] });\n\n                if (infoResponse.result.length > 0 && infoResponse.result[0].noteId === lastNoteId) {\n                    const info = infoResponse.result[0];\n                    await this._executeAction('updateNoteFields', params, ankiConnectUrl);\n\n                    if (!this.settingsProvider.wordField || !info.fields) {\n                        return info.noteId;\n                    }\n\n                    const wordField = info.fields[this.settingsProvider.wordField];\n\n                    if (!wordField || !wordField.value) {\n                        return info.noteId;\n                    }\n\n                    return wordField.value;\n                }\n\n                throw new Error('Could not update last card because the card info could not be fetched');\n            case 'default':\n                return (await this._executeAction('addNote', params, ankiConnectUrl)).result;\n            default:\n                throw new Error('Unknown export mode: ' + mode);\n        }\n    }\n\n    _appendField(fields: any, fieldName: string | undefined, value: string | undefined, multiline: boolean) {\n        if (!fieldName || !value) {\n            return;\n        }\n\n        let newValue = multiline ? value.split('\\n').join('<br>') : value;\n        const existingValue = fields[fieldName];\n\n        if (existingValue) {\n            newValue = existingValue + '<br>' + newValue;\n        }\n\n        fields[fieldName] = newValue;\n    }\n\n    _sanitizeFileName(name: string) {\n        return sanitize(name, { replacement: '_' });\n    }\n\n    async _storeMediaFile(name: string, base64: string, ankiConnectUrl?: string) {\n        return this._executeAction('storeMediaFile', { filename: name, data: base64 }, ankiConnectUrl);\n    }\n\n    async _executeAction(action: string, params: any, ankiConnectUrl?: string) {\n        const body: any = {\n            action: action,\n            version: 6,\n        };\n\n        if (params) {\n            body['params'] = params;\n        }\n\n        const json = await this.fetcher.fetch(ankiConnectUrl || this.settingsProvider.ankiConnectUrl, body);\n\n        if (json.error) {\n            throw new Error(json.error);\n        }\n\n        return json;\n    }\n}\n","import IntervalTree, { Interval, NumericTuple } from '@flatten-js/interval-tree';\nimport { SubtitleModel } from './Model';\n\nexport interface SubtitleSlice<T> {\n    showing: T[];\n    lastShown?: T[];\n    nextToShow?: T[];\n    startedShowing?: T;\n    willStopShowing?: T;\n}\n\nexport interface SubtitleCollectionOptions {\n    returnLastShown?: boolean;\n    returnNextToShow?: boolean;\n    showingCheckRadiusMs?: number;\n}\n\nexport class SubtitleCollection<T extends SubtitleModel> {\n    static emptySubtitleCollection = new SubtitleCollection([]);\n\n    // Tree for subtitles\n    private readonly tree: IntervalTree<T>;\n    // Tree for gaps between subtitles. The gaps are populated with the last subtitle before the gap.\n    private readonly gapsTree?: IntervalTree<T>;\n    private readonly options: SubtitleCollectionOptions;\n\n    constructor(subtitles: T[], options: SubtitleCollectionOptions = {}) {\n        this.tree = new IntervalTree<T>();\n        this.options = options;\n\n        if (options.returnLastShown || options.returnNextToShow) {\n            let last: T | undefined;\n            this.gapsTree = new IntervalTree<T>();\n\n            if (subtitles.length > 0 && subtitles[0].start > 0) {\n                this.gapsTree.insert([0, subtitles[0].start - 1], subtitles[0]);\n            }\n\n            for (const s of subtitles) {\n                this.tree.insert([s.start, s.end], s);\n\n                if (last !== undefined && last.end < s.start) {\n                    this.gapsTree.insert([last.end + 1, s.start - 1], last);\n                }\n\n                last = s;\n            }\n        } else {\n            for (const s of subtitles) {\n                this.tree.insert([s.start, s.end], s);\n            }\n        }\n    }\n\n    static empty<S extends SubtitleModel>() {\n        return SubtitleCollection.emptySubtitleCollection as SubtitleCollection<S>;\n    }\n\n    subtitlesAt(timestamp: number): SubtitleSlice<T> {\n        const interval: NumericTuple = [timestamp, timestamp];\n        const showing = this.tree.search(interval) as T[];\n        let lastShown: T[] | undefined;\n        let nextToShow: T[] | undefined;\n        let startedShowing: T | undefined;\n        let willStopShowing: T | undefined;\n\n        if (showing.length === 0) {\n            if (this.gapsTree !== undefined) {\n                // One of returnLastShown or returnNextToShow is true due to constructor\n                const gapIntervals: Interval[] = [];\n                lastShown = this.gapsTree.search(interval, (s, i) => {\n                    gapIntervals.push(i);\n                    return s;\n                }) as T[];\n\n                if (lastShown.length > 0 && this.options.returnNextToShow) {\n                    const nextStart = gapIntervals[0].high + 1;\n                    nextToShow = this.tree.search([nextStart, nextStart]) as T[];\n                }\n            }\n        } else if (this.options.showingCheckRadiusMs !== undefined) {\n            for (const s of showing) {\n                if (willStopShowing === undefined && s.end < timestamp + this.options.showingCheckRadiusMs) {\n                    willStopShowing = s;\n                }\n\n                if (startedShowing === undefined && timestamp - this.options.showingCheckRadiusMs < s.start) {\n                    startedShowing = s;\n                }\n\n                if (startedShowing !== undefined && willStopShowing !== undefined) {\n                    break;\n                }\n            }\n        }\n\n        return { showing, lastShown, nextToShow, startedShowing, willStopShowing };\n    }\n}\n","import { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport MuiAlert, { Color } from '@material-ui/lab/Alert';\nimport Grow from '@material-ui/core/Grow';\n\nconst useAlertStyles = makeStyles({\n    root: {\n        display: 'flex',\n        justifyContent: 'center',\n        position: 'fixed',\n        top: 80,\n        width: '100%',\n        pointerEvents: 'none',\n        zIndex: 2000,\n    },\n});\n\ninterface Props {\n    open: boolean;\n    autoHideDuration: number;\n    onClose: () => void;\n    severity: Color | undefined;\n    children: React.ReactNode\n}\n\nexport default function Alert(props: Props) {\n    const classes = useAlertStyles();\n\n    useEffect(() => {\n        if (props.open) {\n            const timeout = setTimeout(props.onClose, props.autoHideDuration);\n            return () => clearTimeout(timeout);\n        }\n    }, [props.open, props.autoHideDuration, props.onClose]);\n\n    return (\n        <div className={classes.root}>\n            <Grow in={props.open}>\n                <MuiAlert severity={props.severity}>{props.children}</MuiAlert>\n            </Grow>\n        </div>\n    );\n}\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport { TextField, TextFieldProps } from \"@material-ui/core\";\n\nfunction extractTagsFromString(value: string) {\n    const splitTags = value.split(' ').join('').split(',');\n    const tags = [];\n\n    for (const tag of splitTags) {\n        tags.push(tag.trim());\n    }\n\n    return tags;\n}\n\nexport interface Props {\n    tags: string[];\n    onTagsChange: (tags: string[]) => void;\n}\n\nexport default function TagsTextField({tags, onTagsChange, ...props}: Props & TextFieldProps) {\n    const [value, setValue] = useState('');\n\n    useEffect(() => {\n        const tagsString = tags.join(', ');\n\n        if (tagsString !== value) {\n            setValue(tags.join(', '));\n        }\n    }, [value, tags]);\n\n    const handleChange = useCallback((e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        let currentValue = e.target.value;\n\n        if (\n            value.length > currentValue.length &&\n            value.includes(currentValue) &&\n            currentValue.endsWith(',')\n        ) {\n            // Detected a backspace at the last comma, move cursor back enough to remove the comma\n            currentValue = currentValue.substring(0, currentValue.length - 1);\n        }\n\n        // Decompose string into individual tags by removing all spaces and splitting on \",\"\n        const newTags = extractTagsFromString(currentValue);\n        setValue(newTags.join(', '));\n        onTagsChange(newTags);\n    }, [value, onTagsChange]);\n\n    return (\n        <TextField\n            {...props}\n            value={value}\n            onChange={handleChange}\n        />\n    );\n}\n","import React, { useEffect, useState, useLayoutEffect } from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport Card from '@material-ui/core/Card';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Dialog from '@material-ui/core/Dialog';\nimport { Image as CommonImage } from '@project/common';\n\ninterface ImageDimensions {\n    width: number;\n    height: number;\n}\n\nconst useStyles = makeStyles((theme) => ({\n    image: ({ width, height }: ImageDimensions) => ({\n        width: width,\n        height: height,\n        backgroundSize: 'contain',\n    }),\n}));\n\n// https://stackoverflow.com/questions/19014250/rerender-view-on-browser-resize-with-react\nfunction useWindowSize() {\n    const [size, setSize] = useState([0, 0]);\n\n    useLayoutEffect(() => {\n        function updateSize() {\n            setSize([window.innerWidth, window.innerHeight]);\n        }\n\n        window.addEventListener('resize', updateSize);\n        updateSize();\n\n        return () => window.removeEventListener('resize', updateSize);\n    }, []);\n\n    return size;\n}\n\ninterface Props {\n    open: boolean;\n    image?: CommonImage;\n    onClose: () => void;\n}\n\nexport default function ImageDialog({ open, image, onClose }: Props) {\n    const [dataUrl, setDataUrl] = useState<string>();\n    const [width, setWidth] = useState<number>(0);\n    const [height, setHeight] = useState<number>(0);\n    const [windowWidth, windowHeight] = useWindowSize();\n\n    let resizeRatio;\n\n    if (width > 0 && height > 0) {\n        resizeRatio = Math.min(1, Math.min(windowWidth / (2 * width), windowHeight / (2 * height)));\n    } else {\n        resizeRatio = 1;\n    }\n\n    const classes = useStyles({ width: width * resizeRatio, height: height * resizeRatio });\n\n    useEffect(() => {\n        setDataUrl(undefined);\n        async function fetchImage() {\n            if (!image) {\n                return;\n            }\n\n            const dataUrl = await image.dataUrl();\n            const img = new Image();\n            img.onload = () => {\n                setWidth(img.width);\n                setHeight(img.height);\n                setDataUrl(dataUrl);\n            };\n            img.src = dataUrl;\n        }\n\n        fetchImage();\n    }, [image]);\n\n    if (!image || !dataUrl) {\n        return null;\n    }\n\n    return (\n        <Dialog open={open} onClose={onClose} maxWidth=\"lg\">\n            <Card>\n                <CardMedia\n                    className={classes.image}\n                    image={dataUrl}\n                    title={image.name}\n                    style={{ width: width * resizeRatio, height: height * resizeRatio }}\n                />\n            </Card>\n        </Dialog>\n    );\n}\n","import React from 'react';\nimport { SubtitleModel } from '../..';\n\ninterface Props {\n    subtitle: SubtitleModel;\n    availableWidth: number;\n    scale: number;\n}\n\nexport default function SubtitleTextImage({ subtitle, availableWidth, scale }: Props) {\n    if (subtitle.textImage === undefined) {\n        return null;\n    }\n\n    const imageScale = (scale * availableWidth) / subtitle.textImage.screen.width;\n    const width = imageScale * subtitle.textImage.image.width;\n\n    return (\n        <div style={{ maxWidth: width }}>\n            <img style={{ width: '100%' }} alt=\"subtitle\" src={subtitle.textImage.dataUrl} />\n        </div>\n    );\n}\n","import React, { MutableRefObject, useCallback, useState, useEffect } from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport {\n    Anki,\n    AnkiDialogSliderContext,\n    AudioClip,\n    Image,\n    humanReadableTime,\n    AnkiSettings,\n    SubtitleModel,\n    surroundingSubtitles,\n} from '@project/common';\nimport Button from '@material-ui/core/Button';\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DoneIcon from '@material-ui/icons/Done';\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Paper from '@material-ui/core/Paper';\nimport RestoreIcon from '@material-ui/icons/Restore';\nimport SearchIcon from '@material-ui/icons/Search';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport Slider, { Mark } from '@material-ui/core/Slider';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport ZoomInIcon from '@material-ui/icons/ZoomIn';\nimport ZoomOutIcon from '@material-ui/icons/ZoomOut';\nimport SubtitleTextImage from './SubtitleTextImage';\nimport TagsTextField from './TagsTextField';\nimport { AnkiExportMode } from '@project/common';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& .MuiTextField-root': {\n            marginBottom: theme.spacing(1),\n        },\n    },\n    title: {\n        flexGrow: 1,\n    },\n    mediaField: {\n        cursor: 'pointer',\n        '& input': {\n            cursor: 'pointer',\n        },\n    },\n    rangeSelectSlider: {\n        '& .MuiSlider-markLabel': {\n            transform: 'translateX(-3%)',\n        },\n    },\n}));\n\nconst boundaryIntervalSubtitleCountRadius = 1;\nconst boundaryIntervalSubtitleTimeRadius = 5000;\n\nfunction boundaryIntervalFromSliderContext(sliderContext: AnkiDialogSliderContext) {\n    let index = sliderContext.subtitles.findIndex((s) => s.start === sliderContext.subtitleStart);\n    index = index === -1 ? sliderContext.subtitles.length / 2 : index;\n\n    const subtitlesToDisplay = surroundingSubtitles(\n        sliderContext.subtitles,\n        index,\n        boundaryIntervalSubtitleCountRadius,\n        boundaryIntervalSubtitleTimeRadius\n    );\n\n    let min = null;\n    let max = null;\n\n    for (const s of subtitlesToDisplay) {\n        if (min === null || s.start < min) {\n            min = s.start;\n        }\n\n        if (max === null || s.end > max) {\n            max = s.end;\n        }\n    }\n\n    return min !== null && max !== null && [min, max];\n}\n\nfunction sliderMarksFromSliderContext(sliderContext: AnkiDialogSliderContext, boundary: number[]): Mark[] {\n    const seenTimestamps: any = {};\n\n    return sliderContext.subtitles\n        .filter((s) => s.text.trim() !== '' || s.textImage !== undefined)\n        .map((s) => {\n            if (s.start in seenTimestamps) {\n                return null;\n            }\n\n            seenTimestamps[s.start] = true;\n\n            return {\n                value: s.start,\n                label: `${s.text.trim().substring(0, Math.min(s.text.length, 3))}...`,\n            };\n        })\n        .filter((mark: Mark | null) => mark !== null)\n        .filter((mark: Mark | null) => mark!.value >= boundary[0] && mark!.value <= boundary[1]) as Mark[];\n}\n\nfunction sliderValueLabelFormat(ms: number) {\n    return humanReadableTime(ms, true);\n}\n\nfunction subtitleIntersectsTimeInterval(subtitle: SubtitleModel, interval: number[]) {\n    return (\n        (subtitle.start >= interval[0] && subtitle.start <= interval[1]) ||\n        (subtitle.end >= interval[0] && subtitle.end <= interval[1]) ||\n        (interval[0] >= subtitle.start && interval[0] <= subtitle.end) ||\n        (interval[1] >= subtitle.start && interval[1] <= subtitle.end)\n    );\n}\n\ninterface ValueLabelComponentProps {\n    children: React.ReactElement;\n    open: boolean;\n    value: number;\n}\n\nfunction ValueLabelComponent({ children, open, value }: ValueLabelComponentProps) {\n    return (\n        <Tooltip open={open} enterTouchDelay={0} placement=\"top\" title={value}>\n            {children}\n        </Tooltip>\n    );\n}\n\ninterface TextImageSetProps {\n    selectedSubtitles: SubtitleModel[];\n    width: number;\n}\n\nconst useTextImageSetStyles = makeStyles((theme) => ({\n    root: {\n        marginBottom: theme.spacing(1),\n        padding: theme.spacing(1),\n        backgroundColor: theme.palette.action.disabledBackground,\n    },\n}));\n\nfunction TextImageSet({ selectedSubtitles, width }: TextImageSetProps) {\n    const classes = useTextImageSetStyles();\n\n    if (selectedSubtitles.length === 0 || width <= 0) {\n        return null;\n    }\n\n    return (\n        <Paper elevation={0} className={classes.root}>\n            {selectedSubtitles.map((s, index) => {\n                return <SubtitleTextImage key={index} availableWidth={width} subtitle={s} scale={1} />;\n            })}\n        </Paper>\n    );\n}\n\nconst TextFieldEndAdornment = withStyles({\n    // Hack to recenter TextField end adornment\n    root: {\n        transform: 'translateY(-8px)',\n    },\n})(InputAdornment);\n\nexport interface AnkiDialogState {\n    text: string;\n    sliderContext?: AnkiDialogSliderContext;\n    definition: string;\n    word: string;\n    source: string;\n    url: string;\n    customFieldValues: { [key: string]: string };\n    lastAppliedTimestampIntervalToText?: number[];\n    lastAppliedTimestampIntervalToAudio?: number[];\n    initialTimestampInterval?: number[];\n    timestampBoundaryInterval?: number[];\n    timestampInterval?: number[];\n}\n\ninterface AnkiDialogProps {\n    open: boolean;\n    disabled: boolean;\n    text?: string;\n    onProceed: (\n        text: string,\n        definition: string,\n        audioClip: AudioClip | undefined,\n        image: Image | undefined,\n        word: string,\n        source: string,\n        url: string,\n        customFieldValues: { [key: string]: string },\n        tags: string[],\n        mode: AnkiExportMode\n    ) => void;\n    onRerecord?: () => void;\n    onRewind: () => void;\n    onCancel: () => void;\n    onViewImage: (image: Image) => void;\n    onOpenSettings?: () => void;\n    audioClip?: AudioClip;\n    image?: Image;\n    source?: string;\n    url?: string;\n    sliderContext?: AnkiDialogSliderContext;\n    settingsProvider: AnkiSettings;\n    anki: Anki;\n    definition?: string;\n    word?: string;\n    customFields: { [key: string]: string };\n    customFieldValues?: { [key: string]: string };\n    initialTimestampInterval?: number[];\n    timestampBoundaryInterval?: number[];\n    timestampInterval?: number[];\n    lastAppliedTimestampIntervalToText?: number[];\n    lastAppliedTimestampIntervalToAudio?: number[];\n    stateRef?: MutableRefObject<AnkiDialogState | undefined>;\n}\n\nexport function AnkiDialog({\n    open,\n    disabled,\n    text: initialText,\n    onProceed,\n    onRewind,\n    onCancel,\n    onViewImage,\n    onOpenSettings,\n    onRerecord,\n    audioClip: initialAudioClip,\n    image,\n    source: initialSource,\n    url: initialUrl,\n    sliderContext,\n    customFields,\n    settingsProvider,\n    anki,\n    definition: initialDefinition,\n    word: initialWord,\n    customFieldValues: initialCustomFieldValues,\n    timestampInterval: initialSelectedTimestampInterval,\n    timestampBoundaryInterval: forceTimestampBoundaryInterval,\n    initialTimestampInterval: forceInitialTimestampInterval,\n    lastAppliedTimestampIntervalToText: initialLastAppliedTimestampIntervalToText,\n    lastAppliedTimestampIntervalToAudio: initialLastAppliedTimestampIntervalToAudio,\n    stateRef,\n}: AnkiDialogProps) {\n    const classes = useStyles();\n    const [definition, setDefinition] = useState<string>('');\n    const [text, setText] = useState<string>('');\n    const [word, setWord] = useState<string>('');\n    const [lastSearchedWord, setLastSearchedWord] = useState<string>();\n    const [source, setSource] = useState<string>(initialSource ?? '');\n    const [tags, setTags] = useState<string[]>(settingsProvider.tags);\n    const [url, setUrl] = useState<string>(initialUrl ?? '');\n    const [duplicateNotes, setDuplicateNotes] = useState<any[]>([]);\n    const [wordTimestamp, setWordTimestamp] = useState<number>(0);\n    const [customFieldValues, setCustomFieldValues] = useState<{ [key: string]: string }>({});\n    const [timestampInterval, setTimestampInterval] = useState<number[]>();\n    const [selectedSubtitles, setSelectedSubtitles] = useState<SubtitleModel[]>([]);\n    const [initialTimestampInterval, setInitialTimestampInterval] = useState<number[]>();\n    const [initialTimestampBoundaryInterval, setInitialTimestampBoundaryInterval] = useState<number[]>();\n    const [timestampBoundaryInterval, setTimestampBoundaryInterval] = useState<number[]>();\n    const [timestampMarks, setTimestampMarks] = useState<Mark[]>();\n    const [lastAppliedTimestampIntervalToText, setLastAppliedTimestampIntervalToText] = useState<number[]>();\n    const [lastAppliedTimestampIntervalToAudio, setLastAppliedTimestampIntervalToAudio] = useState<number[]>();\n    const [width, setWidth] = useState<number>(0);\n    const [audioClip, setAudioClip] = useState<AudioClip>();\n    const dialogRefCallback = useCallback((element: HTMLElement) => {\n        setWidth(element?.getBoundingClientRect().width ?? 0);\n    }, []);\n\n    if (stateRef) {\n        stateRef.current = {\n            text,\n            sliderContext,\n            definition,\n            word,\n            source,\n            url,\n            customFieldValues,\n            initialTimestampInterval,\n            timestampBoundaryInterval,\n            lastAppliedTimestampIntervalToText,\n            lastAppliedTimestampIntervalToAudio,\n            timestampInterval,\n        };\n    }\n\n    const textForTimestampInterval = useCallback(\n        (timestampInterval: number[]) => {\n            return sliderContext!.subtitles\n                .filter((s) => subtitleIntersectsTimeInterval(s, timestampInterval))\n                .filter((s) => s.text.trim() !== '')\n                .map((s) => s.text)\n                .join('\\n'); \n        },\n        [sliderContext]\n    );\n\n    useEffect(() => {\n        setText(initialText ?? '');\n        setDefinition(initialDefinition ?? '');\n        setWord(initialWord ?? '');\n        setSource(initialSource ?? '');\n        setUrl(initialUrl ?? '');\n        setDuplicateNotes([]);\n        setCustomFieldValues(initialCustomFieldValues ?? {});\n    }, [initialText, initialSource, initialDefinition, initialWord, initialCustomFieldValues, initialUrl]);\n\n    useEffect(() => {\n        setTags(settingsProvider.tags);\n    }, [settingsProvider.tags]);\n\n    useEffect(() => {\n        const timestampInterval =\n            initialSelectedTimestampInterval ||\n            (sliderContext && [sliderContext.subtitleStart, sliderContext.subtitleEnd]) ||\n            undefined;\n        const timestampBoundaryInterval =\n            (sliderContext && boundaryIntervalFromSliderContext(sliderContext)) || undefined;\n        const timestampMarks =\n            (sliderContext && sliderMarksFromSliderContext(sliderContext, timestampBoundaryInterval!)) || undefined;\n        const selectedSubtitles =\n            sliderContext === undefined || timestampInterval === undefined\n                ? []\n                : sliderContext.subtitles.filter((s) => subtitleIntersectsTimeInterval(s, timestampInterval));\n        setText(\n            initialText ??\n                selectedSubtitles\n                    .filter((s) => s.text.trim() !== '')\n                    .map((s) => s.text)\n                    .join('\\n')\n        );\n        setTimestampInterval(timestampInterval);\n        setSelectedSubtitles(selectedSubtitles);\n        setInitialTimestampInterval(forceInitialTimestampInterval || timestampInterval);\n        setLastAppliedTimestampIntervalToText(initialLastAppliedTimestampIntervalToText || timestampInterval);\n        setLastAppliedTimestampIntervalToAudio(initialLastAppliedTimestampIntervalToAudio || timestampInterval);\n        setTimestampBoundaryInterval(forceTimestampBoundaryInterval ?? timestampBoundaryInterval);\n        setInitialTimestampBoundaryInterval(timestampBoundaryInterval);\n        setTimestampMarks(timestampMarks);\n    }, [\n        sliderContext,\n        forceInitialTimestampInterval,\n        initialSelectedTimestampInterval,\n        forceTimestampBoundaryInterval,\n        initialLastAppliedTimestampIntervalToText,\n        initialLastAppliedTimestampIntervalToAudio,\n    ]);\n\n    useEffect(() => {\n        if (!initialAudioClip) {\n            setAudioClip(undefined);\n            return;\n        }\n\n        let newAudioClip = initialAudioClip;\n\n        if (settingsProvider.preferMp3) {\n            newAudioClip = newAudioClip.toMp3();\n        }\n\n        if (lastAppliedTimestampIntervalToAudio) {\n            newAudioClip = newAudioClip.slice(\n                Math.max(0, Math.round(lastAppliedTimestampIntervalToAudio[0]) - settingsProvider.audioPaddingStart),\n                Math.round(lastAppliedTimestampIntervalToAudio[1]) + settingsProvider.audioPaddingEnd\n            );\n        }\n\n        setAudioClip(newAudioClip);\n    }, [\n        initialAudioClip,\n        settingsProvider.preferMp3,\n        lastAppliedTimestampIntervalToAudio,\n        settingsProvider.audioPaddingStart,\n        settingsProvider.audioPaddingEnd,\n    ]);\n\n    useEffect(() => {\n        setWordTimestamp(Date.now());\n    }, [word]);\n\n    useEffect(() => {\n        if (!word || !settingsProvider.wordField) {\n            return;\n        }\n\n        const trimmedWord = word.trim();\n\n        if (trimmedWord === '' || trimmedWord === lastSearchedWord) {\n            return;\n        }\n\n        const timeout = setTimeout(async () => {\n            try {\n                setDuplicateNotes(await anki.findNotesWithWord(trimmedWord));\n                setLastSearchedWord(trimmedWord);\n            } catch (e) {\n                console.error(e);\n            }\n        }, 500);\n\n        return () => clearTimeout(timeout);\n    }, [word, wordTimestamp, lastSearchedWord, anki, settingsProvider.wordField]);\n\n    const handlePlayAudio = useCallback(\n        (e: React.MouseEvent<HTMLDivElement>) => {\n            e.preventDefault();\n            e.stopPropagation();\n            audioClip!.play();\n        },\n        [audioClip]\n    );\n\n    const handleCustomFieldChange = useCallback(\n        (customFieldName: string, value: string) => {\n            const newCustomFieldValues: { [fieldName: string]: string } = {};\n            Object.assign(newCustomFieldValues, customFieldValues);\n            newCustomFieldValues[customFieldName] = value;\n            setCustomFieldValues(newCustomFieldValues);\n        },\n        [customFieldValues]\n    );\n\n    let wordHelperText;\n\n    if (word && word.trim() === lastSearchedWord && settingsProvider.wordField) {\n        wordHelperText =\n            duplicateNotes.length > 0\n                ? `Found ${duplicateNotes.length} notes with word \"${word}\" in field \"${settingsProvider.wordField}\"`\n                : `No notes found with word \"${word.trim()}\" in field \"${settingsProvider.wordField}\"`;\n    } else {\n        wordHelperText = '';\n    }\n\n    const handleViewImage = useCallback(\n        (e: React.MouseEvent<HTMLDivElement>) => {\n            e.preventDefault();\n            e.stopPropagation();\n            onViewImage(image!);\n        },\n        [image, onViewImage]\n    );\n\n    const handleApplyTimestampIntervalToText = useCallback(() => {\n        if (timestampInterval === undefined) {\n            return;\n        }\n\n        const newText = textForTimestampInterval(timestampInterval);\n        setText(newText);\n        setLastAppliedTimestampIntervalToText(timestampInterval);\n    }, [textForTimestampInterval, timestampInterval]);\n\n    const handleTimestampIntervalChange = useCallback(\n        (e: React.ChangeEvent<{}>, newValue: number | number[]) => {\n            const newTimestampInterval = newValue as number[];\n            setTimestampInterval(newTimestampInterval);\n            const selectedSubtitles = sliderContext!.subtitles.filter((s) =>\n                subtitleIntersectsTimeInterval(s, newTimestampInterval)\n            );\n            setSelectedSubtitles(selectedSubtitles);\n\n            if (lastAppliedTimestampIntervalToText !== undefined) {\n                const expectedUnchangedText = textForTimestampInterval(lastAppliedTimestampIntervalToText);\n\n                if (text.trim() === expectedUnchangedText.trim()) {\n                    const newText = textForTimestampInterval(newTimestampInterval);\n                    setText(newText);\n                    setLastAppliedTimestampIntervalToText(newTimestampInterval);\n                }\n            }\n\n            if (onRerecord === undefined && audioClip?.isSliceable() === true) {\n                setLastAppliedTimestampIntervalToAudio(newTimestampInterval);\n            }\n        },\n        [sliderContext, text, lastAppliedTimestampIntervalToText, textForTimestampInterval]\n    );\n\n    const handleApplyTimestampIntervalToAudio = useCallback(\n        (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n            if (onRerecord) {\n                e.stopPropagation();\n                onRerecord();\n            } else {\n                setLastAppliedTimestampIntervalToAudio(timestampInterval);\n            }\n        },\n        [onRerecord, timestampInterval]\n    );\n\n    const handleResetTimestampInterval = useCallback(() => {\n        if (!initialTimestampBoundaryInterval) {\n            return;\n        }\n\n        const selectedSubtitles =\n            sliderContext === undefined || initialTimestampInterval === undefined\n                ? []\n                : sliderContext.subtitles.filter((s) => subtitleIntersectsTimeInterval(s, initialTimestampInterval));\n        setSelectedSubtitles(selectedSubtitles);\n        setTimestampInterval(initialTimestampInterval);\n        setTimestampBoundaryInterval(initialTimestampBoundaryInterval);\n        setTimestampMarks(\n            sliderContext && sliderMarksFromSliderContext(sliderContext, initialTimestampBoundaryInterval)\n        );\n    }, [initialTimestampInterval, initialTimestampBoundaryInterval, sliderContext]);\n\n    const handleZoomInTimestampInterval = useCallback(() => {\n        if (!timestampBoundaryInterval || !timestampInterval) {\n            return;\n        }\n\n        const newMin = (timestampBoundaryInterval[0] + timestampInterval[0]) / 2;\n        const newMax = (timestampBoundaryInterval[1] + timestampInterval[1]) / 2;\n        const newTimestampBoundaryInterval = [newMin, newMax];\n        setTimestampBoundaryInterval(newTimestampBoundaryInterval);\n        setTimestampMarks(sliderContext && sliderMarksFromSliderContext(sliderContext, newTimestampBoundaryInterval));\n    }, [timestampBoundaryInterval, timestampInterval, sliderContext]);\n\n    const handleZoomOutTimestampInterval = useCallback(() => {\n        if (!timestampBoundaryInterval || !timestampInterval) {\n            return;\n        }\n\n        const newMin = Math.max(0, 2 * timestampBoundaryInterval[0] - timestampInterval[0]);\n        const newMax = 2 * timestampBoundaryInterval[1] - timestampInterval[1];\n        const newTimestampBoundaryInterval = [newMin, newMax];\n        setTimestampBoundaryInterval(newTimestampBoundaryInterval);\n        setTimestampMarks(sliderContext && sliderMarksFromSliderContext(sliderContext, newTimestampBoundaryInterval));\n    }, [timestampBoundaryInterval, timestampInterval, sliderContext]);\n\n    const handleCopyImageToClipboard = useCallback(\n        async (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n            e.stopPropagation();\n\n            if (!image) {\n                return;\n            }\n\n            navigator.clipboard.write([new ClipboardItem({ 'image/png': await image.pngBlob() })]);\n        },\n        [image]\n    );\n\n    const disableApplyTextSelection =\n        !sliderContext || sliderContext.subtitles.filter((s) => s.text.trim() !== '').length === 0;\n\n    let audioActionElement: JSX.Element | undefined = undefined;\n\n    if (onRerecord !== undefined) {\n        audioActionElement = (\n            <Tooltip title=\"Apply Selection (rerecord)\">\n                <span>\n                    <IconButton\n                        disabled={\n                            !timestampInterval ||\n                            !lastAppliedTimestampIntervalToAudio ||\n                            (timestampInterval[0] === lastAppliedTimestampIntervalToAudio[0] &&\n                                timestampInterval[1] === lastAppliedTimestampIntervalToAudio[1])\n                        }\n                        onClick={handleApplyTimestampIntervalToAudio}\n                        edge=\"end\"\n                    >\n                        <FiberManualRecordIcon />\n                    </IconButton>\n                </span>\n            </Tooltip>\n        );\n    }\n\n    return (\n        <Dialog open={open} disableEnforceFocus fullWidth maxWidth=\"sm\" onClose={onCancel}>\n            <Toolbar>\n                <Typography variant=\"h6\" className={classes.title}>\n                    Anki Export\n                </Typography>\n                {onOpenSettings && (\n                    <IconButton edge=\"end\" onClick={() => onOpenSettings()}>\n                        <SettingsIcon />\n                    </IconButton>\n                )}\n            </Toolbar>\n            <DialogContent ref={dialogRefCallback}>\n                <form className={classes.root}>\n                    {sliderContext && timestampInterval && (\n                        <TextImageSet\n                            selectedSubtitles={selectedSubtitles.filter((s) => s.textImage !== undefined)}\n                            width={width}\n                        />\n                    )}\n                    <TextField\n                        variant=\"filled\"\n                        color=\"secondary\"\n                        multiline\n                        fullWidth\n                        maxRows={8}\n                        label=\"Sentence\"\n                        value={text}\n                        onChange={(e) => setText(e.target.value)}\n                        InputProps={{\n                            endAdornment: timestampInterval && (\n                                <TextFieldEndAdornment position=\"end\">\n                                    <Tooltip title=\"Apply Selection\">\n                                        <span>\n                                            <IconButton\n                                                disabled={\n                                                    !timestampInterval ||\n                                                    !lastAppliedTimestampIntervalToText ||\n                                                    (timestampInterval[0] === lastAppliedTimestampIntervalToText[0] &&\n                                                        timestampInterval[1] ===\n                                                            lastAppliedTimestampIntervalToText[1]) ||\n                                                    disableApplyTextSelection\n                                                }\n                                                onClick={handleApplyTimestampIntervalToText}\n                                                edge=\"end\"\n                                            >\n                                                <DoneIcon />\n                                            </IconButton>\n                                        </span>\n                                    </Tooltip>\n                                </TextFieldEndAdornment>\n                            ),\n                        }}\n                    />\n                    <TextField\n                        variant=\"filled\"\n                        color=\"secondary\"\n                        multiline\n                        fullWidth\n                        rows={8}\n                        label=\"Definition\"\n                        value={definition}\n                        onChange={(e) => setDefinition(e.target.value)}\n                    />\n                    <TextField\n                        variant=\"filled\"\n                        color=\"secondary\"\n                        fullWidth\n                        label=\"Word\"\n                        value={word}\n                        onChange={(e) => setWord(e.target.value)}\n                        helperText={wordHelperText}\n                        InputProps={{\n                            endAdornment: (\n                                <InputAdornment position=\"end\">\n                                    <Tooltip title=\"Search in Anki\">\n                                        <span>\n                                            <IconButton\n                                                disabled={\n                                                    disabled ||\n                                                    !settingsProvider.wordField ||\n                                                    !word ||\n                                                    word.trim() === ''\n                                                }\n                                                onClick={() => anki.findNotesWithWordGui(word.trim())}\n                                                edge=\"end\"\n                                            >\n                                                <SearchIcon />\n                                            </IconButton>\n                                        </span>\n                                    </Tooltip>\n                                </InputAdornment>\n                            ),\n                        }}\n                    />\n                    {Object.keys(customFields).map((customFieldName) => (\n                        <TextField\n                            key={customFieldName}\n                            variant=\"filled\"\n                            color=\"secondary\"\n                            fullWidth\n                            multiline\n                            maxRows={8}\n                            label={customFieldName}\n                            value={customFieldValues[customFieldName] || ''}\n                            onChange={(e) => handleCustomFieldChange(customFieldName, e.target.value)}\n                        />\n                    ))}\n                    {audioClip && (\n                        <div className={classes.mediaField} onClick={handlePlayAudio}>\n                            <TextField\n                                variant=\"filled\"\n                                color=\"secondary\"\n                                fullWidth\n                                value={audioClip.name}\n                                label=\"Audio\"\n                                helperText={\n                                    onRerecord === undefined &&\n                                    !audioClip.isSliceable() &&\n                                    'Audio clip cannot be updated because it is pre-recorded'\n                                }\n                                InputProps={{\n                                    endAdornment: audioActionElement && timestampInterval && (\n                                        <InputAdornment position=\"end\">{audioActionElement}</InputAdornment>\n                                    ),\n                                }}\n                            />\n                        </div>\n                    )}\n                    {image && (\n                        <div className={classes.mediaField} onClick={handleViewImage}>\n                            <TextField\n                                variant=\"filled\"\n                                color=\"secondary\"\n                                fullWidth\n                                value={image.name}\n                                label=\"Image\"\n                                InputProps={{\n                                    endAdornment: (\n                                        <InputAdornment position=\"end\">\n                                            <Tooltip title=\"Copy to Clipboard\">\n                                                <span>\n                                                    <IconButton onClick={handleCopyImageToClipboard} edge=\"end\">\n                                                        <FileCopyIcon />\n                                                    </IconButton>\n                                                </span>\n                                            </Tooltip>\n                                        </InputAdornment>\n                                    ),\n                                }}\n                            />\n                        </div>\n                    )}\n                    <TextField\n                        variant=\"filled\"\n                        color=\"secondary\"\n                        fullWidth\n                        label=\"Source\"\n                        value={source}\n                        onChange={(e) => setSource(e.target.value)}\n                    />\n                    {initialUrl && (\n                        <TextField\n                            variant=\"filled\"\n                            color=\"secondary\"\n                            fullWidth\n                            label=\"URL\"\n                            value={url}\n                            onChange={(e) => setUrl(e.target.value)}\n                        />\n                    )}\n                    {settingsProvider.tags.length > 0 && (\n                        <TagsTextField\n                            variant=\"filled\"\n                            label=\"Tags\"\n                            helperText=\"Comma-separated list of strings\"\n                            fullWidth\n                            color=\"secondary\"\n                            tags={tags}\n                            onTagsChange={(newTags) => setTags(newTags)}\n                        />\n                    )}\n                    {timestampInterval && timestampBoundaryInterval && timestampMarks && (\n                        <Grid container direction=\"row\">\n                            <Grid item style={{ flexGrow: 1 }}>\n                                <Slider\n                                    ValueLabelComponent={ValueLabelComponent}\n                                    value={timestampInterval}\n                                    valueLabelFormat={sliderValueLabelFormat}\n                                    onChange={handleTimestampIntervalChange}\n                                    min={timestampBoundaryInterval[0]}\n                                    max={timestampBoundaryInterval[1]}\n                                    marks={timestampMarks}\n                                    step={1}\n                                    valueLabelDisplay=\"auto\"\n                                    className={classes.rangeSelectSlider}\n                                    color=\"secondary\"\n                                />\n                            </Grid>\n                            <Grid item>\n                                <Tooltip title=\"Reset\">\n                                    <span>\n                                        <IconButton\n                                            edge=\"end\"\n                                            style={{ marginTop: -8 }}\n                                            onClick={handleResetTimestampInterval}\n                                        >\n                                            <RestoreIcon />\n                                        </IconButton>\n                                    </span>\n                                </Tooltip>\n                            </Grid>\n                            <Grid item>\n                                <Tooltip title=\"Zoom In\">\n                                    <span>\n                                        <IconButton\n                                            edge=\"end\"\n                                            style={{ marginTop: -8 }}\n                                            onClick={handleZoomInTimestampInterval}\n                                        >\n                                            <ZoomInIcon />\n                                        </IconButton>\n                                    </span>\n                                </Tooltip>\n                            </Grid>\n                            <Grid item>\n                                <Tooltip title=\"Zoom Out\">\n                                    <span>\n                                        <IconButton\n                                            edge=\"end\"\n                                            style={{ marginTop: -8 }}\n                                            onClick={handleZoomOutTimestampInterval}\n                                        >\n                                            <ZoomOutIcon />\n                                        </IconButton>\n                                    </span>\n                                </Tooltip>\n                            </Grid>\n                        </Grid>\n                    )}\n                </form>\n            </DialogContent>\n            <DialogActions>\n                <Button disabled={disabled} onClick={() => onCancel()}>\n                    Cancel\n                </Button>\n                {sliderContext && (\n                    <Button disabled={disabled} onClick={() => onRewind()}>\n                        Rewind\n                    </Button>\n                )}\n                <Button\n                    disabled={disabled}\n                    onClick={() =>\n                        onProceed(\n                            text,\n                            definition,\n                            audioClip,\n                            image,\n                            word,\n                            source ?? '',\n                            url ?? '',\n                            customFieldValues,\n                            tags,\n                            'gui'\n                        )\n                    }\n                >\n                    Open in Anki\n                </Button>\n                <Button\n                    disabled={disabled}\n                    onClick={() =>\n                        onProceed(\n                            text,\n                            definition,\n                            audioClip,\n                            image,\n                            word,\n                            source ?? '',\n                            url ?? '',\n                            customFieldValues,\n                            tags,\n                            'updateLast'\n                        )\n                    }\n                >\n                    Update Last Card\n                </Button>\n                <Button\n                    disabled={disabled}\n                    onClick={() =>\n                        onProceed(\n                            text,\n                            definition,\n                            audioClip,\n                            image,\n                            word,\n                            source ?? '',\n                            url ?? '',\n                            customFieldValues,\n                            tags,\n                            'default'\n                        )\n                    }\n                >\n                    Export\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n","export default __webpack_public_path__ + \"static/media/background-colored.cbc50e45.png\";","import { makeStyles } from '@material-ui/styles';\nimport Fade from '@material-ui/core/Fade';\nimport coloredBackground from './background-colored.png';\nimport { Theme } from '@material-ui/core';\n\ninterface StylesProps {\n    dragging: boolean;\n    appBarHidden: boolean;\n}\n\ninterface Props {\n    dragging: boolean;\n    appBarHidden: boolean;\n    loading: boolean;\n}\n\nconst useStyles = makeStyles<Theme, StylesProps>((theme) => ({\n    root: ({ dragging, appBarHidden }) => ({\n        position: 'absolute',\n        height: appBarHidden ? '100%' : 'calc(100% - 64px)',\n        width: '100%',\n        zIndex: 101,\n        pointerEvents: dragging ? 'auto' : 'none',\n    }),\n    transparentBackground: ({ appBarHidden }) => ({\n        '&::before': {\n            content: \"' '\",\n            position: 'absolute',\n            height: appBarHidden ? '100vh' : 'calc(100vh - 64px)',\n            width: '100%',\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            alignItems: 'center',\n            textAlign: 'center',\n            backgroundSize: '300px 300px',\n            backgroundRepeat: 'no-repeat',\n            backgroundPosition: 'center',\n            backgroundImage: `url(${coloredBackground})`,\n            backgroundBlendMode: 'overlay',\n            background: 'rgba(0, 0, 0, .3)',\n            filter: 'drop-shadow(10px 10px 10px rgb(0, 0, 0, .4))',\n        },\n        width: '100%',\n        height: '100%',\n    }),\n}));\n\nexport default function DragOverlay({ dragging, appBarHidden, loading }: Props) {\n    const classes = useStyles({ dragging, appBarHidden });\n\n    return (\n        <div className={classes.root}>\n            <Fade in={dragging || loading}>\n                <div className={classes.transparentBackground} />\n            </Fade>\n        </div>\n    );\n}\n","import { compile as parseAss } from 'ass-compiler';\nimport { Cue, Node, parseSync as parseSrt, stringifySync as writeSrt } from 'subtitle';\nimport { WebVTT } from 'vtt.js';\nimport { XMLParser } from 'fast-xml-parser';\nimport { DisplaySet, parseDisplaySets } from 'pgs-parser';\nimport { SubtitleTextImage } from '@project/common';\n\nconst tagRegex = RegExp('</?([^>]*)>', 'ig');\nconst assNewLineRegex = RegExp(/\\\\[nN]/, 'ig');\nconst helperElement = document.createElement('div');\nconst helperCanvas = document.createElement('canvas');\n\ninterface SubtitleNode {\n    start: number;\n    end: number;\n    text: string;\n    textImage?: SubtitleTextImage;\n    track: number;\n}\n\nexport default class SubtitleReader {\n    private xmlParser?: XMLParser;\n\n    async subtitles(files: File[]) {\n        return (await Promise.all(files.map((f, i) => this._subtitles(f, i))))\n            .flatMap((nodes) => nodes)\n            .sort((n1, n2) => n1.start - n2.start);\n    }\n\n    async _subtitles(file: File, track: number): Promise<SubtitleNode[]> {\n        if (file.name.endsWith('.srt')) {\n            const nodes = parseSrt(await file.text());\n            return nodes\n                .filter((node) => node.type === 'cue')\n                .map((node) => {\n                    const cue = node.data as Cue;\n                    return {\n                        start: cue.start,\n                        end: cue.end,\n                        text: cue.text.replace(tagRegex, ''),\n                        track: track,\n                    };\n                });\n        }\n\n        if (file.name.endsWith('.vtt') || file.name.endsWith('.nfvtt')) {\n            return new Promise(async (resolve, reject) => {\n                const isFromNetflix = file.name.endsWith('.nfvtt');\n                const parser = new WebVTT.Parser(window, WebVTT.StringDecoder());\n                const cues: any[] = [];\n                parser.oncue = (c: any) => {\n                    if (isFromNetflix) {\n                        c.text = c.text.replace(tagRegex, '');\n\n                        const lines = c.text.split('\\n');\n                        const newLines = [];\n\n                        for (const line of lines) {\n                            newLines.push(this._fixRTL(line));\n                        }\n\n                        c.text = newLines.join('\\n');\n                    }\n                    cues.push(c);\n                };\n                parser.onflush = () =>\n                    resolve(\n                        cues.map((c) => ({\n                            start: Math.floor(c.startTime * 1000),\n                            end: Math.floor(c.endTime * 1000),\n                            text: c.text as string,\n                            track: track,\n                        }))\n                    );\n                parser.parse(await file.text());\n                parser.flush();\n            });\n        }\n\n        if (file.name.endsWith('.ass')) {\n            const nodes = parseAss(await file.text(), {});\n            return nodes.dialogues.map((dialogue) => {\n                return {\n                    start: Math.round(dialogue.start * 1000),\n                    end: Math.round(dialogue.end * 1000),\n                    text: dialogue.slices\n                        .flatMap((slice) => slice.fragments.map((fragment) => fragment.text))\n                        .join('')\n                        .replace(assNewLineRegex, '\\n'),\n                    track: track,\n                };\n            });\n        }\n\n        if (file.name.endsWith('.ytxml')) {\n            const text = await file.text();\n            const xml = this._xmlParser().parse(text);\n\n            if (Object.keys(xml).length === 0) {\n                return [];\n            }\n\n            const textNodes = xml['transcript']['text'];\n            const subtitles = [];\n\n            for (let index = 0, length = textNodes.length; index < length; index++) {\n                const elm = textNodes[index];\n\n                if (!('#text' in elm) || !('@_dur' in elm) || !('@_start' in elm)) {\n                    continue;\n                }\n\n                const start = parseFloat(elm['@_start']);\n\n                subtitles.push({\n                    start: Math.floor(start * 1000),\n                    end: Math.floor((start + parseFloat(elm['@_dur'])) * 1000),\n                    text: this._decodeHTML(String(elm['#text']).replace(tagRegex, '')),\n                    track,\n                });\n            }\n\n            return subtitles;\n        }\n\n        if (file.name.endsWith('.sup')) {\n            const subtitles: SubtitleNode[] = [];\n            await file\n                .stream()\n                // FIXME: Figure out how to remove conflicts with @types/node ReadableStream\n                // @ts-ignore\n                .pipeThrough(parseDisplaySets())\n                .pipeTo(this._displaySetsToSubtitles(subtitles, track));\n\n            return subtitles;\n        }\n\n        throw new Error('Unsupported subtitle file format');\n    }\n\n    private _displaySetsToSubtitles(subtitles: SubtitleNode[], track: number) {\n        let imageDataArray: Uint8ClampedArray | undefined;\n        let currentImageDisplaySet: DisplaySet | undefined;\n\n        return new WritableStream<DisplaySet>({\n            write(displaySet, controller) {\n                if (displaySet.objectDefinitionSegments.length > 0) {\n                    if (currentImageDisplaySet === undefined) {\n                        currentImageDisplaySet = displaySet;\n                    }\n                } else if (currentImageDisplaySet !== undefined) {\n                    const screenWidth = currentImageDisplaySet.presentationCompositionSegment.width;\n                    const screenHeight = currentImageDisplaySet.presentationCompositionSegment.height;\n                    imageDataArray =\n                        imageDataArray === undefined || imageDataArray.length < screenHeight * screenWidth * 4\n                            ? new Uint8ClampedArray(screenWidth * screenHeight * 4)\n                            : imageDataArray;\n                    const imageData = currentImageDisplaySet.imageData(imageDataArray);\n                    helperCanvas.width = imageData.width;\n                    helperCanvas.height = imageData.height;\n                    const context = helperCanvas.getContext('2d')!;\n                    context.putImageData(imageData, 0, 0);\n                    subtitles.push({\n                        start:\n                            currentImageDisplaySet.objectDefinitionSegments[0].header.presentationTimestamp / 90 ?? 0,\n                        end: displaySet.endDefinitionSegment.header.presentationTimestamp / 90,\n                        text: '',\n                        textImage: {\n                            dataUrl: helperCanvas.toDataURL('image/png'),\n                            image: {\n                                width: imageData.width,\n                                height: imageData.height,\n                            },\n                            screen: {\n                                width: currentImageDisplaySet.presentationCompositionSegment.width,\n                                height: currentImageDisplaySet.presentationCompositionSegment.height,\n                            },\n                        },\n                        track,\n                    });\n\n                    currentImageDisplaySet = undefined;\n                }\n            },\n        });\n    }\n\n    private _fixRTL(line: string): string {\n        const index1 = line.indexOf('&lrm;');\n        const index2 = line.indexOf('&rlm;');\n        let newLine = '';\n\n        if (index1 > -1) {\n            newLine = line.substring(0, index1) + '\\u202a' + line.substring(index1 + 5) + '\\u202c';\n            return this._fixRTL(newLine);\n        } else if (index2 > -1) {\n            newLine = line.substring(0, index2) + '\\u202b' + line.substring(index2 + 5) + '\\u202c';\n            return this._fixRTL(newLine);\n        }\n\n        return line;\n    }\n\n    private _decodeHTML(text: string): string {\n        helperElement.innerHTML = text;\n        return helperElement.childNodes.length === 0 ? '' : helperElement.childNodes[0].nodeValue!;\n    }\n\n    private _xmlParser() {\n        if (this.xmlParser === undefined) {\n            this.xmlParser = new XMLParser({ ignoreAttributes: false });\n        }\n\n        return this.xmlParser;\n    }\n\n    subtitlesToSrt(subtitles: SubtitleNode[]) {\n        const nodes: Node[] = subtitles.map((subtitleNode) => {\n            return {\n                type: 'cue',\n                data: {\n                    start: subtitleNode.start,\n                    end: subtitleNode.end,\n                    text: subtitleNode.text,\n                },\n            };\n        });\n        return writeSrt(nodes, { format: 'SRT' });\n    }\n\n    async filesToSrt(files: File[]) {\n        return this.subtitlesToSrt(await this.subtitles(files));\n    }\n}\n","import { makeStyles, Theme } from '@material-ui/core/styles';\nimport clsx from 'clsx';\nimport AppBar from '@material-ui/core/AppBar';\nimport BugReportIcon from '@material-ui/icons/BugReport';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport HelpIcon from '@material-ui/icons/Help';\nimport FolderIcon from '@material-ui/icons/Folder';\nimport IconButton from '@material-ui/core/IconButton';\nimport ListIcon from '@material-ui/icons/List';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Tooltip, { TooltipProps } from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Popover from '@material-ui/core/Popover';\nimport { useCallback, useState } from 'react';\n\ninterface BarProps {\n    drawerWidth: number;\n    drawerOpen: boolean;\n    hidden: boolean;\n    title: string;\n    subtitleFiles?: File[];\n    onFileSelector: () => void;\n    onDownloadSubtitleFilesAsSrt: () => void;\n    onOpenSettings: () => void;\n    onOpenCopyHistory: () => void;\n}\n\ninterface StyleProps {\n    drawerWidth: number;\n}\n\nconst useStyles = makeStyles<Theme, StyleProps, string>((theme) => ({\n    title: {\n        flexGrow: 1,\n    },\n    leftButton: {\n        marginRight: theme.spacing(1),\n    },\n    appBar: {\n        transition: theme.transitions.create(['margin', 'width'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n    },\n    appBarShift: {\n        width: ({ drawerWidth }) => `calc(100% - ${drawerWidth}px)`,\n        transition: theme.transitions.create(['margin', 'width'], {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n        marginRight: ({ drawerWidth }) => drawerWidth,\n    },\n    copyHistoryButton: {\n        transform: 'scaleX(1)',\n        width: 48,\n        padding: 12,\n        transition: theme.transitions.create(['transform', 'padding', 'width'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n    },\n    copyHistoryButtonShift: {\n        transform: 'scaleX(0)',\n        width: 0,\n        padding: 5,\n        transition: theme.transitions.create(['transform', 'padding', 'width'], {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    hide: {\n        display: 'none',\n    },\n}));\n\ninterface CopyHistoryTooltipStylesProps {\n    show: boolean;\n}\n\ninterface CopyHistoryTooltipProps extends TooltipProps {\n    show: boolean;\n}\n\nconst useCopyHistoryTooltipStyles = makeStyles<Theme, CopyHistoryTooltipStylesProps, string>((theme) => ({\n    tooltip: ({ show }) => ({\n        display: show ? 'block' : 'none',\n    }),\n}));\n\nfunction CopyHistoryTooltip({ show, ...toolTipProps }: CopyHistoryTooltipProps) {\n    const classes = useCopyHistoryTooltipStyles({ show: show });\n    return <Tooltip classes={classes} {...toolTipProps} />;\n}\n\nexport default function Bar({\n    drawerWidth,\n    drawerOpen,\n    hidden,\n    title,\n    subtitleFiles,\n    onOpenSettings,\n    onOpenCopyHistory,\n    onFileSelector,\n    onDownloadSubtitleFilesAsSrt,\n}: BarProps) {\n    const classes = useStyles({ drawerWidth });\n    const [menuOpen, setMenuOpen] = useState<boolean>(false);\n    const [menuAnchorEl, setMenuAnchorEl] = useState<HTMLElement>();\n    const canSaveAsSrt =\n        subtitleFiles !== undefined && subtitleFiles.find((f) => !f.name.endsWith('.sup')) !== undefined;\n\n    const handleFileAction = useCallback(\n        (event: React.MouseEvent<HTMLButtonElement>) => {\n            if (canSaveAsSrt) {\n                setMenuAnchorEl(event.currentTarget);\n                setMenuOpen(true);\n            } else {\n                onFileSelector();\n            }\n        },\n        [onFileSelector, canSaveAsSrt]\n    );\n\n    const handleMenuClose = useCallback(() => {\n        setMenuOpen(false);\n    }, []);\n\n    const handleOpenFilesFromMenu = useCallback(() => {\n        setMenuOpen(false);\n        onFileSelector();\n    }, [onFileSelector]);\n\n    const handleDownloadSubtitleFilesAsSrt = useCallback(() => {\n        setMenuOpen(false);\n        onDownloadSubtitleFilesAsSrt();\n    }, [onDownloadSubtitleFilesAsSrt]);\n\n    return (\n        <>\n            {canSaveAsSrt && (\n                <Popover\n                    open={menuOpen}\n                    anchorEl={menuAnchorEl}\n                    onClose={handleMenuClose}\n                    anchorOrigin={{\n                        vertical: 'bottom',\n                        horizontal: 'center',\n                    }}\n                >\n                    <List>\n                        <ListItem button onClick={handleOpenFilesFromMenu}>\n                            Open Files\n                        </ListItem>\n                        <ListItem button onClick={handleDownloadSubtitleFilesAsSrt}>\n                            Download Subtitles as SRT\n                        </ListItem>\n                    </List>\n                </Popover>\n            )}\n            <AppBar\n                position=\"static\"\n                elevation={0}\n                className={clsx(classes.appBar, {\n                    [classes.appBarShift]: drawerOpen,\n                    [classes.hide]: hidden,\n                })}\n            >\n                <Toolbar>\n                    <Tooltip\n                        disableFocusListener={canSaveAsSrt}\n                        disableHoverListener={canSaveAsSrt}\n                        disableTouchListener={canSaveAsSrt}\n                        title=\"Open Files\"\n                    >\n                        <IconButton\n                            edge=\"start\"\n                            color=\"inherit\"\n                            className={classes.leftButton}\n                            onClick={handleFileAction}\n                        >\n                            <FolderIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        {title}\n                    </Typography>\n                    <Tooltip title=\"Donate\">\n                        <IconButton\n                            edge=\"end\"\n                            color=\"inherit\"\n                            component=\"a\"\n                            href=\"https://github.com/killergerbah/asbplayer#supporters\"\n                            target=\"_blank\"\n                            rel=\"noreferrer\"\n                        >\n                            <FavoriteIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title=\"Submit Issue\">\n                        <IconButton\n                            edge=\"end\"\n                            color=\"inherit\"\n                            component=\"a\"\n                            href=\"https://github.com/killergerbah/asbplayer/issues\"\n                            target=\"_blank\"\n                            rel=\"noreferrer\"\n                        >\n                            <BugReportIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title=\"Help\">\n                        <IconButton\n                            edge=\"end\"\n                            color=\"inherit\"\n                            component=\"a\"\n                            href=\"https://github.com/killergerbah/asbplayer#usage\"\n                            target=\"_blank\"\n                            rel=\"noreferrer\"\n                        >\n                            <HelpIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title=\"Settings\">\n                        <IconButton edge=\"end\" color=\"inherit\" onClick={onOpenSettings}>\n                            <SettingsIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <CopyHistoryTooltip title=\"Mining History\" show={!drawerOpen}>\n                        <IconButton\n                            edge=\"end\"\n                            color=\"inherit\"\n                            aria-label=\"menu\"\n                            className={clsx(classes.copyHistoryButton, {\n                                [classes.copyHistoryButtonShift]: drawerOpen,\n                            })}\n                            onClick={onOpenCopyHistory}\n                        >\n                            <ListIcon />\n                        </IconButton>\n                    </CopyHistoryTooltip>\n                </Toolbar>\n            </AppBar>\n        </>\n    );\n}\n","import { Rgb } from '@project/common';\n\nexport function arrayEquals(a: any[], b: any[], equals = (a: any, b: any) => a === b) {\n    if (a.length !== b.length) {\n        return false;\n    }\n\n    for (let i = 0; i < a.length; ++i) {\n        if (!equals(a[i], b[i])) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nexport function keysAreEqual(a: any, b: any) {\n    for (let key in a) {\n        if (!(key in b)) {\n            return false;\n        }\n    }\n\n    for (let key in b) {\n        if (!(key in a)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n// https://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb\nfunction hexToRgb(hex: string): Rgb {\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)!;\n    return {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16),\n    };\n}\n\ninterface SubtitleStyle {\n    subtitleColor: string;\n    subtitleSize: number;\n    subtitleOutlineThickness: number;\n    subtitleOutlineColor: string;\n    subtitleBackgroundOpacity: number;\n    subtitleBackgroundColor: string;\n    subtitleFontFamily: string;\n}\n\nexport function computeStyles({\n    subtitleColor,\n    subtitleSize,\n    subtitleOutlineThickness,\n    subtitleOutlineColor,\n    subtitleBackgroundOpacity,\n    subtitleBackgroundColor,\n    subtitleFontFamily,\n}: SubtitleStyle) {\n    const styles: any = {\n        color: subtitleColor,\n        fontSize: Number(subtitleSize),\n    };\n\n    if (subtitleOutlineThickness > 0) {\n        const thickness = subtitleOutlineThickness;\n        const color = subtitleOutlineColor;\n        styles[\n            'textShadow'\n        ] = `0 0 ${thickness}px ${color}, 0 0 ${thickness}px ${color}, 0 0 ${thickness}px ${color}, 0 0 ${thickness}px ${color}`;\n    }\n\n    if (subtitleBackgroundOpacity > 0) {\n        const opacity = subtitleBackgroundOpacity;\n        const color = subtitleBackgroundColor;\n        const { r, g, b } = hexToRgb(color);\n        styles['backgroundColor'] = `rgba(${r}, ${g}, ${b}, ${opacity})`;\n    }\n\n    if (subtitleFontFamily && subtitleFontFamily.length > 0) {\n        styles['fontFamily'] = subtitleFontFamily;\n    }\n\n    return styles;\n}\n\nexport function timeDurationDisplay(\n    milliseconds: number,\n    totalMilliseconds: number,\n    includeMilliseconds = true\n): string {\n    if (milliseconds < 0) {\n        return timeDurationDisplay(0, totalMilliseconds);\n    }\n\n    milliseconds = Math.round(milliseconds);\n    const ms = milliseconds % 1000;\n    milliseconds = (milliseconds - ms) / 1000;\n    const secs = milliseconds % 60;\n    milliseconds = (milliseconds - secs) / 60;\n    const mins = milliseconds % 60;\n\n    if (totalMilliseconds >= 3600000) {\n        const hrs = (milliseconds - mins) / 60;\n\n        if (includeMilliseconds) {\n            return pad(hrs) + ':' + pad(mins) + ':' + pad(secs) + '.' + pad(ms, 3);\n        }\n\n        return pad(hrs) + ':' + pad(mins) + ':' + pad(secs);\n    }\n\n    if (includeMilliseconds) {\n        return pad(mins) + ':' + pad(secs) + '.' + pad(ms, 3);\n    }\n\n    return pad(mins) + ':' + pad(secs);\n}\n\nfunction pad(n: number, zeros: number = 2) {\n    return String(n).padStart(zeros, '0');\n}\n","import React, { useCallback, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { timeDurationDisplay } from '../services/Util';\nimport { ListItemSecondaryAction, Theme } from '@material-ui/core';\nimport Divider from '@material-ui/core/Divider';\nimport Drawer from '@material-ui/core/Drawer';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Popover from '@material-ui/core/Popover';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport StarIcon from '@material-ui/icons/Star';\nimport SaveAltIcon from '@material-ui/icons/SaveAlt';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport { AudioModel, ImageModel, SubtitleModel } from '@project/common';\n\nexport interface CopyHistoryItem extends SubtitleModel {\n    name: string;\n    id: string;\n    timestamp: number;\n    surroundingSubtitles: SubtitleModel[];\n    audioFile?: File;\n    audioTrack?: string;\n    videoFile?: File;\n    subtitleFile?: File;\n    mediaTimestamp?: number;\n    audio?: AudioModel;\n    image?: ImageModel;\n    url?: string;\n}\n\ninterface CopyHistoryProps {\n    open: boolean;\n    drawerWidth: number;\n    items: CopyHistoryItem[];\n    onClose: () => void;\n    onDelete: (item: CopyHistoryItem) => void;\n    onAnki: (item: CopyHistoryItem) => void;\n    onSelect: (item: CopyHistoryItem) => void;\n    onClipAudio: (item: CopyHistoryItem) => void;\n    onDownloadImage: (item: CopyHistoryItem) => void;\n    onDownloadSectionAsSrt: (name: string, items: CopyHistoryItem[]) => void;\n}\n\nconst useStyles = makeStyles<Theme, CopyHistoryProps, string>((theme) => ({\n    drawer: {\n        width: ({ drawerWidth }) => drawerWidth,\n        flexShrink: 0,\n    },\n    drawerPaper: {\n        width: ({ drawerWidth }) => drawerWidth,\n    },\n    drawerHeader: {\n        display: 'flex',\n        alignItems: 'center',\n        position: 'static',\n        padding: theme.spacing(0, 1),\n        // necessary for content to be below app bar\n        ...theme.mixins.toolbar,\n        justifyContent: 'flex-start',\n    },\n    listContainer: {\n        position: 'relative',\n        height: '100%',\n        overflowY: 'auto',\n        overflowX: 'hidden',\n    },\n    listItem: {\n        '&:hover': {\n            backgroundColor: theme.palette.action.hover,\n        },\n    },\n    listItemGutters: {\n        paddingLeft: 5,\n        paddingRight: 5,\n    },\n    listItemIconRoot: {\n        minWidth: 20,\n    },\n    emptyState: {\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        textAlign: 'center',\n        height: '100%',\n        padding: 15,\n    },\n    text: {\n        flexGrow: 1,\n    },\n    emptyText: {\n        flexGrow: 1,\n        color: theme.palette.text.secondary,\n    },\n    timestamp: {\n        paddingRight: 15,\n        paddingLeft: 15,\n        color: theme.palette.text.secondary,\n    },\n}));\n\ninterface MenuProps {\n    open: boolean;\n    item?: CopyHistoryItem;\n    anchorEl?: Element;\n    onClose: () => void;\n    onSelect: (item: CopyHistoryItem) => void;\n    onClipAudio: (item: CopyHistoryItem) => void;\n    onDownloadImage: (item: CopyHistoryItem) => void;\n    onDelete: (item: CopyHistoryItem) => void;\n}\n\nfunction Menu({ open, anchorEl, onClose, onSelect, onClipAudio, onDownloadImage, onDelete, item }: MenuProps) {\n    const handleCopy = useCallback(() => {\n        navigator.clipboard.writeText(item!.text);\n        onClose();\n    }, [item, onClose]);\n\n    const handleJumpTo = useCallback(() => {\n        onSelect(item!);\n        onClose();\n    }, [item, onSelect, onClose]);\n\n    const handleClipAudio = useCallback(() => {\n        onClipAudio(item!);\n        onClose();\n    }, [item, onClipAudio, onClose]);\n\n    const handleDownloadImage = useCallback(() => {\n        onDownloadImage(item!);\n        onClose();\n    }, [item, onDownloadImage, onClose]);\n\n    const handleDelete = useCallback(() => {\n        onDelete(item!);\n        onClose();\n    }, [item, onDelete, onClose]);\n\n    if (!item) {\n        return null;\n    }\n\n    return (\n        <Popover\n            disableEnforceFocus={true}\n            open={open}\n            anchorEl={anchorEl}\n            onClose={onClose}\n            anchorOrigin={{\n                vertical: 'center',\n                horizontal: 'center',\n            }}\n            transformOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n            }}\n        >\n            <List>\n                <ListItem button onClick={handleCopy}>\n                    <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Copy\" />\n                </ListItem>\n                <ListItem button onClick={handleJumpTo}>\n                    <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Jump To\" />\n                </ListItem>\n                {(item.videoFile || item.audioFile || item.audio) && (\n                    <ListItem button onClick={handleClipAudio}>\n                        <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Download Audio\" />\n                    </ListItem>\n                )}\n                {(item.videoFile || item.image) && (\n                    <ListItem button onClick={handleDownloadImage}>\n                        <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Download Image\" />\n                    </ListItem>\n                )}\n                <ListItem button onClick={handleDelete}>\n                    <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Delete\" />\n                </ListItem>\n            </List>\n        </Popover>\n    );\n}\n\nexport default function CopyHistory(props: CopyHistoryProps) {\n    const onDelete = props.onDelete;\n    const classes = useStyles(props);\n    const scrollToBottomRefCallback = useCallback((element: HTMLElement | null) => {\n        if (element) {\n            element.scrollIntoView();\n        }\n    }, []);\n    const [menuItem, setMenuItem] = useState<CopyHistoryItem>();\n    const [menuOpen, setMenuOpen] = useState<boolean>(false);\n    const [menuAnchorEl, setMenuAnchorEl] = useState<Element>();\n\n    const handleMenu = useCallback((e: React.MouseEvent, item: CopyHistoryItem) => {\n        setMenuItem(item);\n        setMenuOpen(true);\n        setMenuAnchorEl(e.currentTarget);\n    }, []);\n\n    const handleMenuClosed = useCallback(() => {\n        setMenuItem(undefined);\n        setMenuOpen(false);\n        setMenuAnchorEl(undefined);\n    }, []);\n\n    const handleDelete = useCallback(\n        (item: CopyHistoryItem) => {\n            onDelete(item);\n        },\n        [onDelete]\n    );\n\n    let content;\n\n    if (props.items.length > 0) {\n        const items = [];\n        let lastSeenItemName = null;\n        let i = 0;\n        const itemNameCounters: { [name: string]: number } = {};\n        let itemsBySection: { [key: string]: CopyHistoryItem[] } = {};\n        let currentKey: string | undefined;\n\n        for (const item of props.items) {\n            if (lastSeenItemName === null || lastSeenItemName !== item.name) {\n\n                if (item.name in itemNameCounters) {\n                    itemNameCounters[item.name]++;\n                } else {\n                    itemNameCounters[item.name] = 0;\n                }\n\n                const key = item.name + '-' + itemNameCounters[item.name];\n                itemsBySection[key] = [];\n                lastSeenItemName = item.name;\n                currentKey = key;\n\n                items.push(\n                    <ListItem key={key}>\n                        <Typography color=\"textSecondary\">{item.name}</Typography>\n                        <ListItemSecondaryAction>\n                            <Tooltip title=\"Download as SRT\">\n                                <IconButton\n                                    onClick={() => props.onDownloadSectionAsSrt(item.name, itemsBySection[key])}\n                                    edge=\"end\"\n                                >\n                                    <SaveAltIcon />\n                                </IconButton>\n                            </Tooltip>\n                        </ListItemSecondaryAction>\n                    </ListItem>\n                );\n            }\n\n            itemsBySection[currentKey!].push(item);\n            const ref = i === props.items.length - 1 ? scrollToBottomRefCallback : null;\n\n            items.push(\n                <ListItem\n                    ref={ref}\n                    key={item.id}\n                    className={classes.listItem}\n                    classes={{ gutters: classes.listItemGutters }}\n                >\n                    <ListItemIcon classes={{ root: classes.listItemIconRoot }}>\n                        <Tooltip title=\"Export to Anki\">\n                            <IconButton onClick={() => props.onAnki(item)}>\n                                <StarIcon fontSize=\"small\" />\n                            </IconButton>\n                        </Tooltip>\n                    </ListItemIcon>\n                    <ListItemIcon classes={{ root: classes.listItemIconRoot }}>\n                        <IconButton onClick={(e) => handleMenu(e, item)}>\n                            <MoreVertIcon fontSize=\"small\" />\n                        </IconButton>\n                    </ListItemIcon>\n                    <ListItemText\n                        primary={\n                            <Grid wrap=\"nowrap\" container>\n                                <Grid item className={item.text === '' ? classes.emptyText : classes.text}>\n                                    {item.text === '' ? 'No text' : item.text}\n                                </Grid>\n                                <Grid item className={classes.timestamp}>\n                                    {timeDurationDisplay(item.start, item.start, false)}\n                                </Grid>\n                            </Grid>\n                        }\n                    />\n                </ListItem>\n            );\n\n            ++i;\n        }\n\n        content = (\n            <div className={classes.listContainer}>\n                <List>{items}</List>\n            </div>\n        );\n    } else {\n        content = (\n            <div className={classes.emptyState}>\n                <Typography variant=\"h6\">Mining history is empty.</Typography>\n                <Typography variant=\"caption\">See the help for keyboard shortcuts.</Typography>\n            </div>\n        );\n    }\n\n    return (\n        <React.Fragment>\n            <Drawer\n                variant=\"persistent\"\n                anchor=\"right\"\n                open={props.open}\n                className={classes.drawer}\n                classes={{\n                    paper: classes.drawerPaper,\n                }}\n            >\n                <div className={classes.drawerHeader}>\n                    <IconButton onClick={props.onClose}>\n                        <ChevronRightIcon />\n                    </IconButton>\n                </div>\n                <Divider />\n                {content}\n            </Drawer>\n            <Menu\n                open={props.open && menuOpen}\n                anchorEl={menuAnchorEl}\n                item={menuItem}\n                onClose={handleMenuClosed}\n                onSelect={props.onSelect}\n                onClipAudio={props.onClipAudio}\n                onDownloadImage={props.onDownloadImage}\n                onDelete={handleDelete}\n            />\n        </React.Fragment>\n    );\n}\n","import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport gt from 'semver/functions/gt';\nimport Fade from '@material-ui/core/Fade';\nimport Link from '@material-ui/core/Link';\nimport Typography from '@material-ui/core/Typography';\nimport ChromeExtension from '../services/ChromeExtension';\nimport { Theme } from '@material-ui/core/styles';\n\ninterface StylesProps {\n    appBarHidden: boolean;\n}\n\nconst useStyles = makeStyles<Theme, StylesProps>((theme) => ({\n    background: ({ appBarHidden }) => ({\n        position: 'absolute',\n        height: appBarHidden ? '100vh' : 'calc(100vh - 64px)',\n        width: '100%',\n        zIndex: 100,\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        padding: 15,\n        textAlign: 'center',\n    }),\n    browseLink: {\n        cursor: 'pointer',\n    },\n}));\n\ninterface Props {\n    extension: ChromeExtension;\n    latestExtensionVersion: string;\n    extensionUrl: string;\n    loading: boolean;\n    dragging: boolean;\n    appBarHidden: boolean;\n    onFileSelector: React.MouseEventHandler<HTMLAnchorElement> &\n        React.MouseEventHandler<HTMLSpanElement> &\n        React.MouseEventHandler<HTMLLabelElement>;\n}\n\nexport default function LandingPage({\n    extension,\n    latestExtensionVersion,\n    extensionUrl,\n    loading,\n    dragging,\n    appBarHidden,\n    onFileSelector,\n}: Props) {\n    const classes = useStyles({ appBarHidden });\n    const [installedExtensionVersion, setInstalledExtensionVersion] = useState<string>();\n\n    useEffect(() => {\n        async function fetchInstalledExtensionVersion() {\n            setInstalledExtensionVersion(extension.version);\n        }\n\n        fetchInstalledExtensionVersion();\n    }, [extension]);\n\n    const extensionUpdateAvailable = installedExtensionVersion && gt(latestExtensionVersion, installedExtensionVersion);\n    const extensionNotInstalled = !installedExtensionVersion;\n\n    return (\n        <React.Fragment>\n            <Fade in={!loading && !dragging} timeout={500}>\n                <div className={classes.background}>\n                    <Typography variant=\"h6\">\n                        Drag and drop subtitle and media files, or{' '}\n                        <Link\n                            target=\"#\"\n                            className={classes.browseLink}\n                            onClick={onFileSelector}\n                            color=\"secondary\"\n                            component=\"label\"\n                        >\n                            browse\n                        </Link>\n                        .\n                        <br />\n                        {extensionNotInstalled && (\n                            <span>\n                                Install the{' '}\n                                <Link color=\"secondary\" target=\"_blank\" rel=\"noreferrer\" href={extensionUrl}>\n                                    Chrome extension\n                                </Link>{' '}\n                                to sync subtitles with streaming video.\n                            </span>\n                        )}\n                        {extensionUpdateAvailable && (\n                            <span>\n                                An extension{' '}\n                                <Link color=\"secondary\" target=\"_blank\" rel=\"noreferrer\" href={extensionUrl}>\n                                    update\n                                </Link>{' '}\n                                is available.\n                            </span>\n                        )}\n                    </Typography>\n                </div>\n            </Fade>\n        </React.Fragment>\n    );\n}\n","import { Message } from \"@project/common\";\nimport { VideoProtocol, VideoProtocolMessage } from \"./VideoProtocol\";\n\nexport default class BroadcastChannelVideoProtocol implements VideoProtocol {\n    private channel?: BroadcastChannel;\n\n    onMessage?: (message: VideoProtocolMessage) => void;\n    \n    constructor(channelId: string) {\n        this.channel = new BroadcastChannel(channelId);\n        const that = this;\n        this.channel.onmessage = (event) => {\n            that.onMessage?.(event as VideoProtocolMessage);\n        };\n    }\n\n    postMessage(message: Message) {\n        this.channel?.postMessage(message);\n    }\n\n    close() {\n        this.channel?.close();\n        this.channel = undefined;\n    }\n}\n","import { Message } from '@project/common';\nimport ChromeExtension, { ExtensionMessage } from './ChromeExtension';\nimport { VideoProtocol, VideoProtocolMessage } from './VideoProtocol';\n\nexport default class ChromeTabVideoProtocol implements VideoProtocol {\n    private readonly tabId: number;\n    private readonly src: string;\n    private readonly extension: ChromeExtension;\n    private readonly listener: (message: ExtensionMessage) => void;\n    private readonly unsubscribeFromExtension: () => void;\n\n    onMessage?: (message: VideoProtocolMessage) => void;\n\n    constructor(tabId: number, src: string, extension: ChromeExtension) {\n        this.tabId = tabId;\n        this.src = src;\n        this.listener = (message) => {\n            if (message.tabId === tabId && message.src === src) {\n                this.onMessage?.({\n                    data: message.data,\n                });\n            }\n        };\n\n        this.unsubscribeFromExtension = extension.subscribe(this.listener);\n        this.extension = extension;\n    }\n\n    postMessage(message: Message) {\n        this.extension.sendMessage(message, this.tabId, this.src);\n    }\n\n    close() {\n        this.unsubscribeFromExtension();\n    }\n}\n","export default class Clock {\n    private accumulated: number;\n    private started: boolean;\n    private startTime?: number;\n\n    constructor() {\n        this.accumulated = 0;\n        this.started = false;\n    }\n\n    time(max: number) {\n        if (this.started) {\n            return Math.min(max, this.accumulated + Date.now() - this.startTime!);\n        }\n\n        return Math.min(max, this.accumulated);\n    }\n\n    stop() {\n        if (!this.started) {\n            return;\n        }\n\n        this.started = false;\n        this.accumulated += Date.now() - this.startTime!;\n    }\n\n    start() {\n        this.startTime = Date.now();\n        this.started = true;\n    }\n\n    setTime(time: number) {\n        if (this.started) {\n            this.startTime = Date.now();\n            this.accumulated = time;\n        } else {\n            this.accumulated = time;\n        }\n    }\n\n    progress(max: number) {\n        return max === 0 ? 0 : Math.min(1, this.time(max) / max);\n    }\n}\n","import React, { useCallback, useEffect, useState, useRef, MutableRefObject } from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\nimport AudiotrackIcon from '@material-ui/icons/Audiotrack';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Fade from '@material-ui/core/Fade';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport Input from '@material-ui/core/Input';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport OpenInNewIcon from '@material-ui/icons/OpenInNew';\nimport Popover from '@material-ui/core/Popover';\nimport FullscreenIcon from '@material-ui/icons/Fullscreen';\nimport AspectRatioIcon from '@material-ui/icons/AspectRatio';\nimport FullscreenExitIcon from '@material-ui/icons/FullscreenExit';\nimport PauseIcon from '@material-ui/icons/Pause';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport QueueMusicIcon from '@material-ui/icons/QueueMusic';\nimport Slider from '@material-ui/core/Slider';\nimport TuneIcon from '@material-ui/icons/Tune';\nimport SubtitlesIcon from '@material-ui/icons/Subtitles';\nimport VideocamIcon from '@material-ui/icons/Videocam';\nimport VolumeOffIcon from '@material-ui/icons/VolumeOff';\nimport VolumeUpIcon from '@material-ui/icons/VolumeUp';\nimport { AudioTrackModel, PlayMode, VideoTabModel } from '@project/common';\nimport Clock from '../services/Clock';\nimport PlaybackPreferences from '../services/PlaybackPreferences';\n\nconst useControlStyles = makeStyles((theme) => ({\n    container: {\n        position: 'absolute',\n        left: '50%',\n        width: '50%',\n        bottom: 0,\n        pointerEvents: 'none',\n        color: '#fff',\n    },\n    buttonContainer: {\n        flexDirection: 'row',\n    },\n    timeDisplay: {\n        color: '#fff',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        height: '100%',\n        cursor: 'default',\n        fontSize: 20,\n        marginLeft: 10,\n    },\n    offsetInput: {\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        fontSize: 20,\n        marginLeft: 10,\n        width: 100,\n        color: '#fff',\n        pointerEvents: 'auto',\n    },\n    volumeInputContainerShown: {\n        transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.short,\n        }),\n        marginRight: 5,\n        pointerEvents: 'auto',\n    },\n    volumeInputContainerHidden: {\n        transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.short,\n        }),\n        marginRight: 0,\n        pointerEvents: 'auto',\n    },\n    volumeInputHidden: {\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.short,\n        }),\n        width: 0,\n        pointerEvents: 'auto',\n    },\n    volumeInputShown: {\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.short,\n        }),\n        width: 100,\n        pointerEvents: 'auto',\n    },\n    volumeInputThumbHidden: {\n        transition: theme.transitions.create('visibility', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.short,\n        }),\n        opacity: 0,\n        pointerEvents: 'auto',\n    },\n    volumeInputThumbShown: {\n        transition: theme.transitions.create('visibility', {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.short,\n        }),\n        opacity: 1,\n        pointerEvents: 'auto',\n    },\n    subContainer: {\n        background: 'linear-gradient(to bottom, rgba(0, 0, 0, 0), rgba(0, 0, 0, .4) 40%, rgba(0, 0, 0, 0.7))',\n        position: 'relative',\n        left: '-100%',\n        width: '200%',\n        zIndex: 10,\n    },\n    button: {\n        pointerEvents: 'auto',\n    },\n    inactiveButton: {\n        color: 'rgba(72, 72, 72, 0.7)',\n        pointerEvents: 'auto',\n    },\n    inactiveTopButton: {\n        color: 'rgba(255, 255, 255, 0.5)',\n        pointerEvents: 'auto',\n    },\n    progress: {\n        margin: 5,\n    },\n    topButton: {\n        pointerEvents: 'auto',\n        color: '#fff',\n    },\n    gridContainer: {\n        pointerEvents: 'auto',\n        padding: 2,\n    },\n}));\n\nconst useProgressBarStyles = makeStyles((theme) => ({\n    root: {\n        height: 10,\n    },\n    container: {\n        height: 10,\n        pointerEvents: 'auto',\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        position: 'absolute',\n        width: 'calc(100% - 20px)',\n        marginLeft: 10,\n    },\n    mouseEventListener: {\n        zIndex: 1,\n        height: 10,\n        cursor: 'pointer',\n        pointerEvents: 'auto',\n        position: 'absolute',\n        width: '100%',\n    },\n    fillContainer: {\n        background: 'rgba(30,30,30,0.7)',\n        width: '100%',\n        height: 5,\n        position: 'relative',\n    },\n    fillContainerThick: {\n        transition: theme.transitions.create('height', {\n            easing: theme.transitions.easing.easeInOut,\n            duration: 50,\n        }),\n        height: 8,\n    },\n    fill: {\n        background: 'linear-gradient(to left, #ff1f62, #49007a)',\n        height: '100%',\n    },\n    handleContainer: {\n        position: 'absolute',\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        height: '100%',\n        bottom: 0,\n    },\n    handle: {\n        borderRadius: '50%',\n        width: 16,\n        height: 16,\n        opacity: 0,\n        left: -8,\n        background: 'white',\n        position: 'absolute',\n    },\n    handleOn: {\n        opacity: 1,\n        transition: theme.transitions.create('opacity', {\n            easing: theme.transitions.easing.easeInOut,\n            duration: theme.transitions.duration.shortest,\n        }),\n    },\n}));\n\nconst VolumeSlider = withStyles((theme) => ({\n    root: {\n        color: 'white',\n        verticalAlign: 'middle',\n    },\n    thumb: {\n        backgroundColor: 'white',\n        color: 'white',\n        '&:focus': {\n            boxShadow: 'inherit',\n        },\n        '&:hover, &$active': {\n            boxShadow: '0px 0px 0px 8px rgba(255, 255, 255, 0.1)',\n        },\n    },\n    active: {\n        color: 'white',\n    },\n}))(Slider);\n\nfunction displayTime(milliseconds: number) {\n    const seconds = Math.floor(milliseconds / 1000);\n    const minutes = Math.floor(seconds / 60);\n    const secondsInMinute = seconds % 60;\n    return String(minutes) + ':' + String(secondsInMinute).padStart(2, '0');\n}\n\nfunction elementWidth(element: HTMLElement) {\n    const rect = element.getBoundingClientRect();\n    return rect.right - rect.left;\n}\n\ninterface ProgressBarProps {\n    onSeek: (progress: number) => void;\n    value: number;\n}\n\nfunction ProgressBar({ onSeek, value }: ProgressBarProps) {\n    const classes = useProgressBarStyles();\n    const [mouseOver, setMouseOver] = useState(false);\n    const containerRef = useRef(null);\n\n    const handleClick = useCallback(\n        (e: React.MouseEvent<HTMLDivElement>) => {\n            const rect = e.currentTarget.getBoundingClientRect();\n            // Account for margins by subtracting 10 from left/right sides\n            const width = rect.right - rect.left - 20;\n            const progress = Math.min(1, Math.max(0, (e.pageX - rect.left - 10) / width));\n            onSeek(progress);\n        },\n        [onSeek]\n    );\n\n    const handleMouseOver = useCallback(() => setMouseOver(true), []);\n    const handleMouseOut = useCallback(() => setMouseOver(false), []);\n    const progressWidth = containerRef.current ? (elementWidth(containerRef.current) * value) / 100 : 0;\n    const fillStyle = { width: progressWidth };\n    const handleStyle = { marginLeft: progressWidth };\n    const fillContainerClassName = mouseOver\n        ? classes.fillContainer + ' ' + classes.fillContainerThick\n        : classes.fillContainer;\n    const handleClassName = mouseOver ? classes.handle + ' ' + classes.handleOn : classes.handle;\n\n    return (\n        <div className={classes.root}>\n            <div ref={containerRef} className={classes.container}>\n                <div className={fillContainerClassName}>\n                    <div className={classes.fill} style={fillStyle}></div>\n                    <div className={classes.handleContainer}>\n                        <div className={handleClassName} style={handleStyle} />\n                    </div>\n                </div>\n            </div>\n            <div\n                className={classes.mouseEventListener}\n                onClick={handleClick}\n                onMouseOver={handleMouseOver}\n                onMouseOut={handleMouseOut}\n            ></div>\n        </div>\n    );\n}\n\ninterface AudioTrackSelectorProps {\n    open: boolean;\n    anchorEl?: Element;\n    audioTracks?: AudioTrackModel[];\n    selectedAudioTrack?: string;\n    onAudioTrackSelected: (id: string) => void;\n    onClose: () => void;\n}\n\nfunction AudioTrackSelector({\n    open,\n    anchorEl,\n    audioTracks,\n    selectedAudioTrack,\n    onAudioTrackSelected,\n    onClose,\n}: AudioTrackSelectorProps) {\n    if (!audioTracks || audioTracks.length === 0) {\n        return null;\n    }\n\n    const list = audioTracks.map((t) => {\n        return (\n            <ListItem\n                key={t.id}\n                selected={t.id === selectedAudioTrack}\n                button\n                onClick={() => onAudioTrackSelected(t.id)}\n            >\n                {t.language} {t.label}\n            </ListItem>\n        );\n    });\n\n    return (\n        <div>\n            <Popover\n                disableEnforceFocus={true}\n                open={open}\n                anchorEl={anchorEl}\n                onClose={onClose}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n            >\n                <List>{list}</List>\n            </Popover>\n        </div>\n    );\n}\n\ninterface TabSelectorProps {\n    open: boolean;\n    anchorEl?: Element;\n    tabs?: VideoTabModel[];\n    selectedTab?: VideoTabModel;\n    onTabSelected: (tab: VideoTabModel) => void;\n    onClose: () => void;\n}\n\nfunction TabSelector({ open, anchorEl, onClose, tabs, selectedTab, onTabSelected }: TabSelectorProps) {\n    if (!tabs || tabs.length === 0) {\n        return null;\n    }\n\n    const list = tabs.map((t) => {\n        return (\n            <ListItem\n                key={t.id}\n                selected={selectedTab && t.id === selectedTab.id && t.src === selectedTab.src}\n                button\n                onClick={() => onTabSelected(t)}\n            >\n                {t.id} {t.title} {t.src}\n            </ListItem>\n        );\n    });\n\n    return (\n        <div>\n            <Popover\n                disableEnforceFocus={true}\n                open={open}\n                anchorEl={anchorEl}\n                onClose={onClose}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n            >\n                <List>{list}</List>\n            </Popover>\n        </div>\n    );\n}\n\ninterface MediaUnloaderProps {\n    open: boolean;\n    anchorEl?: Element;\n    file?: string;\n    onUnload: () => void;\n    onClose: () => void;\n}\n\nfunction MediaUnloader({ open, anchorEl, onUnload, onClose, file }: MediaUnloaderProps) {\n    return (\n        <div>\n            <Popover\n                disableEnforceFocus={true}\n                open={open}\n                anchorEl={anchorEl}\n                onClose={onClose}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n            >\n                <List>\n                    <ListItem button onClick={(e) => onUnload()}>\n                        Unload {file}\n                    </ListItem>\n                </List>\n            </Popover>\n        </div>\n    );\n}\n\ninterface PlayModeSelectorProps {\n    open: boolean;\n    anchorEl?: Element;\n    selectedPlayMode?: PlayMode;\n    onPlayMode: (playMode: PlayMode) => void;\n    onClose: () => void;\n}\n\nfunction PlayModeSelector({ open, anchorEl, selectedPlayMode, onPlayMode, onClose }: PlayModeSelectorProps) {\n    return (\n        <div>\n            <Popover\n                disableEnforceFocus={true}\n                open={open}\n                anchorEl={anchorEl}\n                onClose={onClose}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n            >\n                <List>\n                    <ListItem\n                        selected={selectedPlayMode === PlayMode.normal}\n                        button\n                        onClick={(e) => onPlayMode(PlayMode.normal)}\n                    >\n                        Normal\n                    </ListItem>\n                    <ListItem\n                        selected={selectedPlayMode === PlayMode.condensed}\n                        button\n                        onClick={(e) => onPlayMode(PlayMode.condensed)}\n                    >\n                        Condensed\n                    </ListItem>\n                    <ListItem\n                        selected={selectedPlayMode === PlayMode.autoPause}\n                        button\n                        onClick={(e) => onPlayMode(PlayMode.autoPause)}\n                    >\n                        Auto-pause\n                    </ListItem>\n                </List>\n            </Popover>\n        </div>\n    );\n}\n\nexport interface Point {\n    x: number;\n    y: number;\n}\n\ninterface ControlsProps {\n    clock: Clock;\n    playing: boolean;\n    length: number;\n    offsetEnabled?: boolean;\n    displayLength?: number;\n    offset: number;\n    onAudioTrackSelected: (id: string) => void;\n    onSeek: (progress: number) => void;\n    mousePositionRef: MutableRefObject<Point>;\n    onShow?: (show: boolean) => void;\n    onPause: () => void;\n    onPlay: () => void;\n    onTabSelected?: (tab: VideoTabModel) => void;\n    onUnloadAudio?: () => void;\n    onUnloadVideo?: () => void;\n    onOffsetChange: (offset: number) => void;\n    onVolumeChange: (volume: number) => void;\n    disableKeyEvents?: boolean;\n    playbackPreferences: PlaybackPreferences;\n    closeEnabled?: boolean;\n    onClose?: () => void;\n    volumeEnabled?: boolean;\n    playMode?: PlayMode;\n    playModeEnabled?: boolean;\n    onPlayMode?: (playMode: PlayMode) => void;\n    subtitlesEnabled?: boolean;\n    subtitlesToggle?: boolean;\n    onSubtitlesToggle?: () => void;\n    videoFile?: string;\n    audioFile?: string;\n    audioTracks?: AudioTrackModel[];\n    selectedAudioTrack?: string;\n    tabs?: VideoTabModel[];\n    selectedTab?: VideoTabModel;\n    popOutEnabled?: boolean;\n    popOut?: boolean;\n    onPopOutToggle?: () => void;\n    fullscreenEnabled?: boolean;\n    fullscreen?: boolean;\n    onFullscreenToggle?: () => void;\n    hideSubtitlePlayerToggleEnabled?: boolean;\n    subtitlePlayerHidden?: boolean;\n    onHideSubtitlePlayerToggle?: () => void;\n    showOnMouseMovement: boolean;\n    theaterModeToggleEnabled?: boolean;\n    theaterModeEnabled?: boolean;\n    onTheaterModeToggle?: () => void;\n}\n\nexport default function Controls({\n    clock,\n    playing,\n    length,\n    offsetEnabled,\n    displayLength,\n    offset,\n    onAudioTrackSelected,\n    onSeek,\n    mousePositionRef,\n    onShow,\n    onPause,\n    onPlay,\n    onTabSelected,\n    onUnloadAudio,\n    onUnloadVideo,\n    onOffsetChange,\n    onVolumeChange,\n    disableKeyEvents,\n    playbackPreferences,\n    closeEnabled,\n    onClose,\n    volumeEnabled,\n    playMode,\n    playModeEnabled,\n    onPlayMode,\n    subtitlesEnabled,\n    subtitlesToggle,\n    onSubtitlesToggle,\n    videoFile,\n    audioFile,\n    audioTracks,\n    selectedAudioTrack,\n    tabs,\n    selectedTab,\n    popOutEnabled,\n    popOut,\n    onPopOutToggle,\n    fullscreenEnabled,\n    fullscreen,\n    onFullscreenToggle,\n    hideSubtitlePlayerToggleEnabled,\n    subtitlePlayerHidden,\n    onHideSubtitlePlayerToggle,\n    showOnMouseMovement,\n    theaterModeToggleEnabled,\n    theaterModeEnabled,\n    onTheaterModeToggle,\n}: ControlsProps) {\n    const classes = useControlStyles();\n    const [show, setShow] = useState<boolean>(true);\n    const [audioTrackSelectorOpen, setAudioTrackSelectorOpen] = useState<boolean>(false);\n    const [audioTrackSelectorAnchorEl, setAudioTrackSelectorAnchorEl] = useState<Element>();\n    const [tabSelectorOpen, setTabSelectorOpen] = useState<boolean>(false);\n    const [tabSelectorAnchorEl, setTabSelectorAnchorEl] = useState<Element>();\n    const [audioUnloaderOpen, setAudioUnloaderOpen] = useState<boolean>(false);\n    const [audioUnloaderAnchorEl, setAudioUnloaderAnchorEl] = useState<Element>();\n    const [videoUnloaderOpen, setVideoUnloaderOpen] = useState<boolean>(false);\n    const [videoUnloaderAnchorEl, setVideoUnloaderAnchorEl] = useState<Element>();\n    const [playModeSelectorOpen, setPlayModeSelectorOpen] = useState<boolean>(false);\n    const [playModeSelectorAnchorEl, setPlayModeSelectorAnchorEl] = useState<Element>();\n    const [showVolumeBar, setShowVolumeBar] = useState<boolean>(false);\n    const [volume, setVolume] = useState<number>(100);\n    const [lastCommittedVolume, setLastCommittedVolume] = useState<number>(100);\n    const lastMousePositionRef = useRef<Point>({ x: 0, y: 0 });\n    const lastShowTimestampRef = useRef<number>(Date.now());\n    const lastOffsetInputChangeTimestampRef = useRef<number>(Date.now());\n    const lastShowRef = useRef<boolean>(true);\n    const forceShowRef = useRef<boolean>(false);\n    const offsetInputRef = useRef<HTMLInputElement>();\n    const containerRef = useRef<HTMLDivElement>(null);\n    const closeButtonRef = useRef<HTMLButtonElement>(null);\n    const [, updateState] = useState<any>();\n    const forceUpdate = useCallback(() => updateState({}), []);\n\n    const handleSeek = useCallback(\n        (progress: number) => {\n            onSeek(progress);\n        },\n        [onSeek]\n    );\n\n    function handleMouseOver() {\n        forceShowRef.current = true;\n    }\n\n    function handleMouseOut() {\n        forceShowRef.current = false;\n    }\n\n    useEffect(() => {\n        const savedVolume = Number(playbackPreferences.volume);\n        setVolume(savedVolume);\n        onVolumeChange(savedVolume / 100);\n\n        if (savedVolume > 0) {\n            setLastCommittedVolume(savedVolume);\n        }\n    }, [playbackPreferences, onVolumeChange]);\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            let currentShow: boolean;\n\n            if (showOnMouseMovement) {\n                currentShow =\n                    Date.now() - lastShowTimestampRef.current < 2000 ||\n                    Math.pow(mousePositionRef.current.x - lastMousePositionRef.current.x, 2) +\n                        Math.pow(mousePositionRef.current.y - lastMousePositionRef.current.y, 2) >\n                        100;\n            } else {\n                currentShow =\n                    ((containerRef.current && mousePositionRef.current.y > containerRef.current.offsetTop - 20) ||\n                        (closeButtonRef.current &&\n                            mousePositionRef.current.y < closeButtonRef.current.offsetHeight + 20)) ??\n                    false;\n            }\n\n            currentShow =\n                currentShow ||\n                forceShowRef.current ||\n                offsetInputRef.current === document.activeElement ||\n                Date.now() - lastOffsetInputChangeTimestampRef.current < 2000;\n\n            if (currentShow && !lastShowRef.current) {\n                lastShowTimestampRef.current = Date.now();\n                setShow(currentShow);\n            } else if (!currentShow && lastShowRef.current) {\n                setShow(currentShow);\n            }\n\n            lastShowRef.current = currentShow;\n            lastMousePositionRef.current.x = mousePositionRef.current.x;\n            lastMousePositionRef.current.y = mousePositionRef.current.y;\n        }, 100);\n        return () => clearInterval(interval);\n    }, [mousePositionRef, showOnMouseMovement]);\n\n    useEffect(() => onShow?.(show), [onShow, show]);\n\n    useEffect(() => {\n        if (disableKeyEvents) {\n            return;\n        }\n\n        function handleKey(event: KeyboardEvent) {\n            if (event.key === 'Enter') {\n                if (offsetInputRef.current === document.activeElement) {\n                    const offset = Number(offsetInputRef.current.value);\n\n                    if (Number.isNaN(offset)) {\n                        return;\n                    }\n\n                    onOffsetChange(offset * 1000);\n                    offsetInputRef.current.blur();\n                }\n            }\n        }\n\n        window.addEventListener('keydown', handleKey);\n\n        return () => {\n            window.removeEventListener('keydown', handleKey);\n        };\n    }, [onOffsetChange, disableKeyEvents]);\n\n    const handleOffsetInputClicked = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n        const inputElement = e.target as HTMLInputElement;\n        inputElement.setSelectionRange(0, inputElement.value?.length || 0);\n    }, []);\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            forceUpdate();\n        }, 100);\n\n        return () => clearInterval(interval);\n    }, [forceUpdate]);\n\n    useEffect(() => {\n        if (offsetInputRef.current) {\n            if (offset === 0) {\n                offsetInputRef.current.value = '';\n            } else {\n                const offsetSeconds = offset / 1000;\n                const value = offsetSeconds >= 0 ? '+' + offsetSeconds.toFixed(2) : String(offsetSeconds.toFixed(2));\n                offsetInputRef.current.value = value;\n                lastOffsetInputChangeTimestampRef.current = Date.now();\n            }\n        }\n    }, [offset]);\n\n    const handleAudioTrackSelectorClosed = useCallback(() => {\n        setAudioTrackSelectorAnchorEl(undefined);\n        setAudioTrackSelectorOpen(false);\n    }, []);\n\n    const handleAudioTrackSelectorOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setAudioTrackSelectorAnchorEl(e.currentTarget);\n        setAudioTrackSelectorOpen(true);\n    }, []);\n\n    const handleAudioTrackSelected = useCallback(\n        (id: string) => {\n            onAudioTrackSelected(id);\n            setAudioTrackSelectorAnchorEl(undefined);\n            setAudioTrackSelectorOpen(false);\n        },\n        [onAudioTrackSelected]\n    );\n\n    const handleTabSelectorClosed = useCallback(() => {\n        setTabSelectorAnchorEl(undefined);\n        setTabSelectorOpen(false);\n    }, []);\n\n    const handleTabSelectorOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setTabSelectorAnchorEl(e.currentTarget);\n        setTabSelectorOpen(true);\n    }, []);\n\n    const handleTabSelected = useCallback(\n        (tab: VideoTabModel) => {\n            onTabSelected?.(tab);\n            setTabSelectorAnchorEl(undefined);\n            setTabSelectorOpen(false);\n        },\n        [onTabSelected]\n    );\n\n    const handleAudioUnloaderClosed = useCallback(() => {\n        setAudioUnloaderAnchorEl(undefined);\n        setAudioUnloaderOpen(false);\n    }, []);\n\n    const handleAudioUnloaderOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setAudioUnloaderAnchorEl(e.currentTarget);\n        setAudioUnloaderOpen(true);\n    }, []);\n\n    const handleUnloadAudio = useCallback(() => {\n        onUnloadAudio?.();\n        setAudioUnloaderOpen(false);\n    }, [onUnloadAudio]);\n\n    const handleVideoUnloaderClosed = useCallback(() => {\n        setVideoUnloaderAnchorEl(undefined);\n        setVideoUnloaderOpen(false);\n    }, []);\n\n    const handleVideoUnloaderOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setVideoUnloaderAnchorEl(e.currentTarget);\n        setVideoUnloaderOpen(true);\n    }, []);\n\n    const handleUnloadVideo = useCallback(() => {\n        onUnloadVideo?.();\n        setVideoUnloaderOpen(false);\n    }, [onUnloadVideo]);\n\n    const handlePlayModeSelectorClosed = useCallback(() => {\n        setPlayModeSelectorAnchorEl(undefined);\n        setPlayModeSelectorOpen(false);\n    }, []);\n\n    const handlePlayModeSelectorOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setPlayModeSelectorAnchorEl(e.currentTarget);\n        setPlayModeSelectorOpen(true);\n    }, []);\n\n    const handlePlayModeSelected = useCallback(\n        (playMode: PlayMode) => {\n            onPlayMode?.(playMode);\n            setPlayModeSelectorAnchorEl(undefined);\n            setPlayModeSelectorOpen(false);\n        },\n        [onPlayMode]\n    );\n\n    const handleVolumeMouseOut = useCallback(() => setShowVolumeBar(false), []);\n    const handleVolumeMouseOver = useCallback(() => setShowVolumeBar(true), []);\n\n    const handleVolumeChange = useCallback(\n        (e: React.ChangeEvent<{}>, value: number | number[]) => {\n            if (typeof value !== 'number') {\n                return;\n            }\n\n            setVolume(value);\n            onVolumeChange(value / 100);\n        },\n        [onVolumeChange]\n    );\n\n    const handleVolumeChangeCommitted = useCallback(\n        (e: React.ChangeEvent<{}>, value: number | number[]) => {\n            if (typeof value !== 'number') {\n                return;\n            }\n\n            if (value > 0) {\n                setLastCommittedVolume(value);\n            }\n\n            playbackPreferences.volume = value;\n        },\n        [playbackPreferences]\n    );\n\n    const handleVolumeToggle = useCallback(() => {\n        setVolume((volume) => {\n            const newVolume = volume > 0 ? 0 : lastCommittedVolume;\n            onVolumeChange(newVolume / 100);\n            return newVolume;\n        });\n    }, [onVolumeChange, lastCommittedVolume]);\n\n    const progress = clock.progress(length);\n\n    return (\n        <React.Fragment>\n            <Fade in={show} timeout={200}>\n                <Grid container style={{ position: 'absolute', top: 0 }}>\n                    <Grid item style={{ flexGrow: 1 }}>\n                        {closeEnabled && (\n                            <IconButton\n                                ref={closeButtonRef}\n                                color=\"inherit\"\n                                className={classes.topButton}\n                                onClick={onClose}\n                                onMouseOver={handleMouseOver}\n                                onMouseOut={handleMouseOut}\n                            >\n                                <CloseIcon />\n                            </IconButton>\n                        )}\n                    </Grid>\n                    <Grid item>\n                        {theaterModeToggleEnabled && (\n                            <IconButton\n                                color=\"inherit\"\n                                className={theaterModeEnabled ? classes.topButton : classes.inactiveTopButton}\n                                onClick={onTheaterModeToggle}\n                                onMouseOver={handleMouseOver}\n                                onMouseOut={handleMouseOut}\n                            >\n                                <AspectRatioIcon />\n                            </IconButton>\n                        )}\n                        {hideSubtitlePlayerToggleEnabled && (\n                            <IconButton\n                                color=\"inherit\"\n                                className={classes.topButton}\n                                onClick={onHideSubtitlePlayerToggle}\n                                onMouseOver={handleMouseOver}\n                                onMouseOut={handleMouseOut}\n                            >\n                                {subtitlePlayerHidden ? <ArrowBackIcon /> : <ArrowForwardIcon />}\n                            </IconButton>\n                        )}\n                    </Grid>\n                </Grid>\n            </Fade>\n            <div\n                ref={containerRef}\n                className={classes.container}\n                onMouseOver={handleMouseOver}\n                onMouseOut={handleMouseOut}\n            >\n                <Fade in={show} timeout={200}>\n                    <div className={classes.subContainer}>\n                        <ProgressBar onSeek={handleSeek} value={progress * 100} />\n                        <Grid container className={classes.gridContainer} direction=\"row\">\n                            <Grid item>\n                                <IconButton color=\"inherit\" onClick={() => (playing ? onPause() : onPlay())}>\n                                    {playing ? (\n                                        <PauseIcon className={classes.button} />\n                                    ) : (\n                                        <PlayArrowIcon className={classes.button} />\n                                    )}\n                                </IconButton>\n                            </Grid>\n                            {volumeEnabled && (\n                                <Grid\n                                    item\n                                    onMouseOver={handleVolumeMouseOver}\n                                    onMouseOut={handleVolumeMouseOut}\n                                    className={\n                                        showVolumeBar\n                                            ? classes.volumeInputContainerShown\n                                            : classes.volumeInputContainerHidden\n                                    }\n                                >\n                                    <IconButton color=\"inherit\" onClick={handleVolumeToggle}>\n                                        {volume === 0 ? <VolumeOffIcon /> : <VolumeUpIcon />}\n                                    </IconButton>\n                                    <VolumeSlider\n                                        onChange={handleVolumeChange}\n                                        onChangeCommitted={handleVolumeChangeCommitted}\n                                        value={volume}\n                                        defaultValue={100}\n                                        classes={{\n                                            root: showVolumeBar ? classes.volumeInputShown : classes.volumeInputHidden,\n                                            thumb: showVolumeBar\n                                                ? classes.volumeInputThumbShown\n                                                : classes.volumeInputThumbHidden,\n                                        }}\n                                    />\n                                </Grid>\n                            )}\n                            <Grid item>\n                                <div className={classes.timeDisplay}>\n                                    {displayTime(progress * length)} / {displayTime(displayLength || length)}\n                                </div>\n                            </Grid>\n                            {offsetEnabled && (\n                                <Grid item>\n                                    <Input\n                                        inputRef={offsetInputRef}\n                                        disableUnderline={true}\n                                        className={classes.offsetInput}\n                                        placeholder={'±' + Number(0).toFixed(2)}\n                                        onClick={handleOffsetInputClicked}\n                                    />\n                                </Grid>\n                            )}\n                            <Grid item style={{ flexGrow: 1 }}></Grid>\n                            {subtitlesToggle && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={onSubtitlesToggle}>\n                                        <SubtitlesIcon\n                                            className={subtitlesEnabled ? classes.button : classes.inactiveButton}\n                                        />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {videoFile && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={handleVideoUnloaderOpened}>\n                                        <VideocamIcon className={classes.button} />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {audioFile && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={handleAudioUnloaderOpened}>\n                                        <AudiotrackIcon className={classes.button} />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {audioTracks && audioTracks.length > 1 && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={handleAudioTrackSelectorOpened}>\n                                        <QueueMusicIcon className={classes.button} />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {tabs && tabs.length > 0 && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={handleTabSelectorOpened}>\n                                        <VideocamIcon\n                                            className={selectedTab ? classes.button : classes.inactiveButton}\n                                        />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {playModeEnabled && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={handlePlayModeSelectorOpened}>\n                                        <TuneIcon\n                                            className={playModeEnabled ? classes.button : classes.inactiveButton}\n                                        />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {popOutEnabled && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={onPopOutToggle}>\n                                        <OpenInNewIcon\n                                            className={classes.button}\n                                            style={popOut ? { transform: 'rotateX(180deg)' } : {}}\n                                        />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {fullscreenEnabled && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={onFullscreenToggle}>\n                                        {fullscreen ? (\n                                            <FullscreenExitIcon className={classes.button} />\n                                        ) : (\n                                            <FullscreenIcon className={classes.button} />\n                                        )}\n                                    </IconButton>\n                                </Grid>\n                            )}\n                        </Grid>\n                    </div>\n                </Fade>\n                <TabSelector\n                    open={tabSelectorOpen && show}\n                    anchorEl={tabSelectorAnchorEl}\n                    tabs={tabs}\n                    selectedTab={selectedTab}\n                    onClose={handleTabSelectorClosed}\n                    onTabSelected={handleTabSelected}\n                />\n                <AudioTrackSelector\n                    open={audioTrackSelectorOpen && show}\n                    anchorEl={audioTrackSelectorAnchorEl}\n                    audioTracks={audioTracks}\n                    selectedAudioTrack={selectedAudioTrack}\n                    onClose={handleAudioTrackSelectorClosed}\n                    onAudioTrackSelected={handleAudioTrackSelected}\n                />\n                <MediaUnloader\n                    open={audioUnloaderOpen}\n                    anchorEl={audioUnloaderAnchorEl}\n                    file={audioFile}\n                    onClose={handleAudioUnloaderClosed}\n                    onUnload={handleUnloadAudio}\n                />\n                <MediaUnloader\n                    open={videoUnloaderOpen}\n                    anchorEl={videoUnloaderAnchorEl}\n                    file={videoFile}\n                    onClose={handleVideoUnloaderClosed}\n                    onUnload={handleUnloadVideo}\n                />\n                <PlayModeSelector\n                    open={playModeSelectorOpen && show}\n                    anchorEl={playModeSelectorAnchorEl}\n                    selectedPlayMode={playMode}\n                    onClose={handlePlayModeSelectorClosed}\n                    onPlayMode={handlePlayModeSelected}\n                />\n            </div>\n        </React.Fragment>\n    );\n}\n","import { RefObject } from \"react\";\n\nexport interface MediaElement {\n    currentTime: number;\n    readyState: number;\n    oncanplay: ((ev: Event) => void) | null;\n    play: () => Promise<void>;\n    pause: () => void;\n    duration: number;\n}\n\nexport default class MediaAdapter {\n    private readonly ref: RefObject<MediaElement | undefined>;\n    private readonly readyResolves: (() => void)[];\n\n    constructor(ref: RefObject<MediaElement | undefined>) {\n        this.ref = ref;\n        this.readyResolves = [];\n    }\n\n    async seek(time: number) {\n        return new Promise((resolve, reject) => {\n            if (this.ref.current) {\n                this.ref.current.currentTime = time;\n                this._onMediaCanPlay(() => resolve(undefined));\n            } else {\n                resolve(undefined);\n            }\n        });\n    }\n\n    async onReady() {\n        return new Promise((resolve, reject) => {\n            if (this.ref.current) {\n                this._onMediaCanPlay(() => resolve(undefined));\n            } else {\n                resolve(undefined);\n            }\n        });\n    }\n\n    _onMediaCanPlay(callback: () => void) {\n        if (this.ref.current?.readyState === 4) {\n            callback();\n            return;\n        }\n\n        if (this.ref.current && !this.ref.current.oncanplay) {\n            this.ref.current.oncanplay = (e) => {\n                for (const resolve of this.readyResolves) {\n                    resolve();\n                }\n\n                this.readyResolves.length = 0;\n\n                if (this.ref.current) {\n                    this.ref.current.oncanplay = null;\n                }\n            };\n        }\n\n        this.readyResolves.push(callback);\n    }\n\n    play() {\n        this.ref.current?.play();\n    }\n\n    pause() {\n        this.ref.current?.pause();\n    }\n}\n","import React, { useCallback, useEffect, useState, useMemo, useRef, createRef, RefObject } from 'react';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport { keysAreEqual } from '../services/Util';\nimport { useWindowSize } from '../hooks/useWindowSize';\nimport {\n    AsbplayerSettingsProvider,\n    PostMineAction,\n    surroundingSubtitles,\n    SubtitleModel,\n    SubtitleCollection,\n    KeyBinder,\n} from '@project/common';\nimport { SubtitleTextImage } from '@project/common/components';\nimport FileCopy from '@material-ui/icons/FileCopy';\nimport IconButton from '@material-ui/core/IconButton';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableRow, { TableRowProps } from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\nimport Clock from '../services/Clock';\n\ninterface StylesProps {\n    compressed: boolean;\n    appBarHidden: boolean;\n    windowWidth: number;\n}\n\nconst useSubtitlePlayerStyles = makeStyles<Theme, StylesProps, string>((theme) => ({\n    container: {\n        height: ({ appBarHidden }) => (appBarHidden ? '100vh' : 'calc(100vh - 64px)'),\n        position: 'relative',\n        overflowX: 'hidden',\n        backgroundColor: theme.palette.background.default,\n        width: ({ compressed, windowWidth }) => (compressed ? Math.max(350, 0.25 * windowWidth) : '100%'),\n    },\n    table: {\n        backgroundColor: theme.palette.background.default,\n        marginBottom: 75, // so the last row doesn't collide with controls\n    },\n    noSubtitles: {\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        padding: 15,\n        textAlign: 'center',\n    },\n}));\n\nconst useSubtitleRowStyles = makeStyles((theme) => ({\n    subtitleRow: {\n        '&:hover': {\n            backgroundColor: theme.palette.action.hover,\n        },\n    },\n    subtitle: {\n        fontSize: 20,\n        paddingRight: 0,\n        minWidth: 200,\n        width: '100%',\n        overflowWrap: 'anywhere',\n        whiteSpace: 'pre-wrap',\n    },\n    compressedSubtitle: {\n        fontSize: 16,\n        paddingRight: 0,\n        minWidth: 200,\n        width: '100%',\n        overflowWrap: 'anywhere',\n        whiteSpace: 'pre-wrap',\n    },\n    disabledSubtitle: {\n        color: 'transparent',\n        backgroundColor: theme.palette.action.disabledBackground,\n        borderRadius: 5,\n    },\n    timestamp: {\n        fontSize: 14,\n        color: '#aaaaaa',\n        textAlign: 'right',\n        paddingRight: 15,\n        paddingLeft: 5,\n    },\n    copyButton: {\n        textAlign: 'right',\n        padding: 0,\n    },\n}));\n\nexport interface DisplaySubtitleModel extends SubtitleModel {\n    displayTime: string;\n    index: number;\n}\n\ninterface SubtitleRowProps extends TableRowProps {\n    index: number;\n    compressed: boolean;\n    selected: boolean;\n    disabled: boolean;\n    subtitle: DisplaySubtitleModel;\n    copyButtonEnabled: boolean;\n    subtitleRef: RefObject<HTMLTableRowElement>;\n    onClickSubtitle: (index: number) => void;\n    onCopySubtitle: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>, index: number) => void;\n}\n\nconst SubtitleRow = React.memo((props: SubtitleRowProps) => {\n    const {\n        index,\n        selected,\n        subtitleRef,\n        onClickSubtitle,\n        onCopySubtitle,\n        compressed,\n        disabled,\n        subtitle,\n        copyButtonEnabled,\n        ...tableRowProps\n    } = props;\n    const classes = useSubtitleRowStyles();\n    const textRef = useRef<HTMLSpanElement>(null);\n    const [textSelected, setTextSelected] = useState<boolean>(false);\n    let className = compressed ? classes.compressedSubtitle : classes.subtitle;\n    let disabledClassName = disabled ? classes.disabledSubtitle : '';\n\n    if (subtitle.start < 0 || subtitle.end < 0) {\n        return null;\n    }\n\n    function handleMouseUp() {\n        const selection = document.getSelection();\n        const selected =\n            selection?.type === 'Range' && textRef.current?.isSameNode(selection.anchorNode?.parentNode ?? null);\n        setTextSelected(selected ?? false);\n    }\n\n    const content = subtitle.textImage ? (\n        <SubtitleTextImage availableWidth={window.screen.availWidth / 2} subtitle={subtitle} scale={1} />\n    ) : (\n        <span ref={textRef} className={disabledClassName}>\n            {subtitle.text}\n        </span>\n    );\n\n    return (\n        <TableRow\n            onClick={() => !textSelected && onClickSubtitle(index)}\n            onMouseUp={handleMouseUp}\n            ref={subtitleRef}\n            className={classes.subtitleRow}\n            selected={selected}\n            {...tableRowProps}\n        >\n            <TableCell className={className}>{content}</TableCell>\n            {copyButtonEnabled && (\n                <TableCell className={classes.copyButton}>\n                    <IconButton onClick={(e) => onCopySubtitle(e, index)}>\n                        <FileCopy fontSize={compressed ? 'small' : 'medium'} />\n                    </IconButton>\n                </TableCell>\n            )}\n            <TableCell className={classes.timestamp}>{subtitle.displayTime}</TableCell>\n        </TableRow>\n    );\n});\n\ninterface SubtitlePlayerProps {\n    clock: Clock;\n    onSeek: (progress: number, shouldPlay: boolean) => void;\n    onCopy: (\n        subtitle: SubtitleModel,\n        surroundingSubtitles: SubtitleModel[],\n        postMineAction: PostMineAction,\n        preventDuplicate: boolean\n    ) => void;\n    onOffsetChange: (offset: number) => void;\n    onToggleSubtitleTrack: (track: number) => void;\n    onStartedShowing?: () => void;\n    onWillStopShowing?: () => void;\n    playing: boolean;\n    subtitles?: DisplaySubtitleModel[];\n    subtitleCollection?: SubtitleCollection<DisplaySubtitleModel>;\n    length: number;\n    jumpToSubtitle?: SubtitleModel;\n    compressed: boolean;\n    copyButtonEnabled: boolean;\n    loading: boolean;\n    drawerOpen: boolean;\n    appBarHidden: boolean;\n    displayHelp?: string;\n    disableKeyEvents: boolean;\n    lastJumpToTopTimestamp: number;\n    hidden: boolean;\n    disabledSubtitleTracks: { [track: number]: boolean };\n    settingsProvider: AsbplayerSettingsProvider;\n    keyBinder: KeyBinder;\n}\n\nexport default function SubtitlePlayer({\n    clock,\n    onSeek,\n    onCopy,\n    onOffsetChange,\n    onToggleSubtitleTrack,\n    onStartedShowing,\n    onWillStopShowing,\n    playing,\n    subtitles,\n    subtitleCollection,\n    length,\n    jumpToSubtitle,\n    compressed,\n    copyButtonEnabled,\n    loading,\n    drawerOpen,\n    appBarHidden,\n    displayHelp,\n    disableKeyEvents,\n    lastJumpToTopTimestamp,\n    hidden,\n    disabledSubtitleTracks,\n    settingsProvider,\n    keyBinder,\n}: SubtitlePlayerProps) {\n    const playingRef = useRef<boolean>();\n    playingRef.current = playing;\n    const clockRef = useRef<Clock>(clock);\n    clockRef.current = clock;\n    const subtitleListRef = useRef<DisplaySubtitleModel[]>();\n    subtitleListRef.current = subtitles;\n    const subtitleRefs = useMemo<RefObject<HTMLTableRowElement>[]>(\n        () =>\n            subtitles\n                ? Array(subtitles.length)\n                      .fill(undefined)\n                      .map((_) => createRef<HTMLTableRowElement>())\n                : [],\n        [subtitles]\n    );\n    const subtitleCollectionRef = useRef<SubtitleCollection<DisplaySubtitleModel>>(SubtitleCollection.empty<DisplaySubtitleModel>());\n    subtitleCollectionRef.current = subtitleCollection ?? SubtitleCollection.empty<DisplaySubtitleModel>();\n    const subtitleRefsRef = useRef<RefObject<HTMLTableRowElement>[]>([]);\n    subtitleRefsRef.current = subtitleRefs;\n    const disableKeyEventsRef = useRef<boolean>();\n    disableKeyEventsRef.current = disableKeyEvents;\n    const [selectedSubtitleIndexes, setSelectedSubtitleIndexes] = useState<{ [index: number]: boolean }>({});\n    const selectedSubtitleIndexesRef = useRef<{ [index: number]: boolean }>({});\n    const lengthRef = useRef<number>(0);\n    lengthRef.current = length;\n    const hiddenRef = useRef<boolean>(false);\n    hiddenRef.current = hidden;\n    const lastScrollTimestampRef = useRef<number>(0);\n    const requestAnimationRef = useRef<number>();\n    const containerRef = useRef<HTMLElement>();\n    const drawerOpenRef = useRef<boolean>();\n    drawerOpenRef.current = drawerOpen;\n    const [windowWidth] = useWindowSize(true);\n    const classes = useSubtitlePlayerStyles({ compressed, windowWidth, appBarHidden });\n    const startedShowingSubtitleRef = useRef<SubtitleModel>();\n    const onStartedShowingRef = useRef<() => void>();\n    onStartedShowingRef.current = onStartedShowing;\n    const willStopShowingSubtitleRef = useRef<SubtitleModel>();\n    const onWillStopShowingRef = useRef<() => void>();\n    onWillStopShowingRef.current = onWillStopShowing;\n\n    // This effect should be scheduled only once as re-scheduling seems to cause performance issues.\n    // Therefore all of the state it operates on is contained in refs.\n    useEffect(() => {\n        const update = () => {\n            const subtitleRefs = subtitleRefsRef.current;\n            const clock = clockRef.current;\n            const currentSubtitleIndexes: { [index: number]: boolean } = {};\n            const timestamp = clock.time(lengthRef.current);\n\n            let slice = subtitleCollectionRef.current.subtitlesAt(timestamp);\n            const showing = slice.showing.length === 0 ? slice.lastShown ?? [] : slice.showing;\n            let smallestIndex: number | undefined;\n\n            for (const s of showing) {\n                currentSubtitleIndexes[s.index] = true;\n\n                if (smallestIndex === undefined || s.index < smallestIndex) {\n                    smallestIndex = s.index;\n                }\n            }\n\n            if (!keysAreEqual(currentSubtitleIndexes, selectedSubtitleIndexesRef.current)) {\n                selectedSubtitleIndexesRef.current = currentSubtitleIndexes;\n                setSelectedSubtitleIndexes(currentSubtitleIndexes);\n\n                if (smallestIndex !== undefined) {\n                    const scrollToSubtitleRef = subtitleRefs[smallestIndex];\n                    const allowScroll = !hiddenRef.current && Date.now() - lastScrollTimestampRef.current > 5000;\n\n                    if (scrollToSubtitleRef?.current && allowScroll) {\n                        scrollToSubtitleRef.current.scrollIntoView({\n                            block: 'center',\n                            inline: 'nearest',\n                            behavior: 'smooth',\n                        });\n                    }\n                }\n            }\n\n            if (startedShowingSubtitleRef.current !== slice.startedShowing) {\n                if (slice.startedShowing !== undefined) {\n                    onStartedShowingRef.current?.();\n                }\n\n                startedShowingSubtitleRef.current = slice.startedShowing;\n            }\n\n            if (willStopShowingSubtitleRef.current !== slice.willStopShowing) {\n                if (slice.willStopShowing !== undefined) {\n                    onWillStopShowingRef.current?.();\n                }\n\n                willStopShowingSubtitleRef.current = slice.willStopShowing;\n            }\n\n            requestAnimationRef.current = requestAnimationFrame(update);\n        };\n\n        requestAnimationRef.current = requestAnimationFrame(update);\n\n        return () => {\n            if (requestAnimationRef.current !== undefined) {\n                cancelAnimationFrame(requestAnimationRef.current);\n            }\n        };\n    }, []);\n\n    const scrollToCurrentSubtitle = useCallback(() => {\n        const selectedSubtitleIndexes = selectedSubtitleIndexesRef.current;\n\n        if (!selectedSubtitleIndexes) {\n            return;\n        }\n\n        const indexes = Object.keys(selectedSubtitleIndexes);\n\n        if (indexes.length === 0) {\n            return;\n        }\n\n        const scrollToSubtitleRef = subtitleRefs[Number(indexes[0])];\n\n        scrollToSubtitleRef?.current?.scrollIntoView({\n            block: 'center',\n            inline: 'nearest',\n            behavior: 'smooth',\n        });\n    }, [subtitleRefs]);\n\n    useEffect(() => {\n        if (hidden) {\n            return;\n        }\n\n        function scrollIfVisible() {\n            if (document.visibilityState === 'visible') {\n                scrollToCurrentSubtitle();\n            }\n        }\n\n        document.addEventListener('visibilitychange', scrollIfVisible);\n\n        return () => document.removeEventListener('visibilitychange', scrollIfVisible);\n    }, [hidden, selectedSubtitleIndexes, subtitleRefs, scrollToCurrentSubtitle]);\n\n    useEffect(() => {\n        if (!hidden) {\n            scrollToCurrentSubtitle();\n        }\n    }, [hidden, scrollToCurrentSubtitle]);\n\n    useEffect(() => {\n        if (hiddenRef.current) {\n            return;\n        }\n\n        const subtitleRefs = subtitleRefsRef.current;\n\n        if (!subtitleRefs || subtitleRefs.length === 0) {\n            return;\n        }\n\n        const firstSubtitleRef = subtitleRefs[0];\n        firstSubtitleRef?.current?.scrollIntoView({\n            block: 'center',\n            inline: 'nearest',\n            behavior: 'smooth',\n        });\n    }, [lastJumpToTopTimestamp]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindAdjustOffset(\n            (event, offset) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onOffsetChange(offset);\n            },\n            () => disableKeyEvents,\n            () => subtitles\n        );\n\n        return () => unbind();\n    }, [keyBinder, onOffsetChange, disableKeyEvents, subtitles]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindOffsetToSubtitle(\n            (event, offset) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onOffsetChange(offset);\n            },\n            () => disableKeyEvents,\n            () => clock.time(length),\n            () => subtitles\n        );\n\n        return () => unbind();\n    }, [keyBinder, onOffsetChange, disableKeyEvents, clock, subtitles, length]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindSeekToSubtitle(\n            (event, subtitle) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onSeek(subtitle.start, false);\n            },\n            () => disableKeyEvents,\n            () => clock.time(length),\n            () => subtitles\n        );\n\n        return () => unbind();\n    }, [keyBinder, onSeek, subtitles, disableKeyEvents, clock, length]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindSeekToBeginningOfCurrentSubtitle(\n            (event, subtitle) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onSeek(subtitle.start, false);\n            },\n            () => disableKeyEvents,\n            () => clock.time(length),\n            () => subtitles\n        );\n\n        return () => unbind();\n    }, [keyBinder, onSeek, subtitles, disableKeyEvents, clock, length]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindSeekBackwardOrForward(\n            (event, forward) => {\n                event.stopPropagation();\n                event.preventDefault();\n                if (forward) {\n                    onSeek(Math.min(length, clock.time(length) + 10000), false);\n                } else {\n                    onSeek(Math.max(0, clock.time(length) - 10000), false);\n                }\n            },\n            () => disableKeyEvents\n        );\n\n        return () => unbind();\n    }, [keyBinder, clock, length, disableKeyEvents, onSeek]);\n\n    useEffect(() => {\n        function handleScroll() {\n            lastScrollTimestampRef.current = Date.now();\n        }\n\n        const table = containerRef.current;\n        table?.addEventListener('wheel', handleScroll);\n\n        return () => table?.removeEventListener('wheel', handleScroll);\n    }, [containerRef, lastScrollTimestampRef]);\n\n    useEffect(() => {\n        if (hidden) {\n            return;\n        }\n\n        if (!jumpToSubtitle || !subtitles) {\n            return;\n        }\n\n        let jumpToIndex = -1;\n        let i = 0;\n\n        for (let s of subtitles) {\n            if (s.originalStart === jumpToSubtitle.originalStart && s.text === jumpToSubtitle.text) {\n                jumpToIndex = i;\n                break;\n            }\n\n            ++i;\n        }\n\n        if (jumpToIndex !== -1) {\n            subtitleRefs[jumpToIndex]?.current?.scrollIntoView({\n                block: 'center',\n                inline: 'nearest',\n                behavior: 'smooth',\n            });\n        }\n    }, [hidden, jumpToSubtitle, subtitles, subtitleRefs]);\n\n    const calculateSurroundingSubtitlesForIndex = useCallback(\n        (index: number) => {\n            if (!selectedSubtitleIndexesRef.current || !subtitles) {\n                return [];\n            }\n\n            return surroundingSubtitles(\n                subtitles,\n                index,\n                settingsProvider.surroundingSubtitlesCountRadius,\n                settingsProvider.surroundingSubtitlesTimeRadius\n            );\n        },\n        [subtitles, settingsProvider.surroundingSubtitlesCountRadius, settingsProvider.surroundingSubtitlesTimeRadius]\n    );\n\n    const calculateSurroundingSubtitles = useCallback(() => {\n        if (!selectedSubtitleIndexesRef.current) {\n            return [];\n        }\n        const index = Math.min(...Object.keys(selectedSubtitleIndexesRef.current).map((i) => Number(i)));\n        return calculateSurroundingSubtitlesForIndex(index);\n    }, [calculateSurroundingSubtitlesForIndex]);\n\n    const calculateCurrentSubtitle = useCallback(() => {\n        const subtitleIndexes = Object.keys(selectedSubtitleIndexesRef.current).map((i) => Number(i));\n\n        if (!subtitles || !subtitleIndexes || subtitleIndexes.length === 0) {\n            return undefined;\n        }\n\n        const index = Math.min(...subtitleIndexes);\n        return subtitles[index];\n    }, [subtitles]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindCopy(\n            (event, subtitle) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onCopy(subtitle, calculateSurroundingSubtitles(), PostMineAction.none, false);\n            },\n            () => disableKeyEventsRef.current ?? false,\n            () => calculateCurrentSubtitle()\n        );\n\n        return () => unbind();\n    }, [keyBinder, calculateCurrentSubtitle, calculateSurroundingSubtitles, onCopy]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindToggleSubtitleTrackInList(\n            (event, track) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onToggleSubtitleTrack(track);\n            },\n            () => disableKeyEvents\n        );\n\n        return () => unbind();\n    }, [keyBinder, disableKeyEvents, onToggleSubtitleTrack]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindAnkiExport(\n            (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n                const subtitleIndexes = Object.keys(selectedSubtitleIndexesRef.current).map((i) => Number(i));\n\n                if (subtitles && subtitleIndexes && subtitleIndexes.length > 0) {\n                    const index = Math.min(...subtitleIndexes);\n                    onCopy(\n                        subtitles[index],\n                        calculateSurroundingSubtitlesForIndex(index),\n                        PostMineAction.showAnkiDialog,\n                        true\n                    );\n                }\n            },\n            () => !subtitles || subtitles.length === 0 || disableKeyEvents\n        );\n\n        return () => unbind();\n    }, [keyBinder, onCopy, disableKeyEvents, subtitles, calculateSurroundingSubtitlesForIndex]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindUpdateLastCard(\n            (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n                const subtitleIndexes = Object.keys(selectedSubtitleIndexesRef.current).map((i) => Number(i));\n\n                if (subtitles && subtitleIndexes && subtitleIndexes.length > 0) {\n                    const index = Math.min(...subtitleIndexes);\n                    onCopy(\n                        subtitles[index],\n                        calculateSurroundingSubtitlesForIndex(index),\n                        PostMineAction.updateLastCard,\n                        true\n                    );\n                }\n            },\n            () => !subtitles || subtitles.length === 0 || disableKeyEvents\n        );\n\n        return () => unbind();\n    }, [keyBinder, onCopy, disableKeyEvents, subtitles, calculateSurroundingSubtitlesForIndex]);\n\n    const handleClick = useCallback(\n        (index: number) => {\n            if (!subtitles) {\n                return;\n            }\n\n            const selectedSubtitleIndexes = selectedSubtitleIndexesRef.current || {};\n            onSeek(subtitles[index].start, !playingRef.current && index in selectedSubtitleIndexes);\n        },\n        [subtitles, onSeek]\n    );\n\n    const handleCopy = useCallback(\n        (e: React.MouseEvent<HTMLButtonElement, MouseEvent>, index: number) => {\n            e.preventDefault();\n            e.stopPropagation();\n\n            if (!subtitles) {\n                return;\n            }\n\n            onCopy(subtitles[index], calculateSurroundingSubtitlesForIndex(index), PostMineAction.none, false);\n        },\n        [subtitles, calculateSurroundingSubtitlesForIndex, onCopy]\n    );\n\n    let subtitleTable = null;\n\n    if (!subtitles || subtitles.length === 0) {\n        if (!loading && displayHelp) {\n            subtitleTable = !loading && displayHelp && (\n                <div className={classes.noSubtitles}>\n                    <Typography variant=\"h6\">{displayHelp}</Typography>\n                </div>\n            );\n        } else if (subtitles && subtitles.length === 0) {\n            subtitleTable = (\n                <div className={classes.noSubtitles}>\n                    <Typography variant=\"h6\">No subtitles</Typography>\n                </div>\n            );\n        }\n    } else {\n        subtitleTable = (\n            <TableContainer className={classes.table}>\n                <Table>\n                    <TableBody>\n                        {subtitles.map((s: SubtitleModel, index: number) => {\n                            const selected = index in selectedSubtitleIndexes;\n\n                            return (\n                                <SubtitleRow\n                                    key={index}\n                                    index={index}\n                                    compressed={compressed}\n                                    selected={selected}\n                                    copyButtonEnabled={copyButtonEnabled}\n                                    disabled={disabledSubtitleTracks[s.track]}\n                                    subtitle={subtitles[index]}\n                                    subtitleRef={subtitleRefs[index]}\n                                    onClickSubtitle={handleClick}\n                                    onCopySubtitle={handleCopy}\n                                />\n                            );\n                        })}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        );\n    }\n\n    return (\n        <Paper square elevation={0} ref={containerRef} className={classes.container}>\n            {subtitleTable}\n        </Paper>\n    );\n}\n","import {\n    AnkiDialogRequestFromVideoMessage,\n    AnkiSettings,\n    AnkiSettingsToVideoMessage,\n    AppBarToggleMessageToVideoMessage,\n    AudioModel,\n    AudioTrackModel,\n    AudioTrackSelectedFromVideoMessage,\n    AudioTrackSelectedToVideoMessage,\n    CopyMessage,\n    CurrentTimeFromVideoMessage,\n    CurrentTimeToVideoMessage,\n    FinishedAnkiDialogRequestToVideoMessage,\n    HideSubtitlePlayerToggleToVideoMessage,\n    ImageModel,\n    MiscSettings,\n    MiscSettingsToVideoMessage,\n    OffsetFromVideoMessage,\n    OffsetToVideoMessage,\n    PauseFromVideoMessage,\n    PlayFromVideoMessage,\n    PlayMode,\n    PlayModeMessage,\n    PostMineAction,\n    ReadyFromVideoMessage,\n    ReadyStateFromVideoMessage,\n    ReadyToVideoMessage,\n    SubtitleModel,\n    SubtitleSettings,\n    SubtitleSettingsToVideoMessage,\n    SubtitlesToVideoMessage,\n    ToggleSubtitleTrackInListFromVideoMessage,\n} from '@project/common';\nimport { VideoProtocol } from './VideoProtocol';\n\nexport default class VideoChannel {\n    private readonly protocol: VideoProtocol;\n    private time: number;\n    private isReady: boolean;\n    private readyCallbacks: ((paused: boolean) => void)[];\n    private playCallbacks: ((echo: boolean) => void)[];\n    private pauseCallbacks: ((echo: boolean) => void)[];\n    private audioTrackSelectedCallbacks: ((audioTrack: string) => void)[];\n    private currentTimeCallbacks: ((currentTime: number, echo: boolean) => void)[];\n    private exitCallbacks: (() => void)[];\n    private offsetCallbacks: ((offset: number) => void)[];\n    private popOutToggleCallbacks: (() => void)[];\n    private copyCallbacks: ((\n        subtitle: SubtitleModel,\n        surroundingSubtitles: SubtitleModel[],\n        audio: AudioModel | undefined,\n        image: ImageModel | undefined,\n        url: string | undefined,\n        postMineAction: PostMineAction,\n        fromVideo: boolean,\n        preventDuplicate: boolean,\n        id: string | undefined\n    ) => void)[];\n    private playModeCallbacks: ((mode: PlayMode) => void)[];\n    private hideSubtitlePlayerToggleCallbacks: (() => void)[];\n    private appBarToggleCallbacks: (() => void)[];\n    private ankiDialogRequestCallbacks: ((forwardToVideo: boolean) => void)[];\n    private toggleSubtitleTrackInListCallbacks: ((track: number) => void)[];\n\n    readyState: number;\n    oncanplay: ((ev: Event) => void) | null = null;\n    audioTracks?: AudioTrackModel[];\n    selectedAudioTrack?: string;\n    duration: number;\n\n    constructor(protocol: VideoProtocol) {\n        this.protocol = protocol;\n        this.time = 0;\n        this.duration = 0;\n        this.isReady = false;\n        this.readyState = 0;\n        this.selectedAudioTrack = undefined;\n        this.readyCallbacks = [];\n        this.playCallbacks = [];\n        this.pauseCallbacks = [];\n        this.currentTimeCallbacks = [];\n        this.audioTrackSelectedCallbacks = [];\n        this.exitCallbacks = [];\n        this.offsetCallbacks = [];\n        this.popOutToggleCallbacks = [];\n        this.copyCallbacks = [];\n        this.playModeCallbacks = [];\n        this.hideSubtitlePlayerToggleCallbacks = [];\n        this.appBarToggleCallbacks = [];\n        this.ankiDialogRequestCallbacks = [];\n        this.toggleSubtitleTrackInListCallbacks = [];\n\n        const that = this;\n\n        this.protocol.onMessage = (event) => {\n            switch (event.data.command) {\n                case 'ready':\n                    const readyMessage = event.data as ReadyFromVideoMessage;\n\n                    that.duration = readyMessage.duration;\n                    that.isReady = true;\n                    that.audioTracks = readyMessage.audioTracks;\n                    that.selectedAudioTrack = readyMessage.selectedAudioTrack;\n                    that.readyState = 4;\n                    that.time = readyMessage.currentTime;\n\n                    for (let callback of that.readyCallbacks) {\n                        callback(readyMessage.paused);\n                    }\n                    break;\n                case 'readyState':\n                    const readyStateMessage = event.data as ReadyStateFromVideoMessage;\n\n                    that.readyState = readyStateMessage.value;\n                    if (that.readyState === 4) {\n                        that.oncanplay?.(new Event('canplay'));\n                    }\n                    break;\n                case 'play':\n                    const playMessage = event.data as PlayFromVideoMessage;\n\n                    for (let callback of that.playCallbacks) {\n                        callback(playMessage.echo);\n                    }\n                    break;\n                case 'pause':\n                    const pauseMessage = event.data as PauseFromVideoMessage;\n\n                    for (let callback of that.pauseCallbacks) {\n                        callback(pauseMessage.echo);\n                    }\n                    break;\n                case 'audioTrackSelected':\n                    const audioTrackSelectedMessage = event.data as AudioTrackSelectedFromVideoMessage;\n\n                    for (let callback of that.audioTrackSelectedCallbacks) {\n                        that.selectedAudioTrack = audioTrackSelectedMessage.id;\n                        callback(audioTrackSelectedMessage.id);\n                    }\n                    break;\n                case 'currentTime':\n                    const currentTimeMessage = event.data as CurrentTimeFromVideoMessage;\n\n                    for (let callback of that.currentTimeCallbacks) {\n                        callback(currentTimeMessage.value, currentTimeMessage.echo);\n                    }\n                    break;\n                case 'exit':\n                    for (let callback of that.exitCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'offset':\n                    const offsetMessage = event.data as OffsetFromVideoMessage;\n\n                    for (let callback of that.offsetCallbacks) {\n                        callback(offsetMessage.value);\n                    }\n                    break;\n                case 'popOutToggle':\n                    for (let callback of that.popOutToggleCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'copy':\n                    for (let callback of that.copyCallbacks) {\n                        const copyMessage = event.data as CopyMessage;\n\n                        callback(\n                            copyMessage.subtitle,\n                            copyMessage.surroundingSubtitles,\n                            copyMessage.audio,\n                            copyMessage.image,\n                            copyMessage.url,\n                            copyMessage.postMineAction ?? PostMineAction.none,\n                            true,\n                            copyMessage.preventDuplicate ?? false,\n                            copyMessage.id\n                        );\n                    }\n                    break;\n                case 'playMode':\n                    for (let callback of that.playModeCallbacks) {\n                        const playModeMessage = event.data as PlayModeMessage;\n                        callback(playModeMessage.playMode);\n                    }\n                    break;\n                case 'hideSubtitlePlayerToggle':\n                    for (let callback of that.hideSubtitlePlayerToggleCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'appBarToggle':\n                    for (let callback of that.appBarToggleCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'sync':\n                    // ignore\n                    break;\n                case 'syncv2':\n                    // ignore\n                    break;\n                case 'ankiDialogRequest':\n                    const ankiDialogRequestMessage = event.data as AnkiDialogRequestFromVideoMessage;\n\n                    for (let callback of that.ankiDialogRequestCallbacks) {\n                        callback(ankiDialogRequestMessage.forwardToVideo);\n                    }\n                    break;\n                case 'toggleSubtitleTrackInList':\n                    const toggleSubtitleTrackInListMessage = event.data as ToggleSubtitleTrackInListFromVideoMessage;\n\n                    for (const callback of that.toggleSubtitleTrackInListCallbacks) {\n                        callback(toggleSubtitleTrackInListMessage.track);\n                    }\n                    break;\n                case 'playbackRate':\n                    // ignore for now\n                    break;\n                default:\n                    console.error('Unrecognized event ' + event.data.command);\n            }\n        };\n    }\n\n    get currentTime() {\n        return this.time;\n    }\n\n    set currentTime(value: number) {\n        this.time = value;\n        this.readyState = 3;\n        const message: CurrentTimeToVideoMessage = { command: 'currentTime', value: this.time };\n        this.protocol.postMessage(message);\n    }\n\n    onReady(callback: (paused: boolean) => void) {\n        if (this.isReady) {\n            callback(false);\n        }\n        this.readyCallbacks.push(callback);\n    }\n\n    onPlay(callback: (echo: boolean) => void) {\n        this.playCallbacks.push(callback);\n    }\n\n    onPause(callback: (echo: boolean) => void) {\n        this.pauseCallbacks.push(callback);\n    }\n\n    onCurrentTime(callback: (currentTime: number, echo: boolean) => void) {\n        this.currentTimeCallbacks.push(callback);\n    }\n\n    onAudioTrackSelected(callback: (id: string) => void) {\n        this.audioTrackSelectedCallbacks.push(callback);\n    }\n\n    onExit(callback: () => void) {\n        this.exitCallbacks.push(callback);\n    }\n\n    onOffset(callback: (offset: number) => void) {\n        this.offsetCallbacks.push(callback);\n    }\n\n    onPopOutToggle(callback: () => void) {\n        this.popOutToggleCallbacks.push(callback);\n    }\n\n    onCopy(\n        callback: (\n            subtitle: SubtitleModel,\n            surroundingSubtitles: SubtitleModel[],\n            audio: AudioModel | undefined,\n            image: ImageModel | undefined,\n            url: string | undefined,\n            postMineAction: PostMineAction,\n            fromVideo: boolean,\n            preventDuplicate: boolean,\n            id: string | undefined\n        ) => void\n    ) {\n        this.copyCallbacks.push(callback);\n    }\n\n    onPlayMode(callback: (playMode: PlayMode) => void) {\n        this.playModeCallbacks.push(callback);\n    }\n\n    onHideSubtitlePlayerToggle(callback: () => void) {\n        this.hideSubtitlePlayerToggleCallbacks.push(callback);\n    }\n\n    onAppBarToggle(callback: () => void) {\n        this.appBarToggleCallbacks.push(callback);\n    }\n\n    onAnkiDialogRequest(callback: (forwardToVideo: boolean) => void) {\n        this.ankiDialogRequestCallbacks.push(callback);\n    }\n\n    onToggleSubtitleTrackInList(callback: (track: number) => void) {\n        this.toggleSubtitleTrackInListCallbacks.push(callback);\n    }\n\n    ready(duration: number) {\n        const message: ReadyToVideoMessage = { command: 'ready', duration: duration };\n        this.protocol.postMessage(message);\n    }\n\n    init() {\n        this.protocol.postMessage({ command: 'init' });\n    }\n\n    // Return a promise to implement the analogous HTMLMediaElement method\n    play(): Promise<void> {\n        this.protocol.postMessage({ command: 'play' });\n        return new Promise((resolve, reject) => resolve());\n    }\n\n    pause() {\n        this.protocol.postMessage({ command: 'pause' });\n    }\n\n    audioTrackSelected(id: string) {\n        const message: AudioTrackSelectedToVideoMessage = { command: 'audioTrackSelected', id: id };\n        this.protocol.postMessage(message);\n    }\n\n    subtitles(subtitles: SubtitleModel[], subtitleFileNames: string[]) {\n        this.protocol.postMessage({\n            command: 'subtitles',\n            value: subtitles,\n            name: subtitleFileNames.length > 0 ? subtitleFileNames[0] : null,\n            names: subtitleFileNames,\n        } as SubtitlesToVideoMessage);\n    }\n\n    offset(offset: number) {\n        const message: OffsetToVideoMessage = { command: 'offset', value: offset };\n        this.protocol.postMessage(message);\n    }\n\n    subtitleSettings(settings: SubtitleSettings) {\n        const message: SubtitleSettingsToVideoMessage = { command: 'subtitleSettings', value: settings };\n        this.protocol.postMessage(message);\n    }\n\n    playMode(playMode: PlayMode) {\n        const message: PlayModeMessage = {\n            command: 'playMode',\n            playMode: playMode,\n        };\n        this.protocol.postMessage(message);\n    }\n\n    hideSubtitlePlayerToggle(hidden: boolean) {\n        const message: HideSubtitlePlayerToggleToVideoMessage = {\n            command: 'hideSubtitlePlayerToggle',\n            value: hidden,\n        };\n        this.protocol.postMessage(message);\n    }\n\n    appBarToggle(hidden: boolean) {\n        const message: AppBarToggleMessageToVideoMessage = {\n            command: 'appBarToggle',\n            value: hidden,\n        };\n        this.protocol.postMessage(message);\n    }\n\n    ankiDialogRequest() {\n        this.protocol.postMessage({ command: 'ankiDialogRequest' });\n    }\n\n    finishedAnkiDialogRequest(resume: boolean) {\n        const message: FinishedAnkiDialogRequestToVideoMessage = {\n            command: 'finishedAnkiDialogRequest',\n            resume: resume,\n        };\n        this.protocol.postMessage(message);\n    }\n\n    ankiSettings(settings: AnkiSettings) {\n        const message: AnkiSettingsToVideoMessage = { command: 'ankiSettings', value: settings };\n        this.protocol.postMessage(message);\n    }\n\n    miscSettings(settings: MiscSettings) {\n        const message: MiscSettingsToVideoMessage = { command: 'miscSettings', value: settings };\n        this.protocol.postMessage(message);\n    }\n\n    close() {\n        this.protocol.postMessage({ command: 'close' });\n        this.protocol.close();\n        this.readyCallbacks = [];\n        this.playCallbacks = [];\n        this.pauseCallbacks = [];\n        this.currentTimeCallbacks = [];\n        this.audioTrackSelectedCallbacks = [];\n        this.exitCallbacks = [];\n        this.offsetCallbacks = [];\n        this.popOutToggleCallbacks = [];\n        this.copyCallbacks = [];\n        this.playModeCallbacks = [];\n        this.hideSubtitlePlayerToggleCallbacks = [];\n        this.appBarToggleCallbacks = [];\n        this.ankiDialogRequestCallbacks = [];\n        this.toggleSubtitleTrackInListCallbacks = [];\n    }\n}\n","import React, { useEffect, useState, useMemo, useCallback, useRef, MutableRefObject } from 'react';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport { v4 as uuidv4 } from 'uuid';\nimport {\n    AsbplayerSettingsProvider,\n    AudioModel,\n    AudioTrackModel,\n    AutoPausePreference,\n    ImageModel,\n    KeyBinder,\n    mockSurroundingSubtitles,\n    PlayMode,\n    PostMineAction,\n    SubtitleCollection,\n    SubtitleModel,\n    VideoTabModel,\n} from '@project/common';\nimport { timeDurationDisplay } from '../services/Util';\nimport BroadcastChannelVideoProtocol from '../services/BroadcastChannelVideoProtocol';\nimport ChromeTabVideoProtocol from '../services/ChromeTabVideoProtocol';\nimport Clock from '../services/Clock';\nimport Controls, { Point } from './Controls';\nimport Grid from '@material-ui/core/Grid';\nimport MediaAdapter, { MediaElement } from '../services/MediaAdapter';\nimport SubtitlePlayer, { DisplaySubtitleModel } from './SubtitlePlayer';\nimport VideoChannel from '../services/VideoChannel';\nimport ChromeExtension from '../services/ChromeExtension';\nimport SubtitleReader from '../services/SubtitleReader';\nimport PlaybackPreferences from '../services/PlaybackPreferences';\nimport lte from 'semver/functions/lte';\n\ninterface StylesProps {\n    appBarHidden: boolean;\n}\n\nconst useStyles = makeStyles<Theme, StylesProps>({\n    root: ({ appBarHidden }) => ({\n        height: appBarHidden ? '100vh' : 'calc(100vh - 64px)',\n        position: 'relative',\n        overflowX: 'hidden',\n    }),\n    container: {\n        width: '100%',\n        height: '100%',\n    },\n    videoFrame: {\n        width: '100%',\n        height: '100%',\n        border: 0,\n        display: 'block',\n    },\n});\n\nfunction trackLength(\n    audioRef: MutableRefObject<HTMLAudioElement | null>,\n    videoRef: MutableRefObject<MediaElement | undefined>,\n    subtitles: SubtitleModel[] | undefined,\n    useOffset?: boolean\n) {\n    let subtitlesLength;\n    if (subtitles && subtitles.length > 0) {\n        if (useOffset) {\n            subtitlesLength = subtitles[subtitles.length - 1].end;\n        } else {\n            subtitlesLength = subtitles[subtitles.length - 1].originalEnd;\n        }\n    } else {\n        subtitlesLength = 0;\n    }\n\n    const audioLength = audioRef.current && audioRef.current.duration ? 1000 * audioRef.current.duration : 0;\n\n    const videoLength = videoRef.current && videoRef.current.duration ? 1000 * videoRef.current.duration : 0;\n\n    return Math.max(videoLength, Math.max(subtitlesLength, audioLength));\n}\n\nexport interface MediaSources {\n    subtitleFiles: File[];\n    audioFile?: File;\n    audioFileUrl?: string;\n    videoFile?: File;\n    videoFileUrl?: string;\n}\n\nexport interface AnkiDialogFinishedRequest {\n    resume: boolean;\n    timestamp: number;\n}\n\ninterface PlayerProps {\n    sources: MediaSources;\n    subtitleReader: SubtitleReader;\n    settingsProvider: AsbplayerSettingsProvider;\n    playbackPreferences: PlaybackPreferences;\n    keyBinder: KeyBinder;\n    extension: ChromeExtension;\n    videoFrameRef: MutableRefObject<HTMLIFrameElement | null>;\n    videoChannelRef: MutableRefObject<VideoChannel | null>;\n    drawerOpen: boolean;\n    appBarHidden: boolean;\n    videoPopOut: boolean;\n    tab?: VideoTabModel;\n    availableTabs: VideoTabModel[];\n    ankiDialogRequestToVideo?: number;\n    ankiDialogRequested: boolean;\n    ankiDialogFinishedRequest: AnkiDialogFinishedRequest;\n    onError: (error: string) => void;\n    onUnloadAudio: (url: string) => void;\n    onUnloadVideo: (url: string) => void;\n    onCopy: (\n        subtitle: SubtitleModel,\n        surroundingSubtitles: SubtitleModel[],\n        audioFile: File | undefined,\n        videoFile: File | undefined,\n        subtitleFile: File | undefined,\n        mediaTimestamp: number | undefined,\n        audioTrack: string | undefined,\n        audio: AudioModel | undefined,\n        image: ImageModel | undefined,\n        url: string | undefined,\n        postMineAction: PostMineAction | undefined,\n        fromVideo: boolean | undefined,\n        preventDuplicate: boolean | undefined,\n        id: string | undefined\n    ) => void;\n    onLoaded: () => void;\n    onTabSelected: (tab: VideoTabModel) => void;\n    onAnkiDialogRequest: (forwardToVideo?: boolean) => void;\n    onAppBarToggle: () => void;\n    onVideoPopOut: () => void;\n    onPlayModeChangedViaBind: (oldPlayMode: PlayMode, newPlayMode: PlayMode) => void;\n    disableKeyEvents: boolean;\n    jumpToSubtitle?: SubtitleModel;\n    rewindSubtitle?: SubtitleModel;\n}\n\nexport default function Player({\n    sources: { subtitleFiles, audioFile, audioFileUrl, videoFile, videoFileUrl },\n    subtitleReader,\n    settingsProvider,\n    playbackPreferences,\n    keyBinder,\n    extension,\n    videoFrameRef,\n    videoChannelRef,\n    drawerOpen,\n    appBarHidden,\n    videoPopOut,\n    tab,\n    availableTabs,\n    ankiDialogRequestToVideo,\n    ankiDialogRequested,\n    ankiDialogFinishedRequest,\n    onError,\n    onUnloadAudio,\n    onUnloadVideo,\n    onCopy,\n    onLoaded,\n    onTabSelected,\n    onAnkiDialogRequest,\n    onAppBarToggle,\n    onVideoPopOut,\n    onPlayModeChangedViaBind,\n    disableKeyEvents,\n    jumpToSubtitle,\n    rewindSubtitle,\n}: PlayerProps) {\n    const [playMode, setPlayMode] = useState<PlayMode>(PlayMode.normal);\n    const playModeRef = useRef<PlayMode>();\n    playModeRef.current = playMode;\n    const [subtitles, setSubtitles] = useState<DisplaySubtitleModel[]>();\n    const subtitleCollection = useMemo<SubtitleCollection<DisplaySubtitleModel>>(\n        () =>\n            new SubtitleCollection(subtitles ?? [], {\n                returnLastShown: true,\n                returnNextToShow: playMode === PlayMode.condensed,\n                showingCheckRadiusMs: 100,\n            }),\n        [subtitles, playMode]\n    );\n    const subtitlesRef = useRef<SubtitleModel[]>();\n    subtitlesRef.current = subtitles;\n    const playModeEnabled = subtitles && subtitles.length > 0 && Boolean(videoFileUrl || audioFileUrl);\n    const [loadingSubtitles, setLoadingSubtitles] = useState<boolean>(false);\n    const [playing, setPlaying] = useState<boolean>(false);\n    const [lastJumpToTopTimestamp, setLastJumpToTopTimestamp] = useState<number>(0);\n    const [offset, setOffset] = useState<number>(0);\n    const playingRef = useRef<boolean>();\n    playingRef.current = playing;\n    const [, updateState] = useState<any>();\n    const [audioTracks, setAudioTracks] = useState<AudioTrackModel[]>();\n    const [selectedAudioTrack, setSelectedAudioTrack] = useState<string>();\n    const [channelId, setChannelId] = useState<string>();\n    const [, setResumeOnFinishedAnkiDialogRequest] = useState<boolean>(false);\n    const [hideSubtitlePlayer, setHideSubtitlePlayer] = useState<boolean>(false);\n    const hideSubtitlePlayerRef = useRef<boolean>();\n    hideSubtitlePlayerRef.current = hideSubtitlePlayer;\n    const [disabledSubtitleTracks, setDisabledSubtitleTracks] = useState<{ [track: number]: boolean }>({});\n    const forceUpdate = useCallback(() => updateState({}), []);\n    const mousePositionRef = useRef<Point>({ x: 0, y: 0 });\n    const audioRef = useRef<HTMLAudioElement>(null);\n    const videoRef = useRef<MediaElement>();\n    const mediaAdapter = useMemo(() => {\n        if (audioFileUrl) {\n            return new MediaAdapter(audioRef);\n        } else if (videoFileUrl || tab) {\n            return new MediaAdapter(videoRef);\n        }\n\n        return new MediaAdapter({ current: null });\n    }, [audioFileUrl, videoFileUrl, tab]);\n    const clock = useMemo<Clock>(() => new Clock(), []);\n    const classes = useStyles({ appBarHidden });\n    const lengthRef = useRef<number>(0);\n    lengthRef.current = trackLength(audioRef, videoRef, subtitles, true);\n\n    const seek = useCallback(\n        async (time: number, clock: Clock, forwardToMedia: boolean) => {\n            clock.setTime(time);\n            forceUpdate();\n\n            if (forwardToMedia) {\n                await mediaAdapter.seek(time / 1000);\n            }\n        },\n        [forceUpdate, mediaAdapter]\n    );\n\n    const applyOffset = useCallback(\n        (offset: number, forwardToVideo: boolean) => {\n            setOffset(offset);\n            setSubtitles((subtitles) => {\n                if (!subtitles) {\n                    return;\n                }\n\n                const length = subtitles.length > 0 ? subtitles[subtitles.length - 1].end + offset : 0;\n\n                const newSubtitles = subtitles.map((s, i) => ({\n                    text: s.text,\n                    textImage: s.textImage,\n                    start: s.originalStart + offset,\n                    originalStart: s.originalStart,\n                    end: s.originalEnd + offset,\n                    originalEnd: s.originalEnd,\n                    displayTime: timeDurationDisplay(s.originalStart + offset, length),\n                    track: s.track,\n                    index: i,\n                }));\n\n                if (forwardToVideo) {\n                    if (videoRef.current instanceof VideoChannel) {\n                        videoRef.current.offset(offset);\n\n                        // Older versions of extension don't support the offset message\n                        if (tab !== undefined && extension.installed && lte(extension.version, '0.22.0')) {\n                            videoRef.current.subtitles(\n                                newSubtitles,\n                                subtitleFiles.map((f) => f.name)\n                            );\n                        }\n                    }\n                }\n\n                return newSubtitles;\n            });\n            playbackPreferences.offset = offset;\n        },\n        [subtitleFiles, extension, playbackPreferences, tab]\n    );\n\n    useEffect(() => {\n        let channel: VideoChannel | undefined = undefined;\n        let channelClosed = false;\n\n        async function init() {\n            if (videoRef.current instanceof VideoChannel) {\n                videoRef.current.close();\n            }\n            videoRef.current = undefined;\n            videoChannelRef.current = null;\n            clock.setTime(0);\n            clock.stop();\n            const offset = playbackPreferences.offset;\n            setOffset(offset);\n            setPlaying(false);\n            setAudioTracks(undefined);\n            setSelectedAudioTrack(undefined);\n            setPlayMode(PlayMode.normal);\n\n            if (audioRef.current) {\n                audioRef.current.currentTime = 0;\n                audioRef.current.pause();\n            }\n\n            let subtitles: DisplaySubtitleModel[] | undefined;\n\n            if (subtitleFiles.length > 0) {\n                setLoadingSubtitles(true);\n\n                try {\n                    const nodes = await subtitleReader.subtitles(subtitleFiles);\n                    const length = nodes.length > 0 ? nodes[nodes.length - 1].end + offset : 0;\n\n                    subtitles = nodes.map((s, i) => ({\n                        text: s.text,\n                        textImage: s.textImage,\n                        start: s.start + offset,\n                        originalStart: s.start,\n                        end: s.end + offset,\n                        originalEnd: s.end,\n                        displayTime: timeDurationDisplay(s.start + offset, length),\n                        track: s.track,\n                        index: i,\n                    }));\n\n                    setSubtitles(subtitles);\n                    setLastJumpToTopTimestamp(Date.now());\n                } catch (e) {\n                    if (e instanceof Error) {\n                        onError(e.message);\n                    } else {\n                        onError(String(e));\n                    }\n                } finally {\n                    setLoadingSubtitles(false);\n                }\n            } else {\n                subtitles = undefined;\n            }\n\n            if (audioFileUrl) {\n                await mediaAdapter.onReady();\n                forceUpdate();\n            } else if (videoFileUrl || tab) {\n                if (channelClosed) {\n                    return;\n                }\n\n                if (videoFileUrl) {\n                    const channelId = uuidv4();\n                    channel = new VideoChannel(new BroadcastChannelVideoProtocol(channelId));\n                    setChannelId(channelId);\n                } else if (tab) {\n                    channel = new VideoChannel(new ChromeTabVideoProtocol(tab.id, tab.src, extension));\n                    channel.init();\n                } else {\n                    // Not possible\n                    // But throw error so typescript recognizes channel as defined\n                    throw new Error('Unreachable code');\n                }\n\n                videoRef.current = channel;\n                videoChannelRef.current = channel;\n                let subscribed = false;\n\n                channel.onExit(() => videoFileUrl && onUnloadVideo(videoFileUrl));\n                channel.onPopOutToggle(() => onVideoPopOut());\n                channel.onHideSubtitlePlayerToggle(() => {\n                    setHideSubtitlePlayer((hidden) => {\n                        channel?.hideSubtitlePlayerToggle(!hidden);\n                        return !hidden;\n                    });\n                });\n                channel.onAppBarToggle(() => {\n                    onAppBarToggle();\n                });\n                channel.onReady((paused) => {\n                    lengthRef.current = trackLength(audioRef, videoRef, subtitlesRef.current);\n                    channel?.ready(lengthRef.current);\n\n                    if (subtitlesRef.current) {\n                        channel?.subtitleSettings(settingsProvider.subtitleSettings);\n                        channel?.subtitles(\n                            subtitlesRef.current,\n                            subtitleFiles.map((f) => f.name)\n                        );\n                    }\n\n                    channel?.ankiSettings(settingsProvider.ankiSettings);\n                    channel?.miscSettings(settingsProvider.miscSettings);\n                    channel?.playMode(playModeRef.current!);\n                    channel?.hideSubtitlePlayerToggle(hideSubtitlePlayerRef.current ?? false);\n\n                    if (channel?.audioTracks && channel?.audioTracks?.length > 1) {\n                        setAudioTracks(channel?.audioTracks);\n                        setSelectedAudioTrack(channel?.selectedAudioTrack);\n                    } else {\n                        setAudioTracks(undefined);\n                        setSelectedAudioTrack(undefined);\n                    }\n\n                    if (videoRef.current) {\n                        clock.setTime(videoRef.current.currentTime * 1000);\n                    }\n\n                    if (paused) {\n                        clock.stop();\n                    } else {\n                        clock.start();\n                    }\n\n                    setPlaying(!paused);\n\n                    if (!subscribed) {\n                        channel?.onPlay((forwardToMedia) => play(clock, mediaAdapter, forwardToMedia));\n                        channel?.onPause((forwardToMedia) => pause(clock, mediaAdapter, forwardToMedia));\n                        channel?.onOffset((offset) => applyOffset(Math.max(-lengthRef.current ?? 0, offset), false));\n                        channel?.onCopy(\n                            (\n                                subtitle,\n                                surroundingSubtitles,\n                                audio,\n                                image,\n                                url,\n                                postMineAction,\n                                fromVideo,\n                                preventDuplicate,\n                                id\n                            ) =>\n                                onCopy(\n                                    subtitle,\n                                    surroundingSubtitles,\n                                    audioFile,\n                                    videoFile,\n                                    subtitle ? subtitleFiles[subtitle.track] : undefined,\n                                    clock.time(lengthRef.current),\n                                    channel?.selectedAudioTrack,\n                                    audio,\n                                    image,\n                                    url,\n                                    postMineAction,\n                                    fromVideo,\n                                    preventDuplicate,\n                                    id\n                                )\n                        );\n                        channel?.onPlayMode((playMode) => {\n                            setPlayMode(playMode);\n                            channel?.playMode(playMode);\n                        });\n                        channel?.onCurrentTime(async (currentTime, forwardToMedia) => {\n                            if (playingRef.current) {\n                                clock.stop();\n                            }\n\n                            await seek(currentTime * 1000, clock, forwardToMedia);\n\n                            if (playingRef.current) {\n                                clock.start();\n                            }\n                        });\n                        channel?.onAudioTrackSelected(async (id) => {\n                            if (playingRef.current) {\n                                clock.stop();\n                            }\n\n                            await mediaAdapter.onReady();\n                            if (playingRef.current) {\n                                clock.start();\n                            }\n\n                            setSelectedAudioTrack(id);\n                        });\n                        channel?.onAnkiDialogRequest((forwardToVideo) => onAnkiDialogRequest(forwardToVideo));\n                        channel?.onToggleSubtitleTrackInList((track) =>\n                            setDisabledSubtitleTracks((tracks) => {\n                                const newTracks = { ...tracks };\n                                newTracks[track] = !tracks[track];\n                                return newTracks;\n                            })\n                        );\n\n                        subscribed = true;\n                    }\n                });\n            }\n        }\n\n        init().then(() => onLoaded());\n\n        return () => {\n            channel?.close();\n            channelClosed = true;\n        };\n    }, [\n        subtitleReader,\n        extension,\n        settingsProvider,\n        playbackPreferences,\n        clock,\n        mediaAdapter,\n        seek,\n        onLoaded,\n        onError,\n        onUnloadVideo,\n        onCopy,\n        onAnkiDialogRequest,\n        onAppBarToggle,\n        onVideoPopOut,\n        subtitleFiles,\n        audioFile,\n        audioFileUrl,\n        videoFile,\n        videoFileUrl,\n        tab,\n        forceUpdate,\n        videoFrameRef,\n        videoChannelRef,\n        applyOffset,\n    ]);\n\n    function play(clock: Clock, mediaAdapter: MediaAdapter, forwardToMedia: boolean) {\n        setPlaying(true);\n        clock.start();\n\n        if (forwardToMedia) {\n            mediaAdapter.play();\n        }\n    }\n\n    function pause(clock: Clock, mediaAdapter: MediaAdapter, forwardToMedia: boolean) {\n        setPlaying(false);\n        clock.stop();\n\n        if (forwardToMedia) {\n            mediaAdapter.pause();\n        }\n    }\n\n    useEffect(() => {\n        if (ankiDialogRequestToVideo && videoRef.current instanceof VideoChannel) {\n            videoRef.current.ankiDialogRequest();\n        }\n    }, [ankiDialogRequestToVideo]);\n\n    useEffect(() => {\n        if (ankiDialogFinishedRequest && ankiDialogFinishedRequest.timestamp > 0) {\n            if (videoRef.current instanceof VideoChannel) {\n                videoRef.current.finishedAnkiDialogRequest(ankiDialogFinishedRequest.resume);\n            }\n\n            setResumeOnFinishedAnkiDialogRequest((resumeOnFinishedAnkiDialogRequest) => {\n                if (resumeOnFinishedAnkiDialogRequest && ankiDialogFinishedRequest.resume) {\n                    play(clock, mediaAdapter, true);\n                }\n\n                return false;\n            });\n        }\n    }, [ankiDialogFinishedRequest, clock, mediaAdapter]);\n\n    useEffect(() => {\n        if (ankiDialogRequested && playingRef.current) {\n            pause(clock, mediaAdapter, true);\n            setResumeOnFinishedAnkiDialogRequest(true);\n        }\n    }, [ankiDialogRequested, clock, mediaAdapter]);\n\n    useEffect(() => {\n        if (playMode !== PlayMode.condensed) {\n            return;\n        }\n\n        if (!subtitles || subtitles.length === 0) {\n            return;\n        }\n\n        let seeking = false;\n        let expectedSeekTime = 1000;\n\n        const interval = setInterval(async () => {\n            const length = lengthRef.current;\n\n            if (!length) {\n                return;\n            }\n\n            const timestamp = clock.time(length);\n            const slice = subtitleCollection.subtitlesAt(timestamp);\n\n            if (slice.nextToShow && slice.nextToShow.length > 0) {\n                const nextSubtitle = slice.nextToShow[0];\n\n                if (nextSubtitle.start - timestamp < expectedSeekTime + 500) {\n                    return;\n                }\n\n                if (playingRef.current) {\n                    clock.stop();\n                }\n\n                if (!seeking) {\n                    seeking = true;\n                    const t0 = Date.now();\n                    await seek(nextSubtitle.start, clock, true);\n                    expectedSeekTime = Date.now() - t0;\n                    seeking = false;\n                }\n\n                if (playingRef.current) {\n                    clock.start();\n                }\n            }\n        }, 100);\n\n        return () => clearInterval(interval);\n    }, [subtitles, subtitleCollection, playMode, clock, seek]);\n\n    const handleOnStartedShowingSubtitle = useCallback(() => {\n        if (\n            playMode !== PlayMode.autoPause ||\n            settingsProvider.autoPausePreference !== AutoPausePreference.atStart ||\n            videoFileUrl // Let VideoPlayer do the auto-pausing\n        ) {\n            return;\n        }\n\n        pause(clock, mediaAdapter, true);\n    }, [playMode, clock, mediaAdapter, videoFileUrl, settingsProvider]);\n\n    const handleOnWillStopShowingSubtitle = useCallback(() => {\n        if (\n            playMode !== PlayMode.autoPause ||\n            settingsProvider.autoPausePreference !== AutoPausePreference.atEnd ||\n            videoFileUrl // Let VideoPlayer do the auto-pausing\n        ) {\n            return;\n        }\n\n        pause(clock, mediaAdapter, true);\n    }, [playMode, clock, mediaAdapter, videoFileUrl, settingsProvider]);\n\n    useEffect(() => {\n        if (videoPopOut && channelId && videoFileUrl) {\n            window.open(\n                process.env.PUBLIC_URL +\n                    '/?video=' +\n                    encodeURIComponent(videoFileUrl) +\n                    '&channel=' +\n                    channelId +\n                    '&popout=true',\n                'asbplayer-video-' + videoFileUrl,\n                'resizable,width=800,height=450'\n            );\n        }\n\n        setLastJumpToTopTimestamp(Date.now());\n    }, [videoPopOut, channelId, videoFileUrl, videoFrameRef]);\n\n    const handlePlay = useCallback(() => play(clock, mediaAdapter, true), [clock, mediaAdapter]);\n    const handlePause = useCallback(() => pause(clock, mediaAdapter, true), [clock, mediaAdapter]);\n    const handleSeek = useCallback(\n        async (progress: number) => {\n            if (!lengthRef.current) {\n                return;\n            }\n\n            if (playingRef.current) {\n                clock.stop();\n            }\n\n            await seek(progress * lengthRef.current, clock, true);\n\n            if (playingRef.current) {\n                clock.start();\n            }\n        },\n        [clock, seek]\n    );\n\n    const handleSeekToSubtitle = useCallback(\n        async (time: number, shouldPlay: boolean) => {\n            if (!shouldPlay) {\n                pause(clock, mediaAdapter, true);\n            }\n\n            if (playingRef.current) {\n                clock.stop();\n            }\n\n            await seek(time, clock, true);\n\n            if (shouldPlay && !playingRef.current) {\n                // play method will start the clock again\n                play(clock, mediaAdapter, true);\n            }\n        },\n        [clock, seek, mediaAdapter]\n    );\n\n    const handleCopyFromSubtitlePlayer = useCallback(\n        (\n            subtitle: SubtitleModel,\n            surroundingSubtitles: SubtitleModel[],\n            postMineAction: PostMineAction,\n            preventDuplicate: boolean\n        ) => {\n            onCopy(\n                subtitle,\n                surroundingSubtitles,\n                audioFile,\n                videoFile,\n                subtitleFiles[subtitle.track],\n                clock.time(lengthRef.current),\n                selectedAudioTrack,\n                undefined,\n                undefined,\n                undefined,\n                postMineAction,\n                false,\n                preventDuplicate,\n                undefined\n            );\n        },\n        [clock, onCopy, audioFile, videoFile, subtitleFiles, selectedAudioTrack]\n    );\n\n    const handleMouseMove = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n        mousePositionRef.current.x = e.screenX;\n        mousePositionRef.current.y = e.screenY;\n    }, []);\n\n    const handleAudioTrackSelected = useCallback(\n        async (id: string) => {\n            if (videoRef.current instanceof VideoChannel) {\n                videoRef.current.audioTrackSelected(id);\n            }\n\n            pause(clock, mediaAdapter, true);\n\n            await seek(0, clock, true);\n\n            if (playingRef.current) {\n                play(clock, mediaAdapter, true);\n            }\n        },\n        [clock, mediaAdapter, seek]\n    );\n\n    const handleOffsetChange = useCallback(\n        (offset: number) => {\n            applyOffset(Math.max(-lengthRef.current ?? 0, offset), true);\n        },\n        [applyOffset]\n    );\n\n    const handleVolumeChange = useCallback((volume: number) => {\n        if (audioRef.current instanceof HTMLMediaElement) {\n            audioRef.current.volume = volume;\n        }\n    }, []);\n\n    const handlePlayMode = useCallback((playMode: PlayMode) => setPlayMode(playMode), []);\n\n    const handleToggleSubtitleTrack = useCallback(\n        (track: number) =>\n            setDisabledSubtitleTracks((tracks) => {\n                const newTracks = { ...tracks };\n                newTracks[track] = !tracks[track];\n                return newTracks;\n            }),\n        []\n    );\n\n    useEffect(() => {\n        if (tab) {\n            return;\n        }\n\n        const interval = setInterval(async () => {\n            const length = lengthRef.current;\n            const progress = clock.progress(length);\n\n            if (progress >= 1) {\n                pause(clock, mediaAdapter, true);\n                await seek(0, clock, true);\n                setLastJumpToTopTimestamp(Date.now());\n            }\n        }, 1000);\n\n        return () => clearInterval(interval);\n    }, [clock, subtitles, mediaAdapter, seek, tab]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindPlay(\n            (event) => {\n                event.preventDefault();\n\n                if (playing) {\n                    pause(clock, mediaAdapter, true);\n                } else {\n                    play(clock, mediaAdapter, true);\n                }\n            },\n            () => disableKeyEvents\n        );\n\n        return () => unbind();\n    }, [keyBinder, playing, clock, mediaAdapter, disableKeyEvents]);\n\n    const togglePlayMode = useCallback(\n        (event: KeyboardEvent, togglePlayMode: PlayMode) => {\n            if (!playModeEnabled) {\n                return;\n            }\n\n            event.preventDefault();\n            const newPlayMode = playMode === togglePlayMode ? PlayMode.normal : togglePlayMode;\n            setPlayMode(newPlayMode);\n            onPlayModeChangedViaBind(playMode, newPlayMode);\n\n            if (videoRef.current instanceof VideoChannel) {\n                videoRef.current.playMode(newPlayMode);\n            }\n        },\n        [playMode, playModeEnabled, onPlayModeChangedViaBind]\n    );\n\n    useEffect(() => {\n        return keyBinder.bindAutoPause(\n            (event) => togglePlayMode(event, PlayMode.autoPause),\n            () => disableKeyEvents\n        );\n    }, [togglePlayMode, keyBinder, disableKeyEvents]);\n\n    useEffect(() => {\n        return keyBinder.bindCondensedPlayback(\n            (event) => togglePlayMode(event, PlayMode.condensed),\n            () => disableKeyEvents\n        );\n    }, [togglePlayMode, keyBinder, disableKeyEvents]);\n\n    useEffect(() => {\n        if ((audioFile || videoFile) && (!subtitles || subtitles.length === 0)) {\n            const unbindCopy = keyBinder.bindCopy(\n                (event, subtitle) => {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    const surroundingSubtitles = mockSurroundingSubtitles(subtitle, lengthRef.current, 5000);\n                    onCopy(\n                        subtitle,\n                        surroundingSubtitles,\n                        audioFile,\n                        videoFile,\n                        undefined,\n                        clock.time(lengthRef.current),\n                        selectedAudioTrack,\n                        undefined,\n                        undefined,\n                        undefined,\n                        undefined,\n                        undefined,\n                        undefined,\n                        undefined\n                    );\n                },\n                () => disableKeyEvents,\n                () => {\n                    if (!lengthRef.current) {\n                        return undefined;\n                    }\n\n                    const timestamp = clock.time(lengthRef.current);\n                    const end = Math.min(timestamp + 5000, lengthRef.current);\n\n                    return {\n                        text: '',\n                        start: timestamp,\n                        originalStart: timestamp,\n                        end: end,\n                        originalEnd: end,\n                        track: 0,\n                    };\n                }\n            );\n\n            const unbindAnkiExport = keyBinder.bindAnkiExport(\n                (event) => {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    const timestamp = clock.time(lengthRef.current);\n                    const end = Math.min(timestamp + 5000, lengthRef.current);\n                    const subtitle = {\n                        text: '',\n                        start: timestamp,\n                        originalStart: timestamp,\n                        end: end,\n                        originalEnd: end,\n                        track: 0,\n                    };\n                    const surroundingSubtitles = mockSurroundingSubtitles(subtitle, lengthRef.current, 5000);\n                    onCopy(\n                        subtitle,\n                        surroundingSubtitles,\n                        audioFile,\n                        videoFile,\n                        undefined,\n                        timestamp,\n                        selectedAudioTrack,\n                        undefined,\n                        undefined,\n                        undefined,\n                        PostMineAction.showAnkiDialog,\n                        false,\n                        undefined,\n                        undefined\n                    );\n                },\n                () => false\n            );\n\n            return () => {\n                unbindCopy();\n                unbindAnkiExport();\n            };\n        }\n    }, [\n        keyBinder,\n        audioFile,\n        videoFile,\n        subtitles,\n        clock,\n        selectedAudioTrack,\n        disableKeyEvents,\n        onCopy,\n        onAnkiDialogRequest,\n    ]);\n\n    useEffect(() => {\n        if (videoRef.current instanceof VideoChannel) {\n            videoRef.current.appBarToggle(appBarHidden);\n        }\n    }, [appBarHidden]);\n\n    useEffect(() => {\n        if (!rewindSubtitle) {\n            return;\n        }\n\n        if (playingRef.current) {\n            clock.stop();\n        }\n\n        handleSeekToSubtitle(rewindSubtitle.start, false);\n    }, [clock, rewindSubtitle, handleSeekToSubtitle]);\n\n    const length = lengthRef.current;\n    const loaded = audioFileUrl || videoFileUrl || subtitles;\n    const videoInWindow = Boolean(loaded && videoFileUrl && !videoPopOut);\n\n    return (\n        <div onMouseMove={handleMouseMove} className={classes.root}>\n            <Grid container direction=\"row\" wrap=\"nowrap\" className={classes.container}>\n                {videoInWindow && (\n                    <Grid item style={{ flexGrow: 1, minWidth: 600 }}>\n                        <iframe\n                            ref={videoFrameRef}\n                            className={classes.videoFrame}\n                            src={\n                                process.env.PUBLIC_URL +\n                                '/?video=' +\n                                encodeURIComponent(videoFileUrl!) +\n                                '&channel=' +\n                                channelId +\n                                '&popout=false'\n                            }\n                            title=\"asbplayer\"\n                        />\n                    </Grid>\n                )}\n                {(!videoInWindow || (subtitles && subtitles?.length > 0)) && (\n                    <Grid\n                        item\n                        style={{\n                            flexGrow: videoInWindow ? 0 : 1,\n                            width: videoInWindow && hideSubtitlePlayer ? 0 : 'auto',\n                        }}\n                    >\n                        {loaded && !(videoFileUrl && !videoPopOut) && (\n                            <Controls\n                                mousePositionRef={mousePositionRef}\n                                playing={playing}\n                                clock={clock}\n                                length={length}\n                                displayLength={trackLength(audioRef, videoRef, subtitles, false)}\n                                audioTracks={audioTracks}\n                                selectedAudioTrack={selectedAudioTrack}\n                                tabs={(!videoFileUrl && !audioFileUrl && availableTabs) || undefined}\n                                selectedTab={tab}\n                                audioFile={audioFile?.name}\n                                videoFile={videoFile?.name}\n                                offsetEnabled={true}\n                                offset={offset}\n                                volumeEnabled={Boolean(audioFileUrl)}\n                                playModeEnabled={playModeEnabled}\n                                playMode={playMode}\n                                onPlay={handlePlay}\n                                onPause={handlePause}\n                                onSeek={handleSeek}\n                                onAudioTrackSelected={handleAudioTrackSelected}\n                                onTabSelected={onTabSelected}\n                                onUnloadAudio={() => audioFileUrl && onUnloadAudio(audioFileUrl)}\n                                onUnloadVideo={() => videoFileUrl && onUnloadVideo(videoFileUrl)}\n                                onOffsetChange={handleOffsetChange}\n                                onVolumeChange={handleVolumeChange}\n                                onPlayMode={handlePlayMode}\n                                disableKeyEvents={disableKeyEvents}\n                                playbackPreferences={playbackPreferences}\n                                showOnMouseMovement={true}\n                            />\n                        )}\n                        <SubtitlePlayer\n                            playing={playing}\n                            subtitles={subtitles}\n                            subtitleCollection={subtitleCollection}\n                            clock={clock}\n                            length={length}\n                            jumpToSubtitle={jumpToSubtitle}\n                            drawerOpen={drawerOpen}\n                            appBarHidden={appBarHidden}\n                            compressed={Boolean(videoFileUrl && !videoPopOut)}\n                            copyButtonEnabled={tab === undefined}\n                            loading={loadingSubtitles}\n                            displayHelp={audioFile?.name || (videoPopOut && videoFile?.name) || undefined}\n                            disableKeyEvents={disableKeyEvents}\n                            lastJumpToTopTimestamp={lastJumpToTopTimestamp}\n                            hidden={videoInWindow && hideSubtitlePlayer}\n                            disabledSubtitleTracks={disabledSubtitleTracks}\n                            onSeek={handleSeekToSubtitle}\n                            onCopy={handleCopyFromSubtitlePlayer}\n                            onOffsetChange={handleOffsetChange}\n                            onToggleSubtitleTrack={handleToggleSubtitleTrack}\n                            onStartedShowing={handleOnStartedShowingSubtitle}\n                            onWillStopShowing={handleOnWillStopShowingSubtitle}\n                            settingsProvider={settingsProvider}\n                            keyBinder={keyBinder}\n                        />\n                    </Grid>\n                )}\n            </Grid>\n            <audio ref={audioRef} src={audioFileUrl} />\n        </div>\n    );\n}\n","import { useState, useEffect } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\ninterface Props {\n    open: boolean;\n    onProceed: (fieldName: string) => void;\n    onCancel: () => void;\n    existingCustomFieldNames: string[];\n}\n\nexport default function CustomFieldDialog({ open, onProceed, onCancel, existingCustomFieldNames }: Props) {\n    const [fieldName, setFieldName] = useState<string>('');\n\n    useEffect(() => {\n        setFieldName('');\n    }, [open]);\n\n    const fieldExists = [\n        ...existingCustomFieldNames,\n        'Sentence',\n        'Word',\n        'Definition',\n        'Source',\n        'Image',\n        'Audio',\n    ].includes(fieldName);\n\n    return (\n        <Dialog\n            open={open}\n            disableEnforceFocus\n            fullWidth\n            maxWidth=\"xs\"\n            onClose={onCancel}\n        >\n            <DialogTitle>New Custom Field</DialogTitle>\n            <DialogContent>\n                <form>\n                    <TextField\n                        error={fieldExists}\n                        helperText={fieldExists && `Field ${fieldName} already exists`}\n                        variant=\"filled\"\n                        fullWidth\n                        label=\"Field Name\"\n                        value={fieldName}\n                        color=\"secondary\"\n                        onChange={(e) => setFieldName(e.target.value)}\n                    />\n                </form>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={() => onCancel()}>Cancel</Button>\n                <Button disabled={fieldExists || fieldName.trim() === ''} onClick={() => onProceed(fieldName.trim())}>\n                    Create\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n","import React, { useCallback, useState, useEffect, useMemo, ChangeEvent, ReactNode, useRef } from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport { computeStyles } from '../services/Util';\nimport Button from '@material-ui/core/Button';\nimport CustomFieldDialog from './CustomFieldDialog';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport EditIcon from '@material-ui/icons/Edit';\nimport InfoIcon from '@material-ui/icons/Info';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Grid from '@material-ui/core/Grid';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Link from '@material-ui/core/Link';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Radio from '@material-ui/core/Radio';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport Select from '@material-ui/core/Select';\nimport TextField from '@material-ui/core/TextField';\nimport { Theme } from '@material-ui/core/styles';\nimport { Anki, AsbplayerSettings, AutoPausePreference, KeyBindSet, KeyBindName } from '@project/common';\nimport { TagsTextField } from '@project/common/components';\nimport hotkeys from 'hotkeys-js';\nimport Typography from '@material-ui/core/Typography';\nimport ChromeExtension from '../services/ChromeExtension';\nimport { isMacOs } from 'react-device-detect';\nimport Switch from '@material-ui/core/Switch';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nconst useStyles = makeStyles<Theme>((theme) => ({\n    root: {\n        '& .MuiTextField-root': {\n            marginTop: theme.spacing(1),\n            marginBottom: theme.spacing(1),\n        },\n    },\n    subtitleSetting: {\n        '& .MuiTextField-root': {\n            marginTop: theme.spacing(1),\n            marginBottom: theme.spacing(1),\n        },\n    },\n    subtitlePreview: {\n        backgroundImage: `linear-gradient(45deg, ${theme.palette.action.disabledBackground} 25%, transparent 25%), linear-gradient(-45deg, ${theme.palette.action.disabledBackground} 25%, transparent 25%), linear-gradient(45deg, transparent 75%, ${theme.palette.action.disabledBackground} 75%), linear-gradient(-45deg, transparent 75%,${theme.palette.action.disabledBackground} 75%)`,\n        backgroundSize: '20px 20px',\n        backgroundPosition: '0 0, 0 10px, 10px -10px, -10px 0px',\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n        maxWidth: '100%',\n        padding: 10,\n    },\n    subtitlePreviewInput: {\n        border: 'none',\n        width: '100%',\n        textAlign: 'center',\n        backgroundColor: 'rgba(0,0,0,0)',\n        '&:focus': {\n            outline: 'none',\n        },\n    },\n    addFieldButton: {\n        width: '100%',\n    },\n    switchLabel: {\n        justifyContent: 'space-between',\n        marginLeft: 0,\n    },\n}));\n\nconst useSelectableSettingStyles = makeStyles<Theme>((theme) => ({\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n    },\n    root: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'end',\n        alignItems: 'flex-end',\n    },\n}));\n\ninterface SelectableSettingProps {\n    label: string;\n    value: string;\n    selections?: string[];\n    removable?: boolean;\n    onChange: (event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => void;\n    onSelectionChange: (event: ChangeEvent<{ name?: string | undefined; value: unknown }>, child: ReactNode) => void;\n    onRemoval?: () => void;\n}\n\nfunction SelectableSetting({\n    label,\n    value,\n    selections,\n    removable,\n    onChange,\n    onSelectionChange,\n    onRemoval,\n}: SelectableSettingProps) {\n    const classes = useSelectableSettingStyles();\n\n    return (\n        <div className={classes.root}>\n            <TextField\n                label={label}\n                value={value}\n                onChange={onChange}\n                fullWidth\n                color=\"secondary\"\n                InputProps={{\n                    endAdornment: removable && (\n                        <InputAdornment position=\"end\">\n                            <IconButton onClick={(e) => onRemoval?.()}>\n                                <DeleteIcon />\n                            </IconButton>\n                        </InputAdornment>\n                    ),\n                }}\n            />\n            <FormControl className={classes.formControl}>\n                <InputLabel></InputLabel>\n                <Select value={value} disabled={!selections} color=\"secondary\" onChange={onSelectionChange}>\n                    {selections &&\n                        selections.map((s) => (\n                            <MenuItem key={s} value={s}>\n                                {s}\n                            </MenuItem>\n                        ))}\n                </Select>\n            </FormControl>\n        </div>\n    );\n}\n\ninterface KeyBindProperties {\n    label: string;\n    extensionOverridden: boolean;\n}\n\nconst keyBindProperties: { [key in KeyBindName]: KeyBindProperties } = {\n    copySubtitle: { label: 'Mine current subtitle', extensionOverridden: true },\n    ankiExport: { label: 'Mine current subtitle and open Anki dialog', extensionOverridden: true },\n    updateLastCard: {\n        label: 'Update last-created Anki card with asbplayer-captured screenshot, audio, etc.',\n        extensionOverridden: true,\n    },\n    togglePlay: { label: 'Play/pause', extensionOverridden: false },\n    toggleAutoPause: { label: 'Toggle auto-pause', extensionOverridden: false },\n    toggleCondensedPlayback: { label: 'Toggle condensed playback', extensionOverridden: false },\n    toggleSubtitles: { label: 'Toggle subtitles', extensionOverridden: false },\n    toggleVideoSubtitleTrack1: { label: 'Toggle subtitle track 1 in video', extensionOverridden: false },\n    toggleVideoSubtitleTrack2: { label: 'Toggle subtitle track 2 in video', extensionOverridden: false },\n    toggleAsbplayerSubtitleTrack1: { label: 'Toggle subtitle track 1 in asbplayer', extensionOverridden: false },\n    toggleAsbplayerSubtitleTrack2: { label: 'Toggle subtitle track 2 in asbplayer', extensionOverridden: false },\n    seekBackward: { label: 'Seek backward 10 seconds', extensionOverridden: false },\n    seekForward: { label: 'Seek forward 10 seconds', extensionOverridden: false },\n    seekToPreviousSubtitle: { label: 'Seek to previous subtitle', extensionOverridden: false },\n    seekToNextSubtitle: { label: 'Seek to next subtitle', extensionOverridden: false },\n    seekToBeginningOfCurrentSubtitle: { label: 'Seek to beginning of current subtitle', extensionOverridden: false },\n    adjustOffsetToPreviousSubtitle: {\n        label: 'Adjust subtitle offset so that previous subtitle is at current timestamp',\n        extensionOverridden: false,\n    },\n    adjustOffsetToNextSubtitle: {\n        label: 'Adjust subtitle offset so that next subtitle is at current timestamp',\n        extensionOverridden: false,\n    },\n    increaseOffset: { label: 'Adjust subtitle offset by +100ms', extensionOverridden: false },\n    decreaseOffset: { label: 'Adjust subtitle offset by -100ms', extensionOverridden: false },\n};\n\n// hotkeys only returns strings for a Mac while requiring the OS-specific keys for the actual binds\nconst modifierKeyReplacements: { [key: string]: string } = isMacOs\n    ? {}\n    : {\n          '⌃': 'ctrl',\n          '⇧': 'shift',\n          '⌥': 'alt',\n      };\n\nconst modifierKeys = ['⌃', '⇧', '⌥', 'ctrl', 'shift', 'alt', 'option', 'control', 'command', '⌘'];\n\nconst useKeyBindFieldStyles = makeStyles<Theme>((theme) => ({\n    container: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n    },\n    labelItem: {},\n}));\n\ninterface KeyBindFieldProps {\n    label: string;\n    keys: string;\n    extensionOverridden: boolean;\n    onKeysChange: (keys: string) => void;\n    onOpenExtensionShortcuts: () => void;\n}\n\nfunction KeyBindField({ label, keys, extensionOverridden, onKeysChange, onOpenExtensionShortcuts }: KeyBindFieldProps) {\n    const classes = useKeyBindFieldStyles();\n    const [currentKeyString, setCurrentKeyString] = useState<string>(keys);\n    const currentKeyStringRef = useRef<string>();\n    currentKeyStringRef.current = currentKeyString;\n    const onKeysChangeRef = useRef<(keys: string) => void>();\n    onKeysChangeRef.current = onKeysChange;\n    const [editing, setEditing] = useState<boolean>(false);\n\n    useEffect(() => setCurrentKeyString(keys), [keys]);\n\n    const handleEditKeyBinding = useCallback(\n        (event: React.MouseEvent) => {\n            if (event.nativeEvent.detail === 0) {\n                return;\n            }\n\n            if (extensionOverridden) {\n                onOpenExtensionShortcuts();\n                return;\n            }\n\n            setCurrentKeyString('');\n            setEditing(true);\n        },\n        [onOpenExtensionShortcuts, extensionOverridden]\n    );\n\n    const ref = useRef<HTMLButtonElement>(null);\n\n    useEffect(() => {\n        if (!editing) {\n            return;\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (event.type === 'keydown') {\n                // The ts declaration is missing getPressedKeyString()\n                // @ts-ignore\n                const pressed = hotkeys.getPressedKeyString() as string[];\n                setCurrentKeyString(\n                    pressed\n                        .map((key) => {\n                            return modifierKeyReplacements[key] ?? key;\n                        })\n                        .sort((a, b) => {\n                            const isAModifier = modifierKeys.includes(a);\n                            const isBModifier = modifierKeys.includes(b);\n\n                            if (isAModifier && !isBModifier) {\n                                return -1;\n                            }\n\n                            if (!isAModifier && isBModifier) {\n                                return 1;\n                            }\n\n                            return 0;\n                        })\n                        .join('+')\n                );\n            } else if (event.type === 'keyup') {\n                setEditing(false);\n\n                // Need to use refs because hotkeys returns the wrong keys\n                // if the handler is bound/unbound.\n                if (currentKeyStringRef.current) {\n                    onKeysChangeRef.current!(currentKeyStringRef.current);\n                }\n            }\n        };\n\n        hotkeys('*', { keyup: true }, handler);\n        return () => hotkeys.unbind('*', handler);\n    }, [editing]);\n\n    useEffect(() => {\n        const handler = (event: MouseEvent) => {\n            if (editing && !ref.current?.contains(event.target as Node)) {\n                setEditing(false);\n                setCurrentKeyString('');\n                onKeysChange('');\n            }\n        };\n        window.document.addEventListener('click', handler);\n        return () => window.document.removeEventListener('click', handler);\n    }, [editing, onKeysChange]);\n\n    let placeholder: string;\n\n    if (editing) {\n        placeholder = 'Recording';\n    } else if (extensionOverridden) {\n        placeholder = 'Overridden';\n    } else {\n        placeholder = 'Unbound';\n    }\n\n    return (\n        <Grid container className={classes.container} wrap={'nowrap'} spacing={1}>\n            <Grid item className={classes.labelItem} xs={6}>\n                <Typography>{label}</Typography>\n            </Grid>\n            <Grid item xs={6}>\n                <TextField\n                    placeholder={placeholder}\n                    size=\"small\"\n                    contentEditable={false}\n                    disabled={extensionOverridden}\n                    helperText={extensionOverridden ? 'Extension shortcut' : undefined}\n                    value={currentKeyString}\n                    color=\"secondary\"\n                    InputProps={{\n                        endAdornment: (\n                            <InputAdornment position=\"end\">\n                                <IconButton ref={ref} onClick={handleEditKeyBinding}>\n                                    <EditIcon />\n                                </IconButton>\n                            </InputAdornment>\n                        ),\n                    }}\n                />\n            </Grid>\n        </Grid>\n    );\n}\n\ninterface Props {\n    anki: Anki;\n    extension: ChromeExtension;\n    open: boolean;\n    settings: AsbplayerSettings;\n    scrollToId?: string;\n    onClose: (settings: AsbplayerSettings) => void;\n}\n\nexport default function SettingsDialog({ anki, extension, open, settings, scrollToId, onClose }: Props) {\n    const classes = useStyles();\n    const [ankiConnectUrl, setAnkiConnectUrl] = useState<string>(settings.ankiConnectUrl);\n    const [ankiConnectUrlError, setAnkiConnectUrlError] = useState<string>();\n    const [ankiConnectUrlChangeTimestamp, setAnkiConnectUrlChangeTimestamp] = useState<number>(0);\n    const [deck, setDeck] = useState<string>(settings.deck || '');\n    const [deckNames, setDeckNames] = useState<string[]>();\n    const [noteType, setNoteType] = useState<string>(settings.noteType || '');\n    const [modelNames, setModelNames] = useState<string[]>();\n    const [sentenceField, setSentenceField] = useState<string>(settings.sentenceField || '');\n    const [definitionField, setDefinitionField] = useState<string>(settings.definitionField || '');\n    const [audioField, setAudioField] = useState<string>(settings.audioField || '');\n    const [imageField, setImageField] = useState<string>(settings.imageField || '');\n    const [wordField, setWordField] = useState<string>(settings.wordField || '');\n    const [sourceField, setSourceField] = useState<string>(settings.sourceField || '');\n    const [urlField, setUrlField] = useState<string>(settings.urlField || '');\n    const [customFields, setCustomFields] = useState<{ [key: string]: string }>(settings.customAnkiFields);\n    const [tags, setTags] = useState<string[]>(settings.tags);\n    const [preferMp3, setPreferMp3] = useState<boolean>(settings.preferMp3);\n    const [fieldNames, setFieldNames] = useState<string[]>();\n    const [customFieldDialogOpen, setCustomFieldDialogOpen] = useState<boolean>(false);\n    const [audioPaddingStart, setAudioPaddingStart] = useState<number>(settings.audioPaddingStart);\n    const [audioPaddingEnd, setAudioPaddingEnd] = useState<number>(settings.audioPaddingEnd);\n    const [maxImageWidth, setMaxImageWidth] = useState<number>(settings.maxImageWidth);\n    const [maxImageHeight, setMaxImageHeight] = useState<number>(settings.maxImageHeight);\n    const [surroundingSubtitlesCountRadius, setSurroundingSubtitlesCountRadius] = useState<number>(\n        settings.surroundingSubtitlesCountRadius\n    );\n    const [surroundingSubtitlesTimeRadius, setSurroundingSubtitlesTimeRadius] = useState<number>(\n        settings.surroundingSubtitlesTimeRadius\n    );\n    const [subtitleColor, setSubtitleColor] = useState<string>(settings.subtitleColor);\n    const [subtitleSize, setSubtitleSize] = useState<number>(settings.subtitleSize);\n    const [subtitleOutlineColor, setSubtitleOutlineColor] = useState<string>(settings.subtitleOutlineColor);\n    const [subtitleOutlineThickness, setSubtitleOutlineThickness] = useState<number>(settings.subtitleOutlineThickness);\n    const [subtitleBackgroundColor, setSubtitleBackgroundColor] = useState<string>(settings.subtitleBackgroundColor);\n    const [subtitleBackgroundOpacity, setSubtitleBackgroundOpacity] = useState<number>(\n        settings.subtitleBackgroundOpacity\n    );\n    const [subtitleFontFamily, setSubtitleFontFamily] = useState<string>(settings.subtitleFontFamily);\n    const [imageBasedSubtitleScaleFactor, setImageBasedSubtitleScaleFactor] = useState<number>(\n        settings.imageBasedSubtitleScaleFactor\n    );\n    const [subtitlePreview, setSubtitlePreview] = useState<string>(settings.subtitlePreview);\n    const [themeType, setThemeType] = useState<'dark' | 'light'>(settings.themeType);\n    const [copyToClipboardOnMine, setCopyToClipboardOnMine] = useState<boolean>(settings.copyToClipboardOnMine);\n    const [autoPausePreference, setAutoPausePreference] = useState<AutoPausePreference>(settings.autoPausePreference);\n    const [keyBindSet, setKeyBindSet] = useState<KeyBindSet>(settings.keyBindSet);\n    const [rememberSubtitleOffset, setRememberSubtitleOffset] = useState<boolean>(settings.rememberSubtitleOffset);\n\n    const handleAnkiConnectUrlChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n        setAnkiConnectUrl(e.target.value);\n        setAnkiConnectUrlChangeTimestamp(Date.now());\n    }, []);\n\n    const handleRetryAnkiConnectUrl = useCallback(\n        (e: React.MouseEvent<HTMLButtonElement>) => setAnkiConnectUrlChangeTimestamp(Date.now()),\n        []\n    );\n    const handleDeckChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setDeck(e.target.value),\n        []\n    );\n    const handleDeckSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setDeck(e.target.value as string),\n        []\n    );\n    const handleNoteTypeChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setNoteType(e.target.value),\n        []\n    );\n    const handleNoteTypeSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setNoteType(e.target.value as string),\n        []\n    );\n    const handleSentenceFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSentenceField(e.target.value),\n        []\n    );\n    const handleSentenceFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setSentenceField(e.target.value as string),\n        []\n    );\n    const handleDefinitionFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setDefinitionField(e.target.value),\n        []\n    );\n    const handleDefinitionFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setDefinitionField(e.target.value as string),\n        []\n    );\n    const handleAudioFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setAudioField(e.target.value),\n        []\n    );\n    const handleAudioFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setAudioField(e.target.value as string),\n        []\n    );\n    const handleImageFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setImageField(e.target.value),\n        []\n    );\n    const handleImageFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setImageField(e.target.value as string),\n        []\n    );\n    const handleWordFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setWordField(e.target.value),\n        []\n    );\n    const handleWordFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setWordField(e.target.value as string),\n        []\n    );\n    const handleSourceFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSourceField(e.target.value),\n        []\n    );\n    const handleSourceFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setSourceField(e.target.value as string),\n        []\n    );\n    const handleUrlFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setUrlField(e.target.value),\n        []\n    );\n    const handleUrlFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setUrlField(e.target.value as string),\n        []\n    );\n    const handleAudioPaddingStart = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setAudioPaddingStart(Number(e.target.value)),\n        []\n    );\n    const handleAudioPaddingEnd = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setAudioPaddingEnd(Number(e.target.value)),\n        []\n    );\n    const handleMaxImageWidth = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setMaxImageWidth(Number(e.target.value)),\n        []\n    );\n    const handleMaxImageHeight = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setMaxImageHeight(Number(e.target.value)),\n        []\n    );\n    const handleSurroundingSubtitlesCountRadius = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) =>\n            setSurroundingSubtitlesCountRadius(Number(e.target.value)),\n        []\n    );\n    const handleSurroundingSubtitlesTimeRadius = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) =>\n            setSurroundingSubtitlesTimeRadius(Number(e.target.value)),\n        []\n    );\n    const handleSubtitleColorChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleColor(e.target.value),\n        []\n    );\n    const handleSubtitleSizeChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleSize(Number(e.target.value)),\n        []\n    );\n    const handleSubtitleOutlineColorChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleOutlineColor(e.target.value),\n        []\n    );\n    const handleSubtitleOutlineThicknessChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleOutlineThickness(Number(e.target.value)),\n        []\n    );\n    const handleSubtitleBackgroundColorChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleBackgroundColor(e.target.value),\n        []\n    );\n    const handleSubtitleBackgroundOpacityChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) =>\n            setSubtitleBackgroundOpacity(Number(e.target.value)),\n        []\n    );\n    const handleSubtitleFontFamilyChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleFontFamily(e.target.value),\n        []\n    );\n    const handleSubtitlePreviewChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitlePreview(e.target.value),\n        []\n    );\n    const handleImageBasedSubtitleScaleFactorChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) =>\n            setImageBasedSubtitleScaleFactor(Number(e.target.value)),\n        []\n    );\n    const handleAddCustomField = useCallback((customFieldName: string) => {\n        setCustomFields((oldCustomFields: { [key: string]: string }) => {\n            const newCustomFields: { [key: string]: string } = {};\n            Object.assign(newCustomFields, oldCustomFields);\n            newCustomFields[customFieldName] = '';\n            return newCustomFields;\n        });\n        setCustomFieldDialogOpen(false);\n    }, []);\n    const handleCustomFieldChange = useCallback((customFieldName: string, value: string) => {\n        setCustomFields((oldCustomFields: { [key: string]: string }) => {\n            const newCustomFields: { [key: string]: string } = {};\n            Object.assign(newCustomFields, oldCustomFields);\n            newCustomFields[customFieldName] = value;\n            return newCustomFields;\n        });\n    }, []);\n    const handleCustomFieldRemoval = useCallback(\n        (customFieldName: string) =>\n            setCustomFields((oldCustomFields: { [key: string]: string }) => {\n                const newCustomFields: { [key: string]: string } = {};\n                Object.assign(newCustomFields, oldCustomFields);\n                delete newCustomFields[customFieldName];\n                return newCustomFields;\n            }),\n        []\n    );\n    const handleTagsChange = useCallback((newTags: string[]) => {\n        setTags(newTags);\n    }, []);\n    const handlePreferMp3Change = useCallback((e: ChangeEvent<HTMLInputElement>) => setPreferMp3(e.target.checked), []);\n    const handleThemeTypeChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        if (e.target.value !== 'dark' && e.target.value !== 'light') {\n            throw new Error(`Invalid theme type ${e.target.value}`);\n        }\n\n        setThemeType(e.target.value);\n    }, []);\n    const handleCopyToClipboardOnMine = useCallback(\n        (e: ChangeEvent<HTMLInputElement>) => setCopyToClipboardOnMine(e.target.checked),\n        []\n    );\n    const handleAutoPausePreferenceChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        setAutoPausePreference(Number(e.target.value) as AutoPausePreference);\n    }, []);\n    const handleKeysChange = useCallback((keys: string, keyBindName: KeyBindName) => {\n        setKeyBindSet((keyBindSet) => {\n            const newKeyBindSet = { ...keyBindSet };\n            newKeyBindSet[keyBindName] = { keys };\n            return newKeyBindSet;\n        });\n    }, []);\n    const handleRememberSubtitleOffsetChange = useCallback(\n        (e: ChangeEvent<HTMLInputElement>) => setRememberSubtitleOffset(e.target.checked),\n        []\n    );\n\n    const subtitlePreviewStyles = useMemo(\n        () =>\n            computeStyles({\n                subtitleColor: subtitleColor,\n                subtitleSize: subtitleSize,\n                subtitleOutlineThickness: subtitleOutlineThickness,\n                subtitleOutlineColor: subtitleOutlineColor,\n                subtitleBackgroundOpacity: subtitleBackgroundOpacity,\n                subtitleBackgroundColor: subtitleBackgroundColor,\n                subtitleFontFamily: subtitleFontFamily,\n            }),\n        [\n            subtitleColor,\n            subtitleSize,\n            subtitleOutlineThickness,\n            subtitleOutlineColor,\n            subtitleBackgroundOpacity,\n            subtitleBackgroundColor,\n            subtitleFontFamily,\n        ]\n    );\n\n    useEffect(() => {\n        let canceled = false;\n\n        const timeout = setTimeout(async () => {\n            try {\n                if (canceled) {\n                    return;\n                }\n\n                await anki.requestPermission(ankiConnectUrl);\n                setDeckNames(await anki.deckNames(ankiConnectUrl));\n                setModelNames(await anki.modelNames(ankiConnectUrl));\n                setAnkiConnectUrlError(undefined);\n            } catch (e) {\n                if (canceled) {\n                    return;\n                }\n\n                console.error(e);\n                setDeckNames(undefined);\n                setModelNames(undefined);\n\n                if (e instanceof Error) {\n                    setAnkiConnectUrlError(e.message);\n                } else if (typeof e === 'string') {\n                    setAnkiConnectUrlError(e);\n                } else {\n                    setAnkiConnectUrlError(String(e));\n                }\n            }\n        }, 1000);\n\n        return () => {\n            canceled = true;\n            clearTimeout(timeout);\n        };\n    }, [anki, ankiConnectUrl, ankiConnectUrlChangeTimestamp]);\n\n    useEffect(() => {\n        if (!noteType || ankiConnectUrlError) {\n            return undefined;\n        }\n\n        let canceled = false;\n\n        async function refreshFieldNames() {\n            try {\n                if (canceled) {\n                    return;\n                }\n\n                setFieldNames(['', ...(await anki.modelFieldNames(noteType, ankiConnectUrl))]);\n                setAnkiConnectUrlError(undefined);\n            } catch (e) {\n                if (canceled) {\n                    return;\n                }\n\n                console.error(e);\n                setFieldNames(undefined);\n\n                if (e instanceof Error) {\n                    setAnkiConnectUrlError(e.message);\n                } else if (typeof e === 'string') {\n                    setAnkiConnectUrlError(e);\n                } else {\n                    setAnkiConnectUrlError(String(e));\n                }\n            }\n        }\n\n        refreshFieldNames();\n\n        return () => {\n            canceled = true;\n        };\n    }, [anki, noteType, ankiConnectUrl, ankiConnectUrlError, ankiConnectUrlChangeTimestamp]);\n\n    const handleClose = useCallback(() => {\n        onClose({\n            ankiConnectUrl: ankiConnectUrl,\n            deck: deck,\n            noteType: noteType,\n            sentenceField: sentenceField,\n            definitionField: definitionField,\n            audioField: audioField,\n            imageField: imageField,\n            wordField: wordField,\n            sourceField: sourceField,\n            urlField: urlField,\n            tags: tags.filter((t) => t !== ''),\n            subtitleSize: Number(subtitleSize),\n            subtitleColor: subtitleColor,\n            subtitleOutlineThickness: Number(subtitleOutlineThickness),\n            subtitleOutlineColor: subtitleOutlineColor,\n            subtitleBackgroundColor: subtitleBackgroundColor,\n            subtitleBackgroundOpacity: Number(subtitleBackgroundOpacity),\n            subtitleFontFamily: subtitleFontFamily,\n            subtitlePreview: subtitlePreview,\n            imageBasedSubtitleScaleFactor: imageBasedSubtitleScaleFactor,\n            customAnkiFields: customFields,\n            preferMp3: preferMp3,\n            themeType: themeType,\n            audioPaddingStart: audioPaddingStart,\n            audioPaddingEnd: audioPaddingEnd,\n            maxImageWidth: maxImageWidth,\n            maxImageHeight: maxImageHeight,\n            surroundingSubtitlesCountRadius: surroundingSubtitlesCountRadius,\n            surroundingSubtitlesTimeRadius: surroundingSubtitlesTimeRadius,\n            copyToClipboardOnMine: copyToClipboardOnMine,\n            autoPausePreference: autoPausePreference,\n            keyBindSet: keyBindSet,\n            rememberSubtitleOffset: rememberSubtitleOffset,\n        });\n    }, [\n        onClose,\n        ankiConnectUrl,\n        deck,\n        noteType,\n        sentenceField,\n        definitionField,\n        audioField,\n        imageField,\n        wordField,\n        sourceField,\n        urlField,\n        customFields,\n        tags,\n        preferMp3,\n        subtitleSize,\n        subtitleColor,\n        subtitleOutlineThickness,\n        subtitleOutlineColor,\n        subtitleBackgroundColor,\n        subtitleBackgroundOpacity,\n        subtitleFontFamily,\n        subtitlePreview,\n        imageBasedSubtitleScaleFactor,\n        themeType,\n        audioPaddingStart,\n        audioPaddingEnd,\n        maxImageWidth,\n        maxImageHeight,\n        surroundingSubtitlesCountRadius,\n        surroundingSubtitlesTimeRadius,\n        copyToClipboardOnMine,\n        autoPausePreference,\n        keyBindSet,\n        rememberSubtitleOffset,\n    ]);\n\n    const customFieldInputs = Object.keys(customFields).map((customFieldName) => {\n        return (\n            <SelectableSetting\n                key={customFieldName}\n                label={`${customFieldName} Field`}\n                value={customFields[customFieldName]}\n                selections={fieldNames!}\n                onChange={(e) => handleCustomFieldChange(customFieldName, e.target.value)}\n                onSelectionChange={(e) => handleCustomFieldChange(customFieldName, e.target.value as string)}\n                onRemoval={() => handleCustomFieldRemoval(customFieldName)}\n                removable={true}\n            />\n        );\n    });\n\n    useEffect(() => {\n        if (!scrollToId) {\n            return;\n        }\n\n        setTimeout(() => document.getElementById(scrollToId)?.scrollIntoView({ behavior: 'smooth' }), 0);\n    }, [scrollToId]);\n\n    return (\n        <React.Fragment>\n            <CustomFieldDialog\n                open={customFieldDialogOpen}\n                existingCustomFieldNames={Object.keys(customFields)}\n                onProceed={handleAddCustomField}\n                onCancel={() => setCustomFieldDialogOpen(false)}\n            />\n            <Dialog open={open} maxWidth=\"xs\" fullWidth onClose={handleClose}>\n                <DialogTitle>Settings</DialogTitle>\n                <DialogContent>\n                    <Grid container direction=\"column\" spacing={3}>\n                        <Grid item id=\"anki\">\n                            <FormLabel>Anki</FormLabel>\n                            <FormGroup className={classes.root}>\n                                <TextField\n                                    label=\"Anki Connect URL\"\n                                    value={ankiConnectUrl}\n                                    error={Boolean(ankiConnectUrlError)}\n                                    helperText={ankiConnectUrlError}\n                                    color=\"secondary\"\n                                    onChange={handleAnkiConnectUrlChange}\n                                    InputProps={{\n                                        endAdornment: (\n                                            <InputAdornment position=\"end\">\n                                                <IconButton onClick={handleRetryAnkiConnectUrl}>\n                                                    <RefreshIcon />\n                                                </IconButton>\n                                            </InputAdornment>\n                                        ),\n                                    }}\n                                />\n                                <FormHelperText>\n                                    Ensure that {window.location.protocol + '//' + window.location.hostname} is in the\n                                    webCorsOriginList in your AnkiConnect settings as in this{' '}\n                                    <Link\n                                        color=\"secondary\"\n                                        target=\"_blank\"\n                                        rel=\"noreferrer\"\n                                        href=\"https://youtu.be/Mv7fEVb6PHo?t=44\"\n                                    >\n                                        video\n                                    </Link>\n                                    .\n                                </FormHelperText>\n                                <SelectableSetting\n                                    label=\"Deck\"\n                                    value={deck}\n                                    selections={deckNames}\n                                    onChange={handleDeckChange}\n                                    onSelectionChange={handleDeckSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"Note Type\"\n                                    value={noteType}\n                                    selections={modelNames}\n                                    onChange={handleNoteTypeChange}\n                                    onSelectionChange={handleNoteTypeSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"Sentence Field\"\n                                    value={sentenceField}\n                                    selections={fieldNames}\n                                    onChange={handleSentenceFieldChange}\n                                    onSelectionChange={handleSentenceFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"Definition Field\"\n                                    value={definitionField}\n                                    selections={fieldNames}\n                                    onChange={handleDefinitionFieldChange}\n                                    onSelectionChange={handleDefinitionFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"Word Field\"\n                                    value={wordField}\n                                    selections={fieldNames}\n                                    onChange={handleWordFieldChange}\n                                    onSelectionChange={handleWordFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"Audio Field\"\n                                    value={audioField}\n                                    selections={fieldNames}\n                                    onChange={handleAudioFieldChange}\n                                    onSelectionChange={handleAudioFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"Image Field\"\n                                    value={imageField}\n                                    selections={fieldNames}\n                                    onChange={handleImageFieldChange}\n                                    onSelectionChange={handleImageFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"Source Field\"\n                                    value={sourceField}\n                                    selections={fieldNames}\n                                    onChange={handleSourceFieldChange}\n                                    onSelectionChange={handleSourceFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"URL Field\"\n                                    value={urlField}\n                                    selections={fieldNames}\n                                    onChange={handleUrlFieldChange}\n                                    onSelectionChange={handleUrlFieldSelectionChange}\n                                />\n                                {customFieldInputs}\n                                <Button\n                                    className={classes.addFieldButton}\n                                    onClick={(e) => setCustomFieldDialogOpen(true)}\n                                >\n                                    Add Custom Field\n                                </Button>\n                                <TagsTextField\n                                    label=\"Tags\"\n                                    helperText=\"Comma-separated list of strings\"\n                                    fullWidth\n                                    color=\"secondary\"\n                                    tags={tags}\n                                    onTagsChange={handleTagsChange}\n                                />\n                            </FormGroup>\n                        </Grid>\n                        <Grid item id=\"mining\">\n                            <FormLabel>Mining</FormLabel>\n                            <FormGroup className={classes.root}>\n                                <FormControlLabel\n                                    control={<Switch checked={preferMp3} onChange={handlePreferMp3Change} />}\n                                    label=\"Re-encode audio as mp3 (slower)\"\n                                    labelPlacement=\"start\"\n                                    className={classes.switchLabel}\n                                />\n                                <FormControlLabel\n                                    control={\n                                        <Switch\n                                            checked={copyToClipboardOnMine}\n                                            onChange={handleCopyToClipboardOnMine}\n                                        />\n                                    }\n                                    label=\"Copy mined subtitles to clipboard\"\n                                    labelPlacement=\"start\"\n                                    className={classes.switchLabel}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label=\"Audio Padding Start\"\n                                    fullWidth\n                                    value={audioPaddingStart}\n                                    color=\"secondary\"\n                                    onChange={handleAudioPaddingStart}\n                                    inputProps={{\n                                        min: 0,\n                                        step: 1,\n                                    }}\n                                    InputProps={{\n                                        endAdornment: <InputAdornment position=\"end\">ms</InputAdornment>,\n                                    }}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label=\"Audio Padding End\"\n                                    fullWidth\n                                    value={audioPaddingEnd}\n                                    color=\"secondary\"\n                                    onChange={handleAudioPaddingEnd}\n                                    inputProps={{\n                                        min: 0,\n                                        step: 1,\n                                    }}\n                                    InputProps={{\n                                        endAdornment: <InputAdornment position=\"end\">ms</InputAdornment>,\n                                    }}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label=\"Max Image Width\"\n                                    fullWidth\n                                    value={maxImageWidth}\n                                    color=\"secondary\"\n                                    onChange={handleMaxImageWidth}\n                                    inputProps={{\n                                        min: 0,\n                                        step: 1,\n                                    }}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label=\"Max Image Height\"\n                                    fullWidth\n                                    value={maxImageHeight}\n                                    color=\"secondary\"\n                                    onChange={handleMaxImageHeight}\n                                    inputProps={{\n                                        min: 0,\n                                        step: 1,\n                                    }}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label=\"Surrounding Subtitles Count Radius\"\n                                    fullWidth\n                                    value={surroundingSubtitlesCountRadius}\n                                    color=\"secondary\"\n                                    onChange={handleSurroundingSubtitlesCountRadius}\n                                    inputProps={{\n                                        min: 1,\n                                        step: 1,\n                                    }}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label=\"Surrounding Subtitles Time Radius\"\n                                    fullWidth\n                                    value={surroundingSubtitlesTimeRadius}\n                                    color=\"secondary\"\n                                    onChange={handleSurroundingSubtitlesTimeRadius}\n                                    inputProps={{\n                                        min: 0,\n                                        step: 1,\n                                    }}\n                                    InputProps={{\n                                        endAdornment: <InputAdornment position=\"end\">ms</InputAdornment>,\n                                    }}\n                                />\n                            </FormGroup>\n                        </Grid>\n                        <Grid item id=\"playback\">\n                            <FormLabel>Playback</FormLabel>\n                            <FormGroup>\n                                <FormControlLabel\n                                    control={\n                                        <Switch\n                                            checked={rememberSubtitleOffset}\n                                            onChange={handleRememberSubtitleOffsetChange}\n                                        />\n                                    }\n                                    label=\"Remember subtitle offset\"\n                                    labelPlacement=\"start\"\n                                    className={classes.switchLabel}\n                                />\n                            </FormGroup>\n                        </Grid>\n                        <Grid item id=\"auto-pause\">\n                            <Grid container direction=\"row\" spacing={1}>\n                                <Grid item>\n                                    <FormLabel>Auto-pause Preference</FormLabel>\n                                </Grid>\n                                <Grid item>\n                                    <Tooltip\n                                        title=\"Does not enable auto-pause. Sets the preference for when to pause when auto-pause is\n                                    enabled.\"\n                                        placement=\"top\"\n                                    >\n                                        <InfoIcon fontSize=\"small\" />\n                                    </Tooltip>\n                                </Grid>\n                            </Grid>\n                            <RadioGroup row>\n                                <FormControlLabel\n                                    control={\n                                        <Radio\n                                            checked={autoPausePreference === AutoPausePreference.atStart}\n                                            value={AutoPausePreference.atStart}\n                                            onChange={handleAutoPausePreferenceChange}\n                                        />\n                                    }\n                                    label=\"At Subtitle Start\"\n                                />\n                                <FormControlLabel\n                                    control={\n                                        <Radio\n                                            checked={autoPausePreference === AutoPausePreference.atEnd}\n                                            value={AutoPausePreference.atEnd}\n                                            onChange={handleAutoPausePreferenceChange}\n                                        />\n                                    }\n                                    label=\"At Subtitle End\"\n                                />\n                            </RadioGroup>\n                        </Grid>\n                        <Grid item id=\"video-subtitle-appearance\">\n                            <FormLabel>Video Subtitle Appearance</FormLabel>\n                            <FormGroup className={classes.root}>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"color\"\n                                        label=\"Subtitle Color\"\n                                        fullWidth\n                                        value={subtitleColor}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleColorChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"number\"\n                                        label=\"Subtitle Size\"\n                                        fullWidth\n                                        value={subtitleSize}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleSizeChange}\n                                        inputProps={{\n                                            min: 1,\n                                            step: 1,\n                                        }}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"color\"\n                                        label=\"Subtitle Outline Color\"\n                                        fullWidth\n                                        value={subtitleOutlineColor}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleOutlineColorChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"number\"\n                                        label=\"Subtitle Outline Thickness\"\n                                        fullWidth\n                                        value={subtitleOutlineThickness}\n                                        onChange={handleSubtitleOutlineThicknessChange}\n                                        inputProps={{\n                                            min: 0,\n                                            step: 1,\n                                        }}\n                                        color=\"secondary\"\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"color\"\n                                        label=\"Subtitle Background Color\"\n                                        fullWidth\n                                        value={subtitleBackgroundColor}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleBackgroundColorChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"number\"\n                                        label=\"Subtitle Background Opacity\"\n                                        fullWidth\n                                        inputProps={{\n                                            min: 0,\n                                            max: 1,\n                                            step: 0.1,\n                                        }}\n                                        value={subtitleBackgroundOpacity}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleBackgroundOpacityChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"text\"\n                                        label=\"Subtitle Font Family\"\n                                        placeholder=\"Inherited\"\n                                        fullWidth\n                                        value={subtitleFontFamily}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleFontFamilyChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"number\"\n                                        label=\"Image-based Subtitle Scale Factor\"\n                                        placeholder=\"Inherited\"\n                                        fullWidth\n                                        inputProps={{\n                                            min: 0,\n                                            max: 1,\n                                            step: 0.1,\n                                        }}\n                                        value={imageBasedSubtitleScaleFactor}\n                                        color=\"secondary\"\n                                        onChange={handleImageBasedSubtitleScaleFactorChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitlePreview}>\n                                    <input\n                                        value={subtitlePreview}\n                                        className={classes.subtitlePreviewInput}\n                                        onChange={handleSubtitlePreviewChange}\n                                        style={subtitlePreviewStyles}\n                                    />\n                                </div>\n                            </FormGroup>\n                        </Grid>\n                        <Grid item id=\"theme\">\n                            <FormLabel>Theme</FormLabel>\n                            <div>\n                                <FormControlLabel\n                                    control={\n                                        <Radio\n                                            checked={themeType === 'light'}\n                                            value=\"light\"\n                                            onChange={handleThemeTypeChange}\n                                        />\n                                    }\n                                    label=\"Light\"\n                                />\n                                <FormControlLabel\n                                    control={\n                                        <Radio\n                                            checked={themeType === 'dark'}\n                                            value=\"dark\"\n                                            onChange={handleThemeTypeChange}\n                                        />\n                                    }\n                                    label=\"Dark\"\n                                />\n                            </div>\n                        </Grid>\n                        <Grid item id=\"keyboard-shortcuts\">\n                            <FormLabel>Keyboard Shortcuts</FormLabel>\n                            <FormGroup>\n                                {Object.keys(keyBindProperties).map((key) => {\n                                    const keyBindName = key as KeyBindName;\n                                    const properties = keyBindProperties[keyBindName];\n                                    return (\n                                        <KeyBindField\n                                            key={key}\n                                            label={properties.label}\n                                            keys={\n                                                extension.installed && properties.extensionOverridden\n                                                    ? extension.extensionCommands[keyBindName] ?? ''\n                                                    : keyBindSet[keyBindName].keys\n                                            }\n                                            extensionOverridden={extension.installed && properties.extensionOverridden}\n                                            onKeysChange={(keys) => handleKeysChange(keys, keyBindName)}\n                                            onOpenExtensionShortcuts={() => extension.openShortcuts()}\n                                        />\n                                    );\n                                })}\n                            </FormGroup>\n                        </Grid>\n                    </Grid>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose}>OK</Button>\n                </DialogActions>\n            </Dialog>\n        </React.Fragment>\n    );\n}\n","import {\n    AsbplayerSettings,\n    AsbplayerSettingsProvider,\n    AutoPausePreference,\n    KeyBindName,\n    KeyBindSet,\n} from '@project/common';\nimport { isMacOs } from 'react-device-detect';\n\nconst defaultAnkiConnectUrl = 'http://127.0.0.1:8765';\nconst defaultSubtitleSize = 36;\nconst defaultSubtitleColor = '#ffffff';\nconst defaultSubtitleOutlineThickness = 0;\nconst defaultSubtitleOutlineColor = '#000000';\nconst defaultSubtitleBackgroundColor = '#000000';\nconst defaultSubtitleBackgroundOpacity = 0.5;\nconst defaultSubtitleFontFamily = '';\nconst defaultSubtitlePreview = 'アあ安';\nconst defaultAudioPaddingStart = 0;\nconst defaultAudioPaddingEnd = 500;\nconst defaultMaxImageWidth = 0;\nconst defaultMaxImageHeight = 0;\nconst defaultSurroundingSubtitlesCountRadius = 2;\nconst defaultSurroundingSubtitlesTimeRadius = 10000;\nconst defaultAutoPausePreference = AutoPausePreference.atEnd;\nconst defaultKeyBindSet: KeyBindSet = {\n    togglePlay: { keys: 'space' },\n    toggleAutoPause: { keys: isMacOs ? '⇧+P' : 'shift+P' },\n    toggleCondensedPlayback: { keys: isMacOs ? '⇧+O' : 'shift+O' },\n    toggleSubtitles: { keys: 'S' },\n    toggleVideoSubtitleTrack1: { keys: '1' },\n    toggleVideoSubtitleTrack2: { keys: '2' },\n    toggleAsbplayerSubtitleTrack1: { keys: 'W+1' },\n    toggleAsbplayerSubtitleTrack2: { keys: 'W+2' },\n    seekBackward: { keys: 'A' },\n    seekForward: { keys: 'D' },\n    seekToPreviousSubtitle: { keys: 'left' },\n    seekToNextSubtitle: { keys: 'right' },\n    seekToBeginningOfCurrentSubtitle: { keys: 'down' },\n    adjustOffsetToPreviousSubtitle: { keys: isMacOs ? '⇧+left' : 'ctrl+left' },\n    adjustOffsetToNextSubtitle: { keys: isMacOs ? '⇧+right' : 'ctrl+right' },\n    decreaseOffset: { keys: isMacOs ? '⇧+⌃+right' : 'ctrl+shift+right' },\n    increaseOffset: { keys: isMacOs ? '⇧+⌃+left' : 'ctrl+shift+left' },\n    copySubtitle: { keys: isMacOs ? '⇧+⌃+Z' : 'ctrl+shift+Z' },\n    ankiExport: { keys: isMacOs ? '⇧+⌃+X' : 'ctrl+shift+X' },\n    updateLastCard: { keys: isMacOs ? '⇧+⌃+U' : 'ctrl+shift+U' },\n};\n\nconst ankiConnectUrlKey = 'ankiConnectUrl';\nconst deckKey = 'deck';\nconst noteTypeKey = 'noteType';\nconst sentenceFieldKey = 'sentenceField';\nconst definitionFieldKey = 'definitionField';\nconst audioFieldKey = 'audioField';\nconst imageFieldKey = 'imageField';\nconst wordFieldKey = 'wordField';\nconst sourceFieldKey = 'sourceField';\nconst urlFieldKey = 'urlField';\nconst customAnkiFieldsKey = 'customAnkiFields';\nconst tagsKey = 'tags';\nconst subtitleSizeKey = 'subtitleSize';\nconst subtitleColorKey = 'subtitleColor';\nconst subtitleOutlineThicknessKey = 'subtitleOutlineThickness';\nconst subtitleOutlineColorKey = 'subtitleOutlineColor';\nconst subtitleBackgroundColorKey = 'subtitleBackgroundColor';\nconst subtitleBackgroundOpacityKey = 'subtitleBackgroundOpacity';\nconst subtitleFontFamilyKey = 'subtitleFontFamily';\nconst subtitlePreviewKey = 'subtitlePreview';\nconst imageBasedSubtitleScaleFactorKey = 'imageBasedSubtitleScaleFactor';\nconst audioPaddingStartKey = 'audioPaddingStart';\nconst audioPaddingEndKey = 'audioPaddingEnd';\nconst maxImageWidthKey = 'maxImageWidth';\nconst maxImageHeightKey = 'maxImageHeight';\nconst surroundingSubtitlesCountRadiusKey = 'surroundingSubtitlesCountRadius';\nconst surroundingSubtitlesTimeRadiusKey = 'surroundingSubtitlesTimeRadius';\nconst preferMp3Key = 'preferMp3';\nconst themeTypeKey = 'themeType';\nconst copyToClipboardOnMineKey = 'copyToClipboardOnMine';\nconst autoPausePreferenceKey = 'autoPausePreference';\nconst keyBindSetKey = 'keyBindSet';\nconst rememberSubtitleOffsetKey = 'rememberSubtitleOffset';\n\nexport default class SettingsProvider implements AsbplayerSettingsProvider {\n    private _tags?: string[];\n    private _keyBindSet?: KeyBindSet;\n\n    constructor() {\n        // Cache for use in useEffect dependencies\n        this._tags = this.tags;\n        this._keyBindSet = this.keyBindSet;\n    }\n\n    get settings(): AsbplayerSettings {\n        return {\n            ankiConnectUrl: this.ankiConnectUrl,\n            deck: this.deck,\n            noteType: this.noteType,\n            sentenceField: this.sentenceField,\n            definitionField: this.definitionField,\n            audioField: this.audioField,\n            imageField: this.imageField,\n            wordField: this.wordField,\n            urlField: this.urlField,\n            customAnkiFields: this.customAnkiFields,\n            tags: this.tags,\n            sourceField: this.sourceField,\n            subtitleSize: this.subtitleSize,\n            subtitleColor: this.subtitleColor,\n            subtitleOutlineThickness: this.subtitleOutlineThickness,\n            subtitleOutlineColor: this.subtitleOutlineColor,\n            subtitleBackgroundColor: this.subtitleBackgroundColor,\n            subtitleBackgroundOpacity: this.subtitleBackgroundOpacity,\n            subtitleFontFamily: this.subtitleFontFamily,\n            subtitlePreview: this.subtitlePreview,\n            imageBasedSubtitleScaleFactor: this.imageBasedSubtitleScaleFactor,\n            preferMp3: this.preferMp3,\n            themeType: this.themeType,\n            audioPaddingStart: this.audioPaddingStart,\n            audioPaddingEnd: this.audioPaddingEnd,\n            maxImageWidth: this.maxImageWidth,\n            maxImageHeight: this.maxImageHeight,\n            surroundingSubtitlesCountRadius: this.surroundingSubtitlesCountRadius,\n            surroundingSubtitlesTimeRadius: this.surroundingSubtitlesTimeRadius,\n            copyToClipboardOnMine: this.copyToClipboardOnMine,\n            autoPausePreference: this.autoPausePreference,\n            keyBindSet: this.keyBindSet,\n            rememberSubtitleOffset: this.rememberSubtitleOffset,\n        };\n    }\n\n    set settings(newSettings: AsbplayerSettings) {\n        this.ankiConnectUrl = newSettings.ankiConnectUrl;\n        this.deck = newSettings.deck;\n        this.noteType = newSettings.noteType;\n        this.sentenceField = newSettings.sentenceField;\n        this.definitionField = newSettings.definitionField;\n        this.audioField = newSettings.audioField;\n        this.imageField = newSettings.imageField;\n        this.wordField = newSettings.wordField;\n        this.sourceField = newSettings.sourceField;\n        this.urlField = newSettings.urlField;\n        this.tags = newSettings.tags;\n        this.subtitleSize = newSettings.subtitleSize;\n        this.subtitleColor = newSettings.subtitleColor;\n        this.subtitleOutlineThickness = newSettings.subtitleOutlineThickness;\n        this.subtitleOutlineColor = newSettings.subtitleOutlineColor;\n        this.subtitleBackgroundColor = newSettings.subtitleBackgroundColor;\n        this.subtitleBackgroundOpacity = newSettings.subtitleBackgroundOpacity;\n        this.subtitleFontFamily = newSettings.subtitleFontFamily;\n        this.subtitlePreview = newSettings.subtitlePreview;\n        this.imageBasedSubtitleScaleFactor = newSettings.imageBasedSubtitleScaleFactor;\n        this.customAnkiFields = newSettings.customAnkiFields;\n        this.preferMp3 = newSettings.preferMp3;\n        this.themeType = newSettings.themeType;\n        this.audioPaddingStart = newSettings.audioPaddingStart;\n        this.audioPaddingEnd = newSettings.audioPaddingEnd;\n        this.maxImageWidth = newSettings.maxImageWidth;\n        this.maxImageHeight = newSettings.maxImageHeight;\n        this.surroundingSubtitlesCountRadius = newSettings.surroundingSubtitlesCountRadius;\n        this.surroundingSubtitlesTimeRadius = newSettings.surroundingSubtitlesTimeRadius\n        this.copyToClipboardOnMine = newSettings.copyToClipboardOnMine;\n        this.autoPausePreference = newSettings.autoPausePreference;\n        this.keyBindSet = newSettings.keyBindSet;\n        this.rememberSubtitleOffset = newSettings.rememberSubtitleOffset;\n    }\n\n    get subtitleSettings() {\n        return {\n            subtitleSize: this.subtitleSize,\n            subtitleColor: this.subtitleColor,\n            subtitleOutlineThickness: this.subtitleOutlineThickness,\n            subtitleOutlineColor: this.subtitleOutlineColor,\n            subtitleBackgroundColor: this.subtitleBackgroundColor,\n            subtitleBackgroundOpacity: this.subtitleBackgroundOpacity,\n            subtitleFontFamily: this.subtitleFontFamily,\n            imageBasedSubtitleScaleFactor: this.imageBasedSubtitleScaleFactor,\n        };\n    }\n\n    get ankiSettings() {\n        return {\n            ankiConnectUrl: this.ankiConnectUrl,\n            deck: this.deck,\n            noteType: this.noteType,\n            sentenceField: this.sentenceField,\n            definitionField: this.definitionField,\n            audioField: this.audioField,\n            imageField: this.imageField,\n            wordField: this.wordField,\n            sourceField: this.sourceField,\n            urlField: this.urlField,\n            customAnkiFields: this.customAnkiFields,\n            tags: this.tags,\n            preferMp3: this.preferMp3,\n            audioPaddingStart: this.audioPaddingStart,\n            audioPaddingEnd: this.audioPaddingEnd,\n            maxImageWidth: this.maxImageWidth,\n            maxImageHeight: this.maxImageHeight,\n            surroundingSubtitlesCountRadius: this.surroundingSubtitlesCountRadius,\n            surroundingSubtitlesTimeRadius: this.surroundingSubtitlesTimeRadius,\n        };\n    }\n\n    get miscSettings() {\n        return {\n            themeType: this.themeType,\n            copyToClipboardOnMine: this.copyToClipboardOnMine,\n            autoPausePreference: this.autoPausePreference,\n            keyBindSet: this.keyBindSet,\n            rememberSubtitleOffset: this.rememberSubtitleOffset,\n        };\n    }\n\n    _getNumberItem(key: string, defaultValue: number) {\n        const value = localStorage.getItem(key);\n\n        if (value === null) {\n            return defaultValue;\n        }\n\n        return Number(value);\n    }\n\n    _setOptionalItem(key: string, value?: string) {\n        if (typeof value === 'undefined') {\n            localStorage.removeItem(key);\n        } else {\n            localStorage.setItem(key, value);\n        }\n    }\n\n    get ankiConnectUrl() {\n        return localStorage.getItem(ankiConnectUrlKey) || defaultAnkiConnectUrl;\n    }\n\n    set ankiConnectUrl(url) {\n        localStorage.setItem(ankiConnectUrlKey, url);\n    }\n\n    get deck() {\n        return localStorage.getItem(deckKey) ?? undefined;\n    }\n\n    set deck(deck) {\n        this._setOptionalItem(deckKey, deck);\n    }\n\n    get noteType() {\n        return localStorage.getItem(noteTypeKey) ?? undefined;\n    }\n\n    set noteType(noteType) {\n        this._setOptionalItem(noteTypeKey, noteType);\n    }\n\n    get sentenceField() {\n        return localStorage.getItem(sentenceFieldKey) ?? undefined;\n    }\n\n    set sentenceField(sentenceField) {\n        this._setOptionalItem(sentenceFieldKey, sentenceField);\n    }\n\n    get definitionField() {\n        return localStorage.getItem(definitionFieldKey) ?? undefined;\n    }\n\n    set definitionField(definitionField) {\n        this._setOptionalItem(definitionFieldKey, definitionField);\n    }\n\n    get audioField() {\n        return localStorage.getItem(audioFieldKey) ?? undefined;\n    }\n\n    set audioField(audioField) {\n        this._setOptionalItem(audioFieldKey, audioField);\n    }\n\n    get imageField() {\n        return localStorage.getItem(imageFieldKey) ?? undefined;\n    }\n\n    set imageField(imageField) {\n        this._setOptionalItem(imageFieldKey, imageField);\n    }\n\n    get wordField() {\n        return localStorage.getItem(wordFieldKey) ?? undefined;\n    }\n\n    set wordField(wordField) {\n        this._setOptionalItem(wordFieldKey, wordField);\n    }\n\n    get sourceField() {\n        return localStorage.getItem(sourceFieldKey) ?? undefined;\n    }\n\n    set sourceField(sourceField) {\n        this._setOptionalItem(sourceFieldKey, sourceField);\n    }\n\n    get urlField() {\n        return localStorage.getItem(urlFieldKey) ?? undefined;\n    }\n\n    set urlField(urlField) {\n        this._setOptionalItem(urlFieldKey, urlField);\n    }\n\n    get customAnkiFields() {\n        const ankiFieldsString = localStorage.getItem(customAnkiFieldsKey);\n\n        if (ankiFieldsString) {\n            return JSON.parse(ankiFieldsString);\n        }\n\n        return {};\n    }\n\n    set customAnkiFields(customAnkiFields) {\n        localStorage.setItem(customAnkiFieldsKey, JSON.stringify(customAnkiFields));\n    }\n\n    get tags() {\n        if (typeof this._tags !== 'undefined') {\n            return this._tags;\n        }\n\n        const tagsString = localStorage.getItem(tagsKey);\n\n        if (tagsString) {\n            this._tags = JSON.parse(tagsString) as string[];\n            return this._tags;\n        }\n\n        return [];\n    }\n\n    set tags(tags) {\n        localStorage.setItem(tagsKey, JSON.stringify(tags));\n        this._tags = undefined;\n    }\n\n    get subtitleColor() {\n        return localStorage.getItem(subtitleColorKey) || defaultSubtitleColor;\n    }\n\n    set subtitleColor(subtitleColor) {\n        localStorage.setItem(subtitleColorKey, subtitleColor);\n    }\n\n    get subtitleSize() {\n        return this._getNumberItem(subtitleSizeKey, defaultSubtitleSize);\n    }\n\n    set subtitleSize(subtitleSize) {\n        localStorage.setItem(subtitleSizeKey, String(subtitleSize));\n    }\n\n    get subtitleOutlineColor() {\n        return localStorage.getItem(subtitleOutlineColorKey) || defaultSubtitleOutlineColor;\n    }\n\n    set subtitleOutlineColor(subtitleOutlineColor) {\n        localStorage.setItem(subtitleOutlineColorKey, subtitleOutlineColor);\n    }\n\n    get subtitleOutlineThickness() {\n        return this._getNumberItem(subtitleOutlineThicknessKey, defaultSubtitleOutlineThickness);\n    }\n\n    set subtitleOutlineThickness(subtitleOutlineThickness) {\n        localStorage.setItem(subtitleOutlineThicknessKey, String(subtitleOutlineThickness));\n    }\n\n    get subtitleBackgroundColor() {\n        return localStorage.getItem(subtitleBackgroundColorKey) || defaultSubtitleBackgroundColor;\n    }\n\n    set subtitleBackgroundColor(subtitleBackgroundColor) {\n        localStorage.setItem(subtitleBackgroundColorKey, subtitleBackgroundColor);\n    }\n\n    get subtitleBackgroundOpacity() {\n        return this._getNumberItem(subtitleBackgroundOpacityKey, defaultSubtitleBackgroundOpacity);\n    }\n\n    set subtitleBackgroundOpacity(subtitleBackgroundOpacity) {\n        localStorage.setItem(subtitleBackgroundOpacityKey, String(subtitleBackgroundOpacity));\n    }\n\n    get subtitleFontFamily() {\n        return localStorage.getItem(subtitleFontFamilyKey) || defaultSubtitleFontFamily;\n    }\n\n    set subtitleFontFamily(subtitleFontFamily) {\n        localStorage.setItem(subtitleFontFamilyKey, subtitleFontFamily);\n    }\n\n    get subtitlePreview() {\n        return localStorage.getItem(subtitlePreviewKey) || defaultSubtitlePreview;\n    }\n\n    set subtitlePreview(subtitlePreview) {\n        localStorage.setItem(subtitlePreviewKey, subtitlePreview);\n    }\n\n    get imageBasedSubtitleScaleFactor() {\n        return this._getNumberItem(imageBasedSubtitleScaleFactorKey, 1);\n    }\n\n    set imageBasedSubtitleScaleFactor(imageBasedSubtitleScaleFactor: number) {\n        localStorage.setItem(imageBasedSubtitleScaleFactorKey, String(imageBasedSubtitleScaleFactor));\n    }\n\n    get preferMp3() {\n        return localStorage.getItem(preferMp3Key) === 'true' || false;\n    }\n\n    set preferMp3(preferMp3) {\n        localStorage.setItem(preferMp3Key, String(preferMp3));\n    }\n\n    get themeType() {\n        const themeType = localStorage.getItem(themeTypeKey) as 'dark' | 'light' | null;\n\n        if (themeType === null) {\n            return 'dark';\n        }\n\n        return themeType;\n    }\n\n    set themeType(themeType: 'dark' | 'light') {\n        localStorage.setItem(themeTypeKey, themeType);\n    }\n\n    get audioPaddingStart() {\n        const value = localStorage.getItem(audioPaddingStartKey);\n\n        if (!value) {\n            return defaultAudioPaddingStart;\n        }\n\n        return Number(value);\n    }\n\n    set audioPaddingStart(audioPaddingStart) {\n        localStorage.setItem(audioPaddingStartKey, String(audioPaddingStart));\n    }\n\n    get audioPaddingEnd() {\n        return this._getNumberItem(audioPaddingEndKey, defaultAudioPaddingEnd);\n    }\n\n    set audioPaddingEnd(audioPaddingEnd) {\n        localStorage.setItem(audioPaddingEndKey, String(audioPaddingEnd));\n    }\n\n    get maxImageWidth() {\n        const value = localStorage.getItem(maxImageWidthKey);\n\n        if (!value) {\n            return defaultMaxImageWidth;\n        }\n\n        return Number(value);\n    }\n\n    set maxImageWidth(maxImageWidth) {\n        localStorage.setItem(maxImageWidthKey, String(maxImageWidth));\n    }\n\n    get maxImageHeight() {\n        return this._getNumberItem(maxImageHeightKey, defaultMaxImageHeight);\n    }\n\n    set maxImageHeight(maxImageHeight) {\n        localStorage.setItem(maxImageHeightKey, String(maxImageHeight));\n    }\n\n    get surroundingSubtitlesCountRadius() {\n        return this._getNumberItem(surroundingSubtitlesCountRadiusKey, defaultSurroundingSubtitlesCountRadius);\n    }\n\n    set surroundingSubtitlesCountRadius(surroundingSubtitlesCountRadius) {\n        localStorage.setItem(surroundingSubtitlesCountRadiusKey, String(surroundingSubtitlesCountRadius));\n    }\n\n    get surroundingSubtitlesTimeRadius() {\n        return this._getNumberItem(surroundingSubtitlesTimeRadiusKey, defaultSurroundingSubtitlesTimeRadius);\n    }\n\n    set surroundingSubtitlesTimeRadius(surroundingSubtitlesTimeRadius) {\n        localStorage.setItem(surroundingSubtitlesTimeRadiusKey, String(surroundingSubtitlesTimeRadius));\n    }\n\n    get copyToClipboardOnMine() {\n        return localStorage.getItem(copyToClipboardOnMineKey) === 'true' || false;\n    }\n\n    set copyToClipboardOnMine(copyToClipboardOnMine) {\n        localStorage.setItem(copyToClipboardOnMineKey, String(copyToClipboardOnMine));\n    }\n\n    get autoPausePreference() {\n        return this._getNumberItem(autoPausePreferenceKey, defaultAutoPausePreference);\n    }\n\n    set autoPausePreference(autoPausePreference) {\n        localStorage.setItem(autoPausePreferenceKey, String(autoPausePreference));\n    }\n\n    get keyBindSet() {\n        if (this._keyBindSet !== undefined) {\n            return this._keyBindSet;\n        }\n\n        let serialized = localStorage.getItem(keyBindSetKey);\n\n        if (serialized === null) {\n            this._keyBindSet = defaultKeyBindSet;\n            return defaultKeyBindSet;\n        }\n\n        const keyBindSet = JSON.parse(serialized);\n\n        for (const key of Object.keys(defaultKeyBindSet)) {\n            const keyBindName = key as KeyBindName;\n\n            if (keyBindSet[keyBindName] === undefined) {\n                keyBindSet[keyBindName] = defaultKeyBindSet[keyBindName];\n            }\n        }\n\n        this._keyBindSet = keyBindSet;\n        return keyBindSet as KeyBindSet;\n    }\n\n    set keyBindSet(keyBindSet) {\n        localStorage.setItem(keyBindSetKey, JSON.stringify(keyBindSet));\n        this._keyBindSet = undefined;\n    }\n\n    get rememberSubtitleOffset() {\n        return localStorage.getItem(rememberSubtitleOffsetKey) === 'true' || false;\n    }\n\n    set rememberSubtitleOffset(rememberSubtitleOffset) {\n        localStorage.setItem(rememberSubtitleOffsetKey, String(rememberSubtitleOffset));\n    }\n}\n","import {\n    AnkiDialogRequestFromVideoMessage,\n    AnkiSettings,\n    AnkiSettingsToVideoMessage,\n    AppBarToggleMessageToVideoMessage,\n    AudioTrackModel,\n    AudioTrackSelectedFromVideoMessage,\n    AudioTrackSelectedToVideoMessage,\n    CopyMessage,\n    CurrentTimeToVideoMessage,\n    FinishedAnkiDialogRequestToVideoMessage,\n    HideSubtitlePlayerToggleToVideoMessage,\n    MiscSettings,\n    MiscSettingsToVideoMessage,\n    OffsetFromVideoMessage,\n    OffsetToVideoMessage,\n    PauseFromVideoMessage,\n    PlayFromVideoMessage,\n    PlayMode,\n    PlayModeMessage,\n    PostMineAction,\n    ReadyFromVideoMessage,\n    ReadyStateFromVideoMessage,\n    ReadyToVideoMessage,\n    SubtitleModel,\n    SubtitleSettings,\n    SubtitleSettingsToVideoMessage,\n    SubtitlesToVideoMessage,\n    ToggleSubtitleTrackInListFromVideoMessage,\n} from '@project/common';\n\nexport default class PlayerChannel {\n    private channel?: BroadcastChannel;\n    private time: number;\n    private readyCallbacks: ((duration: number) => void)[];\n    private playCallbacks: (() => void)[];\n    private pauseCallbacks: (() => void)[];\n    private currentTimeCallbacks: ((currentTime: number) => void)[];\n    private audioTrackSelectedCallbacks: ((id: string) => void)[];\n    private closeCallbacks: (() => void)[];\n    private subtitlesCallbacks: ((subtitles: SubtitleModel[]) => void)[];\n    private offsetCallbacks: ((offset: number) => void)[];\n    private playModeCallbacks: ((playMode: PlayMode) => void)[];\n    private hideSubtitlePlayerToggleCallbacks: ((hidden: boolean) => void)[];\n    private appBarToggleCallbacks: ((hidden: boolean) => void)[];\n    private ankiDialogRequestCallbacks: (() => void)[];\n    private finishedAnkiDialogRequestCallbacks: ((resume: boolean) => void)[];\n    private subtitleSettingsCallbacks: ((subtitleSettings: SubtitleSettings) => void)[];\n    private miscSettingsCallbacks: ((miscSettings: MiscSettings) => void)[];\n    private ankiSettingsCallbacks: ((ankiSettings: AnkiSettings) => void)[];\n\n    constructor(channel: string) {\n        this.channel = new BroadcastChannel(channel);\n        this.time = 0;\n        this.playCallbacks = [];\n        this.pauseCallbacks = [];\n        this.currentTimeCallbacks = [];\n        this.audioTrackSelectedCallbacks = [];\n        this.closeCallbacks = [];\n        this.readyCallbacks = [];\n        this.subtitlesCallbacks = [];\n        this.offsetCallbacks = [];\n        this.playModeCallbacks = [];\n        this.hideSubtitlePlayerToggleCallbacks = [];\n        this.appBarToggleCallbacks = [];\n        this.ankiDialogRequestCallbacks = [];\n        this.finishedAnkiDialogRequestCallbacks = [];\n        this.subtitleSettingsCallbacks = [];\n        this.miscSettingsCallbacks = [];\n        this.ankiSettingsCallbacks = [];\n\n        const that = this;\n\n        this.channel.onmessage = (event) => {\n            switch (event.data.command) {\n                case 'init':\n                    // ignore, this is for the chrome extension\n                    break;\n                case 'ready':\n                    const readyMessage = event.data as ReadyToVideoMessage;\n\n                    for (let callback of that.readyCallbacks) {\n                        callback(readyMessage.duration);\n                    }\n                    break;\n                case 'play':\n                    for (let callback of that.playCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'pause':\n                    for (let callback of that.pauseCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'currentTime':\n                    const currentTimeMessage = event.data as CurrentTimeToVideoMessage;\n\n                    for (let callback of that.currentTimeCallbacks) {\n                        callback(currentTimeMessage.value);\n                    }\n                    break;\n                case 'audioTrackSelected':\n                    const audioTrackSelectedMessage = event.data as AudioTrackSelectedToVideoMessage;\n\n                    for (let callback of that.audioTrackSelectedCallbacks) {\n                        callback(audioTrackSelectedMessage.id);\n                    }\n                    break;\n                case 'close':\n                    for (let callback of that.closeCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'subtitles':\n                    const subtitlesMessage = event.data as SubtitlesToVideoMessage;\n\n                    for (let callback of that.subtitlesCallbacks) {\n                        callback(subtitlesMessage.value);\n                    }\n                    break;\n                case 'offset':\n                    const offsetMessage = event.data as OffsetToVideoMessage;\n\n                    for (const callback of that.offsetCallbacks) {\n                        callback(offsetMessage.value);\n                    }\n                    break;\n                case 'subtitleSettings':\n                    const subtitleSettingsMessage = event.data as SubtitleSettingsToVideoMessage;\n\n                    for (let callback of that.subtitleSettingsCallbacks) {\n                        callback(subtitleSettingsMessage.value);\n                    }\n                    break;\n                case 'playMode':\n                    const playModeMessage = event.data as PlayModeMessage;\n\n                    for (let callback of that.playModeCallbacks) {\n                        callback(playModeMessage.playMode);\n                    }\n                    break;\n                case 'hideSubtitlePlayerToggle':\n                    const hideSubtitlePlayerToggleMessage = event.data as HideSubtitlePlayerToggleToVideoMessage;\n\n                    for (let callback of that.hideSubtitlePlayerToggleCallbacks) {\n                        callback(hideSubtitlePlayerToggleMessage.value);\n                    }\n                    break;\n                case 'appBarToggle':\n                    const appBarToggleMessage = event.data as AppBarToggleMessageToVideoMessage;\n\n                    for (let callback of that.appBarToggleCallbacks) {\n                        callback(appBarToggleMessage.value);\n                    }\n                    break;\n                case 'ankiDialogRequest':\n                    for (let callback of that.ankiDialogRequestCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'finishedAnkiDialogRequest':\n                    const finishedAnkiDialogRequestMessage = event.data as FinishedAnkiDialogRequestToVideoMessage;\n\n                    for (let callback of that.finishedAnkiDialogRequestCallbacks) {\n                        callback(finishedAnkiDialogRequestMessage.resume);\n                    }\n                    break;\n                case 'ankiSettings':\n                    const ankiSettingsMessage = event.data as AnkiSettingsToVideoMessage;\n\n                    for (let callback of that.ankiSettingsCallbacks) {\n                        callback(ankiSettingsMessage.value);\n                    }\n                    break;\n                case 'miscSettings':\n                    const miscSettingsMessage = event.data as MiscSettingsToVideoMessage;\n\n                    for (let callback of that.miscSettingsCallbacks) {\n                        callback(miscSettingsMessage.value);\n                    }\n                    break;\n                default:\n                    console.error('Unrecognized event ' + event.data.command);\n            }\n        };\n    }\n\n    set currentTime(value: number) {\n        this.time = value;\n        this.channel?.postMessage({ command: 'currentTime', value: this.time, echo: true });\n    }\n\n    onPlay(callback: () => void) {\n        this.playCallbacks.push(callback);\n    }\n\n    onPause(callback: () => void) {\n        this.pauseCallbacks.push(callback);\n    }\n\n    onCurrentTime(callback: (currentTime: number) => void) {\n        this.currentTimeCallbacks.push(callback);\n    }\n\n    onAudioTrackSelected(callback: (id: string) => void) {\n        this.audioTrackSelectedCallbacks.push(callback);\n    }\n\n    onClose(callback: () => void) {\n        this.closeCallbacks.push(callback);\n    }\n\n    onReady(callback: (duration: number) => void) {\n        this.readyCallbacks.push(callback);\n    }\n\n    onSubtitles(callback: (subtitles: SubtitleModel[]) => void) {\n        this.subtitlesCallbacks.push(callback);\n    }\n\n    onOffset(callback: (offset: number) => void) {\n        this.offsetCallbacks.push(callback);\n    }\n\n    onPlayMode(callback: (playMode: PlayMode) => void) {\n        this.playModeCallbacks.push(callback);\n    }\n\n    onHideSubtitlePlayerToggle(callback: (hidden: boolean) => void) {\n        this.hideSubtitlePlayerToggleCallbacks.push(callback);\n    }\n\n    onAppBarToggle(callback: (hidden: boolean) => void) {\n        this.appBarToggleCallbacks.push(callback);\n    }\n\n    onAnkiDialogRequest(callback: () => void) {\n        this.ankiDialogRequestCallbacks.push(callback);\n    }\n\n    onFinishedAnkiDialogRequest(callback: (resume: boolean) => void) {\n        this.finishedAnkiDialogRequestCallbacks.push(callback);\n    }\n\n    onSubtitleSettings(callback: (subtitleSettings: SubtitleSettings) => void) {\n        this.subtitleSettingsCallbacks.push(callback);\n    }\n\n    onMiscSettings(callback: (miscSettings: MiscSettings) => void) {\n        this.miscSettingsCallbacks.push(callback);\n    }\n\n    onAnkiSettings(callback: (ankiSettings: AnkiSettings) => void) {\n        this.ankiSettingsCallbacks.push(callback);\n    }\n\n    ready(\n        duration: number,\n        paused: boolean,\n        audioTracks: AudioTrackModel[] | undefined,\n        selectedAudioTrack: string | undefined\n    ) {\n        const message: ReadyFromVideoMessage = {\n            command: 'ready',\n            duration: duration,\n            paused: paused,\n            currentTime: 0,\n            audioTracks: audioTracks,\n            selectedAudioTrack: selectedAudioTrack,\n            playbackRate: 1,\n        };\n\n        this.channel?.postMessage(message);\n    }\n\n    readyState(readyState: number) {\n        const message: ReadyStateFromVideoMessage = { command: 'readyState', value: readyState };\n        this.channel?.postMessage(message);\n    }\n\n    play() {\n        const message: PlayFromVideoMessage = { command: 'play', echo: true };\n        this.channel?.postMessage(message);\n    }\n\n    pause() {\n        const message: PauseFromVideoMessage = { command: 'pause', echo: true };\n        this.channel?.postMessage(message);\n    }\n\n    audioTrackSelected(id: string) {\n        const message: AudioTrackSelectedFromVideoMessage = { command: 'audioTrackSelected', id: id };\n        this.channel?.postMessage(message);\n    }\n\n    offset(offset: number) {\n        const message: OffsetFromVideoMessage = { command: 'offset', value: offset };\n        this.channel?.postMessage(message);\n    }\n\n    popOutToggle() {\n        this.channel?.postMessage({ command: 'popOutToggle' });\n    }\n\n    copy(\n        subtitle: SubtitleModel,\n        surroundingSubtitles: SubtitleModel[],\n        postMineAction: PostMineAction,\n        preventDuplicate?: boolean\n    ) {\n        const message: CopyMessage = {\n            command: 'copy',\n            subtitle: subtitle,\n            surroundingSubtitles: surroundingSubtitles,\n            preventDuplicate: preventDuplicate,\n            postMineAction: postMineAction,\n        };\n\n        this.channel?.postMessage(message);\n    }\n\n    playMode(playMode: PlayMode) {\n        this.channel?.postMessage({ command: 'playMode', playMode: playMode });\n    }\n\n    hideSubtitlePlayerToggle() {\n        this.channel?.postMessage({ command: 'hideSubtitlePlayerToggle' });\n    }\n\n    appBarToggle() {\n        this.channel?.postMessage({ command: 'appBarToggle' });\n    }\n\n    ankiDialogRequest(forwardToVideo: boolean) {\n        const message: AnkiDialogRequestFromVideoMessage = {\n            command: 'ankiDialogRequest',\n            forwardToVideo: forwardToVideo,\n        };\n        this.channel?.postMessage(message);\n    }\n\n    toggleSubtitleTrackInList(track: number) {\n        const message: ToggleSubtitleTrackInListFromVideoMessage = {\n            command: 'toggleSubtitleTrackInList',\n            track: track,\n        };\n        this.channel?.postMessage(message);\n    }\n\n    close() {\n        if (this.channel) {\n            this.channel.postMessage({ command: 'exit' });\n            this.channel.close();\n            this.channel = undefined;\n            this.playCallbacks = [];\n            this.pauseCallbacks = [];\n            this.currentTimeCallbacks = [];\n            this.audioTrackSelectedCallbacks = [];\n            this.closeCallbacks = [];\n            this.readyCallbacks = [];\n            this.subtitlesCallbacks = [];\n            this.offsetCallbacks = [];\n            this.playModeCallbacks = [];\n            this.hideSubtitlePlayerToggleCallbacks = [];\n            this.appBarToggleCallbacks = [];\n            this.ankiDialogRequestCallbacks = [];\n            this.finishedAnkiDialogRequestCallbacks = [];\n            this.subtitleSettingsCallbacks = [];\n            this.miscSettingsCallbacks = [];\n            this.ankiSettingsCallbacks = [];\n        }\n    }\n}\n","import { CopySubtitleMessage, DefaultKeyBinder, KeyBinder, PostMineAction, SubtitleModel } from '@project/common';\nimport ChromeExtension, { ExtensionMessage } from './ChromeExtension';\n\nexport default class AppKeyBinder implements KeyBinder {\n    private readonly defaultKeyBinder: DefaultKeyBinder;\n    private readonly extension: ChromeExtension;\n    private readonly copyHandlers: ((event: KeyboardEvent) => void)[] = [];\n    private readonly ankiExportHandlers: ((event: KeyboardEvent) => void)[] = [];\n    private readonly updateLastCardHandlers: ((event: KeyboardEvent) => void)[] = [];\n    private readonly onExtensionMessage: (message: ExtensionMessage) => void;\n\n    constructor(keyBinder: DefaultKeyBinder, extension: ChromeExtension) {\n        this.defaultKeyBinder = keyBinder;\n        this.extension = extension;\n\n        this.onExtensionMessage = (message: ExtensionMessage) => {\n            if (message.data.command === 'copy-subtitle') {\n                const command = message.data as CopySubtitleMessage;\n                let handlers: ((event: KeyboardEvent) => void)[] | undefined;\n\n                switch (command.postMineAction) {\n                    case PostMineAction.none:\n                        handlers = this.copyHandlers;\n                        break;\n                    case PostMineAction.showAnkiDialog:\n                        handlers = this.ankiExportHandlers;\n                        break;\n                    case PostMineAction.updateLastCard:\n                        handlers = this.updateLastCardHandlers;\n                        break;\n                    default:\n                        console.error('Unknown post mine action ' + command.postMineAction);\n                }\n\n                for (const h of handlers!) {\n                    h(new KeyboardEvent('mock'));\n                }\n            }\n        };\n        extension.subscribe(this.onExtensionMessage);\n    }\n\n    bindCopy<T extends SubtitleModel = SubtitleModel>(\n        onCopy: (event: KeyboardEvent, subtitle: T) => void,\n        disabledGetter: () => boolean,\n        subtitleGetter: () => T | undefined,\n        useCapture?: boolean | undefined\n    ): () => void {\n        if (this.extension.installed) {\n            const handler = this.defaultKeyBinder.copyHandler(onCopy, disabledGetter, subtitleGetter);\n            this.copyHandlers.push(handler);\n            return () => {\n                this._remove(handler, this.copyHandlers);\n            };\n        }\n\n        return this.defaultKeyBinder.bindCopy(onCopy, disabledGetter, subtitleGetter, useCapture);\n    }\n\n    bindAnkiExport(\n        onAnkiExport: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        if (this.extension.installed) {\n            const handler = this.defaultKeyBinder.ankiExportHandler(onAnkiExport, disabledGetter);\n            this.ankiExportHandlers.push(handler);\n            return () => {\n                this._remove(handler, this.ankiExportHandlers);\n            };\n        }\n\n        return this.defaultKeyBinder.bindAnkiExport(onAnkiExport, disabledGetter, useCapture);\n    }\n\n    bindUpdateLastCard(\n        onUpdateLastCard: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        if (this.extension.installed) {\n            const handler = this.defaultKeyBinder.updateLastCardHandler(onUpdateLastCard, disabledGetter);\n            this.updateLastCardHandlers.push(handler);\n            return () => {\n                this._remove(handler, this.updateLastCardHandlers);\n            };\n        }\n\n        return this.defaultKeyBinder.bindUpdateLastCard(onUpdateLastCard, disabledGetter, useCapture);\n    }\n\n    private _remove(callback: (event: KeyboardEvent) => void, list: ((event: KeyboardEvent) => void)[]) {\n        for (let i = list.length - 1; i >= 0; --i) {\n            if (callback === list[i]) {\n                list.splice(i, 1);\n                break;\n            }\n        }\n    }\n    \n    bindSeekToSubtitle(\n        onSeekToSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindSeekToSubtitle(onSeekToSubtitle, disabledGetter, timeGetter, subtitlesGetter, useCapture);\n    }\n\n    bindSeekToBeginningOfCurrentSubtitle(\n        onSeekToBeginningOfCurrentSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindSeekToBeginningOfCurrentSubtitle(onSeekToBeginningOfCurrentSubtitle, disabledGetter, timeGetter, subtitlesGetter, useCapture);\n    }\n\n    bindSeekBackwardOrForward(\n        onSeekBackwardOrForward: (event: KeyboardEvent, forward: boolean) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindSeekBackwardOrForward(onSeekBackwardOrForward, disabledGetter, useCapture);\n    }\n\n    bindOffsetToSubtitle(\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindOffsetToSubtitle(onOffsetChange, disabledGetter, timeGetter, subtitlesGetter, useCapture);\n    }\n\n    bindAdjustOffset(\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\n        disabledGetter: () => boolean,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindAdjustOffset(onOffsetChange, disabledGetter, subtitlesGetter, useCapture);\n    }\n\n    bindToggleSubtitles(\n        onToggleSubtitles: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindToggleSubtitles(onToggleSubtitles, disabledGetter, useCapture);\n    }\n\n    bindToggleSubtitleTrackInVideo(\n        onToggleSubtitleTrack: (event: KeyboardEvent, extra: any) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindToggleSubtitleTrackInVideo(onToggleSubtitleTrack, disabledGetter, useCapture);\n    }\n\n    bindToggleSubtitleTrackInList(\n        onToggleSubtitleTrackInList: (event: KeyboardEvent, extra: any) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindToggleSubtitleTrackInList(onToggleSubtitleTrackInList, disabledGetter, useCapture);\n    }\n\n    bindPlay(\n        onPlay: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindPlay(onPlay, disabledGetter, useCapture);\n    }\n\n    bindAutoPause(\n        onAutoPause: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindAutoPause(onAutoPause, disabledGetter, useCapture);\n    }\n\n    bindCondensedPlayback(\n        onCondensedPlayback: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindCondensedPlayback(onCondensedPlayback, disabledGetter, useCapture);\n    }\n}\n","import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { isMobile } from 'react-device-detect';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useWindowSize } from '../hooks/useWindowSize';\nimport { arrayEquals, computeStyles } from '../services/Util';\nimport {\n    surroundingSubtitles,\n    mockSurroundingSubtitles,\n    humanReadableTime,\n    SubtitleModel,\n    AudioTrackModel,\n    PostMineAction,\n    PlayMode,\n    MiscSettings,\n    SubtitleSettings,\n    DefaultKeyBinder,\n    AnkiSettings,\n    SubtitleCollection,\n    AutoPausePreference,\n} from '@project/common';\nimport { SubtitleTextImage } from '@project/common/components';\nimport Alert from './Alert';\nimport Clock from '../services/Clock';\nimport Controls, { Point } from './Controls';\nimport PlayerChannel from '../services/PlayerChannel';\nimport SettingsProvider from '../services/SettingsProvider';\nimport AppKeyBinder from '../services/AppKeyBinder';\nimport ChromeExtension from '../services/ChromeExtension';\nimport PlaybackPreferences from '../services/PlaybackPreferences';\n\ninterface ExperimentalHTMLVideoElement extends HTMLVideoElement {\n    readonly audioTracks: any;\n}\n\nconst useStyles = makeStyles({\n    root: {\n        position: 'relative',\n        backgroundColor: 'black',\n        height: '100vh',\n        overflow: 'hidden',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    video: {\n        margin: 'auto',\n    },\n    cursorHidden: {\n        cursor: 'none',\n    },\n    subtitleContainer: {\n        position: 'absolute',\n        paddingLeft: 20,\n        paddingRight: 20,\n        bottom: 100,\n        textAlign: 'center',\n        whiteSpace: 'pre-wrap',\n        lineHeight: 'normal',\n    },\n});\n\nfunction notifyReady(\n    element: ExperimentalHTMLVideoElement,\n    playerChannel: PlayerChannel,\n    setAudioTracks: React.Dispatch<React.SetStateAction<AudioTrackModel[] | undefined>>,\n    setSelectedAudioTrack: React.Dispatch<React.SetStateAction<string | undefined>>\n) {\n    if (window.outerWidth && element.videoWidth > 0 && element.videoHeight > 0) {\n        const availWidth = window.screen.availWidth - (window.outerWidth - window.innerWidth);\n        const availHeight = window.screen.availHeight - (window.outerHeight - window.innerHeight);\n        const resizeRatio = Math.min(1, Math.min(availWidth / element.videoWidth, availHeight / element.videoHeight));\n\n        window.resizeTo(\n            resizeRatio * element.videoWidth + (window.outerWidth - window.innerWidth),\n            resizeRatio * element.videoHeight + (window.outerHeight - window.innerHeight)\n        );\n    }\n\n    let tracks: AudioTrackModel[] | undefined;\n    let selectedTrack: string | undefined;\n\n    if (element.audioTracks) {\n        tracks = [];\n\n        for (let t of element.audioTracks) {\n            tracks.push({\n                id: t.id,\n                label: t.label,\n                language: t.language,\n            });\n\n            if (t.enabled) {\n                selectedTrack = t.id;\n            }\n        }\n    } else {\n        tracks = undefined;\n        selectedTrack = undefined;\n    }\n\n    setAudioTracks(tracks);\n    setSelectedAudioTrack(selectedTrack);\n    playerChannel.ready(element.duration, element.paused, tracks, selectedTrack);\n}\n\nfunction errorMessage(element: HTMLVideoElement) {\n    let error;\n    switch (element.error?.code) {\n        case 1:\n            error = 'Aborted';\n            break;\n        case 2:\n            error = 'Network error';\n            break;\n        case 3:\n            error = 'Decoding error';\n            break;\n        case 4:\n            error = 'Source not supported';\n            break;\n        default:\n            error = 'Unknown error';\n            break;\n    }\n\n    return error + ': ' + (element.error?.message || '<details missing>');\n}\n\nfunction useFullscreen() {\n    const [fullscreen, setFullscreen] = useState(Boolean(document.fullscreenElement));\n\n    useEffect(() => {\n        const listener = () => setFullscreen(Boolean(document.fullscreenElement));\n        document.addEventListener('fullscreenchange', listener);\n\n        return () => document.removeEventListener('fullscreenchange', listener);\n    }, []);\n\n    return fullscreen;\n}\n\ninterface Props {\n    settingsProvider: SettingsProvider;\n    playbackPreferences: PlaybackPreferences;\n    extension: ChromeExtension;\n    videoFile: string;\n    channel: string;\n    popOut: boolean;\n    onError: (error: string) => void;\n    onPlayModeChangedViaBind: (oldPlayMode: PlayMode, newPlayMode: PlayMode) => void;\n}\n\ninterface IndexedSubtitleModel extends SubtitleModel {\n    index: number;\n}\n\nexport default function VideoPlayer({\n    settingsProvider,\n    playbackPreferences,\n    extension,\n    videoFile,\n    channel,\n    popOut,\n    onError,\n    onPlayModeChangedViaBind,\n}: Props) {\n    const classes = useStyles();\n    const poppingInRef = useRef<boolean>();\n    const videoRef = useRef<ExperimentalHTMLVideoElement>();\n    const [windowWidth, windowHeight] = useWindowSize(true);\n    if (videoRef.current) {\n        videoRef.current.width = windowWidth;\n        videoRef.current.height = windowHeight;\n    }\n    const playerChannel = useMemo(() => new PlayerChannel(channel), [channel]);\n    const [playing, setPlaying] = useState<boolean>(false);\n    const fullscreen = useFullscreen();\n    const fullscreenRef = useRef<boolean>();\n    fullscreenRef.current = fullscreen;\n    const playingRef = useRef<boolean>();\n    playingRef.current = playing;\n    const [length, setLength] = useState<number>(0);\n    const [offset, setOffset] = useState<number>(0);\n    const [audioTracks, setAudioTracks] = useState<AudioTrackModel[]>();\n    const [selectedAudioTrack, setSelectedAudioTrack] = useState<string>();\n    const [subtitles, setSubtitles] = useState<IndexedSubtitleModel[]>([]);\n    const subtitleCollection = useMemo<SubtitleCollection<IndexedSubtitleModel>>(\n        () =>\n            new SubtitleCollection<IndexedSubtitleModel>(subtitles, {\n                returnLastShown: false,\n                showingCheckRadiusMs: 150,\n            }),\n        [subtitles]\n    );\n    const [showSubtitles, setShowSubtitles] = useState<IndexedSubtitleModel[]>([]);\n    const [startedShowingSubtitle, setStartedShowingSubtitle] = useState<IndexedSubtitleModel>();\n    const [willStopShowingSubtitle, setWillStopShowingSubtitle] = useState<IndexedSubtitleModel>();\n    const [subtitlesEnabled, setSubtitlesEnabled] = useState(true);\n    const [disabledSubtitleTracks, setDisabledSubtitleTracks] = useState<{ [index: number]: boolean }>({});\n    const [playMode, setPlayMode] = useState<PlayMode>(PlayMode.normal);\n    const [subtitlePlayerHidden, setSubtitlePlayerHidden] = useState<boolean>(false);\n    const [appBarHidden, setAppBarHidden] = useState<boolean>(playbackPreferences.theaterMode);\n    const showSubtitlesRef = useRef<IndexedSubtitleModel[]>([]);\n    showSubtitlesRef.current = showSubtitles;\n    const clock = useMemo<Clock>(() => new Clock(), []);\n    const mousePositionRef = useRef<Point>({ x: 0, y: 0 });\n    const [showCursor, setShowCursor] = useState<boolean>(false);\n    const lastMouseMovementTimestamp = useRef<number>(0);\n    const containerRef = useRef<HTMLDivElement>(null);\n    const [alert, setAlert] = useState<string>();\n    const [alertOpen, setAlertOpen] = useState<boolean>(false);\n    const [returnToFullscreenOnFinishedAnkiDialogRequest, setReturnToFullscreenOnFinishedAnkiDialogRequest] =\n        useState<boolean>(false);\n    const returnToFullscreenOnFinishedAnkiDialogRequestRef = useRef<boolean>();\n    returnToFullscreenOnFinishedAnkiDialogRequestRef.current = returnToFullscreenOnFinishedAnkiDialogRequest;\n    const [miscSettings, setMiscSettings] = useState<MiscSettings>(settingsProvider.miscSettings);\n    const [subtitleSettings, setSubtitleSettings] = useState<SubtitleSettings>(settingsProvider.subtitleSettings);\n    const [ankiSettings, setAnkiSettings] = useState<AnkiSettings>(settingsProvider.ankiSettings);\n    const keyBinder = useMemo<AppKeyBinder>(\n        () => new AppKeyBinder(new DefaultKeyBinder(miscSettings.keyBindSet), extension),\n        [miscSettings.keyBindSet, extension]\n    );\n    const videoRefCallback = useCallback(\n        (element: HTMLVideoElement) => {\n            if (element) {\n                const videoElement = element as ExperimentalHTMLVideoElement;\n                videoRef.current = videoElement;\n\n                if (videoElement.readyState === 4) {\n                    notifyReady(videoElement, playerChannel, setAudioTracks, setSelectedAudioTrack);\n                } else {\n                    videoElement.onloadeddata = (event) => {\n                        notifyReady(videoElement, playerChannel, setAudioTracks, setSelectedAudioTrack);\n                    };\n                }\n\n                videoElement.oncanplay = (event) => {\n                    playerChannel.readyState(4);\n\n                    if (playingRef.current) {\n                        clock.start();\n                    }\n                };\n\n                videoElement.ontimeupdate = (event) => clock.setTime(element.currentTime * 1000);\n\n                videoElement.onerror = (event) => onError(errorMessage(element));\n            }\n        },\n        [clock, playerChannel, onError]\n    );\n\n    function selectAudioTrack(id: string) {\n        const audioTracks = videoRef.current?.audioTracks;\n\n        if (!audioTracks) {\n            return;\n        }\n\n        // @ts-ignore\n        for (const t of audioTracks) {\n            if (t.id === id) {\n                t.enabled = true;\n            } else {\n                t.enabled = false;\n            }\n        }\n    }\n\n    const updateSubtitlesWithOffset = useCallback((offset: number) => {\n        setOffset(offset);\n        setSubtitles((subtitles) =>\n            subtitles.map((s, i) => ({\n                text: s.text,\n                textImage: s.textImage,\n                start: s.originalStart + offset,\n                originalStart: s.originalStart,\n                end: s.originalEnd + offset,\n                originalEnd: s.originalEnd,\n                track: s.track,\n                index: i,\n            }))\n        );\n    }, []);\n\n    useEffect(() => {\n        playerChannel.onReady((duration) => setLength(duration));\n\n        playerChannel.onPlay(async () => {\n            await videoRef.current?.play();\n            clock.start();\n            setPlaying(true);\n        });\n\n        playerChannel.onPause(() => {\n            videoRef.current?.pause();\n            clock.stop();\n            setPlaying(false);\n        });\n\n        playerChannel.onCurrentTime((currentTime) => {\n            if (videoRef.current) {\n                videoRef.current.currentTime = currentTime;\n            }\n\n            if (videoRef.current?.readyState === 4) {\n                playerChannel.readyState(4);\n            }\n\n            clock.stop();\n            clock.setTime(currentTime * 1000);\n        });\n\n        playerChannel.onAudioTrackSelected((id) => {\n            selectAudioTrack(id);\n            setSelectedAudioTrack(id);\n            playerChannel.audioTrackSelected(id);\n        });\n\n        playerChannel.onClose(() => {\n            playerChannel.close();\n            window.close();\n        });\n\n        playerChannel.onSubtitles((subtitles) => {\n            setSubtitles(subtitles.map((s, i) => ({ ...s, index: i })));\n\n            if (subtitles && subtitles.length > 0) {\n                const s = subtitles[0];\n                const offset = s.start - s.originalStart;\n                setOffset(offset);\n            }\n        });\n\n        playerChannel.onPlayMode((playMode) => setPlayMode(playMode));\n        playerChannel.onHideSubtitlePlayerToggle((hidden) => setSubtitlePlayerHidden(hidden));\n        playerChannel.onAppBarToggle((hidden) => setAppBarHidden(hidden));\n        playerChannel.onAnkiDialogRequest(() => {\n            if (fullscreenRef.current && !popOut) {\n                document.exitFullscreen();\n                setReturnToFullscreenOnFinishedAnkiDialogRequest(true);\n            }\n        });\n\n        playerChannel.onFinishedAnkiDialogRequest(async (resume) => {\n            if (returnToFullscreenOnFinishedAnkiDialogRequestRef.current) {\n                if (resume) {\n                    try {\n                        await containerRef.current?.requestFullscreen();\n                    } catch (e) {\n                        console.error(e);\n                    }\n                }\n\n                setReturnToFullscreenOnFinishedAnkiDialogRequest(false);\n            }\n        });\n\n        playerChannel.onSubtitleSettings(setSubtitleSettings);\n        playerChannel.onMiscSettings(setMiscSettings);\n        playerChannel.onAnkiSettings(setAnkiSettings);\n        playerChannel.onOffset(updateSubtitlesWithOffset);\n\n        window.onbeforeunload = (e) => {\n            if (!poppingInRef.current) {\n                playerChannel.close();\n            }\n        };\n\n        return () => playerChannel.close();\n    }, [clock, playerChannel, updateSubtitlesWithOffset, popOut]);\n\n    const handlePlay = useCallback(() => {\n        if (videoRef.current) {\n            playerChannel.play();\n        }\n    }, [playerChannel]);\n\n    const handlePause = useCallback(() => playerChannel.pause(), [playerChannel]);\n\n    const handleSeek = useCallback(\n        (progress: number) => {\n            if (playingRef.current) {\n                clock.stop();\n            }\n\n            const time = progress * length;\n            playerChannel.currentTime = time / 1000;\n        },\n        [length, clock, playerChannel]\n    );\n\n    function handleMouseMove(e: React.MouseEvent<HTMLDivElement>) {\n        lastMouseMovementTimestamp.current = Date.now();\n\n        if (!containerRef.current) {\n            return;\n        }\n\n        var bounds = containerRef.current.getBoundingClientRect();\n        mousePositionRef.current.x = e.clientX - bounds.left;\n        mousePositionRef.current.y = e.clientY - bounds.top;\n    }\n\n    const handleAudioTrackSelected = useCallback(\n        (id: string) => {\n            if (playingRef.current) {\n                clock.stop();\n                playerChannel.pause();\n            }\n\n            selectAudioTrack(id);\n            setSelectedAudioTrack(id);\n            playerChannel.currentTime = 0;\n            playerChannel.audioTrackSelected(id);\n        },\n        [playerChannel, clock]\n    );\n\n    useEffect(() => {\n        if (!subtitles || subtitles.length === 0) {\n            return;\n        }\n\n        const interval = setInterval(() => {\n            const now = clock.time(length);\n            let showSubtitles = [];\n            const slice = subtitleCollection.subtitlesAt(now);\n\n            for (const s of slice.showing) {\n                if (!disabledSubtitleTracks[s.track]) {\n                    showSubtitles.push(s);\n                }\n            }\n\n            if (playMode === PlayMode.autoPause) {\n                if (miscSettings.autoPausePreference === AutoPausePreference.atStart) {\n                    if (\n                        slice.startedShowing &&\n                        slice.startedShowing !== startedShowingSubtitle &&\n                        !disabledSubtitleTracks[slice.startedShowing.track]\n                    ) {\n                        playerChannel.pause();\n                        setStartedShowingSubtitle(slice.startedShowing);\n                    }\n                } else {\n                    if (\n                        slice.willStopShowing &&\n                        slice.willStopShowing !== willStopShowingSubtitle &&\n                        !disabledSubtitleTracks[slice.willStopShowing.track]\n                    ) {\n                        playerChannel.pause();\n                        setWillStopShowingSubtitle(slice.willStopShowing);\n                    }\n                }\n            }\n\n            showSubtitles = showSubtitles.sort((s1, s2) => s1.track - s2.track);\n\n            if (!arrayEquals(showSubtitles, showSubtitlesRef.current, (s1, s2) => s1.index === s2.index)) {\n                setShowSubtitles(showSubtitles);\n            }\n        }, 100);\n\n        return () => clearTimeout(interval);\n    }, [\n        subtitleCollection,\n        playerChannel,\n        playMode,\n        subtitles,\n        disabledSubtitleTracks,\n        clock,\n        length,\n        miscSettings,\n        startedShowingSubtitle,\n        willStopShowingSubtitle,\n    ]);\n\n    const handleOffsetChange = useCallback(\n        (offset: number) => {\n            updateSubtitlesWithOffset(offset);\n            playerChannel.offset(offset);\n        },\n        [playerChannel, updateSubtitlesWithOffset]\n    );\n\n    useEffect(() => {\n        return keyBinder.bindSeekToSubtitle(\n            (event, subtitle) => {\n                event.stopPropagation();\n                event.preventDefault();\n                playerChannel.currentTime = subtitle.start / 1000;\n            },\n            () => !videoRef.current,\n            () => clock.time(length),\n            () => subtitles\n        );\n    }, [keyBinder, playerChannel, subtitles, length, clock]);\n\n    useEffect(() => {\n        return keyBinder.bindSeekToBeginningOfCurrentSubtitle(\n            (event, subtitle) => {\n                event.stopPropagation();\n                event.preventDefault();\n                playerChannel.currentTime = subtitle.start / 1000;\n            },\n            () => !videoRef.current,\n            () => clock.time(length),\n            () => subtitles\n        );\n    }, [keyBinder, playerChannel, subtitles, length, clock]);\n\n    useEffect(() => {\n        return keyBinder.bindSeekBackwardOrForward(\n            (event, forward) => {\n                event.stopPropagation();\n                event.preventDefault();\n                const timestamp = clock.time(length);\n\n                if (forward) {\n                    playerChannel.currentTime = Math.min(length / 1000, (timestamp + 10000) / 1000);\n                } else {\n                    playerChannel.currentTime = Math.max(0, (timestamp - 10000) / 1000);\n                }\n            },\n            () => !videoRef.current\n        );\n    }, [keyBinder, playerChannel, length, clock]);\n\n    const calculateSurroundingSubtitles = useCallback(\n        (index: number) => {\n            return surroundingSubtitles(\n                subtitles,\n                index,\n                ankiSettings.surroundingSubtitlesCountRadius,\n                ankiSettings.surroundingSubtitlesTimeRadius\n            );\n        },\n        [subtitles, ankiSettings.surroundingSubtitlesCountRadius, ankiSettings.surroundingSubtitlesTimeRadius]\n    );\n\n    useEffect(() => {\n        return keyBinder.bindCopy<IndexedSubtitleModel>(\n            (event, subtitle) => {\n                event.stopPropagation();\n                event.preventDefault();\n\n                const noSubtitles = !subtitles || subtitles.length === 0;\n\n                playerChannel.copy(\n                    subtitle,\n                    noSubtitles\n                        ? mockSurroundingSubtitles(subtitle, length, 5000)\n                        : calculateSurroundingSubtitles(subtitle.index),\n                    PostMineAction.none\n                );\n\n                if (fullscreen) {\n                    setAlert(\n                        subtitle.text === ''\n                            ? `Saved ${humanReadableTime(subtitle.start)}`\n                            : `Copied: \"${subtitle.text}\"`\n                    );\n                    setAlertOpen(true);\n                }\n            },\n            () => false,\n            () => {\n                if (!subtitles || subtitles.length === 0) {\n                    const timestamp = clock.time(length);\n                    const end = Math.min(timestamp + 5000, length);\n\n                    return {\n                        text: '',\n                        start: timestamp,\n                        originalStart: timestamp,\n                        end: end,\n                        originalEnd: end,\n                        track: 0,\n                        index: 0,\n                    };\n                }\n\n                if (!showSubtitlesRef.current || showSubtitlesRef.current.length === 0) {\n                    return undefined;\n                }\n\n                return showSubtitlesRef.current[0];\n            }\n        );\n    }, [keyBinder, playerChannel, clock, length, subtitles, calculateSurroundingSubtitles, fullscreen]);\n\n    useEffect(() => {\n        return keyBinder.bindAdjustOffset(\n            (event, offset) => {\n                event.preventDefault();\n                event.stopPropagation();\n                handleOffsetChange(offset);\n            },\n            () => false,\n            () => subtitles\n        );\n    }, [keyBinder, handleOffsetChange, subtitles]);\n\n    useEffect(() => {\n        return keyBinder.bindToggleSubtitles(\n            (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n                setSubtitlesEnabled((enabled) => !enabled);\n            },\n            () => false\n        );\n    }, [keyBinder]);\n\n    useEffect(() => {\n        return keyBinder.bindToggleSubtitleTrackInVideo(\n            (event, track) => {\n                event.preventDefault();\n                event.stopPropagation();\n                setDisabledSubtitleTracks((tracks) => {\n                    const newTracks = { ...tracks };\n                    newTracks[track] = !tracks[track];\n                    return newTracks;\n                });\n            },\n            () => false\n        );\n    }, [keyBinder]);\n\n    useEffect(() => {\n        return keyBinder.bindToggleSubtitleTrackInList(\n            (event, track) => {\n                event.preventDefault();\n                event.stopPropagation();\n                playerChannel.toggleSubtitleTrackInList(track);\n            },\n            () => false\n        );\n    }, [keyBinder, playerChannel]);\n\n    useEffect(() => {\n        return keyBinder.bindOffsetToSubtitle(\n            (event, offset) => {\n                event.preventDefault();\n                event.stopPropagation();\n                handleOffsetChange(offset);\n            },\n            () => false,\n            () => clock.time(length),\n            () => subtitles\n        );\n    }, [keyBinder, handleOffsetChange, subtitles, clock, length]);\n\n    const extractSubtitles = useCallback(\n        (\n            noSubtitleCallback: (subtitle: SubtitleModel, surroundingSubtitles: SubtitleModel[]) => void,\n            subtitleCallback: (subtitle: SubtitleModel, surroundingSubtitles: SubtitleModel[]) => void\n        ) => {\n            if (!subtitles || subtitles.length === 0) {\n                const timestamp = clock.time(length);\n                const end = Math.min(timestamp + 5000, length);\n                const subtitle = {\n                    text: '',\n                    start: timestamp,\n                    originalStart: timestamp,\n                    end: end,\n                    originalEnd: end,\n                    track: 0,\n                };\n\n                noSubtitleCallback(subtitle, mockSurroundingSubtitles(subtitle, length, 5000));\n            } else if (showSubtitlesRef.current && showSubtitlesRef.current.length > 0) {\n                const currentSubtitle = showSubtitlesRef.current[0];\n                subtitleCallback(currentSubtitle, calculateSurroundingSubtitles(currentSubtitle.index));\n            }\n        },\n        [subtitles, calculateSurroundingSubtitles, length, clock]\n    );\n\n    useEffect(() => {\n        return keyBinder.bindAnkiExport(\n            (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n\n                extractSubtitles(\n                    (subtitle, surroundingSubtitles) =>\n                        playerChannel.copy(subtitle, surroundingSubtitles, PostMineAction.showAnkiDialog, false),\n                    (subtitle, surroundingSubtitles) =>\n                        playerChannel.copy(subtitle, surroundingSubtitles, PostMineAction.showAnkiDialog, true)\n                );\n            },\n            () => false\n        );\n    }, [keyBinder, playerChannel, extractSubtitles, fullscreen]);\n\n    useEffect(() => {\n        return keyBinder.bindUpdateLastCard(\n            (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n\n                extractSubtitles(\n                    (subtitle, surroundingSubtitles) =>\n                        playerChannel.copy(subtitle, surroundingSubtitles, PostMineAction.updateLastCard, false),\n                    (subtitle, surroundingSubtitles) =>\n                        playerChannel.copy(subtitle, surroundingSubtitles, PostMineAction.updateLastCard, true)\n                );\n            },\n            () => false\n        );\n    }, [keyBinder, playerChannel, extractSubtitles]);\n\n    useEffect(() => {\n        return keyBinder.bindPlay(\n            (event) => {\n                event.preventDefault();\n\n                if (playing) {\n                    playerChannel.pause();\n                } else {\n                    playerChannel.play();\n                }\n            },\n            () => false\n        );\n    }, [keyBinder, playing, playerChannel]);\n\n    const togglePlayMode = useCallback(\n        (event: KeyboardEvent, togglePlayMode: PlayMode) => {\n            event.preventDefault();\n            const newPlayMode = playMode === togglePlayMode ? PlayMode.normal : togglePlayMode;\n            playerChannel.playMode(newPlayMode);\n            onPlayModeChangedViaBind(playMode, newPlayMode);\n        },\n        [playMode, playerChannel, onPlayModeChangedViaBind]\n    );\n\n    useEffect(() => {\n        return keyBinder.bindAutoPause(\n            (event) => togglePlayMode(event, PlayMode.autoPause),\n            () => false\n        );\n    }, [keyBinder, togglePlayMode]);\n\n    useEffect(() => {\n        return keyBinder.bindCondensedPlayback(\n            (event) => togglePlayMode(event, PlayMode.condensed),\n            () => false\n        );\n    }, [keyBinder, togglePlayMode]);\n\n    const handleSubtitlesToggle = useCallback(() => setSubtitlesEnabled((subtitlesEnabled) => !subtitlesEnabled), []);\n\n    const handleFullscreenToggle = useCallback(() => {\n        if (fullscreen) {\n            document.exitFullscreen();\n        } else {\n            containerRef.current?.requestFullscreen();\n        }\n    }, [fullscreen]);\n\n    const handleVolumeChange = useCallback((volume: number) => {\n        if (videoRef.current) {\n            videoRef.current.volume = volume;\n        }\n    }, []);\n\n    const handlePopOutToggle = useCallback(() => {\n        playerChannel.popOutToggle();\n        if (popOut) {\n            poppingInRef.current = true;\n            window.close();\n        }\n    }, [playerChannel, popOut]);\n\n    const handlePlayMode = useCallback(\n        (playMode: PlayMode) => {\n            playerChannel.playMode(playMode);\n        },\n        [playerChannel]\n    );\n\n    const handleClose = useCallback(() => {\n        playerChannel.close();\n        window.close();\n    }, [playerChannel]);\n\n    const handleHideSubtitlePlayerToggle = useCallback(() => {\n        playerChannel.hideSubtitlePlayerToggle();\n    }, [playerChannel]);\n\n    const handleTheaterModeToggle = useCallback(() => {\n        playerChannel.appBarToggle();\n    }, [playerChannel]);\n\n    const handleClick = useCallback(() => {\n        if (playing) {\n            playerChannel.pause();\n        } else {\n            playerChannel.play();\n        }\n    }, [playerChannel, playing]);\n\n    const handleDoubleClick = useCallback(() => handleFullscreenToggle(), [handleFullscreenToggle]);\n\n    const handleAlertClosed = useCallback(() => setAlertOpen(false), []);\n    const {\n        subtitleSize,\n        subtitleColor,\n        subtitleOutlineThickness,\n        subtitleOutlineColor,\n        subtitleBackgroundColor,\n        subtitleBackgroundOpacity,\n        subtitleFontFamily,\n        imageBasedSubtitleScaleFactor,\n    } = subtitleSettings;\n    const subtitleStyles = useMemo(\n        () =>\n            computeStyles({\n                subtitleSize,\n                subtitleColor,\n                subtitleOutlineThickness,\n                subtitleOutlineColor,\n                subtitleBackgroundColor,\n                subtitleBackgroundOpacity,\n                subtitleFontFamily,\n            }),\n        [\n            subtitleSize,\n            subtitleColor,\n            subtitleOutlineThickness,\n            subtitleOutlineColor,\n            subtitleBackgroundColor,\n            subtitleBackgroundOpacity,\n            subtitleFontFamily,\n        ]\n    );\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            if (Date.now() - lastMouseMovementTimestamp.current > 300) {\n                if (showCursor) {\n                    setShowCursor(false);\n                }\n            } else if (!showCursor) {\n                setShowCursor(true);\n            }\n        }, 100);\n\n        return () => clearInterval(interval);\n    }, [showCursor]);\n\n    return (\n        <div ref={containerRef} onMouseMove={handleMouseMove} className={classes.root}>\n            <video\n                preload=\"auto\"\n                controls={false}\n                onClick={handleClick}\n                onDoubleClick={handleDoubleClick}\n                className={showCursor ? classes.video : `${classes.cursorHidden} ${classes.video}`}\n                ref={videoRefCallback}\n                src={videoFile}\n            />\n            {subtitlesEnabled && (\n                <div className={classes.subtitleContainer}>\n                    {showSubtitles.map((subtitle, index) => {\n                        let content;\n\n                        if (subtitle.textImage) {\n                            content = (\n                                <SubtitleTextImage\n                                    availableWidth={videoRef.current?.width ?? window.screen.availWidth}\n                                    subtitle={subtitle}\n                                    scale={imageBasedSubtitleScaleFactor}\n                                />\n                            );\n                        } else {\n                            content = <span style={subtitleStyles}>{subtitle.text}</span>;\n                        }\n\n                        if (index < showSubtitles.length - 1) {\n                            return (\n                                <React.Fragment key={subtitle.index}>\n                                    {content}\n                                    <br />\n                                </React.Fragment>\n                            );\n                        }\n\n                        return <React.Fragment key={subtitle.index}>{content}</React.Fragment>;\n                    })}\n                </div>\n            )}\n            {fullscreen && (\n                <Alert open={alertOpen} onClose={handleAlertClosed} autoHideDuration={3000} severity=\"success\">\n                    {alert}\n                </Alert>\n            )}\n            <Controls\n                mousePositionRef={mousePositionRef}\n                playing={playing}\n                clock={clock}\n                length={length}\n                audioTracks={audioTracks}\n                selectedAudioTrack={selectedAudioTrack}\n                subtitlesToggle={subtitles && subtitles.length > 0}\n                subtitlesEnabled={subtitlesEnabled}\n                offsetEnabled={true}\n                offset={offset}\n                fullscreenEnabled={true}\n                fullscreen={fullscreen}\n                closeEnabled={!popOut}\n                popOut={popOut}\n                volumeEnabled={true}\n                popOutEnabled={!isMobile}\n                playModeEnabled={subtitles && subtitles.length > 0}\n                playMode={playMode}\n                hideSubtitlePlayerToggleEnabled={subtitles?.length > 0 && !popOut && !fullscreen}\n                subtitlePlayerHidden={subtitlePlayerHidden}\n                onPlay={handlePlay}\n                onPause={handlePause}\n                onSeek={handleSeek}\n                onAudioTrackSelected={handleAudioTrackSelected}\n                onSubtitlesToggle={handleSubtitlesToggle}\n                onFullscreenToggle={handleFullscreenToggle}\n                onVolumeChange={handleVolumeChange}\n                onOffsetChange={handleOffsetChange}\n                onPopOutToggle={handlePopOutToggle}\n                onPlayMode={handlePlayMode}\n                onClose={handleClose}\n                onHideSubtitlePlayerToggle={handleHideSubtitlePlayerToggle}\n                playbackPreferences={playbackPreferences}\n                showOnMouseMovement={false}\n                theaterModeToggleEnabled={!popOut && !fullscreen}\n                theaterModeEnabled={appBarHidden}\n                onTheaterModeToggle={handleTheaterModeToggle}\n            />\n        </div>\n    );\n}\n","import {\n    AsbPlayerToVideoCommandV2,\n    ExtensionToAsbPlayerCommand,\n    ExtensionToAsbPlayerCommandTabsCommand,\n    Message,\n    VideoTabModel,\n} from '@project/common';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport interface ExtensionMessage {\n    data: Message;\n    tabId?: number;\n    src?: string;\n}\n\nconst id = uuidv4();\n\nexport default class ChromeExtension {\n    readonly version: string;\n    readonly extensionCommands: { [key: string]: string | undefined };\n\n    tabs: VideoTabModel[];\n    installed: boolean;\n\n    private readonly windowEventListener: (event: MessageEvent) => void;\n    private onMessageCallbacks: Array<(message: ExtensionMessage) => void>;\n    private onTabsCallbacks: Array<(tabs: VideoTabModel[]) => void>;\n    private heartbeatStarted = false;\n\n    constructor(version?: string, extensionCommands?: { [key: string]: string | undefined }) {\n        this.onMessageCallbacks = [];\n        this.onTabsCallbacks = [];\n        this.tabs = [];\n        this.installed = version !== undefined;\n        this.version = version ?? '';\n        this.extensionCommands = extensionCommands ?? {};\n        this.windowEventListener = (event: MessageEvent) => {\n            if (event.source !== window) {\n                return;\n            }\n\n            if (event.data.sender !== 'asbplayer-extension-to-player' || !event.data.message) {\n                return;\n            }\n\n            if (event.data.message.command === 'tabs') {\n                const tabsCommand = event.data as ExtensionToAsbPlayerCommandTabsCommand;\n                this.tabs = tabsCommand.message.tabs;\n\n                for (let c of this.onTabsCallbacks) {\n                    c(this.tabs);\n                }\n\n                if (tabsCommand.message.ackRequested) {\n                    window.postMessage(\n                        {\n                            sender: 'asbplayerv2',\n                            message: {\n                                command: 'ackTabs',\n                                id: id,\n                                receivedTabs: this.tabs,\n                            },\n                        },\n                        '*'\n                    );\n                }\n            } else {\n                const command = event.data as ExtensionToAsbPlayerCommand<Message>;\n\n                for (let c of this.onMessageCallbacks) {\n                    c({\n                        data: command.message,\n                        tabId: command.tabId,\n                        src: command.src,\n                    });\n                }\n            }\n        };\n\n        window.addEventListener('message', this.windowEventListener);\n    }\n\n    startHeartbeat() {\n        if (!this.heartbeatStarted) {\n            this._sendHeartbeat();\n            setInterval(() => this._sendHeartbeat(), 1000);\n            this.heartbeatStarted = true;\n        }\n    }\n\n    private _sendHeartbeat() {\n        window.postMessage(\n            {\n                sender: 'asbplayerv2',\n                message: {\n                    command: 'heartbeat',\n                    id: id,\n                    receivedTabs: this.tabs,\n                },\n            },\n            '*'\n        );\n    }\n\n    openShortcuts() {\n        window.postMessage({\n            sender: 'asbplayerv2',\n            message: {\n                command: 'open-extension-shortcuts',\n            },\n        });\n    }\n\n    sendMessage(message: Message, tabId: number, src: string) {\n        const command: AsbPlayerToVideoCommandV2<Message> = {\n            sender: 'asbplayerv2',\n            message: message,\n            tabId: tabId,\n            src: src,\n        };\n        window.postMessage(command, '*');\n    }\n\n    publishMessage(message: Message) {\n        for (const tab of this.tabs) {\n            const command: AsbPlayerToVideoCommandV2<Message> = {\n                sender: 'asbplayerv2',\n                message: message,\n                tabId: tab.id,\n                src: tab.src,\n            };\n            window.postMessage(command, '*');\n        }\n    }\n\n    subscribeTabs(callback: (tabs: VideoTabModel[]) => void) {\n        this.onTabsCallbacks.push(callback);\n        return () => this._remove(callback, this.onTabsCallbacks);\n    }\n\n    subscribe(callback: (message: ExtensionMessage) => void) {\n        this.onMessageCallbacks.push(callback);\n        return () => this._remove(callback, this.onMessageCallbacks);\n    }\n\n    _remove(callback: Function, callbacks: Function[]) {\n        for (let i = callbacks.length - 1; i >= 0; --i) {\n            if (callback === callbacks[i]) {\n                callbacks.splice(i, 1);\n                break;\n            }\n        }\n    }\n\n    unbind() {\n        window.removeEventListener('message', this.windowEventListener);\n        this.onMessageCallbacks = [];\n        this.onTabsCallbacks = [];\n    }\n}\n","import { ExtensionVersionMessage } from '@project/common';\nimport ChromeExtension from './ChromeExtension';\n\nconst keyBindNameMap: any = {\n    'copy-subtitle': 'copySubtitle',\n    'copy-subtitle-with-dialog': 'ankiExport',\n    'update-last-card': 'updateLastCard',\n};\n\nexport class ChromeExtensionProvider {\n    extension: ChromeExtension = new ChromeExtension();\n    private readonly callbacks: ((extension: ChromeExtension) => void)[] = [];\n\n    constructor() {\n        const listener = (event: MessageEvent) => {\n            if (event.source !== window) {\n                return;\n            }\n\n            if (event.data.sender === 'asbplayer-extension-to-player') {\n                if (event.data.message.command === 'version') {\n                    const message = event.data.message as ExtensionVersionMessage;\n\n                    for (const callback of this.callbacks) {\n                        this.extension.unbind();\n                        const translatedCommands: { [key: string]: string | undefined } = {};\n                        const extensionCommands = message.extensionCommands ?? {};\n                        \n                        for (const extensionCommandName of Object.keys(extensionCommands)) {\n                            translatedCommands[keyBindNameMap[extensionCommandName]] =\n                                extensionCommands[extensionCommandName];\n                        }\n\n                        this.extension = new ChromeExtension(message.version, translatedCommands);\n                        callback(this.extension);\n                    }\n\n                    window.removeEventListener('message', listener);\n                }\n            }\n        };\n\n        window.addEventListener('message', listener);\n    }\n\n    onChromeExtension(callback: (extension: ChromeExtension) => void) {\n        this.callbacks.push(callback);\n        callback(this.extension);\n    }\n}\n","import SettingsProvider from './SettingsProvider';\n\nconst volumeKey = 'volume';\nconst theaterModeKey = 'theaterMode';\nconst offsetKey = 'offset';\nconst defaultVolume = 100;\n\nexport default class PlaybackPreferences {\n    private readonly settingsProvider: SettingsProvider;\n\n    constructor(settingsProvider: SettingsProvider) {\n        this.settingsProvider = settingsProvider;\n    }\n\n    get volume() {\n        const value = localStorage.getItem(volumeKey);\n\n        if (value === null) {\n            return defaultVolume;\n        }\n\n        return Number(value);\n    }\n\n    set volume(volume) {\n        localStorage.setItem(volumeKey, String(volume));\n    }\n\n    get theaterMode() {\n        return localStorage.getItem(theaterModeKey) === 'true' || false;\n    }\n\n    set theaterMode(theaterMode) {\n        localStorage.setItem(theaterModeKey, String(theaterMode));\n    }\n\n    get offset(): number {\n        if (!this.settingsProvider.rememberSubtitleOffset) {\n            return 0;\n        }\n\n        const value = localStorage.getItem(offsetKey);\n\n        if (value === null) {\n            return 0;\n        }\n\n        return Number(value);\n    }\n\n    set offset(offset: number) {\n        localStorage.setItem(offsetKey, String(offset));\n    }\n}\n","import React, { useCallback, useEffect, useState, useMemo, useRef } from 'react';\nimport { Route, Navigate, Routes, useLocation, useSearchParams } from 'react-router-dom';\nimport { ThemeProvider, createTheme, makeStyles, Theme } from '@material-ui/core/styles';\nimport { useWindowSize } from '../hooks/useWindowSize';\nimport { red } from '@material-ui/core/colors';\nimport {\n    Anki,\n    AudioClip,\n    Image,\n    humanReadableTime,\n    AnkiDialogSliderContext,\n    SubtitleModel,\n    VideoTabModel,\n    LegacyPlayerSyncMessage,\n    PlayerSyncMessage,\n    AudioModel,\n    ImageModel,\n    AsbplayerSettings,\n    PostMineAction,\n    PlayMode,\n    download,\n} from '@project/common';\nimport { v4 as uuidv4 } from 'uuid';\nimport clsx from 'clsx';\nimport Alert from './Alert';\nimport { AnkiDialog, ImageDialog } from '@project/common/components';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport DragOverlay from './DragOverlay';\nimport SubtitleReader from '../services/SubtitleReader';\nimport Bar from './Bar';\nimport ChromeExtension, { ExtensionMessage } from '../services/ChromeExtension';\nimport CopyHistory, { CopyHistoryItem } from './CopyHistory';\nimport LandingPage from './LandingPage';\nimport Player, { AnkiDialogFinishedRequest, MediaSources } from './Player';\nimport SettingsDialog from './SettingsDialog';\nimport SettingsProvider from '../services/SettingsProvider';\nimport VideoPlayer from './VideoPlayer';\nimport { Color } from '@material-ui/lab';\nimport { AnkiExportMode } from '@project/common';\nimport { DefaultKeyBinder } from '@project/common/src/KeyBinder';\nimport AppKeyBinder from '../services/AppKeyBinder';\nimport VideoChannel from '../services/VideoChannel';\nimport { ChromeExtensionProvider } from '../services/ChromeExtensionProvider';\nimport PlaybackPreferences from '../services/PlaybackPreferences';\n\nconst latestExtensionVersion = '0.23.0';\nconst extensionUrl = 'https://github.com/killergerbah/asbplayer/releases/latest';\n\nconst useContentStyles = makeStyles<Theme, ContentProps>((theme) => ({\n    content: {\n        flexGrow: 1,\n        transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n        marginRight: 0,\n    },\n    contentShift: ({ drawerWidth }) => ({\n        transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n        marginRight: drawerWidth,\n    }),\n}));\n\nfunction extractSources(files: FileList | File[]): MediaSources {\n    let subtitleFiles = [];\n    let audioFile = undefined;\n    let videoFile = undefined;\n\n    for (let i = 0; i < files.length; ++i) {\n        const f = files[i];\n        const extensionStartIndex = f.name.lastIndexOf('.');\n\n        if (extensionStartIndex === -1) {\n            throw new Error('Unable to determine extension of ' + f.name);\n        }\n\n        const extension = f.name.substring(extensionStartIndex + 1, f.name.length);\n        switch (extension) {\n            case 'ass':\n            case 'srt':\n            case 'vtt':\n            case 'nfvtt':\n            case 'sup':\n            case 'ytxml':\n                subtitleFiles.push(f);\n                break;\n            case 'mkv':\n            case 'mp4':\n            case 'avi':\n                if (videoFile) {\n                    throw new Error('Cannot open two video files simultaneously');\n                }\n                videoFile = f;\n                break;\n            case 'mp3':\n            case 'm4a':\n            case 'aac':\n            case 'flac':\n            case 'ogg':\n            case 'wav':\n            case 'opus':\n                if (audioFile) {\n                    throw new Error('Cannot open two audio files simultaneously');\n                }\n                audioFile = f;\n                break;\n            default:\n                throw new Error('Unsupported extension ' + extension);\n        }\n    }\n\n    if (videoFile && audioFile) {\n        throw new Error('Cannot load both an audio and video file simultaneously');\n    }\n\n    return { subtitleFiles: subtitleFiles, audioFile: audioFile, videoFile: videoFile };\n}\n\nfunction audioClipFromItem(\n    item: CopyHistoryItem,\n    sliderContext: AnkiDialogSliderContext | undefined,\n    paddingStart: number,\n    paddingEnd: number\n) {\n    if (item.audio) {\n        const start = item.audio.start ?? item.start;\n        const end = item.audio.end ?? item.end;\n\n        return AudioClip.fromBase64(\n            item.subtitleFile!.name,\n            Math.max(0, start - (item.audio.paddingStart ?? 0)),\n            end + (item.audio.paddingEnd ?? 0),\n            item.audio.base64,\n            item.audio.extension\n        );\n    }\n\n    if (item.audioFile || item.videoFile) {\n        let start;\n        let end;\n\n        if (sliderContext) {\n            start = sliderContext.subtitleStart;\n            end = sliderContext.subtitleEnd;\n        } else {\n            start = item.start;\n            end = item.end;\n        }\n\n        return AudioClip.fromFile(\n            (item.audioFile || item.videoFile)!,\n            Math.max(0, start - paddingStart),\n            end + paddingEnd,\n            item.audioTrack\n        );\n    }\n\n    return undefined;\n}\n\nfunction imageFromItem(item: CopyHistoryItem, maxWidth: number, maxHeight: number) {\n    if (item.image) {\n        return Image.fromBase64(item.subtitleFile!.name, item.start, item.image.base64, item.image.extension);\n    }\n\n    if (item.videoFile) {\n        return Image.fromFile(item.videoFile, item.mediaTimestamp ?? item.start, maxWidth, maxHeight);\n    }\n\n    return undefined;\n}\n\nfunction itemSourceString(item: CopyHistoryItem | undefined) {\n    if (!item) {\n        return undefined;\n    }\n\n    const source = item.subtitleFile?.name ?? item.audioFile?.name ?? item.videoFile?.name;\n\n    if (!source) {\n        return undefined;\n    }\n\n    return `${source} (${humanReadableTime(item.start)})`;\n}\n\nfunction itemSliderContext(item: CopyHistoryItem) {\n    if (!item) {\n        return undefined;\n    }\n\n    return {\n        subtitleStart: item.start,\n        subtitleEnd: item.end,\n        subtitles: item.surroundingSubtitles || [\n            { start: item.start, end: item.end, text: item.text, track: item.track },\n        ],\n    };\n}\n\nfunction revokeUrls(sources: MediaSources) {\n    if (sources.audioFileUrl) {\n        URL.revokeObjectURL(sources.audioFileUrl);\n    }\n\n    if (sources.videoFileUrl) {\n        URL.revokeObjectURL(sources.videoFileUrl);\n    }\n}\n\ninterface NavigateToVideoProps {\n    searchParams: URLSearchParams;\n}\n\nfunction NavigateToVideo({ searchParams }: NavigateToVideoProps) {\n    const videoFile = searchParams.get('video')!;\n    const channel = searchParams.get('channel')!;\n    const popOut = searchParams.get('popout')!;\n\n    return (\n        <Navigate to={'/video?video=' + encodeURIComponent(videoFile) + '&channel=' + channel + '&popout=' + popOut} />\n    );\n}\n\ninterface RenderVideoProps {\n    searchParams: URLSearchParams;\n    settingsProvider: SettingsProvider;\n    playbackPreferences: PlaybackPreferences;\n    extension: ChromeExtension;\n    onError: (error: string) => void;\n    onPlayModeChangedViaBind: (oldPlayMode: PlayMode, newPlayMode: PlayMode) => void;\n}\n\nfunction RenderVideo({\n    searchParams,\n    settingsProvider,\n    playbackPreferences,\n    extension,\n    onError,\n    onPlayModeChangedViaBind,\n}: RenderVideoProps) {\n    const videoFile = searchParams.get('video')!;\n    const channel = searchParams.get('channel')!;\n    const popOut = searchParams.get('popout')! === 'true';\n\n    return (\n        <VideoPlayer\n            settingsProvider={settingsProvider}\n            playbackPreferences={playbackPreferences}\n            extension={extension}\n            videoFile={videoFile}\n            popOut={popOut}\n            channel={channel}\n            onError={onError}\n            onPlayModeChangedViaBind={onPlayModeChangedViaBind}\n        />\n    );\n}\n\ninterface ContentProps {\n    drawerOpen: boolean;\n    drawerWidth: number;\n    children: React.ReactNode[];\n}\n\nfunction Content(props: ContentProps) {\n    const classes = useContentStyles(props);\n\n    return (\n        <main\n            className={clsx(classes.content, {\n                [classes.contentShift]: props.drawerOpen,\n            })}\n        >\n            {props.children}\n        </main>\n    );\n}\n\nfunction App() {\n    const subtitleReader = useMemo<SubtitleReader>(() => new SubtitleReader(), []);\n    const settingsProvider = useMemo<SettingsProvider>(() => new SettingsProvider(), []);\n    const playbackPreferences = useMemo<PlaybackPreferences>(\n        () => new PlaybackPreferences(settingsProvider),\n        [settingsProvider]\n    );\n    const theme = useMemo<Theme>(\n        () =>\n            createTheme({\n                palette: {\n                    primary: {\n                        main: '#49007a',\n                    },\n                    secondary: {\n                        main: '#ff1f62',\n                    },\n                    error: {\n                        main: red.A400,\n                    },\n                    type: settingsProvider.themeType,\n                },\n            }),\n        [settingsProvider.themeType]\n    );\n    const anki = useMemo<Anki>(() => new Anki(settingsProvider), [settingsProvider]);\n    const location = useLocation();\n    const [searchParams] = useSearchParams();\n\n    const inVideoPlayer = location.pathname === '/video' || searchParams.get('video') !== null;\n    const extensionProvider = useMemo(() => new ChromeExtensionProvider(), []);\n    const [extension, setExtension] = useState<ChromeExtension>(extensionProvider.extension);\n    useEffect(() => extensionProvider.onChromeExtension(setExtension), [extensionProvider]);\n    const keyBinder = useMemo<AppKeyBinder>(\n        () => new AppKeyBinder(new DefaultKeyBinder(settingsProvider.keyBindSet), extension),\n        [settingsProvider.keyBindSet, extension]\n    );\n    const videoFrameRef = useRef<HTMLIFrameElement>(null);\n    const videoChannelRef = useRef<VideoChannel>(null);\n    const [width] = useWindowSize(!inVideoPlayer);\n    const drawerRatio = videoFrameRef.current ? 0.2 : 0.3;\n    const minDrawerSize = videoFrameRef.current ? 150 : 300;\n    const drawerWidth = Math.max(minDrawerSize, width * drawerRatio);\n    const [copiedSubtitles, setCopiedSubtitles] = useState<CopyHistoryItem[]>([]);\n    const copiedSubtitlesRef = useRef<CopyHistoryItem[]>([]);\n    copiedSubtitlesRef.current = copiedSubtitles;\n    const [copyHistoryOpen, setCopyHistoryOpen] = useState<boolean>(false);\n    const [theaterMode, setTheaterMode] = useState<boolean>(playbackPreferences.theaterMode);\n    const [videoPopOut, setVideoPopOut] = useState<boolean>(false);\n    const [alert, setAlert] = useState<string>();\n    const [alertOpen, setAlertOpen] = useState<boolean>(false);\n    const [alertSeverity, setAlertSeverity] = useState<Color>();\n    const [jumpToSubtitle, setJumpToSubtitle] = useState<SubtitleModel>();\n    const [rewindSubtitle, setRewindSubtitle] = useState<SubtitleModel>();\n    const [sources, setSources] = useState<MediaSources>({ subtitleFiles: [] });\n    const [loading, setLoading] = useState<boolean>(false);\n    const [dragging, setDragging] = useState<boolean>(false);\n    const dragEnterRef = useRef<Element | null>(null);\n    const [fileName, setFileName] = useState<string>();\n    const [ankiDialogOpen, setAnkiDialogOpen] = useState<boolean>(false);\n    const [ankiDialogDisabled, setAnkiDialogDisabled] = useState<boolean>(false);\n    const [ankiDialogItem, setAnkiDialogItem] = useState<CopyHistoryItem>();\n    const ankiDialogItemSliderContext = useMemo<AnkiDialogSliderContext | undefined>(\n        () => ankiDialogItem && itemSliderContext(ankiDialogItem),\n        [ankiDialogItem]\n    );\n    const ankiDialogAudioClip = useMemo<AudioClip | undefined>(\n        () =>\n            ankiDialogItem &&\n            audioClipFromItem(\n                ankiDialogItem,\n                ankiDialogItemSliderContext,\n                settingsProvider.audioPaddingStart,\n                settingsProvider.audioPaddingEnd\n            ),\n        [\n            ankiDialogItem,\n            ankiDialogItemSliderContext,\n            settingsProvider.audioPaddingStart,\n            settingsProvider.audioPaddingEnd,\n        ]\n    );\n    const ankiDialogImage = useMemo<Image | undefined>(\n        () =>\n            ankiDialogItem &&\n            imageFromItem(ankiDialogItem, settingsProvider.maxImageWidth, settingsProvider.maxImageHeight),\n        [ankiDialogItem, settingsProvider.maxImageWidth, settingsProvider.maxImageHeight]\n    );\n    const [ankiDialogRequestToVideo, setAnkiDialogRequestToVideo] = useState<number>();\n    const [ankiDialogRequested, setAnkiDialogRequested] = useState<boolean>(false);\n    const [ankiDialogFinishedRequest, setAnkiDialogFinishedRequest] = useState<AnkiDialogFinishedRequest>({\n        timestamp: 0,\n        resume: false,\n    });\n    const [settingsDialogOpen, setSettingsDialogOpen] = useState<boolean>(false);\n    const [settingsDialogScrollToId, setSettingsDialogScrollToId] = useState<string>();\n    const [imageDialogOpen, setImageDialogOpen] = useState<boolean>(false);\n    const [disableKeyEvents, setDisableKeyEvents] = useState<boolean>(false);\n    const [image, setImage] = useState<Image>();\n    const [tab, setTab] = useState<VideoTabModel>();\n    const [availableTabs, setAvailableTabs] = useState<VideoTabModel[]>([]);\n    const fileInputRef = useRef<HTMLInputElement>(null);\n    const ankiDialogRequestedRef = useRef<boolean>(false);\n    ankiDialogRequestedRef.current = ankiDialogRequested;\n    const { subtitleFiles } = sources;\n\n    const handleError = useCallback((message: string) => {\n        setAlertSeverity('error');\n        setAlert(message);\n        setAlertOpen(true);\n    }, []);\n\n    const handleAnkiDialogRequest = useCallback((forwardToVideo?: boolean, ankiDialogItem?: CopyHistoryItem) => {\n        if (!ankiDialogItem && copiedSubtitlesRef.current!.length === 0) {\n            return;\n        }\n\n        const item = ankiDialogItem ?? copiedSubtitlesRef.current[copiedSubtitlesRef.current.length - 1];\n        setAnkiDialogItem(item);\n        setAnkiDialogOpen(true);\n        setAnkiDialogDisabled(false);\n        setDisableKeyEvents(true);\n        setAnkiDialogRequested(true);\n\n        if (forwardToVideo) {\n            setAnkiDialogRequestToVideo(Date.now());\n        }\n    }, []);\n\n    const handleAnkiDialogProceed = useCallback(\n        async (\n            text: string,\n            definition: string,\n            audioClip: AudioClip | undefined,\n            image: Image | undefined,\n            word: string,\n            source: string,\n            url: string,\n            customFieldValues: { [key: string]: string },\n            tags: string[],\n            mode: AnkiExportMode\n        ) => {\n            setAnkiDialogDisabled(true);\n\n            try {\n                const result = await anki.export(\n                    text,\n                    definition,\n                    audioClip,\n                    image,\n                    word,\n                    source,\n                    url,\n                    customFieldValues,\n                    tags,\n                    mode\n                );\n\n                if (mode !== 'gui') {\n                    if (mode === 'default') {\n                        setAlertSeverity('success');\n                        setAlert('Exported card: ' + result);\n                        setAlertOpen(true);\n                    } else if (mode === 'updateLast') {\n                        setAlertSeverity('success');\n                        setAlert('Updated card: ' + result);\n                        setAlertOpen(true);\n                    }\n\n                    setAnkiDialogOpen(false);\n\n                    // We need the ref to avoid causing a state change that would re-init Player\n                    // It's a future task to make the Player init hook depend on less state\n                    if (ankiDialogRequestedRef.current) {\n                        setAnkiDialogFinishedRequest({ timestamp: Date.now(), resume: true });\n                        setAnkiDialogRequested(false);\n                    }\n                }\n            } catch (e) {\n                console.error(e);\n                if (e instanceof Error) {\n                    handleError(e.message);\n                } else {\n                    handleError(String(e));\n                }\n            } finally {\n                setAnkiDialogDisabled(false);\n                setDisableKeyEvents(false);\n            }\n        },\n        [anki, handleError]\n    );\n\n    const handleCopy = useCallback(\n        (\n            subtitle: SubtitleModel,\n            surroundingSubtitles: SubtitleModel[],\n            audioFile: File | undefined,\n            videoFile: File | undefined,\n            subtitleFile: File | undefined,\n            mediaTimestamp: number | undefined,\n            audioTrack: string | undefined,\n            audio: AudioModel | undefined,\n            image: ImageModel | undefined,\n            url: string | undefined,\n            postMineAction: PostMineAction | undefined,\n            fromVideo: boolean | undefined,\n            preventDuplicate: boolean | undefined,\n            id: string | undefined\n        ) => {\n            if (subtitle && settingsProvider.copyToClipboardOnMine) {\n                navigator.clipboard.writeText(subtitle.text);\n            }\n\n            const newCopiedSubtitle = {\n                ...subtitle,\n                surroundingSubtitles: surroundingSubtitles,\n                timestamp: Date.now(),\n                id: id || uuidv4(),\n                name: fileName!,\n                subtitleFile: subtitleFile,\n                audioFile: audioFile,\n                videoFile: videoFile,\n                mediaTimestamp: mediaTimestamp,\n                audioTrack: audioTrack,\n                audio: audio,\n                image: image,\n                url: url,\n            };\n\n            setCopiedSubtitles((copiedSubtitles) => {\n                if (preventDuplicate && copiedSubtitles.length > 0) {\n                    const last = copiedSubtitles[copiedSubtitles.length - 1];\n\n                    if (\n                        subtitle.start === last.start &&\n                        subtitle.end === last.end &&\n                        subtitle.text === last.text &&\n                        subtitleFile?.name === last.subtitleFile?.name\n                    ) {\n                        if (mediaTimestamp !== undefined && mediaTimestamp !== last.mediaTimestamp) {\n                            const newCopiedSubtitles = [...copiedSubtitles];\n                            newCopiedSubtitles[newCopiedSubtitles.length - 1] = newCopiedSubtitle;\n                            return newCopiedSubtitles;\n                        }\n\n                        return copiedSubtitles;\n                    }\n                }\n\n                // Note: we are not dealing with the case where an item with the given ID is already in the list\n                return [...copiedSubtitles, newCopiedSubtitle];\n            });\n\n            switch (postMineAction ?? PostMineAction.none) {\n                case PostMineAction.none:\n                    break;\n                case PostMineAction.showAnkiDialog:\n                    handleAnkiDialogRequest(fromVideo, newCopiedSubtitle);\n                    break;\n                case PostMineAction.updateLastCard:\n                    // FIXME: We should really rename the functions below because we're actually skipping the Anki dialog in this case\n                    setAnkiDialogRequested(true);\n                    handleAnkiDialogProceed(\n                        subtitle.text,\n                        '',\n                        audioClipFromItem(\n                            newCopiedSubtitle,\n                            undefined,\n                            settingsProvider.audioPaddingStart,\n                            settingsProvider.audioPaddingEnd\n                        ),\n                        imageFromItem(\n                            newCopiedSubtitle,\n                            settingsProvider.maxImageWidth,\n                            settingsProvider.maxImageHeight\n                        ),\n                        '',\n                        itemSourceString(newCopiedSubtitle) ?? '',\n                        '',\n                        {},\n                        settingsProvider.tags,\n                        'updateLast'\n                    );\n                    break;\n                default:\n                    throw new Error('Unknown post mine action: ' + postMineAction);\n            }\n\n            if (subtitle) {\n                setAlertSeverity('success');\n                setAlert(\n                    subtitle.text === '' ? `Saved ${humanReadableTime(subtitle.start)}` : `Copied: \"${subtitle.text}\"`\n                );\n                setAlertOpen(true);\n            }\n        },\n        [fileName, settingsProvider, handleAnkiDialogProceed, handleAnkiDialogRequest]\n    );\n\n    const handleOpenCopyHistory = useCallback(() => setCopyHistoryOpen((copyHistoryOpen) => !copyHistoryOpen), []);\n    const handleCloseCopyHistory = useCallback(() => setCopyHistoryOpen(false), []);\n    const handleAppBarToggle = useCallback(() => {\n        playbackPreferences.theaterMode = !playbackPreferences.theaterMode;\n        setTheaterMode(playbackPreferences.theaterMode);\n    }, [playbackPreferences]);\n    const handleVideoPopOut = useCallback(() => {\n        setVideoPopOut((videoPopOut) => !videoPopOut);\n    }, []);\n    const handleOpenSettings = useCallback(() => {\n        setDisableKeyEvents(true);\n        setSettingsDialogOpen(true);\n    }, []);\n    const handleAlertClosed = useCallback(() => setAlertOpen(false), []);\n    const handleImageDialogClosed = useCallback(() => setImageDialogOpen(false), []);\n    const handleCloseSettings = useCallback(\n        (newSettings: AsbplayerSettings) => {\n            settingsProvider.settings = newSettings;\n            setSettingsDialogOpen(false);\n            setSettingsDialogScrollToId(undefined);\n\n            // ATM only the Anki dialog may appear under the settings dialog,\n            // so it's the only one we need to check to re-enable key events\n            setDisableKeyEvents(ankiDialogOpen);\n\n            videoChannelRef.current?.subtitleSettings(settingsProvider.subtitleSettings);\n            videoChannelRef.current?.ankiSettings(settingsProvider.ankiSettings);\n            videoChannelRef.current?.miscSettings(settingsProvider.miscSettings);\n        },\n        [settingsProvider, ankiDialogOpen]\n    );\n\n    const handleDeleteCopyHistoryItem = useCallback(\n        (item: CopyHistoryItem) => {\n            const newCopiedSubtitles = [];\n\n            for (let subtitle of copiedSubtitles) {\n                if (item.id !== subtitle.id) {\n                    newCopiedSubtitles.push(subtitle);\n                }\n            }\n\n            setCopiedSubtitles(newCopiedSubtitles);\n        },\n        [copiedSubtitles]\n    );\n\n    const handleUnloadAudio = useCallback(\n        (audioFileUrl: string) => {\n            if (audioFileUrl !== sources.audioFileUrl) {\n                return;\n            }\n\n            setSources((previous) => {\n                URL.revokeObjectURL(audioFileUrl);\n\n                return {\n                    subtitleFiles: previous.subtitleFiles,\n                    audioFile: undefined,\n                    audioFileUrl: undefined,\n                    videoFile: previous.videoFile,\n                    videoFileUrl: previous.videoFileUrl,\n                };\n            });\n        },\n        [sources]\n    );\n\n    const handleUnloadVideo = useCallback(\n        (videoFileUrl: string) => {\n            if (videoFileUrl !== sources.videoFileUrl) {\n                return;\n            }\n\n            setSources((previous) => {\n                URL.revokeObjectURL(videoFileUrl);\n\n                return {\n                    subtitleFiles: previous.subtitleFiles,\n                    audioFile: previous.audioFile,\n                    audioFileUrl: previous.audioFileUrl,\n                    videoFile: undefined,\n                    videoFileUrl: undefined,\n                };\n            });\n        },\n        [sources]\n    );\n\n    const handleClipAudio = useCallback(\n        async (item: CopyHistoryItem) => {\n            try {\n                const clip = await audioClipFromItem(\n                    item,\n                    undefined,\n                    settingsProvider.audioPaddingStart,\n                    settingsProvider.audioPaddingEnd\n                );\n\n                if (settingsProvider.preferMp3) {\n                    clip!.toMp3().download();\n                } else {\n                    clip!.download();\n                }\n            } catch (e) {\n                console.error(e);\n                if (e instanceof Error) {\n                    handleError(e.message);\n                } else {\n                    handleError(String(e));\n                }\n            }\n        },\n        [handleError, settingsProvider]\n    );\n\n    const handleDownloadImage = useCallback(\n        async (item: CopyHistoryItem) => {\n            try {\n                (await imageFromItem(\n                    item,\n                    settingsProvider.maxImageWidth,\n                    settingsProvider.maxImageHeight\n                ))!.download();\n            } catch (e) {\n                console.error(e);\n                if (e instanceof Error) {\n                    handleError(e.message);\n                } else {\n                    handleError(String(e));\n                }\n            }\n        },\n        [handleError, settingsProvider]\n    );\n\n    const handleDownloadCopyHistorySectionAsSrt = useCallback(\n        (name: string, items: CopyHistoryItem[]) => {\n            const deduplicated: SubtitleModel[] = [];\n\n            for (const item of items) {\n                if (\n                    deduplicated.find((i) => i.start === item.start && i.end === item.end && i.text === item.text) ===\n                    undefined\n                ) {\n                    deduplicated.push(item);\n                }\n            }\n\n            download(\n                new Blob([subtitleReader.subtitlesToSrt(deduplicated)], { type: 'text/plain' }),\n                `${name}_MiningHistory_${new Date().toISOString()}.srt`\n            );\n        },\n        [subtitleReader]\n    );\n\n    const handleSelectCopyHistoryItem = useCallback(\n        (item: CopyHistoryItem) => {\n            if (!subtitleFiles.find((f) => f.name === item.subtitleFile?.name)) {\n                handleError('Subtitle file ' + item.subtitleFile?.name + ' is not open.');\n                return;\n            }\n\n            setJumpToSubtitle({\n                text: item.text,\n                start: item.start,\n                end: item.end,\n                originalStart: item.originalStart,\n                originalEnd: item.originalEnd,\n                track: item.track,\n            });\n        },\n        [subtitleFiles, handleError]\n    );\n\n    const handleAnki = useCallback((item: CopyHistoryItem) => {\n        setAnkiDialogItem(item);\n        setAnkiDialogOpen(true);\n        setAnkiDialogDisabled(false);\n        setDisableKeyEvents(true);\n    }, []);\n\n    const handleAnkiDialogCancel = useCallback(() => {\n        setAnkiDialogOpen(false);\n        setAnkiDialogDisabled(false);\n        setDisableKeyEvents(false);\n\n        if (ankiDialogRequested) {\n            setAnkiDialogFinishedRequest({ timestamp: Date.now(), resume: true });\n            setAnkiDialogRequested(false);\n        }\n    }, [ankiDialogRequested]);\n\n    const handleAnkiDialogRewind = useCallback(() => {\n        if (!ankiDialogItem) {\n            return;\n        }\n\n        if (!subtitleFiles.find((f) => f.name === ankiDialogItem.subtitleFile?.name)) {\n            handleError('Subtitle file ' + ankiDialogItem.subtitleFile?.name + ' is not open.');\n            return;\n        }\n\n        const subtitle = {\n            text: ankiDialogItem.text,\n            start: ankiDialogItem.start,\n            end: ankiDialogItem.end,\n            originalStart: ankiDialogItem.originalStart,\n            originalEnd: ankiDialogItem.originalEnd,\n            track: ankiDialogItem.track,\n        };\n        setRewindSubtitle(subtitle);\n        setJumpToSubtitle(subtitle);\n\n        handleAnkiDialogCancel();\n    }, [ankiDialogItem, subtitleFiles, handleAnkiDialogCancel, handleError]);\n\n    const handleViewImage = useCallback((image: Image) => {\n        setImage(image);\n        setImageDialogOpen(true);\n    }, []);\n\n    useEffect(() => {\n        function onTabs(tabs: VideoTabModel[]) {\n            if (tabs.length !== availableTabs.length) {\n                setAvailableTabs(tabs);\n            } else {\n                let update = false;\n\n                for (let i = 0; i < availableTabs.length; ++i) {\n                    const t1 = availableTabs[i];\n                    const t2 = tabs[i];\n                    if (t1.id !== t2.id || t1.title !== t2.title || t1.src !== t2.src) {\n                        update = true;\n                        break;\n                    }\n                }\n\n                if (update) {\n                    setAvailableTabs(tabs);\n                }\n            }\n\n            let selectedTabMissing = tab && tabs.filter((t) => t.id === tab.id && t.src === tab.src).length === 0;\n\n            if (selectedTabMissing) {\n                setTab(undefined);\n                handleError('Lost connection with tab ' + tab!.id + ' ' + tab!.title);\n            }\n        }\n\n        return extension.subscribeTabs(onTabs);\n    }, [availableTabs, tab, extension, handleError]);\n\n    const handleTabSelected = useCallback((tab: VideoTabModel) => setTab(tab), []);\n\n    const handleFiles = useCallback(\n        (files: FileList | File[]) => {\n            try {\n                let { subtitleFiles, audioFile, videoFile } = extractSources(files);\n\n                setSources((previous) => {\n                    setLoading(true);\n\n                    let videoFileUrl = undefined;\n                    let audioFileUrl = undefined;\n\n                    if (videoFile || audioFile) {\n                        revokeUrls(previous);\n\n                        if (videoFile) {\n                            videoFileUrl = URL.createObjectURL(videoFile);\n                        } else if (audioFile) {\n                            audioFileUrl = URL.createObjectURL(audioFile);\n                        }\n\n                        setTab(undefined);\n                    } else {\n                        videoFile = previous.videoFile;\n                        videoFileUrl = previous.videoFileUrl;\n                        audioFile = previous.audioFile;\n                        audioFileUrl = previous.audioFileUrl;\n                    }\n\n                    const sources = {\n                        subtitleFiles: subtitleFiles.length === 0 ? previous.subtitleFiles : subtitleFiles,\n                        audioFile: audioFile,\n                        audioFileUrl: audioFileUrl,\n                        videoFile: videoFile,\n                        videoFileUrl: videoFileUrl,\n                    };\n\n                    return sources;\n                });\n\n                if (subtitleFiles.length > 0) {\n                    const subtitleFileName = subtitleFiles[0].name;\n                    setFileName(subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')));\n                }\n            } catch (e) {\n                console.error(e);\n                if (e instanceof Error) {\n                    handleError(e.message);\n                } else {\n                    handleError(String(e));\n                }\n            }\n        },\n        [handleError]\n    );\n\n    const handleDirectory = useCallback(\n        async (items: DataTransferItemList) => {\n            if (items.length !== 1) {\n                handleError('Cannot load more than one directory at a time');\n                return;\n            }\n\n            const fileSystemEntry = items[0].webkitGetAsEntry();\n\n            if (!fileSystemEntry || !fileSystemEntry.isDirectory) {\n                handleError('Failed to load directory');\n                return;\n            }\n\n            const fileSystemDirectoryEntry = fileSystemEntry as FileSystemDirectoryEntry;\n\n            try {\n                const entries = await new Promise<FileSystemEntry[]>((resolve, reject) =>\n                    fileSystemDirectoryEntry.createReader().readEntries(resolve, reject)\n                );\n\n                if (entries.find((e) => e.isDirectory)) {\n                    handleError('Cannot load a directory with subdirectories');\n                    return;\n                }\n\n                const filePromises = entries.map(\n                    (e) => new Promise<File>((resolve, reject) => (e as FileSystemFileEntry).file(resolve, reject))\n                );\n                const files: File[] = [];\n\n                for (const f of filePromises) {\n                    files.push(await f);\n                }\n\n                handleFiles(files);\n            } catch (e) {\n                console.error(e);\n                if (e instanceof Error) {\n                    handleError(e.message);\n                } else {\n                    handleError(String(e));\n                }\n            }\n        },\n        [handleError, handleFiles]\n    );\n\n    useEffect(() => {\n        if (inVideoPlayer) {\n            return undefined;\n        }\n\n        async function onMessage(message: ExtensionMessage) {\n            if (message.data.command === 'sync' || message.data.command === 'syncv2') {\n                const tabs = extension.tabs.filter((t) => {\n                    if (t.id !== message.tabId) {\n                        return false;\n                    }\n\n                    return !message.src || t.src === message.src;\n                });\n\n                if (tabs.length === 0) {\n                    if (message.src) {\n                        console.error(\n                            'Received sync request but the requesting tab ID ' +\n                                message.tabId +\n                                ' with src ' +\n                                message.src +\n                                ' was not found'\n                        );\n                    } else {\n                        console.error(\n                            'Received sync request but the requesting tab ID ' + message.tabId + ' was not found'\n                        );\n                    }\n\n                    return;\n                }\n\n                const tab = tabs[0];\n                let subtitleFiles: File[];\n\n                if (message.data.command === 'sync') {\n                    const syncMessage = message.data as LegacyPlayerSyncMessage;\n                    subtitleFiles = [\n                        new File(\n                            [await (await fetch('data:text/plain;base64,' + syncMessage.subtitles.base64)).blob()],\n                            syncMessage.subtitles.name\n                        ),\n                    ];\n                } else if (message.data.command === 'syncv2') {\n                    const syncMessage = message.data as PlayerSyncMessage;\n                    subtitleFiles = await Promise.all(\n                        syncMessage.subtitles.map(\n                            async (s) =>\n                                new File([await (await fetch('data:text/plain;base64,' + s.base64)).blob()], s.name)\n                        )\n                    );\n                } else {\n                    console.error('Unknown message ' + message.data.command);\n                    return;\n                }\n\n                const subtitleFileName = subtitleFiles[0].name;\n                setFileName(subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')));\n                setSources({\n                    subtitleFiles: subtitleFiles,\n                    audioFile: undefined,\n                    audioFileUrl: undefined,\n                    videoFile: undefined,\n                    videoFileUrl: undefined,\n                });\n                setTab(tab);\n            } else if (message.data.command === 'edit-keyboard-shortcuts') {\n                setSettingsDialogOpen(true);\n                setSettingsDialogScrollToId('keyboard-shortcuts');\n            }\n        }\n\n        const unsubscribe = extension.subscribe(onMessage);\n        extension.startHeartbeat();\n        return unsubscribe;\n    }, [extension, inVideoPlayer]);\n\n    const handleAutoPauseModeChangedViaBind = useCallback((oldPlayMode: PlayMode, newPlayMode: PlayMode) => {\n        switch (newPlayMode) {\n            case PlayMode.autoPause:\n                setAlert('Auto-pause: On');\n                break;\n            case PlayMode.condensed:\n                setAlert('Condensed playback: On');\n                break;\n            case PlayMode.normal:\n                if (oldPlayMode === PlayMode.autoPause) {\n                    setAlert('Auto-pause: Off');\n                } else if (oldPlayMode === PlayMode.condensed) {\n                    setAlert('Condensed playback: Off');\n                }\n                break;\n        }\n\n        setAlertSeverity('info');\n        setAlertOpen(true);\n    }, []);\n\n    const handleDrop = useCallback(\n        (e: React.DragEvent) => {\n            if (ankiDialogOpen) {\n                return;\n            }\n\n            e.preventDefault();\n\n            if (inVideoPlayer) {\n                handleError('Video player cannot receive dropped files. Drop outside of the video frame instead.');\n                return;\n            }\n\n            setDragging(false);\n            dragEnterRef.current = null;\n\n            function allDirectories(items: DataTransferItemList) {\n                for (let i = 0; i < items.length; ++i) {\n                    if (!items[i].webkitGetAsEntry()?.isDirectory) {\n                        return false;\n                    }\n                }\n\n                return true;\n            }\n\n            if (e.dataTransfer.items && e.dataTransfer.items.length > 0 && allDirectories(e.dataTransfer.items)) {\n                handleDirectory(e.dataTransfer.items);\n            } else if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n                handleFiles(e.dataTransfer.files);\n            }\n        },\n        [inVideoPlayer, handleError, handleFiles, handleDirectory, ankiDialogOpen]\n    );\n\n    const handleFileInputChange = useCallback(() => {\n        const files = fileInputRef.current?.files;\n\n        if (files && files.length > 0) {\n            handleFiles(files);\n        }\n    }, [handleFiles]);\n\n    const handleFileSelector = useCallback(() => fileInputRef.current?.click(), []);\n\n    const handleDownloadSubtitleFilesAsSrt = useCallback(async () => {\n        if (sources.subtitleFiles === undefined) {\n            return;\n        }\n\n        const nonSupSubtitleFiles = sources.subtitleFiles.filter((f) => !f.name.endsWith('.sup'));\n\n        if (nonSupSubtitleFiles.length === 0) {\n            return;\n        }\n\n        download(\n            new Blob([await subtitleReader.filesToSrt(nonSupSubtitleFiles)], {\n                type: 'text/plain',\n            }),\n            `${fileName}.srt`\n        );\n    }, [fileName, sources.subtitleFiles, subtitleReader]);\n\n    const handleDragOver = useCallback(\n        (e: React.DragEvent<HTMLDivElement>) => {\n            if (ankiDialogOpen) {\n                return;\n            }\n\n            e.preventDefault();\n        },\n        [ankiDialogOpen]\n    );\n\n    const handleDragEnter = useCallback(\n        (e: React.DragEvent<HTMLDivElement>) => {\n            if (ankiDialogOpen) {\n                return;\n            }\n\n            e.preventDefault();\n            e.stopPropagation();\n\n            if (!inVideoPlayer) {\n                dragEnterRef.current = e.target as Element;\n                setDragging(true);\n            }\n        },\n        [inVideoPlayer, ankiDialogOpen]\n    );\n\n    const handleDragLeave = useCallback(\n        (e: React.DragEvent<HTMLDivElement>) => {\n            e.nativeEvent.preventDefault();\n            e.nativeEvent.stopPropagation();\n\n            if (!inVideoPlayer && dragEnterRef.current === e.target) {\n                setDragging(false);\n            }\n        },\n        [inVideoPlayer]\n    );\n\n    const handleSourcesLoaded = useCallback(() => setLoading(false), []);\n\n    useEffect(() => {\n        var view = searchParams.get('view');\n        if (view === 'settings') {\n            setSettingsDialogOpen(true);\n\n            if (location.hash && location.hash.startsWith('#')) {\n                const id = location.hash.substring(1, location.hash.length);\n                setSettingsDialogScrollToId(id);\n            }\n        }\n    }, [searchParams, location]);\n\n    if (location.pathname === '/' && searchParams.get('video')) {\n        return <NavigateToVideo searchParams={searchParams} />;\n    }\n\n    const nothingLoaded =\n        (loading && !videoFrameRef.current) ||\n        (sources.subtitleFiles.length === 0 && !sources.audioFile && !sources.videoFile);\n    const appBarHidden = sources.videoFile !== undefined && theaterMode && !videoPopOut;\n\n    return (\n        <ThemeProvider theme={theme}>\n            <CssBaseline />\n            <div\n                onDrop={handleDrop}\n                onDragOver={handleDragOver}\n                onDragEnter={handleDragEnter}\n                onDragLeave={handleDragLeave}\n            >\n                <Alert open={alertOpen} onClose={handleAlertClosed} autoHideDuration={3000} severity={alertSeverity}>\n                    {alert}\n                </Alert>\n                <Routes>\n                    <Route\n                        path=\"/video\"\n                        element={\n                            <RenderVideo\n                                searchParams={searchParams}\n                                settingsProvider={settingsProvider}\n                                playbackPreferences={playbackPreferences}\n                                extension={extension}\n                                onError={handleError}\n                                onPlayModeChangedViaBind={handleAutoPauseModeChangedViaBind}\n                            />\n                        }\n                    />\n                    <Route\n                        path=\"/\"\n                        element={\n                            <div>\n                                <CopyHistory\n                                    items={copiedSubtitles}\n                                    open={copyHistoryOpen}\n                                    drawerWidth={drawerWidth}\n                                    onClose={handleCloseCopyHistory}\n                                    onDelete={handleDeleteCopyHistoryItem}\n                                    onClipAudio={handleClipAudio}\n                                    onDownloadImage={handleDownloadImage}\n                                    onDownloadSectionAsSrt={handleDownloadCopyHistorySectionAsSrt}\n                                    onSelect={handleSelectCopyHistoryItem}\n                                    onAnki={handleAnki}\n                                />\n                                <AnkiDialog\n                                    open={ankiDialogOpen}\n                                    disabled={ankiDialogDisabled}\n                                    audioClip={ankiDialogAudioClip}\n                                    image={ankiDialogImage}\n                                    source={itemSourceString(ankiDialogItem)}\n                                    url={ankiDialogItem?.url}\n                                    sliderContext={ankiDialogItemSliderContext}\n                                    customFields={settingsProvider.customAnkiFields}\n                                    anki={anki}\n                                    settingsProvider={settingsProvider}\n                                    onCancel={handleAnkiDialogCancel}\n                                    onRewind={handleAnkiDialogRewind}\n                                    onProceed={handleAnkiDialogProceed}\n                                    onViewImage={handleViewImage}\n                                    onOpenSettings={handleOpenSettings}\n                                />\n                                <ImageDialog open={imageDialogOpen} image={image} onClose={handleImageDialogClosed} />\n                                <SettingsDialog\n                                    anki={anki}\n                                    extension={extension}\n                                    open={settingsDialogOpen}\n                                    onClose={handleCloseSettings}\n                                    settings={settingsProvider.settings}\n                                    scrollToId={settingsDialogScrollToId}\n                                />\n                                <Bar\n                                    title={fileName || 'asbplayer'}\n                                    drawerWidth={drawerWidth}\n                                    drawerOpen={copyHistoryOpen}\n                                    hidden={appBarHidden}\n                                    subtitleFiles={sources.subtitleFiles}\n                                    onOpenCopyHistory={handleOpenCopyHistory}\n                                    onDownloadSubtitleFilesAsSrt={handleDownloadSubtitleFilesAsSrt}\n                                    onOpenSettings={handleOpenSettings}\n                                    onFileSelector={handleFileSelector}\n                                />\n                                <input\n                                    ref={fileInputRef}\n                                    onChange={handleFileInputChange}\n                                    type=\"file\"\n                                    accept=\".srt,.ass,.vtt,.sup,.mp3,.m4a,.aac,.flac,.ogg,.wav,.opus,.mkv,.mp4,.avi\"\n                                    multiple\n                                    hidden\n                                />\n                                <Content drawerWidth={drawerWidth} drawerOpen={copyHistoryOpen}>\n                                    {nothingLoaded && (\n                                        <LandingPage\n                                            latestExtensionVersion={latestExtensionVersion}\n                                            extensionUrl={extensionUrl}\n                                            extension={extension}\n                                            loading={loading}\n                                            dragging={dragging}\n                                            appBarHidden={appBarHidden}\n                                            onFileSelector={handleFileSelector}\n                                        />\n                                    )}\n                                    <DragOverlay dragging={dragging} appBarHidden={appBarHidden} loading={loading} />\n                                    <Player\n                                        subtitleReader={subtitleReader}\n                                        settingsProvider={settingsProvider}\n                                        playbackPreferences={playbackPreferences}\n                                        onCopy={handleCopy}\n                                        onError={handleError}\n                                        onUnloadAudio={handleUnloadAudio}\n                                        onUnloadVideo={handleUnloadVideo}\n                                        onLoaded={handleSourcesLoaded}\n                                        onTabSelected={handleTabSelected}\n                                        onAnkiDialogRequest={handleAnkiDialogRequest}\n                                        onAppBarToggle={handleAppBarToggle}\n                                        onVideoPopOut={handleVideoPopOut}\n                                        onPlayModeChangedViaBind={handleAutoPauseModeChangedViaBind}\n                                        tab={tab}\n                                        availableTabs={availableTabs}\n                                        sources={sources}\n                                        jumpToSubtitle={jumpToSubtitle}\n                                        rewindSubtitle={rewindSubtitle}\n                                        videoFrameRef={videoFrameRef}\n                                        videoChannelRef={videoChannelRef}\n                                        extension={extension}\n                                        drawerOpen={copyHistoryOpen}\n                                        appBarHidden={appBarHidden}\n                                        videoPopOut={videoPopOut}\n                                        disableKeyEvents={disableKeyEvents}\n                                        ankiDialogRequested={ankiDialogRequested}\n                                        ankiDialogRequestToVideo={ankiDialogRequestToVideo}\n                                        ankiDialogFinishedRequest={ankiDialogFinishedRequest}\n                                        keyBinder={keyBinder}\n                                    />\n                                </Content>\n                            </div>\n                        }\n                    />\n                </Routes>\n            </div>\n        </ThemeProvider>\n    );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import '@fontsource/roboto';\nimport { createRoot } from 'react-dom/client';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\n\ncreateRoot(document.querySelector('#root')!).render(\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <App />\n    </BrowserRouter>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}