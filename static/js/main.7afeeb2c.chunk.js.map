{"version":3,"sources":["hooks/useWindowSize/index.ts","../../common/src/key-binder.ts","../../common/src/mp3-encoder.ts","../../common/src/mp3-encoder-worker.js","../../common/src/util.ts","../../common/src/audio-clip.ts","../../common/src/canvas-resizer.ts","../../common/src/image.ts","../../common/src/fetcher.ts","../../common/src/anki.ts","../../common/src/model.ts","../../common/src/subtitle-collection.ts","../../common/src/auto-pause-context.ts","components/Alert.tsx","../../common/components/src/TagsTextField.tsx","../../common/components/src/ImageDialog.tsx","../../common/components/src/SubtitleTextImage.tsx","../../common/components/src/AnkiDialog.tsx","components/background-colored.png","components/DragOverlay.tsx","services/subtitle-reader.ts","components/Bar.tsx","services/util.ts","components/CopyHistory.tsx","components/LandingPage.tsx","services/playback-preferences.ts","services/broadcast-channel-video-protocol.ts","services/chrome-tab-video-protocol.ts","services/clock.ts","services/cached-local-storage.ts","components/Controls.tsx","services/media-adapter.ts","components/SubtitlePlayer.tsx","services/video-channel.ts","components/Player.tsx","components/CustomFieldDialog.tsx","components/SettingsDialog.tsx","services/settings-provider.ts","services/player-channel.ts","services/app-key-binder.ts","components/VideoPlayer.tsx","services/chrome-extension.ts","services/chrome-extension-provider.ts","services/copy-history-repository.ts","components/App.tsx","reportWebVitals.js","index.tsx"],"names":["useWindowSize","enabled","useState","size","setSize","useLayoutEffect","updateSize","window","innerWidth","innerHeight","addEventListener","removeEventListener","DefaultKeyBinder","keyBindSet","this","onCopy","disabledGetter","subtitleGetter","capture","shortcut","copySubtitle","keys","handler","copyHandler","_bind","event","subtitle","onAnkiExport","ankiExport","ankiExportHandler","onUpdateLastCard","updateLastCard","updateLastCardHandler","onSeekToSubtitle","timeGetter","subtitlesGetter","unbindPrevious","unbindNext","delegate","forward","subtitles","length","_adjacentSubtitle","start","end","previousShortcut","seekToPreviousSubtitle","nextShortcut","seekToNextSubtitle","previousHandler","nextHandler","onSeekToBeginningOfCurrentSubtitle","seekToBeginningOfCurrentSubtitle","_currentSubtitle","undefined","time","currentSubtitle","now","minDiff","Number","MAX_SAFE_INTEGER","i","s","diff","onSeekBackwardOrForward","unbindBack","backShortcut","seekBackward","seekForward","backHandler","onOffsetChange","subtitleStart","originalStart","adjustOffsetToPreviousSubtitle","adjustOffsetToNextSubtitle","adjacentSubtitleIndex","Math","max","increase","currentOffset","decreaseShortcut","decreaseOffset","increaseShortcut","increaseOffset","decreaseHandler","increaseHandler","unbindDecrease","unbindIncrease","onResetOffset","resetOffset","onAdjustPlaybackRate","increasePlaybackRate","decreasePlaybackRate","onToggleSubtitles","toggleSubtitles","onToggleSubtitleTrack","shortcuts","toggleVideoSubtitleTrack1","toggleVideoSubtitleTrack2","filter","track","unbindHandlers","push","unbindHandler","onToggleSubtitleTrackInList","toggleAsbplayerSubtitleTrack1","toggleAsbplayerSubtitleTrack2","onPlay","togglePlay","onAutoPause","toggleAutoPause","toggleCondensedPlayback","wrappedHandler","type","preventDefault","stopImmediatePropagation","hotkeys","keydown","keyup","unbind","Mp3Encoder","blob","workerFactory","Promise","resolve","reject","a","reader","FileReader","onload","e","audioContext","AudioContext","target","Error","decodeAudioData","result","audioBuffer","channels","numberOfChannels","getChannelData","worker","postMessage","command","sampleRate","onmessage","Blob","data","buffer","terminate","onerror","error","message","readAsArrayBuffer","Worker_fn","Worker","Direction","humanReadableTime","timestamp","seconds","nearestTenth","totalSeconds","floor","round","minutes","hours","String","padStart","surroundingSubtitles","index","countRadius","timeRadius","startIndex","atBoundary","backward","endIndex","slice","mockSurroundingSubtitles","middleSubtitle","maxTimestamp","offset","afterTimestamp","min","text","originalEnd","beforeTimestamp","unshift","initialIndex","direction","next","abs","subtitleIntersectsTimeInterval","interval","overlapStart","joinSubtitles","trim","map","join","extractText","download","name","url","URL","createObjectURL","document","createElement","body","appendChild","style","display","href","sanitize","click","revokeObjectURL","remove","defaultMp3WorkerFactory","recorderConfiguration","AUDIO_TYPES","Object","MediaRecorder","isTypeSupported","t","Base64AudioData","baseName","playbackRate","base64","extension","_name","_start","_end","_base64","_extension","playingAudio","stopAudioTimeout","cachedBlob","_blob","stopAudio","clearTimeout","audio","Audio","src","preload","load","play","setTimeout","pause","fetch","FileAudioData","file","trackId","recorderMimeType","clippingAudio","clippingAudioReject","stopClippingTimeout","recorderExtension","readAsDataURL","onloadend","substring","indexOf","_clipAudio","_audioElement","currentTime","oncanplay","stream","_captureStream","recorder","mimeType","chunks","ondataavailable","finished","onstop","stop","getAudioTracks","source","selectTrack","onloadedmetadata","audioTracks","id","captureStream","mozCaptureStream","audioStream","MediaStream","getVideoTracks","addTrack","Mp3AudioData","encode","isSliceable","isPlayable","MissingFileAudioData","fileName","AudioClip","mp3WorkerFactory","subtitleFileName","lastIndexOf","CanvasResizer","canvas","ctx","maxWidth","maxHeight","widthRatio","width","heightRatio","height","ratio","newWidth","newHeight","createImageBitmap","resizeWidth","resizeHeight","resizeQuality","then","sprite","drawImage","catch","Base64ImageData","_dataUrl","FileImageData","_canvas","dataUrl","toDataURL","toBlob","video","_videoElement","videoWidth","videoHeight","getContext","resizer","resize","MissingFileImageData","Image","available","bitMap","imageName","HttpFetcher","method","JSON","stringify","response","json","ankiQuerySpecialCharacters","PostMineAction","AutoPausePreference","PlayMode","Anki","settingsProvider","fetcher","ankiConnectUrl","_executeAction","modelName","word","query","wordField","_escapeQuery","escaped","char","includes","definition","audioClip","image","customFieldValues","tags","mode","fields","_appendField","sentenceField","definitionField","sourceField","urlField","customFieldName","customAnkiFields","params","note","deckName","deck","noteType","options","allowDuplicate","duplicateScope","duplicateScopeOptions","checkChildren","gui","updateLast","audioField","sanitizedName","_sanitizeFileName","_storeMediaFile","filename","imageField","recentNotes","sort","lastNoteId","notes","infoResponse","noteId","info","value","_inheritHtmlMarkup","fieldName","multiline","newValue","split","existingValue","replacement","original","markedUp","htmlTagRegex","RegExp","markedUpWithoutBreaklines","replace","inherited","match","exec","action","version","SubtitleCollection","tree","gapsTree","IntervalTree","returnLastShown","returnNextToShow","last","insert","lastShown","nextToShow","startedShowing","willStopShowing","showing","search","gapIntervals","nextStart","high","showingCheckRadiusMs","emptySubtitleCollection","AutoPauseContext","lastStartedShowing","lastWillStopShowing","onStartedShowing","onWillStopShowing","onNextToShow","useAlertStyles","makeStyles","root","justifyContent","position","top","pointerEvents","zIndex","Alert","props","classes","useEffect","open","timeout","onClose","autoHideDuration","className","Grow","in","severity","children","TagsTextField","onTagsChange","setValue","handleChange","useCallback","currentValue","endsWith","newTags","splitTags","tag","extractTagsFromString","TextField","onChange","useStyles","theme","backgroundSize","ImageDialog","resizeRatio","setDataUrl","setWidth","setHeight","windowWidth","windowHeight","img","fetchImage","Dialog","Card","CardMedia","title","SubtitleTextImage","availableWidth","scale","textImage","screen","alt","marginBottom","spacing","flexGrow","mediaField","cursor","rangeSelectSlider","transform","sliderMarksFromSliderContext","sliderContext","boundary","seenTimestamps","label","mark","sliderValueLabelFormat","ms","ValueLabelComponent","Tooltip","enterTouchDelay","placement","useTextImageSetStyles","padding","backgroundColor","palette","disabledBackground","TextImageSet","selectedSubtitles","Paper","elevation","TextFieldEndAdornment","withStyles","InputAdornment","AnkiDialog","disabled","initialText","onProceed","onRewind","onCancel","onViewImage","onOpenSettings","onRerecord","initialAudioClip","initialSource","initialUrl","customFields","anki","initialDefinition","initialWord","initialCustomFieldValues","initialSelectedTimestampInterval","timestampInterval","forceTimestampBoundaryInterval","timestampBoundaryInterval","forceInitialTimestampInterval","initialTimestampInterval","initialLastAppliedTimestampIntervalToText","lastAppliedTimestampIntervalToText","initialLastAppliedTimestampIntervalToAudio","lastAppliedTimestampIntervalToAudio","stateRef","setDefinition","setText","setWord","lastSearchedWord","setLastSearchedWord","setSource","setTags","setUrl","duplicateNotes","setDuplicateNotes","wordTimestamp","setWordTimestamp","setCustomFieldValues","setTimestampInterval","setSelectedSubtitles","setInitialTimestampInterval","initialTimestampBoundaryInterval","setInitialTimestampBoundaryInterval","setTimestampBoundaryInterval","timestampMarks","setTimestampMarks","setLastAppliedTimestampIntervalToText","setLastAppliedTimestampIntervalToAudio","setAudioClip","dialogRefCallback","element","getBoundingClientRect","current","textForTimestampInterval","subtitleEnd","findIndex","subtitlesToDisplay","boundaryIntervalFromSliderContext","newAudioClip","preferMp3","toMp3","audioPaddingStart","audioPaddingEnd","Date","trimmedWord","findNotesWithWord","console","wordHelperText","handlePlayAudio","stopPropagation","handleCustomFieldChange","newCustomFieldValues","assign","audioHelperText","imageHelperText","handleViewImage","handleApplyTimestampIntervalToText","newText","handleTimestampIntervalChange","newTimestampInterval","expectedUnchangedText","handleApplyTimestampIntervalToAudio","handleResetTimestampInterval","handleZoomInTimestampInterval","newTimestampBoundaryInterval","handleZoomOutTimestampInterval","minimumChange","handleCopyImageToClipboard","navigator","clipboard","ClipboardItem","pngBlob","write","disableApplyTextSelection","audioActionElement","IconButton","onClick","edge","disableEnforceFocus","fullWidth","Toolbar","Typography","variant","DialogContent","ref","color","maxRows","InputProps","endAdornment","rows","helperText","findNotesWithWordGui","Grid","container","item","Slider","valueLabelFormat","marks","step","valueLabelDisplay","marginTop","DialogActions","Button","dragging","appBarHidden","transparentBackground","content","flexDirection","alignItems","textAlign","backgroundRepeat","backgroundPosition","backgroundImage","coloredBackground","backgroundBlendMode","background","DragOverlay","loading","Fade","tagRegex","assNewLineRegex","helperElement","helperCanvas","SubtitleReader","textFilter","_textFilter","xmlParser","files","flatten","all","f","_subtitles","flatMap","nodes","node","n1","n2","parseSrt","cue","_filterText","isFromNetflix","parser","WebVTT","Parser","StringDecoder","cues","oncue","c","lines","newLines","line","_fixRTL","onflush","startTime","endTime","parse","flush","parseAss","dialogues","dialogue","slices","fragments","fragment","xml","_xmlParser","textNodes","elm","parseFloat","_decodeHTML","pipeThrough","parseDisplaySets","pipeTo","_displaySetsToSubtitles","DOMParser","doc","parseFromString","_xmlNodePath","documentElement","beginAttribute","getAttribute","endAttribute","textContent","_parseTtmlTimestamp","parts","parent","path","_dropTagNamespace","tagName","colonIndex","imageDataArray","currentImageDisplaySet","WritableStream","displaySet","controller","objectDefinitionSegments","screenWidth","presentationCompositionSegment","screenHeight","Uint8ClampedArray","imageData","putImageData","header","presentationTimestamp","endDefinitionSegment","index1","index2","newLine","innerHTML","innerText","XMLParser","ignoreAttributes","regex","subtitleNode","writeSrt","format","subtitlesToSrt","leftButton","marginRight","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","drawerWidth","easeOut","enteringScreen","copyHistoryButton","copyHistoryButtonShift","hide","useCopyHistoryTooltipStyles","tooltip","show","CopyHistoryTooltip","toolTipProps","Bar","drawerOpen","hidden","subtitleFiles","onOpenCopyHistory","onFileSelector","onDownloadSubtitleFilesAsSrt","menuOpen","setMenuOpen","menuAnchorEl","setMenuAnchorEl","canSaveAsSrt","find","handleFileAction","currentTarget","handleMenuClose","handleOpenFilesFromMenu","handleDownloadSubtitleFilesAsSrt","Popover","anchorEl","anchorOrigin","vertical","horizontal","ListItem","button","AppBar","clsx","disableFocusListener","disableHoverListener","disableTouchListener","component","rel","computeStyles","subtitleColor","subtitleSize","subtitleOutlineThickness","subtitleOutlineColor","subtitleBackgroundOpacity","subtitleBackgroundColor","subtitleFontFamily","styles","fontSize","thickness","opacity","hex","r","parseInt","g","b","hexToRgb","timeDurationDisplay","milliseconds","totalMilliseconds","includeMilliseconds","secs","mins","hrs","pad","n","zeros","drawer","flexShrink","drawerPaper","drawerHeader","mixins","toolbar","listContainer","overflowY","overflowX","listItem","hover","listItemGutters","paddingLeft","paddingRight","listItemIconRoot","minWidth","emptyState","emptyText","secondary","Menu","onSelect","onClipAudio","onDownloadImage","onDelete","handleCopy","writeText","handleJumpTo","handleClipAudio","handleDownloadImage","handleDelete","transformOrigin","ListItemText","primaryTypographyProps","primary","videoFile","audioFile","CopyHistory","scrollToBottomRefCallback","scrollIntoView","menuItem","setMenuItem","handleMenu","handleMenuClosed","items","currentKey","lastSeenItemName","itemNameCounters","itemsBySection","key","ListItemSecondaryAction","onDownloadSectionAsSrt","gutters","ListItemIcon","onAnki","wrap","Fragment","Drawer","anchor","paper","Divider","browseLink","LandingPage","latestExtensionVersion","extensionUrl","installedExtensionVersion","setInstalledExtensionVersion","fetchInstalledExtensionVersion","extensionUpdateAvailable","gt","extensionNotInstalled","Link","SubtitleAlignment","BroadcastChannelVideoProtocol","channelId","channel","onMessage","BroadcastChannel","that","close","ChromeTabVideoProtocol","tabId","listener","unsubscribeFromExtension","subscribe","sendMessage","Clock","accumulated","started","_rate","rate","_elapsed","CachedLocalStorage","_cache","cached","fromStorage","localStorage","getItem","setItem","removeItem","volumeKey","theaterModeKey","offsetKey","subtitleAlignmentKey","subtitlePositionOffetKey","PlaybackPreferences","storage","get","volume","set","theaterMode","rememberSubtitleOffset","val","bottom","alignment","useControlStyles","left","buttonContainer","timeDisplay","marginLeft","numberInput","volumeInputContainerShown","short","volumeInputContainerHidden","volumeInputHidden","volumeInputShown","volumeInputThumbHidden","volumeInputThumbShown","subContainer","inactiveButton","inactiveTopButton","progress","margin","topButton","gridContainer","useProgressBarStyles","mouseEventListener","fillContainer","fillContainerThick","easeInOut","fill","handleContainer","handle","borderRadius","handleOn","shortest","VolumeSlider","verticalAlign","thumb","boxShadow","active","displayTime","secondsInMinute","ProgressBar","onSeek","mouseOver","setMouseOver","containerRef","useRef","handleClick","rect","right","pageX","handleMouseOver","handleMouseOut","progressWidth","elementWidth","fillStyle","handleStyle","fillContainerClassName","handleClassName","onMouseOver","onMouseOut","AudioTrackSelector","selectedAudioTrack","onAudioTrackSelected","list","selected","language","TabSelector","tabs","selectedTab","onTabSelected","MediaUnloader","onUnload","PlayModeSelector","selectedPlayMode","onPlayMode","normal","condensed","autoPause","Controls","clock","playing","offsetEnabled","displayLength","playbackRateEnabled","mousePositionRef","onShow","onPause","onUnloadAudio","onUnloadVideo","onPlaybackRateChange","onVolumeChange","disableKeyEvents","playbackPreferences","closeEnabled","volumeEnabled","playMode","playModeEnabled","subtitlesEnabled","subtitlesToggle","onSubtitlesToggle","popOutEnabled","popOut","onPopOutToggle","fullscreenEnabled","fullscreen","onFullscreenToggle","hideSubtitlePlayerToggleEnabled","subtitlePlayerHidden","onHideSubtitlePlayerToggle","showOnMouseMovement","theaterModeToggleEnabled","theaterModeEnabled","onTheaterModeToggle","subtitleAlignment","subtitleAlignmentEnabled","onSubtitleAlignment","setShow","audioTrackSelectorOpen","setAudioTrackSelectorOpen","audioTrackSelectorAnchorEl","setAudioTrackSelectorAnchorEl","tabSelectorOpen","setTabSelectorOpen","tabSelectorAnchorEl","setTabSelectorAnchorEl","audioUnloaderOpen","setAudioUnloaderOpen","audioUnloaderAnchorEl","setAudioUnloaderAnchorEl","videoUnloaderOpen","setVideoUnloaderOpen","videoUnloaderAnchorEl","setVideoUnloaderAnchorEl","playModeSelectorOpen","setPlayModeSelectorOpen","playModeSelectorAnchorEl","setPlayModeSelectorAnchorEl","showVolumeBar","setShowVolumeBar","setVolume","lastCommittedVolume","setLastCommittedVolume","lastMousePositionRef","x","y","lastShowTimestampRef","lastNumberInputChangeTimestampRef","lastShowRef","forceShowRef","offsetInputWidth","setOffsetInputWidth","playbackRateInputWidth","setPlaybackRateInputWidth","offsetInputRef","playbackRateInputRef","closeButtonRef","updateState","forceUpdate","handleSeek","savedVolume","setInterval","currentShow","pow","offsetTop","offsetHeight","activeElement","clearInterval","updateOffset","offsetSeconds","toFixed","blur","updatePlaybackRate","handleKey","newOffset","isNaN","newPlaybackRate","handleNumberInputClicked","inputElement","setSelectionRange","handleAudioTrackSelectorClosed","handleAudioTrackSelectorOpened","handleAudioTrackSelected","handleTabSelectorClosed","handleTabSelectorOpened","handleTabSelected","tab","handleAudioUnloaderClosed","handleAudioUnloaderOpened","handleUnloadAudio","handleVideoUnloaderClosed","handleVideoUnloaderOpened","handleUnloadVideo","handlePlayModeSelectorClosed","handlePlayModeSelectorOpened","handlePlayModeSelected","handleVolumeMouseOut","handleVolumeMouseOver","handleVolumeChange","handleVolumeChangeCommitted","handleVolumeToggle","newVolume","handleSubtitleAlignment","newAlignment","onChangeCommitted","defaultValue","Input","inputRef","disableUnderline","placeholder","MediaAdapter","readyResolves","_onMediaCanPlay","callback","readyState","useSubtitlePlayerStyles","default","compressed","table","noSubtitles","useSubtitleRowStyles","subtitleRow","overflowWrap","whiteSpace","compressedSubtitle","disabledSubtitle","copyButton","SubtitleRow","React","memo","subtitleRef","onClickSubtitle","onCopySubtitle","copyButtonEnabled","tableRowProps","textRef","textSelected","setTextSelected","disabledClassName","availWidth","TableRow","onMouseUp","selection","getSelection","isSameNode","anchorNode","parentNode","TableCell","SubtitlePlayer","onSubtitlesSelected","autoPauseContext","subtitleCollection","jumpToSubtitle","displayHelp","lastJumpToTopTimestamp","disabledSubtitleTracks","keyBinder","playingRef","clockRef","subtitleRefs","useMemo","Array","_","createRef","subtitleCollectionRef","empty","subtitleRefsRef","disableKeyEventsRef","selectedSubtitleIndexes","setSelectedSubtitleIndexes","selectedSubtitleIndexesRef","lengthRef","hiddenRef","lastScrollTimestampRef","requestAnimationRef","autoPauseContextRef","onSubtitlesSelectedRef","requestAnimationFrame","update","smallestIndex","currentSubtitleIndexes","subtitlesAt","keysAreEqual","scrollToSubtitleRef","allowScroll","block","inline","behavior","cancelAnimationFrame","scrollToCurrentSubtitle","indexes","scrollIfVisible","visibilityState","firstSubtitleRef","bindAdjustOffset","bindResetOffet","bindOffsetToSubtitle","bindSeekToSubtitle","bindSeekToBeginningOfCurrentSubtitle","bindSeekBackwardOrForward","handleScroll","jumpToIndex","calculateSurroundingSubtitlesForIndex","surroundingSubtitlesCountRadius","surroundingSubtitlesTimeRadius","calculateSurroundingSubtitles","calculateCurrentSubtitle","subtitleIndexes","bindCopy","none","bindToggleSubtitleTrackInList","bindAnkiExport","showAnkiDialog","bindUpdateLastCard","subtitleTable","TableContainer","Table","TableBody","square","VideoChannel","protocol","isReady","readyCallbacks","playCallbacks","pauseCallbacks","audioTrackSelectedCallbacks","currentTimeCallbacks","exitCallbacks","offsetCallbacks","playbackRateCallbacks","popOutToggleCallbacks","copyCallbacks","playModeCallbacks","hideSubtitlePlayerToggleCallbacks","appBarToggleCallbacks","fullscreenToggleCallbacks","ankiDialogRequestCallbacks","toggleSubtitleTrackInListCallbacks","_playbackRate","readyMessage","paused","readyStateMessage","Event","playMessage","echo","pauseMessage","audioTrackSelectedMessage","currentTimeMessage","offsetMessage","playbackRateMessage","copyMessage","postMineAction","preventDuplicate","toggleSubtitleTrackInListMessage","videoFileName","subtitleFileNames","names","settings","msg","videoFrame","border","trackLength","audioRef","videoRef","useOffset","subtitlesLength","audioLength","videoLength","Player","sources","flattenSubtitleFiles","audioFileUrl","videoFileUrl","subtitleReader","videoFrameRef","videoChannelRef","videoFullscreen","hideSubtitlePlayer","videoPopOut","availableTabs","ankiDialogRequested","ankiDialogFinishedRequest","onError","onLoaded","onAnkiDialogRequest","onAppBarToggle","onHideSubtitlePlayer","onVideoPopOut","onPlayModeChangedViaBind","rewindSubtitle","setPlayMode","playModeRef","setSubtitles","subtitlesRef","Boolean","loadingSubtitles","setLoadingSubtitles","setPlaying","setLastJumpToTopTimestamp","setOffset","setPlaybackRate","setAudioTracks","setSelectedAudioTrack","setChannelId","setResumeOnFinishedAnkiDialogRequest","hideSubtitlePlayerRef","setDisabledSubtitleTracks","mediaAdapter","handleOnStartedShowingSubtitle","autoPausePreference","atStart","handleOnWillStopShowingSubtitle","atEnd","context","seek","forwardToMedia","setTime","clear","applyOffset","forwardToVideo","newSubtitles","installed","lte","channelClosed","onReady","uuidv4","init","subscribed","onExit","ready","subtitleSettings","ankiSettings","miscSettings","hideSubtitlePlayerToggle","onOffset","onPlaybackRate","onCurrentTime","tracks","newTracks","resumeOnFinishedAnkiDialogRequest","resume","seeking","expectedSeekTime","nextSubtitle","t0","process","encodeURIComponent","handlePlay","handlePause","handleSeekToSubtitle","shouldPlay","handleCopyFromSubtitlePlayer","handleMouseMove","screenX","screenY","audioTrackSelected","handleOffsetChange","HTMLMediaElement","handlePlaybackRateChange","handlePlayMode","handleToggleSubtitleTrack","handleSubtitlesSelected","autoCopyCurrentSubtitle","hasFocus","bindPlay","bindAdjustPlaybackRate","togglePlayMode","newPlayMode","bindAutoPause","bindCondensedPlayback","unbindCopy","unbindAnkiExport","appBarToggle","fullscreenToggle","loaded","videoInWindow","onMouseMove","gte","CustomFieldDialog","existingCustomFieldNames","setFieldName","fieldExists","DialogTitle","subtitleSetting","subtitlePreview","subtitlePreviewInput","outline","addFieldButton","switchLabel","useSelectableSettingStyles","formControl","SelectableSetting","selections","removable","onSelectionChange","onRemoval","FormControl","InputLabel","Select","MenuItem","keyBindProperties","extensionOverridden","modifierKeyReplacements","isMacOs","modifierKeys","useKeyBindFieldStyles","labelItem","KeyBindField","onKeysChange","onOpenExtensionShortcuts","currentKeyString","setCurrentKeyString","currentKeyStringRef","onKeysChangeRef","editing","setEditing","handleEditKeyBinding","nativeEvent","detail","pressed","getPressedKeyString","isAModifier","isBModifier","contains","xs","contentEditable","SettingsDialog","scrollToId","setAnkiConnectUrl","ankiConnectUrlError","setAnkiConnectUrlError","ankiConnectUrlChangeTimestamp","setAnkiConnectUrlChangeTimestamp","setDeck","deckNames","setDeckNames","setNoteType","modelNames","setModelNames","setSentenceField","setDefinitionField","setAudioField","setImageField","setWordField","setSourceField","setUrlField","setCustomFields","setPreferMp3","fieldNames","setFieldNames","customFieldDialogOpen","setCustomFieldDialogOpen","setAudioPaddingStart","setAudioPaddingEnd","maxImageWidth","setMaxImageWidth","maxImageHeight","setMaxImageHeight","setSurroundingSubtitlesCountRadius","setSurroundingSubtitlesTimeRadius","setSubtitleColor","setSubtitleSize","setSubtitleOutlineColor","setSubtitleOutlineThickness","setSubtitleBackgroundColor","setSubtitleBackgroundOpacity","setSubtitleFontFamily","imageBasedSubtitleScaleFactor","setImageBasedSubtitleScaleFactor","setSubtitlePreview","themeType","setThemeType","copyToClipboardOnMine","setCopyToClipboardOnMine","setAutoPausePreference","setKeyBindSet","setRememberSubtitleOffset","miningHistoryStorageLimit","setMiningHistoryStorageLimit","setAutoCopyCurrentSubtitle","subtitleRegexFilter","setSubtitleRegexFilter","subtitleRegexFilterTextReplacement","setSubtitleRegexFilterTextReplacement","handleAnkiConnectUrlChange","handleRetryAnkiConnectUrl","handleDeckChange","handleDeckSelectionChange","handleNoteTypeChange","handleNoteTypeSelectionChange","handleSentenceFieldChange","handleSentenceFieldSelectionChange","handleDefinitionFieldChange","handleDefinitionFieldSelectionChange","handleAudioFieldChange","handleAudioFieldSelectionChange","handleImageFieldChange","handleImageFieldSelectionChange","handleWordFieldChange","handleWordFieldSelectionChange","handleSourceFieldChange","handleSourceFieldSelectionChange","handleUrlFieldChange","handleUrlFieldSelectionChange","handleAudioPaddingStart","handleAudioPaddingEnd","handleMaxImageWidth","handleMaxImageHeight","handleSurroundingSubtitlesCountRadius","handleSurroundingSubtitlesTimeRadius","handleSubtitleColorChange","handleSubtitleSizeChange","handleSubtitleOutlineColorChange","handleSubtitleOutlineThicknessChange","handleSubtitleBackgroundColorChange","handleSubtitleBackgroundOpacityChange","handleSubtitleFontFamilyChange","handleSubtitlePreviewChange","handleImageBasedSubtitleScaleFactorChange","handleAddCustomField","oldCustomFields","newCustomFields","handleCustomFieldRemoval","handleTagsChange","handlePreferMp3Change","checked","handleThemeTypeChange","handleCopyToClipboardOnMine","handleAutoPausePreferenceChange","handleKeysChange","keyBindName","newKeyBindSet","handleRememberSubtitleOffsetChange","handleAutoCopyCurrentSubtitle","handleMiningHistoryStorageLimit","handleSubtitleRegexFilter","handleSubtitleRegexFilterTextReplacement","subtitlePreviewStyles","canceled","requestPermission","refreshFieldNames","modelFieldNames","handleClose","customFieldInputs","getElementById","validRegex","regexIsValid","FormLabel","FormGroup","FormHelperText","location","hostname","FormControlLabel","control","Switch","labelPlacement","inputProps","RadioGroup","row","Radio","properties","extensionCommands","openShortcuts","defaultAutoPausePreference","defaultKeyBindSet","ankiConnectUrlKey","deckKey","noteTypeKey","sentenceFieldKey","definitionFieldKey","audioFieldKey","imageFieldKey","wordFieldKey","sourceFieldKey","urlFieldKey","customAnkiFieldsKey","tagsKey","subtitleSizeKey","subtitleColorKey","subtitleOutlineThicknessKey","subtitleOutlineColorKey","subtitleBackgroundColorKey","subtitleBackgroundOpacityKey","subtitleFontFamilyKey","subtitlePreviewKey","imageBasedSubtitleScaleFactorKey","audioPaddingStartKey","audioPaddingEndKey","maxImageWidthKey","maxImageHeightKey","surroundingSubtitlesCountRadiusKey","surroundingSubtitlesTimeRadiusKey","preferMp3Key","themeTypeKey","copyToClipboardOnMineKey","autoPausePreferenceKey","keyBindSetKey","rememberSubtitleOffsetKey","autoCopyCurrentSubtitleKey","subtitleRegexFilterKey","subtitleRegexFilterTextReplacementKey","miningHistoryStorageLimitKey","SettingsProvider","_tags","_keyBindSet","_storage","newSettings","delete","_setOptionalItem","ankiFieldsString","tagsString","_getNumberItem","serialized","PlayerChannel","closeCallbacks","subtitlesCallbacks","subtitleSettingsCallbacks","miscSettingsCallbacks","ankiSettingsCallbacks","alertCallbacks","subtitlesMessage","subtitleSettingsMessage","playModeMessage","hideSubtitlePlayerToggleMessage","appBarToggleMessage","fullscreenToggleMessage","ankiSettingsMessage","miscSettingsMessage","alertMessage","AppKeyBinder","defaultKeyBinder","copyHandlers","ankiExportHandlers","updateLastCardHandlers","onExtensionMessage","handlers","h","KeyboardEvent","useCapture","_remove","splice","bindToggleSubtitles","bindToggleSubtitleTrackInVideo","onCondensedPlayback","overflow","cursorHidden","subtitleContainer","lineHeight","notifyReady","playerChannel","outerWidth","availHeight","outerHeight","resizeTo","selectedTrack","VideoPlayer","poppingInRef","setFullscreen","setLength","setVideoFileName","showSubtitles","setShowSubtitles","setSubtitlesEnabled","setSubtitlePlayerHidden","setAppBarHidden","setSubtitleAlignment","subtitlePositionOffset","setSubtitlePositionOffset","showSubtitlesRef","showCursor","setShowCursor","lastMouseMovementTimestamp","setMiscSettings","setSubtitleSettings","setAnkiSettings","alertOpen","setAlertOpen","setAlertMessage","alertSeverity","setAlertSeverity","videoRefCallback","videoElement","onloadeddata","ontimeupdate","code","errorMessage","selectAudioTrack","updateSubtitlesWithOffset","forwardToPlayer","onSubtitles","onSubtitleSettings","onMiscSettings","onAnkiSettings","onAlert","onbeforeunload","equals","arrayEquals","s1","s2","copy","toggleSubtitleTrackInList","extractSubtitles","noSubtitleCallback","subtitleCallback","handleSubtitlesToggle","handleFullscreenToggle","exitFullscreen","requestFullscreen","handlePopOutToggle","popOutToggle","handleHideSubtitlePlayerToggle","handleTheaterModeToggle","onWheel","deltaY","shouldIncreaseOffset","handleDoubleClick","subtitleStyles","handleAlertClosed","bounds","clientX","clientY","controls","onDoubleClick","isMobile","ChromeExtension","windowEventListener","onMessageCallbacks","onTabsCallbacks","heartbeatStarted","sender","tabsCommand","ackRequested","receivedTabs","fromVideoPlayer","_sendHeartbeat","videoPlayer","callbacks","keyBindNameMap","ChromeExtensionProvider","translatedCommands","extensionCommandName","CopyHistoryDatabase","copyHistoryItems","stores","Dexie","CopyHistoryRepository","limit","_db","_limit","count","reverse","toArray","audioTrack","filePlaybackRate","mediaTimestamp","record","audioFileName","put","_prune","lastIndex","where","belowOrEqual","primaryKeys","bulkDelete","useContentStyles","contentShift","audioClipFromItem","paddingStart","paddingEnd","fromBase64","calculateInterval","fromFile","fromMissingFile","imageFromItem","itemSourceString","NavigateToVideo","searchParams","to","RenderVideo","Content","App","createTheme","main","red","A400","useLocation","useSearchParams","inVideoPlayer","pathname","extensionProvider","setExtension","setVideoFullscreen","onChromeExtension","drawerRatio","minDrawerSize","copyHistoryRepository","copiedSubtitles","setCopiedSubtitles","copiedSubtitlesRef","copyHistoryOpen","setCopyHistoryOpen","setTheaterMode","setHideSubtitlePlayer","setVideoPopOut","alert","setAlert","setJumpToSubtitle","setRewindSubtitle","setSources","setLoading","setDragging","dragEnterRef","setFileName","ankiDialogOpen","setAnkiDialogOpen","ankiDialogDisabled","setAnkiDialogDisabled","ankiDialogItem","setAnkiDialogItem","ankiDialogItemSliderContext","itemSliderContext","ankiDialogAudioClip","ankiDialogImage","setAnkiDialogRequested","setAnkiDialogFinishedRequest","settingsDialogOpen","setSettingsDialogOpen","settingsDialogScrollToId","setSettingsDialogScrollToId","imageDialogOpen","setImageDialogOpen","setDisableKeyEvents","setImage","setTab","setAvailableTabs","fileInputRef","ankiDialogRequestedRef","handleError","handleAnkiDialogRequest","handleAnkiDialogRequestFromVideoPlayer","blobFile","File","handleAnkiDialogProceed","export","subtitleFile","newCopiedSubtitle","newCopiedSubtitles","save","handleOpenCopyHistory","handleCloseCopyHistory","handleAppBarToggle","fullscreenElement","handleHideSubtitlePlayer","handleVideoPopOut","handleOpenSettings","handleImageDialogClosed","handleCloseSettings","handleDeleteCopyHistoryItem","previous","clip","handleDownloadCopyHistorySectionAsSrt","deduplicated","toISOString","handleSelectCopyHistoryItem","handleAnki","handleAnkiDialogCancel","handleAnkiDialogRewind","subscribeTabs","t1","t2","handleFiles","extensionStartIndex","extractSources","revokeUrls","handleDirectory","fileSystemEntry","webkitGetAsEntry","isDirectory","fileSystemDirectoryEntry","createReader","readEntries","entries","filePromises","unsubscribe","startHeartbeat","syncMessage","handleAutoPauseModeChangedViaBind","oldPlayMode","handleDrop","dataTransfer","allDirectories","handleFileInputChange","handleFileSelector","nonSupSubtitleFiles","filesToSrt","handleDragOver","handleDragEnter","handleDragLeave","handleSourcesLoaded","hash","startsWith","nothingLoaded","effectiveCopyHistoryOpen","ThemeProvider","CssBaseline","onDrop","onDragOver","onDragEnter","onDragLeave","accept","multiple","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","createRoot","querySelector","render","basename"],"mappings":"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","file":"static/js/main.7afeeb2c.chunk.js","sourcesContent":["import { useLayoutEffect, useState } from 'react';\n\n// https://stackoverflow.com/questions/19014250/rerender-view-on-browser-resize-with-react\nexport function useWindowSize(enabled: boolean) {\n    const [size, setSize] = useState([0, 0]);\n\n    useLayoutEffect(() => {\n        function updateSize() {\n            if (enabled) {\n                setSize([window.innerWidth, window.innerHeight]);\n            }\n        }\n\n        window.addEventListener('resize', updateSize);\n        updateSize();\n\n        return () => window.removeEventListener('resize', updateSize);\n    }, [enabled]);\n\n    return size;\n}\n","import { SubtitleModel } from './model';\nimport hotkeys from 'hotkeys-js';\nimport { KeyBindSet } from './settings';\n\nexport interface KeyBinder {\n    bindCopy<T extends SubtitleModel = SubtitleModel>(\n        onCopy: (event: KeyboardEvent, subtitle: T) => void,\n        disabledGetter: () => boolean,\n        subtitleGetter: () => T | undefined,\n        capture?: boolean\n    ): () => void;\n    bindAnkiExport(\n        onAnkiExport: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        capture?: boolean\n    ): () => void;\n    bindUpdateLastCard(\n        onUpdateLastCard: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        capture?: boolean\n    ): () => void;\n    bindSeekToSubtitle(\n        onSeekToSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        capture?: boolean\n    ): () => void;\n    bindSeekToBeginningOfCurrentSubtitle(\n        onSeekToBeginningOfCurrentSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        capture?: boolean\n    ): () => void;\n    bindSeekBackwardOrForward(\n        onSeekBackwardOrForward: (event: KeyboardEvent, forward: boolean) => void,\n        disabledGetter: () => boolean,\n        capture?: boolean\n    ): () => void;\n    bindOffsetToSubtitle(\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        capture?: boolean\n    ): () => void;\n    bindAdjustOffset(\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\n        disabledGetter: () => boolean,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        capture?: boolean\n    ): () => void;\n    bindResetOffet(\n        onResetOffset: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        capture?: boolean\n    ): () => void;\n    bindAdjustPlaybackRate(\n        onAdjustPlaybackRate: (event: KeyboardEvent, increase: boolean) => void,\n        disabledGetter: () => boolean,\n        capture?: boolean\n    ): () => void;\n    bindToggleSubtitles(\n        onToggleSubtitles: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        capture?: boolean\n    ): () => void;\n    bindToggleSubtitleTrackInVideo(\n        onToggleSubtitleTrack: (event: KeyboardEvent, extra: any) => void,\n        disabledGetter: () => boolean,\n        capture?: boolean\n    ): () => void;\n    bindToggleSubtitleTrackInList(\n        onToggleSubtitleTrackInList: (event: KeyboardEvent, extra: any) => void,\n        disabledGetter: () => boolean,\n        capture?: boolean\n    ): () => void;\n    bindPlay(onPlay: (event: KeyboardEvent) => void, disabledGetter: () => boolean, capture?: boolean): () => void;\n    bindAutoPause(\n        onAutoPause: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        capture?: boolean\n    ): () => void;\n    bindCondensedPlayback(\n        onCondensedPlayback: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        capture?: boolean\n    ): () => void;\n}\n\nexport class DefaultKeyBinder implements KeyBinder {\n    private readonly keyBindSet: KeyBindSet;\n\n    constructor(keyBindSet: KeyBindSet) {\n        this.keyBindSet = keyBindSet;\n    }\n    bindCopy<T extends SubtitleModel = SubtitleModel>(\n        onCopy: (event: KeyboardEvent, subtitle: T) => void,\n        disabledGetter: () => boolean,\n        subtitleGetter: () => T | undefined,\n        capture = false\n    ) {\n        const shortcut = this.keyBindSet.copySubtitle.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = this.copyHandler(onCopy, disabledGetter, subtitleGetter);\n        return this._bind(shortcut, capture, handler);\n    }\n\n    copyHandler<T extends SubtitleModel>(\n        onCopy: (event: KeyboardEvent, subtitle: T) => void,\n        disabledGetter: () => boolean,\n        subtitleGetter: () => T | undefined\n    ) {\n        return (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            const subtitle = subtitleGetter();\n\n            if (!subtitle) {\n                return;\n            }\n\n            onCopy(event, subtitle);\n        };\n    }\n\n    bindAnkiExport(onAnkiExport: (event: KeyboardEvent) => void, disabledGetter: () => boolean, capture = false) {\n        const shortcut = this.keyBindSet.ankiExport.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = this.ankiExportHandler(onAnkiExport, disabledGetter);\n        return this._bind(shortcut, capture, handler);\n    }\n\n    ankiExportHandler(onAnkiExport: (event: KeyboardEvent) => void, disabledGetter: () => boolean) {\n        return (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onAnkiExport(event);\n        };\n    }\n\n    bindUpdateLastCard(\n        onUpdateLastCard: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        capture = false\n    ) {\n        const shortcut = this.keyBindSet.updateLastCard.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = this.updateLastCardHandler(onUpdateLastCard, disabledGetter);\n        return this._bind(shortcut, capture, handler);\n    }\n\n    updateLastCardHandler(onUpdateLastCard: (event: KeyboardEvent) => void, disabledGetter: () => boolean) {\n        return (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onUpdateLastCard(event);\n        };\n    }\n\n    bindSeekToSubtitle(\n        onSeekToSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        capture = false\n    ) {\n        const delegate = (event: KeyboardEvent, forward: boolean) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            const subtitles = subtitlesGetter();\n\n            if (!subtitles || subtitles.length === 0) {\n                return;\n            }\n\n            const subtitle = this._adjacentSubtitle(forward, timeGetter(), subtitles);\n\n            if (subtitle !== null && subtitle.start >= 0 && subtitle.end >= 0) {\n                onSeekToSubtitle(event, subtitle);\n            }\n        };\n        const previousShortcut = this.keyBindSet.seekToPreviousSubtitle.keys;\n        const nextShortcut = this.keyBindSet.seekToNextSubtitle.keys;\n        const previousHandler = (event: KeyboardEvent) => delegate(event, false);\n        const nextHandler = (event: KeyboardEvent) => delegate(event, true);\n\n        let unbindPrevious: (() => void) | undefined;\n        let unbindNext: (() => void) | undefined;\n\n        if (previousShortcut) {\n            unbindPrevious = this._bind(previousShortcut, capture, previousHandler);\n        }\n\n        if (nextShortcut) {\n            unbindNext = this._bind(nextShortcut, capture, nextHandler);\n        }\n\n        return () => {\n            unbindPrevious?.();\n            unbindNext?.();\n        };\n    }\n\n    bindSeekToBeginningOfCurrentSubtitle(\n        onSeekToBeginningOfCurrentSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        capture = false\n    ) {\n        const shortcut = this.keyBindSet.seekToBeginningOfCurrentSubtitle.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            const subtitles = subtitlesGetter();\n\n            if (!subtitles || subtitles.length === 0) {\n                return;\n            }\n\n            const subtitle = this._currentSubtitle(timeGetter(), subtitles);\n\n            if (subtitle !== undefined && subtitle.start >= 0 && subtitle.end >= 0) {\n                onSeekToBeginningOfCurrentSubtitle(event, subtitle);\n            }\n        };\n        return this._bind(shortcut, capture, handler);\n    }\n\n    _currentSubtitle(time: number, subtitles: SubtitleModel[]) {\n        const now = time;\n        let currentSubtitle: SubtitleModel | undefined;\n        let minDiff = Number.MAX_SAFE_INTEGER;\n\n        for (let i = 0; i < subtitles.length; ++i) {\n            const s = subtitles[i];\n\n            if (s.start < 0 || s.end < 0) {\n                continue;\n            }\n\n            const diff = now - s.start;\n\n            if (now >= s.start && now < s.end) {\n                if (diff < minDiff) {\n                    currentSubtitle = s;\n                    minDiff = diff;\n                }\n            }\n        }\n\n        return currentSubtitle;\n    }\n\n    bindSeekBackwardOrForward(\n        onSeekBackwardOrForward: (event: KeyboardEvent, forward: boolean) => void,\n        disabledGetter: () => boolean,\n        capture = false\n    ) {\n        const delegate = (event: KeyboardEvent, forward: boolean) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onSeekBackwardOrForward(event, forward);\n        };\n        const backShortcut = this.keyBindSet.seekBackward.keys;\n        const nextShortcut = this.keyBindSet.seekForward.keys;\n        const backHandler = (event: KeyboardEvent) => delegate(event, false);\n        const nextHandler = (event: KeyboardEvent) => delegate(event, true);\n\n        let unbindBack: (() => void) | undefined;\n        let unbindNext: (() => void) | undefined;\n\n        if (backShortcut) {\n            unbindBack = this._bind(backShortcut, capture, backHandler);\n        }\n\n        if (nextShortcut) {\n            unbindNext = this._bind(nextShortcut, capture, nextHandler);\n        }\n\n        return () => {\n            unbindBack?.();\n            unbindNext?.();\n        };\n    }\n\n    bindOffsetToSubtitle(\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        capture = false\n    ) {\n        const delegate = (event: KeyboardEvent, forward: boolean) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            const subtitles = subtitlesGetter();\n\n            if (!subtitles || subtitles.length === 0) {\n                return;\n            }\n\n            const time = timeGetter();\n            const subtitle = this._adjacentSubtitle(forward, time, subtitles);\n\n            if (subtitle !== null) {\n                const subtitleStart = subtitle.originalStart;\n                const newOffset = time - subtitleStart;\n                onOffsetChange(event, newOffset);\n            }\n        };\n        const previousShortcut = this.keyBindSet.adjustOffsetToPreviousSubtitle.keys;\n        const nextShortcut = this.keyBindSet.adjustOffsetToNextSubtitle.keys;\n        const previousHandler = (event: KeyboardEvent) => delegate(event, false);\n        const nextHandler = (event: KeyboardEvent) => delegate(event, true);\n\n        let unbindPrevious: (() => void) | undefined;\n        let unbindNext: (() => void) | undefined;\n\n        if (previousShortcut) {\n            unbindPrevious = this._bind(previousShortcut, capture, previousHandler);\n        }\n\n        if (nextShortcut) {\n            unbindNext = this._bind(nextShortcut, capture, nextHandler);\n        }\n\n        return () => {\n            unbindPrevious?.();\n            unbindNext?.();\n        };\n    }\n\n    _adjacentSubtitle(forward: boolean, time: number, subtitles: SubtitleModel[]) {\n        const now = time;\n        let adjacentSubtitleIndex = -1;\n        let minDiff = Number.MAX_SAFE_INTEGER;\n\n        for (let i = 0; i < subtitles.length; ++i) {\n            const s = subtitles[i];\n            const diff = forward ? s.start - now : now - s.start;\n\n            if (minDiff <= diff) {\n                continue;\n            }\n\n            if (forward && now < s.start) {\n                minDiff = diff;\n                adjacentSubtitleIndex = i;\n            } else if (!forward && now > s.start) {\n                minDiff = diff;\n                adjacentSubtitleIndex = now < s.end ? Math.max(0, i - 1) : i;\n            }\n        }\n\n        if (adjacentSubtitleIndex !== -1) {\n            return subtitles[adjacentSubtitleIndex];\n        }\n\n        return null;\n    }\n\n    bindAdjustOffset(\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\n        disabledGetter: () => boolean,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        capture = false\n    ) {\n        const delegate = (event: KeyboardEvent, increase: boolean) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            const subtitles = subtitlesGetter();\n\n            if (!subtitles || subtitles.length === 0) {\n                return;\n            }\n\n            const currentOffset = subtitles[0].start - subtitles[0].originalStart;\n            const newOffset = currentOffset + (increase ? 100 : -100);\n            onOffsetChange(event, newOffset);\n        };\n\n        const decreaseShortcut = this.keyBindSet.decreaseOffset.keys;\n        const increaseShortcut = this.keyBindSet.increaseOffset.keys;\n        const decreaseHandler = (event: KeyboardEvent) => delegate(event, false);\n        const increaseHandler = (event: KeyboardEvent) => delegate(event, true);\n\n        const unbindDecrease = this._bind(decreaseShortcut, capture, decreaseHandler);\n        const unbindIncrease = this._bind(increaseShortcut, capture, increaseHandler);\n        return () => {\n            unbindDecrease();\n            unbindIncrease();\n        };\n    }\n\n    bindResetOffet(\n        onResetOffset: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        capture?: boolean | undefined\n    ) {\n        const shortcut = this.keyBindSet.resetOffset.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onResetOffset(event);\n        };\n\n        return this._bind(shortcut, capture ?? false, handler);\n    }\n\n    bindAdjustPlaybackRate(\n        onAdjustPlaybackRate: (event: KeyboardEvent, increase: boolean) => void,\n        disabledGetter: () => boolean,\n        capture = false\n    ) {\n        const delegate = (event: KeyboardEvent, increase: boolean) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onAdjustPlaybackRate(event, increase);\n        };\n        const increaseShortcut = this.keyBindSet.increasePlaybackRate.keys;\n        const decreaseShortcut = this.keyBindSet.decreasePlaybackRate.keys;\n        const decreaseHandler = (event: KeyboardEvent) => delegate(event, false);\n        const increaseHandler = (event: KeyboardEvent) => delegate(event, true);\n        let unbindDecrease: (() => void) | undefined;\n        let unbindIncrease: (() => void) | undefined;\n\n        if (decreaseShortcut) {\n            unbindDecrease = this._bind(decreaseShortcut, capture, decreaseHandler);\n        }\n\n        if (increaseShortcut) {\n            unbindIncrease = this._bind(increaseShortcut, capture, increaseHandler);\n        }\n\n        return () => {\n            unbindDecrease?.();\n            unbindIncrease?.();\n        };\n    }\n\n    bindToggleSubtitles(\n        onToggleSubtitles: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        capture = false\n    ) {\n        const shortcut = this.keyBindSet.toggleSubtitles.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onToggleSubtitles(event);\n        };\n        return this._bind(shortcut, capture, handler);\n    }\n\n    bindToggleSubtitleTrackInVideo(\n        onToggleSubtitleTrack: (event: KeyboardEvent, extra: any) => void,\n        disabledGetter: () => boolean,\n        capture = false\n    ) {\n        const shortcuts = [\n            this.keyBindSet.toggleVideoSubtitleTrack1.keys,\n            this.keyBindSet.toggleVideoSubtitleTrack2.keys,\n        ].filter((s) => s);\n\n        if (shortcuts.length === 0) {\n            return () => {};\n        }\n\n        const delegate = (event: KeyboardEvent, track: number) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onToggleSubtitleTrack(event, track);\n        };\n        let unbindHandlers: (() => void)[] = [];\n\n        for (let i = 0; i < shortcuts.length; ++i) {\n            const handler = (event: KeyboardEvent) => delegate(event, i);\n            unbindHandlers.push(this._bind(shortcuts[i], capture, handler));\n        }\n\n        return () => {\n            for (let i = 0; i < shortcuts.length; ++i) {\n                const unbindHandler = unbindHandlers[i];\n                unbindHandler();\n            }\n        };\n    }\n\n    bindToggleSubtitleTrackInList(\n        onToggleSubtitleTrackInList: (event: KeyboardEvent, extra: any) => void,\n        disabledGetter: () => boolean,\n        capture = false\n    ) {\n        const shortcuts = [\n            this.keyBindSet.toggleAsbplayerSubtitleTrack1.keys,\n            this.keyBindSet.toggleAsbplayerSubtitleTrack2.keys,\n        ].filter((s) => s);\n\n        if (shortcuts.length === 0) {\n            return () => {};\n        }\n\n        const delegate = (event: KeyboardEvent, track: number) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onToggleSubtitleTrackInList(event, track);\n        };\n\n        let unbindHandlers: (() => void)[] = [];\n\n        for (let i = 0; i < 9; ++i) {\n            const handler = (event: KeyboardEvent) => delegate(event, i);\n            const unbindHandler = this._bind(shortcuts[i], capture, handler);\n            unbindHandlers.push(unbindHandler);\n        }\n\n        return () => {\n            for (let i = 0; i < 9; ++i) {\n                const unbindHandler = unbindHandlers[i];\n                unbindHandler();\n            }\n        };\n    }\n\n    bindPlay(onPlay: (event: KeyboardEvent) => void, disabledGetter: () => boolean, capture = false) {\n        const shortcut = this.keyBindSet.togglePlay.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onPlay(event);\n        };\n\n        return this._bind(shortcut, capture, handler);\n    }\n\n    bindAutoPause(onAutoPause: (event: KeyboardEvent) => void, disabledGetter: () => boolean, capture = false) {\n        const shortcut = this.keyBindSet.toggleAutoPause.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onAutoPause(event);\n        };\n\n        return this._bind(shortcut, capture, handler);\n    }\n\n    bindCondensedPlayback(onAutoPause: (event: KeyboardEvent) => void, disabledGetter: () => boolean, capture = false) {\n        const shortcut = this.keyBindSet.toggleCondensedPlayback.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onAutoPause(event);\n        };\n\n        return this._bind(shortcut, capture, handler);\n    }\n\n    private _bind(shortcut: string, capture: boolean, handler: (event: KeyboardEvent) => void) {\n        const wrappedHandler = (event: KeyboardEvent) => {\n            if (event.type === 'keydown') {\n                handler(event);\n            } else if (event.type === 'keyup') {\n                event.preventDefault();\n                event.stopImmediatePropagation();\n            }\n        };\n        hotkeys(shortcut, { capture, keydown: true, keyup: true }, wrappedHandler);\n        return () => hotkeys.unbind(shortcut, wrappedHandler);\n    }\n}\n","export default class Mp3Encoder {\n    static async encode(blob: Blob, workerFactory: () => Worker): Promise<Blob> {\n        return new Promise(async (resolve, reject) => {\n            var reader = new FileReader();\n            reader.onload = async (e) => {\n                try {\n                    const audioContext = new AudioContext();\n\n                    if (e.target === null) {\n                        reject(new Error(\"Could not obtain buffer to encode\"));\n                        return;\n                    }\n\n                    const audioBuffer = await audioContext.decodeAudioData(e.target.result as ArrayBuffer);\n                    const channels = [];\n\n                    for (let i = 0; i < audioBuffer.numberOfChannels; ++i) {\n                        channels.push(audioBuffer.getChannelData(i));\n                    }\n\n                    const worker = workerFactory();\n                    worker.postMessage({\n                        command: 'encode',\n                        audioBuffer: {\n                            channels: channels,\n                            numberOfChannels: audioBuffer.numberOfChannels,\n                            length: audioBuffer.length,\n                            sampleRate: audioBuffer.sampleRate,\n                        },\n                    });\n                    worker.onmessage = (e) => {\n                        resolve(new Blob(e.data.buffer, { type: 'audio/mp3' }));\n                        worker.terminate();\n                    };\n                    worker.onerror = (e) => {\n                        const error = e?.error ?? new Error('MP3 encoding failed: ' + e?.message);\n                        reject(error);\n                        worker.terminate();\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            };\n            reader.readAsArrayBuffer(blob);\n        });\n    }\n}\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/mp3-encoder-worker.7f842300.worker.js\");\n}\n","import sanitize from 'sanitize-filename';\nimport { SubtitleModel } from './model';\n\nexport function humanReadableTime(timestamp: number, nearestTenth = false): string {\n    const totalSeconds = Math.floor(timestamp / 1000);\n    let seconds;\n\n    if (nearestTenth) {\n        seconds = Math.round(((timestamp / 1000) % 60) * 10) / 10;\n    } else {\n        seconds = totalSeconds % 60;\n    }\n\n    const minutes = Math.floor(totalSeconds / 60) % 60;\n    const hours = Math.floor(totalSeconds / 3600);\n\n    if (hours > 0) {\n        return hours + 'h' + String(minutes).padStart(2, '0') + 'm' + String(seconds).padStart(2, '0') + 's';\n    }\n\n    return minutes + 'm' + String(seconds).padStart(2, '0') + 's';\n}\n\nexport function surroundingSubtitles(\n    subtitles: SubtitleModel[],\n    index: number,\n    countRadius: number,\n    timeRadius: number\n): SubtitleModel[] {\n    let startIndex = index;\n\n    for (let i = index; i >= 0; --i) {\n        startIndex = i;\n\n        if (atBoundary(subtitles, startIndex, index, countRadius, timeRadius, Direction.backward)) {\n            break;\n        }\n    }\n\n    let endIndex = startIndex;\n\n    for (let i = index; i <= subtitles.length - 1; ++i) {\n        endIndex = i;\n\n        if (atBoundary(subtitles, endIndex, index, countRadius, timeRadius, Direction.forward)) {\n            break;\n        }\n    }\n\n    return subtitles.slice(startIndex, endIndex + 1);\n}\n\nfunction indexNearTimestamp(subtitles: SubtitleModel[], timestamp: number, direction: Direction) {\n    if (direction === Direction.forward) {\n        for (let i = 0; i < subtitles.length; ++i) {\n            if (subtitles[i].start >= timestamp) {\n                return i;\n            }\n        }\n    } else {\n        for (let i = subtitles.length - 1; i >= 0; --i) {\n            if (subtitles[i].start <= timestamp) {\n                return i;\n            }\n        }\n    }\n\n    return undefined;\n}\n\nexport function surroundingSubtitlesAroundInterval(\n    subtitles: SubtitleModel[],\n    startTimestamp: number,\n    endTimestamp: number,\n    countRadius: number,\n    timeRadius: number\n) {\n    if (subtitles.length === 0) {\n        return {};\n    }\n\n    let startBoundaryIndex = 0;\n    const indexAfterStartTimestamp =\n        indexNearTimestamp(subtitles, startTimestamp, Direction.forward) ?? subtitles.length - 1;\n\n    for (let i = 0; i < subtitles.length; ++i) {\n        startBoundaryIndex = i;\n\n        if (\n            withinBoundaryAroundInterval(\n                subtitles,\n                i,\n                countRadius,\n                timeRadius,\n                startTimestamp,\n                indexAfterStartTimestamp\n            )\n        ) {\n            break;\n        }\n    }\n\n    let endBoundaryIndex = subtitles.length - 1;\n    const indexBeforeEndTimestamp = indexNearTimestamp(subtitles, endTimestamp, Direction.backward) ?? 0;\n\n    for (let i = subtitles.length - 1; i >= 0; --i) {\n        endBoundaryIndex = i;\n\n        if (\n            withinBoundaryAroundInterval(subtitles, i, countRadius, timeRadius, endTimestamp, indexBeforeEndTimestamp)\n        ) {\n            break;\n        }\n    }\n\n    if (endBoundaryIndex <= startBoundaryIndex) {\n        return {};\n    }\n\n    return {\n        surroundingSubtitles: subtitles.slice(startBoundaryIndex, endBoundaryIndex + 1),\n        subtitle: subtitles[indexAfterStartTimestamp],\n    };\n}\n\nexport function mockSurroundingSubtitles(\n    middleSubtitle: SubtitleModel,\n    maxTimestamp: number,\n    timeRadius: number\n): SubtitleModel[] {\n    const subtitles = [middleSubtitle];\n    const offset = middleSubtitle.start - middleSubtitle.originalStart;\n\n    if (middleSubtitle.end < maxTimestamp) {\n        const afterTimestamp = Math.min(maxTimestamp, middleSubtitle.end + timeRadius);\n        subtitles.push({\n            text: '',\n            start: middleSubtitle.end,\n            end: afterTimestamp,\n            originalStart: middleSubtitle.end - offset,\n            originalEnd: afterTimestamp - offset,\n            track: middleSubtitle.track,\n        });\n    }\n\n    if (middleSubtitle.start > 0) {\n        const beforeTimestamp = Math.max(0, middleSubtitle.start - timeRadius);\n        subtitles.unshift({\n            text: '',\n            start: beforeTimestamp,\n            end: middleSubtitle.start,\n            originalStart: beforeTimestamp - offset,\n            originalEnd: middleSubtitle.start - offset,\n            track: middleSubtitle.track,\n        });\n    }\n\n    return subtitles;\n}\n\nenum Direction {\n    forward,\n    backward,\n}\n\nfunction atBoundary(\n    subtitles: SubtitleModel[],\n    index: number,\n    initialIndex: number,\n    countRadius: number,\n    timeRadius: number,\n    direction: Direction\n): boolean {\n    let next;\n\n    if (direction == Direction.forward) {\n        next = index + 1 < subtitles.length ? subtitles[index + 1] : null;\n    } else {\n        next = index - 1 >= 0 ? subtitles[index - 1] : null;\n    }\n\n    if (\n        Math.abs(initialIndex - index) >= countRadius &&\n        (next === null || Math.abs(next.start - subtitles[initialIndex].start) >= timeRadius)\n    ) {\n        return true;\n    }\n\n    return false;\n}\n\nfunction withinBoundaryAroundInterval(\n    subtitles: SubtitleModel[],\n    index: number,\n    countRadius: number,\n    timeRadius: number,\n    timestamp: number,\n    indexNearTimestamp: number\n): boolean {\n    const current = subtitles[index];\n\n    if (Math.abs(indexNearTimestamp - index) <= countRadius || Math.abs(current.start - timestamp) <= timeRadius) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function subtitleIntersectsTimeInterval(subtitle: SubtitleModel, interval: number[]) {\n    const length = Math.max(0, subtitle.end - subtitle.start);\n\n    if (length === 0) {\n        return false;\n    }\n\n    const overlapStart = Math.max(subtitle.start, interval[0]);\n    const overlapEnd = Math.min(subtitle.end, interval[1]);\n\n    return overlapEnd - overlapStart >= length / 2;\n}\n\nexport function joinSubtitles(subtitles: SubtitleModel[]) {\n    return subtitles\n        .filter((s) => s.text.trim() !== '')\n        .map((s) => s.text)\n        .join('\\n');\n}\n\nexport function extractText(subtitle: SubtitleModel, surroundingSubtitles: SubtitleModel[]) {\n    if (surroundingSubtitles.length === 0) {\n        return subtitle.text;\n    }\n\n    const interval = [subtitle.start, subtitle.end];\n    return joinSubtitles(surroundingSubtitles.filter((s) => subtitleIntersectsTimeInterval(s, interval)));\n}\n\nexport function download(blob: Blob, name: string) {\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    document.body.appendChild(a);\n    a.style.display = 'none';\n    a.href = url;\n    a.download = sanitize(name);\n    a.click();\n    URL.revokeObjectURL(url);\n    a.remove();\n}\n","import Mp3Encoder from './mp3-encoder';\n// eslint-disable-next-line\n// @ts-ignore\nimport Worker from 'worker-loader!./mp3-encoder-worker.js';\nimport { download } from './util';\nconst defaultMp3WorkerFactory = () => new Worker();\n\ninterface ExperimentalAudioElement extends HTMLAudioElement {\n    audioTracks: any;\n    captureStream?: () => MediaStream;\n    mozCaptureStream?: () => MediaStream;\n}\n\ninterface AudioData {\n    name: string;\n    extension: string;\n    start: number;\n    end: number;\n    play: () => Promise<void>;\n    blob: () => Promise<Blob>;\n    base64: () => Promise<string>;\n    slice: (start: number, end: number) => AudioData;\n    isSliceable: () => boolean;\n    isPlayable: () => boolean;\n}\n\nfunction recorderConfiguration() {\n    const AUDIO_TYPES: { [key: string]: string } = {\n        'audio/ogg;codecs=opus': 'ogg',\n        'audio/webm;codecs=opus': 'webm',\n    };\n    return Object.keys(AUDIO_TYPES)\n        .filter(MediaRecorder.isTypeSupported)\n        .map((t) => [t as string, AUDIO_TYPES[t] as string])[0];\n}\n\nclass Base64AudioData implements AudioData {\n    private readonly _name: string;\n    private readonly _start: number;\n    private readonly _end: number;\n    private readonly playbackRate: number;\n    private readonly _base64: string;\n    private readonly _extension: string;\n\n    private playingAudio?: HTMLAudioElement;\n    private stopAudioTimeout?: NodeJS.Timeout;\n    private cachedBlob?: Blob;\n\n    constructor(baseName: string, start: number, end: number, playbackRate: number, base64: string, extension: string) {\n        this._name = baseName + '_' + Math.floor(start) + '_' + Math.floor(end);\n        this._start = start;\n        this._end = end;\n        this.playbackRate = playbackRate;\n        this._base64 = base64;\n        this._extension = extension;\n    }\n\n    get name(): string {\n        return this._name;\n    }\n\n    get extension(): string {\n        return this._extension;\n    }\n\n    get start(): number {\n        return this._start;\n    }\n\n    get end(): number {\n        return this._end;\n    }\n\n    async base64() {\n        return this._base64;\n    }\n\n    async blob() {\n        return await this._blob();\n    }\n\n    async play(): Promise<void> {\n        if (this.playingAudio) {\n            this.stopAudio(this.playingAudio);\n            clearTimeout(this.stopAudioTimeout!);\n            this.playingAudio = undefined;\n            this.stopAudioTimeout = undefined;\n            return;\n        }\n\n        const blob = await this._blob();\n        const audio = new Audio();\n        audio.src = URL.createObjectURL(blob);\n        audio.preload = 'none';\n        audio.load();\n        this.playingAudio = audio;\n\n        await audio.play();\n\n        this.stopAudioTimeout = setTimeout(() => {\n            this.stopAudio(audio);\n            this.playingAudio = undefined;\n            this.stopAudioTimeout = undefined;\n        }, (this._end - this._start) / this.playbackRate + 100);\n    }\n\n    private stopAudio(audio: HTMLAudioElement) {\n        audio.pause();\n        const src = audio.src;\n        audio.src = '';\n        URL.revokeObjectURL(src);\n    }\n\n    async _blob() {\n        if (!this.cachedBlob) {\n            this.cachedBlob = await (await fetch('data:audio/' + this.extension + ';base64,' + this._base64)).blob();\n        }\n\n        return this.cachedBlob;\n    }\n\n    slice(start: number, end: number): AudioData {\n        // Not supported\n        return this;\n    }\n\n    isSliceable() {\n        return false;\n    }\n\n    isPlayable() {\n        return true;\n    }\n}\n\nclass FileAudioData implements AudioData {\n    private readonly file: File;\n    private readonly _name: string;\n    private readonly _start: number;\n    private readonly _end: number;\n    private readonly playbackRate: number;\n    private readonly trackId?: string;\n    private readonly _extension: string;\n    private readonly recorderMimeType: string;\n\n    private clippingAudio?: HTMLAudioElement;\n    private clippingAudioReject?: (error: string) => void;\n    private stopClippingTimeout?: NodeJS.Timeout;\n\n    private playingAudio?: HTMLAudioElement;\n    private stopAudioTimeout?: NodeJS.Timeout;\n\n    private _blob?: Blob;\n\n    constructor(file: File, start: number, end: number, playbackRate: number, trackId?: string) {\n        const [recorderMimeType, recorderExtension] = recorderConfiguration();\n        this.recorderMimeType = recorderMimeType;\n        this.file = file;\n        this._name = file.name + '_' + start + '_' + end;\n        this._start = start;\n        this._end = end;\n        this.playbackRate = playbackRate;\n        this.trackId = trackId;\n        this._extension = recorderExtension;\n    }\n\n    get name(): string {\n        return this._name;\n    }\n\n    get extension(): string {\n        return this._extension;\n    }\n\n    get start() {\n        return this._start;\n    }\n\n    get end() {\n        return this._end;\n    }\n\n    async base64() {\n        return new Promise<string>(async (resolve, reject) => {\n            var reader = new FileReader();\n            const blob = await this.blob();\n\n            if (blob === undefined) {\n                reject('Did not finish recording blob');\n            } else {\n                reader.readAsDataURL(blob);\n                reader.onloadend = () => {\n                    const result = reader.result as string;\n                    const base64 = result.substring(result.indexOf(',') + 1);\n                    resolve(base64);\n                };\n            }\n        });\n    }\n\n    async play() {\n        if (!this._blob) {\n            this._blob = await this._clipAudio();\n            return;\n        }\n\n        if (this.playingAudio) {\n            this.stopAudio(this.playingAudio);\n            clearTimeout(this.stopAudioTimeout!);\n            this.playingAudio = undefined;\n            this.stopAudioTimeout = undefined;\n            return;\n        }\n\n        const audio = await this._audioElement(this._blob, false);\n        audio.currentTime = 0;\n        await audio.play();\n        this.playingAudio = audio;\n        this.stopAudioTimeout = setTimeout(() => {\n            this.stopAudio(audio);\n            this.stopAudioTimeout = undefined;\n            this.playingAudio = undefined;\n        }, (this._end - this._start) / this.playbackRate + 100);\n    }\n\n    async blob() {\n        if (!this._blob) {\n            this._blob = await this._clipAudio();\n        }\n\n        if (this._blob === undefined) {\n            throw new Error('Did not finish recording blob');\n        }\n\n        return this._blob;\n    }\n\n    async _clipAudio(): Promise<Blob | undefined> {\n        if (this.clippingAudio) {\n            this.stopAudio(this.clippingAudio);\n            clearTimeout(this.stopClippingTimeout!);\n            this.clippingAudioReject?.('Did not finish recording blob');\n            this.clippingAudio = undefined;\n            this.stopClippingTimeout = undefined;\n            this.clippingAudioReject = undefined;\n            return undefined;\n        }\n\n        return new Promise(async (resolve, reject) => {\n            try {\n                const audio = await this._audioElement(this.file, true);\n                audio.oncanplay = async (e) => {\n                    audio.play();\n                    const stream = this._captureStream(audio);\n                    const recorder = new MediaRecorder(stream, { mimeType: this.recorderMimeType });\n                    const chunks: BlobPart[] = [];\n\n                    recorder.ondataavailable = (e) => {\n                        chunks.push(e.data);\n                    };\n\n                    let finished = false;\n\n                    recorder.onstop = (e) => {\n                        if (finished) {\n                            resolve(new Blob(chunks, { type: this.recorderMimeType }));\n                        }\n                    };\n\n                    recorder.start();\n\n                    this.clippingAudioReject = reject;\n                    this.clippingAudio = audio;\n                    this.stopClippingTimeout = setTimeout(() => {\n                        this.stopAudio(audio);\n                        this.clippingAudio = undefined;\n                        this.stopClippingTimeout = undefined;\n                        this.clippingAudioReject = undefined;\n                        finished = true;\n                        recorder.stop();\n                        for (const track of stream.getAudioTracks()) {\n                            track.stop();\n                        }\n                    }, (this._end - this._start) / this.playbackRate + 100);\n                };\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    private _audioElement(source: Blob, selectTrack: boolean): Promise<ExperimentalAudioElement> {\n        const audio = new Audio() as ExperimentalAudioElement;\n        audio.src = URL.createObjectURL(source);\n\n        return new Promise((resolve, reject) => {\n            audio.onloadedmetadata = (e) => {\n                if (selectTrack && this.trackId && audio.audioTracks && audio.audioTracks.length > 0) {\n                    // @ts-ignore\n                    for (const t of audio.audioTracks) {\n                        t.enabled = this.trackId === t.id;\n                    }\n                }\n\n                audio.currentTime = this._start / 1000;\n                audio.playbackRate = this.playbackRate;\n                resolve(audio);\n            };\n        });\n    }\n\n    private stopAudio(audio: HTMLAudioElement) {\n        audio.pause();\n        const src = audio.src;\n        audio.src = '';\n        URL.revokeObjectURL(src);\n    }\n\n    private _captureStream(audio: ExperimentalAudioElement) {\n        let stream: MediaStream | undefined;\n\n        if (typeof audio.captureStream === 'function') {\n            stream = audio.captureStream();\n        }\n\n        if (typeof audio.mozCaptureStream === 'function') {\n            stream = audio.mozCaptureStream();\n        }\n\n        if (stream === undefined) {\n            throw new Error('Unable to capture stream from audio');\n        }\n\n        const audioStream = new MediaStream();\n\n        for (const track of stream.getVideoTracks()) {\n            track.stop();\n        }\n\n        for (const track of stream.getAudioTracks()) {\n            if (track.enabled) {\n                audioStream.addTrack(track);\n            }\n        }\n\n        return audioStream;\n    }\n\n    slice(start: number, end: number) {\n        return new FileAudioData(this.file, start, end, this.playbackRate, this.trackId);\n    }\n\n    isSliceable() {\n        return true;\n    }\n\n    isPlayable() {\n        return true;\n    }\n}\n\nclass Mp3AudioData implements AudioData {\n    private readonly data: AudioData;\n    private readonly workerFactory: () => Worker;\n    private _blob?: Blob;\n\n    constructor(data: AudioData, workerFactory: () => Worker) {\n        this.data = data;\n        this.workerFactory = workerFactory;\n    }\n\n    get name() {\n        return this.data.name;\n    }\n\n    get extension() {\n        return 'mp3';\n    }\n\n    get start() {\n        return this.data.start;\n    }\n\n    get end() {\n        return this.data.end;\n    }\n\n    async base64() {\n        return new Promise<string>(async (resolve, reject) => {\n            try {\n                var reader = new FileReader();\n                reader.readAsDataURL(await this.blob());\n                reader.onloadend = () => {\n                    const result = reader.result as string;\n                    const base64 = result.substring(result.indexOf(',') + 1);\n                    resolve(base64);\n                };\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    async play() {\n        await this.data.play();\n    }\n\n    async blob() {\n        if (!this._blob) {\n            this._blob = await Mp3Encoder.encode(await this.data.blob(), this.workerFactory);\n        }\n\n        return this._blob;\n    }\n\n    slice(start: number, end: number) {\n        return new Mp3AudioData(this.data.slice(start, end), this.workerFactory);\n    }\n\n    isSliceable() {\n        return this.data.isSliceable();\n    }\n\n    isPlayable() {\n        return this.data.isPlayable();\n    }\n}\n\nclass MissingFileAudioData implements AudioData {\n    private readonly _name: string;\n    private readonly _start: number;\n    private readonly _end: number;\n    private readonly _extension: string;\n\n    constructor(fileName: string, start: number, end: number) {\n        this._name = `${fileName}_${start}_${end}`;\n        this._start = start;\n        this._end = end;\n        [, this._extension] = recorderConfiguration();\n    }\n\n    get name() {\n        return this._name;\n    }\n\n    get extension() {\n        return this._extension;\n    }\n\n    get start() {\n        return this._start;\n    }\n\n    get end() {\n        return this._end;\n    }\n\n    async base64(): Promise<string> {\n        throw new Error('Not supported');\n    }\n\n    async play() {\n        throw new Error('Not supported');\n    }\n\n    async blob(): Promise<Blob> {\n        throw new Error('Not supported');\n    }\n\n    slice(start: number, end: number): AudioData {\n        // Not  supported\n        return this;\n    }\n\n    isSliceable() {\n        return false;\n    }\n\n    isPlayable() {\n        return false;\n    }\n}\n\nexport default class AudioClip {\n    private readonly data: AudioData;\n\n    constructor(data: AudioData) {\n        this.data = data;\n    }\n\n    static fromBase64(\n        subtitleFileName: string,\n        start: number,\n        end: number,\n        playbackRate: number,\n        base64: string,\n        extension: string\n    ) {\n        return new AudioClip(\n            new Base64AudioData(\n                subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')),\n                start,\n                end,\n                playbackRate,\n                base64,\n                extension\n            )\n        );\n    }\n\n    static fromFile(file: File, start: number, end: number, playbackRate: number, trackId?: string) {\n        return new AudioClip(new FileAudioData(file, start, end, playbackRate, trackId));\n    }\n\n    static fromMissingFile(fileName: string, start: number, end: number) {\n        return new AudioClip(new MissingFileAudioData(fileName, start, end));\n    }\n\n    get start() {\n        return this.data.start;\n    }\n\n    get end() {\n        return this.data.end;\n    }\n\n    get name() {\n        return this.data.name + '.' + this.data.extension;\n    }\n\n    async play() {\n        await this.data.play();\n    }\n\n    async base64() {\n        return await this.data.base64();\n    }\n\n    async download() {\n        const blob = await this.data.blob();\n        download(blob, this.name);\n    }\n\n    toMp3(mp3WorkerFactory = defaultMp3WorkerFactory) {\n        if (this.data instanceof Mp3AudioData) {\n            return this;\n        }\n\n        if (this.data.extension === 'mp3') {\n            return this;\n        }\n\n        return new AudioClip(new Mp3AudioData(this.data, mp3WorkerFactory));\n    }\n\n    slice(start: number, end: number) {\n        return new AudioClip(this.data.slice(start, end));\n    }\n\n    isSliceable() {\n        return this.data.isSliceable();\n    }\n\n    isPlayable() {\n        return this.data.isPlayable();\n    }\n}\n","export default class CanvasResizer {\n    resize(\n        canvas: HTMLCanvasElement,\n        ctx: CanvasRenderingContext2D,\n        maxWidth: number,\n        maxHeight: number\n    ): Promise<HTMLCanvasElement> {\n        return new Promise((resolve, reject) => {\n            const widthRatio = maxWidth <= 0 ? 1 : maxWidth / canvas.width;\n            const heightRatio = maxHeight <= 0 ? 1 : maxHeight / canvas.height;\n            const ratio = Math.min(1, Math.min(widthRatio, heightRatio));\n\n            if (ratio < 1) {\n                const newWidth = canvas.width * ratio;\n                const newHeight = canvas.height * ratio;\n                createImageBitmap(canvas, { resizeWidth: newWidth, resizeHeight: newHeight, resizeQuality: 'high' })\n                    .then((sprite) => {\n                        canvas.width = newWidth;\n                        canvas.height = newHeight;\n                        ctx.drawImage(sprite, 0, 0);\n                        resolve(canvas);\n                    })\n                    .catch((e) => reject(e));\n            } else {\n                resolve(canvas);\n            }\n        });\n    }\n}\n","import CanvasResizer from './canvas-resizer';\nimport { download } from './util';\n\nclass Base64ImageData implements ImageData {\n    private readonly _name: string;\n    private readonly _base64: string;\n    private readonly _extension: string;\n\n    private cachedBlob?: Blob;\n\n    constructor(name: string, base64: string, extension: string) {\n        this._name = name;\n        this._base64 = base64;\n        this._extension = extension;\n    }\n\n    get name() {\n        return this._name;\n    }\n\n    get extension() {\n        return this._extension;\n    }\n\n    get available() {\n        return true;\n    }\n\n    async base64() {\n        return this._base64;\n    }\n\n    async blob() {\n        return await this._blob();\n    }\n\n    async _blob() {\n        if (!this.cachedBlob) {\n            this.cachedBlob = await (await fetch(this._dataUrl())).blob();\n        }\n\n        return this.cachedBlob;\n    }\n\n    async dataUrl() {\n        return this._dataUrl();\n    }\n\n    _dataUrl() {\n        return 'data:image/' + this.extension + ';base64,' + this._base64;\n    }\n}\n\nclass FileImageData implements ImageData {\n    private readonly file: File;\n    private readonly timestamp: number;\n    private readonly maxWidth: number;\n    private readonly maxHeight: number;\n    private readonly _name: string;\n\n    constructor(file: File, timestamp: number, maxWidth: number, maxHeight: number) {\n        this.file = file;\n        this._name = file.name + '_' + Math.floor(timestamp) + '.jpeg';\n        this.timestamp = timestamp;\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n    }\n\n    get name() {\n        return this._name;\n    }\n\n    get extension() {\n        return 'jpeg';\n    }\n\n    get available() {\n        return true;\n    }\n\n    async base64(): Promise<string> {\n        return new Promise(async (resolve, reject) => {\n            const canvas = await this._canvas();\n            const dataUrl = canvas.toDataURL('image/jpeg');\n            resolve(dataUrl.substring(dataUrl.indexOf(',') + 1));\n        });\n    }\n\n    async blob(): Promise<Blob> {\n        return new Promise(async (resolve, reject) => {\n            const canvas = await this._canvas();\n            canvas.toBlob((blob) => {\n                if (blob === null) {\n                    reject(new Error('Could not obtain blob'));\n                } else {\n                    resolve(blob);\n                }\n            }, 'image/jpeg');\n        });\n    }\n\n    async dataUrl() {\n        const canvas = await this._canvas();\n        return canvas.toDataURL();\n    }\n\n    async _canvas(): Promise<HTMLCanvasElement> {\n        return new Promise(async (resolve, reject) => {\n            const video = this._videoElement(this.file);\n\n            video.oncanplay = async (e) => {\n                const canvas = document.createElement('canvas');\n                canvas.width = video.videoWidth;\n                canvas.height = video.videoHeight;\n                const ctx = canvas.getContext('2d');\n                ctx!.drawImage(video, 0, 0, canvas.width, canvas.height);\n                if (this.maxWidth > 0 || this.maxHeight > 0) {\n                    const resizer = new CanvasResizer();\n                    await resizer.resize(canvas, ctx!, this.maxWidth, this.maxHeight);\n                    resolve(canvas);\n                } else {\n                    resolve(canvas);\n                }\n                URL.revokeObjectURL(video.src);\n            };\n        });\n    }\n\n    _videoElement(source: File) {\n        const video = document.createElement('video');\n        video.src = URL.createObjectURL(source);\n        video.preload = 'none';\n        video.currentTime = this.timestamp / 1000;\n        video.load();\n\n        return video;\n    }\n}\n\nclass MissingFileImageData implements ImageData {\n    private readonly _name: string;\n\n    constructor(fileName: string, timestamp: number) {\n        this._name = `${fileName}_${Math.floor(timestamp)}`;\n    }\n\n    get name() {\n        return this._name;\n    }\n\n    get extension() {\n        return 'jpeg';\n    }\n\n    get available() {\n        return false;\n    }\n\n    base64(): Promise<string> {\n        throw new Error('Not supported');\n    }\n\n    dataUrl(): Promise<string> {\n        throw new Error('Not supported');\n    }\n\n    blob(): Promise<Blob> {\n        throw new Error('Not supported');\n    }\n}\n\ninterface ImageData {\n    name: string;\n    extension: string;\n    base64: () => Promise<string>;\n    dataUrl: () => Promise<string>;\n    blob: () => Promise<Blob>;\n    available: boolean;\n}\n\nexport default class Image {\n    private readonly data: ImageData;\n\n    constructor(data: ImageData) {\n        this.data = data;\n    }\n\n    static fromBase64(subtitleFileName: string, timestamp: number, base64: string, extension: string) {\n        const imageName =\n            subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')) +\n            '_' +\n            Math.floor(timestamp) +\n            '.' +\n            extension;\n        return new Image(new Base64ImageData(imageName, base64, extension));\n    }\n\n    static fromFile(file: File, timestamp: number, maxWidth: number, maxHeight: number) {\n        return new Image(new FileImageData(file, timestamp, maxWidth, maxHeight));\n    }\n\n    static fromMissingFile(fileName: string, timestamp: number) {\n        return new Image(new MissingFileImageData(fileName, timestamp));\n    }\n\n    get name() {\n        return this.data.name;\n    }\n\n    get extension() {\n        return this.data.extension;\n    }\n\n    get available() {\n        return this.data.available;\n    }\n\n    async base64() {\n        return await this.data.base64();\n    }\n\n    async dataUrl() {\n        return await this.data.dataUrl();\n    }\n\n    async blob() {\n        return await this.data.blob();\n    }\n\n    async pngBlob() {\n        return new Promise<Blob>(async (resolve, reject) => {\n            try {\n                createImageBitmap(await this.blob()).then((bitMap) => {\n                    const canvas = document.createElement('canvas');\n                    canvas.width = bitMap.width;\n                    canvas.height = bitMap.height;\n                    canvas.getContext('2d')!.drawImage(bitMap, 0, 0);\n                    canvas.toBlob((blob) => {\n                        if (blob) {\n                            resolve(blob);\n                        } else {\n                            reject('Failed to convert to PNG');\n                        }\n                    }, 'image/png');\n                });\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    async download() {\n        const blob = await this.data.blob();\n        download(blob, this.data.name);\n    }\n}\n","export interface Fetcher {\n    fetch: (url: string, body: any) => Promise<any>;\n}\n\nexport class HttpFetcher implements Fetcher {\n    async fetch(url: string, body: any) {\n        const response = await fetch(url, {\n            method: 'POST',\n            body: JSON.stringify(body),\n        });\n        return await response.json();\n    }\n}\n","import AudioClip from './audio-clip';\nimport Image from './image';\nimport { HttpFetcher, Fetcher } from './fetcher';\nimport { AnkiSettings } from './settings';\nimport sanitize from 'sanitize-filename';\nimport { AudioModel, ImageModel, SubtitleModel } from './model';\nimport { extractText } from './util';\n\nconst ankiQuerySpecialCharacters = ['\"', '*', '_', '\\\\', ':'];\n\nexport type AnkiExportMode = 'gui' | 'updateLast' | 'default';\n\nexport async function updateLastCard(\n    ankiSettings: AnkiSettings,\n    subtitle: SubtitleModel,\n    surroundingSubtitles: SubtitleModel[],\n    audioModel: AudioModel | undefined,\n    imageModel: ImageModel | undefined,\n    sourceString: string,\n    url: string | undefined\n) {\n    const anki = new Anki(ankiSettings);\n    let audioClip =\n        audioModel === undefined\n            ? undefined\n            : AudioClip.fromBase64(\n                  sourceString,\n                  subtitle.start,\n                  subtitle.end,\n                  audioModel.playbackRate ?? 1,\n                  audioModel.base64,\n                  audioModel.extension\n              );\n\n    return await anki.export(\n        extractText(subtitle, surroundingSubtitles),\n        undefined,\n        audioClip,\n        imageModel === undefined\n            ? undefined\n            : Image.fromBase64(sourceString, subtitle.start, imageModel.base64, imageModel.extension),\n        undefined,\n        sourceString,\n        url,\n        {},\n        ankiSettings.tags,\n        'updateLast'\n    );\n}\n\nexport class Anki {\n    private readonly settingsProvider: AnkiSettings;\n    private readonly fetcher: Fetcher;\n\n    constructor(settingsProvider: AnkiSettings, fetcher = new HttpFetcher()) {\n        this.settingsProvider = settingsProvider;\n        this.fetcher = fetcher;\n    }\n\n    async deckNames(ankiConnectUrl?: string) {\n        const response = await this._executeAction('deckNames', null, ankiConnectUrl);\n        return response.result;\n    }\n\n    async modelNames(ankiConnectUrl?: string) {\n        const response = await this._executeAction('modelNames', null, ankiConnectUrl);\n        return response.result;\n    }\n\n    async modelFieldNames(modelName: string, ankiConnectUrl?: string) {\n        const response = await this._executeAction('modelFieldNames', { modelName: modelName }, ankiConnectUrl);\n        return response.result;\n    }\n\n    async findNotesWithWord(word: string, ankiConnectUrl?: string) {\n        const response = await this._executeAction(\n            'findNotes',\n            { query: this.settingsProvider.wordField + ':' + this._escapeQuery(word) },\n            ankiConnectUrl\n        );\n        return response.result;\n    }\n\n    async findNotesWithWordGui(word: string, ankiConnectUrl?: string) {\n        const response = await this._executeAction(\n            'guiBrowse',\n            { query: this.settingsProvider.wordField + ':' + this._escapeQuery(word) },\n            ankiConnectUrl\n        );\n        return response.result;\n    }\n\n    private _escapeQuery(query: string) {\n        let escaped = '';\n\n        for (let i = 0; i < query.length; ++i) {\n            const char = query[i];\n            if (ankiQuerySpecialCharacters.includes(char)) {\n                escaped += `\\\\${char}`;\n            } else {\n                escaped += char;\n            }\n        }\n\n        return `\"${escaped}\"`;\n    }\n\n    async requestPermission(ankiConnectUrl?: string) {\n        const response = await this._executeAction('requestPermission', null, ankiConnectUrl);\n        return response.result;\n    }\n\n    async export(\n        text: string | undefined,\n        definition: string | undefined,\n        audioClip: AudioClip | undefined,\n        image: Image | undefined,\n        word: string | undefined,\n        source: string | undefined,\n        url: string | undefined,\n        customFieldValues: { [key: string]: string },\n        tags: string[],\n        mode: AnkiExportMode,\n        ankiConnectUrl?: string\n    ) {\n        const fields = {};\n\n        this._appendField(fields, this.settingsProvider.sentenceField, text, true);\n        this._appendField(fields, this.settingsProvider.definitionField, definition, true);\n        this._appendField(fields, this.settingsProvider.wordField, word, false);\n        this._appendField(fields, this.settingsProvider.sourceField, source, false);\n        this._appendField(fields, this.settingsProvider.urlField, url, false);\n\n        if (customFieldValues) {\n            for (const customFieldName of Object.keys(customFieldValues)) {\n                this._appendField(\n                    fields,\n                    this.settingsProvider.customAnkiFields[customFieldName],\n                    customFieldValues[customFieldName],\n                    true\n                );\n            }\n        }\n\n        const params: any = {\n            note: {\n                deckName: this.settingsProvider.deck,\n                modelName: this.settingsProvider.noteType,\n                tags: tags,\n                options: {\n                    allowDuplicate: false,\n                    duplicateScope: 'deck',\n                    duplicateScopeOptions: {\n                        deckName: this.settingsProvider.deck,\n                        checkChildren: false,\n                    },\n                },\n            },\n        };\n\n        const gui = mode === 'gui';\n        const updateLast = mode === 'updateLast';\n\n        if (this.settingsProvider.audioField && audioClip) {\n            const sanitizedName = this._sanitizeFileName(audioClip.name);\n\n            if (gui || updateLast) {\n                const fileName = (await this._storeMediaFile(sanitizedName, await audioClip.base64(), ankiConnectUrl))\n                    .result;\n                this._appendField(fields, this.settingsProvider.audioField, `[sound:${fileName}]`, false);\n            } else {\n                params.note['audio'] = {\n                    filename: sanitizedName,\n                    data: await audioClip.base64(),\n                    fields: [this.settingsProvider.audioField],\n                };\n            }\n        }\n\n        if (this.settingsProvider.imageField && image) {\n            const sanitizedName = this._sanitizeFileName(image.name);\n\n            if (gui || updateLast) {\n                const fileName = (await this._storeMediaFile(sanitizedName, await image.base64(), ankiConnectUrl))\n                    .result;\n                this._appendField(\n                    fields,\n                    this.settingsProvider.imageField,\n                    `<div><img src=\"${fileName}\"></div>`,\n                    false\n                );\n            } else {\n                params.note['picture'] = {\n                    filename: sanitizedName,\n                    data: await image.base64(),\n                    fields: [this.settingsProvider.imageField],\n                };\n            }\n        }\n\n        params.note['fields'] = fields;\n\n        switch (mode) {\n            case 'gui':\n                return (await this._executeAction('guiAddCards', params, ankiConnectUrl)).result;\n            case 'updateLast':\n                const recentNotes = (\n                    await this._executeAction('findNotes', { query: 'added:1' }, ankiConnectUrl)\n                ).result.sort();\n\n                if (recentNotes.length === 0) {\n                    throw new Error('Could not find note to update');\n                }\n\n                const lastNoteId = recentNotes[recentNotes.length - 1];\n                params.note['id'] = lastNoteId;\n                const infoResponse = await this._executeAction('notesInfo', { notes: [lastNoteId] });\n\n                if (infoResponse.result.length > 0 && infoResponse.result[0].noteId === lastNoteId) {\n                    const info = infoResponse.result[0];\n\n                    if (\n                        this.settingsProvider.sentenceField &&\n                        info.fields &&\n                        typeof info.fields[this.settingsProvider.sentenceField]?.value === 'string' &&\n                        typeof params.note.fields[this.settingsProvider.sentenceField] === 'string'\n                    ) {\n                        params.note.fields[this.settingsProvider.sentenceField] = this._inheritHtmlMarkup(\n                            params.note.fields[this.settingsProvider.sentenceField],\n                            info.fields[this.settingsProvider.sentenceField].value\n                        );\n                    }\n\n                    await this._executeAction('updateNoteFields', params, ankiConnectUrl);\n\n                    if (!this.settingsProvider.wordField || !info.fields) {\n                        return info.noteId;\n                    }\n\n                    const wordField = info.fields[this.settingsProvider.wordField];\n\n                    if (!wordField || !wordField.value) {\n                        return info.noteId;\n                    }\n\n                    return wordField.value;\n                }\n\n                throw new Error('Could not update last card because the card info could not be fetched');\n            case 'default':\n                return (await this._executeAction('addNote', params, ankiConnectUrl)).result;\n            default:\n                throw new Error('Unknown export mode: ' + mode);\n        }\n    }\n\n    private _appendField(fields: any, fieldName: string | undefined, value: string | undefined, multiline: boolean) {\n        if (!fieldName || !value) {\n            return;\n        }\n\n        let newValue = multiline ? value.split('\\n').join('<br>') : value;\n        const existingValue = fields[fieldName];\n\n        if (existingValue) {\n            newValue = existingValue + '<br>' + newValue;\n        }\n\n        fields[fieldName] = newValue;\n    }\n\n    private _sanitizeFileName(name: string) {\n        return sanitize(name, { replacement: '_' });\n    }\n\n    private _inheritHtmlMarkup(original: string, markedUp: string) {\n        const htmlTagRegex = RegExp('<[^>]*>(.*?)</[^>]*>', 'ig');\n        const markedUpWithoutBreaklines = markedUp.replace('<br>', '');\n        let inherited = original;\n\n        while (true) {\n            const match = htmlTagRegex.exec(markedUpWithoutBreaklines);\n\n            if (match === null || match.length < 2) {\n                break;\n            }\n\n            inherited = inherited.replace(match[1], match[0]);\n        }\n\n        return inherited;\n    }\n\n    private async _storeMediaFile(name: string, base64: string, ankiConnectUrl?: string) {\n        return this._executeAction('storeMediaFile', { filename: name, data: base64 }, ankiConnectUrl);\n    }\n\n    private async _executeAction(action: string, params: any, ankiConnectUrl?: string) {\n        const body: any = {\n            action: action,\n            version: 6,\n        };\n\n        if (params) {\n            body['params'] = params;\n        }\n\n        const json = await this.fetcher.fetch(ankiConnectUrl || this.settingsProvider.ankiConnectUrl, body);\n\n        if (json.error) {\n            throw new Error(json.error);\n        }\n\n        return json;\n    }\n}\n","import { AnkiSettings } from './settings';\n\nexport interface RectModel {\n    readonly left: number;\n    readonly top: number;\n    readonly width: number;\n    readonly height: number;\n}\n\nexport interface DimensionsModel {\n    readonly width: number;\n    readonly height: number;\n}\n\nexport interface SubtitleTextImage {\n    readonly dataUrl: string;\n    readonly screen: DimensionsModel;\n    readonly image: DimensionsModel;\n}\n\nexport interface SubtitleModel {\n    readonly text: string;\n    readonly textImage?: SubtitleTextImage;\n    readonly start: number;\n    readonly end: number;\n    readonly originalStart: number;\n    readonly originalEnd: number;\n    readonly track: number;\n}\n\nexport interface CopiedSubtitleModel extends SubtitleModel {\n    surroundingSubtitles: SubtitleModel[];\n    timestamp: number;\n    id: string;\n    name: string;\n    subtitleFile?: File;\n    audioFile?: File;\n    videoFile?: File;\n    audioTrack?: number;\n    audio?: AudioModel;\n    image?: ImageModel;\n}\n\nexport interface ImageModel {\n    readonly base64: string;\n    readonly extension: 'jpeg';\n}\n\nexport interface AudioModel {\n    readonly base64: string;\n    readonly extension: 'webm' | 'mp3';\n    readonly paddingStart: number;\n    readonly paddingEnd: number;\n    readonly start?: number;\n    readonly end?: number;\n    readonly playbackRate?: number;\n}\n\nexport interface AnkiDialogSliderContext {\n    subtitleStart: number;\n    subtitleEnd: number;\n    subtitles: SubtitleModel[];\n}\n\nexport interface AnkiUiState {\n    readonly type: 'initial' | 'resume';\n    readonly open: boolean;\n    readonly settingsProvider: AnkiSettings;\n    readonly subtitle: SubtitleModel;\n    readonly url: string;\n    readonly source: string;\n    readonly image?: ImageModel;\n    readonly audio?: AudioModel;\n    readonly themeType: string;\n    readonly dialogRequestedTimestamp: number;\n}\n\nexport interface AnkiUiInitialState extends AnkiUiState {\n    readonly type: 'initial';\n    readonly surroundingSubtitles: SubtitleModel[];\n}\n\nexport interface AnkiUiResumeState extends AnkiUiState {\n    readonly type: 'resume';\n\n    readonly text: string;\n    readonly initialTimestampInterval: number[];\n    readonly timestampInterval: number[];\n    readonly timestampBoundaryInterval?: number[];\n    readonly sliderContext: AnkiDialogSliderContext;\n    readonly definition: string;\n    readonly word: string;\n    readonly customFieldValues: { [key: string]: string };\n    readonly lastAppliedTimestampIntervalToText: number[];\n    readonly lastAppliedTimestampIntervalToAudio?: number[];\n}\n\nexport interface AnkiUiSavedState {\n    subtitle: SubtitleModel;\n    text: string;\n    sliderContext: AnkiDialogSliderContext;\n    definition: string;\n    image?: ImageModel;\n    audio?: AudioModel;\n    word: string;\n    source: string;\n    url: string;\n    customFieldValues: { [key: string]: string };\n    timestampInterval: number[];\n    initialTimestampInterval: number[];\n    timestampBoundaryInterval?: number[];\n    lastAppliedTimestampIntervalToText: number[];\n    lastAppliedTimestampIntervalToAudio?: number[];\n    dialogRequestedTimestamp: number;\n}\n\nexport interface VideoDataSubtitleTrack {\n    label: string;\n    language: string;\n    url: string;\n    m3U8BaseUrl?: string;\n    extension: string;\n}\n\nexport interface ConfirmedVideoDataSubtitleTrack {\n    name: string;\n    language: string;\n    subtitleUrl: string;\n    m3U8BaseUrl?: string;\n    extension: string;\n}\n\nexport interface VideoData {\n    basename: string;\n    error?: string;\n    subtitles?: VideoDataSubtitleTrack[];\n}\n\nexport interface VideoDataUiState {\n    open?: boolean;\n    isLoading?: boolean;\n    suggestedName?: string;\n    subtitles?: VideoDataSubtitleTrack[];\n    error?: string;\n    themeType?: string;\n    selectedSubtitle?: string;\n    showSubSelect?: boolean;\n    openedFromMiningCommand?: boolean;\n}\n\nexport interface VideoTabModel {\n    id: number; // Actually the tab ID\n    title?: string;\n    src: string; // Video src\n}\n\nexport interface Rgb {\n    r: number;\n    g: number;\n    b: number;\n}\n\nexport interface AudioTrackModel {\n    id: string;\n    label: string;\n    language: string;\n}\n\nexport enum PostMineAction {\n    none = 0,\n    showAnkiDialog = 1,\n    updateLastCard = 2,\n}\n\nexport enum AutoPausePreference {\n    atStart = 1,\n    atEnd = 2,\n}\n\nexport enum PlayMode {\n    normal = 1,\n    condensed = 2,\n    autoPause = 3,\n}\n","import IntervalTree, { Interval, NumericTuple } from '@flatten-js/interval-tree';\nimport { SubtitleModel } from './model';\n\nexport interface SubtitleSlice<T> {\n    showing: T[];\n    lastShown?: T[];\n    nextToShow?: T[];\n    startedShowing?: T;\n    willStopShowing?: T;\n}\n\nexport interface SubtitleCollectionOptions {\n    returnLastShown?: boolean;\n    returnNextToShow?: boolean;\n    showingCheckRadiusMs?: number;\n}\n\nexport class SubtitleCollection<T extends SubtitleModel> {\n    static emptySubtitleCollection = new SubtitleCollection([]);\n\n    // Tree for subtitles\n    private readonly tree: IntervalTree<T>;\n    // Tree for gaps between subtitles. The gaps are populated with the last subtitle before the gap.\n    private readonly gapsTree?: IntervalTree<T>;\n    private readonly options: SubtitleCollectionOptions;\n\n    constructor(subtitles: T[], options: SubtitleCollectionOptions = {}) {\n        this.tree = new IntervalTree<T>();\n        this.options = options;\n\n        if (options.returnLastShown || options.returnNextToShow) {\n            let last: T | undefined;\n            this.gapsTree = new IntervalTree<T>();\n\n            if (subtitles.length > 0 && subtitles[0].start > 0) {\n                this.gapsTree.insert([0, subtitles[0].start - 1], subtitles[0]);\n            }\n\n            for (const s of subtitles) {\n                this.tree.insert([s.start, s.end], s);\n\n                if (last !== undefined && last.end < s.start) {\n                    this.gapsTree.insert([last.end + 1, s.start - 1], last);\n                }\n\n                last = s;\n            }\n        } else {\n            for (const s of subtitles) {\n                this.tree.insert([s.start, s.end], s);\n            }\n        }\n    }\n\n    static empty<S extends SubtitleModel>() {\n        return SubtitleCollection.emptySubtitleCollection as SubtitleCollection<S>;\n    }\n\n    subtitlesAt(timestamp: number): SubtitleSlice<T> {\n        const interval: NumericTuple = [timestamp, timestamp];\n        const showing = this.tree.search(interval) as T[];\n        let lastShown: T[] | undefined;\n        let nextToShow: T[] | undefined;\n        let startedShowing: T | undefined;\n        let willStopShowing: T | undefined;\n\n        if (showing.length === 0) {\n            if (this.gapsTree !== undefined) {\n                // One of returnLastShown or returnNextToShow is true due to constructor\n                const gapIntervals: Interval[] = [];\n                lastShown = this.gapsTree.search(interval, (s, i) => {\n                    gapIntervals.push(i);\n                    return s;\n                }) as T[];\n\n                if (lastShown.length > 0 && this.options.returnNextToShow) {\n                    const nextStart = gapIntervals[0].high + 1;\n                    nextToShow = this.tree.search([nextStart, nextStart]) as T[];\n                }\n            }\n        } else if (this.options.showingCheckRadiusMs !== undefined) {\n            for (const s of showing) {\n                if (willStopShowing === undefined && s.end < timestamp + this.options.showingCheckRadiusMs) {\n                    willStopShowing = s;\n                }\n\n                if (startedShowing === undefined && timestamp - this.options.showingCheckRadiusMs < s.start) {\n                    startedShowing = s;\n                }\n\n                if (startedShowing !== undefined && willStopShowing !== undefined) {\n                    break;\n                }\n            }\n        }\n\n        return { showing, lastShown, nextToShow, startedShowing, willStopShowing };\n    }\n}\n","import { SubtitleModel } from './model';\n\nexport default class AutoPauseContext {\n    private lastStartedShowing?: SubtitleModel;\n    private lastWillStopShowing?: SubtitleModel;\n\n    onStartedShowing?: () => void;\n    onWillStopShowing?: () => void;\n    onNextToShow?: (subtitle: SubtitleModel) => void;\n\n    willStopShowing(subtitle: SubtitleModel) {\n        if (subtitle.end === this.lastWillStopShowing?.end) {\n            return;\n        }\n\n        this.onWillStopShowing?.();\n        this.lastWillStopShowing = subtitle;\n    }\n\n    startedShowing(subtitle: SubtitleModel) {\n        if (subtitle.start === this.lastStartedShowing?.start) {\n            return;\n        }\n\n        this.onStartedShowing?.();\n        this.lastStartedShowing = subtitle;\n    }\n\n    clear() {\n        this.lastStartedShowing = undefined;\n        this.lastWillStopShowing = undefined;\n    }\n}\n","import { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport MuiAlert, { Color } from '@material-ui/lab/Alert';\nimport Grow from '@material-ui/core/Grow';\n\nconst useAlertStyles = makeStyles({\n    root: {\n        display: 'flex',\n        justifyContent: 'center',\n        position: 'fixed',\n        top: 80,\n        width: '100%',\n        pointerEvents: 'none',\n        zIndex: 2000,\n    },\n});\n\ninterface Props {\n    open: boolean;\n    autoHideDuration: number;\n    onClose: () => void;\n    severity: Color | undefined;\n    children: React.ReactNode\n}\n\nexport default function Alert(props: Props) {\n    const classes = useAlertStyles();\n\n    useEffect(() => {\n        if (props.open) {\n            const timeout = setTimeout(props.onClose, props.autoHideDuration);\n            return () => clearTimeout(timeout);\n        }\n    }, [props.open, props.autoHideDuration, props.onClose]);\n\n    return (\n        <div className={classes.root}>\n            <Grow in={props.open}>\n                <MuiAlert severity={props.severity}>{props.children}</MuiAlert>\n            </Grow>\n        </div>\n    );\n}\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport { TextFieldProps } from \"@material-ui/core\";\nimport TextField from \"@material-ui/core/TextField\";\n\nfunction extractTagsFromString(value: string) {\n    const splitTags = value.split(' ').join('').split(',');\n    const tags = [];\n\n    for (const tag of splitTags) {\n        tags.push(tag.trim());\n    }\n\n    return tags;\n}\n\nexport interface Props {\n    tags: string[];\n    onTagsChange: (tags: string[]) => void;\n}\n\nexport default function TagsTextField({tags, onTagsChange, ...props}: Props & TextFieldProps) {\n    const [value, setValue] = useState('');\n\n    useEffect(() => {\n        const tagsString = tags.join(', ');\n\n        if (tagsString !== value) {\n            setValue(tags.join(', '));\n        }\n    }, [value, tags]);\n\n    const handleChange = useCallback((e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        let currentValue = e.target.value;\n\n        if (\n            value.length > currentValue.length &&\n            value.includes(currentValue) &&\n            currentValue.endsWith(',')\n        ) {\n            // Detected a backspace at the last comma, move cursor back enough to remove the comma\n            currentValue = currentValue.substring(0, currentValue.length - 1);\n        }\n\n        // Decompose string into individual tags by removing all spaces and splitting on \",\"\n        const newTags = extractTagsFromString(currentValue);\n        setValue(newTags.join(', '));\n        onTagsChange(newTags);\n    }, [value, onTagsChange]);\n\n    return (\n        <TextField\n            {...props}\n            value={value}\n            onChange={handleChange}\n        />\n    );\n}\n","import React, { useEffect, useState, useLayoutEffect } from 'react';\nimport makeStyles from '@material-ui/styles/makeStyles';\nimport Card from '@material-ui/core/Card';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Dialog from '@material-ui/core/Dialog';\nimport { Image as CommonImage } from '@project/common';\n\ninterface ImageDimensions {\n    width: number;\n    height: number;\n}\n\nconst useStyles = makeStyles((theme) => ({\n    image: ({ width, height }: ImageDimensions) => ({\n        width: width,\n        height: height,\n        backgroundSize: 'contain',\n    }),\n}));\n\n// https://stackoverflow.com/questions/19014250/rerender-view-on-browser-resize-with-react\nfunction useWindowSize() {\n    const [size, setSize] = useState([0, 0]);\n\n    useLayoutEffect(() => {\n        function updateSize() {\n            setSize([window.innerWidth, window.innerHeight]);\n        }\n\n        window.addEventListener('resize', updateSize);\n        updateSize();\n\n        return () => window.removeEventListener('resize', updateSize);\n    }, []);\n\n    return size;\n}\n\ninterface Props {\n    open: boolean;\n    image?: CommonImage;\n    onClose: () => void;\n}\n\nexport default function ImageDialog({ open, image, onClose }: Props) {\n    const [dataUrl, setDataUrl] = useState<string>();\n    const [width, setWidth] = useState<number>(0);\n    const [height, setHeight] = useState<number>(0);\n    const [windowWidth, windowHeight] = useWindowSize();\n\n    let resizeRatio;\n\n    if (width > 0 && height > 0) {\n        resizeRatio = Math.min(1, Math.min(windowWidth / (2 * width), windowHeight / (2 * height)));\n    } else {\n        resizeRatio = 1;\n    }\n\n    const classes = useStyles({ width: width * resizeRatio, height: height * resizeRatio });\n\n    useEffect(() => {\n        setDataUrl(undefined);\n        async function fetchImage() {\n            if (!image) {\n                return;\n            }\n\n            const dataUrl = await image.dataUrl();\n            const img = new Image();\n            img.onload = () => {\n                setWidth(img.width);\n                setHeight(img.height);\n                setDataUrl(dataUrl);\n            };\n            img.src = dataUrl;\n        }\n\n        fetchImage();\n    }, [image]);\n\n    if (!image || !dataUrl) {\n        return null;\n    }\n\n    return (\n        <Dialog open={open} onClose={onClose} maxWidth=\"lg\">\n            <Card>\n                <CardMedia\n                    className={classes.image}\n                    image={dataUrl}\n                    title={image.name}\n                    style={{ width: width * resizeRatio, height: height * resizeRatio }}\n                />\n            </Card>\n        </Dialog>\n    );\n}\n","import React from 'react';\nimport { SubtitleModel } from '../..';\n\ninterface Props {\n    subtitle: SubtitleModel;\n    availableWidth: number;\n    scale: number;\n}\n\nexport default function SubtitleTextImage({ subtitle, availableWidth, scale }: Props) {\n    if (subtitle.textImage === undefined) {\n        return null;\n    }\n\n    const imageScale = (scale * availableWidth) / subtitle.textImage.screen.width;\n    const width = imageScale * subtitle.textImage.image.width;\n\n    return (\n        <div style={{ maxWidth: width }}>\n            <img style={{ width: '100%' }} alt=\"subtitle\" src={subtitle.textImage.dataUrl} />\n        </div>\n    );\n}\n","import React, { MutableRefObject, useCallback, useState, useEffect } from 'react';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport {\n    Anki,\n    AnkiDialogSliderContext,\n    AudioClip,\n    Image,\n    humanReadableTime,\n    AnkiSettings,\n    SubtitleModel,\n    surroundingSubtitles,\n    subtitleIntersectsTimeInterval,\n    joinSubtitles,\n} from '@project/common';\nimport Button from '@material-ui/core/Button';\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DoneIcon from '@material-ui/icons/Done';\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Paper from '@material-ui/core/Paper';\nimport RestoreIcon from '@material-ui/icons/Restore';\nimport SearchIcon from '@material-ui/icons/Search';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport Slider, { Mark } from '@material-ui/core/Slider';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport ZoomInIcon from '@material-ui/icons/ZoomIn';\nimport ZoomOutIcon from '@material-ui/icons/ZoomOut';\nimport SubtitleTextImage from './SubtitleTextImage';\nimport TagsTextField from './TagsTextField';\nimport { AnkiExportMode } from '@project/common';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& .MuiTextField-root': {\n            marginBottom: theme.spacing(1),\n        },\n    },\n    title: {\n        flexGrow: 1,\n    },\n    mediaField: {\n        cursor: 'pointer',\n        '& input': {\n            cursor: 'pointer',\n        },\n    },\n    rangeSelectSlider: {\n        '& .MuiSlider-markLabel': {\n            transform: 'translateX(-3%)',\n        },\n    },\n}));\n\nconst boundaryIntervalSubtitleCountRadius = 1;\nconst boundaryIntervalSubtitleTimeRadius = 5000;\n\nfunction boundaryIntervalFromSliderContext(sliderContext: AnkiDialogSliderContext) {\n    let index = sliderContext.subtitles.findIndex((s) => s.start === sliderContext.subtitleStart);\n    index = index === -1 ? sliderContext.subtitles.length / 2 : index;\n\n    const subtitlesToDisplay = surroundingSubtitles(\n        sliderContext.subtitles,\n        index,\n        boundaryIntervalSubtitleCountRadius,\n        boundaryIntervalSubtitleTimeRadius\n    );\n\n    let min = null;\n    let max = null;\n\n    for (const s of subtitlesToDisplay) {\n        if (min === null || s.start < min) {\n            min = s.start;\n        }\n\n        if (max === null || s.end > max) {\n            max = s.end;\n        }\n    }\n\n    return min !== null && max !== null && [min, max];\n}\n\nfunction sliderMarksFromSliderContext(sliderContext: AnkiDialogSliderContext, boundary: number[]): Mark[] {\n    const seenTimestamps: any = {};\n\n    return sliderContext.subtitles\n        .filter((s) => s.text.trim() !== '' || s.textImage !== undefined)\n        .map((s) => {\n            if (s.start in seenTimestamps) {\n                return null;\n            }\n\n            seenTimestamps[s.start] = true;\n\n            return {\n                value: s.start,\n                label: `${s.text.trim().substring(0, Math.min(s.text.length, 3))}...`,\n            };\n        })\n        .filter((mark: Mark | null) => mark !== null)\n        .filter((mark: Mark | null) => mark!.value >= boundary[0] && mark!.value <= boundary[1]) as Mark[];\n}\n\nfunction sliderValueLabelFormat(ms: number) {\n    return humanReadableTime(ms, true);\n}\n\ninterface ValueLabelComponentProps {\n    children: React.ReactElement;\n    open: boolean;\n    value: number;\n}\n\nfunction ValueLabelComponent({ children, open, value }: ValueLabelComponentProps) {\n    return (\n        <Tooltip open={open} enterTouchDelay={0} placement=\"top\" title={value}>\n            {children}\n        </Tooltip>\n    );\n}\n\ninterface TextImageSetProps {\n    selectedSubtitles: SubtitleModel[];\n    width: number;\n}\n\nconst useTextImageSetStyles = makeStyles((theme) => ({\n    root: {\n        marginBottom: theme.spacing(1),\n        padding: theme.spacing(1),\n        backgroundColor: theme.palette.action.disabledBackground,\n    },\n}));\n\nfunction TextImageSet({ selectedSubtitles, width }: TextImageSetProps) {\n    const classes = useTextImageSetStyles();\n\n    if (selectedSubtitles.length === 0 || width <= 0) {\n        return null;\n    }\n\n    return (\n        <Paper elevation={0} className={classes.root}>\n            {selectedSubtitles.map((s, index) => {\n                return <SubtitleTextImage key={index} availableWidth={width} subtitle={s} scale={1} />;\n            })}\n        </Paper>\n    );\n}\n\nconst TextFieldEndAdornment = withStyles({\n    // Hack to recenter TextField end adornment\n    root: {\n        transform: 'translateY(-8px)',\n    },\n})(InputAdornment);\n\nexport interface AnkiDialogState {\n    text: string;\n    sliderContext?: AnkiDialogSliderContext;\n    definition: string;\n    word: string;\n    source: string;\n    url: string;\n    customFieldValues: { [key: string]: string };\n    lastAppliedTimestampIntervalToText?: number[];\n    lastAppliedTimestampIntervalToAudio?: number[];\n    initialTimestampInterval?: number[];\n    timestampBoundaryInterval?: number[];\n    timestampInterval?: number[];\n}\n\ninterface AnkiDialogProps {\n    open: boolean;\n    disabled: boolean;\n    text?: string;\n    onProceed: (\n        text: string,\n        definition: string,\n        audioClip: AudioClip | undefined,\n        image: Image | undefined,\n        word: string,\n        source: string,\n        url: string,\n        customFieldValues: { [key: string]: string },\n        tags: string[],\n        mode: AnkiExportMode\n    ) => void;\n    onRerecord?: () => void;\n    onRewind: () => void;\n    onCancel: () => void;\n    onViewImage: (image: Image) => void;\n    onOpenSettings?: () => void;\n    audioClip?: AudioClip;\n    image?: Image;\n    source?: string;\n    url?: string;\n    sliderContext?: AnkiDialogSliderContext;\n    settingsProvider: AnkiSettings;\n    anki: Anki;\n    definition?: string;\n    word?: string;\n    customFields: { [key: string]: string };\n    customFieldValues?: { [key: string]: string };\n    initialTimestampInterval?: number[];\n    timestampBoundaryInterval?: number[];\n    timestampInterval?: number[];\n    lastAppliedTimestampIntervalToText?: number[];\n    lastAppliedTimestampIntervalToAudio?: number[];\n    stateRef?: MutableRefObject<AnkiDialogState | undefined>;\n}\n\nexport function AnkiDialog({\n    open,\n    disabled,\n    text: initialText,\n    onProceed,\n    onRewind,\n    onCancel,\n    onViewImage,\n    onOpenSettings,\n    onRerecord,\n    audioClip: initialAudioClip,\n    image,\n    source: initialSource,\n    url: initialUrl,\n    sliderContext,\n    customFields,\n    settingsProvider,\n    anki,\n    definition: initialDefinition,\n    word: initialWord,\n    customFieldValues: initialCustomFieldValues,\n    timestampInterval: initialSelectedTimestampInterval,\n    timestampBoundaryInterval: forceTimestampBoundaryInterval,\n    initialTimestampInterval: forceInitialTimestampInterval,\n    lastAppliedTimestampIntervalToText: initialLastAppliedTimestampIntervalToText,\n    lastAppliedTimestampIntervalToAudio: initialLastAppliedTimestampIntervalToAudio,\n    stateRef,\n}: AnkiDialogProps) {\n    const classes = useStyles();\n    const [definition, setDefinition] = useState<string>('');\n    const [text, setText] = useState<string>('');\n    const [word, setWord] = useState<string>('');\n    const [lastSearchedWord, setLastSearchedWord] = useState<string>();\n    const [source, setSource] = useState<string>(initialSource ?? '');\n    const [tags, setTags] = useState<string[]>(settingsProvider.tags);\n    const [url, setUrl] = useState<string>(initialUrl ?? '');\n    const [duplicateNotes, setDuplicateNotes] = useState<any[]>([]);\n    const [wordTimestamp, setWordTimestamp] = useState<number>(0);\n    const [customFieldValues, setCustomFieldValues] = useState<{ [key: string]: string }>({});\n    const [timestampInterval, setTimestampInterval] = useState<number[]>();\n    const [selectedSubtitles, setSelectedSubtitles] = useState<SubtitleModel[]>([]);\n    const [initialTimestampInterval, setInitialTimestampInterval] = useState<number[]>();\n    const [initialTimestampBoundaryInterval, setInitialTimestampBoundaryInterval] = useState<number[]>();\n    const [timestampBoundaryInterval, setTimestampBoundaryInterval] = useState<number[]>();\n    const [timestampMarks, setTimestampMarks] = useState<Mark[]>();\n    const [lastAppliedTimestampIntervalToText, setLastAppliedTimestampIntervalToText] = useState<number[]>();\n    const [lastAppliedTimestampIntervalToAudio, setLastAppliedTimestampIntervalToAudio] = useState<number[]>();\n    const [width, setWidth] = useState<number>(0);\n    const [audioClip, setAudioClip] = useState<AudioClip>();\n    const dialogRefCallback = useCallback((element: HTMLElement) => {\n        setWidth(element?.getBoundingClientRect().width ?? 0);\n    }, []);\n\n    if (stateRef) {\n        stateRef.current = {\n            text,\n            sliderContext,\n            definition,\n            word,\n            source,\n            url,\n            customFieldValues,\n            initialTimestampInterval,\n            timestampBoundaryInterval,\n            lastAppliedTimestampIntervalToText,\n            lastAppliedTimestampIntervalToAudio,\n            timestampInterval,\n        };\n    }\n\n    const textForTimestampInterval = useCallback(\n        (timestampInterval: number[]) => {\n            return joinSubtitles(\n                sliderContext!.subtitles.filter((s) => subtitleIntersectsTimeInterval(s, timestampInterval))\n            );\n        },\n        [sliderContext]\n    );\n\n    useEffect(() => {\n        setText(initialText ?? '');\n        setDefinition(initialDefinition ?? '');\n        setWord(initialWord ?? '');\n        setSource(initialSource ?? '');\n        setUrl(initialUrl ?? '');\n        setDuplicateNotes([]);\n        setCustomFieldValues(initialCustomFieldValues ?? {});\n    }, [initialText, initialSource, initialDefinition, initialWord, initialCustomFieldValues, initialUrl]);\n\n    useEffect(() => {\n        setTags(settingsProvider.tags);\n    }, [settingsProvider.tags]);\n\n    useEffect(() => {\n        const timestampInterval =\n            initialSelectedTimestampInterval ||\n            (sliderContext && [sliderContext.subtitleStart, sliderContext.subtitleEnd]) ||\n            undefined;\n        const timestampBoundaryInterval =\n            (sliderContext && boundaryIntervalFromSliderContext(sliderContext)) || undefined;\n        const timestampMarks =\n            (sliderContext && sliderMarksFromSliderContext(sliderContext, timestampBoundaryInterval!)) || undefined;\n        const selectedSubtitles =\n            sliderContext === undefined || timestampInterval === undefined\n                ? []\n                : sliderContext.subtitles.filter((s) => subtitleIntersectsTimeInterval(s, timestampInterval));\n        setText(initialText ?? joinSubtitles(selectedSubtitles));\n        setTimestampInterval(timestampInterval);\n        setSelectedSubtitles(selectedSubtitles);\n        setInitialTimestampInterval(forceInitialTimestampInterval || timestampInterval);\n        setLastAppliedTimestampIntervalToText(initialLastAppliedTimestampIntervalToText || timestampInterval);\n        setLastAppliedTimestampIntervalToAudio(initialLastAppliedTimestampIntervalToAudio || timestampInterval);\n        setTimestampBoundaryInterval(forceTimestampBoundaryInterval ?? timestampBoundaryInterval);\n        setInitialTimestampBoundaryInterval(timestampBoundaryInterval);\n        setTimestampMarks(timestampMarks);\n    }, [\n        sliderContext,\n        forceInitialTimestampInterval,\n        initialSelectedTimestampInterval,\n        forceTimestampBoundaryInterval,\n        initialLastAppliedTimestampIntervalToText,\n        initialLastAppliedTimestampIntervalToAudio,\n    ]);\n\n    useEffect(() => {\n        if (!initialAudioClip) {\n            setAudioClip(undefined);\n            return;\n        }\n\n        let newAudioClip = initialAudioClip;\n\n        if (settingsProvider.preferMp3) {\n            newAudioClip = newAudioClip.toMp3();\n        }\n\n        if (lastAppliedTimestampIntervalToAudio) {\n            newAudioClip = newAudioClip.slice(\n                Math.max(0, Math.round(lastAppliedTimestampIntervalToAudio[0]) - settingsProvider.audioPaddingStart),\n                Math.round(lastAppliedTimestampIntervalToAudio[1]) + settingsProvider.audioPaddingEnd\n            );\n        }\n\n        setAudioClip(newAudioClip);\n    }, [\n        initialAudioClip,\n        settingsProvider.preferMp3,\n        lastAppliedTimestampIntervalToAudio,\n        settingsProvider.audioPaddingStart,\n        settingsProvider.audioPaddingEnd,\n    ]);\n\n    useEffect(() => {\n        setWordTimestamp(Date.now());\n    }, [word]);\n\n    useEffect(() => {\n        if (!word || !settingsProvider.wordField) {\n            return;\n        }\n\n        const trimmedWord = word.trim();\n\n        if (trimmedWord === '' || trimmedWord === lastSearchedWord) {\n            return;\n        }\n\n        const timeout = setTimeout(async () => {\n            try {\n                setDuplicateNotes(await anki.findNotesWithWord(trimmedWord));\n                setLastSearchedWord(trimmedWord);\n            } catch (e) {\n                console.error(e);\n            }\n        }, 500);\n\n        return () => clearTimeout(timeout);\n    }, [word, wordTimestamp, lastSearchedWord, anki, settingsProvider.wordField]);\n\n    const handlePlayAudio = useCallback(\n        (e: React.MouseEvent<HTMLDivElement>) => {\n            if (!audioClip?.isPlayable()) {\n                return;\n            }\n\n            e.preventDefault();\n            e.stopPropagation();\n            audioClip!.play();\n        },\n        [audioClip]\n    );\n\n    const handleCustomFieldChange = useCallback(\n        (customFieldName: string, value: string) => {\n            const newCustomFieldValues: { [fieldName: string]: string } = {};\n            Object.assign(newCustomFieldValues, customFieldValues);\n            newCustomFieldValues[customFieldName] = value;\n            setCustomFieldValues(newCustomFieldValues);\n        },\n        [customFieldValues]\n    );\n\n    let wordHelperText;\n\n    if (word && word.trim() === lastSearchedWord && settingsProvider.wordField) {\n        wordHelperText =\n            duplicateNotes.length > 0\n                ? `Found ${duplicateNotes.length} notes with word \"${word}\" in field \"${settingsProvider.wordField}\"`\n                : `No notes found with word \"${word.trim()}\" in field \"${settingsProvider.wordField}\"`;\n    } else {\n        wordHelperText = '';\n    }\n\n    const handleViewImage = useCallback(\n        (e: React.MouseEvent<HTMLDivElement>) => {\n            if (!image?.available) {\n                return;\n            }\n\n            e.preventDefault();\n            e.stopPropagation();\n            onViewImage(image!);\n        },\n        [image, onViewImage]\n    );\n\n    const handleApplyTimestampIntervalToText = useCallback(() => {\n        if (timestampInterval === undefined) {\n            return;\n        }\n\n        const newText = textForTimestampInterval(timestampInterval);\n        setText(newText);\n        setLastAppliedTimestampIntervalToText(timestampInterval);\n    }, [textForTimestampInterval, timestampInterval]);\n\n    const handleTimestampIntervalChange = useCallback(\n        (e: React.ChangeEvent<{}>, newValue: number | number[]) => {\n            const newTimestampInterval = newValue as number[];\n            setTimestampInterval(newTimestampInterval);\n            const selectedSubtitles = sliderContext!.subtitles.filter((s) =>\n                subtitleIntersectsTimeInterval(s, newTimestampInterval)\n            );\n            setSelectedSubtitles(selectedSubtitles);\n\n            if (lastAppliedTimestampIntervalToText !== undefined) {\n                const expectedUnchangedText = textForTimestampInterval(lastAppliedTimestampIntervalToText);\n\n                if (text.trim() === expectedUnchangedText.trim()) {\n                    const newText = textForTimestampInterval(newTimestampInterval);\n                    setText(newText);\n                    setLastAppliedTimestampIntervalToText(newTimestampInterval);\n                }\n            }\n\n            if (onRerecord === undefined && audioClip?.isSliceable() === true) {\n                setLastAppliedTimestampIntervalToAudio(newTimestampInterval);\n            }\n        },\n        [sliderContext, text, lastAppliedTimestampIntervalToText, textForTimestampInterval]\n    );\n\n    const handleApplyTimestampIntervalToAudio = useCallback(\n        (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n            if (onRerecord) {\n                e.stopPropagation();\n                onRerecord();\n            } else {\n                setLastAppliedTimestampIntervalToAudio(timestampInterval);\n            }\n        },\n        [onRerecord, timestampInterval]\n    );\n\n    const handleResetTimestampInterval = useCallback(() => {\n        if (!initialTimestampBoundaryInterval) {\n            return;\n        }\n\n        const selectedSubtitles =\n            sliderContext === undefined || initialTimestampInterval === undefined\n                ? []\n                : sliderContext.subtitles.filter((s) => subtitleIntersectsTimeInterval(s, initialTimestampInterval));\n        setSelectedSubtitles(selectedSubtitles);\n        setTimestampInterval(initialTimestampInterval);\n        setTimestampBoundaryInterval(initialTimestampBoundaryInterval);\n        setTimestampMarks(\n            sliderContext && sliderMarksFromSliderContext(sliderContext, initialTimestampBoundaryInterval)\n        );\n    }, [initialTimestampInterval, initialTimestampBoundaryInterval, sliderContext]);\n\n    const handleZoomInTimestampInterval = useCallback(() => {\n        if (!timestampBoundaryInterval || !timestampInterval) {\n            return;\n        }\n\n        const newMin = (timestampBoundaryInterval[0] + timestampInterval[0]) / 2;\n        const newMax = (timestampBoundaryInterval[1] + timestampInterval[1]) / 2;\n        const newTimestampBoundaryInterval = [newMin, newMax];\n        setTimestampBoundaryInterval(newTimestampBoundaryInterval);\n        setTimestampMarks(sliderContext && sliderMarksFromSliderContext(sliderContext, newTimestampBoundaryInterval));\n    }, [timestampBoundaryInterval, timestampInterval, sliderContext]);\n\n    const handleZoomOutTimestampInterval = useCallback(() => {\n        if (!timestampBoundaryInterval || !timestampInterval) {\n            return;\n        }\n\n        const currentLength = timestampBoundaryInterval[1] - timestampBoundaryInterval[0];\n        const minimumChange = currentLength / 4;\n        const newMin = Math.max(\n            0,\n            Math.min(\n                timestampBoundaryInterval[0] - minimumChange,\n                2 * timestampBoundaryInterval[0] - timestampInterval[0]\n            )\n        );\n        const newMax = Math.max(\n            timestampBoundaryInterval[1] + minimumChange,\n            2 * timestampBoundaryInterval[1] - timestampInterval[1]\n        );\n        const newTimestampBoundaryInterval = [newMin, newMax];\n        setTimestampBoundaryInterval(newTimestampBoundaryInterval);\n        setTimestampMarks(sliderContext && sliderMarksFromSliderContext(sliderContext, newTimestampBoundaryInterval));\n    }, [timestampBoundaryInterval, timestampInterval, sliderContext]);\n\n    const handleCopyImageToClipboard = useCallback(\n        async (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n            e.stopPropagation();\n\n            if (!image) {\n                return;\n            }\n\n            navigator.clipboard.write([new ClipboardItem({ 'image/png': await image.pngBlob() })]);\n        },\n        [image]\n    );\n\n    const disableApplyTextSelection =\n        !sliderContext || sliderContext.subtitles.filter((s) => s.text.trim() !== '').length === 0;\n\n    let audioActionElement: JSX.Element | undefined = undefined;\n\n    if (onRerecord !== undefined) {\n        audioActionElement = (\n            <Tooltip title=\"Apply Selection (rerecord)\">\n                <span>\n                    <IconButton\n                        disabled={\n                            !timestampInterval ||\n                            !lastAppliedTimestampIntervalToAudio ||\n                            (timestampInterval[0] === lastAppliedTimestampIntervalToAudio[0] &&\n                                timestampInterval[1] === lastAppliedTimestampIntervalToAudio[1])\n                        }\n                        onClick={handleApplyTimestampIntervalToAudio}\n                        edge=\"end\"\n                    >\n                        <FiberManualRecordIcon />\n                    </IconButton>\n                </span>\n            </Tooltip>\n        );\n    }\n\n    let audioHelperText: string | undefined;\n\n    if (audioClip) {\n        if (!audioClip.isPlayable()) {\n            audioHelperText = 'Audio file link lost because of page reload';\n        } else if (onRerecord === undefined && !audioClip.isSliceable()) {\n            audioHelperText = 'Audio clip cannot be updated because it is pre-recorded';\n        }\n    }\n\n    let imageHelperText: string | undefined;\n\n    if (image) {\n        if (!image.available) {\n            imageHelperText = 'Image file link lost because of page reload';\n        }\n    }\n\n    return (\n        <Dialog open={open} disableEnforceFocus fullWidth maxWidth=\"sm\" onClose={onCancel}>\n            <Toolbar>\n                <Typography variant=\"h6\" className={classes.title}>\n                    Anki Export\n                </Typography>\n                {onOpenSettings && (\n                    <IconButton edge=\"end\" onClick={() => onOpenSettings()}>\n                        <SettingsIcon />\n                    </IconButton>\n                )}\n            </Toolbar>\n            <DialogContent ref={dialogRefCallback}>\n                <form className={classes.root}>\n                    {sliderContext && timestampInterval && (\n                        <TextImageSet\n                            selectedSubtitles={selectedSubtitles.filter((s) => s.textImage !== undefined)}\n                            width={width}\n                        />\n                    )}\n                    <TextField\n                        variant=\"filled\"\n                        color=\"secondary\"\n                        multiline\n                        fullWidth\n                        maxRows={8}\n                        label=\"Sentence\"\n                        value={text}\n                        onChange={(e) => setText(e.target.value)}\n                        InputProps={{\n                            endAdornment: timestampInterval && (\n                                <TextFieldEndAdornment position=\"end\">\n                                    <Tooltip title=\"Apply Selection\">\n                                        <span>\n                                            <IconButton\n                                                disabled={\n                                                    !timestampInterval ||\n                                                    !lastAppliedTimestampIntervalToText ||\n                                                    (timestampInterval[0] === lastAppliedTimestampIntervalToText[0] &&\n                                                        timestampInterval[1] ===\n                                                            lastAppliedTimestampIntervalToText[1]) ||\n                                                    disableApplyTextSelection\n                                                }\n                                                onClick={handleApplyTimestampIntervalToText}\n                                                edge=\"end\"\n                                            >\n                                                <DoneIcon />\n                                            </IconButton>\n                                        </span>\n                                    </Tooltip>\n                                </TextFieldEndAdornment>\n                            ),\n                        }}\n                    />\n                    <TextField\n                        variant=\"filled\"\n                        color=\"secondary\"\n                        multiline\n                        fullWidth\n                        rows={8}\n                        label=\"Definition\"\n                        value={definition}\n                        onChange={(e) => setDefinition(e.target.value)}\n                    />\n                    <TextField\n                        variant=\"filled\"\n                        color=\"secondary\"\n                        fullWidth\n                        label=\"Word\"\n                        value={word}\n                        onChange={(e) => setWord(e.target.value)}\n                        helperText={wordHelperText}\n                        InputProps={{\n                            endAdornment: (\n                                <InputAdornment position=\"end\">\n                                    <Tooltip title=\"Search in Anki\">\n                                        <span>\n                                            <IconButton\n                                                disabled={\n                                                    disabled ||\n                                                    !settingsProvider.wordField ||\n                                                    !word ||\n                                                    word.trim() === ''\n                                                }\n                                                onClick={() => anki.findNotesWithWordGui(word.trim())}\n                                                edge=\"end\"\n                                            >\n                                                <SearchIcon />\n                                            </IconButton>\n                                        </span>\n                                    </Tooltip>\n                                </InputAdornment>\n                            ),\n                        }}\n                    />\n                    {Object.keys(customFields).map((customFieldName) => (\n                        <TextField\n                            key={customFieldName}\n                            variant=\"filled\"\n                            color=\"secondary\"\n                            fullWidth\n                            multiline\n                            maxRows={8}\n                            label={customFieldName}\n                            value={customFieldValues[customFieldName] || ''}\n                            onChange={(e) => handleCustomFieldChange(customFieldName, e.target.value)}\n                        />\n                    ))}\n                    {audioClip && (\n                        <div className={classes.mediaField} onClick={handlePlayAudio}>\n                            <TextField\n                                variant=\"filled\"\n                                color=\"secondary\"\n                                fullWidth\n                                value={audioClip.name}\n                                label=\"Audio\"\n                                helperText={audioHelperText}\n                                disabled={!audioClip.isPlayable()}\n                                InputProps={{\n                                    endAdornment: audioActionElement && timestampInterval && (\n                                        <InputAdornment position=\"end\">{audioActionElement}</InputAdornment>\n                                    ),\n                                }}\n                            />\n                        </div>\n                    )}\n                    {image && (\n                        <div className={classes.mediaField} onClick={handleViewImage}>\n                            <TextField\n                                variant=\"filled\"\n                                color=\"secondary\"\n                                fullWidth\n                                value={image.name}\n                                label=\"Image\"\n                                helperText={imageHelperText}\n                                disabled={!image.available}\n                                InputProps={{\n                                    endAdornment: (\n                                        <InputAdornment position=\"end\">\n                                            <Tooltip title=\"Copy to Clipboard\">\n                                                <span>\n                                                    <IconButton\n                                                        disabled={!image.available}\n                                                        onClick={handleCopyImageToClipboard}\n                                                        edge=\"end\"\n                                                    >\n                                                        <FileCopyIcon />\n                                                    </IconButton>\n                                                </span>\n                                            </Tooltip>\n                                        </InputAdornment>\n                                    ),\n                                }}\n                            />\n                        </div>\n                    )}\n                    <TextField\n                        variant=\"filled\"\n                        color=\"secondary\"\n                        fullWidth\n                        label=\"Source\"\n                        value={source}\n                        onChange={(e) => setSource(e.target.value)}\n                    />\n                    {initialUrl && (\n                        <TextField\n                            variant=\"filled\"\n                            color=\"secondary\"\n                            fullWidth\n                            label=\"URL\"\n                            value={url}\n                            onChange={(e) => setUrl(e.target.value)}\n                        />\n                    )}\n                    {settingsProvider.tags.length > 0 && (\n                        <TagsTextField\n                            variant=\"filled\"\n                            label=\"Tags\"\n                            helperText=\"Comma-separated list of strings\"\n                            fullWidth\n                            color=\"secondary\"\n                            tags={tags}\n                            onTagsChange={(newTags) => setTags(newTags)}\n                        />\n                    )}\n                    {timestampInterval && timestampBoundaryInterval && timestampMarks && (\n                        <Grid container direction=\"row\">\n                            <Grid item style={{ flexGrow: 1 }}>\n                                <Slider\n                                    ValueLabelComponent={ValueLabelComponent}\n                                    value={timestampInterval}\n                                    valueLabelFormat={sliderValueLabelFormat}\n                                    onChange={handleTimestampIntervalChange}\n                                    min={timestampBoundaryInterval[0]}\n                                    max={timestampBoundaryInterval[1]}\n                                    marks={timestampMarks}\n                                    step={1}\n                                    valueLabelDisplay=\"auto\"\n                                    className={classes.rangeSelectSlider}\n                                    color=\"secondary\"\n                                />\n                            </Grid>\n                            <Grid item>\n                                <Tooltip title=\"Reset\">\n                                    <span>\n                                        <IconButton\n                                            edge=\"end\"\n                                            style={{ marginTop: -8 }}\n                                            onClick={handleResetTimestampInterval}\n                                        >\n                                            <RestoreIcon />\n                                        </IconButton>\n                                    </span>\n                                </Tooltip>\n                            </Grid>\n                            <Grid item>\n                                <Tooltip title=\"Zoom In\">\n                                    <span>\n                                        <IconButton\n                                            edge=\"end\"\n                                            style={{ marginTop: -8 }}\n                                            onClick={handleZoomInTimestampInterval}\n                                        >\n                                            <ZoomInIcon />\n                                        </IconButton>\n                                    </span>\n                                </Tooltip>\n                            </Grid>\n                            <Grid item>\n                                <Tooltip title=\"Zoom Out\">\n                                    <span>\n                                        <IconButton\n                                            edge=\"end\"\n                                            style={{ marginTop: -8 }}\n                                            onClick={handleZoomOutTimestampInterval}\n                                        >\n                                            <ZoomOutIcon />\n                                        </IconButton>\n                                    </span>\n                                </Tooltip>\n                            </Grid>\n                        </Grid>\n                    )}\n                </form>\n            </DialogContent>\n            <DialogActions>\n                <Button disabled={disabled} onClick={() => onCancel()}>\n                    Cancel\n                </Button>\n                {sliderContext && (\n                    <Button disabled={disabled} onClick={() => onRewind()}>\n                        Rewind\n                    </Button>\n                )}\n                <Button\n                    disabled={disabled}\n                    onClick={() =>\n                        onProceed(\n                            text,\n                            definition,\n                            audioClip,\n                            image,\n                            word,\n                            source ?? '',\n                            url ?? '',\n                            customFieldValues,\n                            tags,\n                            'gui'\n                        )\n                    }\n                >\n                    Open in Anki\n                </Button>\n                <Button\n                    disabled={disabled}\n                    onClick={() =>\n                        onProceed(\n                            text,\n                            definition,\n                            audioClip,\n                            image,\n                            word,\n                            source ?? '',\n                            url ?? '',\n                            customFieldValues,\n                            tags,\n                            'updateLast'\n                        )\n                    }\n                >\n                    Update Last Card\n                </Button>\n                <Button\n                    disabled={disabled}\n                    onClick={() =>\n                        onProceed(\n                            text,\n                            definition,\n                            audioClip,\n                            image,\n                            word,\n                            source ?? '',\n                            url ?? '',\n                            customFieldValues,\n                            tags,\n                            'default'\n                        )\n                    }\n                >\n                    Export\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n","export default __webpack_public_path__ + \"static/media/background-colored.cbc50e45.png\";","import { makeStyles } from '@material-ui/styles';\nimport Fade from '@material-ui/core/Fade';\nimport coloredBackground from './background-colored.png';\nimport { Theme } from '@material-ui/core';\n\ninterface StylesProps {\n    dragging: boolean;\n    appBarHidden: boolean;\n}\n\ninterface Props {\n    dragging: boolean;\n    appBarHidden: boolean;\n    loading: boolean;\n}\n\nconst useStyles = makeStyles<Theme, StylesProps>((theme) => ({\n    root: ({ dragging, appBarHidden }) => ({\n        position: 'absolute',\n        height: appBarHidden ? '100%' : 'calc(100% - 64px)',\n        width: '100%',\n        zIndex: 101,\n        pointerEvents: dragging ? 'auto' : 'none',\n    }),\n    transparentBackground: ({ appBarHidden }) => ({\n        '&::before': {\n            content: \"' '\",\n            position: 'absolute',\n            height: appBarHidden ? '100vh' : 'calc(100vh - 64px)',\n            width: '100%',\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            alignItems: 'center',\n            textAlign: 'center',\n            backgroundSize: '300px 300px',\n            backgroundRepeat: 'no-repeat',\n            backgroundPosition: 'center',\n            backgroundImage: `url(${coloredBackground})`,\n            backgroundBlendMode: 'overlay',\n            background: 'rgba(0, 0, 0, .3)',\n            filter: 'drop-shadow(10px 10px 10px rgb(0, 0, 0, .4))',\n        },\n        width: '100%',\n        height: '100%',\n    }),\n}));\n\nexport default function DragOverlay({ dragging, appBarHidden, loading }: Props) {\n    const classes = useStyles({ dragging, appBarHidden });\n\n    return (\n        <div className={classes.root}>\n            <Fade in={dragging || loading}>\n                <div className={classes.transparentBackground} />\n            </Fade>\n        </div>\n    );\n}\n","import { compile as parseAss } from 'ass-compiler';\nimport { Cue, parseSync as parseSrt, Node as SrtNode, stringifySync as writeSrt } from 'subtitle';\nimport { WebVTT } from 'vtt.js';\nimport { XMLParser } from 'fast-xml-parser';\nimport { DisplaySet, parseDisplaySets } from 'pgs-parser';\nimport { SubtitleTextImage } from '@project/common';\n\nconst tagRegex = RegExp('</?([^>]*)>', 'ig');\nconst assNewLineRegex = RegExp(/\\\\[nN]/, 'ig');\nconst helperElement = document.createElement('div');\nconst helperCanvas = document.createElement('canvas');\n\ninterface SubtitleNode {\n    start: number;\n    end: number;\n    text: string;\n    textImage?: SubtitleTextImage;\n    track: number;\n}\n\nexport interface TextFilter {\n    regex: RegExp;\n    replacement: string;\n}\n\nexport default class SubtitleReader {\n    private readonly _textFilter?: TextFilter;\n    private xmlParser?: XMLParser;\n\n    constructor(textFilter?: TextFilter) {\n        this._textFilter = textFilter;\n    }\n\n    async subtitles(files: File[], flatten?: boolean) {\n        return (await Promise.all(files.map((f, i) => this._subtitles(f, flatten === true ? 0 : i))))\n            .flatMap((nodes) => nodes)\n            .filter((node) => node.textImage !== undefined || node.text !== '')\n            .sort((n1, n2) => n1.start - n2.start);\n    }\n\n    async _subtitles(file: File, track: number): Promise<SubtitleNode[]> {\n        if (file.name.endsWith('.srt')) {\n            const nodes = parseSrt(await file.text());\n            return nodes\n                .filter((node) => node.type === 'cue')\n                .map((node) => {\n                    const cue = node.data as Cue;\n                    return {\n                        start: cue.start,\n                        end: cue.end,\n                        text: this._filterText(cue.text).replace(tagRegex, ''),\n                        track: track,\n                    };\n                });\n        }\n\n        if (file.name.endsWith('.vtt') || file.name.endsWith('.nfvtt')) {\n            return new Promise(async (resolve, reject) => {\n                const isFromNetflix = file.name.endsWith('.nfvtt');\n                const parser = new WebVTT.Parser(window, WebVTT.StringDecoder());\n                const cues: any[] = [];\n                parser.oncue = (c: any) => {\n                    c.text = this._filterText(c.text).replace(tagRegex, '');\n\n                    if (isFromNetflix) {\n                        const lines = c.text.split('\\n');\n                        const newLines = [];\n\n                        for (const line of lines) {\n                            newLines.push(this._fixRTL(line));\n                        }\n\n                        c.text = newLines.join('\\n');\n                    }\n                    cues.push(c);\n                };\n                parser.onflush = () =>\n                    resolve(\n                        cues.map((c) => ({\n                            start: Math.floor(c.startTime * 1000),\n                            end: Math.floor(c.endTime * 1000),\n                            text: c.text as string,\n                            track: track,\n                        }))\n                    );\n                parser.parse(await file.text());\n                parser.flush();\n            });\n        }\n\n        if (file.name.endsWith('.ass')) {\n            const nodes = parseAss(await file.text(), {});\n            return nodes.dialogues.map((dialogue) => {\n                return {\n                    start: Math.round(dialogue.start * 1000),\n                    end: Math.round(dialogue.end * 1000),\n                    text: this._filterText(\n                        dialogue.slices.flatMap((slice) => slice.fragments.map((fragment) => fragment.text)).join('')\n                    ).replace(assNewLineRegex, '\\n'),\n                    track: track,\n                };\n            });\n        }\n\n        if (file.name.endsWith('.ytxml')) {\n            const text = await file.text();\n            const xml = this._xmlParser().parse(text);\n\n            if (Object.keys(xml).length === 0) {\n                return [];\n            }\n\n            const textNodes = xml['transcript']['text'];\n            const subtitles = [];\n\n            for (let index = 0, length = textNodes.length; index < length; index++) {\n                const elm = textNodes[index];\n\n                if (!('#text' in elm) || !('@_dur' in elm) || !('@_start' in elm)) {\n                    continue;\n                }\n\n                const start = parseFloat(elm['@_start']);\n\n                subtitles.push({\n                    start: Math.floor(start * 1000),\n                    end: Math.floor((start + parseFloat(elm['@_dur'])) * 1000),\n                    text: this._filterText(this._decodeHTML(String(elm['#text'])).replace(tagRegex, '')),\n                    track,\n                });\n            }\n\n            return subtitles;\n        }\n\n        if (file.name.endsWith('.sup')) {\n            const subtitles: SubtitleNode[] = [];\n            await file\n                .stream()\n                // FIXME: Figure out how to remove conflicts with @types/node ReadableStream\n                // @ts-ignore\n                .pipeThrough(parseDisplaySets())\n                .pipeTo(this._displaySetsToSubtitles(subtitles, track));\n\n            return subtitles;\n        }\n\n        if (file.name.endsWith('.dfxp') || file.name.endsWith('ttml2')) {\n            const text = await file.text();\n            const parser = new DOMParser();\n            const doc = parser.parseFromString(text, 'application/xml');\n            const nodes = this._xmlNodePath(doc.documentElement, ['body', 'div']);\n            const subtitles: SubtitleNode[] = [];\n\n            for (let index = 0, length = nodes.length; index < length; index++) {\n                const elm = nodes[index];\n                const beginAttribute = elm.getAttribute('begin');\n                const endAttribute = elm.getAttribute('end');\n\n                if (beginAttribute === null || endAttribute === null) {\n                    continue;\n                }\n\n                subtitles.push({\n                    text: this._filterText(elm.textContent ?? ''),\n                    start: this._parseTtmlTimestamp(beginAttribute),\n                    end: this._parseTtmlTimestamp(endAttribute),\n                    track,\n                });\n            }\n\n            return subtitles;\n        }\n\n        throw new Error('Unsupported subtitle file format');\n    }\n\n    private _parseTtmlTimestamp(timestamp: string) {\n        const parts = timestamp.split(':');\n        const milliseconds = Math.floor(parseFloat(parts[parts.length - 1]) * 1000);\n        const minutes = parts.length < 2 ? 0 : Number(parts[parts.length - 2]);\n        const hours = parts.length < 3 ? 0 : Number(parts[parts.length - 3]);\n\n        return milliseconds + minutes * 60000 + hours * 3600000;\n    }\n\n    private _xmlNodePath(parent: Element, path: string[]): Element[] {\n        if (path.length === 0) {\n            const children: Element[] = [];\n\n            for (let i = 0; i < parent.children.length; ++i) {\n                const node = parent.children[i];\n                children.push(node);\n            }\n\n            return children;\n        }\n\n        for (let i = 0; i < parent.children.length; ++i) {\n            const node = parent.children[i];\n            const tag = this._dropTagNamespace(node.tagName);\n\n            if (tag === path[0]) {\n                return this._xmlNodePath(node, path.slice(1));\n            }\n        }\n\n        throw new Error('Failied to parse XML path');\n    }\n\n    private _dropTagNamespace(tag: string) {\n        const colonIndex = tag.lastIndexOf(':');\n\n        if (colonIndex !== -1) {\n            return tag.substring(colonIndex + 1);\n        }\n\n        return tag;\n    }\n\n    private _displaySetsToSubtitles(subtitles: SubtitleNode[], track: number) {\n        let imageDataArray: Uint8ClampedArray | undefined;\n        let currentImageDisplaySet: DisplaySet | undefined;\n\n        return new WritableStream<DisplaySet>({\n            write(displaySet, controller) {\n                if (displaySet.objectDefinitionSegments.length > 0) {\n                    if (currentImageDisplaySet === undefined) {\n                        currentImageDisplaySet = displaySet;\n                    }\n                } else if (currentImageDisplaySet !== undefined) {\n                    const screenWidth = currentImageDisplaySet.presentationCompositionSegment.width;\n                    const screenHeight = currentImageDisplaySet.presentationCompositionSegment.height;\n                    imageDataArray =\n                        imageDataArray === undefined || imageDataArray.length < screenHeight * screenWidth * 4\n                            ? new Uint8ClampedArray(screenWidth * screenHeight * 4)\n                            : imageDataArray;\n                    const imageData = currentImageDisplaySet.imageData(imageDataArray);\n                    helperCanvas.width = imageData.width;\n                    helperCanvas.height = imageData.height;\n                    const context = helperCanvas.getContext('2d')!;\n                    context.putImageData(imageData, 0, 0);\n                    subtitles.push({\n                        start:\n                            currentImageDisplaySet.objectDefinitionSegments[0].header.presentationTimestamp / 90 ?? 0,\n                        end: displaySet.endDefinitionSegment.header.presentationTimestamp / 90,\n                        text: '',\n                        textImage: {\n                            dataUrl: helperCanvas.toDataURL('image/png'),\n                            image: {\n                                width: imageData.width,\n                                height: imageData.height,\n                            },\n                            screen: {\n                                width: currentImageDisplaySet.presentationCompositionSegment.width,\n                                height: currentImageDisplaySet.presentationCompositionSegment.height,\n                            },\n                        },\n                        track,\n                    });\n\n                    currentImageDisplaySet = undefined;\n                }\n            },\n        });\n    }\n\n    private _fixRTL(line: string): string {\n        const index1 = line.indexOf('&lrm;');\n        const index2 = line.indexOf('&rlm;');\n        let newLine = '';\n\n        if (index1 > -1) {\n            newLine = line.substring(0, index1) + '\\u202a' + line.substring(index1 + 5) + '\\u202c';\n            return this._fixRTL(newLine);\n        } else if (index2 > -1) {\n            newLine = line.substring(0, index2) + '\\u202b' + line.substring(index2 + 5) + '\\u202c';\n            return this._fixRTL(newLine);\n        }\n\n        return line;\n    }\n\n    private _decodeHTML(text: string): string {\n        helperElement.innerHTML = text;\n        return helperElement.textContent ?? helperElement.innerText;\n    }\n\n    private _xmlParser() {\n        if (this.xmlParser === undefined) {\n            this.xmlParser = new XMLParser({\n                ignoreAttributes: false,\n            });\n        }\n\n        return this.xmlParser;\n    }\n\n    private _filterText(text: string): string {\n        if (this._textFilter === undefined) {\n            return text;\n        }\n\n        return text.replace(this._textFilter.regex, this._textFilter.replacement).trim();\n    }\n\n    subtitlesToSrt(subtitles: SubtitleNode[]) {\n        const nodes: SrtNode[] = subtitles.map((subtitleNode) => {\n            return {\n                type: 'cue',\n                data: {\n                    start: subtitleNode.start,\n                    end: subtitleNode.end,\n                    text: subtitleNode.text,\n                },\n            };\n        });\n        return writeSrt(nodes, { format: 'SRT' });\n    }\n\n    async filesToSrt(files: File[]) {\n        return this.subtitlesToSrt(await this.subtitles(files));\n    }\n}\n","import { makeStyles, Theme } from '@material-ui/core/styles';\nimport clsx from 'clsx';\nimport AppBar from '@material-ui/core/AppBar';\nimport BugReportIcon from '@material-ui/icons/BugReport';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport HelpIcon from '@material-ui/icons/Help';\nimport FolderIcon from '@material-ui/icons/Folder';\nimport IconButton from '@material-ui/core/IconButton';\nimport ListIcon from '@material-ui/icons/List';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Tooltip, { TooltipProps } from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Popover from '@material-ui/core/Popover';\nimport { useCallback, useState } from 'react';\n\ninterface BarProps {\n    drawerWidth: number;\n    drawerOpen: boolean;\n    hidden: boolean;\n    title: string;\n    subtitleFiles?: File[];\n    onFileSelector: () => void;\n    onDownloadSubtitleFilesAsSrt: () => void;\n    onOpenSettings: () => void;\n    onOpenCopyHistory: () => void;\n}\n\ninterface StyleProps {\n    drawerWidth: number;\n}\n\nconst useStyles = makeStyles<Theme, StyleProps, string>((theme) => ({\n    title: {\n        flexGrow: 1,\n    },\n    leftButton: {\n        marginRight: theme.spacing(1),\n    },\n    appBar: {\n        transition: theme.transitions.create(['margin', 'width'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n    },\n    appBarShift: {\n        width: ({ drawerWidth }) => `calc(100% - ${drawerWidth}px)`,\n        transition: theme.transitions.create(['margin', 'width'], {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n        marginRight: ({ drawerWidth }) => drawerWidth,\n    },\n    copyHistoryButton: {\n        transform: 'scaleX(1)',\n        width: 48,\n        padding: 12,\n        transition: theme.transitions.create(['transform', 'padding', 'width'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n    },\n    copyHistoryButtonShift: {\n        transform: 'scaleX(0)',\n        width: 0,\n        padding: 5,\n        transition: theme.transitions.create(['transform', 'padding', 'width'], {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    hide: {\n        display: 'none',\n    },\n}));\n\ninterface CopyHistoryTooltipStylesProps {\n    show: boolean;\n}\n\ninterface CopyHistoryTooltipProps extends TooltipProps {\n    show: boolean;\n}\n\nconst useCopyHistoryTooltipStyles = makeStyles<Theme, CopyHistoryTooltipStylesProps, string>((theme) => ({\n    tooltip: ({ show }) => ({\n        display: show ? 'block' : 'none',\n    }),\n}));\n\nfunction CopyHistoryTooltip({ show, ...toolTipProps }: CopyHistoryTooltipProps) {\n    const classes = useCopyHistoryTooltipStyles({ show: show });\n    return <Tooltip classes={classes} {...toolTipProps} />;\n}\n\nexport default function Bar({\n    drawerWidth,\n    drawerOpen,\n    hidden,\n    title,\n    subtitleFiles,\n    onOpenSettings,\n    onOpenCopyHistory,\n    onFileSelector,\n    onDownloadSubtitleFilesAsSrt,\n}: BarProps) {\n    const classes = useStyles({ drawerWidth });\n    const [menuOpen, setMenuOpen] = useState<boolean>(false);\n    const [menuAnchorEl, setMenuAnchorEl] = useState<HTMLElement>();\n    const canSaveAsSrt =\n        subtitleFiles !== undefined && subtitleFiles.find((f) => !f.name.endsWith('.sup')) !== undefined;\n\n    const handleFileAction = useCallback(\n        (event: React.MouseEvent<HTMLButtonElement>) => {\n            if (canSaveAsSrt) {\n                setMenuAnchorEl(event.currentTarget);\n                setMenuOpen(true);\n            } else {\n                onFileSelector();\n            }\n        },\n        [onFileSelector, canSaveAsSrt]\n    );\n\n    const handleMenuClose = useCallback(() => {\n        setMenuOpen(false);\n    }, []);\n\n    const handleOpenFilesFromMenu = useCallback(() => {\n        setMenuOpen(false);\n        onFileSelector();\n    }, [onFileSelector]);\n\n    const handleDownloadSubtitleFilesAsSrt = useCallback(() => {\n        setMenuOpen(false);\n        onDownloadSubtitleFilesAsSrt();\n    }, [onDownloadSubtitleFilesAsSrt]);\n\n    return (\n        <>\n            {canSaveAsSrt && (\n                <Popover\n                    open={menuOpen}\n                    anchorEl={menuAnchorEl}\n                    onClose={handleMenuClose}\n                    anchorOrigin={{\n                        vertical: 'bottom',\n                        horizontal: 'center',\n                    }}\n                >\n                    <List>\n                        <ListItem button onClick={handleOpenFilesFromMenu}>\n                            Open Files\n                        </ListItem>\n                        <ListItem button onClick={handleDownloadSubtitleFilesAsSrt}>\n                            Download Subtitles as SRT\n                        </ListItem>\n                    </List>\n                </Popover>\n            )}\n            <AppBar\n                position=\"static\"\n                elevation={0}\n                className={clsx(classes.appBar, {\n                    [classes.appBarShift]: drawerOpen,\n                    [classes.hide]: hidden,\n                })}\n            >\n                <Toolbar>\n                    <Tooltip\n                        disableFocusListener={canSaveAsSrt}\n                        disableHoverListener={canSaveAsSrt}\n                        disableTouchListener={canSaveAsSrt}\n                        title=\"Open Files\"\n                    >\n                        <IconButton\n                            edge=\"start\"\n                            color=\"inherit\"\n                            className={classes.leftButton}\n                            onClick={handleFileAction}\n                        >\n                            <FolderIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        {title}\n                    </Typography>\n                    <Tooltip title=\"Donate\">\n                        <IconButton\n                            edge=\"end\"\n                            color=\"inherit\"\n                            component=\"a\"\n                            href=\"https://github.com/killergerbah/asbplayer#supporters\"\n                            target=\"_blank\"\n                            rel=\"noreferrer\"\n                        >\n                            <FavoriteIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title=\"Submit Issue\">\n                        <IconButton\n                            edge=\"end\"\n                            color=\"inherit\"\n                            component=\"a\"\n                            href=\"https://github.com/killergerbah/asbplayer/issues\"\n                            target=\"_blank\"\n                            rel=\"noreferrer\"\n                        >\n                            <BugReportIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title=\"Help\">\n                        <IconButton\n                            edge=\"end\"\n                            color=\"inherit\"\n                            component=\"a\"\n                            href=\"https://github.com/killergerbah/asbplayer#usage\"\n                            target=\"_blank\"\n                            rel=\"noreferrer\"\n                        >\n                            <HelpIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title=\"Settings\">\n                        <IconButton edge=\"end\" color=\"inherit\" onClick={onOpenSettings}>\n                            <SettingsIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <CopyHistoryTooltip title=\"Mining History\" show={!drawerOpen}>\n                        <IconButton\n                            edge=\"end\"\n                            color=\"inherit\"\n                            aria-label=\"menu\"\n                            className={clsx(classes.copyHistoryButton, {\n                                [classes.copyHistoryButtonShift]: drawerOpen,\n                            })}\n                            onClick={onOpenCopyHistory}\n                        >\n                            <ListIcon />\n                        </IconButton>\n                    </CopyHistoryTooltip>\n                </Toolbar>\n            </AppBar>\n        </>\n    );\n}\n","import { Rgb } from '@project/common';\n\nexport function arrayEquals(a: any[], b: any[], equals = (a: any, b: any) => a === b) {\n    if (a.length !== b.length) {\n        return false;\n    }\n\n    for (let i = 0; i < a.length; ++i) {\n        if (!equals(a[i], b[i])) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nexport function keysAreEqual(a: any, b: any) {\n    for (let key in a) {\n        if (!(key in b)) {\n            return false;\n        }\n    }\n\n    for (let key in b) {\n        if (!(key in a)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n// https://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb\nfunction hexToRgb(hex: string): Rgb {\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)!;\n    return {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16),\n    };\n}\n\ninterface SubtitleStyle {\n    subtitleColor: string;\n    subtitleSize: number;\n    subtitleOutlineThickness: number;\n    subtitleOutlineColor: string;\n    subtitleBackgroundOpacity: number;\n    subtitleBackgroundColor: string;\n    subtitleFontFamily: string;\n}\n\nexport function computeStyles({\n    subtitleColor,\n    subtitleSize,\n    subtitleOutlineThickness,\n    subtitleOutlineColor,\n    subtitleBackgroundOpacity,\n    subtitleBackgroundColor,\n    subtitleFontFamily,\n}: SubtitleStyle) {\n    const styles: any = {\n        color: subtitleColor,\n        fontSize: Number(subtitleSize),\n    };\n\n    if (subtitleOutlineThickness > 0) {\n        const thickness = subtitleOutlineThickness;\n        const color = subtitleOutlineColor;\n        styles[\n            'textShadow'\n        ] = `0 0 ${thickness}px ${color}, 0 0 ${thickness}px ${color}, 0 0 ${thickness}px ${color}, 0 0 ${thickness}px ${color}`;\n    }\n\n    if (subtitleBackgroundOpacity > 0) {\n        const opacity = subtitleBackgroundOpacity;\n        const color = subtitleBackgroundColor;\n        const { r, g, b } = hexToRgb(color);\n        styles['backgroundColor'] = `rgba(${r}, ${g}, ${b}, ${opacity})`;\n    }\n\n    if (subtitleFontFamily && subtitleFontFamily.length > 0) {\n        styles['fontFamily'] = subtitleFontFamily;\n    }\n\n    return styles;\n}\n\nexport function timeDurationDisplay(\n    milliseconds: number,\n    totalMilliseconds: number,\n    includeMilliseconds = true\n): string {\n    if (milliseconds < 0) {\n        return timeDurationDisplay(0, totalMilliseconds);\n    }\n\n    milliseconds = Math.round(milliseconds);\n    const ms = milliseconds % 1000;\n    milliseconds = (milliseconds - ms) / 1000;\n    const secs = milliseconds % 60;\n    milliseconds = (milliseconds - secs) / 60;\n    const mins = milliseconds % 60;\n\n    if (totalMilliseconds >= 3600000) {\n        const hrs = (milliseconds - mins) / 60;\n\n        if (includeMilliseconds) {\n            return pad(hrs) + ':' + pad(mins) + ':' + pad(secs) + '.' + pad(ms, 3);\n        }\n\n        return pad(hrs) + ':' + pad(mins) + ':' + pad(secs);\n    }\n\n    if (includeMilliseconds) {\n        return pad(mins) + ':' + pad(secs) + '.' + pad(ms, 3);\n    }\n\n    return pad(mins) + ':' + pad(secs);\n}\n\nfunction pad(n: number, zeros: number = 2) {\n    return String(n).padStart(zeros, '0');\n}\n","import React, { useCallback, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { timeDurationDisplay } from '../services/util';\nimport { ListItemSecondaryAction, Theme } from '@material-ui/core';\nimport Divider from '@material-ui/core/Divider';\nimport Drawer from '@material-ui/core/Drawer';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Popover from '@material-ui/core/Popover';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport NoteAddIcon from '@material-ui/icons/NoteAdd';\nimport SaveAltIcon from '@material-ui/icons/SaveAlt';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport { AudioModel, ImageModel, SubtitleModel } from '@project/common';\n\nexport interface CopyHistoryItem extends SubtitleModel {\n    name: string;\n    id: string;\n    timestamp: number;\n    surroundingSubtitles: SubtitleModel[];\n    audioFile?: File;\n    audioFileName?: string;\n    audioTrack?: string;\n    videoFile?: File;\n    videoFileName?: string;\n    filePlaybackRate?: number;\n    subtitleFileName?: string;\n    mediaTimestamp?: number;\n    audio?: AudioModel;\n    image?: ImageModel;\n    url?: string;\n}\n\ninterface CopyHistoryProps {\n    open: boolean;\n    drawerWidth: number;\n    items: CopyHistoryItem[];\n    onClose: () => void;\n    onDelete: (item: CopyHistoryItem) => void;\n    onAnki: (item: CopyHistoryItem) => void;\n    onSelect: (item: CopyHistoryItem) => void;\n    onClipAudio: (item: CopyHistoryItem) => void;\n    onDownloadImage: (item: CopyHistoryItem) => void;\n    onDownloadSectionAsSrt: (name: string, items: CopyHistoryItem[]) => void;\n}\n\nconst useStyles = makeStyles<Theme, CopyHistoryProps, string>((theme) => ({\n    drawer: {\n        width: ({ drawerWidth }) => drawerWidth,\n        flexShrink: 0,\n    },\n    drawerPaper: {\n        width: ({ drawerWidth }) => drawerWidth,\n    },\n    drawerHeader: {\n        display: 'flex',\n        alignItems: 'center',\n        position: 'static',\n        padding: theme.spacing(0, 1),\n        // necessary for content to be below app bar\n        ...theme.mixins.toolbar,\n        justifyContent: 'flex-start',\n    },\n    listContainer: {\n        position: 'relative',\n        height: '100%',\n        overflowY: 'auto',\n        overflowX: 'hidden',\n    },\n    listItem: {\n        '&:hover': {\n            backgroundColor: theme.palette.action.hover,\n        },\n    },\n    listItemGutters: {\n        paddingLeft: 5,\n        paddingRight: 5,\n    },\n    listItemIconRoot: {\n        minWidth: 20,\n    },\n    emptyState: {\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        textAlign: 'center',\n        height: '100%',\n        padding: 15,\n    },\n    text: {\n        flexGrow: 1,\n    },\n    emptyText: {\n        flexGrow: 1,\n        color: theme.palette.text.secondary,\n    },\n    timestamp: {\n        paddingRight: 15,\n        paddingLeft: 15,\n        color: theme.palette.text.secondary,\n    },\n}));\n\ninterface MenuProps {\n    open: boolean;\n    item?: CopyHistoryItem;\n    anchorEl?: Element;\n    onClose: () => void;\n    onSelect: (item: CopyHistoryItem) => void;\n    onClipAudio: (item: CopyHistoryItem) => void;\n    onDownloadImage: (item: CopyHistoryItem) => void;\n    onDelete: (item: CopyHistoryItem) => void;\n}\n\nfunction Menu({ open, anchorEl, onClose, onSelect, onClipAudio, onDownloadImage, onDelete, item }: MenuProps) {\n    const handleCopy = useCallback(() => {\n        navigator.clipboard.writeText(item!.text);\n        onClose();\n    }, [item, onClose]);\n\n    const handleJumpTo = useCallback(() => {\n        onSelect(item!);\n        onClose();\n    }, [item, onSelect, onClose]);\n\n    const handleClipAudio = useCallback(() => {\n        onClipAudio(item!);\n        onClose();\n    }, [item, onClipAudio, onClose]);\n\n    const handleDownloadImage = useCallback(() => {\n        onDownloadImage(item!);\n        onClose();\n    }, [item, onDownloadImage, onClose]);\n\n    const handleDelete = useCallback(() => {\n        onDelete(item!);\n        onClose();\n    }, [item, onDelete, onClose]);\n\n    if (!item) {\n        return null;\n    }\n\n    return (\n        <Popover\n            disableEnforceFocus={true}\n            open={open}\n            anchorEl={anchorEl}\n            onClose={onClose}\n            anchorOrigin={{\n                vertical: 'center',\n                horizontal: 'center',\n            }}\n            transformOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n            }}\n        >\n            <List>\n                <ListItem button onClick={handleCopy}>\n                    <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Copy\" />\n                </ListItem>\n                <ListItem button onClick={handleJumpTo}>\n                    <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Jump To\" />\n                </ListItem>\n                {(item.videoFile || item.audioFile || item.audio) && (\n                    <ListItem button onClick={handleClipAudio}>\n                        <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Download Audio\" />\n                    </ListItem>\n                )}\n                {(item.videoFile || item.image) && (\n                    <ListItem button onClick={handleDownloadImage}>\n                        <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Download Image\" />\n                    </ListItem>\n                )}\n                <ListItem button onClick={handleDelete}>\n                    <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Delete\" />\n                </ListItem>\n            </List>\n        </Popover>\n    );\n}\n\nexport default function CopyHistory(props: CopyHistoryProps) {\n    const onDelete = props.onDelete;\n    const classes = useStyles(props);\n    const scrollToBottomRefCallback = useCallback((element: HTMLElement | null) => {\n        if (element) {\n            element.scrollIntoView();\n        }\n    }, []);\n    const [menuItem, setMenuItem] = useState<CopyHistoryItem>();\n    const [menuOpen, setMenuOpen] = useState<boolean>(false);\n    const [menuAnchorEl, setMenuAnchorEl] = useState<Element>();\n\n    const handleMenu = useCallback((e: React.MouseEvent, item: CopyHistoryItem) => {\n        setMenuItem(item);\n        setMenuOpen(true);\n        setMenuAnchorEl(e.currentTarget);\n    }, []);\n\n    const handleMenuClosed = useCallback(() => {\n        setMenuItem(undefined);\n        setMenuOpen(false);\n        setMenuAnchorEl(undefined);\n    }, []);\n\n    const handleDelete = useCallback(\n        (item: CopyHistoryItem) => {\n            onDelete(item);\n        },\n        [onDelete]\n    );\n\n    let content;\n\n    if (props.items.length > 0) {\n        const items = [];\n        let lastSeenItemName = null;\n        let i = 0;\n        const itemNameCounters: { [name: string]: number } = {};\n        let itemsBySection: { [key: string]: CopyHistoryItem[] } = {};\n        let currentKey: string | undefined;\n\n        for (const item of props.items) {\n            if (lastSeenItemName === null || lastSeenItemName !== item.name) {\n                if (item.name in itemNameCounters) {\n                    itemNameCounters[item.name]++;\n                } else {\n                    itemNameCounters[item.name] = 0;\n                }\n\n                const key = item.name + '-' + itemNameCounters[item.name];\n                itemsBySection[key] = [];\n                lastSeenItemName = item.name;\n                currentKey = key;\n\n                items.push(\n                    <ListItem key={key}>\n                        <Typography color=\"textSecondary\">{item.name}</Typography>\n                        <ListItemSecondaryAction>\n                            <Tooltip title=\"Download as SRT\">\n                                <IconButton\n                                    onClick={() => props.onDownloadSectionAsSrt(item.name, itemsBySection[key])}\n                                    edge=\"end\"\n                                >\n                                    <SaveAltIcon />\n                                </IconButton>\n                            </Tooltip>\n                        </ListItemSecondaryAction>\n                    </ListItem>\n                );\n            }\n\n            itemsBySection[currentKey!].push(item);\n            const ref = i === props.items.length - 1 ? scrollToBottomRefCallback : null;\n\n            items.push(\n                <ListItem\n                    ref={ref}\n                    key={item.id}\n                    className={classes.listItem}\n                    classes={{ gutters: classes.listItemGutters }}\n                >\n                    <ListItemIcon classes={{ root: classes.listItemIconRoot }}>\n                        <Tooltip title=\"Export to Anki\">\n                            <IconButton onClick={() => props.onAnki(item)}>\n                                <NoteAddIcon fontSize=\"small\" />\n                            </IconButton>\n                        </Tooltip>\n                    </ListItemIcon>\n                    <ListItemIcon classes={{ root: classes.listItemIconRoot }}>\n                        <IconButton onClick={(e) => handleMenu(e, item)}>\n                            <MoreVertIcon fontSize=\"small\" />\n                        </IconButton>\n                    </ListItemIcon>\n                    <ListItemText\n                        primary={\n                            <Grid wrap=\"nowrap\" container>\n                                <Grid item className={item.text === '' ? classes.emptyText : classes.text}>\n                                    {item.text === '' ? 'No text' : item.text}\n                                </Grid>\n                                <Grid item className={classes.timestamp}>\n                                    {timeDurationDisplay(item.start, item.start, false)}\n                                </Grid>\n                            </Grid>\n                        }\n                    />\n                </ListItem>\n            );\n\n            ++i;\n        }\n\n        content = (\n            <div className={classes.listContainer}>\n                <List>{items}</List>\n            </div>\n        );\n    } else {\n        content = (\n            <div className={classes.emptyState}>\n                <Typography variant=\"h6\">Mining history is empty.</Typography>\n            </div>\n        );\n    }\n\n    return (\n        <React.Fragment>\n            <Drawer\n                variant=\"persistent\"\n                anchor=\"right\"\n                open={props.open}\n                className={classes.drawer}\n                classes={{\n                    paper: classes.drawerPaper,\n                }}\n            >\n                <div className={classes.drawerHeader}>\n                    <IconButton onClick={props.onClose}>\n                        <ChevronRightIcon />\n                    </IconButton>\n                </div>\n                <Divider />\n                {content}\n            </Drawer>\n            <Menu\n                open={props.open && menuOpen}\n                anchorEl={menuAnchorEl}\n                item={menuItem}\n                onClose={handleMenuClosed}\n                onSelect={props.onSelect}\n                onClipAudio={props.onClipAudio}\n                onDownloadImage={props.onDownloadImage}\n                onDelete={handleDelete}\n            />\n        </React.Fragment>\n    );\n}\n","import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport gt from 'semver/functions/gt';\nimport Fade from '@material-ui/core/Fade';\nimport Link from '@material-ui/core/Link';\nimport Typography from '@material-ui/core/Typography';\nimport ChromeExtension from '../services/chrome-extension';\nimport { Theme } from '@material-ui/core/styles';\n\ninterface StylesProps {\n    appBarHidden: boolean;\n}\n\nconst useStyles = makeStyles<Theme, StylesProps>((theme) => ({\n    background: ({ appBarHidden }) => ({\n        position: 'absolute',\n        height: appBarHidden ? '100vh' : 'calc(100vh - 64px)',\n        width: '100%',\n        zIndex: 100,\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        padding: 15,\n        textAlign: 'center',\n    }),\n    browseLink: {\n        cursor: 'pointer',\n    },\n}));\n\ninterface Props {\n    extension: ChromeExtension;\n    latestExtensionVersion: string;\n    extensionUrl: string;\n    loading: boolean;\n    dragging: boolean;\n    appBarHidden: boolean;\n    onFileSelector: React.MouseEventHandler<HTMLAnchorElement> &\n        React.MouseEventHandler<HTMLSpanElement> &\n        React.MouseEventHandler<HTMLLabelElement>;\n}\n\nexport default function LandingPage({\n    extension,\n    latestExtensionVersion,\n    extensionUrl,\n    loading,\n    dragging,\n    appBarHidden,\n    onFileSelector,\n}: Props) {\n    const classes = useStyles({ appBarHidden });\n    const [installedExtensionVersion, setInstalledExtensionVersion] = useState<string>();\n\n    useEffect(() => {\n        async function fetchInstalledExtensionVersion() {\n            setInstalledExtensionVersion(extension.version);\n        }\n\n        fetchInstalledExtensionVersion();\n    }, [extension]);\n\n    const extensionUpdateAvailable = installedExtensionVersion && gt(latestExtensionVersion, installedExtensionVersion);\n    const extensionNotInstalled = !installedExtensionVersion;\n\n    return (\n        <React.Fragment>\n            <Fade in={!loading && !dragging} timeout={500}>\n                <div className={classes.background}>\n                    <Typography variant=\"h6\">\n                        Drag and drop subtitle and media files, or{' '}\n                        <Link\n                            target=\"#\"\n                            className={classes.browseLink}\n                            onClick={onFileSelector}\n                            color=\"secondary\"\n                            component=\"label\"\n                        >\n                            browse\n                        </Link>\n                        .\n                        <br />\n                        {extensionNotInstalled && (\n                            <span>\n                                Install the{' '}\n                                <Link color=\"secondary\" target=\"_blank\" rel=\"noreferrer\" href={extensionUrl}>\n                                    Chrome extension\n                                </Link>{' '}\n                                to sync subtitles with streaming video.\n                            </span>\n                        )}\n                        {extensionUpdateAvailable && (\n                            <span>\n                                An extension{' '}\n                                <Link color=\"secondary\" target=\"_blank\" rel=\"noreferrer\" href={extensionUrl}>\n                                    update\n                                </Link>{' '}\n                                is available.\n                            </span>\n                        )}\n                    </Typography>\n                </div>\n            </Fade>\n        </React.Fragment>\n    );\n}\n","import CachedLocalStorage from './cached-local-storage';\nimport SettingsProvider from './settings-provider';\n\nconst volumeKey = 'volume';\nconst theaterModeKey = 'theaterMode';\nconst offsetKey = 'offset';\nconst subtitleAlignmentKey = 'subtitleAlignment';\nconst subtitlePositionOffetKey = 'subtitlePositionOffset';\nconst defaultVolume = 100;\n\nexport enum SubtitleAlignment {\n    bottom = 0,\n    top = 1,\n}\n\nexport default class PlaybackPreferences {\n    private readonly settingsProvider: SettingsProvider;\n    private readonly storage = new CachedLocalStorage();\n\n    constructor(settingsProvider: SettingsProvider) {\n        this.settingsProvider = settingsProvider;\n    }\n\n    get volume() {\n        const value = this.storage.get(volumeKey);\n\n        if (value === null) {\n            return defaultVolume;\n        }\n\n        return Number(value);\n    }\n\n    set volume(volume) {\n        this.storage.set(volumeKey, String(volume));\n    }\n\n    get theaterMode() {\n        return this.storage.get(theaterModeKey) === 'true' || false;\n    }\n\n    set theaterMode(theaterMode) {\n        this.storage.set(theaterModeKey, String(theaterMode));\n    }\n\n    get offset(): number {\n        if (!this.settingsProvider.rememberSubtitleOffset) {\n            return 0;\n        }\n\n        const value = this.storage.get(offsetKey);\n\n        if (value === null) {\n            return 0;\n        }\n\n        return Number(value);\n    }\n\n    set offset(offset: number) {\n        this.storage.set(offsetKey, String(offset));\n    }\n\n    get subtitleAlignment() {\n        const val = this.storage.get(subtitleAlignmentKey);\n\n        if (val === undefined) {\n            return SubtitleAlignment.bottom;\n        }\n\n        return Number(val) as SubtitleAlignment;\n    }\n\n    set subtitleAlignment(alignment: SubtitleAlignment) {\n        this.storage.set(subtitleAlignmentKey, String(alignment));\n    }\n\n    get subtitlePositionOffset() {\n        const val = this.storage.get(subtitlePositionOffetKey);\n\n        if (val === null) {\n            return 100;\n        }\n\n        return Number(val);\n    }\n\n    set subtitlePositionOffset(offset: number) {\n        this.storage.set(subtitlePositionOffetKey, String(offset));\n    }\n}\n","import { Message } from \"@project/common\";\nimport { VideoProtocol, VideoProtocolMessage } from \"./video-protocol\";\n\nexport default class BroadcastChannelVideoProtocol implements VideoProtocol {\n    private channel?: BroadcastChannel;\n\n    onMessage?: (message: VideoProtocolMessage) => void;\n    \n    constructor(channelId: string) {\n        this.channel = new BroadcastChannel(channelId);\n        const that = this;\n        this.channel.onmessage = (event) => {\n            that.onMessage?.(event as VideoProtocolMessage);\n        };\n    }\n\n    postMessage(message: Message) {\n        this.channel?.postMessage(message);\n    }\n\n    close() {\n        this.channel?.close();\n        this.channel = undefined;\n    }\n}\n","import { Message } from '@project/common';\nimport ChromeExtension, { ExtensionMessage } from './chrome-extension';\nimport { VideoProtocol, VideoProtocolMessage } from './video-protocol';\n\nexport default class ChromeTabVideoProtocol implements VideoProtocol {\n    private readonly tabId: number;\n    private readonly src: string;\n    private readonly extension: ChromeExtension;\n    private readonly listener: (message: ExtensionMessage) => void;\n    private readonly unsubscribeFromExtension: () => void;\n\n    onMessage?: (message: VideoProtocolMessage) => void;\n\n    constructor(tabId: number, src: string, extension: ChromeExtension) {\n        this.tabId = tabId;\n        this.src = src;\n        this.listener = (message) => {\n            if (message.tabId === tabId && message.src === src) {\n                this.onMessage?.({\n                    data: message.data,\n                });\n            }\n        };\n\n        this.unsubscribeFromExtension = extension.subscribe(this.listener);\n        this.extension = extension;\n    }\n\n    postMessage(message: Message) {\n        this.extension.sendMessage(message, this.tabId, this.src);\n    }\n\n    close() {\n        this.unsubscribeFromExtension();\n    }\n}\n","export default class Clock {\n    private accumulated: number;\n    private started: boolean;\n    private startTime?: number;\n    private _rate = 1;\n\n    constructor() {\n        this.accumulated = 0;\n        this.started = false;\n    }\n\n    get rate() {\n        return this._rate;\n    }\n\n    set rate(rate: number) {\n        if (this.started) {\n            this.accumulated += this._elapsed();\n            this.startTime = Date.now();\n        }\n    \n        this._rate = rate;\n    }\n\n    time(max: number) {\n        if (this.started) {\n            return Math.min(max, this.accumulated + this._elapsed());\n        }\n\n        return Math.min(max, this.accumulated);\n    }\n\n    stop() {\n        if (!this.started) {\n            return;\n        }\n\n        this.started = false;\n        this.accumulated += this._elapsed();\n    }\n\n    private _elapsed() {\n        return (Date.now() - this.startTime!) * this._rate;\n    }\n\n    start() {\n        this.startTime = Date.now();\n        this.started = true;\n    }\n\n    setTime(time: number) {\n        if (this.started) {\n            this.startTime = Date.now();\n            this.accumulated = time;\n        } else {\n            this.accumulated = time;\n        }\n    }\n\n    progress(max: number) {\n        return max === 0 ? 0 : Math.min(1, this.time(max) / max);\n    }\n}\n","export default class CachedLocalStorage {\n    private readonly _cache: { [key: string]: string | null } = {};\n\n    get(key: string): string | null {\n        let cached = this._cache[key];\n\n        if (cached === undefined) {\n            const fromStorage = localStorage.getItem(key);\n            this._cache[key] = fromStorage;\n            return fromStorage;\n        }\n\n        return cached;\n    }\n\n    set(key: string, value: string) {\n        localStorage.setItem(key, value);\n        this._cache[key] = value;\n    }\n\n    delete(key: string) {\n        delete this._cache[key];\n        localStorage.removeItem(key);\n    }\n}\n","import React, { useCallback, useEffect, useState, useRef, MutableRefObject } from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\nimport AudiotrackIcon from '@material-ui/icons/Audiotrack';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Fade from '@material-ui/core/Fade';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport Input from '@material-ui/core/Input';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport OpenInNewIcon from '@material-ui/icons/OpenInNew';\nimport Popover from '@material-ui/core/Popover';\nimport FullscreenIcon from '@material-ui/icons/Fullscreen';\nimport AspectRatioIcon from '@material-ui/icons/AspectRatio';\nimport FullscreenExitIcon from '@material-ui/icons/FullscreenExit';\nimport PauseIcon from '@material-ui/icons/Pause';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport QueueMusicIcon from '@material-ui/icons/QueueMusic';\nimport Slider from '@material-ui/core/Slider';\nimport TuneIcon from '@material-ui/icons/Tune';\nimport SubtitlesIcon from '@material-ui/icons/Subtitles';\nimport VerticalAlignTopIcon from '@material-ui/icons/VerticalAlignTop';\nimport VerticalAlignBottomIcon from '@material-ui/icons/VerticalAlignBottom';\nimport VideocamIcon from '@material-ui/icons/Videocam';\nimport VolumeOffIcon from '@material-ui/icons/VolumeOff';\nimport VolumeUpIcon from '@material-ui/icons/VolumeUp';\nimport { AudioTrackModel, PlayMode, VideoTabModel } from '@project/common';\nimport Clock from '../services/clock';\nimport PlaybackPreferences, { SubtitleAlignment } from '../services/playback-preferences';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nconst useControlStyles = makeStyles((theme) => ({\n    container: {\n        position: 'absolute',\n        left: '50%',\n        width: '50%',\n        bottom: 0,\n        pointerEvents: 'none',\n        color: '#fff',\n    },\n    buttonContainer: {\n        flexDirection: 'row',\n    },\n    timeDisplay: {\n        color: '#fff',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        height: '100%',\n        cursor: 'default',\n        fontSize: 20,\n        marginLeft: 10,\n    },\n    numberInput: {\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        fontSize: 20,\n        marginLeft: 10,\n        width: 100,\n        color: '#fff',\n        pointerEvents: 'auto',\n    },\n    volumeInputContainerShown: {\n        transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.short,\n        }),\n        marginRight: 5,\n        pointerEvents: 'auto',\n    },\n    volumeInputContainerHidden: {\n        transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.short,\n        }),\n        marginRight: 0,\n        pointerEvents: 'auto',\n    },\n    volumeInputHidden: {\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.short,\n        }),\n        width: 0,\n        pointerEvents: 'auto',\n    },\n    volumeInputShown: {\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.short,\n        }),\n        width: 100,\n        pointerEvents: 'auto',\n    },\n    volumeInputThumbHidden: {\n        transition: theme.transitions.create('visibility', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.short,\n        }),\n        opacity: 0,\n        pointerEvents: 'auto',\n    },\n    volumeInputThumbShown: {\n        transition: theme.transitions.create('visibility', {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.short,\n        }),\n        opacity: 1,\n        pointerEvents: 'auto',\n    },\n    subContainer: {\n        background: 'linear-gradient(to bottom, rgba(0, 0, 0, 0), rgba(0, 0, 0, .4) 40%, rgba(0, 0, 0, 0.7))',\n        position: 'relative',\n        left: '-100%',\n        width: '200%',\n        zIndex: 10,\n    },\n    button: {\n        pointerEvents: 'auto',\n    },\n    inactiveButton: {\n        color: 'rgba(72, 72, 72, 0.7)',\n        pointerEvents: 'auto',\n    },\n    inactiveTopButton: {\n        color: 'rgba(255, 255, 255, 0.5)',\n        pointerEvents: 'auto',\n    },\n    progress: {\n        margin: 5,\n    },\n    topButton: {\n        pointerEvents: 'auto',\n        color: '#fff',\n    },\n    gridContainer: {\n        pointerEvents: 'auto',\n        padding: 2,\n    },\n}));\n\nconst useProgressBarStyles = makeStyles((theme) => ({\n    root: {\n        height: 10,\n    },\n    container: {\n        height: 10,\n        pointerEvents: 'auto',\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        position: 'absolute',\n        width: 'calc(100% - 20px)',\n        marginLeft: 10,\n    },\n    mouseEventListener: {\n        zIndex: 1,\n        height: 10,\n        cursor: 'pointer',\n        pointerEvents: 'auto',\n        position: 'absolute',\n        width: '100%',\n    },\n    fillContainer: {\n        background: 'rgba(30,30,30,0.7)',\n        width: '100%',\n        height: 5,\n        position: 'relative',\n    },\n    fillContainerThick: {\n        transition: theme.transitions.create('height', {\n            easing: theme.transitions.easing.easeInOut,\n            duration: 50,\n        }),\n        height: 8,\n    },\n    fill: {\n        background: 'linear-gradient(to left, #ff1f62, #49007a)',\n        height: '100%',\n    },\n    handleContainer: {\n        position: 'absolute',\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        height: '100%',\n        bottom: 0,\n    },\n    handle: {\n        borderRadius: '50%',\n        width: 16,\n        height: 16,\n        opacity: 0,\n        left: -8,\n        background: 'white',\n        position: 'absolute',\n    },\n    handleOn: {\n        opacity: 1,\n        transition: theme.transitions.create('opacity', {\n            easing: theme.transitions.easing.easeInOut,\n            duration: theme.transitions.duration.shortest,\n        }),\n    },\n}));\n\nconst VolumeSlider = withStyles((theme) => ({\n    root: {\n        color: 'white',\n        verticalAlign: 'middle',\n    },\n    thumb: {\n        backgroundColor: 'white',\n        color: 'white',\n        '&:focus': {\n            boxShadow: 'inherit',\n        },\n        '&:hover, &$active': {\n            boxShadow: '0px 0px 0px 8px rgba(255, 255, 255, 0.1)',\n        },\n    },\n    active: {\n        color: 'white',\n    },\n}))(Slider);\n\nfunction displayTime(milliseconds: number) {\n    const seconds = Math.floor(milliseconds / 1000);\n    const minutes = Math.floor(seconds / 60);\n    const secondsInMinute = seconds % 60;\n    return String(minutes) + ':' + String(secondsInMinute).padStart(2, '0');\n}\n\nfunction elementWidth(element: HTMLElement) {\n    const rect = element.getBoundingClientRect();\n    return rect.right - rect.left;\n}\n\ninterface ProgressBarProps {\n    onSeek: (progress: number) => void;\n    value: number;\n}\n\nfunction ProgressBar({ onSeek, value }: ProgressBarProps) {\n    const classes = useProgressBarStyles();\n    const [mouseOver, setMouseOver] = useState(false);\n    const containerRef = useRef(null);\n\n    const handleClick = useCallback(\n        (e: React.MouseEvent<HTMLDivElement>) => {\n            const rect = e.currentTarget.getBoundingClientRect();\n            // Account for margins by subtracting 10 from left/right sides\n            const width = rect.right - rect.left - 20;\n            const progress = Math.min(1, Math.max(0, (e.pageX - rect.left - 10) / width));\n            onSeek(progress);\n        },\n        [onSeek]\n    );\n\n    const handleMouseOver = useCallback(() => setMouseOver(true), []);\n    const handleMouseOut = useCallback(() => setMouseOver(false), []);\n    const progressWidth = containerRef.current ? (elementWidth(containerRef.current) * value) / 100 : 0;\n    const fillStyle = { width: progressWidth };\n    const handleStyle = { marginLeft: progressWidth };\n    const fillContainerClassName = mouseOver\n        ? classes.fillContainer + ' ' + classes.fillContainerThick\n        : classes.fillContainer;\n    const handleClassName = mouseOver ? classes.handle + ' ' + classes.handleOn : classes.handle;\n\n    return (\n        <div className={classes.root}>\n            <div ref={containerRef} className={classes.container}>\n                <div className={fillContainerClassName}>\n                    <div className={classes.fill} style={fillStyle}></div>\n                    <div className={classes.handleContainer}>\n                        <div className={handleClassName} style={handleStyle} />\n                    </div>\n                </div>\n            </div>\n            <div\n                className={classes.mouseEventListener}\n                onClick={handleClick}\n                onMouseOver={handleMouseOver}\n                onMouseOut={handleMouseOut}\n            ></div>\n        </div>\n    );\n}\n\ninterface AudioTrackSelectorProps {\n    open: boolean;\n    anchorEl?: Element;\n    audioTracks?: AudioTrackModel[];\n    selectedAudioTrack?: string;\n    onAudioTrackSelected: (id: string) => void;\n    onClose: () => void;\n}\n\nfunction AudioTrackSelector({\n    open,\n    anchorEl,\n    audioTracks,\n    selectedAudioTrack,\n    onAudioTrackSelected,\n    onClose,\n}: AudioTrackSelectorProps) {\n    if (!audioTracks || audioTracks.length === 0) {\n        return null;\n    }\n\n    const list = audioTracks.map((t) => {\n        return (\n            <ListItem\n                key={t.id}\n                selected={t.id === selectedAudioTrack}\n                button\n                onClick={() => onAudioTrackSelected(t.id)}\n            >\n                {t.language} {t.label}\n            </ListItem>\n        );\n    });\n\n    return (\n        <div>\n            <Popover\n                disableEnforceFocus={true}\n                open={open}\n                anchorEl={anchorEl}\n                onClose={onClose}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n            >\n                <List>{list}</List>\n            </Popover>\n        </div>\n    );\n}\n\ninterface TabSelectorProps {\n    open: boolean;\n    anchorEl?: Element;\n    tabs?: VideoTabModel[];\n    selectedTab?: VideoTabModel;\n    onTabSelected: (tab: VideoTabModel) => void;\n    onClose: () => void;\n}\n\nfunction TabSelector({ open, anchorEl, onClose, tabs, selectedTab, onTabSelected }: TabSelectorProps) {\n    if (!tabs || tabs.length === 0) {\n        return null;\n    }\n\n    const list = tabs.map((t) => {\n        return (\n            <ListItem\n                key={`${t.id}:${t.src}`}\n                selected={selectedTab && t.id === selectedTab.id && t.src === selectedTab.src}\n                button\n                onClick={() => onTabSelected(t)}\n            >\n                {t.id} {t.title} {t.src}\n            </ListItem>\n        );\n    });\n\n    return (\n        <div>\n            <Popover\n                disableEnforceFocus={true}\n                open={open}\n                anchorEl={anchorEl}\n                onClose={onClose}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n            >\n                <List>{list}</List>\n            </Popover>\n        </div>\n    );\n}\n\ninterface MediaUnloaderProps {\n    open: boolean;\n    anchorEl?: Element;\n    file?: string;\n    onUnload: () => void;\n    onClose: () => void;\n}\n\nfunction MediaUnloader({ open, anchorEl, onUnload, onClose, file }: MediaUnloaderProps) {\n    return (\n        <div>\n            <Popover\n                disableEnforceFocus={true}\n                open={open}\n                anchorEl={anchorEl}\n                onClose={onClose}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n            >\n                <List>\n                    <ListItem button onClick={(e) => onUnload()}>\n                        Unload {file}\n                    </ListItem>\n                </List>\n            </Popover>\n        </div>\n    );\n}\n\ninterface PlayModeSelectorProps {\n    open: boolean;\n    anchorEl?: Element;\n    selectedPlayMode?: PlayMode;\n    onPlayMode: (playMode: PlayMode) => void;\n    onClose: () => void;\n}\n\nfunction PlayModeSelector({ open, anchorEl, selectedPlayMode, onPlayMode, onClose }: PlayModeSelectorProps) {\n    return (\n        <div>\n            <Popover\n                disableEnforceFocus={true}\n                open={open}\n                anchorEl={anchorEl}\n                onClose={onClose}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n            >\n                <List>\n                    <ListItem\n                        selected={selectedPlayMode === PlayMode.normal}\n                        button\n                        onClick={(e) => onPlayMode(PlayMode.normal)}\n                    >\n                        Normal\n                    </ListItem>\n                    <ListItem\n                        selected={selectedPlayMode === PlayMode.condensed}\n                        button\n                        onClick={(e) => onPlayMode(PlayMode.condensed)}\n                    >\n                        Condensed\n                    </ListItem>\n                    <ListItem\n                        selected={selectedPlayMode === PlayMode.autoPause}\n                        button\n                        onClick={(e) => onPlayMode(PlayMode.autoPause)}\n                    >\n                        Auto-pause\n                    </ListItem>\n                </List>\n            </Popover>\n        </div>\n    );\n}\n\nexport interface Point {\n    x: number;\n    y: number;\n}\n\ninterface ControlsProps {\n    clock: Clock;\n    playing: boolean;\n    length: number;\n    offsetEnabled?: boolean;\n    displayLength?: number;\n    offset: number;\n    playbackRate: number;\n    playbackRateEnabled?: boolean;\n    onAudioTrackSelected: (id: string) => void;\n    onSeek: (progress: number) => void;\n    mousePositionRef: MutableRefObject<Point>;\n    onShow?: (show: boolean) => void;\n    onPause: () => void;\n    onPlay: () => void;\n    onTabSelected?: (tab: VideoTabModel) => void;\n    onUnloadAudio?: () => void;\n    onUnloadVideo?: () => void;\n    onOffsetChange: (offset: number) => void;\n    onPlaybackRateChange: (playbackRate: number) => void;\n    onVolumeChange: (volume: number) => void;\n    disableKeyEvents?: boolean;\n    playbackPreferences: PlaybackPreferences;\n    closeEnabled?: boolean;\n    onClose?: () => void;\n    volumeEnabled?: boolean;\n    playMode?: PlayMode;\n    playModeEnabled?: boolean;\n    onPlayMode?: (playMode: PlayMode) => void;\n    subtitlesEnabled?: boolean;\n    subtitlesToggle?: boolean;\n    onSubtitlesToggle?: () => void;\n    videoFile?: string;\n    audioFile?: string;\n    audioTracks?: AudioTrackModel[];\n    selectedAudioTrack?: string;\n    tabs?: VideoTabModel[];\n    selectedTab?: VideoTabModel;\n    popOutEnabled?: boolean;\n    popOut?: boolean;\n    onPopOutToggle?: () => void;\n    fullscreenEnabled?: boolean;\n    fullscreen?: boolean;\n    onFullscreenToggle?: () => void;\n    hideSubtitlePlayerToggleEnabled?: boolean;\n    subtitlePlayerHidden?: boolean;\n    onHideSubtitlePlayerToggle?: () => void;\n    showOnMouseMovement: boolean;\n    theaterModeToggleEnabled?: boolean;\n    theaterModeEnabled?: boolean;\n    onTheaterModeToggle?: () => void;\n    subtitleAlignmentEnabled?: boolean;\n    subtitleAlignment?: SubtitleAlignment;\n    onSubtitleAlignment?: (alignment: SubtitleAlignment) => void;\n}\n\nexport default function Controls({\n    clock,\n    playing,\n    length,\n    offsetEnabled,\n    displayLength,\n    offset,\n    playbackRate,\n    playbackRateEnabled,\n    onAudioTrackSelected,\n    onSeek,\n    mousePositionRef,\n    onShow,\n    onPause,\n    onPlay,\n    onTabSelected,\n    onUnloadAudio,\n    onUnloadVideo,\n    onOffsetChange,\n    onPlaybackRateChange,\n    onVolumeChange,\n    disableKeyEvents,\n    playbackPreferences,\n    closeEnabled,\n    onClose,\n    volumeEnabled,\n    playMode,\n    playModeEnabled,\n    onPlayMode,\n    subtitlesEnabled,\n    subtitlesToggle,\n    onSubtitlesToggle,\n    videoFile,\n    audioFile,\n    audioTracks,\n    selectedAudioTrack,\n    tabs,\n    selectedTab,\n    popOutEnabled,\n    popOut,\n    onPopOutToggle,\n    fullscreenEnabled,\n    fullscreen,\n    onFullscreenToggle,\n    hideSubtitlePlayerToggleEnabled,\n    subtitlePlayerHidden,\n    onHideSubtitlePlayerToggle,\n    showOnMouseMovement,\n    theaterModeToggleEnabled,\n    theaterModeEnabled,\n    onTheaterModeToggle,\n    subtitleAlignment,\n    subtitleAlignmentEnabled,\n    onSubtitleAlignment,\n}: ControlsProps) {\n    const classes = useControlStyles();\n    const [show, setShow] = useState<boolean>(true);\n    const [audioTrackSelectorOpen, setAudioTrackSelectorOpen] = useState<boolean>(false);\n    const [audioTrackSelectorAnchorEl, setAudioTrackSelectorAnchorEl] = useState<Element>();\n    const [tabSelectorOpen, setTabSelectorOpen] = useState<boolean>(false);\n    const [tabSelectorAnchorEl, setTabSelectorAnchorEl] = useState<Element>();\n    const [audioUnloaderOpen, setAudioUnloaderOpen] = useState<boolean>(false);\n    const [audioUnloaderAnchorEl, setAudioUnloaderAnchorEl] = useState<Element>();\n    const [videoUnloaderOpen, setVideoUnloaderOpen] = useState<boolean>(false);\n    const [videoUnloaderAnchorEl, setVideoUnloaderAnchorEl] = useState<Element>();\n    const [playModeSelectorOpen, setPlayModeSelectorOpen] = useState<boolean>(false);\n    const [playModeSelectorAnchorEl, setPlayModeSelectorAnchorEl] = useState<Element>();\n    const [showVolumeBar, setShowVolumeBar] = useState<boolean>(false);\n    const [volume, setVolume] = useState<number>(100);\n    const [lastCommittedVolume, setLastCommittedVolume] = useState<number>(100);\n\n    const lastMousePositionRef = useRef<Point>({ x: 0, y: 0 });\n    const lastShowTimestampRef = useRef<number>(Date.now());\n    const lastNumberInputChangeTimestampRef = useRef<number>(Date.now());\n    const lastShowRef = useRef<boolean>(true);\n    const forceShowRef = useRef<boolean>(false);\n    const [offsetInputWidth, setOffsetInputWidth] = useState<number>(5);\n    const [playbackRateInputWidth, setPlaybackRateInputWidth] = useState<number>(5);\n    const offsetInputRef = useRef<HTMLInputElement>();\n    const playbackRateInputRef = useRef<HTMLInputElement>();\n    const containerRef = useRef<HTMLDivElement>(null);\n    const closeButtonRef = useRef<HTMLButtonElement>(null);\n    const [, updateState] = useState<any>();\n    const forceUpdate = useCallback(() => updateState({}), []);\n\n    const handleSeek = useCallback(\n        (progress: number) => {\n            onSeek(progress);\n        },\n        [onSeek]\n    );\n\n    function handleMouseOver() {\n        forceShowRef.current = true;\n    }\n\n    function handleMouseOut() {\n        forceShowRef.current = false;\n    }\n\n    useEffect(() => {\n        const savedVolume = Number(playbackPreferences.volume);\n        setVolume(savedVolume);\n        onVolumeChange(savedVolume / 100);\n\n        if (savedVolume > 0) {\n            setLastCommittedVolume(savedVolume);\n        }\n    }, [playbackPreferences, onVolumeChange]);\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            let currentShow: boolean;\n\n            if (showOnMouseMovement) {\n                currentShow =\n                    Date.now() - lastShowTimestampRef.current < 2000 ||\n                    Math.pow(mousePositionRef.current.x - lastMousePositionRef.current.x, 2) +\n                        Math.pow(mousePositionRef.current.y - lastMousePositionRef.current.y, 2) >\n                        100;\n            } else {\n                currentShow =\n                    ((containerRef.current && mousePositionRef.current.y > containerRef.current.offsetTop - 20) ||\n                        (closeButtonRef.current &&\n                            mousePositionRef.current.y < closeButtonRef.current.offsetHeight + 20)) ??\n                    false;\n            }\n\n            currentShow =\n                currentShow ||\n                forceShowRef.current ||\n                offsetInputRef.current === document.activeElement ||\n                playbackRateInputRef.current === document.activeElement ||\n                Date.now() - lastNumberInputChangeTimestampRef.current < 2000;\n\n            if (currentShow && !lastShowRef.current) {\n                lastShowTimestampRef.current = Date.now();\n                setShow(currentShow);\n            } else if (!currentShow && lastShowRef.current) {\n                setShow(currentShow);\n            }\n\n            lastShowRef.current = currentShow;\n            lastMousePositionRef.current.x = mousePositionRef.current.x;\n            lastMousePositionRef.current.y = mousePositionRef.current.y;\n        }, 100);\n        return () => clearInterval(interval);\n    }, [mousePositionRef, showOnMouseMovement]);\n\n    useEffect(() => onShow?.(show), [onShow, show]);\n\n    const updateOffset = useCallback((offset: number) => {\n        if (offsetInputRef.current) {\n            if (offset === 0) {\n                offsetInputRef.current.value = '';\n                setOffsetInputWidth(5);\n            } else {\n                const offsetSeconds = offset / 1000;\n                const value = offsetSeconds >= 0 ? '+' + offsetSeconds.toFixed(2) : String(offsetSeconds.toFixed(2));\n                offsetInputRef.current.value = value;\n                lastNumberInputChangeTimestampRef.current = Date.now();\n                setOffsetInputWidth(value.length);\n            }\n            offsetInputRef.current.blur();\n        }\n    }, []);\n\n    const updatePlaybackRate = useCallback((playbackRate: number) => {\n        if (playbackRateInputRef.current) {\n            if (playbackRate === 1) {\n                playbackRateInputRef.current.value = '';\n                setPlaybackRateInputWidth(5);\n            } else {\n                const value = '×' + String(playbackRate.toFixed(2));\n                playbackRateInputRef.current.value = value;\n                lastNumberInputChangeTimestampRef.current = Date.now();\n                setPlaybackRateInputWidth(value.length);\n            }\n            playbackRateInputRef.current.blur();\n        }\n    }, []);\n\n    useEffect(() => {\n        if (disableKeyEvents) {\n            return;\n        }\n\n        function handleKey(event: KeyboardEvent) {\n            if (event.key === 'Enter') {\n                if (offsetInputRef.current === document.activeElement) {\n                    const newOffset = Number(offsetInputRef.current.value);\n\n                    if (newOffset === offset) {\n                        updateOffset(offset);\n                        return;\n                    }\n\n                    if (Number.isNaN(newOffset)) {\n                        return;\n                    }\n\n                    onOffsetChange(newOffset * 1000);\n                } else if (playbackRateInputRef.current === document.activeElement) {\n                    const newPlaybackRate = Number(playbackRateInputRef.current.value);\n\n                    if (playbackRate === newPlaybackRate) {\n                        updatePlaybackRate(playbackRate);\n                        return;\n                    }\n\n                    if (Number.isNaN(newPlaybackRate) || newPlaybackRate < 0.1 || newPlaybackRate > 5) {\n                        return;\n                    }\n\n                    onPlaybackRateChange(newPlaybackRate);\n                }\n            }\n        }\n\n        window.addEventListener('keydown', handleKey);\n\n        return () => {\n            window.removeEventListener('keydown', handleKey);\n        };\n    }, [\n        onOffsetChange,\n        onPlaybackRateChange,\n        updateOffset,\n        updatePlaybackRate,\n        offset,\n        playbackRate,\n        disableKeyEvents,\n    ]);\n\n    const handleNumberInputClicked = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n        const inputElement = e.target as HTMLInputElement;\n        inputElement.setSelectionRange(0, inputElement.value?.length || 0);\n    }, []);\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            forceUpdate();\n        }, 100);\n\n        return () => clearInterval(interval);\n    }, [forceUpdate]);\n\n    useEffect(() => {\n        updateOffset(offset);\n    }, [offset, updateOffset]);\n\n    useEffect(() => {\n        updatePlaybackRate(playbackRate);\n    }, [playbackRate, updatePlaybackRate]);\n\n    const handleAudioTrackSelectorClosed = useCallback(() => {\n        setAudioTrackSelectorAnchorEl(undefined);\n        setAudioTrackSelectorOpen(false);\n    }, []);\n\n    const handleAudioTrackSelectorOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setAudioTrackSelectorAnchorEl(e.currentTarget);\n        setAudioTrackSelectorOpen(true);\n    }, []);\n\n    const handleAudioTrackSelected = useCallback(\n        (id: string) => {\n            onAudioTrackSelected(id);\n            setAudioTrackSelectorAnchorEl(undefined);\n            setAudioTrackSelectorOpen(false);\n        },\n        [onAudioTrackSelected]\n    );\n\n    const handleTabSelectorClosed = useCallback(() => {\n        setTabSelectorAnchorEl(undefined);\n        setTabSelectorOpen(false);\n    }, []);\n\n    const handleTabSelectorOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setTabSelectorAnchorEl(e.currentTarget);\n        setTabSelectorOpen(true);\n    }, []);\n\n    const handleTabSelected = useCallback(\n        (tab: VideoTabModel) => {\n            onTabSelected?.(tab);\n            setTabSelectorAnchorEl(undefined);\n            setTabSelectorOpen(false);\n        },\n        [onTabSelected]\n    );\n\n    const handleAudioUnloaderClosed = useCallback(() => {\n        setAudioUnloaderAnchorEl(undefined);\n        setAudioUnloaderOpen(false);\n    }, []);\n\n    const handleAudioUnloaderOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setAudioUnloaderAnchorEl(e.currentTarget);\n        setAudioUnloaderOpen(true);\n    }, []);\n\n    const handleUnloadAudio = useCallback(() => {\n        onUnloadAudio?.();\n        setAudioUnloaderOpen(false);\n    }, [onUnloadAudio]);\n\n    const handleVideoUnloaderClosed = useCallback(() => {\n        setVideoUnloaderAnchorEl(undefined);\n        setVideoUnloaderOpen(false);\n    }, []);\n\n    const handleVideoUnloaderOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setVideoUnloaderAnchorEl(e.currentTarget);\n        setVideoUnloaderOpen(true);\n    }, []);\n\n    const handleUnloadVideo = useCallback(() => {\n        onUnloadVideo?.();\n        setVideoUnloaderOpen(false);\n    }, [onUnloadVideo]);\n\n    const handlePlayModeSelectorClosed = useCallback(() => {\n        setPlayModeSelectorAnchorEl(undefined);\n        setPlayModeSelectorOpen(false);\n    }, []);\n\n    const handlePlayModeSelectorOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setPlayModeSelectorAnchorEl(e.currentTarget);\n        setPlayModeSelectorOpen(true);\n    }, []);\n\n    const handlePlayModeSelected = useCallback(\n        (playMode: PlayMode) => {\n            onPlayMode?.(playMode);\n            setPlayModeSelectorAnchorEl(undefined);\n            setPlayModeSelectorOpen(false);\n        },\n        [onPlayMode]\n    );\n\n    const handleVolumeMouseOut = useCallback(() => setShowVolumeBar(false), []);\n    const handleVolumeMouseOver = useCallback(() => setShowVolumeBar(true), []);\n\n    const handleVolumeChange = useCallback(\n        (e: React.ChangeEvent<{}>, value: number | number[]) => {\n            if (typeof value !== 'number') {\n                return;\n            }\n\n            setVolume(value);\n            onVolumeChange(value / 100);\n        },\n        [onVolumeChange]\n    );\n\n    const handleVolumeChangeCommitted = useCallback(\n        (e: React.ChangeEvent<{}>, value: number | number[]) => {\n            if (typeof value !== 'number') {\n                return;\n            }\n\n            if (value > 0) {\n                setLastCommittedVolume(value);\n            }\n\n            playbackPreferences.volume = value;\n        },\n        [playbackPreferences]\n    );\n\n    const handleVolumeToggle = useCallback(() => {\n        setVolume((volume) => {\n            const newVolume = volume > 0 ? 0 : lastCommittedVolume;\n            onVolumeChange(newVolume / 100);\n            return newVolume;\n        });\n    }, [onVolumeChange, lastCommittedVolume]);\n\n    const handleSubtitleAlignment = useCallback(() => {\n        if (!subtitleAlignmentEnabled || subtitleAlignment === undefined || onSubtitleAlignment === undefined) {\n            return;\n        }\n\n        const newAlignment =\n            subtitleAlignment === SubtitleAlignment.top ? SubtitleAlignment.bottom : SubtitleAlignment.top;\n        onSubtitleAlignment(newAlignment);\n    }, [subtitleAlignment, subtitleAlignmentEnabled, onSubtitleAlignment]);\n\n    const progress = clock.progress(length);\n\n    return (\n        <React.Fragment>\n            <Fade in={show} timeout={200}>\n                <Grid container style={{ position: 'absolute', top: 0 }}>\n                    <Grid item style={{ flexGrow: 1 }}>\n                        {closeEnabled && (\n                            <IconButton\n                                ref={closeButtonRef}\n                                color=\"inherit\"\n                                className={classes.topButton}\n                                onClick={onClose}\n                                onMouseOver={handleMouseOver}\n                                onMouseOut={handleMouseOut}\n                            >\n                                <CloseIcon />\n                            </IconButton>\n                        )}\n                    </Grid>\n                    <Grid item>\n                        {theaterModeToggleEnabled && (\n                            <IconButton\n                                color=\"inherit\"\n                                className={theaterModeEnabled ? classes.topButton : classes.inactiveTopButton}\n                                onClick={onTheaterModeToggle}\n                                onMouseOver={handleMouseOver}\n                                onMouseOut={handleMouseOut}\n                            >\n                                <AspectRatioIcon />\n                            </IconButton>\n                        )}\n                        {hideSubtitlePlayerToggleEnabled && (\n                            <IconButton\n                                color=\"inherit\"\n                                className={classes.topButton}\n                                onClick={onHideSubtitlePlayerToggle}\n                                onMouseOver={handleMouseOver}\n                                onMouseOut={handleMouseOut}\n                            >\n                                {subtitlePlayerHidden ? <ArrowBackIcon /> : <ArrowForwardIcon />}\n                            </IconButton>\n                        )}\n                    </Grid>\n                </Grid>\n            </Fade>\n            <div\n                ref={containerRef}\n                className={classes.container}\n                onMouseOver={handleMouseOver}\n                onMouseOut={handleMouseOut}\n            >\n                <Fade in={show} timeout={200}>\n                    <div className={classes.subContainer}>\n                        <ProgressBar onSeek={handleSeek} value={progress * 100} />\n                        <Grid container className={classes.gridContainer} direction=\"row\">\n                            <Grid item>\n                                <IconButton color=\"inherit\" onClick={() => (playing ? onPause() : onPlay())}>\n                                    {playing ? (\n                                        <PauseIcon className={classes.button} />\n                                    ) : (\n                                        <PlayArrowIcon className={classes.button} />\n                                    )}\n                                </IconButton>\n                            </Grid>\n                            {volumeEnabled && (\n                                <Grid\n                                    item\n                                    onMouseOver={handleVolumeMouseOver}\n                                    onMouseOut={handleVolumeMouseOut}\n                                    className={\n                                        showVolumeBar\n                                            ? classes.volumeInputContainerShown\n                                            : classes.volumeInputContainerHidden\n                                    }\n                                >\n                                    <IconButton color=\"inherit\" onClick={handleVolumeToggle}>\n                                        {volume === 0 ? <VolumeOffIcon /> : <VolumeUpIcon />}\n                                    </IconButton>\n                                    <VolumeSlider\n                                        onChange={handleVolumeChange}\n                                        onChangeCommitted={handleVolumeChangeCommitted}\n                                        value={volume}\n                                        defaultValue={100}\n                                        classes={{\n                                            root: showVolumeBar ? classes.volumeInputShown : classes.volumeInputHidden,\n                                            thumb: showVolumeBar\n                                                ? classes.volumeInputThumbShown\n                                                : classes.volumeInputThumbHidden,\n                                        }}\n                                    />\n                                </Grid>\n                            )}\n                            <Grid item>\n                                <div className={classes.timeDisplay}>\n                                    {displayTime(progress * length)} / {displayTime(displayLength || length)}\n                                </div>\n                            </Grid>\n                            {offsetEnabled && (\n                                <Grid item>\n                                    <Tooltip title=\"Subtitle Offset\">\n                                        <Input\n                                            style={{\n                                                width: `${offsetInputWidth}ch`,\n                                            }}\n                                            inputRef={offsetInputRef}\n                                            disableUnderline={true}\n                                            className={classes.numberInput}\n                                            placeholder={'±' + Number(0).toFixed(2)}\n                                            onClick={handleNumberInputClicked}\n                                            onChange={(e) => setOffsetInputWidth(Math.max(5, e.target.value.length))}\n                                        />\n                                    </Tooltip>\n                                </Grid>\n                            )}\n                            {playbackRateEnabled && (\n                                <Grid item>\n                                    <Tooltip title=\"Playback Rate\">\n                                        <Input\n                                            style={{\n                                                width: `${playbackRateInputWidth}ch`,\n                                                marginLeft: 4,\n                                            }}\n                                            inputRef={playbackRateInputRef}\n                                            disableUnderline={true}\n                                            className={classes.numberInput}\n                                            placeholder={'×' + Number(1).toFixed(2)}\n                                            onClick={handleNumberInputClicked}\n                                            onChange={(e) =>\n                                                setPlaybackRateInputWidth(Math.max(5, e.target.value.length))\n                                            }\n                                        />\n                                    </Tooltip>\n                                </Grid>\n                            )}\n                            <Grid item style={{ flexGrow: 1 }}></Grid>\n                            {subtitleAlignmentEnabled && subtitleAlignment !== undefined && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={handleSubtitleAlignment}>\n                                        {subtitleAlignment === SubtitleAlignment.top ? (\n                                            <VerticalAlignTopIcon />\n                                        ) : (\n                                            <VerticalAlignBottomIcon />\n                                        )}\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {subtitlesToggle && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={onSubtitlesToggle}>\n                                        <SubtitlesIcon\n                                            className={subtitlesEnabled ? classes.button : classes.inactiveButton}\n                                        />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {videoFile && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={handleVideoUnloaderOpened}>\n                                        <VideocamIcon className={classes.button} />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {audioFile && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={handleAudioUnloaderOpened}>\n                                        <AudiotrackIcon className={classes.button} />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {audioTracks && audioTracks.length > 1 && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={handleAudioTrackSelectorOpened}>\n                                        <QueueMusicIcon className={classes.button} />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {tabs && tabs.length > 0 && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={handleTabSelectorOpened}>\n                                        <VideocamIcon\n                                            className={selectedTab ? classes.button : classes.inactiveButton}\n                                        />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {playModeEnabled && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={handlePlayModeSelectorOpened}>\n                                        <TuneIcon\n                                            className={playModeEnabled ? classes.button : classes.inactiveButton}\n                                        />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {popOutEnabled && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={onPopOutToggle}>\n                                        <OpenInNewIcon\n                                            className={classes.button}\n                                            style={popOut ? { transform: 'rotateX(180deg)' } : {}}\n                                        />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {fullscreenEnabled && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={onFullscreenToggle}>\n                                        {fullscreen ? (\n                                            <FullscreenExitIcon className={classes.button} />\n                                        ) : (\n                                            <FullscreenIcon className={classes.button} />\n                                        )}\n                                    </IconButton>\n                                </Grid>\n                            )}\n                        </Grid>\n                    </div>\n                </Fade>\n                <TabSelector\n                    open={tabSelectorOpen && show}\n                    anchorEl={tabSelectorAnchorEl}\n                    tabs={tabs}\n                    selectedTab={selectedTab}\n                    onClose={handleTabSelectorClosed}\n                    onTabSelected={handleTabSelected}\n                />\n                <AudioTrackSelector\n                    open={audioTrackSelectorOpen && show}\n                    anchorEl={audioTrackSelectorAnchorEl}\n                    audioTracks={audioTracks}\n                    selectedAudioTrack={selectedAudioTrack}\n                    onClose={handleAudioTrackSelectorClosed}\n                    onAudioTrackSelected={handleAudioTrackSelected}\n                />\n                <MediaUnloader\n                    open={audioUnloaderOpen}\n                    anchorEl={audioUnloaderAnchorEl}\n                    file={audioFile}\n                    onClose={handleAudioUnloaderClosed}\n                    onUnload={handleUnloadAudio}\n                />\n                <MediaUnloader\n                    open={videoUnloaderOpen}\n                    anchorEl={videoUnloaderAnchorEl}\n                    file={videoFile}\n                    onClose={handleVideoUnloaderClosed}\n                    onUnload={handleUnloadVideo}\n                />\n                <PlayModeSelector\n                    open={playModeSelectorOpen && show}\n                    anchorEl={playModeSelectorAnchorEl}\n                    selectedPlayMode={playMode}\n                    onClose={handlePlayModeSelectorClosed}\n                    onPlayMode={handlePlayModeSelected}\n                />\n            </div>\n        </React.Fragment>\n    );\n}\n","import { RefObject } from \"react\";\n\nexport interface MediaElement {\n    currentTime: number;\n    readyState: number;\n    playbackRate: number;\n    oncanplay: ((ev: Event) => void) | null;\n    play: () => Promise<void>;\n    pause: () => void;\n    duration: number;\n}\n\nexport default class MediaAdapter {\n    private readonly ref: RefObject<MediaElement | undefined>;\n    private readonly readyResolves: (() => void)[];\n\n    constructor(ref: RefObject<MediaElement | undefined>) {\n        this.ref = ref;\n        this.readyResolves = [];\n    }\n\n    async seek(time: number) {\n        return new Promise((resolve, reject) => {\n            if (this.ref.current) {\n                this.ref.current.currentTime = time;\n                this._onMediaCanPlay(() => resolve(undefined));\n            } else {\n                resolve(undefined);\n            }\n        });\n    }\n\n    async onReady() {\n        return new Promise((resolve, reject) => {\n            if (this.ref.current) {\n                this._onMediaCanPlay(() => resolve(undefined));\n            } else {\n                resolve(undefined);\n            }\n        });\n    }\n\n    _onMediaCanPlay(callback: () => void) {\n        if (this.ref.current?.readyState === 4) {\n            callback();\n            return;\n        }\n\n        if (this.ref.current && !this.ref.current.oncanplay) {\n            this.ref.current.oncanplay = (e) => {\n                for (const resolve of this.readyResolves) {\n                    resolve();\n                }\n\n                this.readyResolves.length = 0;\n\n                if (this.ref.current) {\n                    this.ref.current.oncanplay = null;\n                }\n            };\n        }\n\n        this.readyResolves.push(callback);\n    }\n\n    play() {\n        this.ref.current?.play();\n    }\n\n    pause() {\n        this.ref.current?.pause();\n    }\n\n    playbackRate(playbackRate: number) {\n        if (this.ref.current) {\n            this.ref.current.playbackRate = playbackRate;\n        }\n    }\n}\n","import React, { useCallback, useEffect, useState, useMemo, useRef, createRef, RefObject } from 'react';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport { keysAreEqual } from '../services/util';\nimport { useWindowSize } from '../hooks/useWindowSize';\nimport {\n    AsbplayerSettingsProvider,\n    PostMineAction,\n    surroundingSubtitles,\n    SubtitleModel,\n    SubtitleCollection,\n    KeyBinder,\n    AutoPauseContext,\n} from '@project/common';\nimport { SubtitleTextImage } from '@project/common/components';\nimport FileCopy from '@material-ui/icons/FileCopy';\nimport IconButton from '@material-ui/core/IconButton';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableRow, { TableRowProps } from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\nimport Clock from '../services/clock';\n\ninterface StylesProps {\n    compressed: boolean;\n    appBarHidden: boolean;\n    windowWidth: number;\n}\n\nconst useSubtitlePlayerStyles = makeStyles<Theme, StylesProps, string>((theme) => ({\n    container: {\n        height: ({ appBarHidden }) => (appBarHidden ? '100vh' : 'calc(100vh - 64px)'),\n        position: 'relative',\n        overflowX: 'hidden',\n        backgroundColor: theme.palette.background.default,\n        width: ({ compressed, windowWidth }) => (compressed ? Math.max(350, 0.25 * windowWidth) : '100%'),\n    },\n    table: {\n        backgroundColor: theme.palette.background.default,\n        marginBottom: 75, // so the last row doesn't collide with controls\n    },\n    noSubtitles: {\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        padding: 15,\n        textAlign: 'center',\n    },\n}));\n\nconst useSubtitleRowStyles = makeStyles((theme) => ({\n    subtitleRow: {\n        '&:hover': {\n            backgroundColor: theme.palette.action.hover,\n        },\n    },\n    subtitle: {\n        fontSize: 20,\n        paddingRight: 0,\n        minWidth: 200,\n        width: '100%',\n        overflowWrap: 'anywhere',\n        whiteSpace: 'pre-wrap',\n    },\n    compressedSubtitle: {\n        fontSize: 16,\n        paddingRight: 0,\n        minWidth: 200,\n        width: '100%',\n        overflowWrap: 'anywhere',\n        whiteSpace: 'pre-wrap',\n    },\n    disabledSubtitle: {\n        color: 'transparent',\n        backgroundColor: theme.palette.action.disabledBackground,\n        borderRadius: 5,\n    },\n    timestamp: {\n        fontSize: 14,\n        color: '#aaaaaa',\n        textAlign: 'right',\n        paddingRight: 15,\n        paddingLeft: 5,\n    },\n    copyButton: {\n        textAlign: 'right',\n        padding: 0,\n    },\n}));\n\nexport interface DisplaySubtitleModel extends SubtitleModel {\n    displayTime: string;\n    index: number;\n}\n\ninterface SubtitleRowProps extends TableRowProps {\n    index: number;\n    compressed: boolean;\n    selected: boolean;\n    disabled: boolean;\n    subtitle: DisplaySubtitleModel;\n    copyButtonEnabled: boolean;\n    subtitleRef: RefObject<HTMLTableRowElement>;\n    onClickSubtitle: (index: number) => void;\n    onCopySubtitle: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>, index: number) => void;\n}\n\nconst SubtitleRow = React.memo((props: SubtitleRowProps) => {\n    const {\n        index,\n        selected,\n        subtitleRef,\n        onClickSubtitle,\n        onCopySubtitle,\n        compressed,\n        disabled,\n        subtitle,\n        copyButtonEnabled,\n        ...tableRowProps\n    } = props;\n    const classes = useSubtitleRowStyles();\n    const textRef = useRef<HTMLSpanElement>(null);\n    const [textSelected, setTextSelected] = useState<boolean>(false);\n    let className = compressed ? classes.compressedSubtitle : classes.subtitle;\n    let disabledClassName = disabled ? classes.disabledSubtitle : '';\n\n    if (subtitle.start < 0 || subtitle.end < 0) {\n        return null;\n    }\n\n    function handleMouseUp() {\n        const selection = document.getSelection();\n        const selected =\n            selection?.type === 'Range' && textRef.current?.isSameNode(selection.anchorNode?.parentNode ?? null);\n        setTextSelected(selected ?? false);\n    }\n\n    const content = subtitle.textImage ? (\n        <SubtitleTextImage availableWidth={window.screen.availWidth / 2} subtitle={subtitle} scale={1} />\n    ) : (\n        <span ref={textRef} className={disabledClassName}>\n            {subtitle.text}\n        </span>\n    );\n\n    return (\n        <TableRow\n            onClick={() => !textSelected && onClickSubtitle(index)}\n            onMouseUp={handleMouseUp}\n            ref={subtitleRef}\n            className={classes.subtitleRow}\n            selected={selected}\n            {...tableRowProps}\n        >\n            <TableCell className={className}>{content}</TableCell>\n            {copyButtonEnabled && (\n                <TableCell className={classes.copyButton}>\n                    <IconButton onClick={(e) => onCopySubtitle(e, index)}>\n                        <FileCopy fontSize={compressed ? 'small' : 'medium'} />\n                    </IconButton>\n                </TableCell>\n            )}\n            <TableCell className={classes.timestamp}>\n                <div>{`\\n${subtitle.displayTime}\\n`}</div>\n            </TableCell>\n        </TableRow>\n    );\n});\n\ninterface SubtitlePlayerProps {\n    clock: Clock;\n    onSeek: (progress: number, shouldPlay: boolean) => void;\n    onCopy: (\n        subtitle: SubtitleModel,\n        surroundingSubtitles: SubtitleModel[],\n        postMineAction: PostMineAction,\n        preventDuplicate: boolean\n    ) => void;\n    onOffsetChange: (offset: number) => void;\n    onToggleSubtitleTrack: (track: number) => void;\n    onSubtitlesSelected: (subtitles: SubtitleModel[]) => void;\n    autoPauseContext: AutoPauseContext;\n    playing: boolean;\n    subtitles?: DisplaySubtitleModel[];\n    subtitleCollection?: SubtitleCollection<DisplaySubtitleModel>;\n    length: number;\n    jumpToSubtitle?: SubtitleModel;\n    compressed: boolean;\n    copyButtonEnabled: boolean;\n    loading: boolean;\n    drawerOpen: boolean;\n    appBarHidden: boolean;\n    displayHelp?: string;\n    disableKeyEvents: boolean;\n    lastJumpToTopTimestamp: number;\n    hidden: boolean;\n    disabledSubtitleTracks: { [track: number]: boolean };\n    settingsProvider: AsbplayerSettingsProvider;\n    keyBinder: KeyBinder;\n}\n\nexport default function SubtitlePlayer({\n    clock,\n    onSeek,\n    onCopy,\n    onOffsetChange,\n    onToggleSubtitleTrack,\n    onSubtitlesSelected,\n    autoPauseContext,\n    playing,\n    subtitles,\n    subtitleCollection,\n    length,\n    jumpToSubtitle,\n    compressed,\n    copyButtonEnabled,\n    loading,\n    drawerOpen,\n    appBarHidden,\n    displayHelp,\n    disableKeyEvents,\n    lastJumpToTopTimestamp,\n    hidden,\n    disabledSubtitleTracks,\n    settingsProvider,\n    keyBinder,\n}: SubtitlePlayerProps) {\n    const playingRef = useRef<boolean>();\n    playingRef.current = playing;\n    const clockRef = useRef<Clock>(clock);\n    clockRef.current = clock;\n    const subtitleListRef = useRef<DisplaySubtitleModel[]>();\n    subtitleListRef.current = subtitles;\n    const subtitleRefs = useMemo<RefObject<HTMLTableRowElement>[]>(\n        () =>\n            subtitles\n                ? Array(subtitles.length)\n                      .fill(undefined)\n                      .map((_) => createRef<HTMLTableRowElement>())\n                : [],\n        [subtitles]\n    );\n    const subtitleCollectionRef = useRef<SubtitleCollection<DisplaySubtitleModel>>(\n        SubtitleCollection.empty<DisplaySubtitleModel>()\n    );\n    subtitleCollectionRef.current = subtitleCollection ?? SubtitleCollection.empty<DisplaySubtitleModel>();\n    const subtitleRefsRef = useRef<RefObject<HTMLTableRowElement>[]>([]);\n    subtitleRefsRef.current = subtitleRefs;\n    const disableKeyEventsRef = useRef<boolean>();\n    disableKeyEventsRef.current = disableKeyEvents;\n    const [selectedSubtitleIndexes, setSelectedSubtitleIndexes] = useState<{ [index: number]: boolean }>({});\n    const selectedSubtitleIndexesRef = useRef<{ [index: number]: boolean }>({});\n    const lengthRef = useRef<number>(0);\n    lengthRef.current = length;\n    const hiddenRef = useRef<boolean>(false);\n    hiddenRef.current = hidden;\n    const lastScrollTimestampRef = useRef<number>(0);\n    const requestAnimationRef = useRef<number>();\n    const containerRef = useRef<HTMLElement>();\n    const drawerOpenRef = useRef<boolean>();\n    drawerOpenRef.current = drawerOpen;\n    const [windowWidth] = useWindowSize(true);\n    const classes = useSubtitlePlayerStyles({ compressed, windowWidth, appBarHidden });\n    const autoPauseContextRef = useRef<AutoPauseContext>();\n    autoPauseContextRef.current = autoPauseContext;\n    const onSubtitlesSelectedRef = useRef<(subtitles: SubtitleModel[]) => void>();\n    onSubtitlesSelectedRef.current = onSubtitlesSelected;\n\n    // This effect should be scheduled only once as re-scheduling seems to cause performance issues.\n    // Therefore all of the state it operates on is contained in refs.\n    useEffect(() => {\n        const update = () => {\n            const subtitleRefs = subtitleRefsRef.current;\n            const clock = clockRef.current;\n            const currentSubtitleIndexes: { [index: number]: boolean } = {};\n            const timestamp = clock.time(lengthRef.current);\n\n            let slice = subtitleCollectionRef.current.subtitlesAt(timestamp);\n            const showing = slice.showing.length === 0 ? slice.lastShown ?? [] : slice.showing;\n            let smallestIndex: number | undefined;\n\n            for (const s of showing) {\n                currentSubtitleIndexes[s.index] = true;\n\n                if (smallestIndex === undefined || s.index < smallestIndex) {\n                    smallestIndex = s.index;\n                }\n            }\n\n            if (!keysAreEqual(currentSubtitleIndexes, selectedSubtitleIndexesRef.current)) {\n                selectedSubtitleIndexesRef.current = currentSubtitleIndexes;\n                setSelectedSubtitleIndexes(currentSubtitleIndexes);\n                onSubtitlesSelectedRef.current?.(showing);\n\n                if (smallestIndex !== undefined) {\n                    const scrollToSubtitleRef = subtitleRefs[smallestIndex];\n                    const allowScroll = !hiddenRef.current && Date.now() - lastScrollTimestampRef.current > 5000;\n\n                    if (scrollToSubtitleRef?.current && allowScroll) {\n                        scrollToSubtitleRef.current.scrollIntoView({\n                            block: 'center',\n                            inline: 'nearest',\n                            behavior: 'smooth',\n                        });\n                    }\n                }\n            }\n\n            if (slice.startedShowing !== undefined) {\n                autoPauseContextRef.current?.startedShowing(slice.startedShowing);\n            }\n\n            if (slice.willStopShowing !== undefined) {\n                autoPauseContextRef.current?.willStopShowing(slice.willStopShowing);\n            }\n\n            requestAnimationRef.current = requestAnimationFrame(update);\n        };\n\n        requestAnimationRef.current = requestAnimationFrame(update);\n\n        return () => {\n            if (requestAnimationRef.current !== undefined) {\n                cancelAnimationFrame(requestAnimationRef.current);\n            }\n        };\n    }, []);\n\n    const scrollToCurrentSubtitle = useCallback(() => {\n        const selectedSubtitleIndexes = selectedSubtitleIndexesRef.current;\n\n        if (!selectedSubtitleIndexes) {\n            return;\n        }\n\n        const indexes = Object.keys(selectedSubtitleIndexes);\n\n        if (indexes.length === 0) {\n            return;\n        }\n\n        const scrollToSubtitleRef = subtitleRefs[Number(indexes[0])];\n\n        scrollToSubtitleRef?.current?.scrollIntoView({\n            block: 'center',\n            inline: 'nearest',\n            behavior: 'smooth',\n        });\n    }, [subtitleRefs]);\n\n    useEffect(() => {\n        if (hidden) {\n            return;\n        }\n\n        function scrollIfVisible() {\n            if (document.visibilityState === 'visible') {\n                scrollToCurrentSubtitle();\n            }\n        }\n\n        document.addEventListener('visibilitychange', scrollIfVisible);\n\n        return () => document.removeEventListener('visibilitychange', scrollIfVisible);\n    }, [hidden, selectedSubtitleIndexes, subtitleRefs, scrollToCurrentSubtitle]);\n\n    useEffect(() => {\n        if (!hidden) {\n            scrollToCurrentSubtitle();\n        }\n    }, [hidden, scrollToCurrentSubtitle]);\n\n    useEffect(() => {\n        if (hiddenRef.current) {\n            return;\n        }\n\n        const subtitleRefs = subtitleRefsRef.current;\n\n        if (!subtitleRefs || subtitleRefs.length === 0) {\n            return;\n        }\n\n        const firstSubtitleRef = subtitleRefs[0];\n        firstSubtitleRef?.current?.scrollIntoView({\n            block: 'center',\n            inline: 'nearest',\n            behavior: 'smooth',\n        });\n    }, [lastJumpToTopTimestamp]);\n\n    useEffect(() => {\n        return keyBinder.bindAdjustOffset(\n            (event, offset) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onOffsetChange(offset);\n            },\n            () => disableKeyEvents,\n            () => subtitles\n        );\n    }, [keyBinder, onOffsetChange, disableKeyEvents, subtitles]);\n\n\n    useEffect(() => {\n        return keyBinder.bindResetOffet(\n            (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onOffsetChange(0);\n            },\n            () => disableKeyEvents,\n        );\n    }, [keyBinder, onOffsetChange, disableKeyEvents]);\n\n    useEffect(() => {\n        return keyBinder.bindOffsetToSubtitle(\n            (event, offset) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onOffsetChange(offset);\n            },\n            () => disableKeyEvents,\n            () => clock.time(length),\n            () => subtitles\n        );\n    }, [keyBinder, onOffsetChange, disableKeyEvents, clock, subtitles, length]);\n\n    useEffect(() => {\n        return keyBinder.bindSeekToSubtitle(\n            (event, subtitle) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onSeek(subtitle.start, playingRef.current ?? false);\n            },\n            () => disableKeyEvents,\n            () => clock.time(length),\n            () => subtitles\n        );\n    }, [keyBinder, onSeek, subtitles, disableKeyEvents, clock, length]);\n\n    useEffect(() => {\n        return keyBinder.bindSeekToBeginningOfCurrentSubtitle(\n            (event, subtitle) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onSeek(subtitle.start, playingRef.current ?? false);\n            },\n            () => disableKeyEvents,\n            () => clock.time(length),\n            () => subtitles\n        );\n    }, [keyBinder, onSeek, subtitles, disableKeyEvents, clock, length]);\n\n    useEffect(() => {\n        return keyBinder.bindSeekBackwardOrForward(\n            (event, forward) => {\n                event.stopPropagation();\n                event.preventDefault();\n                if (forward) {\n                    onSeek(Math.min(length, clock.time(length) + 10000), playingRef.current ?? false);\n                } else {\n                    onSeek(Math.max(0, clock.time(length) - 10000), playingRef.current ?? false);\n                }\n            },\n            () => disableKeyEvents\n        );\n    }, [keyBinder, clock, length, disableKeyEvents, onSeek]);\n\n    useEffect(() => {\n        function handleScroll() {\n            lastScrollTimestampRef.current = Date.now();\n        }\n\n        const table = containerRef.current;\n        table?.addEventListener('wheel', handleScroll);\n\n        return () => table?.removeEventListener('wheel', handleScroll);\n    }, [containerRef, lastScrollTimestampRef]);\n\n    useEffect(() => {\n        if (hidden) {\n            return;\n        }\n\n        if (!jumpToSubtitle || !subtitles) {\n            return;\n        }\n\n        let jumpToIndex = -1;\n        let i = 0;\n\n        for (let s of subtitles) {\n            if (s.originalStart === jumpToSubtitle.originalStart && s.text === jumpToSubtitle.text) {\n                jumpToIndex = i;\n                break;\n            }\n\n            ++i;\n        }\n\n        if (jumpToIndex !== -1) {\n            subtitleRefs[jumpToIndex]?.current?.scrollIntoView({\n                block: 'center',\n                inline: 'nearest',\n                behavior: 'smooth',\n            });\n        }\n    }, [hidden, jumpToSubtitle, subtitles, subtitleRefs]);\n\n    const calculateSurroundingSubtitlesForIndex = useCallback(\n        (index: number) => {\n            if (!selectedSubtitleIndexesRef.current || !subtitles) {\n                return [];\n            }\n\n            return surroundingSubtitles(\n                subtitles,\n                index,\n                settingsProvider.surroundingSubtitlesCountRadius,\n                settingsProvider.surroundingSubtitlesTimeRadius\n            );\n        },\n        [subtitles, settingsProvider.surroundingSubtitlesCountRadius, settingsProvider.surroundingSubtitlesTimeRadius]\n    );\n\n    const calculateSurroundingSubtitles = useCallback(() => {\n        if (!selectedSubtitleIndexesRef.current) {\n            return [];\n        }\n        const index = Math.min(...Object.keys(selectedSubtitleIndexesRef.current).map((i) => Number(i)));\n        return calculateSurroundingSubtitlesForIndex(index);\n    }, [calculateSurroundingSubtitlesForIndex]);\n\n    const calculateCurrentSubtitle = useCallback(() => {\n        const subtitleIndexes = Object.keys(selectedSubtitleIndexesRef.current).map((i) => Number(i));\n\n        if (!subtitles || !subtitleIndexes || subtitleIndexes.length === 0) {\n            return undefined;\n        }\n\n        const index = Math.min(...subtitleIndexes);\n        return subtitles[index];\n    }, [subtitles]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindCopy(\n            (event, subtitle) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onCopy(subtitle, calculateSurroundingSubtitles(), PostMineAction.none, false);\n            },\n            () => disableKeyEventsRef.current ?? false,\n            () => calculateCurrentSubtitle()\n        );\n\n        return () => unbind();\n    }, [keyBinder, calculateCurrentSubtitle, calculateSurroundingSubtitles, onCopy]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindToggleSubtitleTrackInList(\n            (event, track) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onToggleSubtitleTrack(track);\n            },\n            () => disableKeyEvents\n        );\n\n        return () => unbind();\n    }, [keyBinder, disableKeyEvents, onToggleSubtitleTrack]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindAnkiExport(\n            (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n                const subtitleIndexes = Object.keys(selectedSubtitleIndexesRef.current).map((i) => Number(i));\n\n                if (subtitles && subtitleIndexes && subtitleIndexes.length > 0) {\n                    const index = Math.min(...subtitleIndexes);\n                    onCopy(\n                        subtitles[index],\n                        calculateSurroundingSubtitlesForIndex(index),\n                        PostMineAction.showAnkiDialog,\n                        true\n                    );\n                }\n            },\n            () => !subtitles || subtitles.length === 0 || disableKeyEvents\n        );\n\n        return () => unbind();\n    }, [keyBinder, onCopy, disableKeyEvents, subtitles, calculateSurroundingSubtitlesForIndex]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindUpdateLastCard(\n            (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n                const subtitleIndexes = Object.keys(selectedSubtitleIndexesRef.current).map((i) => Number(i));\n\n                if (subtitles && subtitleIndexes && subtitleIndexes.length > 0) {\n                    const index = Math.min(...subtitleIndexes);\n                    onCopy(\n                        subtitles[index],\n                        calculateSurroundingSubtitlesForIndex(index),\n                        PostMineAction.updateLastCard,\n                        true\n                    );\n                }\n            },\n            () => !subtitles || subtitles.length === 0 || disableKeyEvents\n        );\n\n        return () => unbind();\n    }, [keyBinder, onCopy, disableKeyEvents, subtitles, calculateSurroundingSubtitlesForIndex]);\n\n    const handleClick = useCallback(\n        (index: number) => {\n            if (!subtitles) {\n                return;\n            }\n\n            const selectedSubtitleIndexes = selectedSubtitleIndexesRef.current || {};\n            onSeek(subtitles[index].start, !playingRef.current && index in selectedSubtitleIndexes);\n        },\n        [subtitles, onSeek]\n    );\n\n    const handleCopy = useCallback(\n        (e: React.MouseEvent<HTMLButtonElement, MouseEvent>, index: number) => {\n            e.preventDefault();\n            e.stopPropagation();\n\n            if (!subtitles) {\n                return;\n            }\n\n            onCopy(subtitles[index], calculateSurroundingSubtitlesForIndex(index), PostMineAction.none, false);\n        },\n        [subtitles, calculateSurroundingSubtitlesForIndex, onCopy]\n    );\n\n    let subtitleTable = null;\n\n    if (!subtitles || subtitles.length === 0) {\n        if (!loading && displayHelp) {\n            subtitleTable = !loading && displayHelp && (\n                <div className={classes.noSubtitles}>\n                    <Typography variant=\"h6\">{displayHelp}</Typography>\n                </div>\n            );\n        } else if (subtitles && subtitles.length === 0) {\n            subtitleTable = (\n                <div className={classes.noSubtitles}>\n                    <Typography variant=\"h6\">No subtitles</Typography>\n                </div>\n            );\n        }\n    } else {\n        subtitleTable = (\n            <TableContainer className={classes.table}>\n                <Table>\n                    <TableBody>\n                        {subtitles.map((s: SubtitleModel, index: number) => {\n                            const selected = index in selectedSubtitleIndexes;\n\n                            return (\n                                <SubtitleRow\n                                    key={index}\n                                    index={index}\n                                    compressed={compressed}\n                                    selected={selected}\n                                    copyButtonEnabled={copyButtonEnabled}\n                                    disabled={disabledSubtitleTracks[s.track]}\n                                    subtitle={subtitles[index]}\n                                    subtitleRef={subtitleRefs[index]}\n                                    onClickSubtitle={handleClick}\n                                    onCopySubtitle={handleCopy}\n                                />\n                            );\n                        })}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        );\n    }\n\n    return (\n        <Paper square elevation={0} ref={containerRef} className={classes.container}>\n            {subtitleTable}\n        </Paper>\n    );\n}\n","import {\n    AlertMessage,\n    AnkiSettings,\n    AnkiSettingsToVideoMessage,\n    AppBarToggleMessageToVideoMessage,\n    AudioModel,\n    AudioTrackModel,\n    AudioTrackSelectedFromVideoMessage,\n    AudioTrackSelectedToVideoMessage,\n    CopyMessage,\n    CurrentTimeFromVideoMessage,\n    CurrentTimeToVideoMessage,\n    FullscreenToggleMessageToVideoMessage,\n    HideSubtitlePlayerToggleToVideoMessage,\n    ImageModel,\n    MiscSettings,\n    MiscSettingsToVideoMessage,\n    OffsetFromVideoMessage,\n    OffsetToVideoMessage,\n    PauseFromVideoMessage,\n    PlaybackRateFromVideoMessage,\n    PlaybackRateToVideoMessage,\n    PlayFromVideoMessage,\n    PlayMode,\n    PlayModeMessage,\n    PostMineAction,\n    ReadyFromVideoMessage,\n    ReadyStateFromVideoMessage,\n    ReadyToVideoMessage,\n    SubtitleModel,\n    SubtitleSettings,\n    SubtitleSettingsToVideoMessage,\n    SubtitlesToVideoMessage,\n    ToggleSubtitleTrackInListFromVideoMessage,\n} from '@project/common';\nimport { VideoProtocol } from './video-protocol';\n\nexport default class VideoChannel {\n    private readonly protocol: VideoProtocol;\n    private time: number;\n    private isReady: boolean;\n    private readyCallbacks: ((paused: boolean) => void)[];\n    private playCallbacks: ((echo: boolean) => void)[];\n    private pauseCallbacks: ((echo: boolean) => void)[];\n    private audioTrackSelectedCallbacks: ((audioTrack: string) => void)[];\n    private currentTimeCallbacks: ((currentTime: number, echo: boolean) => void)[];\n    private exitCallbacks: (() => void)[];\n    private offsetCallbacks: ((offset: number) => void)[];\n    private playbackRateCallbacks: ((playbackRate: number, echo: boolean) => void)[];\n    private popOutToggleCallbacks: (() => void)[];\n    private copyCallbacks: ((\n        subtitle: SubtitleModel,\n        surroundingSubtitles: SubtitleModel[],\n        audio: AudioModel | undefined,\n        image: ImageModel | undefined,\n        url: string | undefined,\n        postMineAction: PostMineAction,\n        preventDuplicate: boolean,\n        id: string | undefined\n    ) => void)[];\n    private playModeCallbacks: ((mode: PlayMode) => void)[];\n    private hideSubtitlePlayerToggleCallbacks: (() => void)[];\n    private appBarToggleCallbacks: (() => void)[];\n    private fullscreenToggleCallbacks: (() => void)[];\n    private ankiDialogRequestCallbacks: (() => void)[];\n    private toggleSubtitleTrackInListCallbacks: ((track: number) => void)[];\n\n    readyState: number;\n    oncanplay: ((ev: Event) => void) | null = null;\n    audioTracks?: AudioTrackModel[];\n    selectedAudioTrack?: string;\n    duration: number;\n    _playbackRate: number;\n\n    constructor(protocol: VideoProtocol) {\n        this.protocol = protocol;\n        this.time = 0;\n        this.duration = 0;\n        this.isReady = false;\n        this.readyState = 0;\n        this._playbackRate = 1;\n        this.selectedAudioTrack = undefined;\n        this.readyCallbacks = [];\n        this.playCallbacks = [];\n        this.pauseCallbacks = [];\n        this.currentTimeCallbacks = [];\n        this.audioTrackSelectedCallbacks = [];\n        this.exitCallbacks = [];\n        this.offsetCallbacks = [];\n        this.playbackRateCallbacks = [];\n        this.popOutToggleCallbacks = [];\n        this.copyCallbacks = [];\n        this.playModeCallbacks = [];\n        this.hideSubtitlePlayerToggleCallbacks = [];\n        this.appBarToggleCallbacks = [];\n        this.fullscreenToggleCallbacks = [];\n        this.ankiDialogRequestCallbacks = [];\n        this.toggleSubtitleTrackInListCallbacks = [];\n\n        const that = this;\n\n        this.protocol.onMessage = (event) => {\n            switch (event.data.command) {\n                case 'ready':\n                    const readyMessage = event.data as ReadyFromVideoMessage;\n\n                    that.duration = readyMessage.duration;\n                    that.isReady = true;\n                    that.audioTracks = readyMessage.audioTracks;\n                    that.selectedAudioTrack = readyMessage.selectedAudioTrack;\n                    that.readyState = 4;\n                    that.time = readyMessage.currentTime;\n                    this._playbackRate = readyMessage.playbackRate;\n\n                    for (let callback of that.readyCallbacks) {\n                        callback(readyMessage.paused);\n                    }\n                    break;\n                case 'readyState':\n                    const readyStateMessage = event.data as ReadyStateFromVideoMessage;\n\n                    that.readyState = readyStateMessage.value;\n                    if (that.readyState === 4) {\n                        that.oncanplay?.(new Event('canplay'));\n                    }\n                    break;\n                case 'play':\n                    const playMessage = event.data as PlayFromVideoMessage;\n\n                    for (let callback of that.playCallbacks) {\n                        callback(playMessage.echo);\n                    }\n                    break;\n                case 'pause':\n                    const pauseMessage = event.data as PauseFromVideoMessage;\n\n                    for (let callback of that.pauseCallbacks) {\n                        callback(pauseMessage.echo);\n                    }\n                    break;\n                case 'audioTrackSelected':\n                    const audioTrackSelectedMessage = event.data as AudioTrackSelectedFromVideoMessage;\n\n                    for (let callback of that.audioTrackSelectedCallbacks) {\n                        that.selectedAudioTrack = audioTrackSelectedMessage.id;\n                        callback(audioTrackSelectedMessage.id);\n                    }\n                    break;\n                case 'currentTime':\n                    const currentTimeMessage = event.data as CurrentTimeFromVideoMessage;\n\n                    for (let callback of that.currentTimeCallbacks) {\n                        callback(currentTimeMessage.value, currentTimeMessage.echo);\n                    }\n                    break;\n                case 'exit':\n                    for (let callback of that.exitCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'offset':\n                    const offsetMessage = event.data as OffsetFromVideoMessage;\n\n                    for (let callback of that.offsetCallbacks) {\n                        callback(offsetMessage.value);\n                    }\n                    break;\n                case 'playbackRate':\n                    const playbackRateMessage = event.data as PlaybackRateFromVideoMessage;\n\n                    for (const callback of that.playbackRateCallbacks) {\n                        callback(playbackRateMessage.value, playbackRateMessage.echo);\n                    }\n                    break;\n                case 'popOutToggle':\n                    for (let callback of that.popOutToggleCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'copy':\n                    for (let callback of that.copyCallbacks) {\n                        const copyMessage = event.data as CopyMessage;\n\n                        callback(\n                            copyMessage.subtitle,\n                            copyMessage.surroundingSubtitles,\n                            copyMessage.audio,\n                            copyMessage.image,\n                            copyMessage.url,\n                            copyMessage.postMineAction ?? PostMineAction.none,\n                            copyMessage.preventDuplicate ?? false,\n                            copyMessage.id\n                        );\n                    }\n                    break;\n                case 'playMode':\n                    for (let callback of that.playModeCallbacks) {\n                        const playModeMessage = event.data as PlayModeMessage;\n                        callback(playModeMessage.playMode);\n                    }\n                    break;\n                case 'hideSubtitlePlayerToggle':\n                    for (let callback of that.hideSubtitlePlayerToggleCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'appBarToggle':\n                    for (let callback of that.appBarToggleCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'fullscreenToggle':\n                    for (const callback of this.fullscreenToggleCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'sync':\n                    // ignore\n                    break;\n                case 'syncv2':\n                    // ignore\n                    break;\n                case 'ankiDialogRequest':\n                    for (let callback of that.ankiDialogRequestCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'toggleSubtitleTrackInList':\n                    const toggleSubtitleTrackInListMessage = event.data as ToggleSubtitleTrackInListFromVideoMessage;\n\n                    for (const callback of that.toggleSubtitleTrackInListCallbacks) {\n                        callback(toggleSubtitleTrackInListMessage.track);\n                    }\n                    break;\n                default:\n                    console.error('Unrecognized event ' + event.data.command);\n            }\n        };\n    }\n\n    get currentTime() {\n        return this.time;\n    }\n\n    set currentTime(value: number) {\n        this.time = value;\n        this.readyState = 3;\n        const message: CurrentTimeToVideoMessage = { command: 'currentTime', value: this.time };\n        this.protocol.postMessage(message);\n    }\n\n    get playbackRate() {\n        return this._playbackRate;\n    }\n\n\n    set playbackRate(playbackRate: number) {\n        const message: PlaybackRateToVideoMessage = { command: 'playbackRate', value: playbackRate };\n        this.protocol.postMessage(message);\n    }\n\n    onReady(callback: (paused: boolean) => void) {\n        if (this.isReady) {\n            callback(false);\n        }\n        this.readyCallbacks.push(callback);\n    }\n\n    onPlay(callback: (echo: boolean) => void) {\n        this.playCallbacks.push(callback);\n    }\n\n    onPause(callback: (echo: boolean) => void) {\n        this.pauseCallbacks.push(callback);\n    }\n\n    onCurrentTime(callback: (currentTime: number, echo: boolean) => void) {\n        this.currentTimeCallbacks.push(callback);\n    }\n\n    onAudioTrackSelected(callback: (id: string) => void) {\n        this.audioTrackSelectedCallbacks.push(callback);\n    }\n\n    onExit(callback: () => void) {\n        this.exitCallbacks.push(callback);\n    }\n\n    onOffset(callback: (offset: number) => void) {\n        this.offsetCallbacks.push(callback);\n    }\n\n    onPlaybackRate(callback: (playbackRate: number, echo: boolean) => void) {\n        this.playbackRateCallbacks.push(callback);\n    }\n\n    onPopOutToggle(callback: () => void) {\n        this.popOutToggleCallbacks.push(callback);\n    }\n\n    onCopy(\n        callback: (\n            subtitle: SubtitleModel,\n            surroundingSubtitles: SubtitleModel[],\n            audio: AudioModel | undefined,\n            image: ImageModel | undefined,\n            url: string | undefined,\n            postMineAction: PostMineAction,\n            preventDuplicate: boolean,\n            id: string | undefined\n        ) => void\n    ) {\n        this.copyCallbacks.push(callback);\n    }\n\n    onPlayMode(callback: (playMode: PlayMode) => void) {\n        this.playModeCallbacks.push(callback);\n    }\n\n    onHideSubtitlePlayerToggle(callback: () => void) {\n        this.hideSubtitlePlayerToggleCallbacks.push(callback);\n    }\n\n    onAppBarToggle(callback: () => void) {\n        this.appBarToggleCallbacks.push(callback);\n    }\n\n    onFullscreenToggle(callback: () => void) {\n        this.fullscreenToggleCallbacks.push(callback);\n    }\n\n    onAnkiDialogRequest(callback: () => void) {\n        this.ankiDialogRequestCallbacks.push(callback);\n    }\n\n    onToggleSubtitleTrackInList(callback: (track: number) => void) {\n        this.toggleSubtitleTrackInListCallbacks.push(callback);\n    }\n\n    ready(duration: number, videoFileName?: string) {\n        const message: ReadyToVideoMessage = { command: 'ready', duration, videoFileName };\n        this.protocol.postMessage(message);\n    }\n\n    init() {\n        this.protocol.postMessage({ command: 'init' });\n    }\n\n    // Return a promise to implement the analogous HTMLMediaElement method\n    play(): Promise<void> {\n        this.protocol.postMessage({ command: 'play' });\n        return new Promise((resolve, reject) => resolve());\n    }\n\n    pause() {\n        this.protocol.postMessage({ command: 'pause' });\n    }\n\n    audioTrackSelected(id: string) {\n        const message: AudioTrackSelectedToVideoMessage = { command: 'audioTrackSelected', id: id };\n        this.protocol.postMessage(message);\n    }\n\n    subtitles(subtitles: SubtitleModel[], subtitleFileNames: string[]) {\n        this.protocol.postMessage({\n            command: 'subtitles',\n            value: subtitles,\n            name: subtitleFileNames.length > 0 ? subtitleFileNames[0] : null,\n            names: subtitleFileNames,\n        } as SubtitlesToVideoMessage);\n    }\n\n    offset(offset: number) {\n        const message: OffsetToVideoMessage = { command: 'offset', value: offset };\n        this.protocol.postMessage(message);\n    }\n\n    subtitleSettings(settings: SubtitleSettings) {\n        const message: SubtitleSettingsToVideoMessage = { command: 'subtitleSettings', value: settings };\n        this.protocol.postMessage(message);\n    }\n\n    playMode(playMode: PlayMode) {\n        const message: PlayModeMessage = {\n            command: 'playMode',\n            playMode: playMode,\n        };\n        this.protocol.postMessage(message);\n    }\n\n    hideSubtitlePlayerToggle(hidden: boolean) {\n        const message: HideSubtitlePlayerToggleToVideoMessage = {\n            command: 'hideSubtitlePlayerToggle',\n            value: hidden,\n        };\n        this.protocol.postMessage(message);\n    }\n\n    appBarToggle(hidden: boolean) {\n        const message: AppBarToggleMessageToVideoMessage = {\n            command: 'appBarToggle',\n            value: hidden,\n        };\n        this.protocol.postMessage(message);\n    }\n\n    fullscreenToggle(fullscreen: boolean) {\n        const message: FullscreenToggleMessageToVideoMessage = {\n            command: 'fullscreenToggle',\n            value: fullscreen,\n        };\n        this.protocol.postMessage(message);\n    }\n\n    ankiSettings(settings: AnkiSettings) {\n        const message: AnkiSettingsToVideoMessage = { command: 'ankiSettings', value: settings };\n        this.protocol.postMessage(message);\n    }\n\n    miscSettings(settings: MiscSettings) {\n        const message: MiscSettingsToVideoMessage = { command: 'miscSettings', value: settings };\n        this.protocol.postMessage(message);\n    }\n\n    alert(message: string, severity: string) {\n        const msg: AlertMessage = { command: 'alert', message, severity };\n        this.protocol.postMessage(msg);\n    }\n\n    close() {\n        this.protocol.postMessage({ command: 'close' });\n        this.protocol.close();\n        this.readyCallbacks = [];\n        this.playCallbacks = [];\n        this.pauseCallbacks = [];\n        this.currentTimeCallbacks = [];\n        this.audioTrackSelectedCallbacks = [];\n        this.exitCallbacks = [];\n        this.offsetCallbacks = [];\n        this.playbackRateCallbacks = [];\n        this.popOutToggleCallbacks = [];\n        this.copyCallbacks = [];\n        this.playModeCallbacks = [];\n        this.hideSubtitlePlayerToggleCallbacks = [];\n        this.appBarToggleCallbacks = [];\n        this.fullscreenToggleCallbacks = [];\n        this.ankiDialogRequestCallbacks = [];\n        this.toggleSubtitleTrackInListCallbacks = [];\n    }\n}\n","import React, { useEffect, useState, useMemo, useCallback, useRef, MutableRefObject } from 'react';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport { v4 as uuidv4 } from 'uuid';\nimport {\n    AsbplayerSettingsProvider,\n    AudioModel,\n    AudioTrackModel,\n    AutoPauseContext,\n    AutoPausePreference,\n    ImageModel,\n    KeyBinder,\n    mockSurroundingSubtitles,\n    PlayMode,\n    PostMineAction,\n    SubtitleCollection,\n    SubtitleModel,\n    VideoTabModel,\n} from '@project/common';\nimport { timeDurationDisplay } from '../services/util';\nimport BroadcastChannelVideoProtocol from '../services/broadcast-channel-video-protocol';\nimport ChromeTabVideoProtocol from '../services/chrome-tab-video-protocol';\nimport Clock from '../services/clock';\nimport Controls, { Point } from './Controls';\nimport Grid from '@material-ui/core/Grid';\nimport MediaAdapter, { MediaElement } from '../services/media-adapter';\nimport SubtitlePlayer, { DisplaySubtitleModel } from './SubtitlePlayer';\nimport VideoChannel from '../services/video-channel';\nimport ChromeExtension from '../services/chrome-extension';\nimport SubtitleReader from '../services/subtitle-reader';\nimport PlaybackPreferences from '../services/playback-preferences';\nimport lte from 'semver/functions/lte';\nimport gte from 'semver/functions/gte';\n\ninterface StylesProps {\n    appBarHidden: boolean;\n}\n\nconst useStyles = makeStyles<Theme, StylesProps>({\n    root: ({ appBarHidden }) => ({\n        height: appBarHidden ? '100vh' : 'calc(100vh - 64px)',\n        position: 'relative',\n        overflowX: 'hidden',\n    }),\n    container: {\n        width: '100%',\n        height: '100%',\n    },\n    videoFrame: {\n        width: '100%',\n        height: '100%',\n        border: 0,\n        display: 'block',\n    },\n});\n\nfunction trackLength(\n    audioRef: MutableRefObject<HTMLAudioElement | null>,\n    videoRef: MutableRefObject<MediaElement | undefined>,\n    subtitles: SubtitleModel[] | undefined,\n    useOffset?: boolean\n) {\n    let subtitlesLength;\n    if (subtitles && subtitles.length > 0) {\n        if (useOffset) {\n            subtitlesLength = subtitles[subtitles.length - 1].end;\n        } else {\n            subtitlesLength = subtitles[subtitles.length - 1].originalEnd;\n        }\n    } else {\n        subtitlesLength = 0;\n    }\n\n    const audioLength = audioRef.current && audioRef.current.duration ? 1000 * audioRef.current.duration : 0;\n\n    const videoLength = videoRef.current && videoRef.current.duration ? 1000 * videoRef.current.duration : 0;\n\n    return Math.max(videoLength, Math.max(subtitlesLength, audioLength));\n}\n\nexport interface MediaSources {\n    subtitleFiles: File[];\n    flattenSubtitleFiles?: boolean;\n    audioFile?: File;\n    audioFileUrl?: string;\n    videoFile?: File;\n    videoFileUrl?: string;\n}\n\nexport interface AnkiDialogFinishedRequest {\n    resume: boolean;\n    timestamp: number;\n}\n\ninterface PlayerProps {\n    sources: MediaSources;\n    subtitleReader: SubtitleReader;\n    settingsProvider: AsbplayerSettingsProvider;\n    playbackPreferences: PlaybackPreferences;\n    keyBinder: KeyBinder;\n    extension: ChromeExtension;\n    videoFrameRef: MutableRefObject<HTMLIFrameElement | null>;\n    videoChannelRef: MutableRefObject<VideoChannel | null>;\n    drawerOpen: boolean;\n    appBarHidden: boolean;\n    videoFullscreen: boolean;\n    hideSubtitlePlayer: boolean;\n    videoPopOut: boolean;\n    tab?: VideoTabModel;\n    availableTabs: VideoTabModel[];\n    ankiDialogRequested: boolean;\n    ankiDialogFinishedRequest: AnkiDialogFinishedRequest;\n    onError: (error: string) => void;\n    onUnloadAudio: (url: string) => void;\n    onUnloadVideo: (url: string) => void;\n    onCopy: (\n        subtitle: SubtitleModel,\n        surroundingSubtitles: SubtitleModel[],\n        audioFile: File | undefined,\n        videoFile: File | undefined,\n        subtitleFile: File | undefined,\n        mediaTimestamp: number | undefined,\n        audioTrack: string | undefined,\n        filePlaybackRate: number | undefined,\n        audio: AudioModel | undefined,\n        image: ImageModel | undefined,\n        url: string | undefined,\n        postMineAction: PostMineAction | undefined,\n        preventDuplicate: boolean | undefined,\n        id: string | undefined\n    ) => void;\n    onLoaded: () => void;\n    onTabSelected: (tab: VideoTabModel) => void;\n    onAnkiDialogRequest: () => void;\n    onAppBarToggle: () => void;\n    onFullscreenToggle: () => void;\n    onHideSubtitlePlayer: () => void;\n    onVideoPopOut: () => void;\n    onPlayModeChangedViaBind: (oldPlayMode: PlayMode, newPlayMode: PlayMode) => void;\n    disableKeyEvents: boolean;\n    jumpToSubtitle?: SubtitleModel;\n    rewindSubtitle?: SubtitleModel;\n}\n\nexport default function Player({\n    sources: { subtitleFiles, flattenSubtitleFiles, audioFile, audioFileUrl, videoFile, videoFileUrl },\n    subtitleReader,\n    settingsProvider,\n    playbackPreferences,\n    keyBinder,\n    extension,\n    videoFrameRef,\n    videoChannelRef,\n    drawerOpen,\n    appBarHidden,\n    videoFullscreen,\n    hideSubtitlePlayer,\n    videoPopOut,\n    tab,\n    availableTabs,\n    ankiDialogRequested,\n    ankiDialogFinishedRequest,\n    onError,\n    onUnloadAudio,\n    onUnloadVideo,\n    onCopy,\n    onLoaded,\n    onTabSelected,\n    onAnkiDialogRequest,\n    onAppBarToggle,\n    onFullscreenToggle,\n    onHideSubtitlePlayer,\n    onVideoPopOut,\n    onPlayModeChangedViaBind,\n    disableKeyEvents,\n    jumpToSubtitle,\n    rewindSubtitle,\n}: PlayerProps) {\n    const [playMode, setPlayMode] = useState<PlayMode>(PlayMode.normal);\n    const playModeRef = useRef<PlayMode>();\n    playModeRef.current = playMode;\n    const [subtitles, setSubtitles] = useState<DisplaySubtitleModel[]>();\n    const subtitleCollection = useMemo<SubtitleCollection<DisplaySubtitleModel>>(\n        () =>\n            new SubtitleCollection(subtitles ?? [], {\n                returnLastShown: true,\n                returnNextToShow: playMode === PlayMode.condensed,\n                showingCheckRadiusMs: 100,\n            }),\n        [subtitles, playMode]\n    );\n    const subtitlesRef = useRef<SubtitleModel[]>();\n    subtitlesRef.current = subtitles;\n    const playModeEnabled = subtitles && subtitles.length > 0 && Boolean(videoFileUrl || audioFileUrl);\n    const [loadingSubtitles, setLoadingSubtitles] = useState<boolean>(false);\n    const [playing, setPlaying] = useState<boolean>(false);\n    const [lastJumpToTopTimestamp, setLastJumpToTopTimestamp] = useState<number>(0);\n    const [offset, setOffset] = useState<number>(0);\n    const [playbackRate, setPlaybackRate] = useState<number>(1);\n    const playingRef = useRef<boolean>();\n    playingRef.current = playing;\n    const [, updateState] = useState<any>();\n    const [audioTracks, setAudioTracks] = useState<AudioTrackModel[]>();\n    const [selectedAudioTrack, setSelectedAudioTrack] = useState<string>();\n    const [channelId, setChannelId] = useState<string>();\n    const [, setResumeOnFinishedAnkiDialogRequest] = useState<boolean>(false);\n    const hideSubtitlePlayerRef = useRef<boolean>();\n    hideSubtitlePlayerRef.current = hideSubtitlePlayer;\n    const [disabledSubtitleTracks, setDisabledSubtitleTracks] = useState<{ [track: number]: boolean }>({});\n    const forceUpdate = useCallback(() => updateState({}), []);\n    const mousePositionRef = useRef<Point>({ x: 0, y: 0 });\n    const audioRef = useRef<HTMLAudioElement>(null);\n    const videoRef = useRef<MediaElement>();\n    const mediaAdapter = useMemo(() => {\n        if (audioFileUrl) {\n            return new MediaAdapter(audioRef);\n        } else if (videoFileUrl || tab) {\n            return new MediaAdapter(videoRef);\n        }\n\n        return new MediaAdapter({ current: null });\n    }, [audioFileUrl, videoFileUrl, tab]);\n    const clock = useMemo<Clock>(() => new Clock(), []);\n    const classes = useStyles({ appBarHidden });\n    const lengthRef = useRef<number>(0);\n    lengthRef.current = trackLength(audioRef, videoRef, subtitles, true);\n\n    const handleOnStartedShowingSubtitle = useCallback(() => {\n        if (\n            playMode !== PlayMode.autoPause ||\n            settingsProvider.autoPausePreference !== AutoPausePreference.atStart ||\n            videoFileUrl // Let VideoPlayer do the auto-pausing\n        ) {\n            return;\n        }\n\n        pause(clock, mediaAdapter, true);\n    }, [playMode, clock, mediaAdapter, videoFileUrl, settingsProvider]);\n\n    const handleOnWillStopShowingSubtitle = useCallback(() => {\n        if (\n            playMode !== PlayMode.autoPause ||\n            settingsProvider.autoPausePreference !== AutoPausePreference.atEnd ||\n            videoFileUrl // Let VideoPlayer do the auto-pausing\n        ) {\n            return;\n        }\n\n        pause(clock, mediaAdapter, true);\n    }, [playMode, clock, mediaAdapter, videoFileUrl, settingsProvider]);\n\n    const autoPauseContext = useMemo(() => {\n        const context = new AutoPauseContext();\n        context.onStartedShowing = handleOnStartedShowingSubtitle;\n        context.onWillStopShowing = handleOnWillStopShowingSubtitle;\n        return context;\n    }, [handleOnStartedShowingSubtitle, handleOnWillStopShowingSubtitle]);\n    const autoPauseContextRef = useRef<AutoPauseContext>();\n    autoPauseContextRef.current = autoPauseContext;\n\n    const seek = useCallback(\n        async (time: number, clock: Clock, forwardToMedia: boolean) => {\n            clock.setTime(time);\n            forceUpdate();\n\n            if (forwardToMedia) {\n                await mediaAdapter.seek(time / 1000);\n            }\n\n            autoPauseContextRef.current?.clear();\n        },\n        [forceUpdate, mediaAdapter]\n    );\n\n    const updatePlaybackRate = useCallback(\n        (playbackRate: number, forwardToMedia: boolean) => {\n            clock.rate = playbackRate;\n            setPlaybackRate(playbackRate);\n\n            if (forwardToMedia) {\n                mediaAdapter.playbackRate(playbackRate);\n            }\n        },\n        [clock, mediaAdapter]\n    );\n\n    const applyOffset = useCallback(\n        (offset: number, forwardToVideo: boolean) => {\n            setOffset(offset);\n            setSubtitles((subtitles) => {\n                if (!subtitles) {\n                    return;\n                }\n\n                const length = subtitles.length > 0 ? subtitles[subtitles.length - 1].end + offset : 0;\n\n                const newSubtitles = subtitles.map((s, i) => ({\n                    text: s.text,\n                    textImage: s.textImage,\n                    start: s.originalStart + offset,\n                    originalStart: s.originalStart,\n                    end: s.originalEnd + offset,\n                    originalEnd: s.originalEnd,\n                    displayTime: timeDurationDisplay(s.originalStart + offset, length),\n                    track: s.track,\n                    index: i,\n                }));\n\n                if (forwardToVideo) {\n                    if (videoRef.current instanceof VideoChannel) {\n                        videoRef.current.offset(offset);\n\n                        // Older versions of extension don't support the offset message\n                        if (tab !== undefined && extension.installed && lte(extension.version, '0.22.0')) {\n                            videoRef.current.subtitles(\n                                newSubtitles,\n                                subtitleFiles.map((f) => f.name)\n                            );\n                        }\n                    }\n                }\n\n                return newSubtitles;\n            });\n            playbackPreferences.offset = offset;\n        },\n        [subtitleFiles, extension, playbackPreferences, tab]\n    );\n\n    useEffect(() => {\n        let channel: VideoChannel | undefined = undefined;\n        let channelClosed = false;\n\n        async function init() {\n            if (videoRef.current instanceof VideoChannel) {\n                videoRef.current.close();\n            }\n            videoRef.current = undefined;\n            videoChannelRef.current = null;\n            clock.setTime(0);\n            clock.stop();\n            const offset = playbackPreferences.offset;\n            setOffset(offset);\n            setPlaying(false);\n            setAudioTracks(undefined);\n            setSelectedAudioTrack(undefined);\n            setPlayMode(PlayMode.normal);\n\n            if (audioRef.current) {\n                audioRef.current.currentTime = 0;\n                audioRef.current.pause();\n            }\n\n            let subtitles: DisplaySubtitleModel[] | undefined;\n\n            if (subtitleFiles.length > 0) {\n                setLoadingSubtitles(true);\n\n                try {\n                    const nodes = await subtitleReader.subtitles(subtitleFiles, flattenSubtitleFiles);\n                    const length = nodes.length > 0 ? nodes[nodes.length - 1].end + offset : 0;\n\n                    subtitles = nodes.map((s, i) => ({\n                        text: s.text,\n                        textImage: s.textImage,\n                        start: s.start + offset,\n                        originalStart: s.start,\n                        end: s.end + offset,\n                        originalEnd: s.end,\n                        displayTime: timeDurationDisplay(s.start + offset, length),\n                        track: s.track,\n                        index: i,\n                    }));\n\n                    setSubtitles(subtitles);\n                    setLastJumpToTopTimestamp(Date.now());\n                } catch (e) {\n                    if (e instanceof Error) {\n                        onError(e.message);\n                    } else {\n                        onError(String(e));\n                    }\n\n                    setSubtitles([]);\n                } finally {\n                    setLoadingSubtitles(false);\n                }\n            } else {\n                subtitles = undefined;\n            }\n\n            if (audioFileUrl) {\n                await mediaAdapter.onReady();\n                forceUpdate();\n            } else if (videoFileUrl || tab) {\n                if (channelClosed) {\n                    return;\n                }\n\n                if (videoFileUrl) {\n                    const channelId = uuidv4();\n                    channel = new VideoChannel(new BroadcastChannelVideoProtocol(channelId));\n                    setChannelId(channelId);\n                } else if (tab) {\n                    channel = new VideoChannel(new ChromeTabVideoProtocol(tab.id, tab.src, extension));\n                    channel.init();\n                } else {\n                    // Not possible\n                    // But throw error so typescript recognizes channel as defined\n                    throw new Error('Unreachable code');\n                }\n\n                videoRef.current = channel;\n                videoChannelRef.current = channel;\n                let subscribed = false;\n\n                channel.onExit(() => videoFileUrl && onUnloadVideo(videoFileUrl));\n                channel.onPopOutToggle(() => onVideoPopOut());\n                channel.onHideSubtitlePlayerToggle(() => {\n                    onHideSubtitlePlayer();\n                });\n                channel.onAppBarToggle(() => {\n                    onAppBarToggle();\n                });\n                channel.onFullscreenToggle(() => {\n                    onFullscreenToggle();\n                });\n                channel.onReady((paused) => {\n                    lengthRef.current = trackLength(audioRef, videoRef, subtitlesRef.current);\n                    channel?.ready(lengthRef.current, videoFile?.name);\n\n                    if (subtitlesRef.current) {\n                        channel?.subtitleSettings(settingsProvider.subtitleSettings);\n                        channel?.subtitles(\n                            subtitlesRef.current,\n                            flattenSubtitleFiles ? [subtitleFiles[0].name] : subtitleFiles.map((f) => f.name)\n                        );\n                    }\n\n                    channel?.ankiSettings(settingsProvider.ankiSettings);\n                    channel?.miscSettings(settingsProvider.miscSettings);\n                    channel?.playMode(playModeRef.current!);\n                    channel?.hideSubtitlePlayerToggle(hideSubtitlePlayerRef.current ?? false);\n\n                    if (channel?.audioTracks && channel?.audioTracks?.length > 1) {\n                        setAudioTracks(channel?.audioTracks);\n                        setSelectedAudioTrack(channel?.selectedAudioTrack);\n                    } else {\n                        setAudioTracks(undefined);\n                        setSelectedAudioTrack(undefined);\n                    }\n\n                    if (videoRef.current) {\n                        clock.setTime(videoRef.current.currentTime * 1000);\n                    }\n\n                    if (paused) {\n                        clock.stop();\n                    } else {\n                        clock.start();\n                    }\n\n                    setPlaying(!paused);\n\n                    if (channel?.playbackRate) {\n                        clock.rate = channel.playbackRate;\n                        setPlaybackRate(channel.playbackRate);\n                    }\n\n                    if (!subscribed) {\n                        channel?.onPlay((forwardToMedia) => play(clock, mediaAdapter, forwardToMedia));\n                        channel?.onPause((forwardToMedia) => pause(clock, mediaAdapter, forwardToMedia));\n                        channel?.onOffset((offset) => applyOffset(Math.max(-lengthRef.current ?? 0, offset), false));\n                        channel?.onPlaybackRate((playbackRate, forwardToMedia) =>\n                            updatePlaybackRate(playbackRate, forwardToMedia)\n                        );\n                        channel?.onCopy(\n                            (subtitle, surroundingSubtitles, audio, image, url, postMineAction, preventDuplicate, id) =>\n                                onCopy(\n                                    subtitle,\n                                    surroundingSubtitles,\n                                    audioFile,\n                                    videoFile,\n                                    subtitle ? subtitleFiles[subtitle.track] : undefined,\n                                    clock.time(lengthRef.current),\n                                    channel?.selectedAudioTrack,\n                                    channel?.playbackRate,\n                                    audio,\n                                    image,\n                                    url,\n                                    postMineAction,\n                                    preventDuplicate,\n                                    id\n                                )\n                        );\n                        channel?.onPlayMode((playMode) => {\n                            setPlayMode(playMode);\n                            channel?.playMode(playMode);\n                        });\n                        channel?.onCurrentTime(async (currentTime, forwardToMedia) => {\n                            if (playingRef.current) {\n                                clock.stop();\n                            }\n\n                            await seek(currentTime * 1000, clock, forwardToMedia);\n\n                            if (playingRef.current) {\n                                clock.start();\n                            }\n                        });\n                        channel?.onAudioTrackSelected(async (id) => {\n                            if (playingRef.current) {\n                                clock.stop();\n                            }\n\n                            await mediaAdapter.onReady();\n                            if (playingRef.current) {\n                                clock.start();\n                            }\n\n                            setSelectedAudioTrack(id);\n                        });\n                        channel?.onAnkiDialogRequest(() => onAnkiDialogRequest());\n                        channel?.onToggleSubtitleTrackInList((track) =>\n                            setDisabledSubtitleTracks((tracks) => {\n                                const newTracks = { ...tracks };\n                                newTracks[track] = !tracks[track];\n                                return newTracks;\n                            })\n                        );\n\n                        subscribed = true;\n                    }\n                });\n            }\n        }\n\n        init().then(() => onLoaded());\n\n        return () => {\n            channel?.close();\n            channelClosed = true;\n        };\n    }, [\n        subtitleReader,\n        extension,\n        settingsProvider,\n        playbackPreferences,\n        clock,\n        mediaAdapter,\n        seek,\n        onLoaded,\n        onError,\n        onUnloadVideo,\n        onCopy,\n        onAnkiDialogRequest,\n        onHideSubtitlePlayer,\n        onAppBarToggle,\n        onFullscreenToggle,\n        onVideoPopOut,\n        subtitleFiles,\n        audioFile,\n        audioFileUrl,\n        videoFile,\n        videoFileUrl,\n        tab,\n        forceUpdate,\n        videoFrameRef,\n        videoChannelRef,\n        applyOffset,\n        updatePlaybackRate,\n        flattenSubtitleFiles,\n    ]);\n\n    function play(clock: Clock, mediaAdapter: MediaAdapter, forwardToMedia: boolean) {\n        setPlaying(true);\n        clock.start();\n\n        if (forwardToMedia) {\n            mediaAdapter.play();\n        }\n    }\n\n    function pause(clock: Clock, mediaAdapter: MediaAdapter, forwardToMedia: boolean) {\n        setPlaying(false);\n        clock.stop();\n\n        if (forwardToMedia) {\n            mediaAdapter.pause();\n        }\n    }\n\n    useEffect(() => {\n        if (ankiDialogFinishedRequest && ankiDialogFinishedRequest.timestamp > 0) {\n            setResumeOnFinishedAnkiDialogRequest((resumeOnFinishedAnkiDialogRequest) => {\n                if (resumeOnFinishedAnkiDialogRequest && ankiDialogFinishedRequest.resume) {\n                    play(clock, mediaAdapter, true);\n                }\n\n                return false;\n            });\n        }\n    }, [ankiDialogFinishedRequest, clock, mediaAdapter]);\n\n    useEffect(() => {\n        if (ankiDialogRequested && playingRef.current) {\n            pause(clock, mediaAdapter, true);\n            setResumeOnFinishedAnkiDialogRequest(true);\n        }\n    }, [ankiDialogRequested, clock, mediaAdapter]);\n\n    useEffect(() => {\n        if (playMode !== PlayMode.condensed) {\n            return;\n        }\n\n        if (!subtitles || subtitles.length === 0) {\n            return;\n        }\n\n        let seeking = false;\n        let expectedSeekTime = 1000;\n\n        const interval = setInterval(async () => {\n            const length = lengthRef.current;\n\n            if (!length) {\n                return;\n            }\n\n            const timestamp = clock.time(length);\n            const slice = subtitleCollection.subtitlesAt(timestamp);\n\n            if (slice.nextToShow && slice.nextToShow.length > 0) {\n                const nextSubtitle = slice.nextToShow[0];\n\n                if (nextSubtitle.start - timestamp < expectedSeekTime + 500) {\n                    return;\n                }\n\n                if (playingRef.current) {\n                    clock.stop();\n                }\n\n                if (!seeking) {\n                    seeking = true;\n                    const t0 = Date.now();\n                    await seek(nextSubtitle.start, clock, true);\n                    expectedSeekTime = Date.now() - t0;\n                    seeking = false;\n                }\n\n                if (playingRef.current) {\n                    clock.start();\n                }\n            }\n        }, 100);\n\n        return () => clearInterval(interval);\n    }, [subtitles, subtitleCollection, playMode, clock, seek]);\n\n    useEffect(() => {\n        if (videoPopOut && channelId && videoFileUrl) {\n            window.open(\n                process.env.PUBLIC_URL +\n                    '/?video=' +\n                    encodeURIComponent(videoFileUrl) +\n                    '&channel=' +\n                    channelId +\n                    '&popout=true',\n                'asbplayer-video-' + videoFileUrl,\n                'resizable,width=800,height=450'\n            );\n        }\n\n        setLastJumpToTopTimestamp(Date.now());\n    }, [videoPopOut, channelId, videoFileUrl, videoFrameRef]);\n\n    const handlePlay = useCallback(() => play(clock, mediaAdapter, true), [clock, mediaAdapter]);\n    const handlePause = useCallback(() => pause(clock, mediaAdapter, true), [clock, mediaAdapter]);\n    const handleSeek = useCallback(\n        async (progress: number) => {\n            if (!lengthRef.current) {\n                return;\n            }\n\n            if (playingRef.current) {\n                clock.stop();\n            }\n\n            await seek(progress * lengthRef.current, clock, true);\n\n            if (playingRef.current) {\n                clock.start();\n            }\n        },\n        [clock, seek]\n    );\n\n    const handleSeekToSubtitle = useCallback(\n        async (time: number, shouldPlay: boolean) => {\n            if (!shouldPlay) {\n                pause(clock, mediaAdapter, true);\n            }\n\n            await seek(time, clock, true);\n\n            if (shouldPlay && !playingRef.current) {\n                // play method will start the clock again\n                play(clock, mediaAdapter, true);\n            }\n        },\n        [clock, seek, mediaAdapter]\n    );\n\n    const handleCopyFromSubtitlePlayer = useCallback(\n        (\n            subtitle: SubtitleModel,\n            surroundingSubtitles: SubtitleModel[],\n            postMineAction: PostMineAction,\n            preventDuplicate: boolean\n        ) => {\n            onCopy(\n                subtitle,\n                surroundingSubtitles,\n                audioFile,\n                videoFile,\n                subtitleFiles[subtitle.track],\n                clock.time(lengthRef.current),\n                selectedAudioTrack,\n                playbackRate,\n                undefined,\n                undefined,\n                undefined,\n                postMineAction,\n                preventDuplicate,\n                undefined\n            );\n        },\n        [onCopy, clock, audioFile, videoFile, subtitleFiles, selectedAudioTrack, playbackRate]\n    );\n\n    const handleMouseMove = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n        mousePositionRef.current.x = e.screenX;\n        mousePositionRef.current.y = e.screenY;\n    }, []);\n\n    const handleAudioTrackSelected = useCallback(\n        async (id: string) => {\n            if (videoRef.current instanceof VideoChannel) {\n                videoRef.current.audioTrackSelected(id);\n            }\n\n            pause(clock, mediaAdapter, true);\n\n            await seek(0, clock, true);\n\n            if (playingRef.current) {\n                play(clock, mediaAdapter, true);\n            }\n        },\n        [clock, mediaAdapter, seek]\n    );\n\n    const handleOffsetChange = useCallback(\n        (offset: number) => {\n            applyOffset(Math.max(-lengthRef.current ?? 0, offset), true);\n        },\n        [applyOffset]\n    );\n\n    const handleVolumeChange = useCallback((volume: number) => {\n        if (audioRef.current instanceof HTMLMediaElement) {\n            audioRef.current.volume = volume;\n        }\n    }, []);\n\n    const handlePlaybackRateChange = useCallback(\n        (playbackRate: number) => {\n            updatePlaybackRate(playbackRate, true);\n        },\n        [updatePlaybackRate]\n    );\n\n    const handlePlayMode = useCallback((playMode: PlayMode) => setPlayMode(playMode), []);\n\n    const handleToggleSubtitleTrack = useCallback(\n        (track: number) =>\n            setDisabledSubtitleTracks((tracks) => {\n                const newTracks = { ...tracks };\n                newTracks[track] = !tracks[track];\n                return newTracks;\n            }),\n        []\n    );\n\n    const handleSubtitlesSelected = useCallback(\n        (subtitles: SubtitleModel[]) => {\n            if (subtitles.length === 0 || !settingsProvider.autoCopyCurrentSubtitle || !document.hasFocus()) {\n                return;\n            }\n\n            navigator.clipboard.writeText(subtitles.map((s) => s.text).join('\\n')).catch((e) => {\n                // ignore\n            });\n        },\n        [settingsProvider.autoCopyCurrentSubtitle]\n    );\n\n    useEffect(() => {\n        if (tab) {\n            return;\n        }\n\n        const interval = setInterval(async () => {\n            const length = lengthRef.current;\n            const progress = clock.progress(length);\n\n            if (progress >= 1) {\n                pause(clock, mediaAdapter, true);\n                await seek(0, clock, true);\n                setLastJumpToTopTimestamp(Date.now());\n            }\n        }, 1000);\n\n        return () => clearInterval(interval);\n    }, [clock, subtitles, mediaAdapter, seek, tab]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindPlay(\n            (event) => {\n                event.preventDefault();\n\n                if (playing) {\n                    pause(clock, mediaAdapter, true);\n                } else {\n                    play(clock, mediaAdapter, true);\n                }\n            },\n            () => disableKeyEvents\n        );\n\n        return () => unbind();\n    }, [keyBinder, playing, clock, mediaAdapter, disableKeyEvents]);\n\n    useEffect(() => {\n        return keyBinder.bindAdjustPlaybackRate(\n            (event, increase) => {\n                event.preventDefault();\n                if (increase) {\n                    updatePlaybackRate(Math.min(5, playbackRate + 0.1), true);\n                } else {\n                    updatePlaybackRate(Math.max(0.1, playbackRate - 0.1), true);\n                }\n            },\n            () => disableKeyEvents\n        );\n    }, [updatePlaybackRate, playbackRate, disableKeyEvents, keyBinder]);\n\n    const togglePlayMode = useCallback(\n        (event: KeyboardEvent, togglePlayMode: PlayMode) => {\n            if (!playModeEnabled) {\n                return;\n            }\n\n            event.preventDefault();\n            const newPlayMode = playMode === togglePlayMode ? PlayMode.normal : togglePlayMode;\n            setPlayMode(newPlayMode);\n            onPlayModeChangedViaBind(playMode, newPlayMode);\n\n            if (videoRef.current instanceof VideoChannel) {\n                videoRef.current.playMode(newPlayMode);\n            }\n        },\n        [playMode, playModeEnabled, onPlayModeChangedViaBind]\n    );\n\n    useEffect(() => {\n        return keyBinder.bindAutoPause(\n            (event) => togglePlayMode(event, PlayMode.autoPause),\n            () => disableKeyEvents\n        );\n    }, [togglePlayMode, keyBinder, disableKeyEvents]);\n\n    useEffect(() => {\n        return keyBinder.bindCondensedPlayback(\n            (event) => togglePlayMode(event, PlayMode.condensed),\n            () => disableKeyEvents\n        );\n    }, [togglePlayMode, keyBinder, disableKeyEvents]);\n\n    useEffect(() => {\n        if ((audioFile || videoFile) && (!subtitles || subtitles.length === 0)) {\n            const unbindCopy = keyBinder.bindCopy(\n                (event, subtitle) => {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    const surroundingSubtitles = mockSurroundingSubtitles(subtitle, lengthRef.current, 5000);\n                    onCopy(\n                        subtitle,\n                        surroundingSubtitles,\n                        audioFile,\n                        videoFile,\n                        undefined,\n                        clock.time(lengthRef.current),\n                        selectedAudioTrack,\n                        playbackRate,\n                        undefined,\n                        undefined,\n                        undefined,\n                        undefined,\n                        undefined,\n                        undefined\n                    );\n                },\n                () => disableKeyEvents,\n                () => {\n                    if (!lengthRef.current) {\n                        return undefined;\n                    }\n\n                    const timestamp = clock.time(lengthRef.current);\n                    const end = Math.min(timestamp + 5000, lengthRef.current);\n\n                    return {\n                        text: '',\n                        start: timestamp,\n                        originalStart: timestamp,\n                        end: end,\n                        originalEnd: end,\n                        track: 0,\n                    };\n                }\n            );\n\n            const unbindAnkiExport = keyBinder.bindAnkiExport(\n                (event) => {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    const timestamp = clock.time(lengthRef.current);\n                    const end = Math.min(timestamp + 5000, lengthRef.current);\n                    const subtitle = {\n                        text: '',\n                        start: timestamp,\n                        originalStart: timestamp,\n                        end: end,\n                        originalEnd: end,\n                        track: 0,\n                    };\n                    const surroundingSubtitles = mockSurroundingSubtitles(subtitle, lengthRef.current, 5000);\n                    onCopy(\n                        subtitle,\n                        surroundingSubtitles,\n                        audioFile,\n                        videoFile,\n                        undefined,\n                        timestamp,\n                        selectedAudioTrack,\n                        playbackRate,\n                        undefined,\n                        undefined,\n                        undefined,\n                        PostMineAction.showAnkiDialog,\n                        undefined,\n                        undefined\n                    );\n                },\n                () => false\n            );\n\n            return () => {\n                unbindCopy();\n                unbindAnkiExport();\n            };\n        }\n    }, [\n        keyBinder,\n        audioFile,\n        videoFile,\n        subtitles,\n        clock,\n        playbackRate,\n        selectedAudioTrack,\n        disableKeyEvents,\n        onCopy,\n        onAnkiDialogRequest,\n    ]);\n\n    useEffect(() => {\n        if (videoRef.current instanceof VideoChannel) {\n            videoRef.current.appBarToggle(appBarHidden);\n        }\n    }, [appBarHidden]);\n\n    useEffect(() => {\n        if (videoRef.current instanceof VideoChannel) {\n            videoRef.current.hideSubtitlePlayerToggle(hideSubtitlePlayer);\n        }\n    }, [hideSubtitlePlayer]);\n\n    useEffect(() => {\n        if (videoRef.current instanceof VideoChannel) {\n            videoRef.current.fullscreenToggle(videoFullscreen);\n        }\n    }, [videoFullscreen]);\n\n    useEffect(() => {\n        if (!rewindSubtitle) {\n            return;\n        }\n\n        if (playingRef.current) {\n            clock.stop();\n        }\n\n        handleSeekToSubtitle(rewindSubtitle.start, false);\n    }, [clock, rewindSubtitle, handleSeekToSubtitle]);\n\n    const length = lengthRef.current;\n    const loaded = audioFileUrl || videoFileUrl || subtitles;\n    const videoInWindow = Boolean(loaded && videoFileUrl && !videoPopOut);\n\n    return (\n        <div onMouseMove={handleMouseMove} className={classes.root}>\n            <Grid container direction=\"row\" wrap=\"nowrap\" className={classes.container}>\n                {videoInWindow && (\n                    <Grid item style={{ flexGrow: 1, minWidth: 600 }}>\n                        <iframe\n                            ref={videoFrameRef}\n                            className={classes.videoFrame}\n                            src={\n                                process.env.PUBLIC_URL +\n                                '/?video=' +\n                                encodeURIComponent(videoFileUrl!) +\n                                '&channel=' +\n                                channelId +\n                                '&popout=false'\n                            }\n                            title=\"asbplayer\"\n                        />\n                    </Grid>\n                )}\n                {(!videoInWindow || (subtitles && subtitles?.length > 0)) && (\n                    <Grid\n                        item\n                        style={{\n                            flexGrow: videoInWindow ? 0 : 1,\n                            width: videoInWindow && hideSubtitlePlayer ? 0 : 'auto',\n                        }}\n                    >\n                        {loaded && !(videoFileUrl && !videoPopOut) && (\n                            <Controls\n                                mousePositionRef={mousePositionRef}\n                                playing={playing}\n                                clock={clock}\n                                length={length}\n                                displayLength={trackLength(audioRef, videoRef, subtitles, false)}\n                                audioTracks={audioTracks}\n                                selectedAudioTrack={selectedAudioTrack}\n                                tabs={(!videoFileUrl && !audioFileUrl && availableTabs) || undefined}\n                                selectedTab={tab}\n                                audioFile={audioFile?.name}\n                                videoFile={videoFile?.name}\n                                offsetEnabled={true}\n                                offset={offset}\n                                playbackRate={playbackRate}\n                                playbackRateEnabled={!tab || (extension.installed && gte(extension.version, '0.24.0'))}\n                                onPlaybackRateChange={handlePlaybackRateChange}\n                                volumeEnabled={Boolean(audioFileUrl)}\n                                playModeEnabled={playModeEnabled}\n                                playMode={playMode}\n                                onPlay={handlePlay}\n                                onPause={handlePause}\n                                onSeek={handleSeek}\n                                onAudioTrackSelected={handleAudioTrackSelected}\n                                onTabSelected={onTabSelected}\n                                onUnloadAudio={() => audioFileUrl && onUnloadAudio(audioFileUrl)}\n                                onUnloadVideo={() => videoFileUrl && onUnloadVideo(videoFileUrl)}\n                                onOffsetChange={handleOffsetChange}\n                                onVolumeChange={handleVolumeChange}\n                                onPlayMode={handlePlayMode}\n                                disableKeyEvents={disableKeyEvents}\n                                playbackPreferences={playbackPreferences}\n                                showOnMouseMovement={true}\n                            />\n                        )}\n                        <SubtitlePlayer\n                            playing={playing}\n                            subtitles={subtitles}\n                            subtitleCollection={subtitleCollection}\n                            clock={clock}\n                            length={length}\n                            jumpToSubtitle={jumpToSubtitle}\n                            drawerOpen={drawerOpen}\n                            appBarHidden={appBarHidden}\n                            compressed={Boolean(videoFileUrl && !videoPopOut)}\n                            copyButtonEnabled={tab === undefined}\n                            loading={loadingSubtitles}\n                            displayHelp={audioFile?.name || (videoPopOut && videoFile?.name) || undefined}\n                            disableKeyEvents={disableKeyEvents}\n                            lastJumpToTopTimestamp={lastJumpToTopTimestamp}\n                            hidden={videoInWindow && hideSubtitlePlayer}\n                            disabledSubtitleTracks={disabledSubtitleTracks}\n                            onSeek={handleSeekToSubtitle}\n                            onCopy={handleCopyFromSubtitlePlayer}\n                            onOffsetChange={handleOffsetChange}\n                            onToggleSubtitleTrack={handleToggleSubtitleTrack}\n                            onSubtitlesSelected={handleSubtitlesSelected}\n                            autoPauseContext={autoPauseContext}\n                            settingsProvider={settingsProvider}\n                            keyBinder={keyBinder}\n                        />\n                    </Grid>\n                )}\n            </Grid>\n            <audio ref={audioRef} src={audioFileUrl} />\n        </div>\n    );\n}\n","import { useState, useEffect } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\ninterface Props {\n    open: boolean;\n    onProceed: (fieldName: string) => void;\n    onCancel: () => void;\n    existingCustomFieldNames: string[];\n}\n\nexport default function CustomFieldDialog({ open, onProceed, onCancel, existingCustomFieldNames }: Props) {\n    const [fieldName, setFieldName] = useState<string>('');\n\n    useEffect(() => {\n        setFieldName('');\n    }, [open]);\n\n    const fieldExists = [\n        ...existingCustomFieldNames,\n        'Sentence',\n        'Word',\n        'Definition',\n        'Source',\n        'Image',\n        'Audio',\n    ].includes(fieldName);\n\n    return (\n        <Dialog\n            open={open}\n            disableEnforceFocus\n            fullWidth\n            maxWidth=\"xs\"\n            onClose={onCancel}\n        >\n            <DialogTitle>New Custom Field</DialogTitle>\n            <DialogContent>\n                <form>\n                    <TextField\n                        error={fieldExists}\n                        helperText={fieldExists && `Field ${fieldName} already exists`}\n                        variant=\"filled\"\n                        fullWidth\n                        label=\"Field Name\"\n                        value={fieldName}\n                        color=\"secondary\"\n                        onChange={(e) => setFieldName(e.target.value)}\n                    />\n                </form>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={() => onCancel()}>Cancel</Button>\n                <Button disabled={fieldExists || fieldName.trim() === ''} onClick={() => onProceed(fieldName.trim())}>\n                    Create\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n","import React, { useCallback, useState, useEffect, useMemo, ChangeEvent, ReactNode, useRef } from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport { computeStyles } from '../services/util';\nimport Button from '@material-ui/core/Button';\nimport CustomFieldDialog from './CustomFieldDialog';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport EditIcon from '@material-ui/icons/Edit';\nimport InfoIcon from '@material-ui/icons/Info';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Grid from '@material-ui/core/Grid';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Link from '@material-ui/core/Link';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Radio from '@material-ui/core/Radio';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport Select from '@material-ui/core/Select';\nimport TextField from '@material-ui/core/TextField';\nimport { Theme } from '@material-ui/core/styles';\nimport { Anki, AsbplayerSettings, AutoPausePreference, KeyBindSet, KeyBindName } from '@project/common';\nimport { TagsTextField } from '@project/common/components';\nimport hotkeys from 'hotkeys-js';\nimport Typography from '@material-ui/core/Typography';\nimport ChromeExtension from '../services/chrome-extension';\nimport { isMacOs } from 'react-device-detect';\nimport Switch from '@material-ui/core/Switch';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nconst useStyles = makeStyles<Theme>((theme) => ({\n    root: {\n        '& .MuiTextField-root': {\n            marginTop: theme.spacing(1),\n            marginBottom: theme.spacing(1),\n        },\n    },\n    subtitleSetting: {\n        '& .MuiTextField-root': {\n            marginTop: theme.spacing(1),\n            marginBottom: theme.spacing(1),\n        },\n    },\n    subtitlePreview: {\n        backgroundImage: `linear-gradient(45deg, ${theme.palette.action.disabledBackground} 25%, transparent 25%), linear-gradient(-45deg, ${theme.palette.action.disabledBackground} 25%, transparent 25%), linear-gradient(45deg, transparent 75%, ${theme.palette.action.disabledBackground} 75%), linear-gradient(-45deg, transparent 75%,${theme.palette.action.disabledBackground} 75%)`,\n        backgroundSize: '20px 20px',\n        backgroundPosition: '0 0, 0 10px, 10px -10px, -10px 0px',\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n        maxWidth: '100%',\n        padding: 10,\n    },\n    subtitlePreviewInput: {\n        border: 'none',\n        width: '100%',\n        textAlign: 'center',\n        backgroundColor: 'rgba(0,0,0,0)',\n        '&:focus': {\n            outline: 'none',\n        },\n    },\n    addFieldButton: {\n        width: '100%',\n    },\n    switchLabel: {\n        justifyContent: 'space-between',\n        marginLeft: 0,\n    },\n}));\n\nconst useSelectableSettingStyles = makeStyles<Theme>((theme) => ({\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n    },\n    root: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'end',\n        alignItems: 'flex-end',\n    },\n}));\n\nfunction regexIsValid(regex: string) {\n    try {\n        new RegExp(regex.trim());\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\n\ninterface SelectableSettingProps {\n    label: string;\n    value: string;\n    selections?: string[];\n    removable?: boolean;\n    onChange: (event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => void;\n    onSelectionChange: (event: ChangeEvent<{ name?: string | undefined; value: unknown }>, child: ReactNode) => void;\n    onRemoval?: () => void;\n}\n\nfunction SelectableSetting({\n    label,\n    value,\n    selections,\n    removable,\n    onChange,\n    onSelectionChange,\n    onRemoval,\n}: SelectableSettingProps) {\n    const classes = useSelectableSettingStyles();\n\n    return (\n        <div className={classes.root}>\n            <TextField\n                label={label}\n                value={value}\n                onChange={onChange}\n                fullWidth\n                color=\"secondary\"\n                InputProps={{\n                    endAdornment: removable && (\n                        <InputAdornment position=\"end\">\n                            <IconButton onClick={(e) => onRemoval?.()}>\n                                <DeleteIcon />\n                            </IconButton>\n                        </InputAdornment>\n                    ),\n                }}\n            />\n            <FormControl className={classes.formControl}>\n                <InputLabel></InputLabel>\n                <Select value={value} disabled={!selections} color=\"secondary\" onChange={onSelectionChange}>\n                    {selections &&\n                        selections.map((s) => (\n                            <MenuItem key={s} value={s}>\n                                {s}\n                            </MenuItem>\n                        ))}\n                </Select>\n            </FormControl>\n        </div>\n    );\n}\n\ninterface KeyBindProperties {\n    label: string;\n    extensionOverridden: boolean;\n}\n\nconst keyBindProperties: { [key in KeyBindName]: KeyBindProperties } = {\n    copySubtitle: { label: 'Mine current subtitle', extensionOverridden: true },\n    ankiExport: { label: 'Mine current subtitle and open Anki dialog', extensionOverridden: true },\n    updateLastCard: {\n        label: 'Update last-created Anki card with asbplayer-captured screenshot, audio, etc.',\n        extensionOverridden: true,\n    },\n    togglePlay: { label: 'Play/pause', extensionOverridden: false },\n    toggleAutoPause: { label: 'Toggle auto-pause', extensionOverridden: false },\n    toggleCondensedPlayback: { label: 'Toggle condensed playback', extensionOverridden: false },\n    toggleSubtitles: { label: 'Toggle subtitles', extensionOverridden: false },\n    toggleVideoSubtitleTrack1: { label: 'Toggle subtitle track 1 in video', extensionOverridden: false },\n    toggleVideoSubtitleTrack2: { label: 'Toggle subtitle track 2 in video', extensionOverridden: false },\n    toggleAsbplayerSubtitleTrack1: { label: 'Toggle subtitle track 1 in asbplayer', extensionOverridden: false },\n    toggleAsbplayerSubtitleTrack2: { label: 'Toggle subtitle track 2 in asbplayer', extensionOverridden: false },\n    seekBackward: { label: 'Seek backward 10 seconds', extensionOverridden: false },\n    seekForward: { label: 'Seek forward 10 seconds', extensionOverridden: false },\n    seekToPreviousSubtitle: { label: 'Seek to previous subtitle', extensionOverridden: false },\n    seekToNextSubtitle: { label: 'Seek to next subtitle', extensionOverridden: false },\n    seekToBeginningOfCurrentSubtitle: { label: 'Seek to beginning of current subtitle', extensionOverridden: false },\n    adjustOffsetToPreviousSubtitle: {\n        label: 'Adjust subtitle offset so that previous subtitle is at current timestamp',\n        extensionOverridden: false,\n    },\n    adjustOffsetToNextSubtitle: {\n        label: 'Adjust subtitle offset so that next subtitle is at current timestamp',\n        extensionOverridden: false,\n    },\n    increaseOffset: { label: 'Adjust subtitle offset by +100ms', extensionOverridden: false },\n    decreaseOffset: { label: 'Adjust subtitle offset by -100ms', extensionOverridden: false },\n    resetOffset: { label: 'Reset subtitle offset', extensionOverridden: false },\n    increasePlaybackRate: { label: 'Adjust playback rate by +0.1', extensionOverridden: false },\n    decreasePlaybackRate: { label: 'Adjust playback rate by -0.1', extensionOverridden: false },\n};\n\n// hotkeys only returns strings for a Mac while requiring the OS-specific keys for the actual binds\nconst modifierKeyReplacements: { [key: string]: string } = isMacOs\n    ? {}\n    : {\n          '⌃': 'ctrl',\n          '⇧': 'shift',\n          '⌥': 'alt',\n      };\n\nconst modifierKeys = ['⌃', '⇧', '⌥', 'ctrl', 'shift', 'alt', 'option', 'control', 'command', '⌘'];\n\nconst useKeyBindFieldStyles = makeStyles<Theme>((theme) => ({\n    container: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n    },\n    labelItem: {},\n}));\n\ninterface KeyBindFieldProps {\n    label: string;\n    keys: string;\n    extensionOverridden: boolean;\n    onKeysChange: (keys: string) => void;\n    onOpenExtensionShortcuts: () => void;\n}\n\nfunction KeyBindField({ label, keys, extensionOverridden, onKeysChange, onOpenExtensionShortcuts }: KeyBindFieldProps) {\n    const classes = useKeyBindFieldStyles();\n    const [currentKeyString, setCurrentKeyString] = useState<string>(keys);\n    const currentKeyStringRef = useRef<string>();\n    currentKeyStringRef.current = currentKeyString;\n    const onKeysChangeRef = useRef<(keys: string) => void>();\n    onKeysChangeRef.current = onKeysChange;\n    const [editing, setEditing] = useState<boolean>(false);\n\n    useEffect(() => setCurrentKeyString(keys), [keys]);\n\n    const handleEditKeyBinding = useCallback(\n        (event: React.MouseEvent) => {\n            if (event.nativeEvent.detail === 0) {\n                return;\n            }\n\n            if (extensionOverridden) {\n                onOpenExtensionShortcuts();\n                return;\n            }\n\n            setCurrentKeyString('');\n            setEditing(true);\n        },\n        [onOpenExtensionShortcuts, extensionOverridden]\n    );\n\n    const ref = useRef<HTMLButtonElement>(null);\n\n    useEffect(() => {\n        if (!editing) {\n            return;\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (event.type === 'keydown') {\n                // The ts declaration is missing getPressedKeyString()\n                // @ts-ignore\n                const pressed = hotkeys.getPressedKeyString() as string[];\n                setCurrentKeyString(\n                    pressed\n                        .map((key) => {\n                            return modifierKeyReplacements[key] ?? key;\n                        })\n                        .sort((a, b) => {\n                            const isAModifier = modifierKeys.includes(a);\n                            const isBModifier = modifierKeys.includes(b);\n\n                            if (isAModifier && !isBModifier) {\n                                return -1;\n                            }\n\n                            if (!isAModifier && isBModifier) {\n                                return 1;\n                            }\n\n                            return 0;\n                        })\n                        .join('+')\n                );\n            } else if (event.type === 'keyup') {\n                setEditing(false);\n\n                // Need to use refs because hotkeys returns the wrong keys\n                // if the handler is bound/unbound.\n                if (currentKeyStringRef.current) {\n                    onKeysChangeRef.current!(currentKeyStringRef.current);\n                }\n            }\n        };\n\n        hotkeys('*', { keyup: true }, handler);\n        return () => hotkeys.unbind('*', handler);\n    }, [editing]);\n\n    useEffect(() => {\n        const handler = (event: MouseEvent) => {\n            if (editing && !ref.current?.contains(event.target as Node)) {\n                setEditing(false);\n                setCurrentKeyString('');\n                onKeysChange('');\n            }\n        };\n        window.document.addEventListener('click', handler);\n        return () => window.document.removeEventListener('click', handler);\n    }, [editing, onKeysChange]);\n\n    let placeholder: string;\n\n    if (editing) {\n        placeholder = 'Recording';\n    } else if (extensionOverridden) {\n        placeholder = 'Overridden';\n    } else {\n        placeholder = 'Unbound';\n    }\n\n    return (\n        <Grid container className={classes.container} wrap={'nowrap'} spacing={1}>\n            <Grid item className={classes.labelItem} xs={6}>\n                <Typography>{label}</Typography>\n            </Grid>\n            <Grid item xs={6}>\n                <TextField\n                    placeholder={placeholder}\n                    size=\"small\"\n                    contentEditable={false}\n                    disabled={extensionOverridden}\n                    helperText={extensionOverridden ? 'Extension shortcut' : undefined}\n                    value={currentKeyString}\n                    color=\"secondary\"\n                    InputProps={{\n                        endAdornment: (\n                            <InputAdornment position=\"end\">\n                                <IconButton ref={ref} onClick={handleEditKeyBinding}>\n                                    <EditIcon />\n                                </IconButton>\n                            </InputAdornment>\n                        ),\n                    }}\n                />\n            </Grid>\n        </Grid>\n    );\n}\n\ninterface Props {\n    anki: Anki;\n    extension: ChromeExtension;\n    open: boolean;\n    settings: AsbplayerSettings;\n    scrollToId?: string;\n    onClose: (settings: AsbplayerSettings) => void;\n}\n\nexport default function SettingsDialog({ anki, extension, open, settings, scrollToId, onClose }: Props) {\n    const classes = useStyles();\n    const [ankiConnectUrl, setAnkiConnectUrl] = useState<string>(settings.ankiConnectUrl);\n    const [ankiConnectUrlError, setAnkiConnectUrlError] = useState<string>();\n    const [ankiConnectUrlChangeTimestamp, setAnkiConnectUrlChangeTimestamp] = useState<number>(0);\n    const [deck, setDeck] = useState<string>(settings.deck || '');\n    const [deckNames, setDeckNames] = useState<string[]>();\n    const [noteType, setNoteType] = useState<string>(settings.noteType || '');\n    const [modelNames, setModelNames] = useState<string[]>();\n    const [sentenceField, setSentenceField] = useState<string>(settings.sentenceField || '');\n    const [definitionField, setDefinitionField] = useState<string>(settings.definitionField || '');\n    const [audioField, setAudioField] = useState<string>(settings.audioField || '');\n    const [imageField, setImageField] = useState<string>(settings.imageField || '');\n    const [wordField, setWordField] = useState<string>(settings.wordField || '');\n    const [sourceField, setSourceField] = useState<string>(settings.sourceField || '');\n    const [urlField, setUrlField] = useState<string>(settings.urlField || '');\n    const [customFields, setCustomFields] = useState<{ [key: string]: string }>(settings.customAnkiFields);\n    const [tags, setTags] = useState<string[]>(settings.tags);\n    const [preferMp3, setPreferMp3] = useState<boolean>(settings.preferMp3);\n    const [fieldNames, setFieldNames] = useState<string[]>();\n    const [customFieldDialogOpen, setCustomFieldDialogOpen] = useState<boolean>(false);\n    const [audioPaddingStart, setAudioPaddingStart] = useState<number>(settings.audioPaddingStart);\n    const [audioPaddingEnd, setAudioPaddingEnd] = useState<number>(settings.audioPaddingEnd);\n    const [maxImageWidth, setMaxImageWidth] = useState<number>(settings.maxImageWidth);\n    const [maxImageHeight, setMaxImageHeight] = useState<number>(settings.maxImageHeight);\n    const [surroundingSubtitlesCountRadius, setSurroundingSubtitlesCountRadius] = useState<number>(\n        settings.surroundingSubtitlesCountRadius\n    );\n    const [surroundingSubtitlesTimeRadius, setSurroundingSubtitlesTimeRadius] = useState<number>(\n        settings.surroundingSubtitlesTimeRadius\n    );\n    const [subtitleColor, setSubtitleColor] = useState<string>(settings.subtitleColor);\n    const [subtitleSize, setSubtitleSize] = useState<number>(settings.subtitleSize);\n    const [subtitleOutlineColor, setSubtitleOutlineColor] = useState<string>(settings.subtitleOutlineColor);\n    const [subtitleOutlineThickness, setSubtitleOutlineThickness] = useState<number>(settings.subtitleOutlineThickness);\n    const [subtitleBackgroundColor, setSubtitleBackgroundColor] = useState<string>(settings.subtitleBackgroundColor);\n    const [subtitleBackgroundOpacity, setSubtitleBackgroundOpacity] = useState<number>(\n        settings.subtitleBackgroundOpacity\n    );\n    const [subtitleFontFamily, setSubtitleFontFamily] = useState<string>(settings.subtitleFontFamily);\n    const [imageBasedSubtitleScaleFactor, setImageBasedSubtitleScaleFactor] = useState<number>(\n        settings.imageBasedSubtitleScaleFactor\n    );\n    const [subtitlePreview, setSubtitlePreview] = useState<string>(settings.subtitlePreview);\n    const [themeType, setThemeType] = useState<'dark' | 'light'>(settings.themeType);\n    const [copyToClipboardOnMine, setCopyToClipboardOnMine] = useState<boolean>(settings.copyToClipboardOnMine);\n    const [autoPausePreference, setAutoPausePreference] = useState<AutoPausePreference>(settings.autoPausePreference);\n    const [keyBindSet, setKeyBindSet] = useState<KeyBindSet>(settings.keyBindSet);\n    const [rememberSubtitleOffset, setRememberSubtitleOffset] = useState<boolean>(settings.rememberSubtitleOffset);\n    const [miningHistoryStorageLimit, setMiningHistoryStorageLimit] = useState<number>(\n        settings.miningHistoryStorageLimit\n    );\n    const [autoCopyCurrentSubtitle, setAutoCopyCurrentSubtitle] = useState<boolean>(settings.autoCopyCurrentSubtitle);\n    const [subtitleRegexFilter, setSubtitleRegexFilter] = useState<string>(settings.subtitleRegexFilter);\n    const [subtitleRegexFilterTextReplacement, setSubtitleRegexFilterTextReplacement] = useState<string>(\n        settings.subtitleRegexFilterTextReplacement\n    );\n\n    const handleAnkiConnectUrlChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n        setAnkiConnectUrl(e.target.value);\n        setAnkiConnectUrlChangeTimestamp(Date.now());\n    }, []);\n\n    const handleRetryAnkiConnectUrl = useCallback(\n        (e: React.MouseEvent<HTMLButtonElement>) => setAnkiConnectUrlChangeTimestamp(Date.now()),\n        []\n    );\n    const handleDeckChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setDeck(e.target.value),\n        []\n    );\n    const handleDeckSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setDeck(e.target.value as string),\n        []\n    );\n    const handleNoteTypeChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setNoteType(e.target.value),\n        []\n    );\n    const handleNoteTypeSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setNoteType(e.target.value as string),\n        []\n    );\n    const handleSentenceFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSentenceField(e.target.value),\n        []\n    );\n    const handleSentenceFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setSentenceField(e.target.value as string),\n        []\n    );\n    const handleDefinitionFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setDefinitionField(e.target.value),\n        []\n    );\n    const handleDefinitionFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setDefinitionField(e.target.value as string),\n        []\n    );\n    const handleAudioFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setAudioField(e.target.value),\n        []\n    );\n    const handleAudioFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setAudioField(e.target.value as string),\n        []\n    );\n    const handleImageFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setImageField(e.target.value),\n        []\n    );\n    const handleImageFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setImageField(e.target.value as string),\n        []\n    );\n    const handleWordFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setWordField(e.target.value),\n        []\n    );\n    const handleWordFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setWordField(e.target.value as string),\n        []\n    );\n    const handleSourceFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSourceField(e.target.value),\n        []\n    );\n    const handleSourceFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setSourceField(e.target.value as string),\n        []\n    );\n    const handleUrlFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setUrlField(e.target.value),\n        []\n    );\n    const handleUrlFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setUrlField(e.target.value as string),\n        []\n    );\n    const handleAudioPaddingStart = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setAudioPaddingStart(Number(e.target.value)),\n        []\n    );\n    const handleAudioPaddingEnd = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setAudioPaddingEnd(Number(e.target.value)),\n        []\n    );\n    const handleMaxImageWidth = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setMaxImageWidth(Number(e.target.value)),\n        []\n    );\n    const handleMaxImageHeight = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setMaxImageHeight(Number(e.target.value)),\n        []\n    );\n    const handleSurroundingSubtitlesCountRadius = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) =>\n            setSurroundingSubtitlesCountRadius(Number(e.target.value)),\n        []\n    );\n    const handleSurroundingSubtitlesTimeRadius = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) =>\n            setSurroundingSubtitlesTimeRadius(Number(e.target.value)),\n        []\n    );\n    const handleSubtitleColorChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleColor(e.target.value),\n        []\n    );\n    const handleSubtitleSizeChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleSize(Number(e.target.value)),\n        []\n    );\n    const handleSubtitleOutlineColorChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleOutlineColor(e.target.value),\n        []\n    );\n    const handleSubtitleOutlineThicknessChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleOutlineThickness(Number(e.target.value)),\n        []\n    );\n    const handleSubtitleBackgroundColorChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleBackgroundColor(e.target.value),\n        []\n    );\n    const handleSubtitleBackgroundOpacityChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) =>\n            setSubtitleBackgroundOpacity(Number(e.target.value)),\n        []\n    );\n    const handleSubtitleFontFamilyChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleFontFamily(e.target.value),\n        []\n    );\n    const handleSubtitlePreviewChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitlePreview(e.target.value),\n        []\n    );\n    const handleImageBasedSubtitleScaleFactorChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) =>\n            setImageBasedSubtitleScaleFactor(Number(e.target.value)),\n        []\n    );\n    const handleAddCustomField = useCallback((customFieldName: string) => {\n        setCustomFields((oldCustomFields: { [key: string]: string }) => {\n            const newCustomFields: { [key: string]: string } = {};\n            Object.assign(newCustomFields, oldCustomFields);\n            newCustomFields[customFieldName] = '';\n            return newCustomFields;\n        });\n        setCustomFieldDialogOpen(false);\n    }, []);\n    const handleCustomFieldChange = useCallback((customFieldName: string, value: string) => {\n        setCustomFields((oldCustomFields: { [key: string]: string }) => {\n            const newCustomFields: { [key: string]: string } = {};\n            Object.assign(newCustomFields, oldCustomFields);\n            newCustomFields[customFieldName] = value;\n            return newCustomFields;\n        });\n    }, []);\n    const handleCustomFieldRemoval = useCallback(\n        (customFieldName: string) =>\n            setCustomFields((oldCustomFields: { [key: string]: string }) => {\n                const newCustomFields: { [key: string]: string } = {};\n                Object.assign(newCustomFields, oldCustomFields);\n                delete newCustomFields[customFieldName];\n                return newCustomFields;\n            }),\n        []\n    );\n    const handleTagsChange = useCallback((newTags: string[]) => {\n        setTags(newTags);\n    }, []);\n    const handlePreferMp3Change = useCallback((e: ChangeEvent<HTMLInputElement>) => setPreferMp3(e.target.checked), []);\n    const handleThemeTypeChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        if (e.target.value !== 'dark' && e.target.value !== 'light') {\n            throw new Error(`Invalid theme type ${e.target.value}`);\n        }\n\n        setThemeType(e.target.value);\n    }, []);\n    const handleCopyToClipboardOnMine = useCallback(\n        (e: ChangeEvent<HTMLInputElement>) => setCopyToClipboardOnMine(e.target.checked),\n        []\n    );\n    const handleAutoPausePreferenceChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        setAutoPausePreference(Number(e.target.value) as AutoPausePreference);\n    }, []);\n    const handleKeysChange = useCallback((keys: string, keyBindName: KeyBindName) => {\n        setKeyBindSet((keyBindSet) => {\n            const newKeyBindSet = { ...keyBindSet };\n            newKeyBindSet[keyBindName] = { keys };\n            return newKeyBindSet;\n        });\n    }, []);\n    const handleRememberSubtitleOffsetChange = useCallback(\n        (e: ChangeEvent<HTMLInputElement>) => setRememberSubtitleOffset(e.target.checked),\n        []\n    );\n    const handleAutoCopyCurrentSubtitle = useCallback(\n        (e: ChangeEvent<HTMLInputElement>) => setAutoCopyCurrentSubtitle(e.target.checked),\n        []\n    );\n    const handleMiningHistoryStorageLimit = useCallback(\n        (e: ChangeEvent<HTMLInputElement>) => setMiningHistoryStorageLimit(Number(e.target.value)),\n        []\n    );\n    const handleSubtitleRegexFilter = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleRegexFilter(e.target.value.trim()),\n        []\n    );\n    const handleSubtitleRegexFilterTextReplacement = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) =>\n            setSubtitleRegexFilterTextReplacement(e.target.value),\n        []\n    );\n\n    const subtitlePreviewStyles = useMemo(\n        () =>\n            computeStyles({\n                subtitleColor: subtitleColor,\n                subtitleSize: subtitleSize,\n                subtitleOutlineThickness: subtitleOutlineThickness,\n                subtitleOutlineColor: subtitleOutlineColor,\n                subtitleBackgroundOpacity: subtitleBackgroundOpacity,\n                subtitleBackgroundColor: subtitleBackgroundColor,\n                subtitleFontFamily: subtitleFontFamily,\n            }),\n        [\n            subtitleColor,\n            subtitleSize,\n            subtitleOutlineThickness,\n            subtitleOutlineColor,\n            subtitleBackgroundOpacity,\n            subtitleBackgroundColor,\n            subtitleFontFamily,\n        ]\n    );\n\n    useEffect(() => {\n        let canceled = false;\n\n        const timeout = setTimeout(async () => {\n            try {\n                if (canceled) {\n                    return;\n                }\n\n                await anki.requestPermission(ankiConnectUrl);\n                setDeckNames(await anki.deckNames(ankiConnectUrl));\n                setModelNames(await anki.modelNames(ankiConnectUrl));\n                setAnkiConnectUrlError(undefined);\n            } catch (e) {\n                if (canceled) {\n                    return;\n                }\n\n                console.error(e);\n                setDeckNames(undefined);\n                setModelNames(undefined);\n\n                if (e instanceof Error) {\n                    setAnkiConnectUrlError(e.message);\n                } else if (typeof e === 'string') {\n                    setAnkiConnectUrlError(e);\n                } else {\n                    setAnkiConnectUrlError(String(e));\n                }\n            }\n        }, 1000);\n\n        return () => {\n            canceled = true;\n            clearTimeout(timeout);\n        };\n    }, [anki, ankiConnectUrl, ankiConnectUrlChangeTimestamp]);\n\n    useEffect(() => {\n        if (!noteType || ankiConnectUrlError) {\n            return undefined;\n        }\n\n        let canceled = false;\n\n        async function refreshFieldNames() {\n            try {\n                if (canceled) {\n                    return;\n                }\n\n                setFieldNames(['', ...(await anki.modelFieldNames(noteType, ankiConnectUrl))]);\n                setAnkiConnectUrlError(undefined);\n            } catch (e) {\n                if (canceled) {\n                    return;\n                }\n\n                console.error(e);\n                setFieldNames(undefined);\n\n                if (e instanceof Error) {\n                    setAnkiConnectUrlError(e.message);\n                } else if (typeof e === 'string') {\n                    setAnkiConnectUrlError(e);\n                } else {\n                    setAnkiConnectUrlError(String(e));\n                }\n            }\n        }\n\n        refreshFieldNames();\n\n        return () => {\n            canceled = true;\n        };\n    }, [anki, noteType, ankiConnectUrl, ankiConnectUrlError, ankiConnectUrlChangeTimestamp]);\n\n    const handleClose = useCallback(() => {\n        onClose({\n            ankiConnectUrl: ankiConnectUrl,\n            deck: deck,\n            noteType: noteType,\n            sentenceField: sentenceField,\n            definitionField: definitionField,\n            audioField: audioField,\n            imageField: imageField,\n            wordField: wordField,\n            sourceField: sourceField,\n            urlField: urlField,\n            tags: tags.filter((t) => t !== ''),\n            subtitleSize: Number(subtitleSize),\n            subtitleColor: subtitleColor,\n            subtitleOutlineThickness: Number(subtitleOutlineThickness),\n            subtitleOutlineColor: subtitleOutlineColor,\n            subtitleBackgroundColor: subtitleBackgroundColor,\n            subtitleBackgroundOpacity: Number(subtitleBackgroundOpacity),\n            subtitleFontFamily: subtitleFontFamily,\n            subtitlePreview: subtitlePreview,\n            imageBasedSubtitleScaleFactor: imageBasedSubtitleScaleFactor,\n            customAnkiFields: customFields,\n            preferMp3: preferMp3,\n            themeType: themeType,\n            audioPaddingStart: audioPaddingStart,\n            audioPaddingEnd: audioPaddingEnd,\n            maxImageWidth: maxImageWidth,\n            maxImageHeight: maxImageHeight,\n            surroundingSubtitlesCountRadius: surroundingSubtitlesCountRadius,\n            surroundingSubtitlesTimeRadius: surroundingSubtitlesTimeRadius,\n            copyToClipboardOnMine: copyToClipboardOnMine,\n            autoPausePreference: autoPausePreference,\n            keyBindSet: keyBindSet,\n            rememberSubtitleOffset: rememberSubtitleOffset,\n            autoCopyCurrentSubtitle: autoCopyCurrentSubtitle,\n            miningHistoryStorageLimit: miningHistoryStorageLimit,\n            subtitleRegexFilter: subtitleRegexFilter,\n            subtitleRegexFilterTextReplacement: subtitleRegexFilterTextReplacement,\n        });\n    }, [\n        onClose,\n        ankiConnectUrl,\n        deck,\n        noteType,\n        sentenceField,\n        definitionField,\n        audioField,\n        imageField,\n        wordField,\n        sourceField,\n        urlField,\n        customFields,\n        tags,\n        preferMp3,\n        subtitleSize,\n        subtitleColor,\n        subtitleOutlineThickness,\n        subtitleOutlineColor,\n        subtitleBackgroundColor,\n        subtitleBackgroundOpacity,\n        subtitleFontFamily,\n        subtitlePreview,\n        imageBasedSubtitleScaleFactor,\n        themeType,\n        audioPaddingStart,\n        audioPaddingEnd,\n        maxImageWidth,\n        maxImageHeight,\n        surroundingSubtitlesCountRadius,\n        surroundingSubtitlesTimeRadius,\n        copyToClipboardOnMine,\n        autoPausePreference,\n        keyBindSet,\n        rememberSubtitleOffset,\n        autoCopyCurrentSubtitle,\n        miningHistoryStorageLimit,\n        subtitleRegexFilter,\n        subtitleRegexFilterTextReplacement,\n    ]);\n\n    const customFieldInputs = Object.keys(customFields).map((customFieldName) => {\n        return (\n            <SelectableSetting\n                key={customFieldName}\n                label={`${customFieldName} Field`}\n                value={customFields[customFieldName]}\n                selections={fieldNames!}\n                onChange={(e) => handleCustomFieldChange(customFieldName, e.target.value)}\n                onSelectionChange={(e) => handleCustomFieldChange(customFieldName, e.target.value as string)}\n                onRemoval={() => handleCustomFieldRemoval(customFieldName)}\n                removable={true}\n            />\n        );\n    });\n\n    useEffect(() => {\n        if (!scrollToId) {\n            return;\n        }\n\n        setTimeout(() => document.getElementById(scrollToId)?.scrollIntoView({ behavior: 'smooth' }), 0);\n    }, [scrollToId]);\n\n    const validRegex = regexIsValid(subtitleRegexFilter);\n\n    return (\n        <React.Fragment>\n            <CustomFieldDialog\n                open={customFieldDialogOpen}\n                existingCustomFieldNames={Object.keys(customFields)}\n                onProceed={handleAddCustomField}\n                onCancel={() => setCustomFieldDialogOpen(false)}\n            />\n            <Dialog open={open} maxWidth=\"xs\" fullWidth onClose={handleClose}>\n                <DialogTitle>Settings</DialogTitle>\n                <DialogContent>\n                    <Grid container direction=\"column\" spacing={3}>\n                        <Grid item id=\"anki-settings\">\n                            <FormLabel>Anki</FormLabel>\n                            <FormGroup className={classes.root}>\n                                <TextField\n                                    label=\"Anki Connect URL\"\n                                    value={ankiConnectUrl}\n                                    error={Boolean(ankiConnectUrlError)}\n                                    helperText={ankiConnectUrlError}\n                                    color=\"secondary\"\n                                    onChange={handleAnkiConnectUrlChange}\n                                    InputProps={{\n                                        endAdornment: (\n                                            <InputAdornment position=\"end\">\n                                                <IconButton onClick={handleRetryAnkiConnectUrl}>\n                                                    <RefreshIcon />\n                                                </IconButton>\n                                            </InputAdornment>\n                                        ),\n                                    }}\n                                />\n                                <FormHelperText>\n                                    Ensure that {window.location.protocol + '//' + window.location.hostname} is in the\n                                    webCorsOriginList in your AnkiConnect settings as in this{' '}\n                                    <Link\n                                        color=\"secondary\"\n                                        target=\"_blank\"\n                                        rel=\"noreferrer\"\n                                        href=\"https://youtu.be/Mv7fEVb6PHo?t=44\"\n                                    >\n                                        video\n                                    </Link>\n                                    .\n                                </FormHelperText>\n                                <SelectableSetting\n                                    label=\"Deck\"\n                                    value={deck}\n                                    selections={deckNames}\n                                    onChange={handleDeckChange}\n                                    onSelectionChange={handleDeckSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"Note Type\"\n                                    value={noteType}\n                                    selections={modelNames}\n                                    onChange={handleNoteTypeChange}\n                                    onSelectionChange={handleNoteTypeSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"Sentence Field\"\n                                    value={sentenceField}\n                                    selections={fieldNames}\n                                    onChange={handleSentenceFieldChange}\n                                    onSelectionChange={handleSentenceFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"Definition Field\"\n                                    value={definitionField}\n                                    selections={fieldNames}\n                                    onChange={handleDefinitionFieldChange}\n                                    onSelectionChange={handleDefinitionFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"Word Field\"\n                                    value={wordField}\n                                    selections={fieldNames}\n                                    onChange={handleWordFieldChange}\n                                    onSelectionChange={handleWordFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"Audio Field\"\n                                    value={audioField}\n                                    selections={fieldNames}\n                                    onChange={handleAudioFieldChange}\n                                    onSelectionChange={handleAudioFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"Image Field\"\n                                    value={imageField}\n                                    selections={fieldNames}\n                                    onChange={handleImageFieldChange}\n                                    onSelectionChange={handleImageFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"Source Field\"\n                                    value={sourceField}\n                                    selections={fieldNames}\n                                    onChange={handleSourceFieldChange}\n                                    onSelectionChange={handleSourceFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"URL Field\"\n                                    value={urlField}\n                                    selections={fieldNames}\n                                    onChange={handleUrlFieldChange}\n                                    onSelectionChange={handleUrlFieldSelectionChange}\n                                />\n                                {customFieldInputs}\n                                <Button\n                                    className={classes.addFieldButton}\n                                    onClick={(e) => setCustomFieldDialogOpen(true)}\n                                >\n                                    Add Custom Field\n                                </Button>\n                                <TagsTextField\n                                    label=\"Tags\"\n                                    helperText=\"Comma-separated list of strings\"\n                                    fullWidth\n                                    color=\"secondary\"\n                                    tags={tags}\n                                    onTagsChange={handleTagsChange}\n                                />\n                            </FormGroup>\n                        </Grid>\n                        <Grid item id=\"mining-settings\">\n                            <FormLabel>Mining</FormLabel>\n                            <FormGroup className={classes.root}>\n                                <FormControlLabel\n                                    control={<Switch checked={preferMp3} onChange={handlePreferMp3Change} />}\n                                    label=\"Re-encode audio as mp3 (slower)\"\n                                    labelPlacement=\"start\"\n                                    className={classes.switchLabel}\n                                />\n                                <FormControlLabel\n                                    control={\n                                        <Switch\n                                            checked={copyToClipboardOnMine}\n                                            onChange={handleCopyToClipboardOnMine}\n                                        />\n                                    }\n                                    label=\"Copy mined subtitles to clipboard\"\n                                    labelPlacement=\"start\"\n                                    className={classes.switchLabel}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label=\"Audio Padding Start\"\n                                    fullWidth\n                                    value={audioPaddingStart}\n                                    color=\"secondary\"\n                                    onChange={handleAudioPaddingStart}\n                                    inputProps={{\n                                        min: 0,\n                                        step: 1,\n                                    }}\n                                    InputProps={{\n                                        endAdornment: <InputAdornment position=\"end\">ms</InputAdornment>,\n                                    }}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label=\"Audio Padding End\"\n                                    fullWidth\n                                    value={audioPaddingEnd}\n                                    color=\"secondary\"\n                                    onChange={handleAudioPaddingEnd}\n                                    inputProps={{\n                                        min: 0,\n                                        step: 1,\n                                    }}\n                                    InputProps={{\n                                        endAdornment: <InputAdornment position=\"end\">ms</InputAdornment>,\n                                    }}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label=\"Max Image Width\"\n                                    fullWidth\n                                    value={maxImageWidth}\n                                    color=\"secondary\"\n                                    onChange={handleMaxImageWidth}\n                                    inputProps={{\n                                        min: 0,\n                                        step: 1,\n                                    }}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label=\"Max Image Height\"\n                                    fullWidth\n                                    value={maxImageHeight}\n                                    color=\"secondary\"\n                                    onChange={handleMaxImageHeight}\n                                    inputProps={{\n                                        min: 0,\n                                        step: 1,\n                                    }}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label=\"Surrounding Subtitles Count Radius\"\n                                    fullWidth\n                                    value={surroundingSubtitlesCountRadius}\n                                    color=\"secondary\"\n                                    onChange={handleSurroundingSubtitlesCountRadius}\n                                    inputProps={{\n                                        min: 1,\n                                        step: 1,\n                                    }}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label=\"Surrounding Subtitles Time Radius\"\n                                    fullWidth\n                                    value={surroundingSubtitlesTimeRadius}\n                                    color=\"secondary\"\n                                    onChange={handleSurroundingSubtitlesTimeRadius}\n                                    inputProps={{\n                                        min: 0,\n                                        step: 1,\n                                    }}\n                                    InputProps={{\n                                        endAdornment: <InputAdornment position=\"end\">ms</InputAdornment>,\n                                    }}\n                                />\n                            </FormGroup>\n                        </Grid>\n                        <Grid item id=\"misc-settings\">\n                            <FormLabel>Misc</FormLabel>\n                            <FormGroup className={classes.root}>\n                                <FormControlLabel\n                                    control={\n                                        <Switch\n                                            checked={rememberSubtitleOffset}\n                                            onChange={handleRememberSubtitleOffsetChange}\n                                        />\n                                    }\n                                    label=\"Remember subtitle offset\"\n                                    labelPlacement=\"start\"\n                                    className={classes.switchLabel}\n                                />\n                                <FormControlLabel\n                                    control={\n                                        <Switch\n                                            checked={autoCopyCurrentSubtitle}\n                                            onChange={handleAutoCopyCurrentSubtitle}\n                                        />\n                                    }\n                                    label=\"Auto-copy current subtitle to clipboard\"\n                                    labelPlacement=\"start\"\n                                    className={classes.switchLabel}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label=\"Mining history storage limit\"\n                                    fullWidth\n                                    value={miningHistoryStorageLimit}\n                                    color=\"secondary\"\n                                    onChange={handleMiningHistoryStorageLimit}\n                                    inputProps={{\n                                        min: 0,\n                                        step: 1,\n                                    }}\n                                />\n                                <TextField\n                                    label=\"Subtitle Regex Filter\"\n                                    fullWidth\n                                    value={subtitleRegexFilter}\n                                    color=\"secondary\"\n                                    error={!validRegex}\n                                    helperText={validRegex ? undefined : 'Invalid regular expression'}\n                                    onChange={handleSubtitleRegexFilter}\n                                />\n                                <TextField\n                                    label=\"Subtitle Regex Filter Text Replacement\"\n                                    fullWidth\n                                    value={subtitleRegexFilterTextReplacement}\n                                    color=\"secondary\"\n                                    onChange={handleSubtitleRegexFilterTextReplacement}\n                                />\n                            </FormGroup>\n                        </Grid>\n                        <Grid item id=\"auto-pause-settings\">\n                            <Grid container direction=\"row\" spacing={1}>\n                                <Grid item>\n                                    <FormLabel>Auto-pause Preference</FormLabel>\n                                </Grid>\n                                <Grid item>\n                                    <Tooltip\n                                        title=\"Does not enable auto-pause. Sets the preference for when to pause when auto-pause is\n                                    enabled.\"\n                                        placement=\"top\"\n                                    >\n                                        <InfoIcon fontSize=\"small\" />\n                                    </Tooltip>\n                                </Grid>\n                            </Grid>\n                            <RadioGroup row>\n                                <FormControlLabel\n                                    control={\n                                        <Radio\n                                            checked={autoPausePreference === AutoPausePreference.atStart}\n                                            value={AutoPausePreference.atStart}\n                                            onChange={handleAutoPausePreferenceChange}\n                                        />\n                                    }\n                                    label=\"At Subtitle Start\"\n                                />\n                                <FormControlLabel\n                                    control={\n                                        <Radio\n                                            checked={autoPausePreference === AutoPausePreference.atEnd}\n                                            value={AutoPausePreference.atEnd}\n                                            onChange={handleAutoPausePreferenceChange}\n                                        />\n                                    }\n                                    label=\"At Subtitle End\"\n                                />\n                            </RadioGroup>\n                        </Grid>\n                        <Grid item id=\"video-subtitle-appearance\">\n                            <FormLabel>Video Subtitle Appearance</FormLabel>\n                            <FormGroup className={classes.root}>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"color\"\n                                        label=\"Subtitle Color\"\n                                        fullWidth\n                                        value={subtitleColor}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleColorChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"number\"\n                                        label=\"Subtitle Size\"\n                                        fullWidth\n                                        value={subtitleSize}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleSizeChange}\n                                        inputProps={{\n                                            min: 1,\n                                            step: 1,\n                                        }}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"color\"\n                                        label=\"Subtitle Outline Color\"\n                                        fullWidth\n                                        value={subtitleOutlineColor}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleOutlineColorChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"number\"\n                                        label=\"Subtitle Outline Thickness\"\n                                        fullWidth\n                                        value={subtitleOutlineThickness}\n                                        onChange={handleSubtitleOutlineThicknessChange}\n                                        inputProps={{\n                                            min: 0,\n                                            step: 1,\n                                        }}\n                                        color=\"secondary\"\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"color\"\n                                        label=\"Subtitle Background Color\"\n                                        fullWidth\n                                        value={subtitleBackgroundColor}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleBackgroundColorChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"number\"\n                                        label=\"Subtitle Background Opacity\"\n                                        fullWidth\n                                        inputProps={{\n                                            min: 0,\n                                            max: 1,\n                                            step: 0.1,\n                                        }}\n                                        value={subtitleBackgroundOpacity}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleBackgroundOpacityChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"text\"\n                                        label=\"Subtitle Font Family\"\n                                        placeholder=\"Inherited\"\n                                        fullWidth\n                                        value={subtitleFontFamily}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleFontFamilyChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"number\"\n                                        label=\"Image-based Subtitle Scale Factor\"\n                                        placeholder=\"Inherited\"\n                                        fullWidth\n                                        inputProps={{\n                                            min: 0,\n                                            max: 1,\n                                            step: 0.1,\n                                        }}\n                                        value={imageBasedSubtitleScaleFactor}\n                                        color=\"secondary\"\n                                        onChange={handleImageBasedSubtitleScaleFactorChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitlePreview}>\n                                    <input\n                                        value={subtitlePreview}\n                                        className={classes.subtitlePreviewInput}\n                                        onChange={handleSubtitlePreviewChange}\n                                        style={subtitlePreviewStyles}\n                                    />\n                                </div>\n                            </FormGroup>\n                        </Grid>\n                        <Grid item id=\"theme-settings\">\n                            <FormLabel>Theme</FormLabel>\n                            <div>\n                                <FormControlLabel\n                                    control={\n                                        <Radio\n                                            checked={themeType === 'light'}\n                                            value=\"light\"\n                                            onChange={handleThemeTypeChange}\n                                        />\n                                    }\n                                    label=\"Light\"\n                                />\n                                <FormControlLabel\n                                    control={\n                                        <Radio\n                                            checked={themeType === 'dark'}\n                                            value=\"dark\"\n                                            onChange={handleThemeTypeChange}\n                                        />\n                                    }\n                                    label=\"Dark\"\n                                />\n                            </div>\n                        </Grid>\n                        <Grid item id=\"keyboard-shortcuts\">\n                            <FormLabel>Keyboard Shortcuts</FormLabel>\n                            <FormGroup>\n                                {Object.keys(keyBindProperties).map((key) => {\n                                    const keyBindName = key as KeyBindName;\n                                    const properties = keyBindProperties[keyBindName];\n                                    return (\n                                        <KeyBindField\n                                            key={key}\n                                            label={properties.label}\n                                            keys={\n                                                extension.installed && properties.extensionOverridden\n                                                    ? extension.extensionCommands[keyBindName] ?? ''\n                                                    : keyBindSet[keyBindName].keys\n                                            }\n                                            extensionOverridden={extension.installed && properties.extensionOverridden}\n                                            onKeysChange={(keys) => handleKeysChange(keys, keyBindName)}\n                                            onOpenExtensionShortcuts={() => extension.openShortcuts()}\n                                        />\n                                    );\n                                })}\n                            </FormGroup>\n                        </Grid>\n                    </Grid>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose}>OK</Button>\n                </DialogActions>\n            </Dialog>\n        </React.Fragment>\n    );\n}\n","import {\n    AsbplayerSettings,\n    AsbplayerSettingsProvider,\n    AutoPausePreference,\n    KeyBindName,\n    KeyBindSet,\n} from '@project/common';\nimport { isMacOs } from 'react-device-detect';\nimport CachedLocalStorage from './cached-local-storage';\n\nconst defaultAnkiConnectUrl = 'http://127.0.0.1:8765';\nconst defaultSubtitleSize = 36;\nconst defaultSubtitleColor = '#ffffff';\nconst defaultSubtitleOutlineThickness = 0;\nconst defaultSubtitleOutlineColor = '#000000';\nconst defaultSubtitleBackgroundColor = '#000000';\nconst defaultSubtitleBackgroundOpacity = 0.5;\nconst defaultSubtitleFontFamily = '';\nconst defaultSubtitlePreview = 'アあ安';\nconst defaultAudioPaddingStart = 0;\nconst defaultAudioPaddingEnd = 500;\nconst defaultMaxImageWidth = 0;\nconst defaultMaxImageHeight = 0;\nconst defaultSurroundingSubtitlesCountRadius = 2;\nconst defaultSurroundingSubtitlesTimeRadius = 10000;\nconst defaultAutoPausePreference = AutoPausePreference.atEnd;\nconst defaultKeyBindSet: KeyBindSet = {\n    togglePlay: { keys: 'space' },\n    toggleAutoPause: { keys: isMacOs ? '⇧+P' : 'shift+P' },\n    toggleCondensedPlayback: { keys: isMacOs ? '⇧+O' : 'shift+O' },\n    toggleSubtitles: { keys: 'S' },\n    toggleVideoSubtitleTrack1: { keys: '1' },\n    toggleVideoSubtitleTrack2: { keys: '2' },\n    toggleAsbplayerSubtitleTrack1: { keys: 'W+1' },\n    toggleAsbplayerSubtitleTrack2: { keys: 'W+2' },\n    seekBackward: { keys: 'A' },\n    seekForward: { keys: 'D' },\n    seekToPreviousSubtitle: { keys: 'left' },\n    seekToNextSubtitle: { keys: 'right' },\n    seekToBeginningOfCurrentSubtitle: { keys: 'down' },\n    adjustOffsetToPreviousSubtitle: { keys: isMacOs ? '⇧+left' : 'ctrl+left' },\n    adjustOffsetToNextSubtitle: { keys: isMacOs ? '⇧+right' : 'ctrl+right' },\n    decreaseOffset: { keys: isMacOs ? '⇧+⌃+right' : 'ctrl+shift+right' },\n    increaseOffset: { keys: isMacOs ? '⇧+⌃+left' : 'ctrl+shift+left' },\n    resetOffset: { keys: isMacOs ? '⇧+⌃+down' : 'ctrl+shift+down' },\n    copySubtitle: { keys: isMacOs ? '⇧+⌃+Z' : 'ctrl+shift+Z' },\n    ankiExport: { keys: isMacOs ? '⇧+⌃+X' : 'ctrl+shift+X' },\n    updateLastCard: { keys: isMacOs ? '⇧+⌃+U' : 'ctrl+shift+U' },\n    decreasePlaybackRate: { keys: isMacOs ? '⇧+⌃+[' : 'ctrl+shift+[' },\n    increasePlaybackRate: { keys: isMacOs ? '⇧+⌃+]' : 'ctrl+shift+]' },\n};\nconst defaultPreferMp3 = true;\nconst defaultMiningHistoryStorageLimit = 25;\n\nconst ankiConnectUrlKey = 'ankiConnectUrl';\nconst deckKey = 'deck';\nconst noteTypeKey = 'noteType';\nconst sentenceFieldKey = 'sentenceField';\nconst definitionFieldKey = 'definitionField';\nconst audioFieldKey = 'audioField';\nconst imageFieldKey = 'imageField';\nconst wordFieldKey = 'wordField';\nconst sourceFieldKey = 'sourceField';\nconst urlFieldKey = 'urlField';\nconst customAnkiFieldsKey = 'customAnkiFields';\nconst tagsKey = 'tags';\nconst subtitleSizeKey = 'subtitleSize';\nconst subtitleColorKey = 'subtitleColor';\nconst subtitleOutlineThicknessKey = 'subtitleOutlineThickness';\nconst subtitleOutlineColorKey = 'subtitleOutlineColor';\nconst subtitleBackgroundColorKey = 'subtitleBackgroundColor';\nconst subtitleBackgroundOpacityKey = 'subtitleBackgroundOpacity';\nconst subtitleFontFamilyKey = 'subtitleFontFamily';\nconst subtitlePreviewKey = 'subtitlePreview';\nconst imageBasedSubtitleScaleFactorKey = 'imageBasedSubtitleScaleFactor';\nconst audioPaddingStartKey = 'audioPaddingStart';\nconst audioPaddingEndKey = 'audioPaddingEnd';\nconst maxImageWidthKey = 'maxImageWidth';\nconst maxImageHeightKey = 'maxImageHeight';\nconst surroundingSubtitlesCountRadiusKey = 'surroundingSubtitlesCountRadius';\nconst surroundingSubtitlesTimeRadiusKey = 'surroundingSubtitlesTimeRadius';\nconst preferMp3Key = 'preferMp3';\nconst themeTypeKey = 'themeType';\nconst copyToClipboardOnMineKey = 'copyToClipboardOnMine';\nconst autoPausePreferenceKey = 'autoPausePreference';\nconst keyBindSetKey = 'keyBindSet';\nconst rememberSubtitleOffsetKey = 'rememberSubtitleOffset';\nconst autoCopyCurrentSubtitleKey = 'autoCopyCurrentSubtitle';\nconst subtitleRegexFilterKey = 'subtitleRegexFilter';\nconst subtitleRegexFilterTextReplacementKey = 'subtitleRegexFilterTextReplacement';\nconst miningHistoryStorageLimitKey = 'miningHistoryStorageLimit';\n\nexport default class SettingsProvider implements AsbplayerSettingsProvider {\n    private _tags?: string[];\n    private _keyBindSet?: KeyBindSet;\n    private _storage = new CachedLocalStorage();\n\n    constructor() {\n        // Cache for use in useEffect dependencies\n        this._tags = this.tags;\n        this._keyBindSet = this.keyBindSet;\n    }\n\n    get settings(): AsbplayerSettings {\n        return {\n            ankiConnectUrl: this.ankiConnectUrl,\n            deck: this.deck,\n            noteType: this.noteType,\n            sentenceField: this.sentenceField,\n            definitionField: this.definitionField,\n            audioField: this.audioField,\n            imageField: this.imageField,\n            wordField: this.wordField,\n            urlField: this.urlField,\n            customAnkiFields: this.customAnkiFields,\n            tags: this.tags,\n            sourceField: this.sourceField,\n            subtitleSize: this.subtitleSize,\n            subtitleColor: this.subtitleColor,\n            subtitleOutlineThickness: this.subtitleOutlineThickness,\n            subtitleOutlineColor: this.subtitleOutlineColor,\n            subtitleBackgroundColor: this.subtitleBackgroundColor,\n            subtitleBackgroundOpacity: this.subtitleBackgroundOpacity,\n            subtitleFontFamily: this.subtitleFontFamily,\n            subtitlePreview: this.subtitlePreview,\n            imageBasedSubtitleScaleFactor: this.imageBasedSubtitleScaleFactor,\n            preferMp3: this.preferMp3,\n            themeType: this.themeType,\n            audioPaddingStart: this.audioPaddingStart,\n            audioPaddingEnd: this.audioPaddingEnd,\n            maxImageWidth: this.maxImageWidth,\n            maxImageHeight: this.maxImageHeight,\n            surroundingSubtitlesCountRadius: this.surroundingSubtitlesCountRadius,\n            surroundingSubtitlesTimeRadius: this.surroundingSubtitlesTimeRadius,\n            copyToClipboardOnMine: this.copyToClipboardOnMine,\n            autoPausePreference: this.autoPausePreference,\n            keyBindSet: this.keyBindSet,\n            rememberSubtitleOffset: this.rememberSubtitleOffset,\n            autoCopyCurrentSubtitle: this.autoCopyCurrentSubtitle,\n            subtitleRegexFilter: this.subtitleRegexFilter,\n            subtitleRegexFilterTextReplacement: this.subtitleRegexFilterTextReplacement,\n            miningHistoryStorageLimit: this.miningHistoryStorageLimit,\n        };\n    }\n\n    set settings(newSettings: AsbplayerSettings) {\n        this.ankiConnectUrl = newSettings.ankiConnectUrl;\n        this.deck = newSettings.deck;\n        this.noteType = newSettings.noteType;\n        this.sentenceField = newSettings.sentenceField;\n        this.definitionField = newSettings.definitionField;\n        this.audioField = newSettings.audioField;\n        this.imageField = newSettings.imageField;\n        this.wordField = newSettings.wordField;\n        this.sourceField = newSettings.sourceField;\n        this.urlField = newSettings.urlField;\n        this.tags = newSettings.tags;\n        this.subtitleSize = newSettings.subtitleSize;\n        this.subtitleColor = newSettings.subtitleColor;\n        this.subtitleOutlineThickness = newSettings.subtitleOutlineThickness;\n        this.subtitleOutlineColor = newSettings.subtitleOutlineColor;\n        this.subtitleBackgroundColor = newSettings.subtitleBackgroundColor;\n        this.subtitleBackgroundOpacity = newSettings.subtitleBackgroundOpacity;\n        this.subtitleFontFamily = newSettings.subtitleFontFamily;\n        this.subtitlePreview = newSettings.subtitlePreview;\n        this.imageBasedSubtitleScaleFactor = newSettings.imageBasedSubtitleScaleFactor;\n        this.customAnkiFields = newSettings.customAnkiFields;\n        this.preferMp3 = newSettings.preferMp3;\n        this.themeType = newSettings.themeType;\n        this.audioPaddingStart = newSettings.audioPaddingStart;\n        this.audioPaddingEnd = newSettings.audioPaddingEnd;\n        this.maxImageWidth = newSettings.maxImageWidth;\n        this.maxImageHeight = newSettings.maxImageHeight;\n        this.surroundingSubtitlesCountRadius = newSettings.surroundingSubtitlesCountRadius;\n        this.surroundingSubtitlesTimeRadius = newSettings.surroundingSubtitlesTimeRadius;\n        this.copyToClipboardOnMine = newSettings.copyToClipboardOnMine;\n        this.autoPausePreference = newSettings.autoPausePreference;\n        this.keyBindSet = newSettings.keyBindSet;\n        this.rememberSubtitleOffset = newSettings.rememberSubtitleOffset;\n        this.autoCopyCurrentSubtitle = newSettings.autoCopyCurrentSubtitle;\n        this.miningHistoryStorageLimit = newSettings.miningHistoryStorageLimit;\n        this.subtitleRegexFilter = newSettings.subtitleRegexFilter;\n        this.subtitleRegexFilterTextReplacement = newSettings.subtitleRegexFilterTextReplacement;\n    }\n\n    get subtitleSettings() {\n        return {\n            subtitleSize: this.subtitleSize,\n            subtitleColor: this.subtitleColor,\n            subtitleOutlineThickness: this.subtitleOutlineThickness,\n            subtitleOutlineColor: this.subtitleOutlineColor,\n            subtitleBackgroundColor: this.subtitleBackgroundColor,\n            subtitleBackgroundOpacity: this.subtitleBackgroundOpacity,\n            subtitleFontFamily: this.subtitleFontFamily,\n            imageBasedSubtitleScaleFactor: this.imageBasedSubtitleScaleFactor,\n        };\n    }\n\n    get ankiSettings() {\n        return {\n            ankiConnectUrl: this.ankiConnectUrl,\n            deck: this.deck,\n            noteType: this.noteType,\n            sentenceField: this.sentenceField,\n            definitionField: this.definitionField,\n            audioField: this.audioField,\n            imageField: this.imageField,\n            wordField: this.wordField,\n            sourceField: this.sourceField,\n            urlField: this.urlField,\n            customAnkiFields: this.customAnkiFields,\n            tags: this.tags,\n            preferMp3: this.preferMp3,\n            audioPaddingStart: this.audioPaddingStart,\n            audioPaddingEnd: this.audioPaddingEnd,\n            maxImageWidth: this.maxImageWidth,\n            maxImageHeight: this.maxImageHeight,\n            surroundingSubtitlesCountRadius: this.surroundingSubtitlesCountRadius,\n            surroundingSubtitlesTimeRadius: this.surroundingSubtitlesTimeRadius,\n        };\n    }\n\n    get miscSettings() {\n        return {\n            themeType: this.themeType,\n            copyToClipboardOnMine: this.copyToClipboardOnMine,\n            autoPausePreference: this.autoPausePreference,\n            keyBindSet: this.keyBindSet,\n            rememberSubtitleOffset: this.rememberSubtitleOffset,\n            autoCopyCurrentSubtitle: this.autoCopyCurrentSubtitle,\n            subtitleRegexFilter: this.subtitleRegexFilter,\n            subtitleRegexFilterTextReplacement: this.subtitleRegexFilterTextReplacement,\n            miningHistoryStorageLimit: this.miningHistoryStorageLimit,\n        };\n    }\n\n    _getNumberItem(key: string, defaultValue: number) {\n        const value = this._storage.get(key);\n\n        if (value === null) {\n            return defaultValue;\n        }\n\n        return Number(value);\n    }\n\n    _setOptionalItem(key: string, value?: string) {\n        if (typeof value === 'undefined') {\n            this._storage.delete(key);\n        } else {\n            this._storage.set(key, value);\n        }\n    }\n\n    get ankiConnectUrl() {\n        return this._storage.get(ankiConnectUrlKey) || defaultAnkiConnectUrl;\n    }\n\n    set ankiConnectUrl(url) {\n        this._storage.set(ankiConnectUrlKey, url);\n    }\n\n    get deck() {\n        return this._storage.get(deckKey) ?? undefined;\n    }\n\n    set deck(deck) {\n        this._setOptionalItem(deckKey, deck);\n    }\n\n    get noteType() {\n        return this._storage.get(noteTypeKey) ?? undefined;\n    }\n\n    set noteType(noteType) {\n        this._setOptionalItem(noteTypeKey, noteType);\n    }\n\n    get sentenceField() {\n        return this._storage.get(sentenceFieldKey) ?? undefined;\n    }\n\n    set sentenceField(sentenceField) {\n        this._setOptionalItem(sentenceFieldKey, sentenceField);\n    }\n\n    get definitionField() {\n        return this._storage.get(definitionFieldKey) ?? undefined;\n    }\n\n    set definitionField(definitionField) {\n        this._setOptionalItem(definitionFieldKey, definitionField);\n    }\n\n    get audioField() {\n        return this._storage.get(audioFieldKey) ?? undefined;\n    }\n\n    set audioField(audioField) {\n        this._setOptionalItem(audioFieldKey, audioField);\n    }\n\n    get imageField() {\n        return this._storage.get(imageFieldKey) ?? undefined;\n    }\n\n    set imageField(imageField) {\n        this._setOptionalItem(imageFieldKey, imageField);\n    }\n\n    get wordField() {\n        return this._storage.get(wordFieldKey) ?? undefined;\n    }\n\n    set wordField(wordField) {\n        this._setOptionalItem(wordFieldKey, wordField);\n    }\n\n    get sourceField() {\n        return this._storage.get(sourceFieldKey) ?? undefined;\n    }\n\n    set sourceField(sourceField) {\n        this._setOptionalItem(sourceFieldKey, sourceField);\n    }\n\n    get urlField() {\n        return this._storage.get(urlFieldKey) ?? undefined;\n    }\n\n    set urlField(urlField) {\n        this._setOptionalItem(urlFieldKey, urlField);\n    }\n\n    get customAnkiFields() {\n        const ankiFieldsString = this._storage.get(customAnkiFieldsKey);\n\n        if (ankiFieldsString) {\n            return JSON.parse(ankiFieldsString);\n        }\n\n        return {};\n    }\n\n    set customAnkiFields(customAnkiFields) {\n        this._storage.set(customAnkiFieldsKey, JSON.stringify(customAnkiFields));\n    }\n\n    get tags() {\n        if (typeof this._tags !== 'undefined') {\n            return this._tags;\n        }\n\n        const tagsString = this._storage.get(tagsKey);\n\n        if (tagsString) {\n            this._tags = JSON.parse(tagsString) as string[];\n            return this._tags;\n        }\n\n        return [];\n    }\n\n    set tags(tags) {\n        this._storage.set(tagsKey, JSON.stringify(tags));\n        this._tags = undefined;\n    }\n\n    get subtitleColor() {\n        return this._storage.get(subtitleColorKey) || defaultSubtitleColor;\n    }\n\n    set subtitleColor(subtitleColor) {\n        this._storage.set(subtitleColorKey, subtitleColor);\n    }\n\n    get subtitleSize() {\n        return this._getNumberItem(subtitleSizeKey, defaultSubtitleSize);\n    }\n\n    set subtitleSize(subtitleSize) {\n        this._storage.set(subtitleSizeKey, String(subtitleSize));\n    }\n\n    get subtitleOutlineColor() {\n        return this._storage.get(subtitleOutlineColorKey) || defaultSubtitleOutlineColor;\n    }\n\n    set subtitleOutlineColor(subtitleOutlineColor) {\n        this._storage.set(subtitleOutlineColorKey, subtitleOutlineColor);\n    }\n\n    get subtitleOutlineThickness() {\n        return this._getNumberItem(subtitleOutlineThicknessKey, defaultSubtitleOutlineThickness);\n    }\n\n    set subtitleOutlineThickness(subtitleOutlineThickness) {\n        this._storage.set(subtitleOutlineThicknessKey, String(subtitleOutlineThickness));\n    }\n\n    get subtitleBackgroundColor() {\n        return this._storage.get(subtitleBackgroundColorKey) || defaultSubtitleBackgroundColor;\n    }\n\n    set subtitleBackgroundColor(subtitleBackgroundColor) {\n        this._storage.set(subtitleBackgroundColorKey, subtitleBackgroundColor);\n    }\n\n    get subtitleBackgroundOpacity() {\n        return this._getNumberItem(subtitleBackgroundOpacityKey, defaultSubtitleBackgroundOpacity);\n    }\n\n    set subtitleBackgroundOpacity(subtitleBackgroundOpacity) {\n        this._storage.set(subtitleBackgroundOpacityKey, String(subtitleBackgroundOpacity));\n    }\n\n    get subtitleFontFamily() {\n        return this._storage.get(subtitleFontFamilyKey) || defaultSubtitleFontFamily;\n    }\n\n    set subtitleFontFamily(subtitleFontFamily) {\n        this._storage.set(subtitleFontFamilyKey, subtitleFontFamily);\n    }\n\n    get subtitlePreview() {\n        return this._storage.get(subtitlePreviewKey) || defaultSubtitlePreview;\n    }\n\n    set subtitlePreview(subtitlePreview) {\n        this._storage.set(subtitlePreviewKey, subtitlePreview);\n    }\n\n    get imageBasedSubtitleScaleFactor() {\n        return this._getNumberItem(imageBasedSubtitleScaleFactorKey, 1);\n    }\n\n    set imageBasedSubtitleScaleFactor(imageBasedSubtitleScaleFactor: number) {\n        this._storage.set(imageBasedSubtitleScaleFactorKey, String(imageBasedSubtitleScaleFactor));\n    }\n\n    get preferMp3(): boolean {\n        const value = this._storage.get(preferMp3Key);\n\n        if (value !== null) {\n            if (value === 'true') {\n                return true;\n            }\n\n            return false;\n        }\n\n        return defaultPreferMp3;\n    }\n\n    set preferMp3(preferMp3) {\n        this._storage.set(preferMp3Key, String(preferMp3));\n    }\n\n    get themeType() {\n        const themeType = this._storage.get(themeTypeKey) as 'dark' | 'light' | null;\n\n        if (themeType === null) {\n            return 'dark';\n        }\n\n        return themeType;\n    }\n\n    set themeType(themeType: 'dark' | 'light') {\n        this._storage.set(themeTypeKey, themeType);\n    }\n\n    get audioPaddingStart() {\n        const value = this._storage.get(audioPaddingStartKey);\n\n        if (!value) {\n            return defaultAudioPaddingStart;\n        }\n\n        return Number(value);\n    }\n\n    set audioPaddingStart(audioPaddingStart) {\n        this._storage.set(audioPaddingStartKey, String(audioPaddingStart));\n    }\n\n    get audioPaddingEnd() {\n        return this._getNumberItem(audioPaddingEndKey, defaultAudioPaddingEnd);\n    }\n\n    set audioPaddingEnd(audioPaddingEnd) {\n        this._storage.set(audioPaddingEndKey, String(audioPaddingEnd));\n    }\n\n    get maxImageWidth() {\n        const value = this._storage.get(maxImageWidthKey);\n\n        if (!value) {\n            return defaultMaxImageWidth;\n        }\n\n        return Number(value);\n    }\n\n    set maxImageWidth(maxImageWidth) {\n        this._storage.set(maxImageWidthKey, String(maxImageWidth));\n    }\n\n    get maxImageHeight() {\n        return this._getNumberItem(maxImageHeightKey, defaultMaxImageHeight);\n    }\n\n    set maxImageHeight(maxImageHeight) {\n        this._storage.set(maxImageHeightKey, String(maxImageHeight));\n    }\n\n    get surroundingSubtitlesCountRadius() {\n        return this._getNumberItem(surroundingSubtitlesCountRadiusKey, defaultSurroundingSubtitlesCountRadius);\n    }\n\n    set surroundingSubtitlesCountRadius(surroundingSubtitlesCountRadius) {\n        this._storage.set(surroundingSubtitlesCountRadiusKey, String(surroundingSubtitlesCountRadius));\n    }\n\n    get surroundingSubtitlesTimeRadius() {\n        return this._getNumberItem(surroundingSubtitlesTimeRadiusKey, defaultSurroundingSubtitlesTimeRadius);\n    }\n\n    set surroundingSubtitlesTimeRadius(surroundingSubtitlesTimeRadius) {\n        this._storage.set(surroundingSubtitlesTimeRadiusKey, String(surroundingSubtitlesTimeRadius));\n    }\n\n    get copyToClipboardOnMine() {\n        return this._storage.get(copyToClipboardOnMineKey) === 'true' || false;\n    }\n\n    set copyToClipboardOnMine(copyToClipboardOnMine) {\n        this._storage.set(copyToClipboardOnMineKey, String(copyToClipboardOnMine));\n    }\n\n    get autoPausePreference() {\n        return this._getNumberItem(autoPausePreferenceKey, defaultAutoPausePreference);\n    }\n\n    set autoPausePreference(autoPausePreference) {\n        this._storage.set(autoPausePreferenceKey, String(autoPausePreference));\n    }\n\n    get keyBindSet() {\n        if (this._keyBindSet !== undefined) {\n            return this._keyBindSet;\n        }\n\n        let serialized = this._storage.get(keyBindSetKey);\n\n        if (serialized === null) {\n            this._keyBindSet = defaultKeyBindSet;\n            return defaultKeyBindSet;\n        }\n\n        const keyBindSet = JSON.parse(serialized);\n\n        for (const key of Object.keys(defaultKeyBindSet)) {\n            const keyBindName = key as KeyBindName;\n\n            if (keyBindSet[keyBindName] === undefined) {\n                keyBindSet[keyBindName] = defaultKeyBindSet[keyBindName];\n            }\n        }\n\n        this._keyBindSet = keyBindSet;\n        return keyBindSet as KeyBindSet;\n    }\n\n    set keyBindSet(keyBindSet) {\n        this._storage.set(keyBindSetKey, JSON.stringify(keyBindSet));\n        this._keyBindSet = undefined;\n    }\n\n    get rememberSubtitleOffset() {\n        return this._storage.get(rememberSubtitleOffsetKey) === 'true' || false;\n    }\n\n    set rememberSubtitleOffset(rememberSubtitleOffset) {\n        this._storage.set(rememberSubtitleOffsetKey, String(rememberSubtitleOffset));\n    }\n\n    get autoCopyCurrentSubtitle() {\n        return this._storage.get(autoCopyCurrentSubtitleKey) === 'true' || false;\n    }\n\n    set autoCopyCurrentSubtitle(autoCopyCurrentSubtitle) {\n        this._storage.set(autoCopyCurrentSubtitleKey, String(autoCopyCurrentSubtitle));\n    }\n\n    get subtitleRegexFilter() {\n        return this._storage.get(subtitleRegexFilterKey) ?? '';\n    }\n\n    set subtitleRegexFilter(subtitleRegexFilter: string) {\n        this._storage.set(subtitleRegexFilterKey, subtitleRegexFilter);\n    }\n\n    get subtitleRegexFilterTextReplacement() {\n        return this._storage.get(subtitleRegexFilterTextReplacementKey) ?? '';\n    }\n\n    set subtitleRegexFilterTextReplacement(subtitleRegexFilterTextReplacement: string) {\n        this._storage.set(subtitleRegexFilterTextReplacementKey, subtitleRegexFilterTextReplacement);\n    }\n\n    get miningHistoryStorageLimit() {\n        return this._getNumberItem(miningHistoryStorageLimitKey, defaultMiningHistoryStorageLimit);\n    }\n\n    set miningHistoryStorageLimit(miningHistoryStorageLimit: number) {\n        this._storage.set(miningHistoryStorageLimitKey, String(miningHistoryStorageLimit));\n    }\n}\n","import {\n    AlertMessage,\n    AnkiDialogRequestFromVideoMessage,\n    AnkiSettings,\n    AnkiSettingsToVideoMessage,\n    AppBarToggleMessageToVideoMessage,\n    AudioTrackModel,\n    AudioTrackSelectedFromVideoMessage,\n    AudioTrackSelectedToVideoMessage,\n    CopyMessage,\n    CurrentTimeToVideoMessage,\n    FullscreenToggleMessageToVideoMessage,\n    HideSubtitlePlayerToggleToVideoMessage,\n    MiscSettings,\n    MiscSettingsToVideoMessage,\n    OffsetFromVideoMessage,\n    OffsetToVideoMessage,\n    PauseFromVideoMessage,\n    PlaybackRateFromVideoMessage,\n    PlaybackRateToVideoMessage,\n    PlayFromVideoMessage,\n    PlayMode,\n    PlayModeMessage,\n    PostMineAction,\n    ReadyFromVideoMessage,\n    ReadyStateFromVideoMessage,\n    ReadyToVideoMessage,\n    SubtitleModel,\n    SubtitleSettings,\n    SubtitleSettingsToVideoMessage,\n    SubtitlesToVideoMessage,\n    ToggleSubtitleTrackInListFromVideoMessage,\n} from '@project/common';\n\nexport default class PlayerChannel {\n    private channel?: BroadcastChannel;\n    private readyCallbacks: ((duration: number, videoFileName?: string) => void)[];\n    private playCallbacks: (() => void)[];\n    private pauseCallbacks: (() => void)[];\n    private currentTimeCallbacks: ((currentTime: number) => void)[];\n    private audioTrackSelectedCallbacks: ((id: string) => void)[];\n    private closeCallbacks: (() => void)[];\n    private subtitlesCallbacks: ((subtitles: SubtitleModel[]) => void)[];\n    private offsetCallbacks: ((offset: number) => void)[];\n    private playbackRateCallbacks: ((playbackRate: number) => void)[];\n    private playModeCallbacks: ((playMode: PlayMode) => void)[];\n    private hideSubtitlePlayerToggleCallbacks: ((hidden: boolean) => void)[];\n    private appBarToggleCallbacks: ((hidden: boolean) => void)[];\n    private fullscreenToggleCallbacks: ((hidden: boolean) => void)[];\n    private subtitleSettingsCallbacks: ((subtitleSettings: SubtitleSettings) => void)[];\n    private miscSettingsCallbacks: ((miscSettings: MiscSettings) => void)[];\n    private ankiSettingsCallbacks: ((ankiSettings: AnkiSettings) => void)[];\n    private alertCallbacks: ((message: string, severity: string) => void)[];\n\n    constructor(channel: string) {\n        this.channel = new BroadcastChannel(channel);\n        this.playCallbacks = [];\n        this.pauseCallbacks = [];\n        this.currentTimeCallbacks = [];\n        this.audioTrackSelectedCallbacks = [];\n        this.closeCallbacks = [];\n        this.readyCallbacks = [];\n        this.subtitlesCallbacks = [];\n        this.offsetCallbacks = [];\n        this.playbackRateCallbacks = [];\n        this.playModeCallbacks = [];\n        this.hideSubtitlePlayerToggleCallbacks = [];\n        this.appBarToggleCallbacks = [];\n        this.fullscreenToggleCallbacks = [];\n        this.subtitleSettingsCallbacks = [];\n        this.miscSettingsCallbacks = [];\n        this.ankiSettingsCallbacks = [];\n        this.alertCallbacks = [];\n\n        const that = this;\n\n        this.channel.onmessage = (event) => {\n            switch (event.data.command) {\n                case 'init':\n                    // ignore, this is for the chrome extension\n                    break;\n                case 'ready':\n                    const readyMessage = event.data as ReadyToVideoMessage;\n\n                    for (let callback of that.readyCallbacks) {\n                        callback(readyMessage.duration, readyMessage.videoFileName);\n                    }\n                    break;\n                case 'play':\n                    for (let callback of that.playCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'pause':\n                    for (let callback of that.pauseCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'currentTime':\n                    const currentTimeMessage = event.data as CurrentTimeToVideoMessage;\n\n                    for (let callback of that.currentTimeCallbacks) {\n                        callback(currentTimeMessage.value);\n                    }\n                    break;\n                case 'audioTrackSelected':\n                    const audioTrackSelectedMessage = event.data as AudioTrackSelectedToVideoMessage;\n\n                    for (let callback of that.audioTrackSelectedCallbacks) {\n                        callback(audioTrackSelectedMessage.id);\n                    }\n                    break;\n                case 'close':\n                    for (let callback of that.closeCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'subtitles':\n                    const subtitlesMessage = event.data as SubtitlesToVideoMessage;\n\n                    for (let callback of that.subtitlesCallbacks) {\n                        callback(subtitlesMessage.value);\n                    }\n                    break;\n                case 'offset':\n                    const offsetMessage = event.data as OffsetToVideoMessage;\n\n                    for (const callback of that.offsetCallbacks) {\n                        callback(offsetMessage.value);\n                    }\n                    break;\n                case 'playbackRate':\n                    const playbackRateMessage = event.data as PlaybackRateToVideoMessage;\n\n                    for (const callback of that.playbackRateCallbacks) {\n                        callback(playbackRateMessage.value);\n                    }\n                    break;\n                case 'subtitleSettings':\n                    const subtitleSettingsMessage = event.data as SubtitleSettingsToVideoMessage;\n\n                    for (let callback of that.subtitleSettingsCallbacks) {\n                        callback(subtitleSettingsMessage.value);\n                    }\n                    break;\n                case 'playMode':\n                    const playModeMessage = event.data as PlayModeMessage;\n\n                    for (let callback of that.playModeCallbacks) {\n                        callback(playModeMessage.playMode);\n                    }\n                    break;\n                case 'hideSubtitlePlayerToggle':\n                    const hideSubtitlePlayerToggleMessage = event.data as HideSubtitlePlayerToggleToVideoMessage;\n\n                    for (let callback of that.hideSubtitlePlayerToggleCallbacks) {\n                        callback(hideSubtitlePlayerToggleMessage.value);\n                    }\n                    break;\n                case 'appBarToggle':\n                    const appBarToggleMessage = event.data as AppBarToggleMessageToVideoMessage;\n\n                    for (let callback of that.appBarToggleCallbacks) {\n                        callback(appBarToggleMessage.value);\n                    }\n                    break;\n                case 'fullscreenToggle':\n                    const fullscreenToggleMessage = event.data as FullscreenToggleMessageToVideoMessage;\n\n                    for (const callback of that.fullscreenToggleCallbacks) {\n                        callback(fullscreenToggleMessage.value);\n                    }\n                    break;\n                case 'ankiSettings':\n                    const ankiSettingsMessage = event.data as AnkiSettingsToVideoMessage;\n\n                    for (let callback of that.ankiSettingsCallbacks) {\n                        callback(ankiSettingsMessage.value);\n                    }\n                    break;\n                case 'miscSettings':\n                    const miscSettingsMessage = event.data as MiscSettingsToVideoMessage;\n\n                    for (let callback of that.miscSettingsCallbacks) {\n                        callback(miscSettingsMessage.value);\n                    }\n                    break;\n                case 'alert':\n                    const alertMessage = event.data as AlertMessage;\n\n                    for (const callback of that.alertCallbacks) {\n                        callback(alertMessage.message, alertMessage.severity);\n                    }\n                    break;\n                default:\n                    console.error('Unrecognized event ' + event.data.command);\n            }\n        };\n    }\n\n    set currentTime(value: number) {\n        this.channel?.postMessage({ command: 'currentTime', value: value, echo: true });\n    }\n\n    onPlay(callback: () => void) {\n        this.playCallbacks.push(callback);\n    }\n\n    onPause(callback: () => void) {\n        this.pauseCallbacks.push(callback);\n    }\n\n    onCurrentTime(callback: (currentTime: number) => void) {\n        this.currentTimeCallbacks.push(callback);\n    }\n\n    onAudioTrackSelected(callback: (id: string) => void) {\n        this.audioTrackSelectedCallbacks.push(callback);\n    }\n\n    onClose(callback: () => void) {\n        this.closeCallbacks.push(callback);\n    }\n\n    onReady(callback: (duration: number, videoFileName?: string) => void) {\n        this.readyCallbacks.push(callback);\n    }\n\n    onSubtitles(callback: (subtitles: SubtitleModel[]) => void) {\n        this.subtitlesCallbacks.push(callback);\n    }\n\n    onOffset(callback: (offset: number) => void) {\n        this.offsetCallbacks.push(callback);\n    }\n\n    onPlaybackRate(callback: (playbackRate: number) => void) {\n        this.playbackRateCallbacks.push(callback);\n    }\n\n    onPlayMode(callback: (playMode: PlayMode) => void) {\n        this.playModeCallbacks.push(callback);\n    }\n\n    onHideSubtitlePlayerToggle(callback: (hidden: boolean) => void) {\n        this.hideSubtitlePlayerToggleCallbacks.push(callback);\n    }\n\n    onAppBarToggle(callback: (hidden: boolean) => void) {\n        this.appBarToggleCallbacks.push(callback);\n    }\n\n    onFullscreenToggle(callback: (fullscreen: boolean) => void) {\n        this.fullscreenToggleCallbacks.push(callback);\n    }\n\n    onSubtitleSettings(callback: (subtitleSettings: SubtitleSettings) => void) {\n        this.subtitleSettingsCallbacks.push(callback);\n    }\n\n    onMiscSettings(callback: (miscSettings: MiscSettings) => void) {\n        this.miscSettingsCallbacks.push(callback);\n    }\n\n    onAnkiSettings(callback: (ankiSettings: AnkiSettings) => void) {\n        this.ankiSettingsCallbacks.push(callback);\n    }\n\n    onAlert(callback: (message: string, severity: string) => void) {\n        this.alertCallbacks.push(callback);\n    }\n\n    ready(\n        duration: number,\n        paused: boolean,\n        playbackRate: number,\n        audioTracks: AudioTrackModel[] | undefined,\n        selectedAudioTrack: string | undefined\n    ) {\n        const message: ReadyFromVideoMessage = {\n            command: 'ready',\n            duration: duration,\n            paused: paused,\n            currentTime: 0,\n            audioTracks: audioTracks,\n            selectedAudioTrack: selectedAudioTrack,\n            playbackRate: playbackRate,\n        };\n\n        this.channel?.postMessage(message);\n    }\n\n    readyState(readyState: number) {\n        const message: ReadyStateFromVideoMessage = { command: 'readyState', value: readyState };\n        this.channel?.postMessage(message);\n    }\n\n    play() {\n        const message: PlayFromVideoMessage = { command: 'play', echo: true };\n        this.channel?.postMessage(message);\n    }\n\n    pause() {\n        const message: PauseFromVideoMessage = { command: 'pause', echo: true };\n        this.channel?.postMessage(message);\n    }\n\n    audioTrackSelected(id: string) {\n        const message: AudioTrackSelectedFromVideoMessage = { command: 'audioTrackSelected', id: id };\n        this.channel?.postMessage(message);\n    }\n\n    offset(offset: number) {\n        const message: OffsetFromVideoMessage = { command: 'offset', value: offset };\n        this.channel?.postMessage(message);\n    }\n\n    playbackRate(playbackRate: number) {\n        const message: PlaybackRateFromVideoMessage = { command: 'playbackRate', value: playbackRate, echo: true };\n        this.channel?.postMessage(message);\n    }\n\n    popOutToggle() {\n        this.channel?.postMessage({ command: 'popOutToggle' });\n    }\n\n    copy(\n        subtitle: SubtitleModel,\n        surroundingSubtitles: SubtitleModel[],\n        postMineAction: PostMineAction,\n        preventDuplicate?: boolean\n    ) {\n        const message: CopyMessage = {\n            command: 'copy',\n            subtitle: subtitle,\n            surroundingSubtitles: surroundingSubtitles,\n            preventDuplicate: preventDuplicate,\n            postMineAction: postMineAction,\n        };\n\n        this.channel?.postMessage(message);\n    }\n\n    playMode(playMode: PlayMode) {\n        this.channel?.postMessage({ command: 'playMode', playMode: playMode });\n    }\n\n    hideSubtitlePlayerToggle() {\n        this.channel?.postMessage({ command: 'hideSubtitlePlayerToggle' });\n    }\n\n    appBarToggle() {\n        this.channel?.postMessage({ command: 'appBarToggle' });\n    }\n\n    fullscreenToggle() {\n        this.channel?.postMessage({ command: 'fullscreenToggle' });\n    }\n\n    ankiDialogRequest(forwardToVideo: boolean) {\n        const message: AnkiDialogRequestFromVideoMessage = {\n            command: 'ankiDialogRequest',\n        };\n        this.channel?.postMessage(message);\n    }\n\n    toggleSubtitleTrackInList(track: number) {\n        const message: ToggleSubtitleTrackInListFromVideoMessage = {\n            command: 'toggleSubtitleTrackInList',\n            track: track,\n        };\n        this.channel?.postMessage(message);\n    }\n\n    close() {\n        if (this.channel) {\n            this.channel.postMessage({ command: 'exit' });\n            this.channel.close();\n            this.channel = undefined;\n            this.playCallbacks = [];\n            this.pauseCallbacks = [];\n            this.currentTimeCallbacks = [];\n            this.audioTrackSelectedCallbacks = [];\n            this.closeCallbacks = [];\n            this.readyCallbacks = [];\n            this.subtitlesCallbacks = [];\n            this.offsetCallbacks = [];\n            this.playbackRateCallbacks = [];\n            this.playModeCallbacks = [];\n            this.hideSubtitlePlayerToggleCallbacks = [];\n            this.appBarToggleCallbacks = [];\n            this.fullscreenToggleCallbacks = [];\n            this.subtitleSettingsCallbacks = [];\n            this.miscSettingsCallbacks = [];\n            this.ankiSettingsCallbacks = [];\n            this.alertCallbacks = [];\n        }\n    }\n}\n","import { CopySubtitleMessage, DefaultKeyBinder, KeyBinder, PostMineAction, SubtitleModel } from '@project/common';\nimport ChromeExtension, { ExtensionMessage } from './chrome-extension';\n\nexport default class AppKeyBinder implements KeyBinder {\n    private readonly defaultKeyBinder: DefaultKeyBinder;\n    private readonly extension: ChromeExtension;\n    private readonly copyHandlers: ((event: KeyboardEvent) => void)[] = [];\n    private readonly ankiExportHandlers: ((event: KeyboardEvent) => void)[] = [];\n    private readonly updateLastCardHandlers: ((event: KeyboardEvent) => void)[] = [];\n    private readonly onExtensionMessage: (message: ExtensionMessage) => void;\n\n    constructor(keyBinder: DefaultKeyBinder, extension: ChromeExtension) {\n        this.defaultKeyBinder = keyBinder;\n        this.extension = extension;\n\n        this.onExtensionMessage = (message: ExtensionMessage) => {\n            if (message.data.command === 'copy-subtitle') {\n                const command = message.data as CopySubtitleMessage;\n                let handlers: ((event: KeyboardEvent) => void)[] | undefined;\n\n                switch (command.postMineAction) {\n                    case PostMineAction.none:\n                        handlers = this.copyHandlers;\n                        break;\n                    case PostMineAction.showAnkiDialog:\n                        handlers = this.ankiExportHandlers;\n                        break;\n                    case PostMineAction.updateLastCard:\n                        handlers = this.updateLastCardHandlers;\n                        break;\n                    default:\n                        console.error('Unknown post mine action ' + command.postMineAction);\n                }\n\n                for (const h of handlers!) {\n                    h(new KeyboardEvent('mock'));\n                }\n            }\n        };\n        extension.subscribe(this.onExtensionMessage);\n    }\n\n    bindCopy<T extends SubtitleModel = SubtitleModel>(\n        onCopy: (event: KeyboardEvent, subtitle: T) => void,\n        disabledGetter: () => boolean,\n        subtitleGetter: () => T | undefined,\n        useCapture?: boolean | undefined\n    ): () => void {\n        if (this.extension.installed) {\n            const handler = this.defaultKeyBinder.copyHandler(onCopy, disabledGetter, subtitleGetter);\n            this.copyHandlers.push(handler);\n            return () => {\n                this._remove(handler, this.copyHandlers);\n            };\n        }\n\n        return this.defaultKeyBinder.bindCopy(onCopy, disabledGetter, subtitleGetter, useCapture);\n    }\n\n    bindAnkiExport(\n        onAnkiExport: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        if (this.extension.installed) {\n            const handler = this.defaultKeyBinder.ankiExportHandler(onAnkiExport, disabledGetter);\n            this.ankiExportHandlers.push(handler);\n            return () => {\n                this._remove(handler, this.ankiExportHandlers);\n            };\n        }\n\n        return this.defaultKeyBinder.bindAnkiExport(onAnkiExport, disabledGetter, useCapture);\n    }\n\n    bindUpdateLastCard(\n        onUpdateLastCard: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        if (this.extension.installed) {\n            const handler = this.defaultKeyBinder.updateLastCardHandler(onUpdateLastCard, disabledGetter);\n            this.updateLastCardHandlers.push(handler);\n            return () => {\n                this._remove(handler, this.updateLastCardHandlers);\n            };\n        }\n\n        return this.defaultKeyBinder.bindUpdateLastCard(onUpdateLastCard, disabledGetter, useCapture);\n    }\n\n    private _remove(callback: (event: KeyboardEvent) => void, list: ((event: KeyboardEvent) => void)[]) {\n        for (let i = list.length - 1; i >= 0; --i) {\n            if (callback === list[i]) {\n                list.splice(i, 1);\n                break;\n            }\n        }\n    }\n\n    bindSeekToSubtitle(\n        onSeekToSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindSeekToSubtitle(\n            onSeekToSubtitle,\n            disabledGetter,\n            timeGetter,\n            subtitlesGetter,\n            useCapture\n        );\n    }\n\n    bindSeekToBeginningOfCurrentSubtitle(\n        onSeekToBeginningOfCurrentSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindSeekToBeginningOfCurrentSubtitle(\n            onSeekToBeginningOfCurrentSubtitle,\n            disabledGetter,\n            timeGetter,\n            subtitlesGetter,\n            useCapture\n        );\n    }\n\n    bindSeekBackwardOrForward(\n        onSeekBackwardOrForward: (event: KeyboardEvent, forward: boolean) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindSeekBackwardOrForward(onSeekBackwardOrForward, disabledGetter, useCapture);\n    }\n\n    bindOffsetToSubtitle(\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindOffsetToSubtitle(\n            onOffsetChange,\n            disabledGetter,\n            timeGetter,\n            subtitlesGetter,\n            useCapture\n        );\n    }\n\n    bindAdjustOffset(\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\n        disabledGetter: () => boolean,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindAdjustOffset(onOffsetChange, disabledGetter, subtitlesGetter, useCapture);\n    }\n\n    bindResetOffet(\n        onResetOffset: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindResetOffet(onResetOffset, disabledGetter, useCapture);\n    }\n\n    bindAdjustPlaybackRate(\n        onAdjustPlaybackRate: (event: KeyboardEvent, increase: boolean) => void,\n        disabledGetter: () => boolean,\n        useCapture = false\n    ) {\n        return this.defaultKeyBinder.bindAdjustPlaybackRate(onAdjustPlaybackRate, disabledGetter, useCapture);\n    }\n\n    bindToggleSubtitles(\n        onToggleSubtitles: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindToggleSubtitles(onToggleSubtitles, disabledGetter, useCapture);\n    }\n\n    bindToggleSubtitleTrackInVideo(\n        onToggleSubtitleTrack: (event: KeyboardEvent, extra: any) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindToggleSubtitleTrackInVideo(onToggleSubtitleTrack, disabledGetter, useCapture);\n    }\n\n    bindToggleSubtitleTrackInList(\n        onToggleSubtitleTrackInList: (event: KeyboardEvent, extra: any) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindToggleSubtitleTrackInList(\n            onToggleSubtitleTrackInList,\n            disabledGetter,\n            useCapture\n        );\n    }\n\n    bindPlay(\n        onPlay: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindPlay(onPlay, disabledGetter, useCapture);\n    }\n\n    bindAutoPause(\n        onAutoPause: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindAutoPause(onAutoPause, disabledGetter, useCapture);\n    }\n\n    bindCondensedPlayback(\n        onCondensedPlayback: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindCondensedPlayback(onCondensedPlayback, disabledGetter, useCapture);\n    }\n}\n","import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { isMobile } from 'react-device-detect';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useWindowSize } from '../hooks/useWindowSize';\nimport { arrayEquals, computeStyles } from '../services/util';\nimport {\n    surroundingSubtitles,\n    mockSurroundingSubtitles,\n    SubtitleModel,\n    AudioTrackModel,\n    PostMineAction,\n    PlayMode,\n    MiscSettings,\n    SubtitleSettings,\n    DefaultKeyBinder,\n    AnkiSettings,\n    SubtitleCollection,\n    AutoPausePreference,\n    AutoPauseContext,\n} from '@project/common';\nimport { SubtitleTextImage } from '@project/common/components';\nimport Clock from '../services/clock';\nimport Controls, { Point } from './Controls';\nimport PlayerChannel from '../services/player-channel';\nimport SettingsProvider from '../services/settings-provider';\nimport AppKeyBinder from '../services/app-key-binder';\nimport ChromeExtension from '../services/chrome-extension';\nimport PlaybackPreferences, { SubtitleAlignment } from '../services/playback-preferences';\nimport { AnkiDialogFinishedRequest } from './Player';\nimport { Color } from '@material-ui/lab/Alert';\nimport Alert from './Alert';\n\ninterface ExperimentalHTMLVideoElement extends HTMLVideoElement {\n    readonly audioTracks: any;\n}\n\nconst useStyles = makeStyles({\n    root: {\n        position: 'relative',\n        backgroundColor: 'black',\n        height: '100vh',\n        overflow: 'hidden',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    video: {\n        margin: 'auto',\n    },\n    cursorHidden: {\n        cursor: 'none',\n    },\n    subtitleContainer: {\n        position: 'absolute',\n        paddingLeft: 20,\n        paddingRight: 20,\n        textAlign: 'center',\n        whiteSpace: 'pre-wrap',\n        lineHeight: 'normal',\n    },\n});\n\nfunction notifyReady(\n    element: ExperimentalHTMLVideoElement,\n    playerChannel: PlayerChannel,\n    setAudioTracks: React.Dispatch<React.SetStateAction<AudioTrackModel[] | undefined>>,\n    setSelectedAudioTrack: React.Dispatch<React.SetStateAction<string | undefined>>\n) {\n    if (window.outerWidth && element.videoWidth > 0 && element.videoHeight > 0) {\n        const availWidth = window.screen.availWidth - (window.outerWidth - window.innerWidth);\n        const availHeight = window.screen.availHeight - (window.outerHeight - window.innerHeight);\n        const resizeRatio = Math.min(1, Math.min(availWidth / element.videoWidth, availHeight / element.videoHeight));\n\n        window.resizeTo(\n            resizeRatio * element.videoWidth + (window.outerWidth - window.innerWidth),\n            resizeRatio * element.videoHeight + (window.outerHeight - window.innerHeight)\n        );\n    }\n\n    let tracks: AudioTrackModel[] | undefined;\n    let selectedTrack: string | undefined;\n\n    if (element.audioTracks) {\n        tracks = [];\n\n        for (let t of element.audioTracks) {\n            tracks.push({\n                id: t.id,\n                label: t.label,\n                language: t.language,\n            });\n\n            if (t.enabled) {\n                selectedTrack = t.id;\n            }\n        }\n    } else {\n        tracks = undefined;\n        selectedTrack = undefined;\n    }\n\n    setAudioTracks(tracks);\n    setSelectedAudioTrack(selectedTrack);\n    playerChannel.ready(element.duration, element.paused, element.playbackRate, tracks, selectedTrack);\n}\n\nfunction errorMessage(element: HTMLVideoElement) {\n    let error;\n    switch (element.error?.code) {\n        case 1:\n            error = 'Aborted';\n            break;\n        case 2:\n            error = 'Network error';\n            break;\n        case 3:\n            error = 'Decoding error';\n            break;\n        case 4:\n            error = 'Source not supported';\n            break;\n        default:\n            error = 'Unknown error';\n            break;\n    }\n\n    return error + ': ' + (element.error?.message || '<details missing>');\n}\n\ninterface Props {\n    settingsProvider: SettingsProvider;\n    playbackPreferences: PlaybackPreferences;\n    extension: ChromeExtension;\n    videoFile: string;\n    channel: string;\n    popOut: boolean;\n    ankiDialogFinishedRequest: AnkiDialogFinishedRequest;\n    onAnkiDialogRequest: (\n        videoFileUrl: string,\n        videoFileName: string,\n        selectedAudioTrack: string | undefined,\n        playbackRate: number,\n        subtitle: SubtitleModel,\n        surroundingSubtitles: SubtitleModel[],\n        timestamp: number\n    ) => void;\n    onError: (error: string) => void;\n    onPlayModeChangedViaBind: (oldPlayMode: PlayMode, newPlayMode: PlayMode) => void;\n}\n\ninterface IndexedSubtitleModel extends SubtitleModel {\n    index: number;\n}\n\nexport default function VideoPlayer({\n    settingsProvider,\n    playbackPreferences,\n    extension,\n    videoFile,\n    channel,\n    popOut,\n    ankiDialogFinishedRequest,\n    onAnkiDialogRequest,\n    onError,\n    onPlayModeChangedViaBind,\n}: Props) {\n    const classes = useStyles();\n    const poppingInRef = useRef<boolean>();\n    const videoRef = useRef<ExperimentalHTMLVideoElement>();\n    const [windowWidth, windowHeight] = useWindowSize(true);\n    if (videoRef.current) {\n        videoRef.current.width = windowWidth;\n        videoRef.current.height = windowHeight;\n    }\n    const playerChannel = useMemo(() => new PlayerChannel(channel), [channel]);\n    const [playing, setPlaying] = useState<boolean>(false);\n    const [fullscreen, setFullscreen] = useState<boolean>(false);\n    const playingRef = useRef<boolean>();\n    playingRef.current = playing;\n    const [length, setLength] = useState<number>(0);\n    const [videoFileName, setVideoFileName] = useState<string>();\n    const [offset, setOffset] = useState<number>(0);\n    const [playbackRate, setPlaybackRate] = useState<number>(1);\n    const [audioTracks, setAudioTracks] = useState<AudioTrackModel[]>();\n    const [selectedAudioTrack, setSelectedAudioTrack] = useState<string>();\n    const [, setResumeOnFinishedAnkiDialogRequest] = useState<boolean>(false);\n    const [subtitles, setSubtitles] = useState<IndexedSubtitleModel[]>([]);\n    const subtitleCollection = useMemo<SubtitleCollection<IndexedSubtitleModel>>(\n        () =>\n            new SubtitleCollection<IndexedSubtitleModel>(subtitles, {\n                returnLastShown: false,\n                showingCheckRadiusMs: 150,\n            }),\n        [subtitles]\n    );\n    const [showSubtitles, setShowSubtitles] = useState<IndexedSubtitleModel[]>([]);\n    const [subtitlesEnabled, setSubtitlesEnabled] = useState(true);\n    const [disabledSubtitleTracks, setDisabledSubtitleTracks] = useState<{ [index: number]: boolean }>({});\n    const [playMode, setPlayMode] = useState<PlayMode>(PlayMode.normal);\n    const [subtitlePlayerHidden, setSubtitlePlayerHidden] = useState<boolean>(false);\n    const [appBarHidden, setAppBarHidden] = useState<boolean>(playbackPreferences.theaterMode);\n    const [subtitleAlignment, setSubtitleAlignment] = useState<SubtitleAlignment>(\n        playbackPreferences.subtitleAlignment\n    );\n    const [subtitlePositionOffset, setSubtitlePositionOffset] = useState<number>(\n        playbackPreferences.subtitlePositionOffset\n    );\n    const showSubtitlesRef = useRef<IndexedSubtitleModel[]>([]);\n    showSubtitlesRef.current = showSubtitles;\n    const clock = useMemo<Clock>(() => new Clock(), []);\n    const mousePositionRef = useRef<Point>({ x: 0, y: 0 });\n    const [showCursor, setShowCursor] = useState<boolean>(false);\n    const lastMouseMovementTimestamp = useRef<number>(0);\n    const containerRef = useRef<HTMLDivElement>(null);\n    const [miscSettings, setMiscSettings] = useState<MiscSettings>(settingsProvider.miscSettings);\n    const [subtitleSettings, setSubtitleSettings] = useState<SubtitleSettings>(settingsProvider.subtitleSettings);\n    const [ankiSettings, setAnkiSettings] = useState<AnkiSettings>(settingsProvider.ankiSettings);\n    const [alertOpen, setAlertOpen] = useState<boolean>(false);\n    const [alertMessage, setAlertMessage] = useState<string>('');\n    const [alertSeverity, setAlertSeverity] = useState<Color>('info');\n    const autoPauseContext = useMemo(() => {\n        const context = new AutoPauseContext();\n        context.onStartedShowing = () => {\n            if (playMode !== PlayMode.autoPause || miscSettings.autoPausePreference !== AutoPausePreference.atStart) {\n                return;\n            }\n\n            playerChannel.pause();\n        };\n        context.onWillStopShowing = () => {\n            if (playMode !== PlayMode.autoPause || miscSettings.autoPausePreference !== AutoPausePreference.atEnd) {\n                return;\n            }\n\n            playerChannel.pause();\n        };\n        return context;\n    }, [playerChannel, miscSettings, playMode]);\n    const autoPauseContextRef = useRef<AutoPauseContext>();\n    autoPauseContextRef.current = autoPauseContext;\n\n    const keyBinder = useMemo<AppKeyBinder>(\n        () => new AppKeyBinder(new DefaultKeyBinder(miscSettings.keyBindSet), extension),\n        [miscSettings.keyBindSet, extension]\n    );\n    const videoRefCallback = useCallback(\n        (element: HTMLVideoElement) => {\n            if (element) {\n                const videoElement = element as ExperimentalHTMLVideoElement;\n                videoRef.current = videoElement;\n\n                if (videoElement.readyState === 4) {\n                    notifyReady(videoElement, playerChannel, setAudioTracks, setSelectedAudioTrack);\n                } else {\n                    videoElement.onloadeddata = (event) => {\n                        notifyReady(videoElement, playerChannel, setAudioTracks, setSelectedAudioTrack);\n                    };\n                }\n\n                videoElement.oncanplay = (event) => {\n                    playerChannel.readyState(4);\n\n                    if (playingRef.current) {\n                        clock.start();\n                    }\n                };\n\n                videoElement.ontimeupdate = (event) => clock.setTime(element.currentTime * 1000);\n\n                videoElement.onerror = (event) => onError(errorMessage(element));\n            }\n        },\n        [clock, playerChannel, onError]\n    );\n\n    function selectAudioTrack(id: string) {\n        const audioTracks = videoRef.current?.audioTracks;\n\n        if (!audioTracks) {\n            return;\n        }\n\n        // @ts-ignore\n        for (const t of audioTracks) {\n            if (t.id === id) {\n                t.enabled = true;\n            } else {\n                t.enabled = false;\n            }\n        }\n    }\n\n    const updateSubtitlesWithOffset = useCallback((offset: number) => {\n        setOffset(offset);\n        setSubtitles((subtitles) =>\n            subtitles.map((s, i) => ({\n                text: s.text,\n                textImage: s.textImage,\n                start: s.originalStart + offset,\n                originalStart: s.originalStart,\n                end: s.originalEnd + offset,\n                originalEnd: s.originalEnd,\n                track: s.track,\n                index: i,\n            }))\n        );\n    }, []);\n\n    const updatePlaybackRate = useCallback(\n        (playbackRate: number, forwardToPlayer: boolean) => {\n            if (videoRef.current) {\n                videoRef.current.playbackRate = playbackRate;\n                clock.rate = playbackRate;\n                setPlaybackRate(playbackRate);\n\n                if (forwardToPlayer) {\n                    playerChannel.playbackRate(playbackRate);\n                }\n            }\n        },\n        [playerChannel, clock]\n    );\n\n    useEffect(() => {\n        playerChannel.onReady((duration, videoFileName) => {\n            setLength(duration);\n            setVideoFileName(videoFileName);\n        });\n\n        playerChannel.onPlay(async () => {\n            await videoRef.current?.play();\n            clock.start();\n            setPlaying(true);\n        });\n\n        playerChannel.onPause(() => {\n            videoRef.current?.pause();\n            clock.stop();\n            setPlaying(false);\n        });\n\n        playerChannel.onCurrentTime((currentTime) => {\n            if (videoRef.current) {\n                videoRef.current.currentTime = currentTime;\n            }\n\n            if (videoRef.current?.readyState === 4) {\n                playerChannel.readyState(4);\n            }\n\n            clock.stop();\n            clock.setTime(currentTime * 1000);\n            autoPauseContextRef.current?.clear();\n        });\n\n        playerChannel.onAudioTrackSelected((id) => {\n            selectAudioTrack(id);\n            setSelectedAudioTrack(id);\n            playerChannel.audioTrackSelected(id);\n        });\n\n        playerChannel.onClose(() => {\n            playerChannel.close();\n            window.close();\n        });\n\n        playerChannel.onSubtitles((subtitles) => {\n            setSubtitles(subtitles.map((s, i) => ({ ...s, index: i })));\n\n            if (subtitles && subtitles.length > 0) {\n                const s = subtitles[0];\n                const offset = s.start - s.originalStart;\n                setOffset(offset);\n            }\n\n            autoPauseContextRef.current?.clear();\n        });\n\n        playerChannel.onPlayMode((playMode) => setPlayMode(playMode));\n        playerChannel.onHideSubtitlePlayerToggle((hidden) => setSubtitlePlayerHidden(hidden));\n        playerChannel.onAppBarToggle((hidden) => setAppBarHidden(hidden));\n        playerChannel.onFullscreenToggle((fullscreen) => setFullscreen(fullscreen));\n        playerChannel.onSubtitleSettings(setSubtitleSettings);\n        playerChannel.onMiscSettings(setMiscSettings);\n        playerChannel.onAnkiSettings(setAnkiSettings);\n        playerChannel.onOffset(updateSubtitlesWithOffset);\n        playerChannel.onPlaybackRate((playbackRate) => {\n            updatePlaybackRate(playbackRate, false);\n        });\n        playerChannel.onAlert((message, severity) => {\n            if (popOut) {\n                setAlertOpen(true);\n                setAlertMessage(message);\n                setAlertSeverity(severity as Color);\n            }\n        });\n\n        window.onbeforeunload = (e) => {\n            if (!poppingInRef.current) {\n                playerChannel.close();\n            }\n        };\n\n        return () => playerChannel.close();\n    }, [clock, playerChannel, updateSubtitlesWithOffset, updatePlaybackRate, popOut]);\n\n    const handlePlay = useCallback(() => {\n        if (videoRef.current) {\n            playerChannel.play();\n        }\n    }, [playerChannel]);\n\n    const handlePause = useCallback(() => playerChannel.pause(), [playerChannel]);\n\n    const handleSeek = useCallback(\n        (progress: number) => {\n            if (playingRef.current) {\n                clock.stop();\n            }\n\n            const time = progress * length;\n            playerChannel.currentTime = time / 1000;\n        },\n        [length, clock, playerChannel]\n    );\n\n    function handleMouseMove(e: React.MouseEvent<HTMLDivElement>) {\n        lastMouseMovementTimestamp.current = Date.now();\n\n        if (!containerRef.current) {\n            return;\n        }\n\n        var bounds = containerRef.current.getBoundingClientRect();\n        mousePositionRef.current.x = e.clientX - bounds.left;\n        mousePositionRef.current.y = e.clientY - bounds.top;\n    }\n\n    const handleAudioTrackSelected = useCallback(\n        (id: string) => {\n            if (playingRef.current) {\n                clock.stop();\n                playerChannel.pause();\n            }\n\n            selectAudioTrack(id);\n            setSelectedAudioTrack(id);\n            playerChannel.currentTime = 0;\n            playerChannel.audioTrackSelected(id);\n        },\n        [playerChannel, clock]\n    );\n\n    useEffect(() => {\n        if (!subtitles || subtitles.length === 0) {\n            return;\n        }\n\n        const interval = setInterval(() => {\n            const now = clock.time(length);\n            let showSubtitles = [];\n            const slice = subtitleCollection.subtitlesAt(now);\n\n            for (const s of slice.showing) {\n                if (!disabledSubtitleTracks[s.track]) {\n                    showSubtitles.push(s);\n                }\n            }\n\n            if (slice.startedShowing && !disabledSubtitleTracks[slice.startedShowing.track]) {\n                autoPauseContext.startedShowing(slice.startedShowing);\n            }\n\n            if (slice.willStopShowing && !disabledSubtitleTracks[slice.willStopShowing.track]) {\n                autoPauseContext.willStopShowing(slice.willStopShowing);\n            }\n\n            showSubtitles = showSubtitles.sort((s1, s2) => s1.track - s2.track);\n\n            if (!arrayEquals(showSubtitles, showSubtitlesRef.current, (s1, s2) => s1.index === s2.index)) {\n                setShowSubtitles(showSubtitles);\n                if (showSubtitles.length > 0 && miscSettings.autoCopyCurrentSubtitle && document.hasFocus()) {\n                    navigator.clipboard.writeText(showSubtitles.map((s) => s.text).join('\\n')).catch((e) => {\n                        // ignore\n                    });\n                }\n            }\n        }, 100);\n\n        return () => clearTimeout(interval);\n    }, [\n        subtitleCollection,\n        playerChannel,\n        subtitles,\n        disabledSubtitleTracks,\n        clock,\n        length,\n        autoPauseContext,\n        miscSettings,\n    ]);\n\n    const handleOffsetChange = useCallback(\n        (offset: number) => {\n            updateSubtitlesWithOffset(offset);\n            playerChannel.offset(offset);\n        },\n        [playerChannel, updateSubtitlesWithOffset]\n    );\n\n    const handlePlaybackRateChange = useCallback(\n        (playbackRate: number) => {\n            updatePlaybackRate(playbackRate, true);\n        },\n        [updatePlaybackRate]\n    );\n\n    useEffect(() => {\n        return keyBinder.bindSeekToSubtitle(\n            (event, subtitle) => {\n                event.stopPropagation();\n                event.preventDefault();\n                playerChannel.currentTime = subtitle.start / 1000;\n            },\n            () => !videoRef.current,\n            () => clock.time(length),\n            () => subtitles\n        );\n    }, [keyBinder, playerChannel, subtitles, length, clock]);\n\n    useEffect(() => {\n        return keyBinder.bindSeekToBeginningOfCurrentSubtitle(\n            (event, subtitle) => {\n                event.stopPropagation();\n                event.preventDefault();\n                playerChannel.currentTime = subtitle.start / 1000;\n            },\n            () => !videoRef.current,\n            () => clock.time(length),\n            () => subtitles\n        );\n    }, [keyBinder, playerChannel, subtitles, length, clock]);\n\n    useEffect(() => {\n        return keyBinder.bindSeekBackwardOrForward(\n            (event, forward) => {\n                event.stopPropagation();\n                event.preventDefault();\n                const timestamp = clock.time(length);\n\n                if (forward) {\n                    playerChannel.currentTime = Math.min(length / 1000, (timestamp + 10000) / 1000);\n                } else {\n                    playerChannel.currentTime = Math.max(0, (timestamp - 10000) / 1000);\n                }\n            },\n            () => !videoRef.current\n        );\n    }, [keyBinder, playerChannel, length, clock]);\n\n    const calculateSurroundingSubtitles = useCallback(\n        (index: number) => {\n            return surroundingSubtitles(\n                subtitles,\n                index,\n                ankiSettings.surroundingSubtitlesCountRadius,\n                ankiSettings.surroundingSubtitlesTimeRadius\n            );\n        },\n        [subtitles, ankiSettings.surroundingSubtitlesCountRadius, ankiSettings.surroundingSubtitlesTimeRadius]\n    );\n\n    useEffect(() => {\n        return keyBinder.bindCopy<IndexedSubtitleModel>(\n            (event, subtitle) => {\n                event.stopPropagation();\n                event.preventDefault();\n\n                const noSubtitles = !subtitles || subtitles.length === 0;\n\n                playerChannel.copy(\n                    subtitle,\n                    noSubtitles\n                        ? mockSurroundingSubtitles(subtitle, length, 5000)\n                        : calculateSurroundingSubtitles(subtitle.index),\n                    PostMineAction.none\n                );\n            },\n            () => false,\n            () => {\n                if (!subtitles || subtitles.length === 0) {\n                    const timestamp = clock.time(length);\n                    const end = Math.min(timestamp + 5000, length);\n\n                    return {\n                        text: '',\n                        start: timestamp,\n                        originalStart: timestamp,\n                        end: end,\n                        originalEnd: end,\n                        track: 0,\n                        index: 0,\n                    };\n                }\n\n                if (!showSubtitlesRef.current || showSubtitlesRef.current.length === 0) {\n                    return undefined;\n                }\n\n                return showSubtitlesRef.current[0];\n            }\n        );\n    }, [keyBinder, playerChannel, clock, length, subtitles, calculateSurroundingSubtitles]);\n\n    useEffect(() => {\n        return keyBinder.bindAdjustOffset(\n            (event, offset) => {\n                event.preventDefault();\n                event.stopPropagation();\n                handleOffsetChange(offset);\n            },\n            () => false,\n            () => subtitles\n        );\n    }, [keyBinder, handleOffsetChange, subtitles]);\n\n    useEffect(() => {\n        return keyBinder.bindResetOffet(\n            (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n                handleOffsetChange(0);\n            },\n            () => false\n        );\n    }, [keyBinder, handleOffsetChange]);\n\n    useEffect(() => {\n        return keyBinder.bindAdjustPlaybackRate(\n            (event, increase) => {\n                event.preventDefault();\n                if (increase) {\n                    updatePlaybackRate(Math.min(5, playbackRate + 0.1), true);\n                } else {\n                    updatePlaybackRate(Math.max(0.1, playbackRate - 0.1), true);\n                }\n            },\n            () => false\n        );\n    }, [updatePlaybackRate, playbackRate, keyBinder]);\n\n    useEffect(() => {\n        return keyBinder.bindToggleSubtitles(\n            (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n                setSubtitlesEnabled((enabled) => !enabled);\n            },\n            () => false\n        );\n    }, [keyBinder]);\n\n    useEffect(() => {\n        return keyBinder.bindToggleSubtitleTrackInVideo(\n            (event, track) => {\n                event.preventDefault();\n                event.stopPropagation();\n                setDisabledSubtitleTracks((tracks) => {\n                    const newTracks = { ...tracks };\n                    newTracks[track] = !tracks[track];\n                    return newTracks;\n                });\n            },\n            () => false\n        );\n    }, [keyBinder]);\n\n    useEffect(() => {\n        return keyBinder.bindToggleSubtitleTrackInList(\n            (event, track) => {\n                event.preventDefault();\n                event.stopPropagation();\n                playerChannel.toggleSubtitleTrackInList(track);\n            },\n            () => false\n        );\n    }, [keyBinder, playerChannel]);\n\n    useEffect(() => {\n        return keyBinder.bindOffsetToSubtitle(\n            (event, offset) => {\n                event.preventDefault();\n                event.stopPropagation();\n                handleOffsetChange(offset);\n            },\n            () => false,\n            () => clock.time(length),\n            () => subtitles\n        );\n    }, [keyBinder, handleOffsetChange, subtitles, clock, length]);\n\n    const extractSubtitles = useCallback(\n        (\n            noSubtitleCallback: (subtitle: SubtitleModel, surroundingSubtitles: SubtitleModel[]) => void,\n            subtitleCallback: (subtitle: SubtitleModel, surroundingSubtitles: SubtitleModel[]) => void\n        ) => {\n            if (!subtitles || subtitles.length === 0) {\n                const timestamp = clock.time(length);\n                const end = Math.min(timestamp + 5000, length);\n                const subtitle = {\n                    text: '',\n                    start: timestamp,\n                    originalStart: timestamp,\n                    end: end,\n                    originalEnd: end,\n                    track: 0,\n                };\n\n                noSubtitleCallback(subtitle, mockSurroundingSubtitles(subtitle, length, 5000));\n            } else if (showSubtitlesRef.current && showSubtitlesRef.current.length > 0) {\n                const currentSubtitle = showSubtitlesRef.current[0];\n                subtitleCallback(currentSubtitle, calculateSurroundingSubtitles(currentSubtitle.index));\n            }\n        },\n        [subtitles, calculateSurroundingSubtitles, length, clock]\n    );\n\n    useEffect(() => {\n        return keyBinder.bindAnkiExport(\n            (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n\n                if (popOut) {\n                    extractSubtitles(\n                        (subtitle, surroundingSubtitles) => {\n                            playerChannel.copy(subtitle, surroundingSubtitles, PostMineAction.none, false);\n                            onAnkiDialogRequest(\n                                videoFile,\n                                videoFileName ?? '',\n                                selectedAudioTrack,\n                                playbackRate,\n                                subtitle,\n                                surroundingSubtitles,\n                                clock.time(length)\n                            );\n                        },\n                        (subtitle, surroundingSubtitles) => {\n                            playerChannel.copy(subtitle, surroundingSubtitles, PostMineAction.none, true);\n                            onAnkiDialogRequest(\n                                videoFile,\n                                videoFileName ?? '',\n                                selectedAudioTrack,\n                                playbackRate,\n                                subtitle,\n                                surroundingSubtitles,\n                                clock.time(length)\n                            );\n                        }\n                    );\n\n                    if (playing) {\n                        playerChannel.pause();\n                        setResumeOnFinishedAnkiDialogRequest(true);\n                    }\n                } else {\n                    extractSubtitles(\n                        (subtitle, surroundingSubtitles) =>\n                            playerChannel.copy(subtitle, surroundingSubtitles, PostMineAction.showAnkiDialog, false),\n                        (subtitle, surroundingSubtitles) =>\n                            playerChannel.copy(subtitle, surroundingSubtitles, PostMineAction.showAnkiDialog, true)\n                    );\n                }\n            },\n            () => false\n        );\n    }, [\n        keyBinder,\n        playerChannel,\n        extractSubtitles,\n        clock,\n        length,\n        videoFile,\n        videoFileName,\n        selectedAudioTrack,\n        playbackRate,\n        onAnkiDialogRequest,\n        popOut,\n        playing,\n    ]);\n\n    useEffect(() => {\n        if (ankiDialogFinishedRequest && ankiDialogFinishedRequest.timestamp > 0) {\n            setResumeOnFinishedAnkiDialogRequest((resumeOnFinishedAnkiDialogRequest) => {\n                if (resumeOnFinishedAnkiDialogRequest && ankiDialogFinishedRequest.resume) {\n                    playerChannel.play();\n                }\n\n                return false;\n            });\n        }\n    }, [ankiDialogFinishedRequest, playerChannel]);\n\n    useEffect(() => {\n        return keyBinder.bindUpdateLastCard(\n            (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n\n                extractSubtitles(\n                    (subtitle, surroundingSubtitles) =>\n                        playerChannel.copy(subtitle, surroundingSubtitles, PostMineAction.updateLastCard, false),\n                    (subtitle, surroundingSubtitles) =>\n                        playerChannel.copy(subtitle, surroundingSubtitles, PostMineAction.updateLastCard, true)\n                );\n            },\n            () => false\n        );\n    }, [keyBinder, playerChannel, extractSubtitles]);\n\n    useEffect(() => {\n        return keyBinder.bindPlay(\n            (event) => {\n                event.preventDefault();\n\n                if (playing) {\n                    playerChannel.pause();\n                } else {\n                    playerChannel.play();\n                }\n            },\n            () => false\n        );\n    }, [keyBinder, playing, playerChannel]);\n\n    const togglePlayMode = useCallback(\n        (event: KeyboardEvent, togglePlayMode: PlayMode) => {\n            event.preventDefault();\n            const newPlayMode = playMode === togglePlayMode ? PlayMode.normal : togglePlayMode;\n            playerChannel.playMode(newPlayMode);\n            onPlayModeChangedViaBind(playMode, newPlayMode);\n        },\n        [playMode, playerChannel, onPlayModeChangedViaBind]\n    );\n\n    useEffect(() => {\n        return keyBinder.bindAutoPause(\n            (event) => togglePlayMode(event, PlayMode.autoPause),\n            () => false\n        );\n    }, [keyBinder, togglePlayMode]);\n\n    useEffect(() => {\n        return keyBinder.bindCondensedPlayback(\n            (event) => togglePlayMode(event, PlayMode.condensed),\n            () => false\n        );\n    }, [keyBinder, togglePlayMode]);\n\n    const handleSubtitlesToggle = useCallback(() => setSubtitlesEnabled((subtitlesEnabled) => !subtitlesEnabled), []);\n\n    const handleFullscreenToggle = useCallback(() => {\n        if (popOut) {\n            setFullscreen((fullscreen) => {\n                if (fullscreen) {\n                    document.exitFullscreen();\n                } else {\n                    document.documentElement.requestFullscreen();\n                }\n\n                return !fullscreen;\n            });\n        } else {\n            playerChannel.fullscreenToggle();\n        }\n    }, [playerChannel, popOut]);\n\n    const handleVolumeChange = useCallback((volume: number) => {\n        if (videoRef.current) {\n            videoRef.current.volume = volume;\n        }\n    }, []);\n\n    const handlePopOutToggle = useCallback(() => {\n        playerChannel.popOutToggle();\n        if (popOut) {\n            poppingInRef.current = true;\n            window.close();\n        }\n    }, [playerChannel, popOut]);\n\n    const handlePlayMode = useCallback(\n        (playMode: PlayMode) => {\n            playerChannel.playMode(playMode);\n        },\n        [playerChannel]\n    );\n\n    const handleClose = useCallback(() => {\n        playerChannel.close();\n        window.close();\n    }, [playerChannel]);\n\n    const handleHideSubtitlePlayerToggle = useCallback(() => {\n        playerChannel.hideSubtitlePlayerToggle();\n    }, [playerChannel]);\n\n    const handleTheaterModeToggle = useCallback(() => {\n        playerChannel.appBarToggle();\n    }, [playerChannel]);\n\n    const handleSubtitleAlignment = useCallback(\n        (alignment: SubtitleAlignment) => {\n            setSubtitleAlignment(alignment);\n            playbackPreferences.subtitleAlignment = alignment;\n        },\n        [playbackPreferences]\n    );\n\n    useEffect(() => {\n        const onWheel = (event: WheelEvent) => {\n            if (!subtitlesEnabled || !showSubtitlesRef.current?.length) {\n                return;\n            }\n\n            if (Math.abs(event.deltaY) < 10) {\n                return;\n            }\n\n            let shouldIncreaseOffset: boolean;\n\n            switch (subtitleAlignment) {\n                case SubtitleAlignment.bottom:\n                    shouldIncreaseOffset = event.deltaY > 0;\n                    break;\n                case SubtitleAlignment.top:\n                    shouldIncreaseOffset = event.deltaY < 0;\n                    break;\n            }\n\n            setSubtitlePositionOffset((offset) => {\n                const newOffset = shouldIncreaseOffset ? --offset : ++offset;\n                playbackPreferences.subtitlePositionOffset = newOffset;\n                return newOffset;\n            });\n        };\n\n        window.addEventListener('wheel', onWheel);\n        return () => window.removeEventListener('wheel', onWheel);\n    }, [subtitleAlignment, subtitlesEnabled, playbackPreferences]);\n\n    const handleClick = useCallback(() => {\n        if (playing) {\n            playerChannel.pause();\n        } else {\n            playerChannel.play();\n        }\n    }, [playerChannel, playing]);\n\n    const handleDoubleClick = useCallback(() => handleFullscreenToggle(), [handleFullscreenToggle]);\n\n    const {\n        subtitleSize,\n        subtitleColor,\n        subtitleOutlineThickness,\n        subtitleOutlineColor,\n        subtitleBackgroundColor,\n        subtitleBackgroundOpacity,\n        subtitleFontFamily,\n        imageBasedSubtitleScaleFactor,\n    } = subtitleSettings;\n    const subtitleStyles = useMemo(\n        () =>\n            computeStyles({\n                subtitleSize,\n                subtitleColor,\n                subtitleOutlineThickness,\n                subtitleOutlineColor,\n                subtitleBackgroundColor,\n                subtitleBackgroundOpacity,\n                subtitleFontFamily,\n            }),\n        [\n            subtitleSize,\n            subtitleColor,\n            subtitleOutlineThickness,\n            subtitleOutlineColor,\n            subtitleBackgroundColor,\n            subtitleBackgroundOpacity,\n            subtitleFontFamily,\n        ]\n    );\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            if (Date.now() - lastMouseMovementTimestamp.current > 300) {\n                if (showCursor) {\n                    setShowCursor(false);\n                }\n            } else if (!showCursor) {\n                setShowCursor(true);\n            }\n        }, 100);\n\n        return () => clearInterval(interval);\n    }, [showCursor]);\n\n    const handleAlertClosed = useCallback(() => setAlertOpen(false), []);\n\n    return (\n        <div ref={containerRef} onMouseMove={handleMouseMove} className={classes.root}>\n            <Alert open={alertOpen} onClose={handleAlertClosed} autoHideDuration={3000} severity={alertSeverity}>\n                {alertMessage}\n            </Alert>\n            <video\n                preload=\"auto\"\n                controls={false}\n                onClick={handleClick}\n                onDoubleClick={handleDoubleClick}\n                className={showCursor ? classes.video : `${classes.cursorHidden} ${classes.video}`}\n                ref={videoRefCallback}\n                src={videoFile}\n            />\n            {subtitlesEnabled && (\n                <div\n                    style={\n                        subtitleAlignment === SubtitleAlignment.bottom\n                            ? { bottom: subtitlePositionOffset }\n                            : { top: subtitlePositionOffset }\n                    }\n                    className={classes.subtitleContainer}\n                >\n                    {showSubtitles.map((subtitle, index) => {\n                        let content;\n\n                        if (subtitle.textImage) {\n                            content = (\n                                <SubtitleTextImage\n                                    availableWidth={videoRef.current?.width ?? window.screen.availWidth}\n                                    subtitle={subtitle}\n                                    scale={imageBasedSubtitleScaleFactor}\n                                />\n                            );\n                        } else {\n                            content = <span style={subtitleStyles}>{subtitle.text}</span>;\n                        }\n\n                        if (index < showSubtitles.length - 1) {\n                            return (\n                                <React.Fragment key={subtitle.index}>\n                                    {content}\n                                    <br />\n                                </React.Fragment>\n                            );\n                        }\n\n                        return <React.Fragment key={subtitle.index}>{content}</React.Fragment>;\n                    })}\n                </div>\n            )}\n            <Controls\n                mousePositionRef={mousePositionRef}\n                playing={playing}\n                clock={clock}\n                length={length}\n                audioTracks={audioTracks}\n                selectedAudioTrack={selectedAudioTrack}\n                subtitlesToggle={subtitles && subtitles.length > 0}\n                subtitlesEnabled={subtitlesEnabled}\n                offsetEnabled={true}\n                offset={offset}\n                playbackRate={playbackRate}\n                playbackRateEnabled={true}\n                fullscreenEnabled={true}\n                fullscreen={fullscreen}\n                closeEnabled={!popOut}\n                popOut={popOut}\n                volumeEnabled={true}\n                popOutEnabled={!isMobile}\n                playModeEnabled={subtitles && subtitles.length > 0}\n                playMode={playMode}\n                hideSubtitlePlayerToggleEnabled={subtitles?.length > 0 && !popOut && !fullscreen}\n                subtitlePlayerHidden={subtitlePlayerHidden}\n                onPlay={handlePlay}\n                onPause={handlePause}\n                onSeek={handleSeek}\n                onAudioTrackSelected={handleAudioTrackSelected}\n                onSubtitlesToggle={handleSubtitlesToggle}\n                onFullscreenToggle={handleFullscreenToggle}\n                onVolumeChange={handleVolumeChange}\n                onOffsetChange={handleOffsetChange}\n                onPlaybackRateChange={handlePlaybackRateChange}\n                onPopOutToggle={handlePopOutToggle}\n                onPlayMode={handlePlayMode}\n                onClose={handleClose}\n                onHideSubtitlePlayerToggle={handleHideSubtitlePlayerToggle}\n                playbackPreferences={playbackPreferences}\n                showOnMouseMovement={false}\n                theaterModeToggleEnabled={!popOut && !fullscreen}\n                theaterModeEnabled={appBarHidden}\n                onTheaterModeToggle={handleTheaterModeToggle}\n                subtitleAlignment={subtitleAlignment}\n                subtitleAlignmentEnabled={true}\n                onSubtitleAlignment={handleSubtitleAlignment}\n            />\n        </div>\n    );\n}\n","import {\n    AsbPlayerToVideoCommandV2,\n    ExtensionToAsbPlayerCommand,\n    ExtensionToAsbPlayerCommandTabsCommand,\n    Message,\n    VideoTabModel,\n} from '@project/common';\nimport { gt } from 'semver';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport interface ExtensionMessage {\n    data: Message;\n    tabId?: number;\n    src?: string;\n}\n\nconst id = uuidv4();\n\nexport default class ChromeExtension {\n    readonly version: string;\n    readonly extensionCommands: { [key: string]: string | undefined };\n\n    tabs: VideoTabModel[];\n    installed: boolean;\n\n    private readonly windowEventListener: (event: MessageEvent) => void;\n    private onMessageCallbacks: Array<(message: ExtensionMessage) => void>;\n    private onTabsCallbacks: Array<(tabs: VideoTabModel[]) => void>;\n    private heartbeatStarted = false;\n\n    constructor(version?: string, extensionCommands?: { [key: string]: string | undefined }) {\n        this.onMessageCallbacks = [];\n        this.onTabsCallbacks = [];\n        this.tabs = [];\n        this.installed = version !== undefined;\n        this.version = version ?? '';\n        this.extensionCommands = extensionCommands ?? {};\n        this.windowEventListener = (event: MessageEvent) => {\n            if (event.source !== window) {\n                return;\n            }\n\n            if (event.data.sender !== 'asbplayer-extension-to-player' || !event.data.message) {\n                return;\n            }\n\n            if (event.data.message.command === 'tabs') {\n                const tabsCommand = event.data as ExtensionToAsbPlayerCommandTabsCommand;\n                this.tabs = tabsCommand.message.tabs;\n\n                for (let c of this.onTabsCallbacks) {\n                    c(this.tabs);\n                }\n\n                if (tabsCommand.message.ackRequested) {\n                    window.postMessage(\n                        {\n                            sender: 'asbplayerv2',\n                            message: {\n                                command: 'ackTabs',\n                                id: id,\n                                receivedTabs: this.tabs,\n                            },\n                        },\n                        '*'\n                    );\n                }\n            } else {\n                const command = event.data as ExtensionToAsbPlayerCommand<Message>;\n\n                for (let c of this.onMessageCallbacks) {\n                    c({\n                        data: command.message,\n                        tabId: command.tabId,\n                        src: command.src,\n                    });\n                }\n            }\n        };\n\n        window.addEventListener('message', this.windowEventListener);\n    }\n\n    startHeartbeat(fromVideoPlayer: boolean) {\n        if (!this.installed) {\n            return;\n        }\n\n        if (!this.heartbeatStarted) {\n            if (fromVideoPlayer) {\n                if (gt(this.version, '0.23.0')) {\n                    setInterval(() => this._sendHeartbeat(true), 1000);\n                }\n            } else {\n                setInterval(() => this._sendHeartbeat(false), 1000);\n            }\n\n            this.heartbeatStarted = true;\n        }\n    }\n\n    private _sendHeartbeat(fromVideoPlayer: boolean) {\n        window.postMessage(\n            {\n                sender: 'asbplayerv2',\n                message: {\n                    command: 'heartbeat',\n                    id: id,\n                    receivedTabs: fromVideoPlayer ? [] : this.tabs,\n                    videoPlayer: fromVideoPlayer\n                },\n            },\n            '*'\n        );\n    }\n\n    openShortcuts() {\n        window.postMessage({\n            sender: 'asbplayerv2',\n            message: {\n                command: 'open-extension-shortcuts',\n            },\n        });\n    }\n\n    sendMessage(message: Message, tabId: number, src: string) {\n        const command: AsbPlayerToVideoCommandV2<Message> = {\n            sender: 'asbplayerv2',\n            message: message,\n            tabId: tabId,\n            src: src,\n        };\n        window.postMessage(command, '*');\n    }\n\n    publishMessage(message: Message) {\n        for (const tab of this.tabs) {\n            const command: AsbPlayerToVideoCommandV2<Message> = {\n                sender: 'asbplayerv2',\n                message: message,\n                tabId: tab.id,\n                src: tab.src,\n            };\n            window.postMessage(command, '*');\n        }\n    }\n\n    subscribeTabs(callback: (tabs: VideoTabModel[]) => void) {\n        this.onTabsCallbacks.push(callback);\n        return () => this._remove(callback, this.onTabsCallbacks);\n    }\n\n    subscribe(callback: (message: ExtensionMessage) => void) {\n        this.onMessageCallbacks.push(callback);\n        return () => this._remove(callback, this.onMessageCallbacks);\n    }\n\n    _remove(callback: Function, callbacks: Function[]) {\n        for (let i = callbacks.length - 1; i >= 0; --i) {\n            if (callback === callbacks[i]) {\n                callbacks.splice(i, 1);\n                break;\n            }\n        }\n    }\n\n    unbind() {\n        window.removeEventListener('message', this.windowEventListener);\n        this.onMessageCallbacks = [];\n        this.onTabsCallbacks = [];\n    }\n}\n","import { ExtensionVersionMessage } from '@project/common';\nimport ChromeExtension from './chrome-extension';\n\nconst keyBindNameMap: any = {\n    'copy-subtitle': 'copySubtitle',\n    'copy-subtitle-with-dialog': 'ankiExport',\n    'update-last-card': 'updateLastCard',\n};\n\nexport class ChromeExtensionProvider {\n    extension: ChromeExtension = new ChromeExtension();\n    private readonly callbacks: ((extension: ChromeExtension) => void)[] = [];\n\n    constructor() {\n        const listener = (event: MessageEvent) => {\n            if (event.source !== window) {\n                return;\n            }\n\n            if (event.data.sender === 'asbplayer-extension-to-player') {\n                if (event.data.message.command === 'version') {\n                    const message = event.data.message as ExtensionVersionMessage;\n\n                    for (const callback of this.callbacks) {\n                        this.extension.unbind();\n                        const translatedCommands: { [key: string]: string | undefined } = {};\n                        const extensionCommands = message.extensionCommands ?? {};\n                        \n                        for (const extensionCommandName of Object.keys(extensionCommands)) {\n                            translatedCommands[keyBindNameMap[extensionCommandName]] =\n                                extensionCommands[extensionCommandName];\n                        }\n\n                        this.extension = new ChromeExtension(message.version, translatedCommands);\n                        callback(this.extension);\n                    }\n\n                    window.removeEventListener('message', listener);\n                }\n            }\n        };\n\n        window.addEventListener('message', listener);\n    }\n\n    onChromeExtension(callback: (extension: ChromeExtension) => void) {\n        this.callbacks.push(callback);\n        callback(this.extension);\n    }\n}\n","import { AudioModel, ImageModel, SubtitleModel } from '@project/common';\nimport Dexie from 'dexie';\nimport { CopyHistoryItem } from '../components/CopyHistory';\n\nclass CopyHistoryDatabase extends Dexie {\n    copyHistoryItems!: Dexie.Table<CopyHistoryRecord, number>;\n\n    constructor() {\n        super('CopyHistoryDatabase');\n        this.version(1).stores({\n            copyHistoryItems: '++index,id,timestamp',\n        });\n    }\n}\n\ninterface CopyHistoryRecord extends SubtitleModel {\n    index?: number;\n    name: string;\n    id: string;\n    timestamp: number;\n    surroundingSubtitles: SubtitleModel[];\n    audioTrack?: string;\n    filePlaybackRate?: number;\n    subtitleFileName?: string;\n    videoFileName?: string;\n    audioFileName?: string;\n    mediaTimestamp?: number;\n    audio?: AudioModel;\n    image?: ImageModel;\n    url?: string;\n}\n\nexport default class CopyHistoryRepository {\n    private readonly _db = new CopyHistoryDatabase();\n    private _limit: number;\n\n    constructor(limit: number) {\n        this._limit = limit;\n    }\n\n    set limit(limit: number) {\n        this._limit = limit;\n    }\n\n    async fetch(count: number): Promise<CopyHistoryItem[]> {\n        if (count <= 0) {\n            return [];\n        }\n\n        const result = await await this._db.copyHistoryItems.reverse().limit(count).toArray();\n        result.reverse();\n        return result;\n    }\n\n    async save(item: CopyHistoryItem) {\n        if (this._limit <= 0) {\n            return;\n        }\n\n        const {\n            text,\n            textImage,\n            start,\n            end,\n            originalStart,\n            originalEnd,\n            track,\n            name,\n            id,\n            timestamp,\n            surroundingSubtitles,\n            audioTrack,\n            filePlaybackRate,\n            videoFile,\n            audioFile,\n            subtitleFileName,\n            mediaTimestamp,\n            audio,\n            image,\n            url,\n        } = item;\n        const record = {\n            text,\n            textImage,\n            start,\n            end,\n            originalStart,\n            originalEnd,\n            track,\n            name,\n            id,\n            timestamp,\n            surroundingSubtitles,\n            audioTrack,\n            filePlaybackRate,\n            videoFileName: videoFile?.name,\n            audioFileName: audioFile?.name,\n            subtitleFileName,\n            mediaTimestamp,\n            audio,\n            image,\n            url,\n        };\n        const index = await this._db.copyHistoryItems.put(record);\n        await this._prune(index);\n    }\n\n    private async _prune(lastIndex: number) {\n        const size = await this._db.copyHistoryItems.count();\n\n        if (size > this._limit) {\n            const keys = await this._db.copyHistoryItems\n                .where('index')\n                .belowOrEqual(lastIndex - this._limit)\n                .primaryKeys();\n\n            if (keys.length > 0) {\n                await this._db.copyHistoryItems.bulkDelete(keys);\n            }\n        }\n    }\n\n    async delete(id: string) {\n        const keys = await this._db.copyHistoryItems.where('id').equals(id).primaryKeys();\n        await this._db.copyHistoryItems.bulkDelete(keys);\n    }\n}\n","import React, { useCallback, useEffect, useState, useMemo, useRef } from 'react';\nimport { Route, Navigate, Routes, useLocation, useSearchParams } from 'react-router-dom';\nimport { ThemeProvider, createTheme, makeStyles, Theme } from '@material-ui/core/styles';\nimport { useWindowSize } from '../hooks/useWindowSize';\nimport { red } from '@material-ui/core/colors';\nimport {\n    Anki,\n    AudioClip,\n    Image,\n    humanReadableTime,\n    AnkiDialogSliderContext,\n    SubtitleModel,\n    VideoTabModel,\n    LegacyPlayerSyncMessage,\n    PlayerSyncMessage,\n    AudioModel,\n    ImageModel,\n    AsbplayerSettings,\n    PostMineAction,\n    PlayMode,\n    download,\n    extractText,\n} from '@project/common';\nimport { v4 as uuidv4 } from 'uuid';\nimport clsx from 'clsx';\nimport Alert from './Alert';\nimport { AnkiDialog, ImageDialog } from '@project/common/components';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport DragOverlay from './DragOverlay';\nimport SubtitleReader from '../services/subtitle-reader';\nimport Bar from './Bar';\nimport ChromeExtension, { ExtensionMessage } from '../services/chrome-extension';\nimport CopyHistory, { CopyHistoryItem } from './CopyHistory';\nimport LandingPage from './LandingPage';\nimport Player, { AnkiDialogFinishedRequest, MediaSources } from './Player';\nimport SettingsDialog from './SettingsDialog';\nimport SettingsProvider from '../services/settings-provider';\nimport VideoPlayer from './VideoPlayer';\nimport { Color } from '@material-ui/lab';\nimport { AnkiExportMode } from '@project/common';\nimport { DefaultKeyBinder } from '@project/common/src/key-binder';\nimport AppKeyBinder from '../services/app-key-binder';\nimport VideoChannel from '../services/video-channel';\nimport { ChromeExtensionProvider } from '../services/chrome-extension-provider';\nimport PlaybackPreferences from '../services/playback-preferences';\nimport CopyHistoryRepository from '../services/copy-history-repository';\n\nconst latestExtensionVersion = '0.26.0';\nconst extensionUrl = 'https://github.com/killergerbah/asbplayer/releases/latest';\n\nconst useContentStyles = makeStyles<Theme, ContentProps>((theme) => ({\n    content: {\n        flexGrow: 1,\n        transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n        marginRight: 0,\n    },\n    contentShift: ({ drawerWidth }) => ({\n        transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n        marginRight: drawerWidth,\n    }),\n}));\n\nfunction extractSources(files: FileList | File[]): MediaSources {\n    let subtitleFiles = [];\n    let audioFile = undefined;\n    let videoFile = undefined;\n\n    for (let i = 0; i < files.length; ++i) {\n        const f = files[i];\n        const extensionStartIndex = f.name.lastIndexOf('.');\n\n        if (extensionStartIndex === -1) {\n            throw new Error('Unable to determine extension of ' + f.name);\n        }\n\n        const extension = f.name.substring(extensionStartIndex + 1, f.name.length);\n        switch (extension) {\n            case 'ass':\n            case 'srt':\n            case 'vtt':\n            case 'nfvtt':\n            case 'sup':\n            case 'ytxml':\n            case 'dfxp':\n            case 'ttml2':\n                subtitleFiles.push(f);\n                break;\n            case 'mkv':\n            case 'mp4':\n            case 'avi':\n                if (videoFile) {\n                    throw new Error('Cannot open two video files simultaneously');\n                }\n                videoFile = f;\n                break;\n            case 'mp3':\n            case 'm4a':\n            case 'aac':\n            case 'flac':\n            case 'ogg':\n            case 'wav':\n            case 'opus':\n                if (audioFile) {\n                    throw new Error('Cannot open two audio files simultaneously');\n                }\n                audioFile = f;\n                break;\n            default:\n                throw new Error('Unsupported extension ' + extension);\n        }\n    }\n\n    if (videoFile && audioFile) {\n        throw new Error('Cannot load both an audio and video file simultaneously');\n    }\n\n    return { subtitleFiles: subtitleFiles, audioFile: audioFile, videoFile: videoFile };\n}\n\nfunction audioClipFromItem(\n    item: CopyHistoryItem,\n    sliderContext: AnkiDialogSliderContext | undefined,\n    paddingStart: number,\n    paddingEnd: number\n) {\n    if (item.audio) {\n        const start = item.audio.start ?? item.start;\n        const end = item.audio.end ?? item.end;\n\n        return AudioClip.fromBase64(\n            item.subtitleFileName!,\n            Math.max(0, start - (item.audio.paddingStart ?? 0)),\n            end + (item.audio.paddingEnd ?? 0),\n            item.audio.playbackRate ?? 1,\n            item.audio.base64,\n            item.audio.extension\n        );\n    }\n\n    const calculateInterval = () => {\n        let start;\n        let end;\n\n        if (sliderContext) {\n            start = sliderContext.subtitleStart;\n            end = sliderContext.subtitleEnd;\n        } else {\n            start = item.start;\n            end = item.end;\n        }\n\n        return [start, end];\n    };\n\n    if (item.audioFile || item.videoFile) {\n        const [start, end] = calculateInterval();\n        return AudioClip.fromFile(\n            (item.audioFile || item.videoFile)!,\n            Math.max(0, start - paddingStart),\n            end + paddingEnd,\n            item.filePlaybackRate ?? 1,\n            item.audioTrack\n        );\n    }\n\n    if (item.audioFileName || item.videoFileName) {\n        const [start, end] = calculateInterval();\n        return AudioClip.fromMissingFile((item.audioFileName || item.videoFileName)!, start, end);\n    }\n\n    return undefined;\n}\n\nfunction imageFromItem(item: CopyHistoryItem, maxWidth: number, maxHeight: number) {\n    if (item.image) {\n        return Image.fromBase64(item.subtitleFileName!, item.start, item.image.base64, item.image.extension);\n    }\n\n    if (item.videoFile) {\n        return Image.fromFile(item.videoFile, item.mediaTimestamp ?? item.start, maxWidth, maxHeight);\n    }\n\n    if (item.videoFileName) {\n        return Image.fromMissingFile(item.videoFileName, item.mediaTimestamp ?? item.start);\n    }\n\n    return undefined;\n}\n\nfunction itemSourceString(item: CopyHistoryItem | undefined) {\n    if (!item) {\n        return undefined;\n    }\n\n    const source = item.subtitleFileName ?? item.audioFile?.name ?? item.videoFile?.name;\n\n    if (!source) {\n        return undefined;\n    }\n\n    return `${source} (${humanReadableTime(item.start)})`;\n}\n\nfunction itemSliderContext(item: CopyHistoryItem) {\n    if (!item) {\n        return undefined;\n    }\n\n    return {\n        subtitleStart: item.start,\n        subtitleEnd: item.end,\n        subtitles: item.surroundingSubtitles || [\n            { start: item.start, end: item.end, text: item.text, track: item.track },\n        ],\n    };\n}\n\nfunction revokeUrls(sources: MediaSources) {\n    if (sources.audioFileUrl) {\n        URL.revokeObjectURL(sources.audioFileUrl);\n    }\n\n    if (sources.videoFileUrl) {\n        URL.revokeObjectURL(sources.videoFileUrl);\n    }\n}\n\ninterface NavigateToVideoProps {\n    searchParams: URLSearchParams;\n}\n\nfunction NavigateToVideo({ searchParams }: NavigateToVideoProps) {\n    const videoFile = searchParams.get('video')!;\n    const channel = searchParams.get('channel')!;\n    const popOut = searchParams.get('popout')!;\n\n    return (\n        <Navigate to={'/video?video=' + encodeURIComponent(videoFile) + '&channel=' + channel + '&popout=' + popOut} />\n    );\n}\n\ninterface RenderVideoProps {\n    searchParams: URLSearchParams;\n    settingsProvider: SettingsProvider;\n    playbackPreferences: PlaybackPreferences;\n    extension: ChromeExtension;\n    ankiDialogFinishedRequest: AnkiDialogFinishedRequest;\n    onAnkiDialogRequest: (\n        videoFileUrl: string,\n        videoFileName: string,\n        selectedAudioTrack: string | undefined,\n        playbackRate: number,\n        subtitle: SubtitleModel,\n        surroundingSubtitles: SubtitleModel[],\n        timestamp: number\n    ) => void;\n    onError: (error: string) => void;\n    onPlayModeChangedViaBind: (oldPlayMode: PlayMode, newPlayMode: PlayMode) => void;\n}\n\nfunction RenderVideo({\n    searchParams,\n    settingsProvider,\n    playbackPreferences,\n    extension,\n    ankiDialogFinishedRequest,\n    onAnkiDialogRequest,\n    onError,\n    onPlayModeChangedViaBind,\n}: RenderVideoProps) {\n    const videoFile = searchParams.get('video')!;\n    const channel = searchParams.get('channel')!;\n    const popOut = searchParams.get('popout')! === 'true';\n\n    return (\n        <VideoPlayer\n            settingsProvider={settingsProvider}\n            playbackPreferences={playbackPreferences}\n            extension={extension}\n            videoFile={videoFile}\n            popOut={popOut}\n            channel={channel}\n            ankiDialogFinishedRequest={ankiDialogFinishedRequest}\n            onAnkiDialogRequest={onAnkiDialogRequest}\n            onError={onError}\n            onPlayModeChangedViaBind={onPlayModeChangedViaBind}\n        />\n    );\n}\n\ninterface ContentProps {\n    drawerOpen: boolean;\n    drawerWidth: number;\n    children: React.ReactNode[];\n}\n\nfunction Content(props: ContentProps) {\n    const classes = useContentStyles(props);\n\n    return (\n        <main\n            className={clsx(classes.content, {\n                [classes.contentShift]: props.drawerOpen,\n            })}\n        >\n            {props.children}\n        </main>\n    );\n}\n\nfunction App() {\n    const settingsProvider = useMemo<SettingsProvider>(() => new SettingsProvider(), []);\n    const subtitleReader = useMemo<SubtitleReader>(() => {\n        let regex: RegExp | undefined;\n\n        try {\n            regex =\n                settingsProvider.subtitleRegexFilter.trim() === ''\n                    ? undefined\n                    : new RegExp(settingsProvider.subtitleRegexFilter, 'g');\n        } catch (e) {\n            regex = undefined;\n        }\n\n        if (regex !== undefined) {\n            return new SubtitleReader({ regex, replacement: settingsProvider.subtitleRegexFilterTextReplacement });\n        }\n\n        return new SubtitleReader();\n    }, [settingsProvider.subtitleRegexFilter, settingsProvider.subtitleRegexFilterTextReplacement]);\n    const playbackPreferences = useMemo<PlaybackPreferences>(\n        () => new PlaybackPreferences(settingsProvider),\n        [settingsProvider]\n    );\n    const theme = useMemo<Theme>(\n        () =>\n            createTheme({\n                palette: {\n                    primary: {\n                        main: '#49007a',\n                    },\n                    secondary: {\n                        main: '#ff1f62',\n                    },\n                    error: {\n                        main: red.A400,\n                    },\n                    type: settingsProvider.themeType,\n                },\n            }),\n        [settingsProvider.themeType]\n    );\n    const anki = useMemo<Anki>(() => new Anki(settingsProvider), [settingsProvider]);\n    const location = useLocation();\n    const [searchParams] = useSearchParams();\n\n    const inVideoPlayer = location.pathname === '/video' || searchParams.get('video') !== null;\n    const extensionProvider = useMemo(() => new ChromeExtensionProvider(), []);\n    const [extension, setExtension] = useState<ChromeExtension>(extensionProvider.extension);\n    const [videoFullscreen, setVideoFullscreen] = useState<boolean>(false);\n    useEffect(() => extensionProvider.onChromeExtension(setExtension), [extensionProvider]);\n    const keyBinder = useMemo<AppKeyBinder>(\n        () => new AppKeyBinder(new DefaultKeyBinder(settingsProvider.keyBindSet), extension),\n        [settingsProvider.keyBindSet, extension]\n    );\n    const videoFrameRef = useRef<HTMLIFrameElement>(null);\n    const videoChannelRef = useRef<VideoChannel>(null);\n    const [width] = useWindowSize(!inVideoPlayer);\n    const drawerRatio = videoFrameRef.current ? 0.2 : 0.3;\n    const minDrawerSize = videoFrameRef.current ? 150 : 300;\n    const drawerWidth = Math.max(minDrawerSize, width * drawerRatio);\n    const copyHistoryRepository = useMemo(\n        () => new CopyHistoryRepository(settingsProvider.miningHistoryStorageLimit),\n        [settingsProvider]\n    );\n    useEffect(() => {\n        copyHistoryRepository.limit = settingsProvider.miningHistoryStorageLimit;\n    }, [copyHistoryRepository, settingsProvider.miningHistoryStorageLimit]);\n    const [copiedSubtitles, setCopiedSubtitles] = useState<CopyHistoryItem[]>([]);\n    const copiedSubtitlesRef = useRef<CopyHistoryItem[]>([]);\n    copiedSubtitlesRef.current = copiedSubtitles;\n    const [copyHistoryOpen, setCopyHistoryOpen] = useState<boolean>(false);\n    const [theaterMode, setTheaterMode] = useState<boolean>(playbackPreferences.theaterMode);\n    const [hideSubtitlePlayer, setHideSubtitlePlayer] = useState<boolean>(false);\n    const [videoPopOut, setVideoPopOut] = useState<boolean>(false);\n    const [alert, setAlert] = useState<string>();\n    const [alertOpen, setAlertOpen] = useState<boolean>(false);\n    const [alertSeverity, setAlertSeverity] = useState<Color>();\n    const [jumpToSubtitle, setJumpToSubtitle] = useState<SubtitleModel>();\n    const [rewindSubtitle, setRewindSubtitle] = useState<SubtitleModel>();\n    const [sources, setSources] = useState<MediaSources>({ subtitleFiles: [] });\n    const [loading, setLoading] = useState<boolean>(false);\n    const [dragging, setDragging] = useState<boolean>(false);\n    const dragEnterRef = useRef<Element | null>(null);\n    const [fileName, setFileName] = useState<string>();\n    const [ankiDialogOpen, setAnkiDialogOpen] = useState<boolean>(false);\n    const [ankiDialogDisabled, setAnkiDialogDisabled] = useState<boolean>(false);\n    const [ankiDialogItem, setAnkiDialogItem] = useState<CopyHistoryItem>();\n    const ankiDialogItemSliderContext = useMemo<AnkiDialogSliderContext | undefined>(\n        () => ankiDialogItem && itemSliderContext(ankiDialogItem),\n        [ankiDialogItem]\n    );\n    const ankiDialogAudioClip = useMemo<AudioClip | undefined>(\n        () =>\n            ankiDialogItem &&\n            audioClipFromItem(\n                ankiDialogItem,\n                ankiDialogItemSliderContext,\n                settingsProvider.audioPaddingStart,\n                settingsProvider.audioPaddingEnd\n            ),\n        [\n            ankiDialogItem,\n            ankiDialogItemSliderContext,\n            settingsProvider.audioPaddingStart,\n            settingsProvider.audioPaddingEnd,\n        ]\n    );\n    const ankiDialogImage = useMemo<Image | undefined>(\n        () =>\n            ankiDialogItem &&\n            imageFromItem(ankiDialogItem, settingsProvider.maxImageWidth, settingsProvider.maxImageHeight),\n        [ankiDialogItem, settingsProvider.maxImageWidth, settingsProvider.maxImageHeight]\n    );\n    const [ankiDialogRequested, setAnkiDialogRequested] = useState<boolean>(false);\n    const [ankiDialogFinishedRequest, setAnkiDialogFinishedRequest] = useState<AnkiDialogFinishedRequest>({\n        timestamp: 0,\n        resume: false,\n    });\n    const [settingsDialogOpen, setSettingsDialogOpen] = useState<boolean>(false);\n    const [settingsDialogScrollToId, setSettingsDialogScrollToId] = useState<string>();\n    const [imageDialogOpen, setImageDialogOpen] = useState<boolean>(false);\n    const [disableKeyEvents, setDisableKeyEvents] = useState<boolean>(false);\n    const [image, setImage] = useState<Image>();\n    const [tab, setTab] = useState<VideoTabModel>();\n    const [availableTabs, setAvailableTabs] = useState<VideoTabModel[]>([]);\n    const fileInputRef = useRef<HTMLInputElement>(null);\n    const ankiDialogRequestedRef = useRef<boolean>(false);\n    ankiDialogRequestedRef.current = ankiDialogRequested;\n    const { subtitleFiles } = sources;\n\n    const handleError = useCallback((message: string) => {\n        setAlertSeverity('error');\n        setAlert(message);\n        setAlertOpen(true);\n    }, []);\n\n    const handleAnkiDialogRequest = useCallback((ankiDialogItem?: CopyHistoryItem) => {\n        if (!ankiDialogItem && copiedSubtitlesRef.current!.length === 0) {\n            return;\n        }\n\n        const item = ankiDialogItem ?? copiedSubtitlesRef.current[copiedSubtitlesRef.current.length - 1];\n        setAnkiDialogItem(item);\n        setAnkiDialogOpen(true);\n        setAnkiDialogDisabled(false);\n        setDisableKeyEvents(true);\n        setAnkiDialogRequested(true);\n    }, []);\n\n    const handleAnkiDialogRequestFromVideoPlayer = useCallback(\n        async (\n            videoFileUrl: string,\n            videoFileName: string,\n            selectedAudioTrack: string | undefined,\n            playbackRate: number,\n            subtitle: SubtitleModel,\n            surroundingSubtitles: SubtitleModel[],\n            timestamp: number\n        ) => {\n            const item = {\n                ...subtitle,\n                surroundingSubtitles: surroundingSubtitles,\n                timestamp: Date.now(),\n                id: uuidv4(),\n                name: videoFileName,\n                mediaTimestamp: timestamp,\n                videoFile: await fetch(videoFileUrl)\n                    .then((r) => r.blob())\n                    .then((blobFile) => new File([blobFile], videoFileName)),\n                selectedAudioTrack: selectedAudioTrack,\n                filePlaybackRate: playbackRate,\n            };\n            handleAnkiDialogRequest(item);\n        },\n        [handleAnkiDialogRequest]\n    );\n\n    const handleAnkiDialogProceed = useCallback(\n        async (\n            text: string,\n            definition: string,\n            audioClip: AudioClip | undefined,\n            image: Image | undefined,\n            word: string,\n            source: string,\n            url: string,\n            customFieldValues: { [key: string]: string },\n            tags: string[],\n            mode: AnkiExportMode\n        ) => {\n            setAnkiDialogDisabled(true);\n\n            try {\n                const result = await anki.export(\n                    text,\n                    definition,\n                    audioClip,\n                    image,\n                    word,\n                    source,\n                    url,\n                    customFieldValues,\n                    tags,\n                    mode\n                );\n\n                if (mode !== 'gui') {\n                    if (mode === 'default') {\n                        setAlertSeverity('success');\n                        setAlert('Exported card: ' + result);\n                        setAlertOpen(true);\n                    } else if (mode === 'updateLast') {\n                        setAlertSeverity('success');\n                        setAlert('Updated card: ' + result);\n                        setAlertOpen(true);\n                    }\n\n                    setAnkiDialogOpen(false);\n\n                    // We need the ref to avoid causing a state change that would re-init Player\n                    // It's a future task to make the Player init hook depend on less state\n                    if (ankiDialogRequestedRef.current) {\n                        setAnkiDialogFinishedRequest({ timestamp: Date.now(), resume: true });\n                        setAnkiDialogRequested(false);\n                    }\n                }\n            } catch (e) {\n                console.error(e);\n                if (e instanceof Error) {\n                    handleError(e.message);\n                } else {\n                    handleError(String(e));\n                }\n            } finally {\n                setAnkiDialogDisabled(false);\n                setDisableKeyEvents(false);\n            }\n        },\n        [anki, handleError]\n    );\n\n    const handleCopy = useCallback(\n        (\n            subtitle: SubtitleModel,\n            surroundingSubtitles: SubtitleModel[],\n            audioFile: File | undefined,\n            videoFile: File | undefined,\n            subtitleFile: File | undefined,\n            mediaTimestamp: number | undefined,\n            audioTrack: string | undefined,\n            filePlaybackRate: number | undefined,\n            audio: AudioModel | undefined,\n            image: ImageModel | undefined,\n            url: string | undefined,\n            postMineAction: PostMineAction | undefined,\n            preventDuplicate: boolean | undefined,\n            id: string | undefined\n        ) => {\n            if (subtitle && settingsProvider.copyToClipboardOnMine) {\n                navigator.clipboard.writeText(subtitle.text);\n            }\n\n            const newCopiedSubtitle = {\n                ...subtitle,\n                surroundingSubtitles: surroundingSubtitles,\n                timestamp: Date.now(),\n                id: id || uuidv4(),\n                name: fileName!,\n                subtitleFileName: subtitleFile?.name,\n                audioFile: audioFile,\n                videoFile: videoFile,\n                filePlaybackRate: filePlaybackRate,\n                mediaTimestamp: mediaTimestamp,\n                audioTrack: audioTrack,\n                audio: audio,\n                image: image,\n                url: url,\n            };\n\n            setCopiedSubtitles((copiedSubtitles) => {\n                if (preventDuplicate && copiedSubtitles.length > 0) {\n                    const last = copiedSubtitles[copiedSubtitles.length - 1];\n\n                    if (\n                        subtitle.start === last.start &&\n                        subtitle.end === last.end &&\n                        subtitle.text === last.text &&\n                        subtitleFile?.name === last.subtitleFileName\n                    ) {\n                        if (mediaTimestamp !== undefined && mediaTimestamp !== last.mediaTimestamp) {\n                            const newCopiedSubtitles = [...copiedSubtitles];\n                            newCopiedSubtitles[newCopiedSubtitles.length - 1] = newCopiedSubtitle;\n                            return newCopiedSubtitles;\n                        }\n\n                        return copiedSubtitles;\n                    }\n                }\n\n                // Note: we are not dealing with the case where an item with the given ID is already in the list\n                return [...copiedSubtitles, newCopiedSubtitle];\n            });\n\n            switch (postMineAction ?? PostMineAction.none) {\n                case PostMineAction.none:\n                    break;\n                case PostMineAction.showAnkiDialog:\n                    handleAnkiDialogRequest(newCopiedSubtitle);\n                    break;\n                case PostMineAction.updateLastCard:\n                    // FIXME: We should really rename the functions below because we're actually skipping the Anki dialog in this case\n                    setAnkiDialogRequested(true);\n                    let audioClip = audioClipFromItem(\n                        newCopiedSubtitle,\n                        undefined,\n                        settingsProvider.audioPaddingStart,\n                        settingsProvider.audioPaddingEnd\n                    );\n\n                    if (audioClip && settingsProvider.preferMp3) {\n                        audioClip = audioClip.toMp3();\n                    }\n\n                    handleAnkiDialogProceed(\n                        extractText(subtitle, surroundingSubtitles),\n                        '',\n                        audioClip,\n                        imageFromItem(\n                            newCopiedSubtitle,\n                            settingsProvider.maxImageWidth,\n                            settingsProvider.maxImageHeight\n                        ),\n                        '',\n                        itemSourceString(newCopiedSubtitle) ?? '',\n                        '',\n                        {},\n                        settingsProvider.tags,\n                        'updateLast'\n                    );\n                    break;\n                default:\n                    throw new Error('Unknown post mine action: ' + postMineAction);\n            }\n\n            if (subtitle) {\n                setAlertSeverity('success');\n                setAlert(\n                    subtitle.text === '' ? `Saved ${humanReadableTime(subtitle.start)}` : `Copied: \"${subtitle.text}\"`\n                );\n                setAlertOpen(true);\n            }\n\n            copyHistoryRepository.save(newCopiedSubtitle);\n        },\n        [fileName, settingsProvider, copyHistoryRepository, handleAnkiDialogProceed, handleAnkiDialogRequest]\n    );\n\n    useEffect(() => {\n        if (inVideoPlayer) {\n            return;\n        }\n\n        (async () => {\n            setCopiedSubtitles(await copyHistoryRepository.fetch(settingsProvider.miningHistoryStorageLimit));\n        })();\n    }, [inVideoPlayer, copyHistoryRepository, settingsProvider]);\n\n    const handleOpenCopyHistory = useCallback(() => {\n        setCopyHistoryOpen((copyHistoryOpen) => !copyHistoryOpen);\n        setVideoFullscreen(false);\n    }, []);\n    const handleCloseCopyHistory = useCallback(() => setCopyHistoryOpen(false), []);\n    const handleAppBarToggle = useCallback(() => {\n        const newValue = !playbackPreferences.theaterMode;\n        playbackPreferences.theaterMode = newValue;\n        setTheaterMode(newValue);\n        setVideoFullscreen(false);\n    }, [playbackPreferences]);\n    const handleFullscreenToggle = useCallback(() => {\n        setVideoFullscreen((fullscreen) => !fullscreen);\n    }, []);\n    useEffect(() => {\n        if (videoFullscreen) {\n            if (!document.fullscreenElement) {\n                document.documentElement.requestFullscreen();\n            }\n        } else if (document.fullscreenElement) {\n            document.exitFullscreen();\n        }\n    }, [videoFullscreen]);\n    useEffect(() => {\n        const listener = () => {\n            if (!document.fullscreenElement) {\n                setVideoFullscreen(false);\n            }\n        };\n        document.addEventListener('fullscreenchange', listener);\n        return () => document.removeEventListener('fullscreenchange', listener);\n    }, []);\n    const handleHideSubtitlePlayer = useCallback(() => {\n        setHideSubtitlePlayer((hidden) => !hidden);\n    }, []);\n    const handleVideoPopOut = useCallback(() => {\n        setVideoPopOut((videoPopOut) => !videoPopOut);\n    }, []);\n    const handleOpenSettings = useCallback(() => {\n        setDisableKeyEvents(true);\n        setSettingsDialogOpen(true);\n    }, []);\n    const handleAlertClosed = useCallback(() => setAlertOpen(false), []);\n    const handleImageDialogClosed = useCallback(() => setImageDialogOpen(false), []);\n    const handleCloseSettings = useCallback(\n        (newSettings: AsbplayerSettings) => {\n            settingsProvider.settings = newSettings;\n            setSettingsDialogOpen(false);\n            setSettingsDialogScrollToId(undefined);\n\n            // ATM only the Anki dialog may appear under the settings dialog,\n            // so it's the only one we need to check to re-enable key events\n            setDisableKeyEvents(ankiDialogOpen);\n\n            videoChannelRef.current?.subtitleSettings(settingsProvider.subtitleSettings);\n            videoChannelRef.current?.ankiSettings(settingsProvider.ankiSettings);\n            videoChannelRef.current?.miscSettings(settingsProvider.miscSettings);\n        },\n        [settingsProvider, ankiDialogOpen]\n    );\n\n    const handleDeleteCopyHistoryItem = useCallback(\n        (item: CopyHistoryItem) => {\n            const newCopiedSubtitles = [];\n\n            for (let subtitle of copiedSubtitles) {\n                if (item.id !== subtitle.id) {\n                    newCopiedSubtitles.push(subtitle);\n                }\n            }\n\n            setCopiedSubtitles(newCopiedSubtitles);\n            copyHistoryRepository.delete(item.id);\n        },\n        [copiedSubtitles, copyHistoryRepository]\n    );\n\n    const handleUnloadAudio = useCallback(\n        (audioFileUrl: string) => {\n            if (audioFileUrl !== sources.audioFileUrl) {\n                return;\n            }\n\n            setSources((previous) => {\n                URL.revokeObjectURL(audioFileUrl);\n\n                return {\n                    subtitleFiles: previous.subtitleFiles,\n                    audioFile: undefined,\n                    audioFileUrl: undefined,\n                    videoFile: previous.videoFile,\n                    videoFileUrl: previous.videoFileUrl,\n                };\n            });\n        },\n        [sources]\n    );\n\n    const handleUnloadVideo = useCallback(\n        (videoFileUrl: string) => {\n            if (videoFileUrl !== sources.videoFileUrl) {\n                return;\n            }\n\n            setSources((previous) => {\n                URL.revokeObjectURL(videoFileUrl);\n\n                return {\n                    subtitleFiles: previous.subtitleFiles,\n                    audioFile: previous.audioFile,\n                    audioFileUrl: previous.audioFileUrl,\n                    videoFile: undefined,\n                    videoFileUrl: undefined,\n                };\n            });\n            setVideoFullscreen(false);\n        },\n        [sources]\n    );\n\n    const handleClipAudio = useCallback(\n        async (item: CopyHistoryItem) => {\n            try {\n                const clip = await audioClipFromItem(\n                    item,\n                    undefined,\n                    settingsProvider.audioPaddingStart,\n                    settingsProvider.audioPaddingEnd\n                );\n\n                if (settingsProvider.preferMp3) {\n                    clip!.toMp3().download();\n                } else {\n                    clip!.download();\n                }\n            } catch (e) {\n                console.error(e);\n                if (e instanceof Error) {\n                    handleError(e.message);\n                } else {\n                    handleError(String(e));\n                }\n            }\n        },\n        [handleError, settingsProvider]\n    );\n\n    const handleDownloadImage = useCallback(\n        async (item: CopyHistoryItem) => {\n            try {\n                (await imageFromItem(\n                    item,\n                    settingsProvider.maxImageWidth,\n                    settingsProvider.maxImageHeight\n                ))!.download();\n            } catch (e) {\n                console.error(e);\n                if (e instanceof Error) {\n                    handleError(e.message);\n                } else {\n                    handleError(String(e));\n                }\n            }\n        },\n        [handleError, settingsProvider]\n    );\n\n    const handleDownloadCopyHistorySectionAsSrt = useCallback(\n        (name: string, items: CopyHistoryItem[]) => {\n            const deduplicated: SubtitleModel[] = [];\n\n            for (const item of items) {\n                if (\n                    deduplicated.find((i) => i.start === item.start && i.end === item.end && i.text === item.text) ===\n                    undefined\n                ) {\n                    deduplicated.push(item);\n                }\n            }\n\n            download(\n                new Blob([subtitleReader.subtitlesToSrt(deduplicated)], { type: 'text/plain' }),\n                `${name}_MiningHistory_${new Date().toISOString()}.srt`\n            );\n        },\n        [subtitleReader]\n    );\n\n    const handleSelectCopyHistoryItem = useCallback(\n        (item: CopyHistoryItem) => {\n            if (!subtitleFiles.find((f) => f.name === item.subtitleFileName)) {\n                handleError('Subtitle file ' + item.subtitleFileName + ' is not open.');\n                return;\n            }\n\n            setJumpToSubtitle({\n                text: item.text,\n                start: item.start,\n                end: item.end,\n                originalStart: item.originalStart,\n                originalEnd: item.originalEnd,\n                track: item.track,\n            });\n        },\n        [subtitleFiles, handleError]\n    );\n\n    const handleAnki = useCallback((item: CopyHistoryItem) => {\n        setAnkiDialogItem(item);\n        setAnkiDialogOpen(true);\n        setAnkiDialogDisabled(false);\n        setDisableKeyEvents(true);\n    }, []);\n\n    const handleAnkiDialogCancel = useCallback(() => {\n        setAnkiDialogOpen(false);\n        setAnkiDialogDisabled(false);\n        setDisableKeyEvents(false);\n\n        if (ankiDialogRequested) {\n            setAnkiDialogFinishedRequest({ timestamp: Date.now(), resume: true });\n            setAnkiDialogRequested(false);\n        }\n    }, [ankiDialogRequested]);\n\n    const handleAnkiDialogRewind = useCallback(() => {\n        if (!ankiDialogItem) {\n            return;\n        }\n\n        if (!subtitleFiles.find((f) => f.name === ankiDialogItem.subtitleFileName)) {\n            handleError('Subtitle file ' + ankiDialogItem.subtitleFileName + ' is not open.');\n            return;\n        }\n\n        const subtitle = {\n            text: ankiDialogItem.text,\n            start: ankiDialogItem.start,\n            end: ankiDialogItem.end,\n            originalStart: ankiDialogItem.originalStart,\n            originalEnd: ankiDialogItem.originalEnd,\n            track: ankiDialogItem.track,\n        };\n        setRewindSubtitle(subtitle);\n        setJumpToSubtitle(subtitle);\n\n        handleAnkiDialogCancel();\n    }, [ankiDialogItem, subtitleFiles, handleAnkiDialogCancel, handleError]);\n\n    const handleViewImage = useCallback((image: Image) => {\n        setImage(image);\n        setImageDialogOpen(true);\n    }, []);\n\n    useEffect(() => {\n        function onTabs(tabs: VideoTabModel[]) {\n            if (tabs.length !== availableTabs.length) {\n                setAvailableTabs(tabs);\n            } else {\n                let update = false;\n\n                for (let i = 0; i < availableTabs.length; ++i) {\n                    const t1 = availableTabs[i];\n                    const t2 = tabs[i];\n                    if (t1.id !== t2.id || t1.title !== t2.title || t1.src !== t2.src) {\n                        update = true;\n                        break;\n                    }\n                }\n\n                if (update) {\n                    setAvailableTabs(tabs);\n                }\n            }\n\n            let selectedTabMissing = tab && tabs.filter((t) => t.id === tab.id && t.src === tab.src).length === 0;\n\n            if (selectedTabMissing) {\n                setTab(undefined);\n                handleError('Lost connection with tab ' + tab!.id + ' ' + tab!.title);\n            }\n        }\n\n        return extension.subscribeTabs(onTabs);\n    }, [availableTabs, tab, extension, handleError]);\n\n    const handleTabSelected = useCallback((tab: VideoTabModel) => setTab(tab), []);\n\n    const handleFiles = useCallback(\n        (files: FileList | File[]) => {\n            try {\n                let { subtitleFiles, audioFile, videoFile } = extractSources(files);\n\n                setSources((previous) => {\n                    setLoading(true);\n\n                    let videoFileUrl = undefined;\n                    let audioFileUrl = undefined;\n\n                    if (videoFile || audioFile) {\n                        revokeUrls(previous);\n\n                        if (videoFile) {\n                            videoFileUrl = URL.createObjectURL(videoFile);\n                        } else if (audioFile) {\n                            audioFileUrl = URL.createObjectURL(audioFile);\n                        }\n\n                        setTab(undefined);\n                    } else {\n                        videoFile = previous.videoFile;\n                        videoFileUrl = previous.videoFileUrl;\n                        audioFile = previous.audioFile;\n                        audioFileUrl = previous.audioFileUrl;\n                    }\n\n                    const sources = {\n                        subtitleFiles: subtitleFiles.length === 0 ? previous.subtitleFiles : subtitleFiles,\n                        audioFile: audioFile,\n                        audioFileUrl: audioFileUrl,\n                        videoFile: videoFile,\n                        videoFileUrl: videoFileUrl,\n                    };\n\n                    return sources;\n                });\n\n                if (subtitleFiles.length > 0) {\n                    const subtitleFileName = subtitleFiles[0].name;\n                    setFileName(subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')));\n                }\n            } catch (e) {\n                console.error(e);\n                if (e instanceof Error) {\n                    handleError(e.message);\n                } else {\n                    handleError(String(e));\n                }\n            }\n        },\n        [handleError]\n    );\n\n    const handleDirectory = useCallback(\n        async (items: DataTransferItemList) => {\n            if (items.length !== 1) {\n                handleError('Cannot load more than one directory at a time');\n                return;\n            }\n\n            const fileSystemEntry = items[0].webkitGetAsEntry();\n\n            if (!fileSystemEntry || !fileSystemEntry.isDirectory) {\n                handleError('Failed to load directory');\n                return;\n            }\n\n            const fileSystemDirectoryEntry = fileSystemEntry as FileSystemDirectoryEntry;\n\n            try {\n                const entries = await new Promise<FileSystemEntry[]>((resolve, reject) =>\n                    fileSystemDirectoryEntry.createReader().readEntries(resolve, reject)\n                );\n\n                if (entries.find((e) => e.isDirectory)) {\n                    handleError('Cannot load a directory with subdirectories');\n                    return;\n                }\n\n                const filePromises = entries.map(\n                    (e) => new Promise<File>((resolve, reject) => (e as FileSystemFileEntry).file(resolve, reject))\n                );\n                const files: File[] = [];\n\n                for (const f of filePromises) {\n                    files.push(await f);\n                }\n\n                handleFiles(files);\n            } catch (e) {\n                console.error(e);\n                if (e instanceof Error) {\n                    handleError(e.message);\n                } else {\n                    handleError(String(e));\n                }\n            }\n        },\n        [handleError, handleFiles]\n    );\n\n    useEffect(() => {\n        if (inVideoPlayer) {\n            extension.startHeartbeat(true);\n            return undefined;\n        }\n\n        async function onMessage(message: ExtensionMessage) {\n            if (message.data.command === 'sync' || message.data.command === 'syncv2') {\n                const tabs = extension.tabs.filter((t) => {\n                    if (t.id !== message.tabId) {\n                        return false;\n                    }\n\n                    return !message.src || t.src === message.src;\n                });\n\n                if (tabs.length === 0) {\n                    if (message.src) {\n                        console.error(\n                            'Received sync request but the requesting tab ID ' +\n                                message.tabId +\n                                ' with src ' +\n                                message.src +\n                                ' was not found'\n                        );\n                    } else {\n                        console.error(\n                            'Received sync request but the requesting tab ID ' + message.tabId + ' was not found'\n                        );\n                    }\n\n                    return;\n                }\n\n                const tab = tabs[0];\n                let subtitleFiles: File[];\n                let flatten = false;\n\n                if (message.data.command === 'sync') {\n                    const syncMessage = message.data as LegacyPlayerSyncMessage;\n                    subtitleFiles = [\n                        new File(\n                            [await (await fetch('data:text/plain;base64,' + syncMessage.subtitles.base64)).blob()],\n                            syncMessage.subtitles.name\n                        ),\n                    ];\n                } else if (message.data.command === 'syncv2') {\n                    const syncMessage = message.data as PlayerSyncMessage;\n                    subtitleFiles = await Promise.all(\n                        syncMessage.subtitles.map(\n                            async (s) =>\n                                new File([await (await fetch('data:text/plain;base64,' + s.base64)).blob()], s.name)\n                        )\n                    );\n                    flatten = syncMessage.flatten ?? false;\n                } else {\n                    console.error('Unknown message ' + message.data.command);\n                    return;\n                }\n\n                const subtitleFileName = subtitleFiles[0].name;\n                setFileName(subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')));\n                setSources({\n                    subtitleFiles: subtitleFiles,\n                    flattenSubtitleFiles: flatten,\n                    audioFile: undefined,\n                    audioFileUrl: undefined,\n                    videoFile: undefined,\n                    videoFileUrl: undefined,\n                });\n                setTab(tab);\n            } else if (message.data.command === 'edit-keyboard-shortcuts') {\n                setSettingsDialogOpen(true);\n                setSettingsDialogScrollToId('keyboard-shortcuts');\n            } else if (message.data.command === 'open-asbplayer-settings') {\n                setSettingsDialogOpen(true);\n            }\n        }\n\n        const unsubscribe = extension.subscribe(onMessage);\n        extension.startHeartbeat(false);\n        return unsubscribe;\n    }, [extension, inVideoPlayer]);\n\n    const handleAutoPauseModeChangedViaBind = useCallback((oldPlayMode: PlayMode, newPlayMode: PlayMode) => {\n        switch (newPlayMode) {\n            case PlayMode.autoPause:\n                setAlert('Auto-pause: On');\n                break;\n            case PlayMode.condensed:\n                setAlert('Condensed playback: On');\n                break;\n            case PlayMode.normal:\n                if (oldPlayMode === PlayMode.autoPause) {\n                    setAlert('Auto-pause: Off');\n                } else if (oldPlayMode === PlayMode.condensed) {\n                    setAlert('Condensed playback: Off');\n                }\n                break;\n        }\n\n        setAlertSeverity('info');\n        setAlertOpen(true);\n    }, []);\n\n    const handleDrop = useCallback(\n        (e: React.DragEvent) => {\n            if (ankiDialogOpen) {\n                return;\n            }\n\n            e.preventDefault();\n\n            if (inVideoPlayer) {\n                handleError('Video player cannot receive dropped files. Drop outside of the video frame instead.');\n                return;\n            }\n\n            setDragging(false);\n            dragEnterRef.current = null;\n\n            function allDirectories(items: DataTransferItemList) {\n                for (let i = 0; i < items.length; ++i) {\n                    if (!items[i].webkitGetAsEntry()?.isDirectory) {\n                        return false;\n                    }\n                }\n\n                return true;\n            }\n\n            if (e.dataTransfer.items && e.dataTransfer.items.length > 0 && allDirectories(e.dataTransfer.items)) {\n                handleDirectory(e.dataTransfer.items);\n            } else if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n                handleFiles(e.dataTransfer.files);\n            }\n        },\n        [inVideoPlayer, handleError, handleFiles, handleDirectory, ankiDialogOpen]\n    );\n\n    const handleFileInputChange = useCallback(() => {\n        const files = fileInputRef.current?.files;\n\n        if (files && files.length > 0) {\n            handleFiles(files);\n        }\n    }, [handleFiles]);\n\n    const handleFileSelector = useCallback(() => fileInputRef.current?.click(), []);\n\n    const handleDownloadSubtitleFilesAsSrt = useCallback(async () => {\n        if (sources.subtitleFiles === undefined) {\n            return;\n        }\n\n        const nonSupSubtitleFiles = sources.subtitleFiles.filter((f) => !f.name.endsWith('.sup'));\n\n        if (nonSupSubtitleFiles.length === 0) {\n            return;\n        }\n\n        download(\n            new Blob([await subtitleReader.filesToSrt(nonSupSubtitleFiles)], {\n                type: 'text/plain',\n            }),\n            `${fileName}.srt`\n        );\n    }, [fileName, sources.subtitleFiles, subtitleReader]);\n\n    const handleDragOver = useCallback(\n        (e: React.DragEvent<HTMLDivElement>) => {\n            if (ankiDialogOpen) {\n                return;\n            }\n\n            e.preventDefault();\n        },\n        [ankiDialogOpen]\n    );\n\n    const handleDragEnter = useCallback(\n        (e: React.DragEvent<HTMLDivElement>) => {\n            if (ankiDialogOpen) {\n                return;\n            }\n\n            e.preventDefault();\n            e.stopPropagation();\n\n            if (!inVideoPlayer) {\n                dragEnterRef.current = e.target as Element;\n                setDragging(true);\n            }\n        },\n        [inVideoPlayer, ankiDialogOpen]\n    );\n\n    const handleDragLeave = useCallback(\n        (e: React.DragEvent<HTMLDivElement>) => {\n            e.nativeEvent.preventDefault();\n            e.nativeEvent.stopPropagation();\n\n            if (!inVideoPlayer && dragEnterRef.current === e.target) {\n                setDragging(false);\n            }\n        },\n        [inVideoPlayer]\n    );\n\n    const handleSourcesLoaded = useCallback(() => setLoading(false), []);\n\n    useEffect(() => {\n        var view = searchParams.get('view');\n        if (view === 'settings') {\n            setSettingsDialogOpen(true);\n\n            if (location.hash && location.hash.startsWith('#')) {\n                const id = location.hash.substring(1, location.hash.length);\n                setSettingsDialogScrollToId(id);\n            }\n        }\n    }, [searchParams, location]);\n\n    useEffect(() => {\n        if (alertOpen && alert && alertSeverity) {\n            videoChannelRef.current?.alert(alert, alertSeverity);\n        }\n    }, [alert, alertSeverity, alertOpen]);\n\n    if (location.pathname === '/' && searchParams.get('video')) {\n        return <NavigateToVideo searchParams={searchParams} />;\n    }\n\n    const nothingLoaded =\n        (loading && !videoFrameRef.current) ||\n        (sources.subtitleFiles.length === 0 && !sources.audioFile && !sources.videoFile);\n    const appBarHidden = sources.videoFile !== undefined && ((theaterMode && !videoPopOut) || videoFullscreen);\n    const effectiveCopyHistoryOpen = copyHistoryOpen && !videoFullscreen;\n\n    return (\n        <ThemeProvider theme={theme}>\n            <CssBaseline />\n            <div\n                onDrop={handleDrop}\n                onDragOver={handleDragOver}\n                onDragEnter={handleDragEnter}\n                onDragLeave={handleDragLeave}\n            >\n                <Alert open={alertOpen} onClose={handleAlertClosed} autoHideDuration={3000} severity={alertSeverity}>\n                    {alert}\n                </Alert>\n                <Routes>\n                    <Route\n                        path=\"/video\"\n                        element={\n                            <>\n                                <RenderVideo\n                                    searchParams={searchParams}\n                                    settingsProvider={settingsProvider}\n                                    playbackPreferences={playbackPreferences}\n                                    extension={extension}\n                                    ankiDialogFinishedRequest={ankiDialogFinishedRequest}\n                                    onAnkiDialogRequest={handleAnkiDialogRequestFromVideoPlayer}\n                                    onError={handleError}\n                                    onPlayModeChangedViaBind={handleAutoPauseModeChangedViaBind}\n                                />\n                                <AnkiDialog\n                                    open={ankiDialogOpen}\n                                    disabled={ankiDialogDisabled}\n                                    audioClip={ankiDialogAudioClip}\n                                    image={ankiDialogImage}\n                                    source={itemSourceString(ankiDialogItem)}\n                                    url={ankiDialogItem?.url}\n                                    sliderContext={ankiDialogItemSliderContext}\n                                    customFields={settingsProvider.customAnkiFields}\n                                    anki={anki}\n                                    settingsProvider={settingsProvider}\n                                    onCancel={handleAnkiDialogCancel}\n                                    onRewind={handleAnkiDialogRewind}\n                                    onProceed={handleAnkiDialogProceed}\n                                    onViewImage={handleViewImage}\n                                />\n                                <ImageDialog open={imageDialogOpen} image={image} onClose={handleImageDialogClosed} />\n                            </>\n                        }\n                    />\n                    <Route\n                        path=\"/\"\n                        element={\n                            <div>\n                                <CopyHistory\n                                    items={copiedSubtitles}\n                                    open={effectiveCopyHistoryOpen}\n                                    drawerWidth={drawerWidth}\n                                    onClose={handleCloseCopyHistory}\n                                    onDelete={handleDeleteCopyHistoryItem}\n                                    onClipAudio={handleClipAudio}\n                                    onDownloadImage={handleDownloadImage}\n                                    onDownloadSectionAsSrt={handleDownloadCopyHistorySectionAsSrt}\n                                    onSelect={handleSelectCopyHistoryItem}\n                                    onAnki={handleAnki}\n                                />\n                                <AnkiDialog\n                                    open={ankiDialogOpen}\n                                    disabled={ankiDialogDisabled}\n                                    audioClip={ankiDialogAudioClip}\n                                    image={ankiDialogImage}\n                                    source={itemSourceString(ankiDialogItem)}\n                                    url={ankiDialogItem?.url}\n                                    sliderContext={ankiDialogItemSliderContext}\n                                    customFields={settingsProvider.customAnkiFields}\n                                    anki={anki}\n                                    settingsProvider={settingsProvider}\n                                    onCancel={handleAnkiDialogCancel}\n                                    onRewind={handleAnkiDialogRewind}\n                                    onProceed={handleAnkiDialogProceed}\n                                    onViewImage={handleViewImage}\n                                    onOpenSettings={handleOpenSettings}\n                                />\n                                <ImageDialog open={imageDialogOpen} image={image} onClose={handleImageDialogClosed} />\n                                <SettingsDialog\n                                    anki={anki}\n                                    extension={extension}\n                                    open={settingsDialogOpen}\n                                    onClose={handleCloseSettings}\n                                    settings={settingsProvider.settings}\n                                    scrollToId={settingsDialogScrollToId}\n                                />\n                                <Bar\n                                    title={fileName || 'asbplayer'}\n                                    drawerWidth={drawerWidth}\n                                    drawerOpen={effectiveCopyHistoryOpen}\n                                    hidden={appBarHidden}\n                                    subtitleFiles={sources.subtitleFiles}\n                                    onOpenCopyHistory={handleOpenCopyHistory}\n                                    onDownloadSubtitleFilesAsSrt={handleDownloadSubtitleFilesAsSrt}\n                                    onOpenSettings={handleOpenSettings}\n                                    onFileSelector={handleFileSelector}\n                                />\n                                <input\n                                    ref={fileInputRef}\n                                    onChange={handleFileInputChange}\n                                    type=\"file\"\n                                    accept=\".srt,.ass,.vtt,.sup,.mp3,.m4a,.aac,.flac,.ogg,.wav,.opus,.mkv,.mp4,.avi\"\n                                    multiple\n                                    hidden\n                                />\n                                <Content drawerWidth={drawerWidth} drawerOpen={effectiveCopyHistoryOpen}>\n                                    <div style={{ width: '100%', height: '100%', position: 'relative' }}>\n                                        {nothingLoaded && (\n                                            <LandingPage\n                                                latestExtensionVersion={latestExtensionVersion}\n                                                extensionUrl={extensionUrl}\n                                                extension={extension}\n                                                loading={loading}\n                                                dragging={dragging}\n                                                appBarHidden={appBarHidden}\n                                                onFileSelector={handleFileSelector}\n                                            />\n                                        )}\n                                        <DragOverlay\n                                            dragging={dragging}\n                                            appBarHidden={appBarHidden}\n                                            loading={loading}\n                                        />\n                                    </div>\n                                    <Player\n                                        subtitleReader={subtitleReader}\n                                        settingsProvider={settingsProvider}\n                                        playbackPreferences={playbackPreferences}\n                                        onCopy={handleCopy}\n                                        onError={handleError}\n                                        onUnloadAudio={handleUnloadAudio}\n                                        onUnloadVideo={handleUnloadVideo}\n                                        onLoaded={handleSourcesLoaded}\n                                        onTabSelected={handleTabSelected}\n                                        onAnkiDialogRequest={handleAnkiDialogRequest}\n                                        onAppBarToggle={handleAppBarToggle}\n                                        onFullscreenToggle={handleFullscreenToggle}\n                                        onHideSubtitlePlayer={handleHideSubtitlePlayer}\n                                        onVideoPopOut={handleVideoPopOut}\n                                        onPlayModeChangedViaBind={handleAutoPauseModeChangedViaBind}\n                                        tab={tab}\n                                        availableTabs={availableTabs}\n                                        sources={sources}\n                                        jumpToSubtitle={jumpToSubtitle}\n                                        rewindSubtitle={rewindSubtitle}\n                                        videoFrameRef={videoFrameRef}\n                                        videoChannelRef={videoChannelRef}\n                                        extension={extension}\n                                        drawerOpen={effectiveCopyHistoryOpen}\n                                        appBarHidden={appBarHidden}\n                                        videoFullscreen={videoFullscreen}\n                                        hideSubtitlePlayer={hideSubtitlePlayer || videoFullscreen}\n                                        videoPopOut={videoPopOut}\n                                        disableKeyEvents={disableKeyEvents}\n                                        ankiDialogRequested={ankiDialogRequested}\n                                        ankiDialogFinishedRequest={ankiDialogFinishedRequest}\n                                        keyBinder={keyBinder}\n                                    />\n                                </Content>\n                            </div>\n                        }\n                    />\n                </Routes>\n            </div>\n        </ThemeProvider>\n    );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import '@fontsource/roboto';\nimport { createRoot } from 'react-dom/client';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\n\ncreateRoot(document.querySelector('#root')!).render(\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <App />\n    </BrowserRouter>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}