{"version":3,"sources":["hooks/useWindowSize/index.ts","../../common/src/KeySequence.ts","../../common/src/KeyEvents.ts","../../common/src/KeySequences.ts","../../common/src/KeyBindings.ts","../../common/src/Mp3Encoder.ts","../../common/src/mp3-encoder.js","../../common/src/Util.ts","../../common/src/AudioClip.ts","../../common/src/Model.ts","../../common/src/CanvasResizer.ts","../../common/src/Image.ts","../../common/src/Fetcher.ts","../../common/src/Anki.ts","components/Alert.tsx","../../common/components/src/TagsTextField.tsx","../../common/components/src/ImageDialog.tsx","../../common/components/src/SubtitleTextImage.tsx","../../common/components/src/AnkiDialog.tsx","components/background-colored.png","components/DragOverlay.tsx","services/pgs-parser/segment.ts","services/pgs-parser/buffer.ts","services/pgs-parser/parser.ts","services/SubtitleReader.ts","components/Bar.tsx","services/ChromeExtension.ts","services/Util.ts","components/CopyHistory.tsx","components/LandingPage.tsx","services/BroadcastChannelVideoProtocol.ts","services/ChromeTabVideoProtocol.ts","services/Clock.ts","components/Controls.tsx","services/MediaAdapter.ts","components/SubtitlePlayer.tsx","services/VideoChannel.ts","components/Player.tsx","components/CustomFieldDialog.tsx","components/SettingsDialog.tsx","services/SettingsProvider.ts","services/PlayerChannel.ts","components/VideoPlayer.tsx","components/App.tsx","reportWebVitals.js","index.tsx"],"names":["useWindowSize","enabled","useState","size","setSize","useLayoutEffect","updateSize","window","innerWidth","innerHeight","addEventListener","removeEventListener","KeySequenceTransitionResult","KeyEvents","event","ctrlKey","shiftKey","key","toLowerCase","detectDecreaseOffset","detectIncreaseOffset","detectIncreaseOffsetToPreviousSubtitle","detectDecreaseOffsetToNextSubtitle","detectCopy","KeySequence","up","holding","canceledBy","map","currentlyHolding","canceled","this","result","REJECTED","extra","type","includes","ADVANCED","CANCELED","_holdingAll","COMPLETE","KeySequences","Number","KeyBindings","onCopy","disabledGetter","subtitleGetter","useCapture","_bindDown","subtitle","onAnkiExport","detectAnkiExport","onUpdateLastCard","detectUpdateLastCard","onSeekToSubtitle","timeGetter","subtitlesGetter","subtitles","length","forward","detectPreviousSubtitle","detectNextSubtitle","_adjacentSubtitle","start","end","onSeekToBeginningOfCurrentSubtitle","detectCurrentSubtitle","_currentSubtitle","undefined","time","currentSubtitle","now","minDiff","MAX_SAFE_INTEGER","i","s","diff","onSeekBackwardOrForward","detectSeekBackward","detectSeekForward","onOffsetChange","subtitleStart","originalStart","adjacentSubtitleIndex","Math","max","increase","currentOffset","onToggleSubtitles","onSequenceAdvanced","sequence","toggleSubtitles","handler","reset","transition","accept","unbindDown","unbindUp","_bindUp","onToggleSubtitleTrack","toggleSubtitleTrack","onToggleSubtitleTrackInList","toggleSubtitleTrackInList","onPlay","detectPlay","onAutoPause","detectAutoPause","Mp3Encoder","blob","workerFactory","Promise","resolve","reject","a","reader","FileReader","onload","e","audioContext","AudioContext","target","Error","decodeAudioData","audioBuffer","channels","numberOfChannels","push","getChannelData","worker","postMessage","command","sampleRate","onmessage","Blob","data","buffer","terminate","onerror","error","message","readAsArrayBuffer","Worker_fn","Worker","humanReadableTime","timestamp","seconds","nearestTenth","totalSeconds","floor","round","minutes","hours","String","padStart","surroundingSubtitles","index","countRadius","timeRadius","startIndex","atBoundary","endIndex","slice","mockSurroundingSubtitles","middleSubtitle","maxTimestamp","offset","afterTimestamp","min","text","originalEnd","track","beforeTimestamp","unshift","initialIndex","sign","next","abs","download","name","url","URL","createObjectURL","document","createElement","body","appendChild","style","display","href","sanitize","click","revokeObjectURL","remove","PostMineAction","AutoPausePreference","PlayMode","AUDIO_TYPES","Object","keys","filter","MediaRecorder","isTypeSupported","t","recorderMimeType","recorderExtension","defaultMp3WorkerFactory","Base64AudioData","baseName","base64","extension","_name","_base64","_extension","cachedBlob","_blob","audio","Audio","src","preload","load","play","setTimeout","pause","fetch","FileAudioData","file","trackId","readAsDataURL","onloadend","substring","indexOf","_clipAudio","_audioElement","currentTime","_stopAudio","oncanplay","stream","_captureStream","recorder","mimeType","chunks","ondataavailable","onstop","stop","getAudioTracks","source","selectTrack","onloadedmetadata","audioTracks","id","captureStream","mozCaptureStream","audioStream","MediaStream","getVideoTracks","addTrack","Mp3AudioData","encode","isSliceable","AudioClip","mp3WorkerFactory","subtitleFileName","lastIndexOf","CanvasResizer","canvas","ctx","maxWidth","maxHeight","widthRatio","width","heightRatio","height","ratio","newWidth","newHeight","createImageBitmap","resizeWidth","resizeHeight","then","sprite","drawImage","catch","Base64ImageData","_dataUrl","FileImageData","_canvas","dataUrl","toDataURL","toBlob","video","_videoElement","videoWidth","videoHeight","getContext","resizer","resize","Image","bitMap","imageName","HttpFetcher","method","JSON","stringify","response","json","ankiQuerySpecialCharacters","Anki","settingsProvider","fetcher","ankiConnectUrl","_executeAction","modelName","word","query","wordField","_escapeQuery","escaped","char","definition","audioClip","image","customFieldValues","tags","mode","fields","_appendField","sentenceField","definitionField","sourceField","urlField","customFieldName","customAnkiFields","params","note","deckName","deck","noteType","options","allowDuplicate","duplicateScope","duplicateScopeOptions","checkChildren","gui","updateLast","audioField","sanitizedName","_sanitizeFileName","_storeMediaFile","fileName","filename","imageField","recentNotes","sort","lastNoteId","notes","infoResponse","noteId","info","value","fieldName","multiline","newValue","split","join","existingValue","replacement","action","version","useAlertStyles","makeStyles","root","justifyContent","position","top","pointerEvents","zIndex","Alert","props","classes","useEffect","open","timeout","onClose","autoHideDuration","clearTimeout","className","Grow","in","severity","children","TagsTextField","onTagsChange","setValue","handleChange","useCallback","currentValue","endsWith","newTags","splitTags","tag","trim","extractTagsFromString","TextField","onChange","useStyles","theme","backgroundSize","ImageDialog","resizeRatio","setDataUrl","setWidth","setHeight","windowWidth","windowHeight","img","fetchImage","Dialog","Card","CardMedia","title","SubtitleTextImage","availableWidth","scale","textImage","screen","alt","marginBottom","spacing","flexGrow","mediaField","cursor","rangeSelectSlider","transform","sliderMarksFromSliderContext","sliderContext","boundary","seenTimestamps","label","mark","sliderValueLabelFormat","ms","subtitleIntersectsTimeInterval","interval","ValueLabelComponent","Tooltip","enterTouchDelay","placement","useTextImageSetStyles","padding","backgroundColor","palette","disabledBackground","TextImageSet","selectedSubtitles","Paper","elevation","TextFieldEndAdornment","withStyles","InputAdornment","AnkiDialog","disabled","initialText","onProceed","onRewind","onCancel","onViewImage","onOpenSettings","onRerecord","initialAudioClip","initialSource","initialUrl","customFields","anki","initialDefinition","initialWord","initialCustomFieldValues","initialSelectedTimestampInterval","timestampInterval","forceInitialTimestampInterval","initialTimestampInterval","initialLastAppliedTimestampIntervalToText","lastAppliedTimestampIntervalToText","initialLastAppliedTimestampIntervalToAudio","lastAppliedTimestampIntervalToAudio","stateRef","setDefinition","setText","setWord","lastSearchedWord","setLastSearchedWord","setSource","setTags","setUrl","duplicateNotes","setDuplicateNotes","wordTimestamp","setWordTimestamp","setCustomFieldValues","setTimestampInterval","setSelectedSubtitles","setInitialTimestampInterval","initialTimestampBoundaryInterval","setInitialTimestampBoundaryInterval","timestampBoundaryInterval","setTimestampBoundaryInterval","timestampMarks","setTimestampMarks","setLastAppliedTimestampIntervalToText","setLastAppliedTimestampIntervalToAudio","setAudioClip","dialogRefCallback","element","getBoundingClientRect","current","subtitleEnd","boundaryIntervalFromSliderContext","newAudioClip","preferMp3","toMp3","audioPaddingStart","audioPaddingEnd","Date","trimmedWord","findNotesWithWord","console","wordHelperText","handlePlayAudio","preventDefault","stopPropagation","handleCustomFieldChange","newCustomFieldValues","assign","handleViewImage","handleTimestampIntervalChange","handleApplyTimestampIntervalToText","newText","handleApplyTimestampIntervalToAudio","handleResetTimestampInterval","handleZoomInTimestampInterval","newTimestampBoundaryInterval","handleCopyImageToClipboard","navigator","clipboard","ClipboardItem","pngBlob","write","disableApplyTextSelection","disableEnforceFocus","fullWidth","Toolbar","Typography","variant","IconButton","edge","onClick","DialogContent","ref","color","maxRows","InputProps","endAdornment","rows","helperText","findNotesWithWordGui","Grid","container","direction","item","Slider","valueLabelFormat","marks","step","valueLabelDisplay","marginTop","DialogActions","Button","dragging","appBarHidden","transparentBackground","content","flexDirection","alignItems","textAlign","backgroundRepeat","backgroundPosition","backgroundImage","coloredBackground","backgroundBlendMode","background","DragOverlay","loading","Fade","SegmentType","Uint8ArrayBuffer","subarray","CompositeBuffer","buffers","previousBuffersLength","bufferIndex","at","startBufferIndex","endBufferIndex","CompositeBufferReader","bytes","accumulated","shift","required","c","BufferGenerator","accumulatedBuffer","requestedBytes","getReader","read","done","add","BufferReader","_index","limit","number","digit","from","CompositionState","segmentTypeValues","values","segmentTypeFromByte","byte","LastInSequenceFlag","compositionStateValues","lastInSequenceFlagValues","RunLengthEncodedBuffer","encodedBuffer","callback","encodedIndex","decodedLineIndex","currentLine","encodedLength","firstByte","runLength","increment","secondByte","thirdByte","x","DisplaySet","presentationCompositionSegment","windowDefinitionSegments","paletteDefinitionSegments","objectDefinitionSegments","endDefinitionSegment","previousDisplaySet","find","ods","lastInSequenceFlag","firstInSequence","firstAndLastInSequence","paletteId","pds","compositionState","normal","paletteDefinitionSegment","firstOds","imageDataArray","Uint8ClampedArray","rgbaPalette","paletteEntries","ycrcbToRgba","objectData","decode","y","paletteIndex","imageDataOffset","r","g","b","ImageData","luminance","cb","colorDifferenceBlue","cr","colorDifferenceRed","clamp","transparency","parseDisplaySets","bufferGenerator","header","segmentType","pcs","wds","parsePcsSegment","parseWdsSegment","parsePdsSegment","parseOdsSegment","lastDisplaySet","magicNumber","readHex","presentationTimestamp","decodingTimestamp","segmentSize","compositionNumber","state","compositionStateFromByte","paletteUpdateFlag","paletteUpdateFlagFromByte","compositionObjectCount","objectId","windowId","objectCroppedFlag","objectCroppedFlagFromByte","objectHorizontalPosition","objectVerticalPosition","objectCroppingHorizontalPosition","objectCroppingVerticalPosition","objectCroppingWidth","objectCroppingHeightPosition","windowCount","windowDefinitions","windowHorizontalPosition","windowVerticalPosition","paletteVersionNumber","paletteEntryId","objectVersionNumber","flag","lastInSequenceFlagFromByte","objectDataLength","readBuffer","tagRegex","RegExp","assNewLineRegex","helperElement","helperCanvas","SubtitleReader","xmlParser","files","all","f","_subtitles","flatMap","nodes","n1","n2","parseSrt","node","cue","replace","isFromNetflix","parser","WebVTT","Parser","StringDecoder","cues","oncue","lines","newLines","line","_fixRTL","onflush","startTime","endTime","parse","flush","parseAss","dialogues","dialogue","slices","fragments","fragment","xml","_xmlParser","textNodes","elm","parseFloat","_decodeHTML","parsePgsDisplaySets","displaySet","currentImageDisplaySet","screenWidth","screenHeight","imageData","putImageData","index1","index2","newLine","innerHTML","childNodes","nodeValue","XMLParser","ignoreAttributes","subtitleNode","writeSrt","format","subtitlesToSrt","leftButton","marginRight","appBar","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","drawerWidth","easeOut","enteringScreen","copyHistoryButton","copyHistoryButtonShift","hide","useCopyHistoryTooltipStyles","tooltip","show","CopyHistoryTooltip","toolTipProps","Bar","drawerOpen","hidden","subtitleFiles","onOpenCopyHistory","onFileSelector","onDownloadSubtitleFilesAsSrt","menuOpen","setMenuOpen","menuAnchorEl","setMenuAnchorEl","canSaveAsSrt","handleFileAction","currentTarget","handleMenuClose","handleOpenFilesFromMenu","handleDownloadSubtitleFilesAsSrt","Popover","anchorEl","anchorOrigin","vertical","horizontal","ListItem","button","AppBar","clsx","disableFocusListener","disableHoverListener","disableTouchListener","component","rel","ChromeExtension","tabs","onMessageCallbacks","onTabsCallbacks","versionPromise","versionResolve","heartbeatStarted","uuidv4","sender","tabId","_sendHeartbeat","setInterval","receivedTabs","tab","_remove","callbacks","splice","computeStyles","subtitleColor","subtitleSize","subtitleOutlineThickness","subtitleOutlineColor","subtitleBackgroundOpacity","subtitleBackgroundColor","subtitleFontFamily","styles","fontSize","thickness","opacity","hex","exec","parseInt","hexToRgb","timeDurationDisplay","milliseconds","totalMilliseconds","includeMilliseconds","secs","mins","hrs","pad","n","zeros","drawer","flexShrink","drawerPaper","drawerHeader","mixins","toolbar","listContainer","overflowY","overflowX","listItem","hover","listItemGutters","paddingLeft","paddingRight","listItemIconRoot","minWidth","emptyState","emptyText","secondary","Menu","onSelect","onClipAudio","onDownloadImage","onDelete","handleCopy","writeText","handleJumpTo","handleClipAudio","handleDownloadImage","handleDelete","transformOrigin","ListItemText","primaryTypographyProps","primary","videoFile","audioFile","CopyHistory","scrollToBottomRefCallback","scrollIntoView","menuItem","setMenuItem","handleMenu","handleMenuClosed","items","currentKey","lastSeenItemName","itemNameCounters","itemsBySection","ListItemSecondaryAction","onDownloadSectionAsSrt","gutters","ListItemIcon","onAnki","wrap","Fragment","Drawer","anchor","paper","Divider","browseLink","LandingPage","latestExtensionVersion","extensionUrl","installedExtensionVersion","setInstalledExtensionVersion","installedVersion","fetchInstalledExtensionVersion","extensionUpdateAvailable","gt","extensionNotInstalled","Link","BroadcastChannelVideoProtocol","channelId","channel","onMessage","BroadcastChannel","that","close","ChromeTabVideoProtocol","listener","subscribe","sendMessage","unsubscribe","Clock","started","useControlStyles","left","bottom","buttonContainer","timeDisplay","marginLeft","offsetInput","volumeInputContainerShown","short","volumeInputContainerHidden","volumeInputHidden","volumeInputShown","volumeInputThumbHidden","volumeInputThumbShown","subContainer","inactiveButton","inactiveTopButton","progress","margin","topButton","gridContainer","useProgressBarStyles","mouseEventListener","fillContainer","fillContainerThick","easeInOut","fill","handleContainer","handle","borderRadius","handleOn","shortest","VolumeSlider","verticalAlign","thumb","boxShadow","active","displayTime","secondsInMinute","ProgressBar","onSeek","mouseOver","setMouseOver","containerRef","useRef","handleClick","rect","right","pageX","handleMouseOver","handleMouseOut","progressWidth","elementWidth","fillStyle","handleStyle","fillContainerClassName","handleClassName","onMouseOver","onMouseOut","AudioTrackSelector","selectedAudioTrack","onAudioTrackSelected","list","selected","language","TabSelector","selectedTab","onTabSelected","MediaUnloader","onUnload","PlayModeSelector","selectedPlayMode","onPlayMode","condensed","autoPause","Controls","clock","playing","offsetEnabled","displayLength","mousePositionRef","onShow","onPause","onUnloadAudio","onUnloadVideo","onVolumeChange","disableKeyEvents","closeEnabled","volumeEnabled","playMode","playModeEnabled","subtitlesEnabled","subtitlesToggle","onSubtitlesToggle","popOutEnabled","popOut","onPopOutToggle","fullscreenEnabled","fullscreen","onFullscreenToggle","hideSubtitlePlayerToggleEnabled","subtitlePlayerHidden","onHideSubtitlePlayerToggle","showOnMouseMovement","theaterModeToggleEnabled","theaterModeEnabled","onTheaterModeToggle","setShow","audioTrackSelectorOpen","setAudioTrackSelectorOpen","audioTrackSelectorAnchorEl","setAudioTrackSelectorAnchorEl","tabSelectorOpen","setTabSelectorOpen","tabSelectorAnchorEl","setTabSelectorAnchorEl","audioUnloaderOpen","setAudioUnloaderOpen","audioUnloaderAnchorEl","setAudioUnloaderAnchorEl","videoUnloaderOpen","setVideoUnloaderOpen","videoUnloaderAnchorEl","setVideoUnloaderAnchorEl","playModeSelectorOpen","setPlayModeSelectorOpen","playModeSelectorAnchorEl","setPlayModeSelectorAnchorEl","showVolumeBar","setShowVolumeBar","volume","setVolume","lastCommittedVolume","setLastCommittedVolume","lastMousePositionRef","lastShowTimestampRef","lastOffsetInputChangeTimestampRef","lastShowRef","forceShowRef","offsetInputRef","closeButtonRef","updateState","forceUpdate","handleSeek","savedVolume","currentShow","pow","offsetTop","offsetHeight","activeElement","clearInterval","handleKey","isNaN","blur","handleOffsetInputClicked","inputElement","setSelectionRange","offsetSeconds","toFixed","handleAudioTrackSelectorClosed","handleAudioTrackSelectorOpened","handleAudioTrackSelected","handleTabSelectorClosed","handleTabSelectorOpened","handleTabSelected","handleAudioUnloaderClosed","handleAudioUnloaderOpened","handleUnloadAudio","handleVideoUnloaderClosed","handleVideoUnloaderOpened","handleUnloadVideo","handlePlayModeSelectorClosed","handlePlayModeSelectorOpened","handlePlayModeSelected","handleVolumeMouseOut","handleVolumeMouseOver","handleVolumeChange","handleVolumeChangeCommitted","handleVolumeToggle","newVolume","onChangeCommitted","defaultValue","Input","inputRef","disableUnderline","placeholder","MediaAdapter","readyResolves","_onMediaCanPlay","readyState","useSubtitlePlayerStyles","default","compressed","table","noSubtitles","useSubtitleRowStyles","subtitleRow","overflowWrap","whiteSpace","compressedSubtitle","disabledSubtitle","copyButton","SubtitleRow","React","memo","subtitleRef","onClickSubtitle","onCopySubtitle","tableRowProps","textRef","textSelected","setTextSelected","disabledClassName","availWidth","TableRow","onMouseUp","selection","getSelection","isSameNode","anchorNode","parentNode","TableCell","SubtitlePlayer","onStartedShowing","onWillStopShowing","jumpToSubtitle","displayHelp","lastJumpToTopTimestamp","disabledSubtitleTracks","playingRef","clockRef","subtitleListRef","subtitleRefs","useMemo","Array","_","createRef","subtitleRefsRef","disableKeyEventsRef","selectedSubtitleIndexes","setSelectedSubtitleIndexes","selectedSubtitleIndexesRef","lengthRef","hiddenRef","lastScrollTimestampRef","requestAnimationRef","startedShowingSubtitleRef","onStartedShowingRef","willStopShowingSubtitleRef","onWillStopShowingRef","requestAnimationFrame","update","startedShowingSubtitle","willStopShowingSubtitle","smallestIndex","fallbackIndex","startedShowing","willStopShowing","currentSubtitleIndexes","keysAreEqual","scrollToSubtitleRef","allowScroll","block","inline","behavior","cancelAnimationFrame","scrollToCurrentSubtitle","indexes","scrollIfVisible","visibilityState","firstSubtitleRef","unbind","bindAdjustOffset","bindOffsetToSubtitle","bindSeekToSubtitle","bindSeekToBeginningOfCurrentSubtitle","bindSeekBackwardOrForward","handleScroll","jumpToIndex","calculateSurroundingSubtitlesForIndex","surroundingSubtitlesCountRadius","surroundingSubtitlesTimeRadius","calculateSurroundingSubtitles","bindCopy","none","subtitleIndexes","bindToggleSubtitleTrackInList","bindAnkiExport","showAnkiDialog","bindUpdateLastCard","updateLastCard","subtitleTable","TableContainer","Table","TableBody","square","VideoChannel","protocol","isReady","readyCallbacks","playCallbacks","pauseCallbacks","audioTrackSelectedCallbacks","currentTimeCallbacks","exitCallbacks","offsetCallbacks","popOutToggleCallbacks","copyCallbacks","playModeCallbacks","hideSubtitlePlayerToggleCallbacks","appBarToggleCallbacks","ankiDialogRequestCallbacks","toggleSubtitleTrackInListCallbacks","readyMessage","paused","readyStateMessage","Event","playMessage","echo","pauseMessage","audioTrackSelectedMessage","currentTimeMessage","offsetMessage","copyMessage","postMineAction","preventDuplicate","ankiDialogRequestMessage","forwardToVideo","toggleSubtitleTrackInListMessage","subtitleFileNames","names","settings","resume","videoFrame","border","trackLength","audioRef","videoRef","useOffset","subtitlesLength","audioLength","videoLength","Player","sources","audioFileUrl","videoFileUrl","subtitleReader","videoFrameRef","videoPopOut","availableTabs","ankiDialogRequestToVideo","ankiDialogRequested","ankiDialogFinishedRequest","onError","onLoaded","onAnkiDialogRequest","onAppBarToggle","onVideoPopOut","onAutoPauseModeChangedViaBind","rewindSubtitle","setSubtitles","subtitlesRef","loadingSubtitles","setLoadingSubtitles","setPlaying","setLastJumpToTopTimestamp","setOffset","setAudioTracks","setSelectedAudioTrack","setChannelId","setResumeOnFinishedAnkiDialogRequest","hideSubtitlePlayer","setHideSubtitlePlayer","hideSubtitlePlayerRef","setDisabledSubtitleTracks","setPlayMode","playModeRef","mediaAdapter","seek","forwardToMedia","setTime","applyOffset","newSubtitles","channelClosed","onReady","init","subscribed","onExit","hideSubtitlePlayerToggle","ready","subtitleSettings","ankiSettings","miscSettings","onOffset","fromVideo","onCurrentTime","tracks","newTracks","ankiDialogRequest","finishedAnkiDialogRequest","resumeOnFinishedAnkiDialogRequest","seeking","expectedSeekTime","currentOrNextIndex","currentIndex","nextSubtitle","t0","handleOnStartedShowingSubtitle","autoPausePreference","atStart","handleOnWillStopShowingSubtitle","atEnd","process","encodeURIComponent","handlePlay","handlePause","handleSeekToSubtitle","shouldPlay","handleCopyFromSubtitlePlayer","handleMouseMove","screenX","screenY","audioTrackSelected","handleOffsetChange","HTMLMediaElement","handlePlayMode","handleToggleSubtitleTrack","bindPlay","bindAutoPause","newPlayMode","unbindCopy","unbindAnkiExport","appBarToggle","loaded","videoInWindow","Boolean","onMouseMove","CustomFieldDialog","existingCustomFieldNames","setFieldName","fieldExists","DialogTitle","subtitleSetting","subtitlePreview","subtitlePreviewInput","outline","addFieldButton","useSelectableSettingStyles","formControl","SelectableSetting","selections","removable","onSelectionChange","onRemoval","FormControl","InputLabel","Select","MenuItem","SettingsDialog","setAnkiConnectUrl","ankiConnectUrlError","setAnkiConnectUrlError","ankiConnectUrlChangeTimestamp","setAnkiConnectUrlChangeTimestamp","setDeck","deckNames","setDeckNames","setNoteType","modelNames","setModelNames","setSentenceField","setDefinitionField","setAudioField","setImageField","setWordField","setSourceField","setUrlField","setCustomFields","setPreferMp3","fieldNames","setFieldNames","customFieldDialogOpen","setCustomFieldDialogOpen","setAudioPaddingStart","setAudioPaddingEnd","maxImageWidth","setMaxImageWidth","maxImageHeight","setMaxImageHeight","setSubtitleColor","setSubtitleSize","setSubtitleOutlineColor","setSubtitleOutlineThickness","setSubtitleBackgroundColor","setSubtitleBackgroundOpacity","setSubtitleFontFamily","imageBasedSubtitleScaleFactor","setImageBasedSubtitleScaleFactor","setSubtitlePreview","themeType","setThemeType","copyToClipboardOnMine","setCopyToClipboardOnMine","setAutoPausePreference","handleAnkiConnectUrlChange","handleRetryAnkiConnectUrl","handleDeckChange","handleDeckSelectionChange","handleNoteTypeChange","handleNoteTypeSelectionChange","handleSentenceFieldChange","handleSentenceFieldSelectionChange","handleDefinitionFieldChange","handleDefinitionFieldSelectionChange","handleAudioFieldChange","handleAudioFieldSelectionChange","handleImageFieldChange","handleImageFieldSelectionChange","handleWordFieldChange","handleWordFieldSelectionChange","handleSourceFieldChange","handleSourceFieldSelectionChange","handleUrlFieldChange","handleUrlFieldSelectionChange","handleAudioPaddingStart","handleAudioPaddingEnd","handleMaxImageWidth","handleMaxImageHeight","handleSubtitleColorChange","handleSubtitleSizeChange","handleSubtitleOutlineColorChange","handleSubtitleOutlineThicknessChange","handleSubtitleBackgroundColorChange","handleSubtitleBackgroundOpacityChange","handleSubtitleFontFamilyChange","handleSubtitlePreviewChange","handleImageBasedSubtitleScaleFactorChange","handleAddCustomField","oldCustomFields","newCustomFields","handleCustomFieldRemoval","handleTagsChange","handlePreferMp3Change","checked","handleThemeTypeChange","handleCopyToClipboardOnMine","handleAutoPausePreferenceChange","subtitlePreviewStyles","requestPermission","refreshFieldNames","modelFieldNames","handleClose","theaterMode","customFieldInputs","FormLabel","FormGroup","FormHelperText","location","hostname","FormControlLabel","control","Checkbox","inputProps","Radio","defaultAutoPausePreference","ankiConnectUrlKey","deckKey","noteTypeKey","sentenceFieldKey","definitionFieldKey","audioFieldKey","imageFieldKey","wordFieldKey","sourceFieldKey","urlFieldKey","customAnkiFieldsKey","tagsKey","subtitleSizeKey","subtitleColorKey","subtitleOutlineThicknessKey","subtitleOutlineColorKey","subtitleBackgroundColorKey","subtitleBackgroundOpacityKey","subtitleFontFamilyKey","subtitlePreviewKey","imageBasedSubtitleScaleFactorKey","audioPaddingStartKey","audioPaddingEndKey","maxImageWidthKey","maxImageHeightKey","volumeKey","theaterModeKey","preferMp3Key","themeTypeKey","copyToClipboardOnMineKey","autoPausePreferenceKey","SettingsProvider","_tags","newSettings","localStorage","getItem","removeItem","setItem","_setOptionalItem","ankiFieldsString","tagsString","_getNumberItem","PlayerChannel","closeCallbacks","subtitlesCallbacks","finishedAnkiDialogRequestCallbacks","subtitlesMessage","playModeMessage","hideSubtitlePlayerToggleMessage","appBarToggleMessage","finishedAnkiDialogRequestMessage","playbackRate","overflow","cursorHidden","subtitleContainer","lineHeight","notifyReady","playerChannel","outerWidth","availHeight","outerHeight","resizeTo","selectedTrack","VideoPlayer","poppingInRef","fullscreenElement","setFullscreen","useFullscreen","fullscreenRef","setLength","showSubtitles","setShowSubtitles","setSubtitlesEnabled","setSubtitlePlayerHidden","setAppBarHidden","showSubtitlesRef","showCursor","setShowCursor","lastMouseMovementTimestamp","alert","setAlert","alertOpen","setAlertOpen","returnToFullscreenOnFinishedAnkiDialogRequest","setReturnToFullscreenOnFinishedAnkiDialogRequest","returnToFullscreenOnFinishedAnkiDialogRequestRef","videoRefCallback","videoElement","onloadeddata","ontimeupdate","code","errorMessage","selectAudioTrack","onSubtitles","exitFullscreen","onFinishedAnkiDialogRequest","requestFullscreen","onbeforeunload","equals","arrayEquals","s1","s2","copy","bindToggleSubtitles","bindToggleSubtitleTrackInVideo","extractSubtitles","noSubtitleCallback","subtitleCallback","handleSubtitlesToggle","handleFullscreenToggle","handlePopOutToggle","popOutToggle","handleHideSubtitlePlayerToggle","handleTheaterModeToggle","handleDoubleClick","handleAlertClosed","subtitleStyles","bounds","clientX","clientY","controls","onDoubleClick","isMobile","useContentStyles","contentShift","audioClipFromItem","paddingStart","paddingEnd","fromBase64","subtitleFile","fromFile","audioTrack","imageFromItem","mediaTimestamp","itemSourceString","NavigateToVideo","searchParams","get","to","RenderVideo","Content","App","createTheme","main","red","A400","useLocation","useSearchParams","inVideoPlayer","pathname","drawerRatio","minDrawerSize","copiedSubtitles","setCopiedSubtitles","copiedSubtitlesRef","copyHistoryOpen","setCopyHistoryOpen","setTheaterMode","setVideoPopOut","alertSeverity","setAlertSeverity","setJumpToSubtitle","setRewindSubtitle","setSources","setLoading","setDragging","dragEnterRef","setFileName","ankiDialogOpen","setAnkiDialogOpen","ankiDialogDisabled","setAnkiDialogDisabled","ankiDialogItem","setAnkiDialogItem","ankiDialogItemSliderContext","itemSliderContext","ankiDialogAudioClip","ankiDialogImage","setAnkiDialogRequestToVideo","setAnkiDialogRequested","setAnkiDialogFinishedRequest","settingsDialogOpen","setSettingsDialogOpen","imageDialogOpen","setImageDialogOpen","setDisableKeyEvents","setImage","setTab","setAvailableTabs","fileInputRef","ankiDialogRequestedRef","handleError","handleAnkiDialogRequest","handleAnkiDialogProceed","export","newCopiedSubtitle","last","newCopiedSubtitles","handleOpenCopyHistory","handleCloseCopyHistory","handleAppBarToggle","handleVideoPopOut","handleOpenSettings","handleImageDialogClosed","handleCloseSettings","subtitleSettingsMessage","ankiSettingsMessage","miscSettingsMessage","publishMessage","handleDeleteCopyHistoryItem","previous","clip","handleDownloadCopyHistorySectionAsSrt","deduplicated","toISOString","handleSelectCopyHistoryItem","handleAnki","handleAnkiDialogCancel","handleAnkiDialogRewind","onTabs","t1","t2","subscribeTabs","unsubscribeTabs","handleFiles","extensionStartIndex","extractSources","revokeUrls","handleDirectory","fileSystemEntry","webkitGetAsEntry","isDirectory","fileSystemDirectoryEntry","createReader","readEntries","entries","filePromises","startHeartbeat","syncMessage","File","handleAutoPauseModeChangedViaBind","handleDrop","dataTransfer","allDirectories","handleFileInputChange","handleFileSelector","nonSupSubtitleFiles","filesToSrt","handleDragOver","handleDragEnter","handleDragLeave","nativeEvent","handleSourcesLoaded","nothingLoaded","ThemeProvider","CssBaseline","onDrop","onDragOver","onDragEnter","onDragLeave","path","multiple","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","createRoot","querySelector","render","basename"],"mappings":"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","file":"static/js/main.04c69ea2.chunk.js","sourcesContent":["import { useLayoutEffect, useState } from 'react';\r\n\r\n// https://stackoverflow.com/questions/19014250/rerender-view-on-browser-resize-with-react\r\nexport function useWindowSize(enabled: boolean) {\r\n    const [size, setSize] = useState([0, 0]);\r\n\r\n    useLayoutEffect(() => {\r\n        function updateSize() {\r\n            if (enabled) {\r\n                setSize([window.innerWidth, window.innerHeight]);\r\n            }\r\n        }\r\n\r\n        window.addEventListener('resize', updateSize);\r\n        updateSize();\r\n\r\n        return () => window.removeEventListener('resize', updateSize);\r\n    }, [enabled]);\r\n\r\n    return size;\r\n}\r\n","export enum KeySequenceTransitionResult {\r\n    REJECTED = 0,\r\n    CANCELED = 1,\r\n    ADVANCED = 2,\r\n    COMPLETE = 3,\r\n}\r\n\r\nexport interface KeySequenceOptions {\r\n    up?: string[];\r\n    holding?: string[];\r\n    canceledBy?: string[];\r\n    map?: (event: KeyboardEvent) => any;\r\n}\r\n\r\nexport interface KeySequenceTransition {\r\n    result: KeySequenceTransitionResult;\r\n    extra?: any;\r\n}\r\n\r\nexport default class KeySequence {\r\n    private up: string[];\r\n    private holding: string[];\r\n    private canceledBy: string[];\r\n    private map: (event: KeyboardEvent) => any;\r\n    private currentlyHolding: { [key: string]: boolean };\r\n    private canceled: boolean;\r\n\r\n    constructor({ up, holding, canceledBy, map }: KeySequenceOptions) {\r\n        this.up = up || [];\r\n        this.holding = holding || [];\r\n        this.canceledBy = canceledBy || [];\r\n        this.map = map || ((event: KeyboardEvent) => true);\r\n        this.currentlyHolding = {};\r\n        this.canceled = false;\r\n    }\r\n\r\n    reset() {\r\n        this.currentlyHolding = {};\r\n        this.canceled = false;\r\n    }\r\n\r\n    accept(event: KeyboardEvent): KeySequenceTransition {\r\n        let result = KeySequenceTransitionResult.REJECTED;\r\n        let extra = null;\r\n\r\n        if (event.type === 'keydown') {\r\n            const key = event.key.toLowerCase();\r\n\r\n            if (this.holding.includes(key)) {\r\n                this.currentlyHolding[key] = true;\r\n                this.canceled = false;\r\n                result = KeySequenceTransitionResult.ADVANCED;\r\n            }\r\n\r\n            if (this.canceledBy.includes(key)) {\r\n                this.canceled = true;\r\n                result = KeySequenceTransitionResult.CANCELED;\r\n            }\r\n\r\n            if (this.up.includes(key)) {\r\n                this.canceled = false;\r\n                result = KeySequenceTransitionResult.ADVANCED;\r\n            }\r\n        }\r\n\r\n        if (event.type === 'keyup') {\r\n            const key = event.key.toLowerCase();\r\n            delete this.currentlyHolding[key];\r\n\r\n            if (this.up.includes(key) && this._holdingAll() && !this.canceled) {\r\n                extra = this.map(event);\r\n                result = KeySequenceTransitionResult.COMPLETE;\r\n            }\r\n        }\r\n\r\n        return { result: result, extra: extra };\r\n    }\r\n\r\n    _holdingAll() {\r\n        for (const key of this.holding) {\r\n            if (!(key in this.currentlyHolding)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n","export default class KeyEvents {\r\n    static detectCopy(event: KeyboardEvent) {\r\n        // Ctrl + Shift + A\r\n        return event.ctrlKey && event.shiftKey && event.key.toLowerCase() === 'a';\r\n    }\r\n\r\n    static detectDecreaseOffset(event: KeyboardEvent) {\r\n        // Ctrl + Shift + Right\r\n        return event.ctrlKey && event.shiftKey && event.key === 'ArrowRight';\r\n    }\r\n\r\n    static detectAnkiExport(event: KeyboardEvent) {\r\n        // Ctrl + Shift + Q\r\n        return event.ctrlKey && event.shiftKey && event.key.toLowerCase() === 'q';\r\n    }\r\n\r\n    static detectUpdateLastCard(event: KeyboardEvent) {\r\n        // Ctrl + Shift + Y\r\n        return event.ctrlKey && event.shiftKey && event.key.toLowerCase() === 'y';\r\n    }\r\n\r\n    static detectIncreaseOffset(event: KeyboardEvent) {\r\n        // Ctrl + Shift + Left\r\n        return event.ctrlKey && event.shiftKey && event.key === 'ArrowLeft';\r\n    }\r\n\r\n    static detectDecreaseOffsetToNextSubtitle(event: KeyboardEvent) {\r\n        // Ctrl + Right\r\n        return (\r\n            !KeyEvents.detectDecreaseOffset(event) && (event.ctrlKey || event.shiftKey) && event.key === 'ArrowRight'\r\n        );\r\n    }\r\n\r\n    static detectIncreaseOffsetToPreviousSubtitle(event: KeyboardEvent) {\r\n        // Ctrl + Left\r\n        return !KeyEvents.detectIncreaseOffset(event) && (event.ctrlKey || event.shiftKey) && event.key === 'ArrowLeft';\r\n    }\r\n\r\n    static detectPreviousSubtitle(event: KeyboardEvent) {\r\n        // Left\r\n        return (\r\n            !KeyEvents.detectIncreaseOffset(event) &&\r\n            !KeyEvents.detectIncreaseOffsetToPreviousSubtitle(event) &&\r\n            event.key === 'ArrowLeft'\r\n        );\r\n    }\r\n\r\n    static detectNextSubtitle(event: KeyboardEvent) {\r\n        // Right\r\n        return (\r\n            !KeyEvents.detectDecreaseOffset(event) &&\r\n            !KeyEvents.detectDecreaseOffsetToNextSubtitle(event) &&\r\n            event.key === 'ArrowRight'\r\n        );\r\n    }\r\n\r\n    static detectCurrentSubtitle(event: KeyboardEvent) {\r\n        // Down\r\n        return event.key === 'ArrowDown';\r\n    }\r\n\r\n    static detectSeekBackward(event: KeyboardEvent) {\r\n        // A\r\n        return !KeyEvents.detectCopy(event) && event.key.toLowerCase() === 'a';\r\n    }\r\n\r\n    static detectSeekForward(event: KeyboardEvent) {\r\n        // D\r\n        return event.key.toLowerCase() === 'd';\r\n    }\r\n\r\n    static detectPlay(event: KeyboardEvent) {\r\n        // Space\r\n        return event.key === ' ';\r\n    }\r\n\r\n    static detectAutoPause(event: KeyboardEvent) {\r\n        // Shift + P\r\n        return event.shiftKey && event.key.toLowerCase() === 'p';\r\n    }\r\n}\r\n","import KeySequence from './KeySequence';\r\n\r\nexport default class KeySequences {\r\n    static toggleSubtitles() {\r\n        // Up S, canceled by 1...9\r\n        return new KeySequence({ up: ['s'], canceledBy: ['1', '2', '3', '4', '5', '6', '7', '8', '9'] });\r\n    }\r\n\r\n    static toggleSubtitleTrack() {\r\n        // Holding S, up 1...9\r\n        return new KeySequence({\r\n            holding: ['s'],\r\n            up: ['1', '2', '3', '4', '5', '6', '7', '8', '9'],\r\n            map: (event) => Number(event.key) - 1,\r\n        });\r\n    }\r\n\r\n    static toggleSubtitleTrackInList() {\r\n        // Holding W, up 1...9\r\n        return new KeySequence({\r\n            holding: ['w'],\r\n            up: ['1', '2', '3', '4', '5', '6', '7', '8', '9'],\r\n            map: (event) => Number(event.key) - 1,\r\n        });\r\n    }\r\n\r\n    static togglePlay() {\r\n        // Space\r\n        return new KeySequence({\r\n            up: [' '],\r\n            canceledBy: ['a', 'd'],\r\n        });\r\n    }\r\n}\r\n","import { SubtitleModel } from './Model';\r\nimport KeyEvents from './KeyEvents';\r\nimport { KeySequenceTransitionResult } from './KeySequence';\r\nimport KeySequences from './KeySequences';\r\n\r\nexport default class KeyBindings {\r\n    static bindCopy<T extends SubtitleModel = SubtitleModel>(\r\n        onCopy: (event: KeyboardEvent, subtitle: T) => void,\r\n        disabledGetter: () => boolean,\r\n        subtitleGetter: () => T | undefined,\r\n        useCapture = false\r\n    ) {\r\n        return KeyBindings._bindDown((event) => {\r\n            if (disabledGetter()) {\r\n                return;\r\n            }\r\n\r\n            if (!KeyEvents.detectCopy(event)) {\r\n                return;\r\n            }\r\n\r\n            const subtitle = subtitleGetter();\r\n\r\n            if (!subtitle) {\r\n                return;\r\n            }\r\n\r\n            onCopy(event, subtitle);\r\n        }, useCapture);\r\n    }\r\n\r\n    static bindAnkiExport(\r\n        onAnkiExport: (event: KeyboardEvent) => void,\r\n        disabledGetter: () => boolean,\r\n        useCapture = false\r\n    ) {\r\n        return KeyBindings._bindDown((event) => {\r\n            if (disabledGetter()) {\r\n                return;\r\n            }\r\n\r\n            if (!KeyEvents.detectAnkiExport(event)) {\r\n                return;\r\n            }\r\n\r\n            onAnkiExport(event);\r\n        }, useCapture);\r\n    }\r\n\r\n    static bindUpdateLastCard(\r\n        onUpdateLastCard: (event: KeyboardEvent) => void,\r\n        disabledGetter: () => boolean,\r\n        useCapture = false\r\n    ) {\r\n        return KeyBindings._bindDown((event) => {\r\n            if (disabledGetter()) {\r\n                return;\r\n            }\r\n\r\n            if (!KeyEvents.detectUpdateLastCard(event)) {\r\n                return;\r\n            }\r\n\r\n            onUpdateLastCard(event);\r\n        }, useCapture);\r\n    }\r\n\r\n    static bindSeekToSubtitle(\r\n        onSeekToSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\r\n        disabledGetter: () => boolean,\r\n        timeGetter: () => number,\r\n        subtitlesGetter: () => SubtitleModel[] | undefined,\r\n        useCapture = false\r\n    ) {\r\n        return KeyBindings._bindDown((event) => {\r\n            if (disabledGetter()) {\r\n                return;\r\n            }\r\n\r\n            const subtitles = subtitlesGetter();\r\n\r\n            if (!subtitles || subtitles.length === 0) {\r\n                return;\r\n            }\r\n\r\n            let forward;\r\n\r\n            if (KeyEvents.detectPreviousSubtitle(event)) {\r\n                forward = false;\r\n            } else if (KeyEvents.detectNextSubtitle(event)) {\r\n                forward = true;\r\n            } else {\r\n                return;\r\n            }\r\n\r\n            const subtitle = KeyBindings._adjacentSubtitle(forward, timeGetter(), subtitles);\r\n\r\n            if (subtitle !== null && subtitle.start >= 0 && subtitle.end >= 0) {\r\n                onSeekToSubtitle(event, subtitle);\r\n            }\r\n        }, useCapture);\r\n    }\r\n\r\n    static bindSeekToBeginningOfCurrentSubtitle(\r\n        onSeekToBeginningOfCurrentSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\r\n        disabledGetter: () => boolean,\r\n        timeGetter: () => number,\r\n        subtitlesGetter: () => SubtitleModel[] | undefined,\r\n        useCapture = false\r\n    ) {\r\n        return KeyBindings._bindDown((event) => {\r\n            if (disabledGetter()) {\r\n                return;\r\n            }\r\n\r\n            if (!KeyEvents.detectCurrentSubtitle(event)) {\r\n                return;\r\n            }\r\n\r\n            const subtitles = subtitlesGetter();\r\n\r\n            if (!subtitles || subtitles.length === 0) {\r\n                return;\r\n            }\r\n\r\n            const subtitle = KeyBindings._currentSubtitle(timeGetter(), subtitles);\r\n\r\n            if (subtitle !== undefined && subtitle.start >= 0 && subtitle.end >= 0) {\r\n                onSeekToBeginningOfCurrentSubtitle(event, subtitle);\r\n            }\r\n        }, useCapture);\r\n    }\r\n\r\n    static _currentSubtitle(time: number, subtitles: SubtitleModel[]) {\r\n        const now = time;\r\n        let currentSubtitle: SubtitleModel | undefined;\r\n        let minDiff = Number.MAX_SAFE_INTEGER;\r\n\r\n        for (let i = 0; i < subtitles.length; ++i) {\r\n            const s = subtitles[i];\r\n\r\n            if (s.start < 0 || s.end < 0) {\r\n                continue;\r\n            }\r\n\r\n            const diff = now - s.start;\r\n\r\n            if (now >= s.start && now < s.end) {\r\n                if (diff < minDiff) {\r\n                    currentSubtitle = s;\r\n                    minDiff = diff;\r\n                }\r\n            }\r\n        }\r\n\r\n        return currentSubtitle;\r\n    }\r\n\r\n    static bindSeekBackwardOrForward(\r\n        onSeekBackwardOrForward: (event: KeyboardEvent, forward: boolean) => void,\r\n        disabledGetter: () => boolean,\r\n        useCapture = false\r\n    ) {\r\n        return KeyBindings._bindDown((event) => {\r\n            if (disabledGetter()) {\r\n                return;\r\n            }\r\n\r\n            let forward: boolean;\r\n\r\n            if (KeyEvents.detectSeekBackward(event)) {\r\n                forward = false;\r\n            } else if (KeyEvents.detectSeekForward(event)) {\r\n                forward = true;\r\n            } else {\r\n                return;\r\n            }\r\n\r\n            onSeekBackwardOrForward(event, forward);\r\n        }, useCapture);\r\n    }\r\n\r\n    static bindOffsetToSubtitle(\r\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\r\n        disabledGetter: () => boolean,\r\n        timeGetter: () => number,\r\n        subtitlesGetter: () => SubtitleModel[] | undefined,\r\n        useCapture = false\r\n    ) {\r\n        return KeyBindings._bindDown((event) => {\r\n            if (disabledGetter()) {\r\n                return;\r\n            }\r\n\r\n            const subtitles = subtitlesGetter();\r\n\r\n            if (!subtitles || subtitles.length === 0) {\r\n                return;\r\n            }\r\n\r\n            let forward;\r\n\r\n            if (KeyEvents.detectIncreaseOffsetToPreviousSubtitle(event)) {\r\n                forward = false;\r\n            } else if (KeyEvents.detectDecreaseOffsetToNextSubtitle(event)) {\r\n                forward = true;\r\n            } else {\r\n                return;\r\n            }\r\n\r\n            const time = timeGetter();\r\n            const subtitle = KeyBindings._adjacentSubtitle(forward, time, subtitles);\r\n\r\n            if (subtitle !== null) {\r\n                const subtitleStart = subtitle.originalStart;\r\n                const newOffset = time - subtitleStart;\r\n                onOffsetChange(event, newOffset);\r\n            }\r\n        }, useCapture);\r\n    }\r\n\r\n    static _adjacentSubtitle(forward: boolean, time: number, subtitles: SubtitleModel[]) {\r\n        const now = time;\r\n        let adjacentSubtitleIndex = -1;\r\n        let minDiff = Number.MAX_SAFE_INTEGER;\r\n\r\n        for (let i = 0; i < subtitles.length; ++i) {\r\n            const s = subtitles[i];\r\n            const diff = forward ? s.start - now : now - s.start;\r\n\r\n            if (minDiff <= diff) {\r\n                continue;\r\n            }\r\n\r\n            if (forward && now < s.start) {\r\n                minDiff = diff;\r\n                adjacentSubtitleIndex = i;\r\n            } else if (!forward && now > s.start) {\r\n                minDiff = diff;\r\n                adjacentSubtitleIndex = now < s.end ? Math.max(0, i - 1) : i;\r\n            }\r\n        }\r\n\r\n        if (adjacentSubtitleIndex !== -1) {\r\n            return subtitles[adjacentSubtitleIndex];\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    static bindAdjustOffset(\r\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\r\n        disabledGetter: () => boolean,\r\n        subtitlesGetter: () => SubtitleModel[] | undefined,\r\n        useCapture = false\r\n    ) {\r\n        return KeyBindings._bindDown((event) => {\r\n            if (disabledGetter()) {\r\n                return;\r\n            }\r\n\r\n            const subtitles = subtitlesGetter();\r\n\r\n            if (!subtitles || subtitles.length === 0) {\r\n                return;\r\n            }\r\n\r\n            let increase;\r\n\r\n            if (KeyEvents.detectDecreaseOffset(event)) {\r\n                increase = false;\r\n            } else if (KeyEvents.detectIncreaseOffset(event)) {\r\n                increase = true;\r\n            } else {\r\n                return;\r\n            }\r\n\r\n            const currentOffset = subtitles[0].start - subtitles[0].originalStart;\r\n            const newOffset = currentOffset + (increase ? 100 : -100);\r\n            onOffsetChange(event, newOffset);\r\n        }, useCapture);\r\n    }\r\n\r\n    static bindToggleSubtitles(\r\n        onToggleSubtitles: (event: KeyboardEvent) => void,\r\n        onSequenceAdvanced: (event: KeyboardEvent) => void,\r\n        disabledGetter: () => boolean,\r\n        useCapture = false\r\n    ) {\r\n        const sequence = KeySequences.toggleSubtitles();\r\n        const handler = (event: KeyboardEvent) => {\r\n            if (disabledGetter()) {\r\n                sequence.reset();\r\n                return;\r\n            }\r\n\r\n            const transition = sequence.accept(event);\r\n\r\n            if (transition.result === KeySequenceTransitionResult.ADVANCED) {\r\n                onSequenceAdvanced(event);\r\n            } else if (transition.result === KeySequenceTransitionResult.COMPLETE) {\r\n                onToggleSubtitles(event);\r\n            }\r\n        };\r\n        const unbindDown = KeyBindings._bindDown(handler, useCapture);\r\n        const unbindUp = KeyBindings._bindUp(handler, useCapture);\r\n\r\n        return () => {\r\n            unbindDown();\r\n            unbindUp();\r\n        };\r\n    }\r\n\r\n    static bindToggleSubtitleTrackInVideo(\r\n        onToggleSubtitleTrack: (event: KeyboardEvent, extra: any) => void,\r\n        onSequenceAdvanced: (event: KeyboardEvent) => void,\r\n        disabledGetter: () => boolean,\r\n        useCapture = false\r\n    ) {\r\n        const sequence = KeySequences.toggleSubtitleTrack();\r\n        const handler = (event: KeyboardEvent) => {\r\n            if (disabledGetter()) {\r\n                sequence.reset();\r\n                return;\r\n            }\r\n\r\n            const transition = sequence.accept(event);\r\n\r\n            if (transition.result === KeySequenceTransitionResult.ADVANCED) {\r\n                onSequenceAdvanced(event);\r\n            } else if (transition.result === KeySequenceTransitionResult.COMPLETE) {\r\n                onToggleSubtitleTrack(event, transition.extra);\r\n            }\r\n        };\r\n        const unbindDown = KeyBindings._bindDown(handler, useCapture);\r\n        const unbindUp = KeyBindings._bindUp(handler, useCapture);\r\n\r\n        return () => {\r\n            unbindDown();\r\n            unbindUp();\r\n        };\r\n    }\r\n\r\n    static bindToggleSubtitleTrackInList(\r\n        onToggleSubtitleTrackInList: (event: KeyboardEvent, extra: any) => void,\r\n        onSequenceAdvanced: (event: KeyboardEvent) => void,\r\n        disabledGetter: () => boolean,\r\n        useCapture = false\r\n    ) {\r\n        const sequence = KeySequences.toggleSubtitleTrackInList();\r\n        const handler = (event: KeyboardEvent) => {\r\n            if (disabledGetter()) {\r\n                sequence.reset();\r\n                return;\r\n            }\r\n\r\n            const transition = sequence.accept(event);\r\n\r\n            if (transition.result === KeySequenceTransitionResult.ADVANCED) {\r\n                onSequenceAdvanced(event);\r\n            } else if (transition.result === KeySequenceTransitionResult.COMPLETE) {\r\n                onToggleSubtitleTrackInList(event, transition.extra);\r\n            }\r\n        };\r\n        const unbindDown = KeyBindings._bindDown(handler, useCapture);\r\n        const unbindUp = KeyBindings._bindUp(handler, useCapture);\r\n\r\n        return () => {\r\n            unbindDown();\r\n            unbindUp();\r\n        };\r\n    }\r\n\r\n    static bindPlay(onPlay: (event: KeyboardEvent) => void, disabledGetter: () => boolean, useCapture = false) {\r\n        return KeyBindings._bindDown((event) => {\r\n            if (disabledGetter()) {\r\n                return;\r\n            }\r\n\r\n            if (!KeyEvents.detectPlay(event)) {\r\n                return;\r\n            }\r\n\r\n            onPlay(event);\r\n        }, useCapture);\r\n    }\r\n\r\n    static bindAutoPause(\r\n        onAutoPause: (event: KeyboardEvent) => void,\r\n        disabledGetter: () => boolean,\r\n        useCapture = false\r\n    ) {\r\n        return KeyBindings._bindDown((event) => {\r\n            if (disabledGetter()) {\r\n                return;\r\n            }\r\n\r\n            if (!KeyEvents.detectAutoPause(event)) {\r\n                return;\r\n            }\r\n\r\n            onAutoPause(event);\r\n        }, useCapture);\r\n    }\r\n\r\n    static _bindDown(handler: (event: KeyboardEvent) => void, useCapture: boolean) {\r\n        window.addEventListener('keydown', handler, useCapture);\r\n\r\n        return () => window.removeEventListener('keydown', handler, useCapture);\r\n    }\r\n\r\n    static _bindUp(handler: (event: KeyboardEvent) => void, useCapture: boolean) {\r\n        window.addEventListener('keyup', handler, useCapture);\r\n\r\n        return () => window.removeEventListener('keyup', handler, useCapture);\r\n    }\r\n}\r\n","export default class Mp3Encoder {\r\n    static async encode(blob: Blob, workerFactory: () => Worker): Promise<Blob> {\r\n        return new Promise(async (resolve, reject) => {\r\n            var reader = new FileReader();\r\n            reader.onload = async (e) => {\r\n                try {\r\n                    const audioContext = new AudioContext();\r\n\r\n                    if (e.target === null) {\r\n                        reject(new Error(\"Could not obtain buffer to encode\"));\r\n                        return;\r\n                    }\r\n\r\n                    const audioBuffer = await audioContext.decodeAudioData(e.target.result as ArrayBuffer);\r\n                    const channels = [];\r\n\r\n                    for (let i = 0; i < audioBuffer.numberOfChannels; ++i) {\r\n                        channels.push(audioBuffer.getChannelData(i));\r\n                    }\r\n\r\n                    const worker = workerFactory();\r\n                    worker.postMessage({\r\n                        command: 'encode',\r\n                        audioBuffer: {\r\n                            channels: channels,\r\n                            numberOfChannels: audioBuffer.numberOfChannels,\r\n                            length: audioBuffer.length,\r\n                            sampleRate: audioBuffer.sampleRate,\r\n                        },\r\n                    });\r\n                    worker.onmessage = (e) => {\r\n                        resolve(new Blob(e.data.buffer, { type: 'audio/mp3' }));\r\n                        worker.terminate();\r\n                    };\r\n                    worker.onerror = (e) => {\r\n                        const error = e?.error ?? new Error('MP3 encoding failed: ' + e?.message);\r\n                        reject(error);\r\n                        worker.terminate();\r\n                    };\r\n                } catch (e) {\r\n                    reject(e);\r\n                }\r\n            };\r\n            reader.readAsArrayBuffer(blob);\r\n        });\r\n    }\r\n}\r\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/mp3-encoder.d9a88fab.worker.js\");\n}\n","import sanitize from 'sanitize-filename';\r\nimport { SubtitleModel } from './Model';\r\n\r\nexport function humanReadableTime(timestamp: number, nearestTenth = false): string {\r\n    const totalSeconds = Math.floor(timestamp / 1000);\r\n    let seconds;\r\n\r\n    if (nearestTenth) {\r\n        seconds = Math.round(((timestamp / 1000) % 60) * 10) / 10;\r\n    } else {\r\n        seconds = totalSeconds % 60;\r\n    }\r\n\r\n    const minutes = Math.floor(totalSeconds / 60) % 60;\r\n    const hours = Math.floor(totalSeconds / 3600);\r\n\r\n    if (hours > 0) {\r\n        return hours + 'h' + String(minutes).padStart(2, '0') + 'm' + String(seconds).padStart(2, '0') + 's';\r\n    }\r\n\r\n    return minutes + 'm' + String(seconds).padStart(2, '0') + 's';\r\n}\r\n\r\nexport function surroundingSubtitles(\r\n    subtitles: SubtitleModel[],\r\n    index: number,\r\n    countRadius: number,\r\n    timeRadius: number\r\n): SubtitleModel[] {\r\n    let startIndex = index;\r\n\r\n    for (let i = index; i >= 0; --i) {\r\n        startIndex = i;\r\n\r\n        if (atBoundary(subtitles, startIndex, index, countRadius, timeRadius, false)) {\r\n            break;\r\n        }\r\n    }\r\n\r\n    let endIndex = startIndex;\r\n\r\n    for (let i = index; i <= subtitles.length - 1; ++i) {\r\n        endIndex = i;\r\n\r\n        if (atBoundary(subtitles, endIndex, index, countRadius, timeRadius, true)) {\r\n            break;\r\n        }\r\n    }\r\n\r\n    return subtitles.slice(startIndex, endIndex + 1);\r\n}\r\n\r\nexport function mockSurroundingSubtitles(\r\n    middleSubtitle: SubtitleModel,\r\n    maxTimestamp: number,\r\n    timeRadius: number\r\n): SubtitleModel[] {\r\n    const subtitles = [middleSubtitle];\r\n    const offset = middleSubtitle.start - middleSubtitle.originalStart;\r\n\r\n    if (middleSubtitle.end < maxTimestamp) {\r\n        const afterTimestamp = Math.min(maxTimestamp, middleSubtitle.end + timeRadius);\r\n        subtitles.push({\r\n            text: '',\r\n            start: middleSubtitle.end,\r\n            end: afterTimestamp,\r\n            originalStart: middleSubtitle.end - offset,\r\n            originalEnd: afterTimestamp - offset,\r\n            track: middleSubtitle.track,\r\n        });\r\n    }\r\n\r\n    if (middleSubtitle.start > 0) {\r\n        const beforeTimestamp = Math.max(0, middleSubtitle.start - timeRadius);\r\n        subtitles.unshift({\r\n            text: '',\r\n            start: beforeTimestamp,\r\n            end: middleSubtitle.start,\r\n            originalStart: beforeTimestamp - offset,\r\n            originalEnd: middleSubtitle.start - offset,\r\n            track: middleSubtitle.track,\r\n        });\r\n    }\r\n\r\n    return subtitles;\r\n}\r\n\r\nfunction atBoundary(\r\n    subtitles: SubtitleModel[],\r\n    index: number,\r\n    initialIndex: number,\r\n    countRadius: number,\r\n    timeRadius: number,\r\n    sign: boolean\r\n): boolean {\r\n    let next;\r\n\r\n    if (sign) {\r\n        next = index + 1 < subtitles.length ? subtitles[index + 1] : null;\r\n    } else {\r\n        next = index - 1 >= 0 ? subtitles[index - 1] : null;\r\n    }\r\n\r\n    if (\r\n        Math.abs(initialIndex - index) >= countRadius &&\r\n        (next === null || Math.abs(next.start - subtitles[initialIndex].start) >= timeRadius)\r\n    ) {\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nexport function download(blob: Blob, name: string) {\r\n    const url = window.URL.createObjectURL(blob);\r\n    const a = document.createElement('a');\r\n    document.body.appendChild(a);\r\n    a.style.display = 'none';\r\n    a.href = url;\r\n    a.download = sanitize(name);\r\n    a.click();\r\n    URL.revokeObjectURL(url);\r\n    a.remove();\r\n}\r\n","import Mp3Encoder from './Mp3Encoder';\r\n// eslint-disable-next-line\r\n// @ts-ignore\r\nimport Worker from 'worker-loader!./mp3-encoder.js';\r\nimport sanitize from 'sanitize-filename';\r\nimport { download } from './Util';\r\nconst AUDIO_TYPES: { [key: string]: string } = { 'audio/ogg;codecs=opus': 'ogg', 'audio/webm;codecs=opus': 'webm' };\r\nconst [recorderMimeType, recorderExtension] = Object.keys(AUDIO_TYPES)\r\n    .filter(MediaRecorder.isTypeSupported)\r\n    .map((t) => [t as string, AUDIO_TYPES[t] as string])[0];\r\nconst defaultMp3WorkerFactory = () => new Worker();\r\n\r\ninterface ExperimentalAudioElement extends HTMLAudioElement {\r\n    audioTracks: any;\r\n    captureStream?: () => MediaStream;\r\n    mozCaptureStream?: () => MediaStream;\r\n}\r\n\r\ninterface AudioData {\r\n    name: string;\r\n    extension: string;\r\n    play: () => Promise<void>;\r\n    blob: () => Promise<Blob>;\r\n    base64: () => Promise<string>;\r\n    slice: (start: number, end: number) => AudioData;\r\n    isSliceable: (start: number, end: number) => boolean;\r\n}\r\n\r\nclass Base64AudioData implements AudioData {\r\n    private readonly _name: string;\r\n    private readonly start: number;\r\n    private readonly end: number;\r\n    private readonly _base64: string;\r\n    private readonly _extension: string;\r\n\r\n    private cachedBlob?: Blob;\r\n\r\n    constructor(baseName: string, start: number, end: number, base64: string, extension: string) {\r\n        this._name = baseName + '_' + Math.floor(start) + '_' + Math.floor(end);\r\n        this.start = start;\r\n        this.end = end;\r\n        this._base64 = base64;\r\n        this._extension = extension;\r\n    }\r\n\r\n    get name(): string {\r\n        return this._name;\r\n    }\r\n\r\n    get extension(): string {\r\n        return this._extension;\r\n    }\r\n\r\n    async base64() {\r\n        return this._base64;\r\n    }\r\n\r\n    async blob() {\r\n        return await this._blob();\r\n    }\r\n\r\n    async play(): Promise<void> {\r\n        const blob = await this._blob();\r\n        const audio = new Audio();\r\n        audio.src = URL.createObjectURL(blob);\r\n        audio.preload = 'none';\r\n        audio.load();\r\n\r\n        await audio.play();\r\n\r\n        return new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n                audio.pause();\r\n                const src = audio.src;\r\n                audio.src = '';\r\n                URL.revokeObjectURL(src);\r\n                resolve(undefined);\r\n            }, this.end - this.start + 1000);\r\n        });\r\n    }\r\n\r\n    async _blob() {\r\n        if (!this.cachedBlob) {\r\n            this.cachedBlob = await (await fetch('data:audio/' + this.extension + ';base64,' + this._base64)).blob();\r\n        }\r\n\r\n        return this.cachedBlob;\r\n    }\r\n\r\n    slice(start: number, end: number): AudioData {\r\n        // Not supported\r\n        return this;\r\n    }\r\n\r\n    isSliceable(start: number, end: number) {\r\n        return false;\r\n    }\r\n}\r\n\r\nclass FileAudioData implements AudioData {\r\n    private readonly file: File;\r\n    private readonly _name: string;\r\n    private readonly start: number;\r\n    private readonly end: number;\r\n    private readonly trackId?: string;\r\n    private readonly _extension: string;\r\n\r\n    private _blob?: Blob;\r\n\r\n    constructor(file: File, start: number, end: number, trackId?: string) {\r\n        this.file = file;\r\n        this._name = file.name + '_' + start + '_' + end;\r\n        this.start = start;\r\n        this.end = end;\r\n        this.trackId = trackId;\r\n        this._extension = recorderExtension;\r\n    }\r\n\r\n    get name(): string {\r\n        return this._name;\r\n    }\r\n\r\n    get extension(): string {\r\n        return this._extension;\r\n    }\r\n\r\n    async base64() {\r\n        return new Promise<string>(async (resolve, reject) => {\r\n            var reader = new FileReader();\r\n            reader.readAsDataURL(await this.blob());\r\n            reader.onloadend = () => {\r\n                const result = reader.result as string;\r\n                const base64 = result.substring(result.indexOf(',') + 1);\r\n                resolve(base64);\r\n            };\r\n        });\r\n    }\r\n\r\n    async play() {\r\n        if (!this._blob) {\r\n            this._blob = await this._clipAudio();\r\n            return;\r\n        }\r\n\r\n        const audio = await this._audioElement(this._blob, false);\r\n        audio.currentTime = 0;\r\n        await audio.play();\r\n        await this._stopAudio(audio);\r\n    }\r\n\r\n    async blob() {\r\n        if (!this._blob) {\r\n            this._blob = await this._clipAudio();\r\n        }\r\n\r\n        return this._blob;\r\n    }\r\n\r\n    async _clipAudio(): Promise<Blob> {\r\n        return new Promise(async (resolve, reject) => {\r\n            const audio = await this._audioElement(this.file, true);\r\n\r\n            audio.oncanplay = async (e) => {\r\n                audio.play();\r\n                const stream = this._captureStream(audio);\r\n                const recorder = new MediaRecorder(stream, { mimeType: recorderMimeType });\r\n                const chunks: BlobPart[] = [];\r\n\r\n                recorder.ondataavailable = (e) => {\r\n                    chunks.push(e.data);\r\n                };\r\n\r\n                recorder.onstop = (e) => {\r\n                    resolve(new Blob(chunks, { type: recorderMimeType }));\r\n                };\r\n\r\n                recorder.start();\r\n                await this._stopAudio(audio);\r\n                recorder.stop();\r\n                for (const track of stream.getAudioTracks()) {\r\n                    track.stop();\r\n                }\r\n            };\r\n        });\r\n    }\r\n\r\n    _audioElement(source: Blob, selectTrack: boolean): Promise<ExperimentalAudioElement> {\r\n        const audio = new Audio() as ExperimentalAudioElement;\r\n        audio.src = URL.createObjectURL(source);\r\n\r\n        return new Promise((resolve, reject) => {\r\n            audio.onloadedmetadata = (e) => {\r\n                if (selectTrack && this.trackId && audio.audioTracks && audio.audioTracks.length > 0) {\r\n                    // @ts-ignore\r\n                    for (const t of audio.audioTracks) {\r\n                        t.enabled = this.trackId === t.id;\r\n                    }\r\n                }\r\n\r\n                audio.currentTime = this.start / 1000;\r\n                resolve(audio);\r\n            };\r\n        });\r\n    }\r\n\r\n    _captureStream(audio: ExperimentalAudioElement) {\r\n        let stream: MediaStream | undefined;\r\n\r\n        if (typeof audio.captureStream === 'function') {\r\n            stream = audio.captureStream();\r\n        }\r\n\r\n        if (typeof audio.mozCaptureStream === 'function') {\r\n            stream = audio.mozCaptureStream();\r\n        }\r\n\r\n        if (stream === undefined) {\r\n            throw new Error('Unable to capture stream from audio');\r\n        }\r\n\r\n        const audioStream = new MediaStream();\r\n\r\n        for (const track of stream.getVideoTracks()) {\r\n            track.stop();\r\n        }\r\n\r\n        for (const track of stream.getAudioTracks()) {\r\n            if (track.enabled) {\r\n                audioStream.addTrack(track);\r\n            }\r\n        }\r\n\r\n        return audioStream;\r\n    }\r\n\r\n    async _stopAudio(audio: ExperimentalAudioElement): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n                audio.pause();\r\n                const src = audio.src;\r\n                audio.src = '';\r\n                URL.revokeObjectURL(src);\r\n                resolve(undefined);\r\n            }, this.end - this.start + 100);\r\n        });\r\n    }\r\n\r\n    slice(start: number, end: number) {\r\n        return new FileAudioData(this.file, start, end, this.trackId);\r\n    }\r\n\r\n    isSliceable(start: number, end: number) {\r\n        return true;\r\n    }\r\n}\r\n\r\nclass Mp3AudioData implements AudioData {\r\n    private readonly data: AudioData;\r\n    private readonly workerFactory: () => Worker;\r\n    private _blob?: Blob;\r\n\r\n    constructor(data: AudioData, workerFactory: () => Worker) {\r\n        this.data = data;\r\n        this.workerFactory = workerFactory;\r\n    }\r\n\r\n    get name() {\r\n        return this.data.name;\r\n    }\r\n\r\n    get extension() {\r\n        return 'mp3';\r\n    }\r\n\r\n    async base64() {\r\n        return new Promise<string>(async (resolve, reject) => {\r\n            try {\r\n                var reader = new FileReader();\r\n                reader.readAsDataURL(await this.blob());\r\n                reader.onloadend = () => {\r\n                    const result = reader.result as string;\r\n                    const base64 = result.substring(result.indexOf(',') + 1);\r\n                    resolve(base64);\r\n                };\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    }\r\n\r\n    async play() {\r\n        await this.data.play();\r\n    }\r\n\r\n    async blob() {\r\n        if (!this._blob) {\r\n            this._blob = await Mp3Encoder.encode(await this.data.blob(), this.workerFactory);\r\n        }\r\n\r\n        return this._blob;\r\n    }\r\n\r\n    slice(start: number, end: number) {\r\n        return new Mp3AudioData(this.data.slice(start, end), this.workerFactory);\r\n    }\r\n\r\n    isSliceable(start: number, end: number) {\r\n        return this.data.isSliceable(start, end);\r\n    }\r\n}\r\n\r\nexport default class AudioClip {\r\n    private readonly data: AudioData;\r\n\r\n    constructor(data: AudioData) {\r\n        this.data = data;\r\n    }\r\n\r\n    static fromBase64(subtitleFileName: string, start: number, end: number, base64: string, extension: string) {\r\n        return new AudioClip(\r\n            new Base64AudioData(\r\n                subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')),\r\n                start,\r\n                end,\r\n                base64,\r\n                extension\r\n            )\r\n        );\r\n    }\r\n\r\n    static fromFile(file: File, start: number, end: number, trackId?: string) {\r\n        return new AudioClip(new FileAudioData(file, start, end, trackId));\r\n    }\r\n\r\n    get name() {\r\n        return this.data.name + '.' + this.data.extension;\r\n    }\r\n\r\n    async play() {\r\n        await this.data.play();\r\n    }\r\n\r\n    async base64() {\r\n        return await this.data.base64();\r\n    }\r\n\r\n    async download() {\r\n        const blob = await this.data.blob();\r\n        download(blob, this.name);\r\n    }\r\n\r\n    toMp3(mp3WorkerFactory = defaultMp3WorkerFactory) {\r\n        if (this.data instanceof Mp3AudioData) {\r\n            return this;\r\n        }\r\n\r\n        return new AudioClip(new Mp3AudioData(this.data, mp3WorkerFactory));\r\n    }\r\n\r\n    slice(start: number, end: number) {\r\n        return new AudioClip(this.data.slice(start, end));\r\n    }\r\n\r\n    isSliceable(start: number, end: number) {\r\n        return this.data.isSliceable(start, end);\r\n    }\r\n}\r\n","import { AnkiSettings } from './Settings';\r\n\r\nexport interface RectModel {\r\n    readonly left: number;\r\n    readonly top: number;\r\n    readonly width: number;\r\n    readonly height: number;\r\n}\r\n\r\nexport interface DimensionsModel {\r\n    readonly width: number;\r\n    readonly height: number;\r\n}\r\n\r\nexport interface SubtitleTextImage {\r\n    readonly dataUrl: string;\r\n    readonly screen: DimensionsModel;\r\n    readonly image: DimensionsModel;\r\n}\r\n\r\nexport interface SubtitleModel {\r\n    readonly text: string;\r\n    readonly textImage?: SubtitleTextImage;\r\n    readonly start: number;\r\n    readonly end: number;\r\n    readonly originalStart: number;\r\n    readonly originalEnd: number;\r\n    readonly track: number;\r\n}\r\n\r\nexport interface CopiedSubtitleModel extends SubtitleModel {\r\n    surroundingSubtitles: SubtitleModel[];\r\n    timestamp: number;\r\n    id: string;\r\n    name: string;\r\n    subtitleFile?: File;\r\n    audioFile?: File;\r\n    videoFile?: File;\r\n    audioTrack?: number;\r\n    audio?: AudioModel;\r\n    image?: ImageModel;\r\n}\r\n\r\nexport interface ImageModel {\r\n    readonly base64: string;\r\n    readonly extension: 'jpeg';\r\n}\r\n\r\nexport interface AudioModel {\r\n    readonly base64: string;\r\n    readonly extension: 'webm' | 'mp3';\r\n    readonly paddingStart: number;\r\n    readonly paddingEnd: number;\r\n    readonly start?: number;\r\n    readonly end?: number;\r\n}\r\n\r\nexport interface AnkiDialogSliderContext {\r\n    subtitleStart: number;\r\n    subtitleEnd: number;\r\n    subtitles: SubtitleModel[];\r\n}\r\n\r\nexport interface AnkiUiState {\r\n    readonly type: 'initial' | 'resume';\r\n    readonly open: boolean;\r\n    readonly settingsProvider: AnkiSettings;\r\n    readonly subtitle: SubtitleModel;\r\n    readonly url: string;\r\n    readonly source: string;\r\n    readonly image?: ImageModel;\r\n    readonly audio?: AudioModel;\r\n    readonly themeType: string;\r\n    readonly dialogRequestedTimestamp: number;\r\n}\r\n\r\nexport interface AnkiUiInitialState extends AnkiUiState {\r\n    readonly type: 'initial';\r\n    readonly surroundingSubtitles: SubtitleModel[];\r\n}\r\n\r\nexport interface AnkiUiResumeState extends AnkiUiState {\r\n    readonly type: 'resume';\r\n\r\n    readonly text: string;\r\n    readonly initialTimestampInterval: number[];\r\n    readonly timestampInterval: number[];\r\n    readonly sliderContext: AnkiDialogSliderContext;\r\n    readonly definition: string;\r\n    readonly word: string;\r\n    readonly customFieldValues: { [key: string]: string };\r\n    readonly lastAppliedTimestampIntervalToText: number[];\r\n    readonly lastAppliedTimestampIntervalToAudio?: number[];\r\n}\r\n\r\nexport interface AnkiUiSavedState {\r\n    subtitle: SubtitleModel;\r\n    text: string;\r\n    sliderContext: AnkiDialogSliderContext;\r\n    definition: string;\r\n    image?: ImageModel;\r\n    audio?: AudioModel;\r\n    word: string;\r\n    source: string;\r\n    url: string;\r\n    customFieldValues: { [key: string]: string };\r\n    timestampInterval: number[];\r\n    initialTimestampInterval: number[];\r\n    lastAppliedTimestampIntervalToText: number[];\r\n    lastAppliedTimestampIntervalToAudio?: number[];\r\n    dialogRequestedTimestamp: number;\r\n}\r\n\r\nexport interface VideoDataSubtitleTrack {\r\n    label: string;\r\n    language: string;\r\n    url: string;\r\n}\r\n\r\nexport interface ConfirmedVideoDataSubtitleTrack {\r\n    name: string;\r\n    language: string;\r\n    subtitleUrl: string;\r\n}\r\n\r\nexport interface VideoData {\r\n    basename: string;\r\n    error?: string;\r\n    subtitles: VideoDataSubtitleTrack[];\r\n    extension: string;\r\n}\r\n\r\nexport interface VideoDataUiState {\r\n    open?: boolean;\r\n    isLoading?: boolean;\r\n    suggestedName?: string;\r\n    subtitles?: VideoDataSubtitleTrack[];\r\n    error?: string;\r\n    themeType?: string;\r\n    selectedSubtitle?: string;\r\n    showSubSelect?: boolean;\r\n}\r\n\r\nexport interface VideoTabModel {\r\n    id: number; // Actually the tab ID\r\n    title?: string;\r\n    src: string; // Video src\r\n}\r\n\r\nexport interface Rgb {\r\n    r: number;\r\n    g: number;\r\n    b: number;\r\n}\r\n\r\nexport interface AudioTrackModel {\r\n    id: string;\r\n    label: string;\r\n    language: string;\r\n}\r\n\r\nexport enum PostMineAction {\r\n    none = 0,\r\n    showAnkiDialog = 1,\r\n    updateLastCard = 2,\r\n}\r\n\r\nexport enum AutoPausePreference {\r\n    atStart = 1,\r\n    atEnd = 2,\r\n}\r\n\r\nexport enum PlayMode {\r\n    normal = 1,\r\n    condensed = 2,\r\n    autoPause = 3,\r\n}\r\n","export default class CanvasResizer {\r\n    resize(\r\n        canvas: HTMLCanvasElement,\r\n        ctx: CanvasRenderingContext2D,\r\n        maxWidth: number,\r\n        maxHeight: number\r\n    ): Promise<HTMLCanvasElement> {\r\n        return new Promise((resolve, reject) => {\r\n            const widthRatio = maxWidth <= 0 ? 1 : maxWidth / canvas.width;\r\n            const heightRatio = maxHeight <= 0 ? 1 : maxHeight / canvas.height;\r\n            const ratio = Math.min(1, Math.min(widthRatio, heightRatio));\r\n\r\n            if (ratio < 1) {\r\n                const newWidth = canvas.width * ratio;\r\n                const newHeight = canvas.height * ratio;\r\n                createImageBitmap(canvas, { resizeWidth: newWidth, resizeHeight: newHeight })\r\n                    .then((sprite) => {\r\n                        canvas.width = newWidth;\r\n                        canvas.height = newHeight;\r\n                        ctx.drawImage(sprite, 0, 0);\r\n                        resolve(canvas);\r\n                    })\r\n                    .catch((e) => reject(e));\r\n            } else {\r\n                resolve(canvas);\r\n            }\r\n        });\r\n    }\r\n}\r\n","import { resolveConfig } from 'prettier';\r\nimport sanitize from 'sanitize-filename';\r\nimport CanvasResizer from './CanvasResizer';\r\nimport { download } from './Util';\r\n\r\nclass Base64ImageData implements ImageData {\r\n    private readonly _name: string;\r\n    private readonly _base64: string;\r\n    private readonly _extension: string;\r\n\r\n    private cachedBlob?: Blob;\r\n\r\n    constructor(name: string, base64: string, extension: string) {\r\n        this._name = name;\r\n        this._base64 = base64;\r\n        this._extension = extension;\r\n    }\r\n\r\n    get name() {\r\n        return this._name;\r\n    }\r\n\r\n    get extension() {\r\n        return this._extension;\r\n    }\r\n\r\n    async base64() {\r\n        return this._base64;\r\n    }\r\n\r\n    async blob() {\r\n        return await this._blob();\r\n    }\r\n\r\n    async _blob() {\r\n        if (!this.cachedBlob) {\r\n            this.cachedBlob = await (await fetch(this._dataUrl())).blob();\r\n        }\r\n\r\n        return this.cachedBlob;\r\n    }\r\n\r\n    async dataUrl() {\r\n        return this._dataUrl();\r\n    }\r\n\r\n    _dataUrl() {\r\n        return 'data:image/' + this.extension + ';base64,' + this._base64;\r\n    }\r\n}\r\n\r\nclass FileImageData implements ImageData {\r\n    private readonly file: File;\r\n    private readonly timestamp: number;\r\n    private readonly maxWidth: number;\r\n    private readonly maxHeight: number;\r\n    private readonly _name: string;\r\n\r\n    constructor(file: File, timestamp: number, maxWidth: number, maxHeight: number) {\r\n        this.file = file;\r\n        this._name = file.name + '_' + Math.floor(timestamp) + '.jpeg';\r\n        this.timestamp = timestamp;\r\n        this.maxWidth = maxWidth;\r\n        this.maxHeight = maxHeight;\r\n    }\r\n\r\n    get name() {\r\n        return this._name;\r\n    }\r\n\r\n    get extension() {\r\n        return 'jpeg';\r\n    }\r\n\r\n    async base64(): Promise<string> {\r\n        return new Promise(async (resolve, reject) => {\r\n            const canvas = await this._canvas();\r\n            const dataUrl = canvas.toDataURL('image/jpeg');\r\n            resolve(dataUrl.substring(dataUrl.indexOf(',') + 1));\r\n        });\r\n    }\r\n\r\n    async blob(): Promise<Blob> {\r\n        return new Promise(async (resolve, reject) => {\r\n            const canvas = await this._canvas();\r\n            canvas.toBlob((blob) => {\r\n                if (blob === null) {\r\n                    reject(new Error('Could not obtain blob'));\r\n                } else {\r\n                    resolve(blob);\r\n                }\r\n            }, 'image/jpeg');\r\n        });\r\n    }\r\n\r\n    async dataUrl() {\r\n        const canvas = await this._canvas();\r\n        return canvas.toDataURL();\r\n    }\r\n\r\n    async _canvas(): Promise<HTMLCanvasElement> {\r\n        return new Promise(async (resolve, reject) => {\r\n            const video = this._videoElement(this.file);\r\n\r\n            video.oncanplay = async (e) => {\r\n                const canvas = document.createElement('canvas');\r\n                canvas.width = video.videoWidth;\r\n                canvas.height = video.videoHeight;\r\n                const ctx = canvas.getContext('2d');\r\n                ctx!.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n                if (this.maxWidth > 0 || this.maxHeight > 0) {\r\n                    const resizer = new CanvasResizer();\r\n                    await resizer.resize(canvas, ctx!, this.maxWidth, this.maxHeight);\r\n                    resolve(canvas);\r\n                } else {\r\n                    resolve(canvas);\r\n                }\r\n                URL.revokeObjectURL(video.src);\r\n            };\r\n        });\r\n    }\r\n\r\n    _videoElement(source: File) {\r\n        const video = document.createElement('video');\r\n        video.src = URL.createObjectURL(source);\r\n        video.preload = 'none';\r\n        video.currentTime = this.timestamp / 1000;\r\n        video.load();\r\n\r\n        return video;\r\n    }\r\n}\r\n\r\ninterface ImageData {\r\n    name: string;\r\n    extension: string;\r\n    base64: () => Promise<string>;\r\n    dataUrl: () => Promise<string>;\r\n    blob: () => Promise<Blob>;\r\n}\r\n\r\nexport default class Image {\r\n    private readonly data: ImageData;\r\n\r\n    constructor(data: ImageData) {\r\n        this.data = data;\r\n    }\r\n\r\n    static fromBase64(subtitleFileName: string, timestamp: number, base64: string, extension: string) {\r\n        const imageName =\r\n            subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')) +\r\n            '_' +\r\n            Math.floor(timestamp) +\r\n            '.' +\r\n            extension;\r\n        return new Image(new Base64ImageData(imageName, base64, extension));\r\n    }\r\n\r\n    static fromFile(file: File, timestamp: number, maxWidth: number, maxHeight: number) {\r\n        return new Image(new FileImageData(file, timestamp, maxWidth, maxHeight));\r\n    }\r\n\r\n    get name() {\r\n        return this.data.name;\r\n    }\r\n\r\n    get extension() {\r\n        return this.data.extension;\r\n    }\r\n\r\n    async base64() {\r\n        return await this.data.base64();\r\n    }\r\n\r\n    async dataUrl() {\r\n        return await this.data.dataUrl();\r\n    }\r\n\r\n    async blob() {\r\n        return await this.data.blob();\r\n    }\r\n\r\n    async pngBlob() {\r\n        return new Promise<Blob>(async (resolve, reject) => {\r\n            try {\r\n                createImageBitmap(await this.blob()).then((bitMap) => {\r\n                    const canvas = document.createElement('canvas');\r\n                    canvas.width = bitMap.width;\r\n                    canvas.height = bitMap.height;\r\n                    canvas.getContext('2d')!.drawImage(bitMap, 0, 0);\r\n                    canvas.toBlob((blob) => {\r\n                        if (blob) {\r\n                            resolve(blob);\r\n                        } else {\r\n                            reject('Failed to convert to PNG');\r\n                        }\r\n                    }, 'image/png');\r\n                });\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    }\r\n\r\n    async download() {\r\n        const blob = await this.data.blob();\r\n        download(blob, this.data.name);\r\n    }\r\n}\r\n","export interface Fetcher {\r\n    fetch: (url: string, body: any) => Promise<any>;\r\n}\r\n\r\nexport class HttpFetcher implements Fetcher {\r\n    async fetch(url: string, body: any) {\r\n        const response = await fetch(url, {\r\n            method: 'POST',\r\n            body: JSON.stringify(body),\r\n        });\r\n        return await response.json();\r\n    }\r\n}\r\n","import AudioClip from './AudioClip';\r\nimport Image from './Image';\r\nimport { HttpFetcher, Fetcher } from './Fetcher';\r\nimport { AnkiSettings } from './Settings';\r\nimport sanitize from 'sanitize-filename';\r\n\r\nconst ankiQuerySpecialCharacters = ['\"', '*', '_', '\\\\', ':'];\r\n\r\nexport type AnkiExportMode = 'gui' | 'updateLast' | 'default';\r\n\r\nexport class Anki {\r\n    private readonly settingsProvider: AnkiSettings;\r\n    private readonly fetcher: Fetcher;\r\n\r\n    constructor(settingsProvider: AnkiSettings, fetcher = new HttpFetcher()) {\r\n        this.settingsProvider = settingsProvider;\r\n        this.fetcher = fetcher;\r\n    }\r\n\r\n    async deckNames(ankiConnectUrl?: string) {\r\n        const response = await this._executeAction('deckNames', null, ankiConnectUrl);\r\n        return response.result;\r\n    }\r\n\r\n    async modelNames(ankiConnectUrl?: string) {\r\n        const response = await this._executeAction('modelNames', null, ankiConnectUrl);\r\n        return response.result;\r\n    }\r\n\r\n    async modelFieldNames(modelName: string, ankiConnectUrl?: string) {\r\n        const response = await this._executeAction('modelFieldNames', { modelName: modelName }, ankiConnectUrl);\r\n        return response.result;\r\n    }\r\n\r\n    async findNotesWithWord(word: string, ankiConnectUrl?: string) {\r\n        const response = await this._executeAction(\r\n            'findNotes',\r\n            { query: this.settingsProvider.wordField + ':' + this._escapeQuery(word) },\r\n            ankiConnectUrl\r\n        );\r\n        return response.result;\r\n    }\r\n\r\n    async findNotesWithWordGui(word: string, ankiConnectUrl?: string) {\r\n        const response = await this._executeAction(\r\n            'guiBrowse',\r\n            { query: this.settingsProvider.wordField + ':' + this._escapeQuery(word) },\r\n            ankiConnectUrl\r\n        );\r\n        return response.result;\r\n    }\r\n\r\n    _escapeQuery(query: string) {\r\n        let escaped = '';\r\n\r\n        for (let i = 0; i < query.length; ++i) {\r\n            const char = query[i];\r\n            if (ankiQuerySpecialCharacters.includes(char)) {\r\n                escaped += `\\\\${char}`;\r\n            } else {\r\n                escaped += char;\r\n            }\r\n        }\r\n\r\n        return `\"${escaped}\"`;\r\n    }\r\n\r\n    async requestPermission(ankiConnectUrl?: string) {\r\n        const response = await this._executeAction('requestPermission', null, ankiConnectUrl);\r\n        return response.result;\r\n    }\r\n\r\n    async export(\r\n        text: string | undefined,\r\n        definition: string | undefined,\r\n        audioClip: AudioClip | undefined,\r\n        image: Image | undefined,\r\n        word: string | undefined,\r\n        source: string | undefined,\r\n        url: string | undefined,\r\n        customFieldValues: { [key: string]: string },\r\n        tags: string[],\r\n        mode: AnkiExportMode,\r\n        ankiConnectUrl?: string\r\n    ) {\r\n        const fields = {};\r\n\r\n        this._appendField(fields, this.settingsProvider.sentenceField, text, true);\r\n        this._appendField(fields, this.settingsProvider.definitionField, definition, true);\r\n        this._appendField(fields, this.settingsProvider.wordField, word, false);\r\n        this._appendField(fields, this.settingsProvider.sourceField, source, false);\r\n        this._appendField(fields, this.settingsProvider.urlField, url, false);\r\n\r\n        if (customFieldValues) {\r\n            for (const customFieldName of Object.keys(customFieldValues)) {\r\n                this._appendField(\r\n                    fields,\r\n                    this.settingsProvider.customAnkiFields[customFieldName],\r\n                    customFieldValues[customFieldName],\r\n                    true\r\n                );\r\n            }\r\n        }\r\n\r\n        const params: any = {\r\n            note: {\r\n                deckName: this.settingsProvider.deck,\r\n                modelName: this.settingsProvider.noteType,\r\n                tags: tags,\r\n                options: {\r\n                    allowDuplicate: false,\r\n                    duplicateScope: 'deck',\r\n                    duplicateScopeOptions: {\r\n                        deckName: this.settingsProvider.deck,\r\n                        checkChildren: false,\r\n                    },\r\n                },\r\n            },\r\n        };\r\n\r\n        const gui = mode === 'gui';\r\n        const updateLast = mode === 'updateLast';\r\n\r\n        if (this.settingsProvider.audioField && audioClip) {\r\n            const sanitizedName = this._sanitizeFileName(audioClip.name);\r\n\r\n            if (gui || updateLast) {\r\n                const fileName = (await this._storeMediaFile(sanitizedName, await audioClip.base64(), ankiConnectUrl))\r\n                    .result;\r\n                this._appendField(fields, this.settingsProvider.audioField, `[sound:${fileName}]`, false);\r\n            } else {\r\n                params.note['audio'] = {\r\n                    filename: sanitizedName,\r\n                    data: await audioClip.base64(),\r\n                    fields: [this.settingsProvider.audioField],\r\n                };\r\n            }\r\n        }\r\n\r\n        if (this.settingsProvider.imageField && image) {\r\n            const sanitizedName = this._sanitizeFileName(image.name);\r\n\r\n            if (gui || updateLast) {\r\n                const fileName = (await this._storeMediaFile(sanitizedName, await image.base64(), ankiConnectUrl))\r\n                    .result;\r\n                this._appendField(\r\n                    fields,\r\n                    this.settingsProvider.imageField,\r\n                    `<div><img src=\"${fileName}\"></div>`,\r\n                    false\r\n                );\r\n            } else {\r\n                params.note['picture'] = {\r\n                    filename: sanitizedName,\r\n                    data: await image.base64(),\r\n                    fields: [this.settingsProvider.imageField],\r\n                };\r\n            }\r\n        }\r\n\r\n        params.note['fields'] = fields;\r\n\r\n        switch (mode) {\r\n            case 'gui':\r\n                return (await this._executeAction('guiAddCards', params, ankiConnectUrl)).result;\r\n            case 'updateLast':\r\n                const recentNotes = (\r\n                    await this._executeAction('findNotes', { query: 'added:1' }, ankiConnectUrl)\r\n                ).result.sort();\r\n\r\n                if (recentNotes.length === 0) {\r\n                    throw new Error('Could not find note to update');\r\n                }\r\n\r\n                const lastNoteId = recentNotes[recentNotes.length - 1];\r\n                params.note['id'] = lastNoteId;\r\n                const infoResponse = await this._executeAction('notesInfo', { notes: [lastNoteId] });\r\n\r\n                if (infoResponse.result.length > 0 && infoResponse.result[0].noteId === lastNoteId) {\r\n                    const info = infoResponse.result[0];\r\n                    await this._executeAction('updateNoteFields', params, ankiConnectUrl);\r\n\r\n                    if (!this.settingsProvider.wordField || !info.fields) {\r\n                        return info.noteId;\r\n                    }\r\n\r\n                    const wordField = info.fields[this.settingsProvider.wordField];\r\n\r\n                    if (!wordField || !wordField.value) {\r\n                        return info.noteId;\r\n                    }\r\n\r\n                    return wordField.value;\r\n                }\r\n\r\n                throw new Error('Could not update last card because the card info could not be fetched');\r\n            case 'default':\r\n                return (await this._executeAction('addNote', params, ankiConnectUrl)).result;\r\n            default:\r\n                throw new Error('Unknown export mode: ' + mode);\r\n        }\r\n    }\r\n\r\n    _appendField(fields: any, fieldName: string | undefined, value: string | undefined, multiline: boolean) {\r\n        if (!fieldName || !value) {\r\n            return;\r\n        }\r\n\r\n        let newValue = multiline ? value.split('\\n').join('<br>') : value;\r\n        const existingValue = fields[fieldName];\r\n\r\n        if (existingValue) {\r\n            newValue = existingValue + '<br>' + newValue;\r\n        }\r\n\r\n        fields[fieldName] = newValue;\r\n    }\r\n\r\n    _sanitizeFileName(name: string) {\r\n        return sanitize(name, { replacement: '_' });\r\n    }\r\n\r\n    async _storeMediaFile(name: string, base64: string, ankiConnectUrl?: string) {\r\n        return this._executeAction('storeMediaFile', { filename: name, data: base64 }, ankiConnectUrl);\r\n    }\r\n\r\n    async _executeAction(action: string, params: any, ankiConnectUrl?: string) {\r\n        const body: any = {\r\n            action: action,\r\n            version: 6,\r\n        };\r\n\r\n        if (params) {\r\n            body['params'] = params;\r\n        }\r\n\r\n        const json = await this.fetcher.fetch(ankiConnectUrl || this.settingsProvider.ankiConnectUrl, body);\r\n\r\n        if (json.error) {\r\n            throw new Error(json.error);\r\n        }\r\n\r\n        return json;\r\n    }\r\n}\r\n","import { useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport MuiAlert, { Color } from '@material-ui/lab/Alert';\r\nimport Grow from '@material-ui/core/Grow';\r\n\r\nconst useAlertStyles = makeStyles({\r\n    root: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        position: 'fixed',\r\n        top: 80,\r\n        width: '100%',\r\n        pointerEvents: 'none',\r\n        zIndex: 2000,\r\n    },\r\n});\r\n\r\ninterface Props {\r\n    open: boolean;\r\n    autoHideDuration: number;\r\n    onClose: () => void;\r\n    severity: Color | undefined;\r\n    children: React.ReactNode\r\n}\r\n\r\nexport default function Alert(props: Props) {\r\n    const classes = useAlertStyles();\r\n\r\n    useEffect(() => {\r\n        if (props.open) {\r\n            const timeout = setTimeout(props.onClose, props.autoHideDuration);\r\n            return () => clearTimeout(timeout);\r\n        }\r\n    }, [props.open, props.autoHideDuration, props.onClose]);\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Grow in={props.open}>\r\n                <MuiAlert severity={props.severity}>{props.children}</MuiAlert>\r\n            </Grow>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useCallback, useEffect, useState } from \"react\";\r\nimport { TextField, TextFieldProps } from \"@material-ui/core\";\r\n\r\nfunction extractTagsFromString(value: string) {\r\n    const splitTags = value.split(' ').join('').split(',');\r\n    const tags = [];\r\n\r\n    for (const tag of splitTags) {\r\n        tags.push(tag.trim());\r\n    }\r\n\r\n    return tags;\r\n}\r\n\r\nexport interface Props {\r\n    tags: string[];\r\n    onTagsChange: (tags: string[]) => void;\r\n}\r\n\r\nexport default function TagsTextField({tags, onTagsChange, ...props}: Props & TextFieldProps) {\r\n    const [value, setValue] = useState('');\r\n\r\n    useEffect(() => {\r\n        const tagsString = tags.join(', ');\r\n\r\n        if (tagsString !== value) {\r\n            setValue(tags.join(', '));\r\n        }\r\n    }, [value, tags]);\r\n\r\n    const handleChange = useCallback((e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        let currentValue = e.target.value;\r\n\r\n        if (\r\n            value.length > currentValue.length &&\r\n            value.includes(currentValue) &&\r\n            currentValue.endsWith(',')\r\n        ) {\r\n            // Detected a backspace at the last comma, move cursor back enough to remove the comma\r\n            currentValue = currentValue.substring(0, currentValue.length - 1);\r\n        }\r\n\r\n        // Decompose string into individual tags by removing all spaces and splitting on \",\"\r\n        const newTags = extractTagsFromString(currentValue);\r\n        setValue(newTags.join(', '));\r\n        onTagsChange(newTags);\r\n    }, [value, onTagsChange]);\r\n\r\n    return (\r\n        <TextField\r\n            {...props}\r\n            value={value}\r\n            onChange={handleChange}\r\n        />\r\n    );\r\n}\r\n","import React, { useEffect, useState, useLayoutEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport { Image as CommonImage } from '@project/common';\r\n\r\ninterface ImageDimensions {\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    image: ({ width, height }: ImageDimensions) => ({\r\n        width: width,\r\n        height: height,\r\n        backgroundSize: 'contain',\r\n    }),\r\n}));\r\n\r\n// https://stackoverflow.com/questions/19014250/rerender-view-on-browser-resize-with-react\r\nfunction useWindowSize() {\r\n    const [size, setSize] = useState([0, 0]);\r\n\r\n    useLayoutEffect(() => {\r\n        function updateSize() {\r\n            setSize([window.innerWidth, window.innerHeight]);\r\n        }\r\n\r\n        window.addEventListener('resize', updateSize);\r\n        updateSize();\r\n\r\n        return () => window.removeEventListener('resize', updateSize);\r\n    }, []);\r\n\r\n    return size;\r\n}\r\n\r\ninterface Props {\r\n    open: boolean;\r\n    image?: CommonImage;\r\n    onClose: () => void;\r\n}\r\n\r\nexport default function ImageDialog({ open, image, onClose }: Props) {\r\n    const [dataUrl, setDataUrl] = useState<string>();\r\n    const [width, setWidth] = useState<number>(0);\r\n    const [height, setHeight] = useState<number>(0);\r\n    const [windowWidth, windowHeight] = useWindowSize();\r\n\r\n    let resizeRatio;\r\n\r\n    if (width > 0 && height > 0) {\r\n        resizeRatio = Math.min(1, Math.min(windowWidth / (2 * width), windowHeight / (2 * height)));\r\n    } else {\r\n        resizeRatio = 1;\r\n    }\r\n\r\n    const classes = useStyles({ width: width * resizeRatio, height: height * resizeRatio });\r\n\r\n    useEffect(() => {\r\n        setDataUrl(undefined);\r\n        async function fetchImage() {\r\n            if (!image) {\r\n                return;\r\n            }\r\n\r\n            const dataUrl = await image.dataUrl();\r\n            const img = new Image();\r\n            img.onload = () => {\r\n                setWidth(img.width);\r\n                setHeight(img.height);\r\n                setDataUrl(dataUrl);\r\n            };\r\n            img.src = dataUrl;\r\n        }\r\n\r\n        fetchImage();\r\n    }, [image]);\r\n\r\n    if (!image || !dataUrl) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <Dialog open={open} onClose={onClose} maxWidth=\"lg\">\r\n            <Card>\r\n                <CardMedia\r\n                    className={classes.image}\r\n                    image={dataUrl}\r\n                    title={image.name}\r\n                    style={{ width: width * resizeRatio, height: height * resizeRatio }}\r\n                />\r\n            </Card>\r\n        </Dialog>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { SubtitleModel } from '../..';\r\n\r\ninterface Props {\r\n    subtitle: SubtitleModel;\r\n    availableWidth: number;\r\n    scale: number;\r\n}\r\n\r\nexport default function SubtitleTextImage({ subtitle, availableWidth, scale }: Props) {\r\n    if (subtitle.textImage === undefined) {\r\n        return null;\r\n    }\r\n\r\n    const imageScale = (scale * availableWidth) / subtitle.textImage.screen.width;\r\n    const width = imageScale * subtitle.textImage.image.width;\r\n\r\n    return (\r\n        <div style={{ maxWidth: width }}>\r\n            <img style={{ width: '100%' }} alt=\"subtitle\" src={subtitle.textImage.dataUrl} />\r\n        </div>\r\n    );\r\n}\r\n","import React, { MutableRefObject, useCallback, useState, useEffect } from 'react';\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport {\r\n    Anki,\r\n    AnkiDialogSliderContext,\r\n    AudioClip,\r\n    Image,\r\n    humanReadableTime,\r\n    AnkiSettings,\r\n    SubtitleModel,\r\n} from '@project/common';\r\nimport Button from '@material-ui/core/Button';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport RestoreIcon from '@material-ui/icons/Restore';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport Slider, { Mark } from '@material-ui/core/Slider';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ZoomInIcon from '@material-ui/icons/ZoomIn';\r\nimport SubtitleTextImage from './SubtitleTextImage';\r\nimport TagsTextField from './TagsTextField';\r\nimport { AnkiExportMode } from '@project/common';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        '& .MuiTextField-root': {\r\n            marginBottom: theme.spacing(1),\r\n        },\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    mediaField: {\r\n        cursor: 'pointer',\r\n        '& input': {\r\n            cursor: 'pointer',\r\n        },\r\n    },\r\n    rangeSelectSlider: {\r\n        '& .MuiSlider-markLabel': {\r\n            transform: 'translateX(-3%)',\r\n        },\r\n    },\r\n}));\r\n\r\nfunction boundaryIntervalFromSliderContext(sliderContext: AnkiDialogSliderContext) {\r\n    let min = null;\r\n    let max = null;\r\n\r\n    for (const s of sliderContext.subtitles) {\r\n        if (min === null || s.start < min) {\r\n            min = s.start;\r\n        }\r\n\r\n        if (max === null || s.end > max) {\r\n            max = s.end;\r\n        }\r\n    }\r\n\r\n    return min !== null && max !== null && [min, max];\r\n}\r\n\r\nfunction sliderMarksFromSliderContext(sliderContext: AnkiDialogSliderContext, boundary: number[]): Mark[] {\r\n    const seenTimestamps: any = {};\r\n\r\n    return sliderContext.subtitles\r\n        .filter((s) => s.text.trim() !== '' || s.textImage !== undefined)\r\n        .map((s) => {\r\n            if (s.start in seenTimestamps) {\r\n                return null;\r\n            }\r\n\r\n            seenTimestamps[s.start] = true;\r\n\r\n            return {\r\n                value: s.start,\r\n                label: `${s.text.trim().substring(0, Math.min(s.text.length, 3))}...`,\r\n            };\r\n        })\r\n        .filter((mark: Mark | null) => mark !== null)\r\n        .filter((mark: Mark | null) => mark!.value >= boundary[0] && mark!.value <= boundary[1]) as Mark[];\r\n}\r\n\r\nfunction sliderValueLabelFormat(ms: number) {\r\n    return humanReadableTime(ms, true);\r\n}\r\n\r\nfunction subtitleIntersectsTimeInterval(subtitle: SubtitleModel, interval: number[]) {\r\n    return (\r\n        (subtitle.start >= interval[0] && subtitle.start <= interval[1]) ||\r\n        (subtitle.end >= interval[0] && subtitle.end <= interval[1]) ||\r\n        (interval[0] >= subtitle.start && interval[0] <= subtitle.end) ||\r\n        (interval[1] >= subtitle.start && interval[1] <= subtitle.end)\r\n    );\r\n}\r\n\r\ninterface ValueLabelComponentProps {\r\n    children: React.ReactElement;\r\n    open: boolean;\r\n    value: number;\r\n}\r\n\r\nfunction ValueLabelComponent({ children, open, value }: ValueLabelComponentProps) {\r\n    return (\r\n        <Tooltip open={open} enterTouchDelay={0} placement=\"top\" title={value}>\r\n            {children}\r\n        </Tooltip>\r\n    );\r\n}\r\n\r\ninterface TextImageSetProps {\r\n    selectedSubtitles: SubtitleModel[];\r\n    width: number;\r\n}\r\n\r\nconst useTextImageSetStyles = makeStyles((theme) => ({\r\n    root: {\r\n        marginBottom: theme.spacing(1),\r\n        padding: theme.spacing(1),\r\n        backgroundColor: theme.palette.action.disabledBackground,\r\n    },\r\n}));\r\n\r\nfunction TextImageSet({ selectedSubtitles, width }: TextImageSetProps) {\r\n    const classes = useTextImageSetStyles();\r\n\r\n    if (selectedSubtitles.length === 0 || width <= 0) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <Paper elevation={0} className={classes.root}>\r\n            {selectedSubtitles.map((s, index) => {\r\n                return <SubtitleTextImage key={index} availableWidth={width} subtitle={s} scale={1} />;\r\n            })}\r\n        </Paper>\r\n    );\r\n}\r\n\r\nconst TextFieldEndAdornment = withStyles({\r\n    // Hack to recenter TextField end adornment\r\n    root: {\r\n        transform: 'translateY(-8px)',\r\n    },\r\n})(InputAdornment);\r\n\r\nexport interface AnkiDialogState {\r\n    text: string;\r\n    sliderContext?: AnkiDialogSliderContext;\r\n    definition: string;\r\n    word: string;\r\n    source: string;\r\n    url: string;\r\n    customFieldValues: { [key: string]: string };\r\n    lastAppliedTimestampIntervalToText?: number[];\r\n    lastAppliedTimestampIntervalToAudio?: number[];\r\n    initialTimestampInterval?: number[];\r\n    timestampInterval?: number[];\r\n}\r\n\r\ninterface AnkiDialogProps {\r\n    open: boolean;\r\n    disabled: boolean;\r\n    text?: string;\r\n    onProceed: (\r\n        text: string,\r\n        definition: string,\r\n        audioClip: AudioClip | undefined,\r\n        image: Image | undefined,\r\n        word: string,\r\n        source: string,\r\n        url: string,\r\n        customFieldValues: { [key: string]: string },\r\n        tags: string[],\r\n        mode: AnkiExportMode\r\n    ) => void;\r\n    onRerecord?: () => void;\r\n    onRewind: () => void;\r\n    onCancel: () => void;\r\n    onViewImage: (image: Image) => void;\r\n    onOpenSettings?: () => void;\r\n    audioClip?: AudioClip;\r\n    image?: Image;\r\n    source?: string;\r\n    url?: string;\r\n    sliderContext?: AnkiDialogSliderContext;\r\n    settingsProvider: AnkiSettings;\r\n    anki: Anki;\r\n    definition?: string;\r\n    word?: string;\r\n    customFields: { [key: string]: string };\r\n    customFieldValues?: { [key: string]: string };\r\n    initialTimestampInterval?: number[];\r\n    timestampInterval?: number[];\r\n    lastAppliedTimestampIntervalToText?: number[];\r\n    lastAppliedTimestampIntervalToAudio?: number[];\r\n    stateRef?: MutableRefObject<AnkiDialogState | undefined>;\r\n}\r\n\r\nexport function AnkiDialog({\r\n    open,\r\n    disabled,\r\n    text: initialText,\r\n    onProceed,\r\n    onRewind,\r\n    onCancel,\r\n    onViewImage,\r\n    onOpenSettings,\r\n    onRerecord,\r\n    audioClip: initialAudioClip,\r\n    image,\r\n    source: initialSource,\r\n    url: initialUrl,\r\n    sliderContext,\r\n    customFields,\r\n    settingsProvider,\r\n    anki,\r\n    definition: initialDefinition,\r\n    word: initialWord,\r\n    customFieldValues: initialCustomFieldValues,\r\n    timestampInterval: initialSelectedTimestampInterval,\r\n    initialTimestampInterval: forceInitialTimestampInterval,\r\n    lastAppliedTimestampIntervalToText: initialLastAppliedTimestampIntervalToText,\r\n    lastAppliedTimestampIntervalToAudio: initialLastAppliedTimestampIntervalToAudio,\r\n    stateRef,\r\n}: AnkiDialogProps) {\r\n    const classes = useStyles();\r\n    const [definition, setDefinition] = useState<string>('');\r\n    const [text, setText] = useState<string>('');\r\n    const [word, setWord] = useState<string>('');\r\n    const [lastSearchedWord, setLastSearchedWord] = useState<string>();\r\n    const [source, setSource] = useState<string>(initialSource ?? '');\r\n    const [tags, setTags] = useState<string[]>(settingsProvider.tags);\r\n    const [url, setUrl] = useState<string>(initialUrl ?? '');\r\n    const [duplicateNotes, setDuplicateNotes] = useState<any[]>([]);\r\n    const [wordTimestamp, setWordTimestamp] = useState<number>(0);\r\n    const [customFieldValues, setCustomFieldValues] = useState<{ [key: string]: string }>({});\r\n    const [timestampInterval, setTimestampInterval] = useState<number[]>();\r\n    const [selectedSubtitles, setSelectedSubtitles] = useState<SubtitleModel[]>([]);\r\n    const [initialTimestampInterval, setInitialTimestampInterval] = useState<number[]>();\r\n    const [initialTimestampBoundaryInterval, setInitialTimestampBoundaryInterval] = useState<number[]>();\r\n    const [timestampBoundaryInterval, setTimestampBoundaryInterval] = useState<number[]>();\r\n    const [timestampMarks, setTimestampMarks] = useState<Mark[]>();\r\n    const [lastAppliedTimestampIntervalToText, setLastAppliedTimestampIntervalToText] = useState<number[]>();\r\n    const [lastAppliedTimestampIntervalToAudio, setLastAppliedTimestampIntervalToAudio] = useState<number[]>();\r\n    const [width, setWidth] = useState<number>(0);\r\n    const [audioClip, setAudioClip] = useState<AudioClip>();\r\n    const dialogRefCallback = useCallback((element: HTMLElement) => {\r\n        setWidth(element?.getBoundingClientRect().width ?? 0);\r\n    }, []);\r\n\r\n    if (stateRef) {\r\n        stateRef.current = {\r\n            text,\r\n            sliderContext,\r\n            definition,\r\n            word,\r\n            source,\r\n            url,\r\n            customFieldValues,\r\n            initialTimestampInterval,\r\n            lastAppliedTimestampIntervalToText,\r\n            lastAppliedTimestampIntervalToAudio,\r\n            timestampInterval,\r\n        };\r\n    }\r\n\r\n    useEffect(() => {\r\n        setText(initialText ?? '');\r\n        setDefinition(initialDefinition ?? '');\r\n        setWord(initialWord ?? '');\r\n        setSource(initialSource ?? '');\r\n        setUrl(initialUrl ?? '');\r\n        setDuplicateNotes([]);\r\n        setCustomFieldValues(initialCustomFieldValues ?? {});\r\n    }, [initialText, initialSource, initialDefinition, initialWord, initialCustomFieldValues, initialUrl]);\r\n\r\n    useEffect(() => {\r\n        setTags(settingsProvider.tags);\r\n    }, [settingsProvider.tags]);\r\n\r\n    useEffect(() => {\r\n        const timestampInterval =\r\n            initialSelectedTimestampInterval ||\r\n            (sliderContext && [sliderContext.subtitleStart, sliderContext.subtitleEnd]) ||\r\n            undefined;\r\n        const timestampBoundaryInterval =\r\n            (sliderContext && boundaryIntervalFromSliderContext(sliderContext)) || undefined;\r\n        const timestampMarks =\r\n            (sliderContext && sliderMarksFromSliderContext(sliderContext, timestampBoundaryInterval!)) || undefined;\r\n        const selectedSubtitles =\r\n            sliderContext === undefined || timestampInterval === undefined\r\n                ? []\r\n                : sliderContext.subtitles.filter((s) => subtitleIntersectsTimeInterval(s, timestampInterval));\r\n\r\n        setTimestampInterval(timestampInterval);\r\n        setSelectedSubtitles(selectedSubtitles);\r\n        setInitialTimestampInterval(forceInitialTimestampInterval || timestampInterval);\r\n        setLastAppliedTimestampIntervalToText(initialLastAppliedTimestampIntervalToText || timestampInterval);\r\n        setLastAppliedTimestampIntervalToAudio(initialLastAppliedTimestampIntervalToAudio || timestampInterval);\r\n        setTimestampBoundaryInterval(timestampBoundaryInterval);\r\n        setInitialTimestampBoundaryInterval(timestampBoundaryInterval);\r\n        setTimestampMarks(timestampMarks);\r\n    }, [\r\n        sliderContext,\r\n        forceInitialTimestampInterval,\r\n        initialSelectedTimestampInterval,\r\n        initialLastAppliedTimestampIntervalToText,\r\n        initialLastAppliedTimestampIntervalToAudio,\r\n    ]);\r\n\r\n    useEffect(() => {\r\n        if (!initialAudioClip) {\r\n            setAudioClip(undefined);\r\n            return;\r\n        }\r\n\r\n        let newAudioClip = initialAudioClip;\r\n\r\n        if (settingsProvider.preferMp3) {\r\n            newAudioClip = newAudioClip.toMp3();\r\n        }\r\n\r\n        if (lastAppliedTimestampIntervalToAudio) {\r\n            newAudioClip = newAudioClip.slice(\r\n                Math.max(0, Math.round(lastAppliedTimestampIntervalToAudio[0]) - settingsProvider.audioPaddingStart),\r\n                Math.round(lastAppliedTimestampIntervalToAudio[1]) + settingsProvider.audioPaddingEnd\r\n            );\r\n        }\r\n\r\n        setAudioClip(newAudioClip);\r\n    }, [\r\n        initialAudioClip,\r\n        settingsProvider.preferMp3,\r\n        lastAppliedTimestampIntervalToAudio,\r\n        settingsProvider.audioPaddingStart,\r\n        settingsProvider.audioPaddingEnd,\r\n    ]);\r\n\r\n    useEffect(() => {\r\n        setWordTimestamp(Date.now());\r\n    }, [word]);\r\n\r\n    useEffect(() => {\r\n        if (!word || !settingsProvider.wordField) {\r\n            return;\r\n        }\r\n\r\n        const trimmedWord = word.trim();\r\n\r\n        if (trimmedWord === '' || trimmedWord === lastSearchedWord) {\r\n            return;\r\n        }\r\n\r\n        const timeout = setTimeout(async () => {\r\n            try {\r\n                setDuplicateNotes(await anki.findNotesWithWord(trimmedWord));\r\n                setLastSearchedWord(trimmedWord);\r\n            } catch (e) {\r\n                console.error(e);\r\n            }\r\n        }, 500);\r\n\r\n        return () => clearTimeout(timeout);\r\n    }, [word, wordTimestamp, lastSearchedWord, anki, settingsProvider.wordField]);\r\n\r\n    const handlePlayAudio = useCallback(\r\n        (e: React.MouseEvent<HTMLDivElement>) => {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n            audioClip!.play();\r\n        },\r\n        [audioClip]\r\n    );\r\n\r\n    const handleCustomFieldChange = useCallback(\r\n        (customFieldName: string, value: string) => {\r\n            const newCustomFieldValues: { [fieldName: string]: string } = {};\r\n            Object.assign(newCustomFieldValues, customFieldValues);\r\n            newCustomFieldValues[customFieldName] = value;\r\n            setCustomFieldValues(newCustomFieldValues);\r\n        },\r\n        [customFieldValues]\r\n    );\r\n\r\n    let wordHelperText;\r\n\r\n    if (word && word.trim() === lastSearchedWord && settingsProvider.wordField) {\r\n        wordHelperText =\r\n            duplicateNotes.length > 0\r\n                ? `Found ${duplicateNotes.length} notes with word \"${word}\" in field \"${settingsProvider.wordField}\"`\r\n                : `No notes found with word \"${word.trim()}\" in field \"${settingsProvider.wordField}\"`;\r\n    } else {\r\n        wordHelperText = '';\r\n    }\r\n\r\n    const handleViewImage = useCallback(\r\n        (e: React.MouseEvent<HTMLDivElement>) => {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n            onViewImage(image!);\r\n        },\r\n        [image, onViewImage]\r\n    );\r\n\r\n    const handleTimestampIntervalChange = useCallback(\r\n        (e: React.ChangeEvent<{}>, newValue: number | number[]) => {\r\n            const timestampInterval = newValue as number[];\r\n            setTimestampInterval(timestampInterval);\r\n            const selectedSubtitles = sliderContext!.subtitles.filter((s) =>\r\n                subtitleIntersectsTimeInterval(s, timestampInterval)\r\n            );\r\n            setSelectedSubtitles(selectedSubtitles);\r\n        },\r\n        [sliderContext]\r\n    );\r\n\r\n    const handleApplyTimestampIntervalToText = useCallback(() => {\r\n        const interval = timestampInterval!;\r\n        const newText = sliderContext!.subtitles\r\n            .filter((s) => subtitleIntersectsTimeInterval(s, interval))\r\n            .map((s) => s.text)\r\n            .join('\\n');\r\n\r\n        setText(newText);\r\n        setLastAppliedTimestampIntervalToText(timestampInterval);\r\n    }, [timestampInterval, sliderContext]);\r\n\r\n    const handleApplyTimestampIntervalToAudio = useCallback(\r\n        (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n            if (onRerecord) {\r\n                e.stopPropagation();\r\n                onRerecord();\r\n            } else {\r\n                setLastAppliedTimestampIntervalToAudio(timestampInterval);\r\n            }\r\n        },\r\n        [onRerecord, timestampInterval]\r\n    );\r\n\r\n    const handleResetTimestampInterval = useCallback(() => {\r\n        if (!initialTimestampBoundaryInterval) {\r\n            return;\r\n        }\r\n\r\n        const selectedSubtitles =\r\n            sliderContext === undefined || initialTimestampInterval === undefined\r\n                ? []\r\n                : sliderContext.subtitles.filter((s) => subtitleIntersectsTimeInterval(s, initialTimestampInterval));\r\n        setSelectedSubtitles(selectedSubtitles);\r\n        setTimestampInterval(initialTimestampInterval);\r\n        setTimestampBoundaryInterval(initialTimestampBoundaryInterval);\r\n        setTimestampMarks(\r\n            sliderContext && sliderMarksFromSliderContext(sliderContext, initialTimestampBoundaryInterval)\r\n        );\r\n    }, [initialTimestampInterval, initialTimestampBoundaryInterval, sliderContext]);\r\n\r\n    const handleZoomInTimestampInterval = useCallback(() => {\r\n        if (!timestampBoundaryInterval || !timestampInterval) {\r\n            return;\r\n        }\r\n\r\n        const newMin = (timestampBoundaryInterval[0] + timestampInterval[0]) / 2;\r\n        const newMax = (timestampBoundaryInterval[1] + timestampInterval[1]) / 2;\r\n        const newTimestampBoundaryInterval = [newMin, newMax];\r\n        setTimestampBoundaryInterval(newTimestampBoundaryInterval);\r\n        setTimestampMarks(sliderContext && sliderMarksFromSliderContext(sliderContext, newTimestampBoundaryInterval));\r\n    }, [timestampBoundaryInterval, timestampInterval, sliderContext]);\r\n\r\n    const handleCopyImageToClipboard = useCallback(\r\n        async (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n            e.stopPropagation();\r\n\r\n            if (!image) {\r\n                return;\r\n            }\r\n\r\n            navigator.clipboard.write([new ClipboardItem({ 'image/png': await image.pngBlob() })]);\r\n        },\r\n        [image]\r\n    );\r\n\r\n    const disableApplyTextSelection =\r\n        !sliderContext || sliderContext.subtitles.filter((s) => s.text.trim() !== '').length === 0;\r\n\r\n    return (\r\n        <Dialog open={open} disableEnforceFocus fullWidth maxWidth=\"sm\" onClose={onCancel}>\r\n            <Toolbar>\r\n                <Typography variant=\"h6\" className={classes.title}>\r\n                    Anki Export\r\n                </Typography>\r\n                {onOpenSettings && (\r\n                    <IconButton edge=\"end\" onClick={() => onOpenSettings()}>\r\n                        <SettingsIcon />\r\n                    </IconButton>\r\n                )}\r\n            </Toolbar>\r\n            <DialogContent ref={dialogRefCallback}>\r\n                <form className={classes.root}>\r\n                    {sliderContext && timestampInterval && (\r\n                        <TextImageSet\r\n                            selectedSubtitles={selectedSubtitles.filter((s) => s.textImage !== undefined)}\r\n                            width={width}\r\n                        />\r\n                    )}\r\n                    <TextField\r\n                        variant=\"filled\"\r\n                        color=\"secondary\"\r\n                        multiline\r\n                        fullWidth\r\n                        maxRows={8}\r\n                        label=\"Sentence\"\r\n                        value={text}\r\n                        onChange={(e) => setText(e.target.value)}\r\n                        InputProps={{\r\n                            endAdornment: timestampInterval && (\r\n                                <TextFieldEndAdornment position=\"end\">\r\n                                    <Tooltip title=\"Apply Selection\">\r\n                                        <span>\r\n                                            <IconButton\r\n                                                disabled={\r\n                                                    !timestampInterval ||\r\n                                                    !lastAppliedTimestampIntervalToText ||\r\n                                                    (timestampInterval[0] === lastAppliedTimestampIntervalToText[0] &&\r\n                                                        timestampInterval[1] ===\r\n                                                            lastAppliedTimestampIntervalToText[1]) ||\r\n                                                    disableApplyTextSelection\r\n                                                }\r\n                                                onClick={handleApplyTimestampIntervalToText}\r\n                                                edge=\"end\"\r\n                                            >\r\n                                                <DoneIcon />\r\n                                            </IconButton>\r\n                                        </span>\r\n                                    </Tooltip>\r\n                                </TextFieldEndAdornment>\r\n                            ),\r\n                        }}\r\n                    />\r\n                    <TextField\r\n                        variant=\"filled\"\r\n                        color=\"secondary\"\r\n                        multiline\r\n                        fullWidth\r\n                        rows={8}\r\n                        label=\"Definition\"\r\n                        value={definition}\r\n                        onChange={(e) => setDefinition(e.target.value)}\r\n                    />\r\n                    <TextField\r\n                        variant=\"filled\"\r\n                        color=\"secondary\"\r\n                        fullWidth\r\n                        label=\"Word\"\r\n                        value={word}\r\n                        onChange={(e) => setWord(e.target.value)}\r\n                        helperText={wordHelperText}\r\n                        InputProps={{\r\n                            endAdornment: (\r\n                                <InputAdornment position=\"end\">\r\n                                    <Tooltip title=\"Search in Anki\">\r\n                                        <span>\r\n                                            <IconButton\r\n                                                disabled={\r\n                                                    disabled ||\r\n                                                    !settingsProvider.wordField ||\r\n                                                    !word ||\r\n                                                    word.trim() === ''\r\n                                                }\r\n                                                onClick={() => anki.findNotesWithWordGui(word.trim())}\r\n                                                edge=\"end\"\r\n                                            >\r\n                                                <SearchIcon />\r\n                                            </IconButton>\r\n                                        </span>\r\n                                    </Tooltip>\r\n                                </InputAdornment>\r\n                            ),\r\n                        }}\r\n                    />\r\n                    {Object.keys(customFields).map((customFieldName) => (\r\n                        <TextField\r\n                            key={customFieldName}\r\n                            variant=\"filled\"\r\n                            color=\"secondary\"\r\n                            fullWidth\r\n                            multiline\r\n                            maxRows={8}\r\n                            label={customFieldName}\r\n                            value={customFieldValues[customFieldName] || ''}\r\n                            onChange={(e) => handleCustomFieldChange(customFieldName, e.target.value)}\r\n                        />\r\n                    ))}\r\n                    {audioClip && (\r\n                        <div className={classes.mediaField} onClick={handlePlayAudio}>\r\n                            <TextField\r\n                                variant=\"filled\"\r\n                                color=\"secondary\"\r\n                                fullWidth\r\n                                value={audioClip.name}\r\n                                label=\"Audio\"\r\n                                InputProps={{\r\n                                    endAdornment: timestampInterval && (\r\n                                        <InputAdornment position=\"end\">\r\n                                            {onRerecord ? (\r\n                                                <Tooltip title=\"Apply Selection (rerecord)\">\r\n                                                    <span>\r\n                                                        <IconButton\r\n                                                            disabled={\r\n                                                                !timestampInterval ||\r\n                                                                !lastAppliedTimestampIntervalToAudio ||\r\n                                                                (timestampInterval[0] ===\r\n                                                                    lastAppliedTimestampIntervalToAudio[0] &&\r\n                                                                    timestampInterval[1] ===\r\n                                                                        lastAppliedTimestampIntervalToAudio[1])\r\n                                                            }\r\n                                                            onClick={handleApplyTimestampIntervalToAudio}\r\n                                                            edge=\"end\"\r\n                                                        >\r\n                                                            <DoneIcon />\r\n                                                        </IconButton>\r\n                                                    </span>\r\n                                                </Tooltip>\r\n                                            ) : (\r\n                                                <Tooltip title={'Apply Selection'}>\r\n                                                    <span>\r\n                                                        <IconButton\r\n                                                            disabled={\r\n                                                                !lastAppliedTimestampIntervalToAudio ||\r\n                                                                (timestampInterval[0] ===\r\n                                                                    lastAppliedTimestampIntervalToAudio[0] &&\r\n                                                                    timestampInterval[1] ===\r\n                                                                        lastAppliedTimestampIntervalToAudio[1]) ||\r\n                                                                !audioClip.isSliceable(\r\n                                                                    timestampInterval[0],\r\n                                                                    timestampInterval[1]\r\n                                                                )\r\n                                                            }\r\n                                                            onClick={handleApplyTimestampIntervalToAudio}\r\n                                                            edge=\"end\"\r\n                                                        >\r\n                                                            <DoneIcon />\r\n                                                        </IconButton>\r\n                                                    </span>\r\n                                                </Tooltip>\r\n                                            )}\r\n                                        </InputAdornment>\r\n                                    ),\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    )}\r\n                    {image && (\r\n                        <div className={classes.mediaField} onClick={handleViewImage}>\r\n                            <TextField\r\n                                variant=\"filled\"\r\n                                color=\"secondary\"\r\n                                fullWidth\r\n                                value={image.name}\r\n                                label=\"Image\"\r\n                                InputProps={{\r\n                                    endAdornment: (\r\n                                        <InputAdornment position=\"end\">\r\n                                            <Tooltip title=\"Copy to Clipboard\">\r\n                                                <span>\r\n                                                    <IconButton onClick={handleCopyImageToClipboard} edge=\"end\">\r\n                                                        <FileCopyIcon />\r\n                                                    </IconButton>\r\n                                                </span>\r\n                                            </Tooltip>\r\n                                        </InputAdornment>\r\n                                    ),\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    )}\r\n                    <TextField\r\n                        variant=\"filled\"\r\n                        color=\"secondary\"\r\n                        fullWidth\r\n                        label=\"Source\"\r\n                        value={source}\r\n                        onChange={(e) => setSource(e.target.value)}\r\n                    />\r\n                    {initialUrl && (\r\n                        <TextField\r\n                            variant=\"filled\"\r\n                            color=\"secondary\"\r\n                            fullWidth\r\n                            label=\"URL\"\r\n                            value={url}\r\n                            onChange={(e) => setUrl(e.target.value)}\r\n                        />\r\n                    )}\r\n                    {settingsProvider.tags.length > 0 && (\r\n                        <TagsTextField\r\n                            variant=\"filled\"\r\n                            label=\"Tags\"\r\n                            helperText=\"Comma-separated list of strings\"\r\n                            fullWidth\r\n                            color=\"secondary\"\r\n                            tags={tags}\r\n                            onTagsChange={(newTags) => setTags(newTags)}\r\n                        />\r\n                    )}\r\n                    {timestampInterval && timestampBoundaryInterval && timestampMarks && (\r\n                        <Grid container direction=\"row\">\r\n                            <Grid item style={{ flexGrow: 1 }}>\r\n                                <Slider\r\n                                    ValueLabelComponent={ValueLabelComponent}\r\n                                    value={timestampInterval}\r\n                                    valueLabelFormat={sliderValueLabelFormat}\r\n                                    onChange={handleTimestampIntervalChange}\r\n                                    min={timestampBoundaryInterval[0]}\r\n                                    max={timestampBoundaryInterval[1]}\r\n                                    marks={timestampMarks}\r\n                                    step={1}\r\n                                    valueLabelDisplay=\"auto\"\r\n                                    className={classes.rangeSelectSlider}\r\n                                    color=\"secondary\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Tooltip title=\"Reset\">\r\n                                    <span>\r\n                                        <IconButton\r\n                                            edge=\"end\"\r\n                                            style={{ marginTop: -8 }}\r\n                                            onClick={handleResetTimestampInterval}\r\n                                        >\r\n                                            <RestoreIcon />\r\n                                        </IconButton>\r\n                                    </span>\r\n                                </Tooltip>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Tooltip title=\"Zoom In\">\r\n                                    <span>\r\n                                        <IconButton\r\n                                            edge=\"end\"\r\n                                            style={{ marginTop: -8 }}\r\n                                            onClick={handleZoomInTimestampInterval}\r\n                                        >\r\n                                            <ZoomInIcon />\r\n                                        </IconButton>\r\n                                    </span>\r\n                                </Tooltip>\r\n                            </Grid>\r\n                        </Grid>\r\n                    )}\r\n                </form>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button disabled={disabled} onClick={() => onCancel()}>\r\n                    Cancel\r\n                </Button>\r\n                {sliderContext && (\r\n                    <Button disabled={disabled} onClick={() => onRewind()}>\r\n                        Rewind\r\n                    </Button>\r\n                )}\r\n                <Button\r\n                    disabled={disabled}\r\n                    onClick={() =>\r\n                        onProceed(\r\n                            text,\r\n                            definition,\r\n                            audioClip,\r\n                            image,\r\n                            word,\r\n                            source ?? '',\r\n                            url ?? '',\r\n                            customFieldValues,\r\n                            tags,\r\n                            'gui'\r\n                        )\r\n                    }\r\n                >\r\n                    Open in Anki\r\n                </Button>\r\n                <Button\r\n                    disabled={disabled}\r\n                    onClick={() =>\r\n                        onProceed(\r\n                            text,\r\n                            definition,\r\n                            audioClip,\r\n                            image,\r\n                            word,\r\n                            source ?? '',\r\n                            url ?? '',\r\n                            customFieldValues,\r\n                            tags,\r\n                            'updateLast'\r\n                        )\r\n                    }\r\n                >\r\n                    Update Last Card\r\n                </Button>\r\n                <Button\r\n                    disabled={disabled}\r\n                    onClick={() =>\r\n                        onProceed(\r\n                            text,\r\n                            definition,\r\n                            audioClip,\r\n                            image,\r\n                            word,\r\n                            source ?? '',\r\n                            url ?? '',\r\n                            customFieldValues,\r\n                            tags,\r\n                            'default'\r\n                        )\r\n                    }\r\n                >\r\n                    Export\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/background-colored.cbc50e45.png\";","import { makeStyles } from '@material-ui/styles';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport coloredBackground from './background-colored.png';\r\nimport { Theme } from '@material-ui/core';\r\n\r\ninterface StylesProps {\r\n    dragging: boolean;\r\n    appBarHidden: boolean;\r\n}\r\n\r\ninterface Props {\r\n    dragging: boolean;\r\n    appBarHidden: boolean;\r\n    loading: boolean;\r\n}\r\n\r\nconst useStyles = makeStyles<Theme, StylesProps>((theme) => ({\r\n    root: ({ dragging, appBarHidden }) => ({\r\n        position: 'absolute',\r\n        height: appBarHidden ? '100%' : 'calc(100% - 64px)',\r\n        width: '100%',\r\n        zIndex: 101,\r\n        pointerEvents: dragging ? 'auto' : 'none',\r\n    }),\r\n    transparentBackground: ({ appBarHidden }) => ({\r\n        '&::before': {\r\n            content: \"' '\",\r\n            position: 'absolute',\r\n            height: appBarHidden ? '100vh' : 'calc(100vh - 64px)',\r\n            width: '100%',\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            textAlign: 'center',\r\n            backgroundSize: '300px 300px',\r\n            backgroundRepeat: 'no-repeat',\r\n            backgroundPosition: 'center',\r\n            backgroundImage: `url(${coloredBackground})`,\r\n            backgroundBlendMode: 'overlay',\r\n            background: 'rgba(0, 0, 0, .3)',\r\n            filter: 'drop-shadow(10px 10px 10px rgb(0, 0, 0, .4))',\r\n        },\r\n        width: '100%',\r\n        height: '100%',\r\n    }),\r\n}));\r\n\r\nexport default function DragOverlay({ dragging, appBarHidden, loading }: Props) {\r\n    const classes = useStyles({ dragging, appBarHidden });\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Fade in={dragging || loading}>\r\n                <div className={classes.transparentBackground} />\r\n            </Fade>\r\n        </div>\r\n    );\r\n}\r\n","import { BufferAdapter } from \"./buffer\";\r\n\r\nexport enum SegmentType {\r\n    pds = 20,\r\n    ods = 21,\r\n    pcs = 22,\r\n    wds = 23,\r\n    end = 128,\r\n}\r\n\r\nconst segmentTypeValues = Object.values(SegmentType);\r\n\r\nexport function segmentTypeFromByte(byte: number) {\r\n    for (const type of segmentTypeValues) {\r\n        if (byte === type) {\r\n            return type;\r\n        }\r\n    }\r\n\r\n    throw new Error(`Invalid segment type byte: ${byte}`);\r\n}\r\n\r\nexport enum CompositionState {\r\n    normal = 0,\r\n    acquisitionState = 64,\r\n    epochStart = 128,\r\n}\r\n\r\nconst compositionStateValues = Object.values(CompositionState);\r\n\r\nexport function compositionStateFromByte(byte: number) {\r\n    for (const state of compositionStateValues) {\r\n        if (byte === state) {\r\n            return state;\r\n        }\r\n    }\r\n\r\n    throw new Error(`Invalid composition state byte: ${byte}`);\r\n}\r\n\r\nexport function paletteUpdateFlagFromByte(byte: number) {\r\n    switch (byte) {\r\n        case 0:\r\n            return false;\r\n        case 128:\r\n            return true;\r\n        default:\r\n            throw new Error(`Invalid palette update flag byte: ${byte}`);\r\n    }\r\n}\r\n\r\nexport function objectCroppedFlagFromByte(byte: number) {\r\n    switch (byte) {\r\n        case 0:\r\n            return false;\r\n        case 64:\r\n            return true;\r\n        default:\r\n            throw new Error(`Invalid object cropped flag byte: ${byte}`);\r\n    }\r\n}\r\n\r\nexport enum LastInSequenceFlag {\r\n    lastInSequence = 64,\r\n    firstInSequence = 128,\r\n    firstAndLastInSequence = 192,\r\n}\r\n\r\nconst lastInSequenceFlagValues = Object.values(LastInSequenceFlag);\r\n\r\nexport function lastInSequenceFlagFromByte(byte: number) {\r\n    for (const flag of lastInSequenceFlagValues) {\r\n        if (byte === flag) {\r\n            return flag;\r\n        }\r\n    }\r\n\r\n    throw new Error(`Invalid last in sequence flag byte: ${byte}`);\r\n}\r\n\r\nexport interface SegmentHeader {\r\n    presentationTimestamp: number;\r\n    decodingTimestamp: number;\r\n    segmentType: SegmentType;\r\n    segmentSize: number;\r\n}\r\n\r\nexport interface Segment {\r\n    readonly header: SegmentHeader;\r\n}\r\n\r\nexport interface PresentationCompositionSegment extends Segment {\r\n    readonly width: number;\r\n    readonly height: number;\r\n    readonly compositionNumber: number;\r\n    readonly compositionState: CompositionState;\r\n    readonly paletteUpdateFlag: boolean;\r\n    readonly paletteId: number;\r\n    readonly compositionObjectCount: number;\r\n    readonly objectId: number;\r\n    readonly windowId: number;\r\n    readonly objectCroppedFlag: boolean;\r\n    readonly objectHorizontalPosition: number;\r\n    readonly objectVerticalPosition: number;\r\n    readonly objectCroppingHorizontalPosition: number;\r\n    readonly objectCroppingVerticalPosition: number;\r\n    readonly objectCroppingWidth: number;\r\n    readonly objectCroppingHeightPosition: number;\r\n}\r\n\r\nexport interface WindowDefinition {\r\n    readonly windowId: number;\r\n    readonly windowHorizontalPosition: number;\r\n    readonly windowVerticalPosition: number;\r\n    readonly windowWidth: number;\r\n    readonly windowHeight: number;\r\n}\r\n\r\nexport interface WindowDefinitionSegment extends Segment {\r\n    readonly windowCount: number;\r\n    readonly windowDefinitions: WindowDefinition[];\r\n}\r\n\r\nexport interface PaletteEntry {\r\n    readonly paletteEntryId: number;\r\n    readonly luminance: number;\r\n    readonly colorDifferenceRed: number;\r\n    readonly colorDifferenceBlue: number;\r\n    readonly transparency: number;\r\n}\r\n\r\nexport interface PaletteDefinitionSegment extends Segment {\r\n    readonly paletteId: number;\r\n    readonly paletteVersionNumber: number;\r\n    readonly paletteEntries: PaletteEntry[];\r\n}\r\n\r\nexport interface ObjectDefinitionSegment extends Segment {\r\n    readonly objectId: number;\r\n    readonly objectVersionNumber: number;\r\n    readonly lastInSequenceFlag: LastInSequenceFlag;\r\n    readonly objectDataLength: number;\r\n    readonly width?: number;\r\n    readonly height?: number;\r\n    readonly objectData: BufferAdapter;\r\n}\r\n","export interface BufferAdapter {\r\n    length: number;\r\n    at(index: number): number;\r\n    subarray(start: number, end: number): BufferAdapter;\r\n}\r\n\r\nexport class Uint8ArrayBuffer implements BufferAdapter {\r\n    private readonly buffer: Uint8Array;\r\n\r\n    constructor(buffer: Uint8Array) {\r\n        this.buffer = buffer;\r\n    }\r\n\r\n    get length() {\r\n        return this.buffer.length;\r\n    }\r\n\r\n    at(index: number): number {\r\n        return this.buffer[index];\r\n    }\r\n\r\n    subarray(start: number, end: number) {\r\n        return new Uint8ArrayBuffer(this.buffer.subarray(start, end));\r\n    }\r\n}\r\n\r\nexport class CompositeBuffer implements BufferAdapter {\r\n    private readonly buffers: BufferAdapter[] = [];\r\n\r\n    constructor(buffers: BufferAdapter[]) {\r\n        this.buffers = buffers;\r\n    }\r\n\r\n    get length(): number {\r\n        let length = 0;\r\n        for (const b of this.buffers) {\r\n            length += b.length;\r\n        }\r\n\r\n        return length;\r\n    }\r\n\r\n    at(index: number): number {\r\n        let previousBuffersLength = 0;\r\n\r\n        for (const buffer of this.buffers) {\r\n            const bufferIndex = index - previousBuffersLength;\r\n\r\n            if (bufferIndex < buffer.length) {\r\n                return buffer.at(bufferIndex);\r\n            }\r\n\r\n            previousBuffersLength += buffer.length;\r\n        }\r\n\r\n        throw new Error('Out of bounds');\r\n    }\r\n\r\n    subarray(start: number, end: number): BufferAdapter {\r\n        const chunks: BufferAdapter[] = [];\r\n        let previousBuffersLength = 0;\r\n\r\n        for (const buffer of this.buffers) {\r\n            const startBufferIndex = Math.max(0, start - previousBuffersLength);\r\n            const endBufferIndex = Math.min(buffer.length, end - previousBuffersLength);\r\n\r\n            if (endBufferIndex > 0 && startBufferIndex < endBufferIndex) {\r\n                chunks.push(buffer.subarray(startBufferIndex, endBufferIndex));\r\n            }\r\n\r\n            previousBuffersLength += buffer.length;\r\n        }\r\n\r\n        return new CompositeBuffer(chunks);\r\n    }\r\n}\r\n\r\nexport class CompositeBufferReader {\r\n    private buffers: Uint8Array[] = [];\r\n\r\n    add(buffer: Uint8Array) {\r\n        this.buffers.push(buffer);\r\n    }\r\n\r\n    get length(): number {\r\n        let length = 0;\r\n\r\n        for (const buffer of this.buffers) {\r\n            length += buffer.length;\r\n        }\r\n\r\n        return length;\r\n    }\r\n\r\n    read(bytes: number): BufferAdapter {\r\n        if (bytes === 0) {\r\n            return new CompositeBuffer([]);\r\n        }\r\n\r\n        const chunks: Uint8Array[] = [];\r\n        let accumulated = 0;\r\n\r\n        while (true) {\r\n            if (this.buffers.length === 0) {\r\n                throw new Error('Trying to read more bytes than available');\r\n            }\r\n\r\n            const buffer = this.buffers.shift()!;\r\n            const required = bytes - accumulated;\r\n\r\n            if (buffer.length === required) {\r\n                chunks.push(buffer);\r\n                break;\r\n            } else if (buffer.length > required) {\r\n                chunks.push(buffer.subarray(0, required));\r\n                this.buffers.unshift(buffer.subarray(required, buffer.length));\r\n                break;\r\n            }\r\n\r\n            accumulated += buffer.length;\r\n            chunks.push(buffer);\r\n        }\r\n\r\n        return new CompositeBuffer(chunks.map(c => new Uint8ArrayBuffer(c)));\r\n    }\r\n}\r\n\r\nexport class BufferGenerator {\r\n    private stream: ReadableStream;\r\n    private accumulatedBuffer: CompositeBufferReader = new CompositeBufferReader();\r\n\r\n    requestedBytes: number = 0;\r\n\r\n    constructor(stream: ReadableStream) {\r\n        this.stream = stream;\r\n    }\r\n\r\n    async *buffers() {\r\n        const reader = this.stream.getReader();\r\n\r\n        while (true) {\r\n            if (this.accumulatedBuffer.length >= this.requestedBytes) {\r\n                yield this.accumulatedBuffer.read(this.requestedBytes);\r\n            } else {\r\n                const result = await reader.read();\r\n\r\n                if (result.done) {\r\n                    break;\r\n                }\r\n\r\n                this.accumulatedBuffer.add(result.value as Uint8Array);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport class BufferReader {\r\n    private buffer: BufferAdapter;\r\n    private _index: number = 0;\r\n\r\n    constructor(bytes: BufferAdapter) {\r\n        this.buffer = bytes;\r\n    }\r\n\r\n    get index() {\r\n        return this._index;\r\n    }\r\n\r\n    get hasNext() {\r\n        return this._index < this.buffer.length;\r\n    }\r\n\r\n    readHex(bytes: number, limit?: number) {\r\n        if (limit !== undefined && this._index + bytes > limit) {\r\n            return 0;\r\n        }\r\n\r\n        let number = 0;\r\n        let digit = 0;\r\n        const from = this._index;\r\n        const to = this._index + bytes - 1;\r\n\r\n        for (let i = to; i >= from; --i) {\r\n            number += this.buffer.at(i) << (8 * digit);\r\n            ++digit;\r\n        }\r\n\r\n        this._index += bytes;\r\n        return number;\r\n    }\r\n\r\n    readBuffer(bytes: number) {\r\n        const buffer = this.buffer.subarray(this.index, this.index + bytes);\r\n        this._index += bytes;\r\n        return buffer;\r\n    }\r\n}\r\n","import { BufferAdapter, BufferGenerator, BufferReader, CompositeBuffer } from './buffer';\r\nimport {\r\n    CompositionState,\r\n    compositionStateFromByte,\r\n    LastInSequenceFlag,\r\n    lastInSequenceFlagFromByte,\r\n    objectCroppedFlagFromByte,\r\n    ObjectDefinitionSegment,\r\n    PaletteDefinitionSegment,\r\n    PaletteEntry,\r\n    paletteUpdateFlagFromByte,\r\n    PresentationCompositionSegment,\r\n    Segment,\r\n    SegmentHeader,\r\n    SegmentType,\r\n    segmentTypeFromByte,\r\n    WindowDefinitionSegment,\r\n} from './segment';\r\n\r\nconst pgMagicNumber = 20551; // 0x5047\r\n\r\nexport class RunLengthEncodedBuffer {\r\n    private readonly encodedBuffer: BufferAdapter;\r\n\r\n    constructor(encodedBuffer: BufferAdapter) {\r\n        this.encodedBuffer = encodedBuffer;\r\n    }\r\n\r\n    decode(callback: (x: number, y: number, color: number) => void) {\r\n        let encodedIndex = 0;\r\n        let decodedLineIndex = 0;\r\n        let currentLine = 0;\r\n        const encodedLength = this.encodedBuffer.length;\r\n\r\n        while (encodedIndex < encodedLength) {\r\n            const firstByte = this.encodedBuffer.at(encodedIndex);\r\n            let runLength;\r\n            let color;\r\n            let increment;\r\n\r\n            // Deal with each possible code\r\n            if (firstByte > 0) {\r\n                // CCCCCCCC\t- One pixel in color C\r\n                color = firstByte;\r\n                runLength = 1;\r\n                increment = 1;\r\n            } else {\r\n                const secondByte = this.encodedBuffer.at(encodedIndex + 1);\r\n\r\n                if (secondByte === 0) {\r\n                    // 00000000 00000000 - End of line\r\n                    color = 0;\r\n                    runLength = 0;\r\n                    increment = 2;\r\n                    decodedLineIndex = 0;\r\n                    ++currentLine;\r\n                } else if (secondByte < 64) {\r\n                    // 00000000 00LLLLLL - L pixels in color 0 (L between 1 and 63)\r\n                    color = 0;\r\n                    runLength = secondByte;\r\n                    increment = 2;\r\n                } else if (secondByte < 128) {\r\n                    // 00000000 01LLLLLL LLLLLLLL - L pixels in color 0 (L between 64 and 16383)\r\n                    const thirdByte = this.encodedBuffer.at(encodedIndex + 2);\r\n                    color = 0;\r\n                    runLength = ((secondByte - 64) << 8) + thirdByte;\r\n                    increment = 3;\r\n                } else if (secondByte < 192) {\r\n                    // 00000000 10LLLLLL CCCCCCCC - L pixels in color C (L between 3 and 63)\r\n                    const thirdByte = this.encodedBuffer.at(encodedIndex + 2);\r\n                    color = thirdByte;\r\n                    runLength = secondByte - 128;\r\n                    increment = 3;\r\n                } else {\r\n                    // 00000000 11LLLLLL LLLLLLLL CCCCCCCC - L pixels in color C (L between 64 and 16383)\r\n                    const thirdByte = this.encodedBuffer.at(encodedIndex + 2);\r\n                    const fourthByte = this.encodedBuffer.at(encodedIndex + 3);\r\n                    color = fourthByte;\r\n                    runLength = ((secondByte - 192) << 8) + thirdByte;\r\n                    increment = 4;\r\n                }\r\n            }\r\n\r\n            if (runLength > 0) {\r\n                for (let x = decodedLineIndex; x < decodedLineIndex + runLength; ++x) {\r\n                    callback(x, currentLine, color);\r\n                }\r\n                // decodedLine.fill(color, decodedLineIndex, decodedLineIndex + runLength);\r\n                decodedLineIndex += runLength;\r\n            }\r\n\r\n            encodedIndex += increment;\r\n        }\r\n    }\r\n}\r\n\r\nexport class DisplaySet {\r\n    readonly presentationCompositionSegment: PresentationCompositionSegment;\r\n    readonly windowDefinitionSegments: WindowDefinitionSegment[];\r\n    readonly paletteDefinitionSegments: PaletteDefinitionSegment[];\r\n    readonly objectDefinitionSegments: ObjectDefinitionSegment[];\r\n    readonly endDefinitionSegment: Segment;\r\n\r\n    private readonly previousDisplaySet?: DisplaySet;\r\n\r\n    constructor(\r\n        presentationCompositionSegment: PresentationCompositionSegment,\r\n        windowDefinitionSegments: WindowDefinitionSegment[],\r\n        paletteDefinitionSegments: PaletteDefinitionSegment[],\r\n        objectDefinitionSegments: ObjectDefinitionSegment[],\r\n        endDefinitionSegment: Segment,\r\n        previousDisplaySet?: DisplaySet\r\n    ) {\r\n        this.presentationCompositionSegment = presentationCompositionSegment;\r\n        this.windowDefinitionSegments = windowDefinitionSegments;\r\n        this.paletteDefinitionSegments = paletteDefinitionSegments;\r\n        this.objectDefinitionSegments = objectDefinitionSegments;\r\n        this.endDefinitionSegment = endDefinitionSegment;\r\n        this.previousDisplaySet = previousDisplaySet;\r\n    }\r\n\r\n    get firstOds() {\r\n        return this.objectDefinitionSegments.find(\r\n            (ods) =>\r\n                ods.lastInSequenceFlag === LastInSequenceFlag.firstInSequence ||\r\n                ods.lastInSequenceFlag === LastInSequenceFlag.firstAndLastInSequence\r\n        );\r\n    }\r\n\r\n    protected paletteDefinitionSegment(paletteId: number): PaletteDefinitionSegment | undefined {\r\n        const pds = this.paletteDefinitionSegments.find((s) => s.paletteId === paletteId);\r\n\r\n        if (pds === undefined) {\r\n            if (this.presentationCompositionSegment.compositionState !== CompositionState.normal) {\r\n                throw new Error(`PCS references invalid PDS and composition state is not 'normal'`);\r\n            }\r\n\r\n            if (this.previousDisplaySet === undefined) {\r\n                throw new Error(`PCS references invalid PDS and no previous display set to fallback to`);\r\n            }\r\n\r\n            return this.previousDisplaySet.paletteDefinitionSegment(paletteId);\r\n        }\r\n\r\n        return pds;\r\n    }\r\n\r\n    imageData(buffer?: Uint8ClampedArray) {\r\n        const pds = this.paletteDefinitionSegment(this.presentationCompositionSegment.paletteId);\r\n\r\n        if (pds === undefined) {\r\n            throw new Error(`PCS references invalid PDS`);\r\n        }\r\n\r\n        const firstOds = this.firstOds;\r\n\r\n        if (firstOds === undefined || firstOds.width === undefined || firstOds.height === undefined) {\r\n            throw new Error(`Missing first ODS with defined width and height`);\r\n        }\r\n\r\n        const imageDataArray = buffer ?? new Uint8ClampedArray(firstOds.width * firstOds.height * 4);\r\n        const rgbaPalette = pds.paletteEntries.map((palette) => this.ycrcbToRgba(palette));\r\n        const width = firstOds.width;\r\n\r\n        new RunLengthEncodedBuffer(\r\n            new CompositeBuffer(this.objectDefinitionSegments.map((ods) => ods.objectData))\r\n        ).decode((x, y, paletteIndex) => {\r\n            const pixelIndex = y * width + x;\r\n            const imageDataOffset = pixelIndex * 4;\r\n\r\n            if (paletteIndex >= rgbaPalette.length) {\r\n                imageDataArray[imageDataOffset] = 0;\r\n                imageDataArray[imageDataOffset + 1] = 0;\r\n                imageDataArray[imageDataOffset + 2] = 0;\r\n                imageDataArray[imageDataOffset + 3] = 0;\r\n            } else {\r\n                const color = rgbaPalette[paletteIndex];\r\n                imageDataArray[imageDataOffset] = color.r;\r\n                imageDataArray[imageDataOffset + 1] = color.g;\r\n                imageDataArray[imageDataOffset + 2] = color.b;\r\n                imageDataArray[imageDataOffset + 3] = color.a;\r\n            }\r\n        });\r\n\r\n        return new ImageData(\r\n            imageDataArray.subarray(0, 4 * firstOds.width * firstOds.height),\r\n            firstOds.width,\r\n            firstOds.height\r\n        );\r\n    }\r\n\r\n    // https://stackoverflow.com/questions/21264648/javascript-convert-yuv-to-rgb\r\n    private ycrcbToRgba(palette: PaletteEntry) {\r\n        const y = palette.luminance;\r\n        const cb = palette.colorDifferenceBlue;\r\n        const cr = palette.colorDifferenceRed;\r\n\r\n        const r = this.clamp(Math.floor(y + 1.4075 * (cr - 128)), 0, 255);\r\n        const g = this.clamp(Math.floor(y - 0.3455 * (cb - 128) - 0.7169 * (cr - 128)), 0, 255);\r\n        const b = this.clamp(Math.floor(y + 1.779 * (cb - 128)), 0, 255);\r\n        return { r, g, b, a: palette.transparency };\r\n    }\r\n\r\n    private clamp(number: number, min: number, max: number) {\r\n        return Math.max(min, Math.min(max, number));\r\n    }\r\n}\r\n\r\nexport async function* parseDisplaySets(s: ReadableStream) {\r\n    const bufferGenerator = new BufferGenerator(s);\r\n    bufferGenerator.requestedBytes = 13;\r\n\r\n    let header: SegmentHeader | undefined;\r\n    let lastDisplaySet: DisplaySet | undefined;\r\n    let presentationCompositionSegment: PresentationCompositionSegment | undefined;\r\n    let windowDefinitionSegments: WindowDefinitionSegment[] = [];\r\n    let paletteDefinitionSegments: PaletteDefinitionSegment[] = [];\r\n    let objectDefinitionSegments: ObjectDefinitionSegment[] = [];\r\n\r\n    for await (const buffer of bufferGenerator.buffers()) {\r\n        const reader = new BufferReader(buffer);\r\n\r\n        if (header) {\r\n            switch (header.segmentType) {\r\n                case SegmentType.pcs:\r\n                    if (presentationCompositionSegment !== undefined) {\r\n                        throw new Error(`Unexpected PDS`);\r\n                    }\r\n\r\n                    presentationCompositionSegment = parsePcsSegment(reader, header);\r\n                    break;\r\n                case SegmentType.wds:\r\n                    if (presentationCompositionSegment === undefined) {\r\n                        throw new Error(`Unexpected WDS`);\r\n                    }\r\n\r\n                    windowDefinitionSegments.push(parseWdsSegment(reader, header));\r\n                    break;\r\n                case SegmentType.pds:\r\n                    if (presentationCompositionSegment === undefined) {\r\n                        throw new Error(`Unexpected PDS`);\r\n                    }\r\n\r\n                    paletteDefinitionSegments.push(parsePdsSegment(reader, header));\r\n                    break;\r\n                case SegmentType.ods:\r\n                    if (presentationCompositionSegment === undefined) {\r\n                        throw new Error(`Unexpected ODS`);\r\n                    }\r\n\r\n                    const ods = parseOdsSegment(reader, header);\r\n                    objectDefinitionSegments.push(ods);\r\n                    break;\r\n                case SegmentType.end:\r\n                    if (presentationCompositionSegment === undefined) {\r\n                        throw new Error(`Unexpected end segment`);\r\n                    }\r\n\r\n                    const endDefinitionSegment = { header };\r\n                    lastDisplaySet = new DisplaySet(\r\n                        presentationCompositionSegment,\r\n                        windowDefinitionSegments,\r\n                        paletteDefinitionSegments,\r\n                        objectDefinitionSegments,\r\n                        endDefinitionSegment,\r\n                        lastDisplaySet\r\n                    );\r\n\r\n                    yield lastDisplaySet;\r\n\r\n                    presentationCompositionSegment = undefined;\r\n                    windowDefinitionSegments = [];\r\n                    paletteDefinitionSegments = [];\r\n                    objectDefinitionSegments = [];\r\n                    break;\r\n                default:\r\n                    throw new Error(`Unknown segment type: ${header.segmentType}`);\r\n            }\r\n\r\n            header = undefined;\r\n            bufferGenerator.requestedBytes = 13;\r\n        } else {\r\n            const magicNumber = reader.readHex(2);\r\n\r\n            if (magicNumber !== pgMagicNumber) {\r\n                throw new Error(`Invalid magic number: ${magicNumber}`);\r\n            }\r\n\r\n            const presentationTimestamp = reader.readHex(4);\r\n            const decodingTimestamp = reader.readHex(4);\r\n            const segmentType = segmentTypeFromByte(reader.readHex(1));\r\n            const segmentSize = reader.readHex(2);\r\n            header = { presentationTimestamp, decodingTimestamp, segmentType, segmentSize };\r\n            bufferGenerator.requestedBytes = segmentSize;\r\n        }\r\n    }\r\n}\r\n\r\nfunction parsePcsSegment(reader: BufferReader, header: SegmentHeader): PresentationCompositionSegment {\r\n    const limit = reader.index + header.segmentSize;\r\n    const width = reader.readHex(2, limit);\r\n    const height = reader.readHex(2, limit);\r\n    reader.readHex(1); // ignore frame rate\r\n    const compositionNumber = reader.readHex(2, limit);\r\n    const compositionState = compositionStateFromByte(reader.readHex(1, limit));\r\n    const paletteUpdateFlag = paletteUpdateFlagFromByte(reader.readHex(1, limit));\r\n    const paletteId = reader.readHex(1, limit);\r\n    const compositionObjectCount = reader.readHex(1, limit);\r\n    const objectId = reader.readHex(2, limit);\r\n    const windowId = reader.readHex(1, limit);\r\n    const objectCroppedFlag = objectCroppedFlagFromByte(reader.readHex(1, limit));\r\n    const objectHorizontalPosition = reader.readHex(2, limit);\r\n    const objectVerticalPosition = reader.readHex(2, limit);\r\n    const objectCroppingHorizontalPosition = reader.readHex(2, limit);\r\n    const objectCroppingVerticalPosition = reader.readHex(2, limit);\r\n    const objectCroppingWidth = reader.readHex(2, limit);\r\n    const objectCroppingHeightPosition = reader.readHex(2, limit);\r\n\r\n    return {\r\n        header,\r\n        width,\r\n        height,\r\n        compositionNumber,\r\n        compositionState,\r\n        paletteUpdateFlag,\r\n        paletteId,\r\n        compositionObjectCount,\r\n        objectId,\r\n        windowId,\r\n        objectCroppedFlag,\r\n        objectHorizontalPosition,\r\n        objectVerticalPosition,\r\n        objectCroppingHorizontalPosition,\r\n        objectCroppingVerticalPosition,\r\n        objectCroppingWidth,\r\n        objectCroppingHeightPosition,\r\n    };\r\n}\r\n\r\nfunction parseWdsSegment(reader: BufferReader, header: SegmentHeader): WindowDefinitionSegment {\r\n    const limit = reader.index + header.segmentSize;\r\n    const windowCount = reader.readHex(1, limit);\r\n    const windowDefinitions = [];\r\n\r\n    for (let i = 0; i < windowCount; ++i) {\r\n        const windowId = reader.readHex(1, limit);\r\n        const windowHorizontalPosition = reader.readHex(2, limit);\r\n        const windowVerticalPosition = reader.readHex(2, limit);\r\n        const windowWidth = reader.readHex(2, limit);\r\n        const windowHeight = reader.readHex(2, limit);\r\n\r\n        windowDefinitions.push({\r\n            windowId,\r\n            windowHorizontalPosition,\r\n            windowVerticalPosition,\r\n            windowWidth,\r\n            windowHeight,\r\n        });\r\n    }\r\n\r\n    return {\r\n        header,\r\n        windowCount,\r\n        windowDefinitions,\r\n    };\r\n}\r\n\r\nfunction parsePdsSegment(reader: BufferReader, header: SegmentHeader): PaletteDefinitionSegment {\r\n    const limit = reader.index + header.segmentSize;\r\n    const paletteId = reader.readHex(1, limit);\r\n    const paletteVersionNumber = reader.readHex(1, limit);\r\n    const paletteEntries: PaletteEntry[] = [];\r\n\r\n    while (reader.index < limit) {\r\n        const paletteEntryId = reader.readHex(1, limit);\r\n        const luminance = reader.readHex(1, limit);\r\n        const colorDifferenceRed = reader.readHex(1, limit);\r\n        const colorDifferenceBlue = reader.readHex(1, limit);\r\n        const transparency = reader.readHex(1, limit);\r\n        paletteEntries.push({ paletteEntryId, luminance, colorDifferenceRed, colorDifferenceBlue, transparency });\r\n    }\r\n\r\n    return {\r\n        header,\r\n        paletteId,\r\n        paletteVersionNumber,\r\n        paletteEntries,\r\n    };\r\n}\r\n\r\nfunction parseOdsSegment(reader: BufferReader, header: SegmentHeader): ObjectDefinitionSegment {\r\n    const objectId = reader.readHex(2);\r\n    const objectVersionNumber = reader.readHex(1);\r\n    const lastInSequenceFlag = lastInSequenceFlagFromByte(reader.readHex(1));\r\n    const objectDataLength = reader.readHex(3);\r\n    let width: number | undefined;\r\n    let height: number | undefined;\r\n    let objectData: BufferAdapter;\r\n\r\n    if (\r\n        lastInSequenceFlag === LastInSequenceFlag.firstInSequence ||\r\n        lastInSequenceFlag === LastInSequenceFlag.firstAndLastInSequence\r\n    ) {\r\n        width = reader.readHex(2);\r\n        height = reader.readHex(2);\r\n        objectData = reader.readBuffer(objectDataLength - 4);\r\n    } else {\r\n        objectData = reader.readBuffer(objectDataLength);\r\n    }\r\n\r\n    return {\r\n        header,\r\n        objectId,\r\n        objectVersionNumber,\r\n        lastInSequenceFlag,\r\n        objectDataLength,\r\n        width,\r\n        height,\r\n        objectData: objectData,\r\n    };\r\n}\r\n","import { compile as parseAss } from 'ass-compiler';\r\nimport { Cue, Node, parseSync as parseSrt, stringifySync as writeSrt } from 'subtitle';\r\nimport { WebVTT } from 'vtt.js';\r\nimport { XMLParser } from 'fast-xml-parser';\r\nimport { DisplaySet, parseDisplaySets as parsePgsDisplaySets } from './pgs-parser';\r\nimport { SubtitleTextImage } from '@project/common';\r\n\r\nconst tagRegex = RegExp('</?([^>]*)>', 'ig');\r\nconst assNewLineRegex = RegExp(/\\\\[nN]/, 'ig');\r\nconst helperElement = document.createElement('div');\r\nconst helperCanvas = document.createElement('canvas');\r\n\r\ninterface SubtitleNode {\r\n    start: number;\r\n    end: number;\r\n    text: string;\r\n    textImage?: SubtitleTextImage;\r\n    track: number;\r\n}\r\n\r\nexport default class SubtitleReader {\r\n    private xmlParser?: XMLParser;\r\n\r\n    async subtitles(files: File[]) {\r\n        return (await Promise.all(files.map((f, i) => this._subtitles(f, i))))\r\n            .flatMap((nodes) => nodes)\r\n            .sort((n1, n2) => n1.start - n2.start);\r\n    }\r\n\r\n    async _subtitles(file: File, track: number): Promise<SubtitleNode[]> {\r\n        if (file.name.endsWith('.srt')) {\r\n            const nodes = parseSrt(await file.text());\r\n            return nodes\r\n                .filter((node) => node.type === 'cue')\r\n                .map((node) => {\r\n                    const cue = node.data as Cue;\r\n                    return {\r\n                        start: cue.start,\r\n                        end: cue.end,\r\n                        text: cue.text.replace(tagRegex, ''),\r\n                        track: track,\r\n                    };\r\n                });\r\n        }\r\n\r\n        if (file.name.endsWith('.vtt') || file.name.endsWith('.nfvtt')) {\r\n            return new Promise(async (resolve, reject) => {\r\n                const isFromNetflix = file.name.endsWith('.nfvtt');\r\n                const parser = new WebVTT.Parser(window, WebVTT.StringDecoder());\r\n                const cues: any[] = [];\r\n                parser.oncue = (c: any) => {\r\n                    if (isFromNetflix) {\r\n                        c.text = c.text.replace(tagRegex, '');\r\n\r\n                        const lines = c.text.split('\\n');\r\n                        const newLines = [];\r\n\r\n                        for (const line of lines) {\r\n                            newLines.push(this._fixRTL(line));\r\n                        }\r\n\r\n                        c.text = newLines.join('\\n');\r\n                    }\r\n                    cues.push(c);\r\n                };\r\n                parser.onflush = () =>\r\n                    resolve(\r\n                        cues.map((c) => ({\r\n                            start: Math.floor(c.startTime * 1000),\r\n                            end: Math.floor(c.endTime * 1000),\r\n                            text: c.text as string,\r\n                            track: track,\r\n                        }))\r\n                    );\r\n                parser.parse(await file.text());\r\n                parser.flush();\r\n            });\r\n        }\r\n\r\n        if (file.name.endsWith('.ass')) {\r\n            const nodes = parseAss(await file.text(), {});\r\n            return nodes.dialogues.map((dialogue) => {\r\n                return {\r\n                    start: Math.round(dialogue.start * 1000),\r\n                    end: Math.round(dialogue.end * 1000),\r\n                    text: dialogue.slices\r\n                        .flatMap((slice) => slice.fragments.map((fragment) => fragment.text))\r\n                        .join('')\r\n                        .replace(assNewLineRegex, '\\n'),\r\n                    track: track,\r\n                };\r\n            });\r\n        }\r\n\r\n        if (file.name.endsWith('.ytxml')) {\r\n            const text = await file.text();\r\n            const xml = this._xmlParser().parse(text);\r\n\r\n            if (Object.keys(xml).length === 0) {\r\n                return [];\r\n            }\r\n\r\n            const textNodes = xml['transcript']['text'];\r\n            const subtitles = [];\r\n\r\n            for (let index = 0, length = textNodes.length; index < length; index++) {\r\n                const elm = textNodes[index];\r\n\r\n                if (!('#text' in elm) || !('@_dur' in elm) || !('@_start' in elm)) {\r\n                    continue;\r\n                }\r\n\r\n                const start = parseFloat(elm['@_start']);\r\n\r\n                subtitles.push({\r\n                    start: Math.floor(start * 1000),\r\n                    end: Math.floor((start + parseFloat(elm['@_dur'])) * 1000),\r\n                    text: this._decodeHTML(String(elm['#text']).replace(tagRegex, '')),\r\n                    track,\r\n                });\r\n            }\r\n\r\n            return subtitles;\r\n        }\r\n\r\n        if (file.name.endsWith('.sup')) {\r\n            let imageDataArray: Uint8ClampedArray | undefined;\r\n            const subtitles = [];\r\n            let currentImageDisplaySet: DisplaySet | undefined;\r\n\r\n            // FIXME: Figure out how to remove conflicts with @types/node ReadableStream\r\n            // @ts-ignore\r\n            for await (const displaySet of parsePgsDisplaySets(file.stream())) {\r\n                if (displaySet.objectDefinitionSegments.length > 0) {\r\n                    if (currentImageDisplaySet === undefined) {\r\n                        currentImageDisplaySet = displaySet;\r\n                    }\r\n                } else if (currentImageDisplaySet !== undefined) {\r\n                    const screenWidth = currentImageDisplaySet.presentationCompositionSegment.width;\r\n                    const screenHeight = currentImageDisplaySet.presentationCompositionSegment.height;\r\n                    imageDataArray =\r\n                        imageDataArray === undefined || imageDataArray.length < screenHeight * screenWidth * 4\r\n                            ? new Uint8ClampedArray(screenWidth * screenHeight * 4)\r\n                            : imageDataArray;\r\n                    const imageData = currentImageDisplaySet.imageData(imageDataArray);\r\n                    helperCanvas.width = imageData.width;\r\n                    helperCanvas.height = imageData.height;\r\n                    const context = helperCanvas.getContext('2d')!;\r\n                    context.putImageData(imageData, 0, 0);\r\n                    subtitles.push({\r\n                        start:\r\n                            currentImageDisplaySet.objectDefinitionSegments[0].header.presentationTimestamp / 90 ?? 0,\r\n                        end: displaySet.endDefinitionSegment.header.presentationTimestamp / 90,\r\n                        text: '',\r\n                        textImage: {\r\n                            dataUrl: helperCanvas.toDataURL('image/png'),\r\n                            image: {\r\n                                width: imageData.width,\r\n                                height: imageData.height,\r\n                            },\r\n                            screen: {\r\n                                width: currentImageDisplaySet.presentationCompositionSegment.width,\r\n                                height: currentImageDisplaySet.presentationCompositionSegment.height,\r\n                            },\r\n                        },\r\n                        track,\r\n                    });\r\n\r\n                    currentImageDisplaySet = undefined;\r\n                }\r\n            }\r\n\r\n            return subtitles;\r\n        }\r\n\r\n        throw new Error('Unsupported subtitle file format');\r\n    }\r\n\r\n    _fixRTL(line: string): string {\r\n        const index1 = line.indexOf('&lrm;');\r\n        const index2 = line.indexOf('&rlm;');\r\n        let newLine = '';\r\n\r\n        if (index1 > -1) {\r\n            newLine = line.substring(0, index1) + '\\u202a' + line.substring(index1 + 5) + '\\u202c';\r\n            return this._fixRTL(newLine);\r\n        } else if (index2 > -1) {\r\n            newLine = line.substring(0, index2) + '\\u202b' + line.substring(index2 + 5) + '\\u202c';\r\n            return this._fixRTL(newLine);\r\n        }\r\n\r\n        return line;\r\n    }\r\n\r\n    _decodeHTML(text: string): string {\r\n        helperElement.innerHTML = text;\r\n        return helperElement.childNodes.length === 0 ? '' : helperElement.childNodes[0].nodeValue!;\r\n    }\r\n\r\n    _xmlParser() {\r\n        if (this.xmlParser === undefined) {\r\n            this.xmlParser = new XMLParser({ ignoreAttributes: false });\r\n        }\r\n\r\n        return this.xmlParser;\r\n    }\r\n\r\n    subtitlesToSrt(subtitles: SubtitleNode[]) {\r\n        const nodes: Node[] = subtitles.map((subtitleNode) => {\r\n            return {\r\n                type: 'cue',\r\n                data: {\r\n                    start: subtitleNode.start,\r\n                    end: subtitleNode.end,\r\n                    text: subtitleNode.text,\r\n                },\r\n            };\r\n        });\r\n        return writeSrt(nodes, { format: 'SRT' });\r\n    }\r\n\r\n    async filesToSrt(files: File[]) {\r\n        return this.subtitlesToSrt(await this.subtitles(files));\r\n    }\r\n}\r\n","import { makeStyles, Theme } from '@material-ui/core/styles';\r\nimport clsx from 'clsx';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport BugReportIcon from '@material-ui/icons/BugReport';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport HelpIcon from '@material-ui/icons/Help';\r\nimport FolderIcon from '@material-ui/icons/Folder';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ListIcon from '@material-ui/icons/List';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Tooltip, { TooltipProps } from '@material-ui/core/Tooltip';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport Popover from '@material-ui/core/Popover';\r\nimport { useCallback, useState } from 'react';\r\n\r\ninterface BarProps {\r\n    drawerWidth: number;\r\n    drawerOpen: boolean;\r\n    hidden: boolean;\r\n    title: string;\r\n    subtitleFiles?: File[];\r\n    onFileSelector: () => void;\r\n    onDownloadSubtitleFilesAsSrt: () => void;\r\n    onOpenSettings: () => void;\r\n    onOpenCopyHistory: () => void;\r\n}\r\n\r\ninterface StyleProps {\r\n    drawerWidth: number;\r\n}\r\n\r\nconst useStyles = makeStyles<Theme, StyleProps, string>((theme) => ({\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    leftButton: {\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    appBar: {\r\n        transition: theme.transitions.create(['margin', 'width'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    appBarShift: {\r\n        width: ({ drawerWidth }) => `calc(100% - ${drawerWidth}px)`,\r\n        transition: theme.transitions.create(['margin', 'width'], {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n        marginRight: ({ drawerWidth }) => drawerWidth,\r\n    },\r\n    copyHistoryButton: {\r\n        transform: 'scaleX(1)',\r\n        width: 48,\r\n        padding: 12,\r\n        transition: theme.transitions.create(['transform', 'padding', 'width'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    copyHistoryButtonShift: {\r\n        transform: 'scaleX(0)',\r\n        width: 0,\r\n        padding: 5,\r\n        transition: theme.transitions.create(['transform', 'padding', 'width'], {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    hide: {\r\n        display: 'none',\r\n    },\r\n}));\r\n\r\ninterface CopyHistoryTooltipStylesProps {\r\n    show: boolean;\r\n}\r\n\r\ninterface CopyHistoryTooltipProps extends TooltipProps {\r\n    show: boolean;\r\n}\r\n\r\nconst useCopyHistoryTooltipStyles = makeStyles<Theme, CopyHistoryTooltipStylesProps, string>((theme) => ({\r\n    tooltip: ({ show }) => ({\r\n        display: show ? 'block' : 'none',\r\n    }),\r\n}));\r\n\r\nfunction CopyHistoryTooltip({ show, ...toolTipProps }: CopyHistoryTooltipProps) {\r\n    const classes = useCopyHistoryTooltipStyles({ show: show });\r\n    return <Tooltip classes={classes} {...toolTipProps} />;\r\n}\r\n\r\nexport default function Bar({\r\n    drawerWidth,\r\n    drawerOpen,\r\n    hidden,\r\n    title,\r\n    subtitleFiles,\r\n    onOpenSettings,\r\n    onOpenCopyHistory,\r\n    onFileSelector,\r\n    onDownloadSubtitleFilesAsSrt,\r\n}: BarProps) {\r\n    const classes = useStyles({ drawerWidth });\r\n    const [menuOpen, setMenuOpen] = useState<boolean>(false);\r\n    const [menuAnchorEl, setMenuAnchorEl] = useState<HTMLElement>();\r\n    const canSaveAsSrt =\r\n        subtitleFiles !== undefined && subtitleFiles.find((f) => !f.name.endsWith('.sup')) !== undefined;\r\n\r\n    const handleFileAction = useCallback(\r\n        (event: React.MouseEvent<HTMLButtonElement>) => {\r\n            if (canSaveAsSrt) {\r\n                setMenuAnchorEl(event.currentTarget);\r\n                setMenuOpen(true);\r\n            } else {\r\n                onFileSelector();\r\n            }\r\n        },\r\n        [onFileSelector, canSaveAsSrt]\r\n    );\r\n\r\n    const handleMenuClose = useCallback(() => {\r\n        setMenuOpen(false);\r\n    }, []);\r\n\r\n    const handleOpenFilesFromMenu = useCallback(() => {\r\n        setMenuOpen(false);\r\n        onFileSelector();\r\n    }, [onFileSelector]);\r\n\r\n    const handleDownloadSubtitleFilesAsSrt = useCallback(() => {\r\n        setMenuOpen(false);\r\n        onDownloadSubtitleFilesAsSrt();\r\n    }, [onDownloadSubtitleFilesAsSrt]);\r\n\r\n    return (\r\n        <>\r\n            {canSaveAsSrt && (\r\n                <Popover\r\n                    open={menuOpen}\r\n                    anchorEl={menuAnchorEl}\r\n                    onClose={handleMenuClose}\r\n                    anchorOrigin={{\r\n                        vertical: 'bottom',\r\n                        horizontal: 'center',\r\n                    }}\r\n                >\r\n                    <List>\r\n                        <ListItem button onClick={handleOpenFilesFromMenu}>\r\n                            Open Files\r\n                        </ListItem>\r\n                        <ListItem button onClick={handleDownloadSubtitleFilesAsSrt}>\r\n                            Download Subtitles as SRT\r\n                        </ListItem>\r\n                    </List>\r\n                </Popover>\r\n            )}\r\n            <AppBar\r\n                position=\"static\"\r\n                elevation={0}\r\n                className={clsx(classes.appBar, {\r\n                    [classes.appBarShift]: drawerOpen,\r\n                    [classes.hide]: hidden,\r\n                })}\r\n            >\r\n                <Toolbar>\r\n                    <Tooltip\r\n                        disableFocusListener={canSaveAsSrt}\r\n                        disableHoverListener={canSaveAsSrt}\r\n                        disableTouchListener={canSaveAsSrt}\r\n                        title=\"Open Files\"\r\n                    >\r\n                        <IconButton\r\n                            edge=\"start\"\r\n                            color=\"inherit\"\r\n                            className={classes.leftButton}\r\n                            onClick={handleFileAction}\r\n                        >\r\n                            <FolderIcon />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        {title}\r\n                    </Typography>\r\n                    <Tooltip title=\"Donate\">\r\n                        <IconButton\r\n                            edge=\"end\"\r\n                            color=\"inherit\"\r\n                            component=\"a\"\r\n                            href=\"https://github.com/killergerbah/asbplayer#supporters\"\r\n                            target=\"_blank\"\r\n                            rel=\"noreferrer\"\r\n                        >\r\n                            <FavoriteIcon />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <Tooltip title=\"Submit Issue\">\r\n                        <IconButton\r\n                            edge=\"end\"\r\n                            color=\"inherit\"\r\n                            component=\"a\"\r\n                            href=\"https://github.com/killergerbah/asbplayer/issues\"\r\n                            target=\"_blank\"\r\n                            rel=\"noreferrer\"\r\n                        >\r\n                            <BugReportIcon />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <Tooltip title=\"Help\">\r\n                        <IconButton\r\n                            edge=\"end\"\r\n                            color=\"inherit\"\r\n                            component=\"a\"\r\n                            href=\"https://github.com/killergerbah/asbplayer#usage\"\r\n                            target=\"_blank\"\r\n                            rel=\"noreferrer\"\r\n                        >\r\n                            <HelpIcon />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <Tooltip title=\"Settings\">\r\n                        <IconButton edge=\"end\" color=\"inherit\" onClick={onOpenSettings}>\r\n                            <SettingsIcon />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n                    <CopyHistoryTooltip title=\"Mining History\" show={!drawerOpen}>\r\n                        <IconButton\r\n                            edge=\"end\"\r\n                            color=\"inherit\"\r\n                            aria-label=\"menu\"\r\n                            className={clsx(classes.copyHistoryButton, {\r\n                                [classes.copyHistoryButtonShift]: drawerOpen,\r\n                            })}\r\n                            onClick={onOpenCopyHistory}\r\n                        >\r\n                            <ListIcon />\r\n                        </IconButton>\r\n                    </CopyHistoryTooltip>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </>\r\n    );\r\n}\r\n","import { AsbPlayerToVideoCommandV2, Message, VideoTabModel } from '@project/common';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nexport interface ExtensionMessage {\r\n    data: Message;\r\n    tabId: number;\r\n    src: string;\r\n}\r\n\r\nexport default class ChromeExtension {\r\n    tabs: VideoTabModel[];\r\n\r\n    private readonly onMessageCallbacks: Array<(message: ExtensionMessage) => void>;\r\n    private readonly onTabsCallbacks: Array<(tabs: VideoTabModel[]) => void>;\r\n    private readonly versionPromise: Promise<string>;\r\n    private readonly id: string;\r\n\r\n    private versionResolve?: (value: string | PromiseLike<string>) => void;\r\n    private heartbeatStarted = false;\r\n\r\n    constructor() {\r\n        this.onMessageCallbacks = [];\r\n        this.onTabsCallbacks = [];\r\n        this.tabs = [];\r\n        this.versionPromise = new Promise((resolve, reject) => {\r\n            this.versionResolve = resolve;\r\n        });\r\n        this.id = uuidv4();\r\n\r\n        window.addEventListener('message', (event) => {\r\n            if (event.source !== window) {\r\n                return;\r\n            }\r\n\r\n            if (event.data.sender === 'asbplayer-extension-to-player') {\r\n                if (event.data.message) {\r\n                    if (event.data.message.command === 'tabs') {\r\n                        this.tabs = event.data.message.tabs;\r\n\r\n                        for (let c of this.onTabsCallbacks) {\r\n                            c(this.tabs);\r\n                        }\r\n\r\n                        return;\r\n                    }\r\n\r\n                    if (event.data.message.command === 'version') {\r\n                        this.versionResolve!(event.data.message.version);\r\n                        return;\r\n                    }\r\n\r\n                    for (let c of this.onMessageCallbacks) {\r\n                        c({\r\n                            data: event.data.message,\r\n                            tabId: event.data.tabId,\r\n                            src: event.data.src,\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    startHeartbeat() {\r\n        if (!this.heartbeatStarted) {\r\n            this._sendHeartbeat();\r\n            setInterval(() => this._sendHeartbeat(), 1000);\r\n            this.heartbeatStarted = true;\r\n        }\r\n    }\r\n\r\n    _sendHeartbeat() {\r\n        window.postMessage(\r\n            {\r\n                sender: 'asbplayerv2',\r\n                message: {\r\n                    command: 'heartbeat',\r\n                    id: this.id,\r\n                    receivedTabs: this.tabs,\r\n                },\r\n            },\r\n            '*'\r\n        );\r\n    }\r\n\r\n    async installedVersion(): Promise<string> {\r\n        return await this.versionPromise;\r\n    }\r\n\r\n    sendMessage(message: Message, tabId: number, src: string) {\r\n        const command: AsbPlayerToVideoCommandV2<Message> = {\r\n            sender: 'asbplayerv2',\r\n            message: message,\r\n            tabId: tabId,\r\n            src: src,\r\n        };\r\n        window.postMessage(command, '*');\r\n    }\r\n\r\n    publishMessage(message: Message) {\r\n        for (const tab of this.tabs) {\r\n            const command: AsbPlayerToVideoCommandV2<Message> = {\r\n                sender: 'asbplayerv2',\r\n                message: message,\r\n                tabId: tab.id,\r\n                src: tab.src,\r\n            };\r\n            window.postMessage(command, '*');\r\n        }\r\n    }\r\n\r\n    subscribeTabs(callback: (tabs: VideoTabModel[]) => void) {\r\n        this.onTabsCallbacks.push(callback);\r\n    }\r\n\r\n    unsubscribeTabs(callback: (tabs: VideoTabModel[]) => void) {\r\n        this._remove(callback, this.onTabsCallbacks);\r\n    }\r\n\r\n    subscribe(callback: (message: ExtensionMessage) => void) {\r\n        this.onMessageCallbacks.push(callback);\r\n    }\r\n\r\n    unsubscribe(callback: (message: ExtensionMessage) => void) {\r\n        this._remove(callback, this.onMessageCallbacks);\r\n    }\r\n\r\n    _remove(callback: Function, callbacks: Function[]) {\r\n        for (let i = callbacks.length - 1; i >= 0; --i) {\r\n            if (callback === callbacks[i]) {\r\n                callbacks.splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { Rgb } from '@project/common';\r\n\r\nexport function arrayEquals(a: any[], b: any[], equals = (a: any, b: any) => a === b) {\r\n    if (a.length !== b.length) {\r\n        return false;\r\n    }\r\n\r\n    for (let i = 0; i < a.length; ++i) {\r\n        if (!equals(a[i], b[i])) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport function keysAreEqual(a: any, b: any) {\r\n    for (let key in a) {\r\n        if (!(key in b)) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    for (let key in b) {\r\n        if (!(key in a)) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n// https://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb\r\nfunction hexToRgb(hex: string): Rgb {\r\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)!;\r\n    return {\r\n        r: parseInt(result[1], 16),\r\n        g: parseInt(result[2], 16),\r\n        b: parseInt(result[3], 16),\r\n    };\r\n}\r\n\r\ninterface SubtitleStyle {\r\n    subtitleColor: string;\r\n    subtitleSize: number;\r\n    subtitleOutlineThickness: number;\r\n    subtitleOutlineColor: string;\r\n    subtitleBackgroundOpacity: number;\r\n    subtitleBackgroundColor: string;\r\n    subtitleFontFamily: string;\r\n}\r\n\r\nexport function computeStyles({\r\n    subtitleColor,\r\n    subtitleSize,\r\n    subtitleOutlineThickness,\r\n    subtitleOutlineColor,\r\n    subtitleBackgroundOpacity,\r\n    subtitleBackgroundColor,\r\n    subtitleFontFamily,\r\n}: SubtitleStyle) {\r\n    const styles: any = {\r\n        color: subtitleColor,\r\n        fontSize: Number(subtitleSize),\r\n    };\r\n\r\n    if (subtitleOutlineThickness > 0) {\r\n        const thickness = subtitleOutlineThickness;\r\n        const color = subtitleOutlineColor;\r\n        styles[\r\n            'textShadow'\r\n        ] = `0 0 ${thickness}px ${color}, 0 0 ${thickness}px ${color}, 0 0 ${thickness}px ${color}, 0 0 ${thickness}px ${color}`;\r\n    }\r\n\r\n    if (subtitleBackgroundOpacity > 0) {\r\n        const opacity = subtitleBackgroundOpacity;\r\n        const color = subtitleBackgroundColor;\r\n        const { r, g, b } = hexToRgb(color);\r\n        styles['backgroundColor'] = `rgba(${r}, ${g}, ${b}, ${opacity})`;\r\n    }\r\n\r\n    if (subtitleFontFamily && subtitleFontFamily.length > 0) {\r\n        styles['fontFamily'] = subtitleFontFamily;\r\n    }\r\n\r\n    return styles;\r\n}\r\n\r\nexport function timeDurationDisplay(\r\n    milliseconds: number,\r\n    totalMilliseconds: number,\r\n    includeMilliseconds = true\r\n): string {\r\n    if (milliseconds < 0) {\r\n        return timeDurationDisplay(0, totalMilliseconds);\r\n    }\r\n\r\n    milliseconds = Math.round(milliseconds);\r\n    const ms = milliseconds % 1000;\r\n    milliseconds = (milliseconds - ms) / 1000;\r\n    const secs = milliseconds % 60;\r\n    milliseconds = (milliseconds - secs) / 60;\r\n    const mins = milliseconds % 60;\r\n\r\n    if (totalMilliseconds >= 3600000) {\r\n        const hrs = (milliseconds - mins) / 60;\r\n\r\n        if (includeMilliseconds) {\r\n            return pad(hrs) + ':' + pad(mins) + ':' + pad(secs) + '.' + pad(ms, 3);\r\n        }\r\n\r\n        return pad(hrs) + ':' + pad(mins) + ':' + pad(secs);\r\n    }\r\n\r\n    if (includeMilliseconds) {\r\n        return pad(mins) + ':' + pad(secs) + '.' + pad(ms, 3);\r\n    }\r\n\r\n    return pad(mins) + ':' + pad(secs);\r\n}\r\n\r\nfunction pad(n: number, zeros: number = 2) {\r\n    return String(n).padStart(zeros, '0');\r\n}\r\n","import React, { useCallback, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { timeDurationDisplay } from '../services/Util';\r\nimport { ListItemSecondaryAction, Theme } from '@material-ui/core';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Popover from '@material-ui/core/Popover';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport StarIcon from '@material-ui/icons/Star';\r\nimport SaveAltIcon from '@material-ui/icons/SaveAlt';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { AudioModel, ImageModel, SubtitleModel } from '@project/common';\r\n\r\nexport interface CopyHistoryItem extends SubtitleModel {\r\n    name: string;\r\n    id: string;\r\n    timestamp: number;\r\n    surroundingSubtitles: SubtitleModel[];\r\n    audioFile?: File;\r\n    audioTrack?: string;\r\n    videoFile?: File;\r\n    subtitleFile?: File;\r\n    mediaTimestamp?: number;\r\n    audio?: AudioModel;\r\n    image?: ImageModel;\r\n    url?: string;\r\n}\r\n\r\ninterface CopyHistoryProps {\r\n    open: boolean;\r\n    drawerWidth: number;\r\n    items: CopyHistoryItem[];\r\n    onClose: () => void;\r\n    onDelete: (item: CopyHistoryItem) => void;\r\n    onAnki: (item: CopyHistoryItem) => void;\r\n    onSelect: (item: CopyHistoryItem) => void;\r\n    onClipAudio: (item: CopyHistoryItem) => void;\r\n    onDownloadImage: (item: CopyHistoryItem) => void;\r\n    onDownloadSectionAsSrt: (name: string, items: CopyHistoryItem[]) => void;\r\n}\r\n\r\nconst useStyles = makeStyles<Theme, CopyHistoryProps, string>((theme) => ({\r\n    drawer: {\r\n        width: ({ drawerWidth }) => drawerWidth,\r\n        flexShrink: 0,\r\n    },\r\n    drawerPaper: {\r\n        width: ({ drawerWidth }) => drawerWidth,\r\n    },\r\n    drawerHeader: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        position: 'static',\r\n        padding: theme.spacing(0, 1),\r\n        // necessary for content to be below app bar\r\n        ...theme.mixins.toolbar,\r\n        justifyContent: 'flex-start',\r\n    },\r\n    listContainer: {\r\n        position: 'relative',\r\n        height: '100%',\r\n        overflowY: 'auto',\r\n        overflowX: 'hidden',\r\n    },\r\n    listItem: {\r\n        '&:hover': {\r\n            backgroundColor: theme.palette.action.hover,\r\n        },\r\n    },\r\n    listItemGutters: {\r\n        paddingLeft: 5,\r\n        paddingRight: 5,\r\n    },\r\n    listItemIconRoot: {\r\n        minWidth: 20,\r\n    },\r\n    emptyState: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        flexDirection: 'column',\r\n        textAlign: 'center',\r\n        height: '100%',\r\n        padding: 15,\r\n    },\r\n    text: {\r\n        flexGrow: 1,\r\n    },\r\n    emptyText: {\r\n        flexGrow: 1,\r\n        color: theme.palette.text.secondary,\r\n    },\r\n    timestamp: {\r\n        paddingRight: 15,\r\n        paddingLeft: 15,\r\n        color: theme.palette.text.secondary,\r\n    },\r\n}));\r\n\r\ninterface MenuProps {\r\n    open: boolean;\r\n    item?: CopyHistoryItem;\r\n    anchorEl?: Element;\r\n    onClose: () => void;\r\n    onSelect: (item: CopyHistoryItem) => void;\r\n    onClipAudio: (item: CopyHistoryItem) => void;\r\n    onDownloadImage: (item: CopyHistoryItem) => void;\r\n    onDelete: (item: CopyHistoryItem) => void;\r\n}\r\n\r\nfunction Menu({ open, anchorEl, onClose, onSelect, onClipAudio, onDownloadImage, onDelete, item }: MenuProps) {\r\n    const handleCopy = useCallback(() => {\r\n        navigator.clipboard.writeText(item!.text);\r\n        onClose();\r\n    }, [item, onClose]);\r\n\r\n    const handleJumpTo = useCallback(() => {\r\n        onSelect(item!);\r\n        onClose();\r\n    }, [item, onSelect, onClose]);\r\n\r\n    const handleClipAudio = useCallback(() => {\r\n        onClipAudio(item!);\r\n        onClose();\r\n    }, [item, onClipAudio, onClose]);\r\n\r\n    const handleDownloadImage = useCallback(() => {\r\n        onDownloadImage(item!);\r\n        onClose();\r\n    }, [item, onDownloadImage, onClose]);\r\n\r\n    const handleDelete = useCallback(() => {\r\n        onDelete(item!);\r\n        onClose();\r\n    }, [item, onDelete, onClose]);\r\n\r\n    if (!item) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <Popover\r\n            disableEnforceFocus={true}\r\n            open={open}\r\n            anchorEl={anchorEl}\r\n            onClose={onClose}\r\n            anchorOrigin={{\r\n                vertical: 'center',\r\n                horizontal: 'center',\r\n            }}\r\n            transformOrigin={{\r\n                vertical: 'top',\r\n                horizontal: 'right',\r\n            }}\r\n        >\r\n            <List>\r\n                <ListItem button onClick={handleCopy}>\r\n                    <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Copy\" />\r\n                </ListItem>\r\n                <ListItem button onClick={handleJumpTo}>\r\n                    <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Jump To\" />\r\n                </ListItem>\r\n                {(item.videoFile || item.audioFile || item.audio) && (\r\n                    <ListItem button onClick={handleClipAudio}>\r\n                        <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Download Audio\" />\r\n                    </ListItem>\r\n                )}\r\n                {(item.videoFile || item.image) && (\r\n                    <ListItem button onClick={handleDownloadImage}>\r\n                        <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Download Image\" />\r\n                    </ListItem>\r\n                )}\r\n                <ListItem button onClick={handleDelete}>\r\n                    <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Delete\" />\r\n                </ListItem>\r\n            </List>\r\n        </Popover>\r\n    );\r\n}\r\n\r\nexport default function CopyHistory(props: CopyHistoryProps) {\r\n    const onDelete = props.onDelete;\r\n    const classes = useStyles(props);\r\n    const scrollToBottomRefCallback = useCallback((element: HTMLElement | null) => {\r\n        if (element) {\r\n            element.scrollIntoView();\r\n        }\r\n    }, []);\r\n    const [menuItem, setMenuItem] = useState<CopyHistoryItem>();\r\n    const [menuOpen, setMenuOpen] = useState<boolean>(false);\r\n    const [menuAnchorEl, setMenuAnchorEl] = useState<Element>();\r\n\r\n    const handleMenu = useCallback((e: React.MouseEvent, item: CopyHistoryItem) => {\r\n        setMenuItem(item);\r\n        setMenuOpen(true);\r\n        setMenuAnchorEl(e.currentTarget);\r\n    }, []);\r\n\r\n    const handleMenuClosed = useCallback(() => {\r\n        setMenuItem(undefined);\r\n        setMenuOpen(false);\r\n        setMenuAnchorEl(undefined);\r\n    }, []);\r\n\r\n    const handleDelete = useCallback(\r\n        (item: CopyHistoryItem) => {\r\n            onDelete(item);\r\n        },\r\n        [onDelete]\r\n    );\r\n\r\n    let content;\r\n\r\n    if (props.items.length > 0) {\r\n        const items = [];\r\n        let lastSeenItemName = null;\r\n        let i = 0;\r\n        const itemNameCounters: { [name: string]: number } = {};\r\n        let itemsBySection: { [key: string]: CopyHistoryItem[] } = {};\r\n        let currentKey: string | undefined;\r\n\r\n        for (const item of props.items) {\r\n            if (lastSeenItemName === null || lastSeenItemName !== item.name) {\r\n\r\n                if (item.name in itemNameCounters) {\r\n                    itemNameCounters[item.name]++;\r\n                } else {\r\n                    itemNameCounters[item.name] = 0;\r\n                }\r\n\r\n                const key = item.name + '-' + itemNameCounters[item.name];\r\n                itemsBySection[key] = [];\r\n                lastSeenItemName = item.name;\r\n                currentKey = key;\r\n\r\n                items.push(\r\n                    <ListItem key={key}>\r\n                        <Typography color=\"textSecondary\">{item.name}</Typography>\r\n                        <ListItemSecondaryAction>\r\n                            <Tooltip title=\"Download as SRT\">\r\n                                <IconButton\r\n                                    onClick={() => props.onDownloadSectionAsSrt(item.name, itemsBySection[key])}\r\n                                    edge=\"end\"\r\n                                >\r\n                                    <SaveAltIcon />\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        </ListItemSecondaryAction>\r\n                    </ListItem>\r\n                );\r\n            }\r\n\r\n            itemsBySection[currentKey!].push(item);\r\n            const ref = i === props.items.length - 1 ? scrollToBottomRefCallback : null;\r\n\r\n            items.push(\r\n                <ListItem\r\n                    ref={ref}\r\n                    key={item.id}\r\n                    className={classes.listItem}\r\n                    classes={{ gutters: classes.listItemGutters }}\r\n                >\r\n                    <ListItemIcon classes={{ root: classes.listItemIconRoot }}>\r\n                        <Tooltip title=\"Export to Anki\">\r\n                            <IconButton onClick={() => props.onAnki(item)}>\r\n                                <StarIcon fontSize=\"small\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </ListItemIcon>\r\n                    <ListItemIcon classes={{ root: classes.listItemIconRoot }}>\r\n                        <IconButton onClick={(e) => handleMenu(e, item)}>\r\n                            <MoreVertIcon fontSize=\"small\" />\r\n                        </IconButton>\r\n                    </ListItemIcon>\r\n                    <ListItemText\r\n                        primary={\r\n                            <Grid wrap=\"nowrap\" container>\r\n                                <Grid item className={item.text === '' ? classes.emptyText : classes.text}>\r\n                                    {item.text === '' ? 'No text' : item.text}\r\n                                </Grid>\r\n                                <Grid item className={classes.timestamp}>\r\n                                    {timeDurationDisplay(item.start, item.start, false)}\r\n                                </Grid>\r\n                            </Grid>\r\n                        }\r\n                    />\r\n                </ListItem>\r\n            );\r\n\r\n            ++i;\r\n        }\r\n\r\n        content = (\r\n            <div className={classes.listContainer}>\r\n                <List>{items}</List>\r\n            </div>\r\n        );\r\n    } else {\r\n        content = (\r\n            <div className={classes.emptyState}>\r\n                <Typography variant=\"h6\">Mining history is empty.</Typography>\r\n                <Typography variant=\"caption\">See the help for keyboard shortcuts.</Typography>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Drawer\r\n                variant=\"persistent\"\r\n                anchor=\"right\"\r\n                open={props.open}\r\n                className={classes.drawer}\r\n                classes={{\r\n                    paper: classes.drawerPaper,\r\n                }}\r\n            >\r\n                <div className={classes.drawerHeader}>\r\n                    <IconButton onClick={props.onClose}>\r\n                        <ChevronRightIcon />\r\n                    </IconButton>\r\n                </div>\r\n                <Divider />\r\n                {content}\r\n            </Drawer>\r\n            <Menu\r\n                open={props.open && menuOpen}\r\n                anchorEl={menuAnchorEl}\r\n                item={menuItem}\r\n                onClose={handleMenuClosed}\r\n                onSelect={props.onSelect}\r\n                onClipAudio={props.onClipAudio}\r\n                onDownloadImage={props.onDownloadImage}\r\n                onDelete={handleDelete}\r\n            />\r\n        </React.Fragment>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport gt from 'semver/functions/gt';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport Link from '@material-ui/core/Link';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ChromeExtension from '../services/ChromeExtension';\r\nimport { Theme } from '@material-ui/core/styles';\r\n\r\ninterface StylesProps {\r\n    appBarHidden: boolean;\r\n}\r\n\r\nconst useStyles = makeStyles<Theme, StylesProps>((theme) => ({\r\n    background: ({ appBarHidden }) => ({\r\n        position: 'absolute',\r\n        height: appBarHidden ? '100vh' : 'calc(100vh - 64px)',\r\n        width: '100%',\r\n        zIndex: 100,\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        padding: 15,\r\n        textAlign: 'center',\r\n    }),\r\n    browseLink: {\r\n        cursor: 'pointer',\r\n    },\r\n}));\r\n\r\ninterface Props {\r\n    extension: ChromeExtension;\r\n    latestExtensionVersion: string;\r\n    extensionUrl: string;\r\n    loading: boolean;\r\n    dragging: boolean;\r\n    appBarHidden: boolean;\r\n    onFileSelector: React.MouseEventHandler<HTMLAnchorElement> &\r\n        React.MouseEventHandler<HTMLSpanElement> &\r\n        React.MouseEventHandler<HTMLLabelElement>;\r\n}\r\n\r\nexport default function LandingPage({\r\n    extension,\r\n    latestExtensionVersion,\r\n    extensionUrl,\r\n    loading,\r\n    dragging,\r\n    appBarHidden,\r\n    onFileSelector,\r\n}: Props) {\r\n    const classes = useStyles({ appBarHidden });\r\n    const [installedExtensionVersion, setInstalledExtensionVersion] = useState<string>();\r\n\r\n    useEffect(() => {\r\n        async function fetchInstalledExtensionVersion() {\r\n            setInstalledExtensionVersion(await extension.installedVersion());\r\n        }\r\n\r\n        fetchInstalledExtensionVersion();\r\n    }, [extension]);\r\n\r\n    const extensionUpdateAvailable = installedExtensionVersion && gt(latestExtensionVersion, installedExtensionVersion);\r\n    const extensionNotInstalled = !installedExtensionVersion;\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Fade in={!loading && !dragging} timeout={500}>\r\n                <div className={classes.background}>\r\n                    <Typography variant=\"h6\">\r\n                        Drag and drop subtitle and media files, or{' '}\r\n                        <Link\r\n                            target=\"#\"\r\n                            className={classes.browseLink}\r\n                            onClick={onFileSelector}\r\n                            color=\"secondary\"\r\n                            component=\"label\"\r\n                        >\r\n                            browse\r\n                        </Link>\r\n                        .\r\n                        <br />\r\n                        {extensionNotInstalled && (\r\n                            <span>\r\n                                Install the{' '}\r\n                                <Link color=\"secondary\" target=\"_blank\" rel=\"noreferrer\" href={extensionUrl}>\r\n                                    Chrome extension\r\n                                </Link>{' '}\r\n                                to sync subtitles with streaming video.\r\n                            </span>\r\n                        )}\r\n                        {extensionUpdateAvailable && (\r\n                            <span>\r\n                                An extension{' '}\r\n                                <Link color=\"secondary\" target=\"_blank\" rel=\"noreferrer\" href={extensionUrl}>\r\n                                    update\r\n                                </Link>{' '}\r\n                                is available.\r\n                            </span>\r\n                        )}\r\n                    </Typography>\r\n                </div>\r\n            </Fade>\r\n        </React.Fragment>\r\n    );\r\n}\r\n","import { Message } from \"@project/common\";\r\nimport { VideoProtocol, VideoProtocolMessage } from \"./VideoProtocol\";\r\n\r\nexport default class BroadcastChannelVideoProtocol implements VideoProtocol {\r\n    private channel?: BroadcastChannel;\r\n\r\n    onMessage?: (message: VideoProtocolMessage) => void;\r\n    \r\n    constructor(channelId: string) {\r\n        this.channel = new BroadcastChannel(channelId);\r\n        const that = this;\r\n        this.channel.onmessage = (event) => {\r\n            that.onMessage?.(event as VideoProtocolMessage);\r\n        };\r\n    }\r\n\r\n    postMessage(message: Message) {\r\n        this.channel?.postMessage(message);\r\n    }\r\n\r\n    close() {\r\n        this.channel?.close();\r\n        this.channel = undefined;\r\n    }\r\n}\r\n","import { Message } from '@project/common';\r\nimport ChromeExtension, { ExtensionMessage } from './ChromeExtension';\r\nimport { VideoProtocol, VideoProtocolMessage } from './VideoProtocol';\r\n\r\nexport default class ChromeTabVideoProtocol implements VideoProtocol {\r\n    private readonly tabId: number;\r\n    private readonly src: string;\r\n    private readonly extension: ChromeExtension;\r\n    private readonly listener: (message: ExtensionMessage) => void;\r\n\r\n    onMessage?: (message: VideoProtocolMessage) => void;\r\n\r\n    constructor(tabId: number, src: string, extension: ChromeExtension) {\r\n        this.tabId = tabId;\r\n        this.src = src;\r\n        this.listener = (message) => {\r\n            if (message.tabId === tabId && (!message.src || message.src === src)) {\r\n                this.onMessage?.({\r\n                    data: message.data,\r\n                });\r\n            }\r\n        };\r\n\r\n        extension.subscribe(this.listener);\r\n        this.extension = extension;\r\n    }\r\n\r\n    postMessage(message: Message) {\r\n        this.extension.sendMessage(message, this.tabId, this.src);\r\n    }\r\n\r\n    close() {\r\n        this.extension.unsubscribe(this.listener);\r\n    }\r\n}\r\n","export default class Clock {\r\n    private accumulated: number;\r\n    private started: boolean;\r\n    private startTime?: number;\r\n\r\n    constructor() {\r\n        this.accumulated = 0;\r\n        this.started = false;\r\n    }\r\n\r\n    time(max: number) {\r\n        if (this.started) {\r\n            return Math.min(max, this.accumulated + Date.now() - this.startTime!);\r\n        }\r\n\r\n        return Math.min(max, this.accumulated);\r\n    }\r\n\r\n    stop() {\r\n        if (!this.started) {\r\n            return;\r\n        }\r\n\r\n        this.started = false;\r\n        this.accumulated += Date.now() - this.startTime!;\r\n    }\r\n\r\n    start() {\r\n        this.startTime = Date.now();\r\n        this.started = true;\r\n    }\r\n\r\n    setTime(time: number) {\r\n        if (this.started) {\r\n            this.startTime = Date.now();\r\n            this.accumulated = time;\r\n        } else {\r\n            this.accumulated = time;\r\n        }\r\n    }\r\n\r\n    progress(max: number) {\r\n        return max === 0 ? 0 : Math.min(1, this.time(max) / max);\r\n    }\r\n}\r\n","import React, { useCallback, useEffect, useState, useRef, MutableRefObject } from 'react';\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\r\nimport AudiotrackIcon from '@material-ui/icons/Audiotrack';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Input from '@material-ui/core/Input';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport OpenInNewIcon from '@material-ui/icons/OpenInNew';\r\nimport Popover from '@material-ui/core/Popover';\r\nimport FullscreenIcon from '@material-ui/icons/Fullscreen';\r\nimport AspectRatioIcon from '@material-ui/icons/AspectRatio';\r\nimport FullscreenExitIcon from '@material-ui/icons/FullscreenExit';\r\nimport PauseIcon from '@material-ui/icons/Pause';\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\r\nimport QueueMusicIcon from '@material-ui/icons/QueueMusic';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport TuneIcon from '@material-ui/icons/Tune';\r\nimport SubtitlesIcon from '@material-ui/icons/Subtitles';\r\nimport VideocamIcon from '@material-ui/icons/Videocam';\r\nimport VolumeOffIcon from '@material-ui/icons/VolumeOff';\r\nimport VolumeUpIcon from '@material-ui/icons/VolumeUp';\r\nimport { AsbplayerSettingsProvider, AudioTrackModel, PlayMode, VideoTabModel } from '@project/common';\r\nimport Clock from '../services/Clock';\r\n\r\nconst useControlStyles = makeStyles((theme) => ({\r\n    container: {\r\n        position: 'absolute',\r\n        left: '50%',\r\n        width: '50%',\r\n        bottom: 0,\r\n        pointerEvents: 'none',\r\n        color: '#fff',\r\n    },\r\n    buttonContainer: {\r\n        flexDirection: 'row',\r\n    },\r\n    timeDisplay: {\r\n        color: '#fff',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        height: '100%',\r\n        cursor: 'default',\r\n        fontSize: 20,\r\n        marginLeft: 10,\r\n    },\r\n    offsetInput: {\r\n        height: '100%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        fontSize: 20,\r\n        marginLeft: 10,\r\n        width: 100,\r\n        color: '#fff',\r\n        pointerEvents: 'auto',\r\n    },\r\n    volumeInputContainerShown: {\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.short,\r\n        }),\r\n        marginRight: 5,\r\n        pointerEvents: 'auto',\r\n    },\r\n    volumeInputContainerHidden: {\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.short,\r\n        }),\r\n        marginRight: 0,\r\n        pointerEvents: 'auto',\r\n    },\r\n    volumeInputHidden: {\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.short,\r\n        }),\r\n        width: 0,\r\n        pointerEvents: 'auto',\r\n    },\r\n    volumeInputShown: {\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.short,\r\n        }),\r\n        width: 100,\r\n        pointerEvents: 'auto',\r\n    },\r\n    volumeInputThumbHidden: {\r\n        transition: theme.transitions.create('visibility', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.short,\r\n        }),\r\n        opacity: 0,\r\n        pointerEvents: 'auto',\r\n    },\r\n    volumeInputThumbShown: {\r\n        transition: theme.transitions.create('visibility', {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.short,\r\n        }),\r\n        opacity: 1,\r\n        pointerEvents: 'auto',\r\n    },\r\n    subContainer: {\r\n        background: 'linear-gradient(to bottom, rgba(0, 0, 0, 0), rgba(0, 0, 0, .4) 40%, rgba(0, 0, 0, 0.7))',\r\n        position: 'relative',\r\n        left: '-100%',\r\n        width: '200%',\r\n        zIndex: 10,\r\n    },\r\n    button: {\r\n        pointerEvents: 'auto',\r\n    },\r\n    inactiveButton: {\r\n        color: 'rgba(72, 72, 72, 0.7)',\r\n        pointerEvents: 'auto',\r\n    },\r\n    inactiveTopButton: {\r\n        color: 'rgba(255, 255, 255, 0.5)',\r\n        pointerEvents: 'auto',\r\n    },\r\n    progress: {\r\n        margin: 5,\r\n    },\r\n    topButton: {\r\n        pointerEvents: 'auto',\r\n        color: '#fff',\r\n    },\r\n    gridContainer: {\r\n        pointerEvents: 'auto',\r\n        padding: 2,\r\n    },\r\n}));\r\n\r\nconst useProgressBarStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: 10,\r\n    },\r\n    container: {\r\n        height: 10,\r\n        pointerEvents: 'auto',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        flexDirection: 'column',\r\n        position: 'absolute',\r\n        width: 'calc(100% - 20px)',\r\n        marginLeft: 10,\r\n    },\r\n    mouseEventListener: {\r\n        zIndex: 1,\r\n        height: 10,\r\n        cursor: 'pointer',\r\n        pointerEvents: 'auto',\r\n        position: 'absolute',\r\n        width: '100%',\r\n    },\r\n    fillContainer: {\r\n        background: 'rgba(30,30,30,0.7)',\r\n        width: '100%',\r\n        height: 5,\r\n        position: 'relative',\r\n    },\r\n    fillContainerThick: {\r\n        transition: theme.transitions.create('height', {\r\n            easing: theme.transitions.easing.easeInOut,\r\n            duration: 50,\r\n        }),\r\n        height: 8,\r\n    },\r\n    fill: {\r\n        background: 'linear-gradient(to left, #ff1f62, #49007a)',\r\n        height: '100%',\r\n    },\r\n    handleContainer: {\r\n        position: 'absolute',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        flexDirection: 'column',\r\n        height: '100%',\r\n        bottom: 0,\r\n    },\r\n    handle: {\r\n        borderRadius: '50%',\r\n        width: 16,\r\n        height: 16,\r\n        opacity: 0,\r\n        left: -8,\r\n        background: 'white',\r\n        position: 'absolute',\r\n    },\r\n    handleOn: {\r\n        opacity: 1,\r\n        transition: theme.transitions.create('opacity', {\r\n            easing: theme.transitions.easing.easeInOut,\r\n            duration: theme.transitions.duration.shortest,\r\n        }),\r\n    },\r\n}));\r\n\r\nconst VolumeSlider = withStyles((theme) => ({\r\n    root: {\r\n        color: 'white',\r\n        verticalAlign: 'middle',\r\n    },\r\n    thumb: {\r\n        backgroundColor: 'white',\r\n        color: 'white',\r\n        '&:focus': {\r\n            boxShadow: 'inherit',\r\n        },\r\n        '&:hover, &$active': {\r\n            boxShadow: '0px 0px 0px 8px rgba(255, 255, 255, 0.1)',\r\n        },\r\n    },\r\n    active: {\r\n        color: 'white',\r\n    },\r\n}))(Slider);\r\n\r\nfunction displayTime(milliseconds: number) {\r\n    const seconds = Math.floor(milliseconds / 1000);\r\n    const minutes = Math.floor(seconds / 60);\r\n    const secondsInMinute = seconds % 60;\r\n    return String(minutes) + ':' + String(secondsInMinute).padStart(2, '0');\r\n}\r\n\r\nfunction elementWidth(element: HTMLElement) {\r\n    const rect = element.getBoundingClientRect();\r\n    return rect.right - rect.left;\r\n}\r\n\r\ninterface ProgressBarProps {\r\n    onSeek: (progress: number) => void;\r\n    value: number;\r\n}\r\n\r\nfunction ProgressBar({ onSeek, value }: ProgressBarProps) {\r\n    const classes = useProgressBarStyles();\r\n    const [mouseOver, setMouseOver] = useState(false);\r\n    const containerRef = useRef(null);\r\n\r\n    const handleClick = useCallback(\r\n        (e: React.MouseEvent<HTMLDivElement>) => {\r\n            const rect = e.currentTarget.getBoundingClientRect();\r\n            // Account for margins by subtracting 10 from left/right sides\r\n            const width = rect.right - rect.left - 20;\r\n            const progress = Math.min(1, Math.max(0, (e.pageX - rect.left - 10) / width));\r\n            onSeek(progress);\r\n        },\r\n        [onSeek]\r\n    );\r\n\r\n    const handleMouseOver = useCallback(() => setMouseOver(true), []);\r\n    const handleMouseOut = useCallback(() => setMouseOver(false), []);\r\n    const progressWidth = containerRef.current ? (elementWidth(containerRef.current) * value) / 100 : 0;\r\n    const fillStyle = { width: progressWidth };\r\n    const handleStyle = { marginLeft: progressWidth };\r\n    const fillContainerClassName = mouseOver\r\n        ? classes.fillContainer + ' ' + classes.fillContainerThick\r\n        : classes.fillContainer;\r\n    const handleClassName = mouseOver ? classes.handle + ' ' + classes.handleOn : classes.handle;\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <div ref={containerRef} className={classes.container}>\r\n                <div className={fillContainerClassName}>\r\n                    <div className={classes.fill} style={fillStyle}></div>\r\n                    <div className={classes.handleContainer}>\r\n                        <div className={handleClassName} style={handleStyle} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div\r\n                className={classes.mouseEventListener}\r\n                onClick={handleClick}\r\n                onMouseOver={handleMouseOver}\r\n                onMouseOut={handleMouseOut}\r\n            ></div>\r\n        </div>\r\n    );\r\n}\r\n\r\ninterface AudioTrackSelectorProps {\r\n    open: boolean;\r\n    anchorEl?: Element;\r\n    audioTracks?: AudioTrackModel[];\r\n    selectedAudioTrack?: string;\r\n    onAudioTrackSelected: (id: string) => void;\r\n    onClose: () => void;\r\n}\r\n\r\nfunction AudioTrackSelector({\r\n    open,\r\n    anchorEl,\r\n    audioTracks,\r\n    selectedAudioTrack,\r\n    onAudioTrackSelected,\r\n    onClose,\r\n}: AudioTrackSelectorProps) {\r\n    if (!audioTracks || audioTracks.length === 0) {\r\n        return null;\r\n    }\r\n\r\n    const list = audioTracks.map((t) => {\r\n        return (\r\n            <ListItem\r\n                key={t.id}\r\n                selected={t.id === selectedAudioTrack}\r\n                button\r\n                onClick={() => onAudioTrackSelected(t.id)}\r\n            >\r\n                {t.language} {t.label}\r\n            </ListItem>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <Popover\r\n                disableEnforceFocus={true}\r\n                open={open}\r\n                anchorEl={anchorEl}\r\n                onClose={onClose}\r\n                anchorOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'center',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'center',\r\n                }}\r\n            >\r\n                <List>{list}</List>\r\n            </Popover>\r\n        </div>\r\n    );\r\n}\r\n\r\ninterface TabSelectorProps {\r\n    open: boolean;\r\n    anchorEl?: Element;\r\n    tabs?: VideoTabModel[];\r\n    selectedTab?: VideoTabModel;\r\n    onTabSelected: (tab: VideoTabModel) => void;\r\n    onClose: () => void;\r\n}\r\n\r\nfunction TabSelector({ open, anchorEl, onClose, tabs, selectedTab, onTabSelected }: TabSelectorProps) {\r\n    if (!tabs || tabs.length === 0) {\r\n        return null;\r\n    }\r\n\r\n    const list = tabs.map((t) => {\r\n        return (\r\n            <ListItem\r\n                key={t.id}\r\n                selected={selectedTab && t.id === selectedTab.id && t.src === selectedTab.src}\r\n                button\r\n                onClick={() => onTabSelected(t)}\r\n            >\r\n                {t.id} {t.title} {t.src}\r\n            </ListItem>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <Popover\r\n                disableEnforceFocus={true}\r\n                open={open}\r\n                anchorEl={anchorEl}\r\n                onClose={onClose}\r\n                anchorOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'center',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'center',\r\n                }}\r\n            >\r\n                <List>{list}</List>\r\n            </Popover>\r\n        </div>\r\n    );\r\n}\r\n\r\ninterface MediaUnloaderProps {\r\n    open: boolean;\r\n    anchorEl?: Element;\r\n    file?: string;\r\n    onUnload: () => void;\r\n    onClose: () => void;\r\n}\r\n\r\nfunction MediaUnloader({ open, anchorEl, onUnload, onClose, file }: MediaUnloaderProps) {\r\n    return (\r\n        <div>\r\n            <Popover\r\n                disableEnforceFocus={true}\r\n                open={open}\r\n                anchorEl={anchorEl}\r\n                onClose={onClose}\r\n                anchorOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'center',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'center',\r\n                }}\r\n            >\r\n                <List>\r\n                    <ListItem button onClick={(e) => onUnload()}>\r\n                        Unload {file}\r\n                    </ListItem>\r\n                </List>\r\n            </Popover>\r\n        </div>\r\n    );\r\n}\r\n\r\ninterface PlayModeSelectorProps {\r\n    open: boolean;\r\n    anchorEl?: Element;\r\n    selectedPlayMode?: PlayMode;\r\n    onPlayMode: (playMode: PlayMode) => void;\r\n    onClose: () => void;\r\n}\r\n\r\nfunction PlayModeSelector({ open, anchorEl, selectedPlayMode, onPlayMode, onClose }: PlayModeSelectorProps) {\r\n    return (\r\n        <div>\r\n            <Popover\r\n                disableEnforceFocus={true}\r\n                open={open}\r\n                anchorEl={anchorEl}\r\n                onClose={onClose}\r\n                anchorOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'center',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'center',\r\n                }}\r\n            >\r\n                <List>\r\n                    <ListItem\r\n                        selected={selectedPlayMode === PlayMode.normal}\r\n                        button\r\n                        onClick={(e) => onPlayMode(PlayMode.normal)}\r\n                    >\r\n                        Normal\r\n                    </ListItem>\r\n                    <ListItem\r\n                        selected={selectedPlayMode === PlayMode.condensed}\r\n                        button\r\n                        onClick={(e) => onPlayMode(PlayMode.condensed)}\r\n                    >\r\n                        Condensed\r\n                    </ListItem>\r\n                    <ListItem\r\n                        selected={selectedPlayMode === PlayMode.autoPause}\r\n                        button\r\n                        onClick={(e) => onPlayMode(PlayMode.autoPause)}\r\n                    >\r\n                        Auto-pause\r\n                    </ListItem>\r\n                </List>\r\n            </Popover>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport interface Point {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\ninterface ControlsProps {\r\n    clock: Clock;\r\n    playing: boolean;\r\n    length: number;\r\n    offsetEnabled?: boolean;\r\n    displayLength?: number;\r\n    offset: number;\r\n    onAudioTrackSelected: (id: string) => void;\r\n    onSeek: (progress: number) => void;\r\n    mousePositionRef: MutableRefObject<Point>;\r\n    onShow?: (show: boolean) => void;\r\n    onPause: () => void;\r\n    onPlay: () => void;\r\n    onTabSelected?: (tab: VideoTabModel) => void;\r\n    onUnloadAudio?: () => void;\r\n    onUnloadVideo?: () => void;\r\n    onOffsetChange: (offset: number) => void;\r\n    onVolumeChange: (volume: number) => void;\r\n    disableKeyEvents?: boolean;\r\n    settingsProvider: AsbplayerSettingsProvider;\r\n    closeEnabled?: boolean;\r\n    onClose?: () => void;\r\n    volumeEnabled?: boolean;\r\n    playMode?: PlayMode;\r\n    playModeEnabled?: boolean;\r\n    onPlayMode?: (playMode: PlayMode) => void;\r\n    subtitlesEnabled?: boolean;\r\n    subtitlesToggle?: boolean;\r\n    onSubtitlesToggle?: () => void;\r\n    videoFile?: string;\r\n    audioFile?: string;\r\n    audioTracks?: AudioTrackModel[];\r\n    selectedAudioTrack?: string;\r\n    tabs?: VideoTabModel[];\r\n    selectedTab?: VideoTabModel;\r\n    popOutEnabled?: boolean;\r\n    popOut?: boolean;\r\n    onPopOutToggle?: () => void;\r\n    fullscreenEnabled?: boolean;\r\n    fullscreen?: boolean;\r\n    onFullscreenToggle?: () => void;\r\n    hideSubtitlePlayerToggleEnabled?: boolean;\r\n    subtitlePlayerHidden?: boolean;\r\n    onHideSubtitlePlayerToggle?: () => void;\r\n    showOnMouseMovement: boolean;\r\n    theaterModeToggleEnabled?: boolean;\r\n    theaterModeEnabled?: boolean;\r\n    onTheaterModeToggle?: () => void;\r\n}\r\n\r\nexport default function Controls({\r\n    clock,\r\n    playing,\r\n    length,\r\n    offsetEnabled,\r\n    displayLength,\r\n    offset,\r\n    onAudioTrackSelected,\r\n    onSeek,\r\n    mousePositionRef,\r\n    onShow,\r\n    onPause,\r\n    onPlay,\r\n    onTabSelected,\r\n    onUnloadAudio,\r\n    onUnloadVideo,\r\n    onOffsetChange,\r\n    onVolumeChange,\r\n    disableKeyEvents,\r\n    settingsProvider,\r\n    closeEnabled,\r\n    onClose,\r\n    volumeEnabled,\r\n    playMode,\r\n    playModeEnabled,\r\n    onPlayMode,\r\n    subtitlesEnabled,\r\n    subtitlesToggle,\r\n    onSubtitlesToggle,\r\n    videoFile,\r\n    audioFile,\r\n    audioTracks,\r\n    selectedAudioTrack,\r\n    tabs,\r\n    selectedTab,\r\n    popOutEnabled,\r\n    popOut,\r\n    onPopOutToggle,\r\n    fullscreenEnabled,\r\n    fullscreen,\r\n    onFullscreenToggle,\r\n    hideSubtitlePlayerToggleEnabled,\r\n    subtitlePlayerHidden,\r\n    onHideSubtitlePlayerToggle,\r\n    showOnMouseMovement,\r\n    theaterModeToggleEnabled,\r\n    theaterModeEnabled,\r\n    onTheaterModeToggle,\r\n}: ControlsProps) {\r\n    const classes = useControlStyles();\r\n    const [show, setShow] = useState<boolean>(true);\r\n    const [audioTrackSelectorOpen, setAudioTrackSelectorOpen] = useState<boolean>(false);\r\n    const [audioTrackSelectorAnchorEl, setAudioTrackSelectorAnchorEl] = useState<Element>();\r\n    const [tabSelectorOpen, setTabSelectorOpen] = useState<boolean>(false);\r\n    const [tabSelectorAnchorEl, setTabSelectorAnchorEl] = useState<Element>();\r\n    const [audioUnloaderOpen, setAudioUnloaderOpen] = useState<boolean>(false);\r\n    const [audioUnloaderAnchorEl, setAudioUnloaderAnchorEl] = useState<Element>();\r\n    const [videoUnloaderOpen, setVideoUnloaderOpen] = useState<boolean>(false);\r\n    const [videoUnloaderAnchorEl, setVideoUnloaderAnchorEl] = useState<Element>();\r\n    const [playModeSelectorOpen, setPlayModeSelectorOpen] = useState<boolean>(false);\r\n    const [playModeSelectorAnchorEl, setPlayModeSelectorAnchorEl] = useState<Element>();\r\n    const [showVolumeBar, setShowVolumeBar] = useState<boolean>(false);\r\n    const [volume, setVolume] = useState<number>(100);\r\n    const [lastCommittedVolume, setLastCommittedVolume] = useState<number>(100);\r\n    const lastMousePositionRef = useRef<Point>({ x: 0, y: 0 });\r\n    const lastShowTimestampRef = useRef<number>(Date.now());\r\n    const lastOffsetInputChangeTimestampRef = useRef<number>(Date.now());\r\n    const lastShowRef = useRef<boolean>(true);\r\n    const forceShowRef = useRef<boolean>(false);\r\n    const offsetInputRef = useRef<HTMLInputElement>();\r\n    const containerRef = useRef<HTMLDivElement>(null);\r\n    const closeButtonRef = useRef<HTMLButtonElement>(null);\r\n    const [, updateState] = useState<any>();\r\n    const forceUpdate = useCallback(() => updateState({}), []);\r\n\r\n    const handleSeek = useCallback(\r\n        (progress: number) => {\r\n            onSeek(progress);\r\n        },\r\n        [onSeek]\r\n    );\r\n\r\n    function handleMouseOver() {\r\n        forceShowRef.current = true;\r\n    }\r\n\r\n    function handleMouseOut() {\r\n        forceShowRef.current = false;\r\n    }\r\n\r\n    useEffect(() => {\r\n        const savedVolume = Number(settingsProvider.volume);\r\n        setVolume(savedVolume);\r\n        onVolumeChange(savedVolume / 100);\r\n\r\n        if (savedVolume > 0) {\r\n            setLastCommittedVolume(savedVolume);\r\n        }\r\n    }, [settingsProvider, onVolumeChange]);\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            let currentShow: boolean;\r\n\r\n            if (showOnMouseMovement) {\r\n                currentShow =\r\n                    Date.now() - lastShowTimestampRef.current < 2000 ||\r\n                    Math.pow(mousePositionRef.current.x - lastMousePositionRef.current.x, 2) +\r\n                        Math.pow(mousePositionRef.current.y - lastMousePositionRef.current.y, 2) >\r\n                        100;\r\n            } else {\r\n                currentShow =\r\n                    ((containerRef.current && mousePositionRef.current.y > containerRef.current.offsetTop - 20) ||\r\n                        (closeButtonRef.current &&\r\n                            mousePositionRef.current.y < closeButtonRef.current.offsetHeight + 20)) ??\r\n                    false;\r\n            }\r\n\r\n            currentShow =\r\n                currentShow ||\r\n                forceShowRef.current ||\r\n                offsetInputRef.current === document.activeElement ||\r\n                Date.now() - lastOffsetInputChangeTimestampRef.current < 2000;\r\n\r\n            if (currentShow && !lastShowRef.current) {\r\n                lastShowTimestampRef.current = Date.now();\r\n                setShow(currentShow);\r\n            } else if (!currentShow && lastShowRef.current) {\r\n                setShow(currentShow);\r\n            }\r\n\r\n            lastShowRef.current = currentShow;\r\n            lastMousePositionRef.current.x = mousePositionRef.current.x;\r\n            lastMousePositionRef.current.y = mousePositionRef.current.y;\r\n        }, 100);\r\n        return () => clearInterval(interval);\r\n    }, [mousePositionRef, showOnMouseMovement]);\r\n\r\n    useEffect(() => onShow?.(show), [onShow, show]);\r\n\r\n    useEffect(() => {\r\n        if (disableKeyEvents) {\r\n            return;\r\n        }\r\n\r\n        function handleKey(event: KeyboardEvent) {\r\n            if (event.key === 'Enter') {\r\n                if (offsetInputRef.current === document.activeElement) {\r\n                    const offset = Number(offsetInputRef.current.value);\r\n\r\n                    if (Number.isNaN(offset)) {\r\n                        return;\r\n                    }\r\n\r\n                    onOffsetChange(offset * 1000);\r\n                    offsetInputRef.current.blur();\r\n                }\r\n            }\r\n        }\r\n\r\n        window.addEventListener('keydown', handleKey);\r\n\r\n        return () => {\r\n            window.removeEventListener('keydown', handleKey);\r\n        };\r\n    }, [onOffsetChange, disableKeyEvents]);\r\n\r\n    const handleOffsetInputClicked = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\r\n        const inputElement = e.target as HTMLInputElement;\r\n        inputElement.setSelectionRange(0, inputElement.value?.length || 0);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            forceUpdate();\r\n        }, 100);\r\n\r\n        return () => clearInterval(interval);\r\n    }, [forceUpdate]);\r\n\r\n    useEffect(() => {\r\n        if (offsetInputRef.current) {\r\n            if (offset === 0) {\r\n                offsetInputRef.current.value = '';\r\n            } else {\r\n                const offsetSeconds = offset / 1000;\r\n                const value = offsetSeconds >= 0 ? '+' + offsetSeconds.toFixed(2) : String(offsetSeconds.toFixed(2));\r\n                offsetInputRef.current.value = value;\r\n                lastOffsetInputChangeTimestampRef.current = Date.now();\r\n            }\r\n        }\r\n    }, [offset]);\r\n\r\n    const handleAudioTrackSelectorClosed = useCallback(() => {\r\n        setAudioTrackSelectorAnchorEl(undefined);\r\n        setAudioTrackSelectorOpen(false);\r\n    }, []);\r\n\r\n    const handleAudioTrackSelectorOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        setAudioTrackSelectorAnchorEl(e.currentTarget);\r\n        setAudioTrackSelectorOpen(true);\r\n    }, []);\r\n\r\n    const handleAudioTrackSelected = useCallback(\r\n        (id: string) => {\r\n            onAudioTrackSelected(id);\r\n            setAudioTrackSelectorAnchorEl(undefined);\r\n            setAudioTrackSelectorOpen(false);\r\n        },\r\n        [onAudioTrackSelected]\r\n    );\r\n\r\n    const handleTabSelectorClosed = useCallback(() => {\r\n        setTabSelectorAnchorEl(undefined);\r\n        setTabSelectorOpen(false);\r\n    }, []);\r\n\r\n    const handleTabSelectorOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        setTabSelectorAnchorEl(e.currentTarget);\r\n        setTabSelectorOpen(true);\r\n    }, []);\r\n\r\n    const handleTabSelected = useCallback(\r\n        (tab: VideoTabModel) => {\r\n            onTabSelected?.(tab);\r\n            setTabSelectorAnchorEl(undefined);\r\n            setTabSelectorOpen(false);\r\n        },\r\n        [onTabSelected]\r\n    );\r\n\r\n    const handleAudioUnloaderClosed = useCallback(() => {\r\n        setAudioUnloaderAnchorEl(undefined);\r\n        setAudioUnloaderOpen(false);\r\n    }, []);\r\n\r\n    const handleAudioUnloaderOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        setAudioUnloaderAnchorEl(e.currentTarget);\r\n        setAudioUnloaderOpen(true);\r\n    }, []);\r\n\r\n    const handleUnloadAudio = useCallback(() => {\r\n        onUnloadAudio?.();\r\n        setAudioUnloaderOpen(false);\r\n    }, [onUnloadAudio]);\r\n\r\n    const handleVideoUnloaderClosed = useCallback(() => {\r\n        setVideoUnloaderAnchorEl(undefined);\r\n        setVideoUnloaderOpen(false);\r\n    }, []);\r\n\r\n    const handleVideoUnloaderOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        setVideoUnloaderAnchorEl(e.currentTarget);\r\n        setVideoUnloaderOpen(true);\r\n    }, []);\r\n\r\n    const handleUnloadVideo = useCallback(() => {\r\n        onUnloadVideo?.();\r\n        setVideoUnloaderOpen(false);\r\n    }, [onUnloadVideo]);\r\n\r\n    const handlePlayModeSelectorClosed = useCallback(() => {\r\n        setPlayModeSelectorAnchorEl(undefined);\r\n        setPlayModeSelectorOpen(false);\r\n    }, []);\r\n\r\n    const handlePlayModeSelectorOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        setPlayModeSelectorAnchorEl(e.currentTarget);\r\n        setPlayModeSelectorOpen(true);\r\n    }, []);\r\n\r\n    const handlePlayModeSelected = useCallback(\r\n        (playMode: PlayMode) => {\r\n            onPlayMode?.(playMode);\r\n            setPlayModeSelectorAnchorEl(undefined);\r\n            setPlayModeSelectorOpen(false);\r\n        },\r\n        [onPlayMode]\r\n    );\r\n\r\n    const handleVolumeMouseOut = useCallback(() => setShowVolumeBar(false), []);\r\n    const handleVolumeMouseOver = useCallback(() => setShowVolumeBar(true), []);\r\n\r\n    const handleVolumeChange = useCallback(\r\n        (e: React.ChangeEvent<{}>, value: number | number[]) => {\r\n            if (typeof value !== 'number') {\r\n                return;\r\n            }\r\n\r\n            setVolume(value);\r\n            onVolumeChange(value / 100);\r\n        },\r\n        [onVolumeChange]\r\n    );\r\n\r\n    const handleVolumeChangeCommitted = useCallback(\r\n        (e: React.ChangeEvent<{}>, value: number | number[]) => {\r\n            if (typeof value !== 'number') {\r\n                return;\r\n            }\r\n\r\n            if (value > 0) {\r\n                setLastCommittedVolume(value);\r\n            }\r\n\r\n            settingsProvider.volume = value;\r\n        },\r\n        [settingsProvider]\r\n    );\r\n\r\n    const handleVolumeToggle = useCallback(() => {\r\n        setVolume((volume) => {\r\n            const newVolume = volume > 0 ? 0 : lastCommittedVolume;\r\n            onVolumeChange(newVolume / 100);\r\n            return newVolume;\r\n        });\r\n    }, [onVolumeChange, lastCommittedVolume]);\r\n\r\n    const progress = clock.progress(length);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Fade in={show} timeout={200}>\r\n                <Grid container style={{ position: 'absolute', top: 0 }}>\r\n                    <Grid item style={{ flexGrow: 1 }}>\r\n                        {closeEnabled && (\r\n                            <IconButton\r\n                                ref={closeButtonRef}\r\n                                color=\"inherit\"\r\n                                className={classes.topButton}\r\n                                onClick={onClose}\r\n                                onMouseOver={handleMouseOver}\r\n                                onMouseOut={handleMouseOut}\r\n                            >\r\n                                <CloseIcon />\r\n                            </IconButton>\r\n                        )}\r\n                    </Grid>\r\n                    <Grid item>\r\n                        {theaterModeToggleEnabled && (\r\n                            <IconButton\r\n                                color=\"inherit\"\r\n                                className={theaterModeEnabled ? classes.topButton : classes.inactiveTopButton}\r\n                                onClick={onTheaterModeToggle}\r\n                                onMouseOver={handleMouseOver}\r\n                                onMouseOut={handleMouseOut}\r\n                            >\r\n                                <AspectRatioIcon />\r\n                            </IconButton>\r\n                        )}\r\n                        {hideSubtitlePlayerToggleEnabled && (\r\n                            <IconButton\r\n                                color=\"inherit\"\r\n                                className={classes.topButton}\r\n                                onClick={onHideSubtitlePlayerToggle}\r\n                                onMouseOver={handleMouseOver}\r\n                                onMouseOut={handleMouseOut}\r\n                            >\r\n                                {subtitlePlayerHidden ? <ArrowBackIcon /> : <ArrowForwardIcon />}\r\n                            </IconButton>\r\n                        )}\r\n                    </Grid>\r\n                </Grid>\r\n            </Fade>\r\n            <div\r\n                ref={containerRef}\r\n                className={classes.container}\r\n                onMouseOver={handleMouseOver}\r\n                onMouseOut={handleMouseOut}\r\n            >\r\n                <Fade in={show} timeout={200}>\r\n                    <div className={classes.subContainer}>\r\n                        <ProgressBar onSeek={handleSeek} value={progress * 100} />\r\n                        <Grid container className={classes.gridContainer} direction=\"row\">\r\n                            <Grid item>\r\n                                <IconButton color=\"inherit\" onClick={() => (playing ? onPause() : onPlay())}>\r\n                                    {playing ? (\r\n                                        <PauseIcon className={classes.button} />\r\n                                    ) : (\r\n                                        <PlayArrowIcon className={classes.button} />\r\n                                    )}\r\n                                </IconButton>\r\n                            </Grid>\r\n                            {volumeEnabled && (\r\n                                <Grid\r\n                                    item\r\n                                    onMouseOver={handleVolumeMouseOver}\r\n                                    onMouseOut={handleVolumeMouseOut}\r\n                                    className={\r\n                                        showVolumeBar\r\n                                            ? classes.volumeInputContainerShown\r\n                                            : classes.volumeInputContainerHidden\r\n                                    }\r\n                                >\r\n                                    <IconButton color=\"inherit\" onClick={handleVolumeToggle}>\r\n                                        {volume === 0 ? <VolumeOffIcon /> : <VolumeUpIcon />}\r\n                                    </IconButton>\r\n                                    <VolumeSlider\r\n                                        onChange={handleVolumeChange}\r\n                                        onChangeCommitted={handleVolumeChangeCommitted}\r\n                                        value={volume}\r\n                                        defaultValue={100}\r\n                                        classes={{\r\n                                            root: showVolumeBar ? classes.volumeInputShown : classes.volumeInputHidden,\r\n                                            thumb: showVolumeBar\r\n                                                ? classes.volumeInputThumbShown\r\n                                                : classes.volumeInputThumbHidden,\r\n                                        }}\r\n                                    />\r\n                                </Grid>\r\n                            )}\r\n                            <Grid item>\r\n                                <div className={classes.timeDisplay}>\r\n                                    {displayTime(progress * length)} / {displayTime(displayLength || length)}\r\n                                </div>\r\n                            </Grid>\r\n                            {offsetEnabled && (\r\n                                <Grid item>\r\n                                    <Input\r\n                                        inputRef={offsetInputRef}\r\n                                        disableUnderline={true}\r\n                                        className={classes.offsetInput}\r\n                                        placeholder={'±' + Number(0).toFixed(2)}\r\n                                        onClick={handleOffsetInputClicked}\r\n                                    />\r\n                                </Grid>\r\n                            )}\r\n                            <Grid item style={{ flexGrow: 1 }}></Grid>\r\n                            {subtitlesToggle && (\r\n                                <Grid item>\r\n                                    <IconButton color=\"inherit\" onClick={onSubtitlesToggle}>\r\n                                        <SubtitlesIcon\r\n                                            className={subtitlesEnabled ? classes.button : classes.inactiveButton}\r\n                                        />\r\n                                    </IconButton>\r\n                                </Grid>\r\n                            )}\r\n                            {videoFile && (\r\n                                <Grid item>\r\n                                    <IconButton color=\"inherit\" onClick={handleVideoUnloaderOpened}>\r\n                                        <VideocamIcon className={classes.button} />\r\n                                    </IconButton>\r\n                                </Grid>\r\n                            )}\r\n                            {audioFile && (\r\n                                <Grid item>\r\n                                    <IconButton color=\"inherit\" onClick={handleAudioUnloaderOpened}>\r\n                                        <AudiotrackIcon className={classes.button} />\r\n                                    </IconButton>\r\n                                </Grid>\r\n                            )}\r\n                            {audioTracks && audioTracks.length > 1 && (\r\n                                <Grid item>\r\n                                    <IconButton color=\"inherit\" onClick={handleAudioTrackSelectorOpened}>\r\n                                        <QueueMusicIcon className={classes.button} />\r\n                                    </IconButton>\r\n                                </Grid>\r\n                            )}\r\n                            {tabs && tabs.length > 0 && (\r\n                                <Grid item>\r\n                                    <IconButton color=\"inherit\" onClick={handleTabSelectorOpened}>\r\n                                        <VideocamIcon\r\n                                            className={selectedTab ? classes.button : classes.inactiveButton}\r\n                                        />\r\n                                    </IconButton>\r\n                                </Grid>\r\n                            )}\r\n                            {playModeEnabled && (\r\n                                <Grid item>\r\n                                    <IconButton color=\"inherit\" onClick={handlePlayModeSelectorOpened}>\r\n                                        <TuneIcon\r\n                                            className={playModeEnabled ? classes.button : classes.inactiveButton}\r\n                                        />\r\n                                    </IconButton>\r\n                                </Grid>\r\n                            )}\r\n                            {popOutEnabled && (\r\n                                <Grid item>\r\n                                    <IconButton color=\"inherit\" onClick={onPopOutToggle}>\r\n                                        <OpenInNewIcon\r\n                                            className={classes.button}\r\n                                            style={popOut ? { transform: 'rotateX(180deg)' } : {}}\r\n                                        />\r\n                                    </IconButton>\r\n                                </Grid>\r\n                            )}\r\n                            {fullscreenEnabled && (\r\n                                <Grid item>\r\n                                    <IconButton color=\"inherit\" onClick={onFullscreenToggle}>\r\n                                        {fullscreen ? (\r\n                                            <FullscreenExitIcon className={classes.button} />\r\n                                        ) : (\r\n                                            <FullscreenIcon className={classes.button} />\r\n                                        )}\r\n                                    </IconButton>\r\n                                </Grid>\r\n                            )}\r\n                        </Grid>\r\n                    </div>\r\n                </Fade>\r\n                <TabSelector\r\n                    open={tabSelectorOpen && show}\r\n                    anchorEl={tabSelectorAnchorEl}\r\n                    tabs={tabs}\r\n                    selectedTab={selectedTab}\r\n                    onClose={handleTabSelectorClosed}\r\n                    onTabSelected={handleTabSelected}\r\n                />\r\n                <AudioTrackSelector\r\n                    open={audioTrackSelectorOpen && show}\r\n                    anchorEl={audioTrackSelectorAnchorEl}\r\n                    audioTracks={audioTracks}\r\n                    selectedAudioTrack={selectedAudioTrack}\r\n                    onClose={handleAudioTrackSelectorClosed}\r\n                    onAudioTrackSelected={handleAudioTrackSelected}\r\n                />\r\n                <MediaUnloader\r\n                    open={audioUnloaderOpen}\r\n                    anchorEl={audioUnloaderAnchorEl}\r\n                    file={audioFile}\r\n                    onClose={handleAudioUnloaderClosed}\r\n                    onUnload={handleUnloadAudio}\r\n                />\r\n                <MediaUnloader\r\n                    open={videoUnloaderOpen}\r\n                    anchorEl={videoUnloaderAnchorEl}\r\n                    file={videoFile}\r\n                    onClose={handleVideoUnloaderClosed}\r\n                    onUnload={handleUnloadVideo}\r\n                />\r\n                <PlayModeSelector\r\n                    open={playModeSelectorOpen && show}\r\n                    anchorEl={playModeSelectorAnchorEl}\r\n                    selectedPlayMode={playMode}\r\n                    onClose={handlePlayModeSelectorClosed}\r\n                    onPlayMode={handlePlayModeSelected}\r\n                />\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n","import { RefObject } from \"react\";\r\n\r\nexport interface MediaElement {\r\n    currentTime: number;\r\n    readyState: number;\r\n    oncanplay: ((ev: Event) => void) | null;\r\n    play: () => Promise<void>;\r\n    pause: () => void;\r\n    duration: number;\r\n}\r\n\r\nexport default class MediaAdapter {\r\n    private readonly ref: RefObject<MediaElement | undefined>;\r\n    private readonly readyResolves: (() => void)[];\r\n\r\n    constructor(ref: RefObject<MediaElement | undefined>) {\r\n        this.ref = ref;\r\n        this.readyResolves = [];\r\n    }\r\n\r\n    async seek(time: number) {\r\n        return new Promise((resolve, reject) => {\r\n            if (this.ref.current) {\r\n                this.ref.current.currentTime = time;\r\n                this._onMediaCanPlay(() => resolve(undefined));\r\n            } else {\r\n                resolve(undefined);\r\n            }\r\n        });\r\n    }\r\n\r\n    async onReady() {\r\n        return new Promise((resolve, reject) => {\r\n            if (this.ref.current) {\r\n                this._onMediaCanPlay(() => resolve(undefined));\r\n            } else {\r\n                resolve(undefined);\r\n            }\r\n        });\r\n    }\r\n\r\n    _onMediaCanPlay(callback: () => void) {\r\n        if (this.ref.current?.readyState === 4) {\r\n            callback();\r\n            return;\r\n        }\r\n\r\n        if (this.ref.current && !this.ref.current.oncanplay) {\r\n            this.ref.current.oncanplay = (e) => {\r\n                for (const resolve of this.readyResolves) {\r\n                    resolve();\r\n                }\r\n\r\n                this.readyResolves.length = 0;\r\n\r\n                if (this.ref.current) {\r\n                    this.ref.current.oncanplay = null;\r\n                }\r\n            };\r\n        }\r\n\r\n        this.readyResolves.push(callback);\r\n    }\r\n\r\n    play() {\r\n        this.ref.current?.play();\r\n    }\r\n\r\n    pause() {\r\n        this.ref.current?.pause();\r\n    }\r\n}\r\n","import React, { useCallback, useEffect, useState, useMemo, useRef, createRef, RefObject } from 'react';\r\nimport { makeStyles, Theme } from '@material-ui/core/styles';\r\nimport { keysAreEqual } from '../services/Util';\r\nimport { useWindowSize } from '../hooks/useWindowSize';\r\nimport {\r\n    AsbplayerSettingsProvider,\r\n    KeyBindings,\r\n    PostMineAction,\r\n    surroundingSubtitles,\r\n    SubtitleModel,\r\n} from '@project/common';\r\nimport { SubtitleTextImage } from '@project/common/components';\r\nimport FileCopy from '@material-ui/icons/FileCopy';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableRow, { TableRowProps } from '@material-ui/core/TableRow';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Clock from '../services/Clock';\r\n\r\ninterface StylesProps {\r\n    compressed: boolean;\r\n    appBarHidden: boolean;\r\n    windowWidth: number;\r\n}\r\n\r\nconst useSubtitlePlayerStyles = makeStyles<Theme, StylesProps, string>((theme) => ({\r\n    container: {\r\n        height: ({ appBarHidden }) => (appBarHidden ? '100vh' : 'calc(100vh - 64px)'),\r\n        position: 'relative',\r\n        overflowX: 'hidden',\r\n        backgroundColor: theme.palette.background.default,\r\n        width: ({ compressed, windowWidth }) => (compressed ? Math.max(350, 0.25 * windowWidth) : '100%'),\r\n    },\r\n    table: {\r\n        backgroundColor: theme.palette.background.default,\r\n        marginBottom: 75, // so the last row doesn't collide with controls\r\n    },\r\n    noSubtitles: {\r\n        height: '100%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        padding: 15,\r\n        textAlign: 'center',\r\n    },\r\n}));\r\n\r\nconst useSubtitleRowStyles = makeStyles((theme) => ({\r\n    subtitleRow: {\r\n        '&:hover': {\r\n            backgroundColor: theme.palette.action.hover,\r\n        },\r\n    },\r\n    subtitle: {\r\n        fontSize: 20,\r\n        paddingRight: 0,\r\n        minWidth: 200,\r\n        width: '100%',\r\n        overflowWrap: 'anywhere',\r\n        whiteSpace: 'pre-wrap',\r\n    },\r\n    compressedSubtitle: {\r\n        fontSize: 16,\r\n        paddingRight: 0,\r\n        minWidth: 200,\r\n        width: '100%',\r\n        overflowWrap: 'anywhere',\r\n        whiteSpace: 'pre-wrap',\r\n    },\r\n    disabledSubtitle: {\r\n        color: 'transparent',\r\n        backgroundColor: theme.palette.action.disabledBackground,\r\n        borderRadius: 5,\r\n    },\r\n    timestamp: {\r\n        fontSize: 14,\r\n        color: '#aaaaaa',\r\n        textAlign: 'right',\r\n        paddingRight: 15,\r\n        paddingLeft: 5,\r\n    },\r\n    copyButton: {\r\n        textAlign: 'right',\r\n        padding: 0,\r\n    },\r\n}));\r\n\r\nexport interface DisplaySubtitleModel extends SubtitleModel {\r\n    displayTime: string;\r\n}\r\n\r\ninterface SubtitleRowProps extends TableRowProps {\r\n    index: number;\r\n    compressed: boolean;\r\n    selected: boolean;\r\n    disabled: boolean;\r\n    subtitle: DisplaySubtitleModel;\r\n    subtitleRef: RefObject<HTMLTableRowElement>;\r\n    onClickSubtitle: (index: number) => void;\r\n    onCopySubtitle: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>, index: number) => void;\r\n}\r\n\r\nconst SubtitleRow = React.memo((props: SubtitleRowProps) => {\r\n    const {\r\n        index,\r\n        selected,\r\n        subtitleRef,\r\n        onClickSubtitle,\r\n        onCopySubtitle,\r\n        compressed,\r\n        disabled,\r\n        subtitle,\r\n        ...tableRowProps\r\n    } = props;\r\n    const classes = useSubtitleRowStyles();\r\n    const textRef = useRef<HTMLSpanElement>(null);\r\n    const [textSelected, setTextSelected] = useState<boolean>(false);\r\n    let className = compressed ? classes.compressedSubtitle : classes.subtitle;\r\n    let disabledClassName = disabled ? classes.disabledSubtitle : '';\r\n\r\n    if (subtitle.start < 0 || subtitle.end < 0) {\r\n        return null;\r\n    }\r\n\r\n    function handleMouseUp() {\r\n        const selection = document.getSelection();\r\n        const selected =\r\n            selection?.type === 'Range' && textRef.current?.isSameNode(selection.anchorNode?.parentNode ?? null);\r\n        setTextSelected(selected ?? false);\r\n    }\r\n\r\n    const content = subtitle.textImage ? (\r\n        <SubtitleTextImage availableWidth={window.screen.availWidth / 2} subtitle={subtitle} scale={1} />\r\n    ) : (\r\n        <span ref={textRef} className={disabledClassName}>\r\n            {subtitle.text}\r\n        </span>\r\n    );\r\n\r\n    return (\r\n        <TableRow\r\n            onClick={() => !textSelected && onClickSubtitle(index)}\r\n            onMouseUp={handleMouseUp}\r\n            ref={subtitleRef}\r\n            className={classes.subtitleRow}\r\n            selected={selected}\r\n            {...tableRowProps}\r\n        >\r\n            <TableCell className={className}>{content}</TableCell>\r\n            <TableCell className={classes.copyButton}>\r\n                <IconButton onClick={(e) => onCopySubtitle(e, index)}>\r\n                    <FileCopy fontSize={compressed ? 'small' : 'medium'} />\r\n                </IconButton>\r\n            </TableCell>\r\n            <TableCell className={classes.timestamp}>{subtitle.displayTime}</TableCell>\r\n        </TableRow>\r\n    );\r\n});\r\n\r\ninterface SubtitlePlayerProps {\r\n    clock: Clock;\r\n    onSeek: (progress: number, shouldPlay: boolean) => void;\r\n    onCopy: (\r\n        subtitle: SubtitleModel,\r\n        surroundingSubtitles: SubtitleModel[],\r\n        postMineAction: PostMineAction,\r\n        preventDuplicate: boolean\r\n    ) => void;\r\n    onOffsetChange: (offset: number) => void;\r\n    onToggleSubtitleTrack: (track: number) => void;\r\n    onStartedShowing?: () => void;\r\n    onWillStopShowing?: () => void;\r\n    playing: boolean;\r\n    subtitles?: DisplaySubtitleModel[];\r\n    length: number;\r\n    jumpToSubtitle?: SubtitleModel;\r\n    compressed: boolean;\r\n    loading: boolean;\r\n    drawerOpen: boolean;\r\n    appBarHidden: boolean;\r\n    displayHelp?: string;\r\n    disableKeyEvents: boolean;\r\n    lastJumpToTopTimestamp: number;\r\n    hidden: boolean;\r\n    disabledSubtitleTracks: { [track: number]: boolean };\r\n    settingsProvider: AsbplayerSettingsProvider;\r\n}\r\n\r\nexport default function SubtitlePlayer({\r\n    clock,\r\n    onSeek,\r\n    onCopy,\r\n    onOffsetChange,\r\n    onToggleSubtitleTrack,\r\n    onStartedShowing,\r\n    onWillStopShowing,\r\n    playing,\r\n    subtitles,\r\n    length,\r\n    jumpToSubtitle,\r\n    compressed,\r\n    loading,\r\n    drawerOpen,\r\n    appBarHidden,\r\n    displayHelp,\r\n    disableKeyEvents,\r\n    lastJumpToTopTimestamp,\r\n    hidden,\r\n    disabledSubtitleTracks,\r\n    settingsProvider,\r\n}: SubtitlePlayerProps) {\r\n    const playingRef = useRef<boolean>();\r\n    playingRef.current = playing;\r\n    const clockRef = useRef<Clock>(clock);\r\n    clockRef.current = clock;\r\n    const subtitleListRef = useRef<DisplaySubtitleModel[]>();\r\n    subtitleListRef.current = subtitles;\r\n    const subtitleRefs = useMemo<RefObject<HTMLTableRowElement>[]>(\r\n        () =>\r\n            subtitles\r\n                ? Array(subtitles.length)\r\n                      .fill(undefined)\r\n                      .map((_) => createRef<HTMLTableRowElement>())\r\n                : [],\r\n        [subtitles]\r\n    );\r\n    const subtitleRefsRef = useRef<RefObject<HTMLTableRowElement>[]>([]);\r\n    subtitleRefsRef.current = subtitleRefs;\r\n    const disableKeyEventsRef = useRef<boolean>();\r\n    disableKeyEventsRef.current = disableKeyEvents;\r\n    const [selectedSubtitleIndexes, setSelectedSubtitleIndexes] = useState<{ [index: number]: boolean }>({});\r\n    const selectedSubtitleIndexesRef = useRef<{ [index: number]: boolean }>({});\r\n    const lengthRef = useRef<number>(0);\r\n    lengthRef.current = length;\r\n    const hiddenRef = useRef<boolean>(false);\r\n    hiddenRef.current = hidden;\r\n    const lastScrollTimestampRef = useRef<number>(0);\r\n    const requestAnimationRef = useRef<number>();\r\n    const containerRef = useRef<HTMLElement>();\r\n    const drawerOpenRef = useRef<boolean>();\r\n    drawerOpenRef.current = drawerOpen;\r\n    const [windowWidth] = useWindowSize(true);\r\n    const classes = useSubtitlePlayerStyles({ compressed, windowWidth, appBarHidden });\r\n    const startedShowingSubtitleRef = useRef<SubtitleModel>();\r\n    const onStartedShowingRef = useRef<() => void>();\r\n    onStartedShowingRef.current = onStartedShowing;\r\n    const willStopShowingSubtitleRef = useRef<SubtitleModel>();\r\n    const onWillStopShowingRef = useRef<() => void>();\r\n    onWillStopShowingRef.current = onWillStopShowing;\r\n\r\n    // This effect should be scheduled only once as re-scheduling seems to cause performance issues.\r\n    // Therefore all of the state it operates on is contained in refs.\r\n    useEffect(() => {\r\n        const update = () => {\r\n            const subtitles = subtitleListRef.current || [];\r\n            const subtitleRefs = subtitleRefsRef.current;\r\n            const length = lengthRef.current;\r\n            const clock = clockRef.current;\r\n            const progress = clock.progress(lengthRef.current);\r\n\r\n            let smallestIndex = Number.MAX_SAFE_INTEGER;\r\n            let fallbackIndex = -1;\r\n            let startedShowing = false;\r\n            let startedShowingSubtitle: SubtitleModel | undefined;\r\n            let willStopShowing = false;\r\n            let willStopShowingSubtitle: SubtitleModel | undefined;\r\n            const currentSubtitleIndexes: { [index: number]: boolean } = {};\r\n\r\n            for (let i = subtitles.length - 1; i >= 0; --i) {\r\n                const s = subtitles[i];\r\n                const start = s.start / length;\r\n                const end = s.end / length;\r\n\r\n                if (progress >= start) {\r\n                    if (progress < end) {\r\n                        smallestIndex = i < smallestIndex ? i : smallestIndex;\r\n                        currentSubtitleIndexes[i] = true;\r\n                        const nextProgress = progress + 100 / length;\r\n\r\n                        if (!willStopShowing && nextProgress >= end) {\r\n                            willStopShowing = true;\r\n                            willStopShowingSubtitle = s;\r\n                        }\r\n\r\n                        // Add slight buffer to ensure sub is displaying on video\r\n                        if (!startedShowing && progress >= start + 100 / length && progress < start + 500 / length) {\r\n                            startedShowing = true;\r\n                            startedShowingSubtitle = s;\r\n                        }\r\n                    }\r\n\r\n                    if (fallbackIndex === -1) {\r\n                        fallbackIndex = i;\r\n                    }\r\n                } else if (smallestIndex !== Number.MAX_SAFE_INTEGER) {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            // Attempt to highlight *something* if no subtitles were found at the current timestamp\r\n            if (smallestIndex === Number.MAX_SAFE_INTEGER && fallbackIndex !== -1) {\r\n                currentSubtitleIndexes[fallbackIndex] = true;\r\n            }\r\n\r\n            if (!keysAreEqual(currentSubtitleIndexes, selectedSubtitleIndexesRef.current)) {\r\n                selectedSubtitleIndexesRef.current = currentSubtitleIndexes;\r\n                setSelectedSubtitleIndexes(currentSubtitleIndexes);\r\n\r\n                if (smallestIndex !== Number.MAX_SAFE_INTEGER) {\r\n                    const scrollToSubtitleRef = subtitleRefs[smallestIndex];\r\n                    const allowScroll = !hiddenRef.current && Date.now() - lastScrollTimestampRef.current > 5000;\r\n\r\n                    if (scrollToSubtitleRef?.current && allowScroll) {\r\n                        scrollToSubtitleRef.current.scrollIntoView({\r\n                            block: 'center',\r\n                            inline: 'nearest',\r\n                            behavior: 'smooth',\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (startedShowing && startedShowingSubtitleRef.current !== startedShowingSubtitle) {\r\n                onStartedShowingRef.current?.();\r\n                startedShowingSubtitleRef.current = startedShowingSubtitle;\r\n            }\r\n\r\n            if (willStopShowing && willStopShowingSubtitleRef.current !== willStopShowingSubtitle) {\r\n                onWillStopShowingRef.current?.();\r\n                willStopShowingSubtitleRef.current = willStopShowingSubtitle;\r\n            }\r\n\r\n            requestAnimationRef.current = requestAnimationFrame(update);\r\n        };\r\n\r\n        requestAnimationRef.current = requestAnimationFrame(update);\r\n\r\n        return () => {\r\n            if (requestAnimationRef.current !== undefined) {\r\n                cancelAnimationFrame(requestAnimationRef.current);\r\n            }\r\n        };\r\n    }, []);\r\n\r\n    const scrollToCurrentSubtitle = useCallback(() => {\r\n        const selectedSubtitleIndexes = selectedSubtitleIndexesRef.current;\r\n\r\n        if (!selectedSubtitleIndexes) {\r\n            return;\r\n        }\r\n\r\n        const indexes = Object.keys(selectedSubtitleIndexes);\r\n\r\n        if (indexes.length === 0) {\r\n            return;\r\n        }\r\n\r\n        const scrollToSubtitleRef = subtitleRefs[Number(indexes[0])];\r\n\r\n        scrollToSubtitleRef?.current?.scrollIntoView({\r\n            block: 'center',\r\n            inline: 'nearest',\r\n            behavior: 'smooth',\r\n        });\r\n    }, [subtitleRefs]);\r\n\r\n    useEffect(() => {\r\n        if (hidden) {\r\n            return;\r\n        }\r\n\r\n        function scrollIfVisible() {\r\n            if (document.visibilityState === 'visible') {\r\n                scrollToCurrentSubtitle();\r\n            }\r\n        }\r\n\r\n        document.addEventListener('visibilitychange', scrollIfVisible);\r\n\r\n        return () => document.removeEventListener('visibilitychange', scrollIfVisible);\r\n    }, [hidden, selectedSubtitleIndexes, subtitleRefs, scrollToCurrentSubtitle]);\r\n\r\n    useEffect(() => {\r\n        if (!hidden) {\r\n            scrollToCurrentSubtitle();\r\n        }\r\n    }, [hidden, scrollToCurrentSubtitle]);\r\n\r\n    useEffect(() => {\r\n        if (hiddenRef.current) {\r\n            return;\r\n        }\r\n\r\n        const subtitleRefs = subtitleRefsRef.current;\r\n\r\n        if (!subtitleRefs || subtitleRefs.length === 0) {\r\n            return;\r\n        }\r\n\r\n        const firstSubtitleRef = subtitleRefs[0];\r\n        firstSubtitleRef?.current?.scrollIntoView({\r\n            block: 'center',\r\n            inline: 'nearest',\r\n            behavior: 'smooth',\r\n        });\r\n    }, [lastJumpToTopTimestamp]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindAdjustOffset(\r\n            (event, offset) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                onOffsetChange(offset);\r\n            },\r\n            () => disableKeyEvents,\r\n            () => subtitles\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [onOffsetChange, disableKeyEvents, subtitles]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindOffsetToSubtitle(\r\n            (event, offset) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                onOffsetChange(offset);\r\n            },\r\n            () => disableKeyEvents,\r\n            () => clock.time(length),\r\n            () => subtitles\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [onOffsetChange, disableKeyEvents, clock, subtitles, length]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindSeekToSubtitle(\r\n            (event, subtitle) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                onSeek(subtitle.start, false);\r\n            },\r\n            () => disableKeyEvents,\r\n            () => clock.time(length),\r\n            () => subtitles\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [onSeek, subtitles, disableKeyEvents, clock, length]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindSeekToBeginningOfCurrentSubtitle(\r\n            (event, subtitle) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                onSeek(subtitle.start, false);\r\n            },\r\n            () => disableKeyEvents,\r\n            () => clock.time(length),\r\n            () => subtitles\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [onSeek, subtitles, disableKeyEvents, clock, length]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindSeekBackwardOrForward(\r\n            (event, forward) => {\r\n                event.stopPropagation();\r\n                event.preventDefault();\r\n                if (forward) {\r\n                    onSeek(Math.min(length, clock.time(length) + 10000), false);\r\n                } else {\r\n                    onSeek(Math.max(0, clock.time(length) - 10000), false);\r\n                }\r\n            },\r\n            () => disableKeyEvents\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [clock, length, disableKeyEvents, onSeek]);\r\n\r\n    useEffect(() => {\r\n        function handleScroll() {\r\n            lastScrollTimestampRef.current = Date.now();\r\n        }\r\n\r\n        const table = containerRef.current;\r\n        table?.addEventListener('wheel', handleScroll);\r\n\r\n        return () => table?.removeEventListener('wheel', handleScroll);\r\n    }, [containerRef, lastScrollTimestampRef]);\r\n\r\n    useEffect(() => {\r\n        if (hidden) {\r\n            return;\r\n        }\r\n\r\n        if (!jumpToSubtitle || !subtitles) {\r\n            return;\r\n        }\r\n\r\n        let jumpToIndex = -1;\r\n        let i = 0;\r\n\r\n        for (let s of subtitles) {\r\n            if (s.originalStart === jumpToSubtitle.originalStart && s.text === jumpToSubtitle.text) {\r\n                jumpToIndex = i;\r\n                break;\r\n            }\r\n\r\n            ++i;\r\n        }\r\n\r\n        if (jumpToIndex !== -1) {\r\n            subtitleRefs[jumpToIndex]?.current?.scrollIntoView({\r\n                block: 'center',\r\n                inline: 'nearest',\r\n                behavior: 'smooth',\r\n            });\r\n        }\r\n    }, [hidden, jumpToSubtitle, subtitles, subtitleRefs]);\r\n\r\n    const calculateSurroundingSubtitlesForIndex = useCallback(\r\n        (index: number) => {\r\n            if (!selectedSubtitleIndexesRef.current || !subtitles) {\r\n                return [];\r\n            }\r\n\r\n            return surroundingSubtitles(\r\n                subtitles,\r\n                index,\r\n                settingsProvider.surroundingSubtitlesCountRadius,\r\n                settingsProvider.surroundingSubtitlesTimeRadius\r\n            );\r\n        },\r\n        [subtitles, settingsProvider.surroundingSubtitlesCountRadius, settingsProvider.surroundingSubtitlesTimeRadius]\r\n    );\r\n\r\n    const calculateSurroundingSubtitles = useCallback(() => {\r\n        if (!selectedSubtitleIndexesRef.current) {\r\n            return [];\r\n        }\r\n        const index = Math.min(...Object.keys(selectedSubtitleIndexesRef.current).map((i) => Number(i)));\r\n        return calculateSurroundingSubtitlesForIndex(index);\r\n    }, [calculateSurroundingSubtitlesForIndex]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindCopy(\r\n            (event, subtitle) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                onCopy(subtitle, calculateSurroundingSubtitles(), PostMineAction.none, false);\r\n            },\r\n            () => disableKeyEventsRef.current ?? false,\r\n            () => {\r\n                const subtitleIndexes = Object.keys(selectedSubtitleIndexesRef.current).map((i) => Number(i));\r\n\r\n                if (!subtitles || !subtitleIndexes || subtitleIndexes.length === 0) {\r\n                    return undefined;\r\n                }\r\n\r\n                const index = Math.min(...subtitleIndexes);\r\n                return subtitles[index];\r\n            }\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [subtitles, calculateSurroundingSubtitles, onCopy]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindToggleSubtitleTrackInList(\r\n            (event, track) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                onToggleSubtitleTrack(track);\r\n            },\r\n            () => {},\r\n            () => disableKeyEvents\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [disableKeyEvents, onToggleSubtitleTrack]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindAnkiExport(\r\n            (event) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                const subtitleIndexes = Object.keys(selectedSubtitleIndexesRef.current).map((i) => Number(i));\r\n\r\n                if (subtitles && subtitleIndexes && subtitleIndexes.length > 0) {\r\n                    const index = Math.min(...subtitleIndexes);\r\n                    onCopy(\r\n                        subtitles[index],\r\n                        calculateSurroundingSubtitlesForIndex(index),\r\n                        PostMineAction.showAnkiDialog,\r\n                        true\r\n                    );\r\n                }\r\n            },\r\n            () => !subtitles || subtitles.length === 0 || disableKeyEvents\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [onCopy, disableKeyEvents, subtitles, calculateSurroundingSubtitlesForIndex]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindUpdateLastCard(\r\n            (event) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                const subtitleIndexes = Object.keys(selectedSubtitleIndexesRef.current).map((i) => Number(i));\r\n\r\n                if (subtitles && subtitleIndexes && subtitleIndexes.length > 0) {\r\n                    const index = Math.min(...subtitleIndexes);\r\n                    onCopy(\r\n                        subtitles[index],\r\n                        calculateSurroundingSubtitlesForIndex(index),\r\n                        PostMineAction.updateLastCard,\r\n                        true\r\n                    );\r\n                }\r\n            },\r\n            () => !subtitles || subtitles.length === 0 || disableKeyEvents\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [onCopy, disableKeyEvents, subtitles, calculateSurroundingSubtitlesForIndex]);\r\n\r\n    const handleClick = useCallback(\r\n        (index: number) => {\r\n            if (!subtitles) {\r\n                return;\r\n            }\r\n\r\n            const selectedSubtitleIndexes = selectedSubtitleIndexesRef.current || {};\r\n            onSeek(subtitles[index].start, !playingRef.current && index in selectedSubtitleIndexes);\r\n        },\r\n        [subtitles, onSeek]\r\n    );\r\n\r\n    const handleCopy = useCallback(\r\n        (e: React.MouseEvent<HTMLButtonElement, MouseEvent>, index: number) => {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n\r\n            if (!subtitles) {\r\n                return;\r\n            }\r\n\r\n            onCopy(subtitles[index], calculateSurroundingSubtitlesForIndex(index), PostMineAction.none, false);\r\n        },\r\n        [subtitles, calculateSurroundingSubtitlesForIndex, onCopy]\r\n    );\r\n\r\n    let subtitleTable = null;\r\n\r\n    if (!subtitles || subtitles.length === 0) {\r\n        if (!loading && displayHelp) {\r\n            subtitleTable = !loading && displayHelp && (\r\n                <div className={classes.noSubtitles}>\r\n                    <Typography variant=\"h6\">{displayHelp}</Typography>\r\n                </div>\r\n            );\r\n        } else if (subtitles && subtitles.length === 0) {\r\n            subtitleTable = (\r\n                <div className={classes.noSubtitles}>\r\n                    <Typography variant=\"h6\">No subtitles</Typography>\r\n                </div>\r\n            );\r\n        }\r\n    } else {\r\n        subtitleTable = (\r\n            <TableContainer className={classes.table}>\r\n                <Table>\r\n                    <TableBody>\r\n                        {subtitles.map((s: SubtitleModel, index: number) => {\r\n                            const selected = index in selectedSubtitleIndexes;\r\n\r\n                            return (\r\n                                <SubtitleRow\r\n                                    key={index}\r\n                                    index={index}\r\n                                    compressed={compressed}\r\n                                    selected={selected}\r\n                                    disabled={disabledSubtitleTracks[s.track]}\r\n                                    subtitle={subtitles[index]}\r\n                                    subtitleRef={subtitleRefs[index]}\r\n                                    onClickSubtitle={handleClick}\r\n                                    onCopySubtitle={handleCopy}\r\n                                />\r\n                            );\r\n                        })}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Paper square elevation={0} ref={containerRef} className={classes.container}>\r\n            {subtitleTable}\r\n        </Paper>\r\n    );\r\n}\r\n","import {\r\n    AnkiDialogRequestFromVideoMessage,\r\n    AnkiSettings,\r\n    AnkiSettingsToVideoMessage,\r\n    AppBarToggleMessageToVideoMessage,\r\n    AudioModel,\r\n    AudioTrackModel,\r\n    AudioTrackSelectedFromVideoMessage,\r\n    AudioTrackSelectedToVideoMessage,\r\n    CopyMessage,\r\n    CurrentTimeFromVideoMessage,\r\n    CurrentTimeToVideoMessage,\r\n    FinishedAnkiDialogRequestToVideoMessage,\r\n    HideSubtitlePlayerToggleToVideoMessage,\r\n    ImageModel,\r\n    MiscSettings,\r\n    MiscSettingsToVideoMessage,\r\n    OffsetFromVideoMessage,\r\n    PauseFromVideoMessage,\r\n    PlayFromVideoMessage,\r\n    PlayMode,\r\n    PlayModeMessage,\r\n    PostMineAction,\r\n    ReadyFromVideoMessage,\r\n    ReadyStateFromVideoMessage,\r\n    ReadyToVideoMessage,\r\n    SubtitleModel,\r\n    SubtitleSettings,\r\n    SubtitleSettingsToVideoMessage,\r\n    SubtitlesToVideoMessage,\r\n    ToggleSubtitleTrackInListFromVideoMessage,\r\n} from '@project/common';\r\nimport { VideoProtocol } from './VideoProtocol';\r\n\r\nexport default class VideoChannel {\r\n    private readonly protocol: VideoProtocol;\r\n    private time: number;\r\n    private isReady: boolean;\r\n    private readyCallbacks: ((paused: boolean) => void)[];\r\n    private playCallbacks: ((echo: boolean) => void)[];\r\n    private pauseCallbacks: ((echo: boolean) => void)[];\r\n    private audioTrackSelectedCallbacks: ((audioTrack: string) => void)[];\r\n    private currentTimeCallbacks: ((currentTime: number, echo: boolean) => void)[];\r\n    private exitCallbacks: (() => void)[];\r\n    private offsetCallbacks: ((offset: number) => void)[];\r\n    private popOutToggleCallbacks: (() => void)[];\r\n    private copyCallbacks: ((\r\n        subtitle: SubtitleModel,\r\n        surroundingSubtitles: SubtitleModel[],\r\n        audio: AudioModel | undefined,\r\n        image: ImageModel | undefined,\r\n        url: string | undefined,\r\n        postMineAction: PostMineAction,\r\n        fromVideo: boolean,\r\n        preventDuplicate: boolean,\r\n        id: string | undefined\r\n    ) => void)[];\r\n    private playModeCallbacks: ((mode: PlayMode) => void)[];\r\n    private hideSubtitlePlayerToggleCallbacks: (() => void)[];\r\n    private appBarToggleCallbacks: (() => void)[];\r\n    private ankiDialogRequestCallbacks: ((forwardToVideo: boolean) => void)[];\r\n    private toggleSubtitleTrackInListCallbacks: ((track: number) => void)[];\r\n\r\n    readyState: number;\r\n    oncanplay: ((ev: Event) => void) | null = null;\r\n    audioTracks?: AudioTrackModel[];\r\n    selectedAudioTrack?: string;\r\n    duration: number;\r\n\r\n    constructor(protocol: VideoProtocol) {\r\n        this.protocol = protocol;\r\n        this.time = 0;\r\n        this.duration = 0;\r\n        this.isReady = false;\r\n        this.readyState = 0;\r\n        this.selectedAudioTrack = undefined;\r\n        this.readyCallbacks = [];\r\n        this.playCallbacks = [];\r\n        this.pauseCallbacks = [];\r\n        this.currentTimeCallbacks = [];\r\n        this.audioTrackSelectedCallbacks = [];\r\n        this.exitCallbacks = [];\r\n        this.offsetCallbacks = [];\r\n        this.popOutToggleCallbacks = [];\r\n        this.copyCallbacks = [];\r\n        this.playModeCallbacks = [];\r\n        this.hideSubtitlePlayerToggleCallbacks = [];\r\n        this.appBarToggleCallbacks = [];\r\n        this.ankiDialogRequestCallbacks = [];\r\n        this.toggleSubtitleTrackInListCallbacks = [];\r\n\r\n        const that = this;\r\n\r\n        this.protocol.onMessage = (event) => {\r\n            switch (event.data.command) {\r\n                case 'ready':\r\n                    const readyMessage = event.data as ReadyFromVideoMessage;\r\n\r\n                    that.duration = readyMessage.duration;\r\n                    that.isReady = true;\r\n                    that.audioTracks = readyMessage.audioTracks;\r\n                    that.selectedAudioTrack = readyMessage.selectedAudioTrack;\r\n                    that.readyState = 4;\r\n                    that.time = readyMessage.currentTime;\r\n\r\n                    for (let callback of that.readyCallbacks) {\r\n                        callback(readyMessage.paused);\r\n                    }\r\n                    break;\r\n                case 'readyState':\r\n                    const readyStateMessage = event.data as ReadyStateFromVideoMessage;\r\n\r\n                    that.readyState = readyStateMessage.value;\r\n                    if (that.readyState === 4) {\r\n                        that.oncanplay?.(new Event('canplay'));\r\n                    }\r\n                    break;\r\n                case 'play':\r\n                    const playMessage = event.data as PlayFromVideoMessage;\r\n\r\n                    for (let callback of that.playCallbacks) {\r\n                        callback(playMessage.echo);\r\n                    }\r\n                    break;\r\n                case 'pause':\r\n                    const pauseMessage = event.data as PauseFromVideoMessage;\r\n\r\n                    for (let callback of that.pauseCallbacks) {\r\n                        callback(pauseMessage.echo);\r\n                    }\r\n                    break;\r\n                case 'audioTrackSelected':\r\n                    const audioTrackSelectedMessage = event.data as AudioTrackSelectedFromVideoMessage;\r\n\r\n                    for (let callback of that.audioTrackSelectedCallbacks) {\r\n                        that.selectedAudioTrack = audioTrackSelectedMessage.id;\r\n                        callback(audioTrackSelectedMessage.id);\r\n                    }\r\n                    break;\r\n                case 'currentTime':\r\n                    const currentTimeMessage = event.data as CurrentTimeFromVideoMessage;\r\n\r\n                    for (let callback of that.currentTimeCallbacks) {\r\n                        callback(currentTimeMessage.value, currentTimeMessage.echo);\r\n                    }\r\n                    break;\r\n                case 'exit':\r\n                    for (let callback of that.exitCallbacks) {\r\n                        callback();\r\n                    }\r\n                    break;\r\n                case 'offset':\r\n                    const offsetMessage = event.data as OffsetFromVideoMessage;\r\n\r\n                    for (let callback of that.offsetCallbacks) {\r\n                        callback(offsetMessage.value);\r\n                    }\r\n                    break;\r\n                case 'popOutToggle':\r\n                    for (let callback of that.popOutToggleCallbacks) {\r\n                        callback();\r\n                    }\r\n                    break;\r\n                case 'copy':\r\n                    for (let callback of that.copyCallbacks) {\r\n                        const copyMessage = event.data as CopyMessage;\r\n\r\n                        callback(\r\n                            copyMessage.subtitle,\r\n                            copyMessage.surroundingSubtitles,\r\n                            copyMessage.audio,\r\n                            copyMessage.image,\r\n                            copyMessage.url,\r\n                            copyMessage.postMineAction ?? PostMineAction.none,\r\n                            true,\r\n                            copyMessage.preventDuplicate ?? false,\r\n                            copyMessage.id\r\n                        );\r\n                    }\r\n                    break;\r\n                case 'playMode':\r\n                    for (let callback of that.playModeCallbacks) {\r\n                        const playModeMessage = event.data as PlayModeMessage;\r\n                        callback(playModeMessage.playMode);\r\n                    }\r\n                    break;\r\n                case 'hideSubtitlePlayerToggle':\r\n                    for (let callback of that.hideSubtitlePlayerToggleCallbacks) {\r\n                        callback();\r\n                    }\r\n                    break;\r\n                case 'appBarToggle':\r\n                    for (let callback of that.appBarToggleCallbacks) {\r\n                        callback();\r\n                    }\r\n                    break;\r\n                case 'sync':\r\n                    // ignore\r\n                    break;\r\n                case 'syncv2':\r\n                    // ignore\r\n                    break;\r\n                case 'ankiDialogRequest':\r\n                    const ankiDialogRequestMessage = event.data as AnkiDialogRequestFromVideoMessage;\r\n\r\n                    for (let callback of that.ankiDialogRequestCallbacks) {\r\n                        callback(ankiDialogRequestMessage.forwardToVideo);\r\n                    }\r\n                    break;\r\n                case 'toggleSubtitleTrackInList':\r\n                    const toggleSubtitleTrackInListMessage = event.data as ToggleSubtitleTrackInListFromVideoMessage;\r\n\r\n                    for (const callback of that.toggleSubtitleTrackInListCallbacks) {\r\n                        callback(toggleSubtitleTrackInListMessage.track);\r\n                    }\r\n                    break;\r\n                case 'playbackRate':\r\n                    // ignore for now\r\n                    break;\r\n                default:\r\n                    console.error('Unrecognized event ' + event.data.command);\r\n            }\r\n        };\r\n    }\r\n\r\n    get currentTime() {\r\n        return this.time;\r\n    }\r\n\r\n    set currentTime(value: number) {\r\n        this.time = value;\r\n        this.readyState = 3;\r\n        const message: CurrentTimeToVideoMessage = { command: 'currentTime', value: this.time };\r\n        this.protocol.postMessage(message);\r\n    }\r\n\r\n    onReady(callback: (paused: boolean) => void) {\r\n        if (this.isReady) {\r\n            callback(false);\r\n        }\r\n        this.readyCallbacks.push(callback);\r\n    }\r\n\r\n    onPlay(callback: (echo: boolean) => void) {\r\n        this.playCallbacks.push(callback);\r\n    }\r\n\r\n    onPause(callback: (echo: boolean) => void) {\r\n        this.pauseCallbacks.push(callback);\r\n    }\r\n\r\n    onCurrentTime(callback: (currentTime: number, echo: boolean) => void) {\r\n        this.currentTimeCallbacks.push(callback);\r\n    }\r\n\r\n    onAudioTrackSelected(callback: (id: string) => void) {\r\n        this.audioTrackSelectedCallbacks.push(callback);\r\n    }\r\n\r\n    onExit(callback: () => void) {\r\n        this.exitCallbacks.push(callback);\r\n    }\r\n\r\n    onOffset(callback: (offset: number) => void) {\r\n        this.offsetCallbacks.push(callback);\r\n    }\r\n\r\n    onPopOutToggle(callback: () => void) {\r\n        this.popOutToggleCallbacks.push(callback);\r\n    }\r\n\r\n    onCopy(\r\n        callback: (\r\n            subtitle: SubtitleModel,\r\n            surroundingSubtitles: SubtitleModel[],\r\n            audio: AudioModel | undefined,\r\n            image: ImageModel | undefined,\r\n            url: string | undefined,\r\n            postMineAction: PostMineAction,\r\n            fromVideo: boolean,\r\n            preventDuplicate: boolean,\r\n            id: string | undefined\r\n        ) => void\r\n    ) {\r\n        this.copyCallbacks.push(callback);\r\n    }\r\n\r\n    onPlayMode(callback: (playMode: PlayMode) => void) {\r\n        this.playModeCallbacks.push(callback);\r\n    }\r\n\r\n    onHideSubtitlePlayerToggle(callback: () => void) {\r\n        this.hideSubtitlePlayerToggleCallbacks.push(callback);\r\n    }\r\n\r\n    onAppBarToggle(callback: () => void) {\r\n        this.appBarToggleCallbacks.push(callback);\r\n    }\r\n\r\n    onAnkiDialogRequest(callback: (forwardToVideo: boolean) => void) {\r\n        this.ankiDialogRequestCallbacks.push(callback);\r\n    }\r\n\r\n    onToggleSubtitleTrackInList(callback: (track: number) => void) {\r\n        this.toggleSubtitleTrackInListCallbacks.push(callback);\r\n    }\r\n\r\n    ready(duration: number) {\r\n        const message: ReadyToVideoMessage = { command: 'ready', duration: duration };\r\n        this.protocol.postMessage(message);\r\n    }\r\n\r\n    init() {\r\n        this.protocol.postMessage({ command: 'init' });\r\n    }\r\n\r\n    // Return a promise to implement the analogous HTMLMediaElement method\r\n    play(): Promise<void> {\r\n        this.protocol.postMessage({ command: 'play' });\r\n        return new Promise((resolve, reject) => resolve());\r\n    }\r\n\r\n    pause() {\r\n        this.protocol.postMessage({ command: 'pause' });\r\n    }\r\n\r\n    audioTrackSelected(id: string) {\r\n        const message: AudioTrackSelectedToVideoMessage = { command: 'audioTrackSelected', id: id };\r\n        this.protocol.postMessage(message);\r\n    }\r\n\r\n    subtitles(subtitles: SubtitleModel[], subtitleFileNames: string[]) {\r\n        this.protocol.postMessage({\r\n            command: 'subtitles',\r\n            value: subtitles,\r\n            name: subtitleFileNames.length > 0 ? subtitleFileNames[0] : null,\r\n            names: subtitleFileNames,\r\n        } as SubtitlesToVideoMessage);\r\n    }\r\n\r\n    subtitleSettings(settings: SubtitleSettings) {\r\n        const message: SubtitleSettingsToVideoMessage = { command: 'subtitleSettings', value: settings };\r\n        this.protocol.postMessage(message);\r\n    }\r\n\r\n    playMode(playMode: PlayMode) {\r\n        const message: PlayModeMessage = {\r\n            command: 'playMode',\r\n            playMode: playMode,\r\n        };\r\n        this.protocol.postMessage(message);\r\n    }\r\n\r\n    hideSubtitlePlayerToggle(hidden: boolean) {\r\n        const message: HideSubtitlePlayerToggleToVideoMessage = {\r\n            command: 'hideSubtitlePlayerToggle',\r\n            value: hidden,\r\n        };\r\n        this.protocol.postMessage(message);\r\n    }\r\n\r\n    appBarToggle(hidden: boolean) {\r\n        const message: AppBarToggleMessageToVideoMessage = {\r\n            command: 'appBarToggle',\r\n            value: hidden,\r\n        };\r\n        this.protocol.postMessage(message);\r\n    }\r\n\r\n    ankiDialogRequest() {\r\n        this.protocol.postMessage({ command: 'ankiDialogRequest' });\r\n    }\r\n\r\n    finishedAnkiDialogRequest(resume: boolean) {\r\n        const message: FinishedAnkiDialogRequestToVideoMessage = {\r\n            command: 'finishedAnkiDialogRequest',\r\n            resume: resume,\r\n        };\r\n        this.protocol.postMessage(message);\r\n    }\r\n\r\n    ankiSettings(settings: AnkiSettings) {\r\n        const message: AnkiSettingsToVideoMessage = { command: 'ankiSettings', value: settings };\r\n        this.protocol.postMessage(message);\r\n    }\r\n\r\n    miscSettings(settings: MiscSettings) {\r\n        const message: MiscSettingsToVideoMessage = { command: 'miscSettings', value: settings };\r\n        this.protocol.postMessage(message);\r\n    }\r\n\r\n    close() {\r\n        this.protocol.postMessage({ command: 'close' });\r\n        this.protocol.close();\r\n        this.readyCallbacks = [];\r\n        this.playCallbacks = [];\r\n        this.pauseCallbacks = [];\r\n        this.currentTimeCallbacks = [];\r\n        this.audioTrackSelectedCallbacks = [];\r\n        this.exitCallbacks = [];\r\n        this.offsetCallbacks = [];\r\n        this.popOutToggleCallbacks = [];\r\n        this.copyCallbacks = [];\r\n        this.playModeCallbacks = [];\r\n        this.hideSubtitlePlayerToggleCallbacks = [];\r\n        this.appBarToggleCallbacks = [];\r\n        this.ankiDialogRequestCallbacks = [];\r\n        this.toggleSubtitleTrackInListCallbacks = [];\r\n    }\r\n}\r\n","import React, { useEffect, useState, useMemo, useCallback, useRef, MutableRefObject } from 'react';\r\nimport { makeStyles, Theme } from '@material-ui/core/styles';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport {\r\n    AsbplayerSettingsProvider,\r\n    AudioModel,\r\n    AudioTrackModel,\r\n    AutoPausePreference,\r\n    ImageModel,\r\n    KeyBindings,\r\n    mockSurroundingSubtitles,\r\n    PlayMode,\r\n    PostMineAction,\r\n    SubtitleModel,\r\n    VideoTabModel,\r\n} from '@project/common';\r\nimport { timeDurationDisplay } from '../services/Util';\r\nimport BroadcastChannelVideoProtocol from '../services/BroadcastChannelVideoProtocol';\r\nimport ChromeTabVideoProtocol from '../services/ChromeTabVideoProtocol';\r\nimport Clock from '../services/Clock';\r\nimport Controls, { Point } from './Controls';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport MediaAdapter, { MediaElement } from '../services/MediaAdapter';\r\nimport SubtitlePlayer, { DisplaySubtitleModel } from './SubtitlePlayer';\r\nimport VideoChannel from '../services/VideoChannel';\r\nimport ChromeExtension from '../services/ChromeExtension';\r\nimport SubtitleReader from '../services/SubtitleReader';\r\n\r\ninterface StylesProps {\r\n    appBarHidden: boolean;\r\n}\r\n\r\nconst useStyles = makeStyles<Theme, StylesProps>({\r\n    root: ({ appBarHidden }) => ({\r\n        height: appBarHidden ? '100vh' : 'calc(100vh - 64px)',\r\n        position: 'relative',\r\n        overflowX: 'hidden',\r\n    }),\r\n    container: {\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n    videoFrame: {\r\n        width: '100%',\r\n        height: '100%',\r\n        border: 0,\r\n        display: 'block',\r\n    },\r\n});\r\n\r\nfunction trackLength(\r\n    audioRef: MutableRefObject<HTMLAudioElement | null>,\r\n    videoRef: MutableRefObject<MediaElement | undefined>,\r\n    subtitles: SubtitleModel[] | undefined,\r\n    useOffset?: boolean\r\n) {\r\n    let subtitlesLength;\r\n    if (subtitles && subtitles.length > 0) {\r\n        if (useOffset) {\r\n            subtitlesLength = subtitles[subtitles.length - 1].end;\r\n        } else {\r\n            subtitlesLength = subtitles[subtitles.length - 1].originalEnd;\r\n        }\r\n    } else {\r\n        subtitlesLength = 0;\r\n    }\r\n\r\n    const audioLength = audioRef.current && audioRef.current.duration ? 1000 * audioRef.current.duration : 0;\r\n\r\n    const videoLength = videoRef.current && videoRef.current.duration ? 1000 * videoRef.current.duration : 0;\r\n\r\n    return Math.max(videoLength, Math.max(subtitlesLength, audioLength));\r\n}\r\n\r\nexport interface MediaSources {\r\n    subtitleFiles: File[];\r\n    audioFile?: File;\r\n    audioFileUrl?: string;\r\n    videoFile?: File;\r\n    videoFileUrl?: string;\r\n}\r\n\r\nexport interface AnkiDialogFinishedRequest {\r\n    resume: boolean;\r\n    timestamp: number;\r\n}\r\n\r\ninterface PlayerProps {\r\n    sources: MediaSources;\r\n    subtitleReader: SubtitleReader;\r\n    settingsProvider: AsbplayerSettingsProvider;\r\n    extension: ChromeExtension;\r\n    videoFrameRef: MutableRefObject<HTMLIFrameElement | null>;\r\n    drawerOpen: boolean;\r\n    appBarHidden: boolean;\r\n    videoPopOut: boolean;\r\n    tab?: VideoTabModel;\r\n    availableTabs: VideoTabModel[];\r\n    ankiDialogRequestToVideo?: number;\r\n    ankiDialogRequested: boolean;\r\n    ankiDialogFinishedRequest: AnkiDialogFinishedRequest;\r\n    onError: (error: string) => void;\r\n    onUnloadAudio: (url: string) => void;\r\n    onUnloadVideo: (url: string) => void;\r\n    onCopy: (\r\n        subtitle: SubtitleModel,\r\n        surroundingSubtitles: SubtitleModel[],\r\n        audioFile: File | undefined,\r\n        videoFile: File | undefined,\r\n        subtitleFile: File | undefined,\r\n        mediaTimestamp: number | undefined,\r\n        audioTrack: string | undefined,\r\n        audio: AudioModel | undefined,\r\n        image: ImageModel | undefined,\r\n        url: string | undefined,\r\n        postMineAction: PostMineAction | undefined,\r\n        fromVideo: boolean | undefined,\r\n        preventDuplicate: boolean | undefined,\r\n        id: string | undefined\r\n    ) => void;\r\n    onLoaded: () => void;\r\n    onTabSelected: (tab: VideoTabModel) => void;\r\n    onAnkiDialogRequest: (forwardToVideo?: boolean) => void;\r\n    onAppBarToggle: () => void;\r\n    onVideoPopOut: () => void;\r\n    onAutoPauseModeChangedViaBind: (playMode: PlayMode) => void;\r\n    disableKeyEvents: boolean;\r\n    jumpToSubtitle?: SubtitleModel;\r\n    rewindSubtitle?: SubtitleModel;\r\n}\r\n\r\nexport default function Player({\r\n    sources: { subtitleFiles, audioFile, audioFileUrl, videoFile, videoFileUrl },\r\n    subtitleReader,\r\n    settingsProvider,\r\n    extension,\r\n    videoFrameRef,\r\n    drawerOpen,\r\n    appBarHidden,\r\n    videoPopOut,\r\n    tab,\r\n    availableTabs,\r\n    ankiDialogRequestToVideo,\r\n    ankiDialogRequested,\r\n    ankiDialogFinishedRequest,\r\n    onError,\r\n    onUnloadAudio,\r\n    onUnloadVideo,\r\n    onCopy,\r\n    onLoaded,\r\n    onTabSelected,\r\n    onAnkiDialogRequest,\r\n    onAppBarToggle,\r\n    onVideoPopOut,\r\n    onAutoPauseModeChangedViaBind,\r\n    disableKeyEvents,\r\n    jumpToSubtitle,\r\n    rewindSubtitle,\r\n}: PlayerProps) {\r\n    const [subtitles, setSubtitles] = useState<DisplaySubtitleModel[]>();\r\n    const subtitlesRef = useRef<SubtitleModel[]>();\r\n    subtitlesRef.current = subtitles;\r\n    const [loadingSubtitles, setLoadingSubtitles] = useState<boolean>(false);\r\n    const [playing, setPlaying] = useState<boolean>(false);\r\n    const [lastJumpToTopTimestamp, setLastJumpToTopTimestamp] = useState<number>(0);\r\n    const [offset, setOffset] = useState<number>(0);\r\n    const playingRef = useRef<boolean>();\r\n    playingRef.current = playing;\r\n    const [, updateState] = useState<any>();\r\n    const [audioTracks, setAudioTracks] = useState<AudioTrackModel[]>();\r\n    const [selectedAudioTrack, setSelectedAudioTrack] = useState<string>();\r\n    const [channelId, setChannelId] = useState<string>();\r\n    const [, setResumeOnFinishedAnkiDialogRequest] = useState<boolean>(false);\r\n    const [hideSubtitlePlayer, setHideSubtitlePlayer] = useState<boolean>(false);\r\n    const hideSubtitlePlayerRef = useRef<boolean>();\r\n    hideSubtitlePlayerRef.current = hideSubtitlePlayer;\r\n    const [disabledSubtitleTracks, setDisabledSubtitleTracks] = useState<{ [track: number]: boolean }>({});\r\n    const [playMode, setPlayMode] = useState<PlayMode>(PlayMode.normal);\r\n    const playModeRef = useRef<PlayMode>();\r\n    playModeRef.current = playMode;\r\n    const forceUpdate = useCallback(() => updateState({}), []);\r\n    const mousePositionRef = useRef<Point>({ x: 0, y: 0 });\r\n    const audioRef = useRef<HTMLAudioElement>(null);\r\n    const videoRef = useRef<MediaElement>();\r\n    const mediaAdapter = useMemo(() => {\r\n        if (audioFileUrl) {\r\n            return new MediaAdapter(audioRef);\r\n        } else if (videoFileUrl || tab) {\r\n            return new MediaAdapter(videoRef);\r\n        }\r\n\r\n        return new MediaAdapter({ current: null });\r\n    }, [audioFileUrl, videoFileUrl, tab]);\r\n    const clock = useMemo<Clock>(() => new Clock(), []);\r\n    const classes = useStyles({ appBarHidden });\r\n    const lengthRef = useRef<number>(0);\r\n    lengthRef.current = trackLength(audioRef, videoRef, subtitles, true);\r\n\r\n    const seek = useCallback(\r\n        async (time: number, clock: Clock, forwardToMedia: boolean) => {\r\n            clock.setTime(time);\r\n            forceUpdate();\r\n\r\n            if (forwardToMedia) {\r\n                await mediaAdapter.seek(time / 1000);\r\n            }\r\n        },\r\n        [forceUpdate, mediaAdapter]\r\n    );\r\n\r\n    const applyOffset = useCallback(\r\n        (offset: number, forwardToVideo: boolean) => {\r\n            setOffset(offset);\r\n\r\n            setSubtitles((subtitles) => {\r\n                if (!subtitles) {\r\n                    return;\r\n                }\r\n\r\n                const length = subtitles.length > 0 ? subtitles[subtitles.length - 1].end + offset : 0;\r\n\r\n                const newSubtitles = subtitles.map((s) => ({\r\n                    text: s.text,\r\n                    textImage: s.textImage,\r\n                    start: s.originalStart + offset,\r\n                    originalStart: s.originalStart,\r\n                    end: s.originalEnd + offset,\r\n                    originalEnd: s.originalEnd,\r\n                    displayTime: timeDurationDisplay(s.originalStart + offset, length),\r\n                    track: s.track,\r\n                }));\r\n\r\n                if (forwardToVideo) {\r\n                    if (videoRef.current instanceof VideoChannel) {\r\n                        videoRef.current.subtitles(\r\n                            newSubtitles,\r\n                            subtitleFiles.map((f) => f.name)\r\n                        );\r\n                    }\r\n                }\r\n\r\n                return newSubtitles;\r\n            });\r\n        },\r\n        [subtitleFiles]\r\n    );\r\n\r\n    useEffect(() => {\r\n        let channel: VideoChannel | undefined = undefined;\r\n        let channelClosed = false;\r\n\r\n        async function init() {\r\n            if (videoRef.current instanceof VideoChannel) {\r\n                videoRef.current.close();\r\n            }\r\n            videoRef.current = undefined;\r\n            clock.setTime(0);\r\n            clock.stop();\r\n            setOffset(0);\r\n            setPlaying(false);\r\n            setAudioTracks(undefined);\r\n            setSelectedAudioTrack(undefined);\r\n            setPlayMode(PlayMode.normal);\r\n\r\n            if (audioRef.current) {\r\n                audioRef.current.currentTime = 0;\r\n                audioRef.current.pause();\r\n            }\r\n\r\n            let subtitles: DisplaySubtitleModel[] | undefined;\r\n\r\n            if (subtitleFiles.length > 0) {\r\n                setLoadingSubtitles(true);\r\n\r\n                try {\r\n                    const nodes = await subtitleReader.subtitles(subtitleFiles);\r\n                    const length = nodes.length > 0 ? nodes[nodes.length - 1].end : 0;\r\n                    subtitles = nodes.map((s) => ({\r\n                        text: s.text,\r\n                        textImage: s.textImage,\r\n                        start: s.start,\r\n                        originalStart: s.start,\r\n                        end: s.end,\r\n                        originalEnd: s.end,\r\n                        displayTime: timeDurationDisplay(s.start, length),\r\n                        track: s.track,\r\n                    }));\r\n\r\n                    setSubtitles(subtitles);\r\n                    setLastJumpToTopTimestamp(Date.now());\r\n                } catch (e) {\r\n                    if (e instanceof Error) {\r\n                        onError(e.message);\r\n                    } else {\r\n                        onError(String(e));\r\n                    }\r\n                } finally {\r\n                    setLoadingSubtitles(false);\r\n                }\r\n            } else {\r\n                subtitles = undefined;\r\n            }\r\n\r\n            if (audioFileUrl) {\r\n                await mediaAdapter.onReady();\r\n                forceUpdate();\r\n            } else if (videoFileUrl || tab) {\r\n                if (channelClosed) {\r\n                    return;\r\n                }\r\n\r\n                if (videoFileUrl) {\r\n                    const channelId = uuidv4();\r\n                    channel = new VideoChannel(new BroadcastChannelVideoProtocol(channelId));\r\n                    setChannelId(channelId);\r\n                } else if (tab) {\r\n                    channel = new VideoChannel(new ChromeTabVideoProtocol(tab.id, tab.src, extension));\r\n                    channel.init();\r\n                } else {\r\n                    // Not possible\r\n                    // But throw error so typescript recognizes channel as defined\r\n                    throw new Error('Unreachable code');\r\n                }\r\n\r\n                videoRef.current = channel;\r\n                let subscribed = false;\r\n\r\n                channel.onExit(() => videoFileUrl && onUnloadVideo(videoFileUrl));\r\n                channel.onPopOutToggle(() => onVideoPopOut());\r\n                channel.onHideSubtitlePlayerToggle(() => {\r\n                    setHideSubtitlePlayer((hidden) => {\r\n                        channel?.hideSubtitlePlayerToggle(!hidden);\r\n                        return !hidden;\r\n                    });\r\n                });\r\n                channel.onAppBarToggle(() => {\r\n                    onAppBarToggle();\r\n                });\r\n                channel.onReady((paused) => {\r\n                    lengthRef.current = trackLength(audioRef, videoRef, subtitlesRef.current);\r\n                    channel?.ready(lengthRef.current);\r\n\r\n                    if (subtitlesRef.current) {\r\n                        channel?.subtitleSettings(settingsProvider.subtitleSettings);\r\n                        channel?.subtitles(\r\n                            subtitlesRef.current,\r\n                            subtitleFiles.map((f) => f.name)\r\n                        );\r\n                    }\r\n\r\n                    channel?.ankiSettings(settingsProvider.ankiSettings);\r\n                    channel?.miscSettings(settingsProvider.miscSettings);\r\n                    channel?.playMode(playModeRef.current!);\r\n                    channel?.hideSubtitlePlayerToggle(hideSubtitlePlayerRef.current ?? false);\r\n\r\n                    if (channel?.audioTracks && channel?.audioTracks?.length > 1) {\r\n                        setAudioTracks(channel?.audioTracks);\r\n                        setSelectedAudioTrack(channel?.selectedAudioTrack);\r\n                    } else {\r\n                        setAudioTracks(undefined);\r\n                        setSelectedAudioTrack(undefined);\r\n                    }\r\n\r\n                    if (videoRef.current) {\r\n                        clock.setTime(videoRef.current.currentTime * 1000);\r\n                    }\r\n\r\n                    if (paused) {\r\n                        clock.stop();\r\n                    } else {\r\n                        clock.start();\r\n                    }\r\n\r\n                    setPlaying(!paused);\r\n\r\n                    if (!subscribed) {\r\n                        channel?.onPlay((forwardToMedia) => play(clock, mediaAdapter, forwardToMedia));\r\n                        channel?.onPause((forwardToMedia) => pause(clock, mediaAdapter, forwardToMedia));\r\n                        channel?.onOffset((offset) => applyOffset(Math.max(-lengthRef.current ?? 0, offset), false));\r\n                        channel?.onCopy(\r\n                            (\r\n                                subtitle,\r\n                                surroundingSubtitles,\r\n                                audio,\r\n                                image,\r\n                                url,\r\n                                postMineAction,\r\n                                fromVideo,\r\n                                preventDuplicate,\r\n                                id\r\n                            ) =>\r\n                                onCopy(\r\n                                    subtitle,\r\n                                    surroundingSubtitles,\r\n                                    audioFile,\r\n                                    videoFile,\r\n                                    subtitle ? subtitleFiles[subtitle.track] : undefined,\r\n                                    clock.time(lengthRef.current),\r\n                                    channel?.selectedAudioTrack,\r\n                                    audio,\r\n                                    image,\r\n                                    url,\r\n                                    postMineAction,\r\n                                    fromVideo,\r\n                                    preventDuplicate,\r\n                                    id\r\n                                )\r\n                        );\r\n                        channel?.onPlayMode((playMode) => {\r\n                            setPlayMode(playMode);\r\n                            channel?.playMode(playMode);\r\n                        });\r\n                        channel?.onCurrentTime(async (currentTime, forwardToMedia) => {\r\n                            if (playingRef.current) {\r\n                                clock.stop();\r\n                            }\r\n\r\n                            await seek(currentTime * 1000, clock, forwardToMedia);\r\n\r\n                            if (playingRef.current) {\r\n                                clock.start();\r\n                            }\r\n                        });\r\n                        channel?.onAudioTrackSelected(async (id) => {\r\n                            if (playingRef.current) {\r\n                                clock.stop();\r\n                            }\r\n\r\n                            await mediaAdapter.onReady();\r\n                            if (playingRef.current) {\r\n                                clock.start();\r\n                            }\r\n\r\n                            setSelectedAudioTrack(id);\r\n                        });\r\n                        channel?.onAnkiDialogRequest((forwardToVideo) => onAnkiDialogRequest(forwardToVideo));\r\n                        channel?.onToggleSubtitleTrackInList((track) =>\r\n                            setDisabledSubtitleTracks((tracks) => {\r\n                                const newTracks = { ...tracks };\r\n                                newTracks[track] = !tracks[track];\r\n                                return newTracks;\r\n                            })\r\n                        );\r\n\r\n                        subscribed = true;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        init().then(() => onLoaded());\r\n\r\n        return () => {\r\n            channel?.close();\r\n            channelClosed = true;\r\n        };\r\n    }, [\r\n        subtitleReader,\r\n        extension,\r\n        settingsProvider,\r\n        clock,\r\n        mediaAdapter,\r\n        seek,\r\n        onLoaded,\r\n        onError,\r\n        onUnloadVideo,\r\n        onCopy,\r\n        onAnkiDialogRequest,\r\n        onAppBarToggle,\r\n        onVideoPopOut,\r\n        subtitleFiles,\r\n        audioFile,\r\n        audioFileUrl,\r\n        videoFile,\r\n        videoFileUrl,\r\n        tab,\r\n        forceUpdate,\r\n        videoFrameRef,\r\n        applyOffset,\r\n    ]);\r\n\r\n    function play(clock: Clock, mediaAdapter: MediaAdapter, forwardToMedia: boolean) {\r\n        setPlaying(true);\r\n        clock.start();\r\n\r\n        if (forwardToMedia) {\r\n            mediaAdapter.play();\r\n        }\r\n    }\r\n\r\n    function pause(clock: Clock, mediaAdapter: MediaAdapter, forwardToMedia: boolean) {\r\n        setPlaying(false);\r\n        clock.stop();\r\n\r\n        if (forwardToMedia) {\r\n            mediaAdapter.pause();\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (ankiDialogRequestToVideo && videoRef.current instanceof VideoChannel) {\r\n            videoRef.current.ankiDialogRequest();\r\n        }\r\n    }, [ankiDialogRequestToVideo]);\r\n\r\n    useEffect(() => {\r\n        if (ankiDialogFinishedRequest && ankiDialogFinishedRequest.timestamp > 0) {\r\n            if (videoRef.current instanceof VideoChannel) {\r\n                videoRef.current.finishedAnkiDialogRequest(ankiDialogFinishedRequest.resume);\r\n            }\r\n\r\n            setResumeOnFinishedAnkiDialogRequest((resumeOnFinishedAnkiDialogRequest) => {\r\n                if (resumeOnFinishedAnkiDialogRequest && ankiDialogFinishedRequest.resume) {\r\n                    play(clock, mediaAdapter, true);\r\n                }\r\n\r\n                return false;\r\n            });\r\n        }\r\n    }, [ankiDialogFinishedRequest, clock, mediaAdapter]);\r\n\r\n    useEffect(() => {\r\n        if (ankiDialogRequested && playingRef.current) {\r\n            pause(clock, mediaAdapter, true);\r\n            setResumeOnFinishedAnkiDialogRequest(true);\r\n        }\r\n    }, [ankiDialogRequested, clock, mediaAdapter]);\r\n\r\n    useEffect(() => {\r\n        if (playMode !== PlayMode.condensed) {\r\n            return;\r\n        }\r\n\r\n        if (!subtitles || subtitles.length === 0) {\r\n            return;\r\n        }\r\n\r\n        let seeking = false;\r\n        let expectedSeekTime = 1000;\r\n\r\n        const interval = setInterval(async () => {\r\n            const length = lengthRef.current;\r\n\r\n            if (!length) {\r\n                return;\r\n            }\r\n\r\n            const progress = clock.progress(length);\r\n\r\n            let currentOrNextIndex = 0;\r\n            let currentIndex = -1;\r\n\r\n            for (let i = subtitles.length - 1; i >= 0; --i) {\r\n                const s = subtitles[i];\r\n                const start = s.start / length;\r\n                const end = s.end / length;\r\n\r\n                if (progress >= start) {\r\n                    if (progress < end) {\r\n                        currentIndex = i;\r\n                        currentOrNextIndex = i;\r\n                    } else {\r\n                        currentOrNextIndex = Math.min(subtitles.length - 1, i + 1);\r\n                    }\r\n\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (currentIndex !== currentOrNextIndex) {\r\n                const nextSubtitle = subtitles[currentOrNextIndex];\r\n\r\n                if (nextSubtitle.start - progress * length < expectedSeekTime + 500) {\r\n                    return;\r\n                }\r\n\r\n                if (playingRef.current) {\r\n                    clock.stop();\r\n                }\r\n\r\n                if (!seeking) {\r\n                    seeking = true;\r\n                    const t0 = Date.now();\r\n                    await seek(nextSubtitle.start, clock, true);\r\n                    expectedSeekTime = Date.now() - t0;\r\n                    seeking = false;\r\n                }\r\n\r\n                if (playingRef.current) {\r\n                    clock.start();\r\n                }\r\n            }\r\n        }, 100);\r\n\r\n        return () => clearInterval(interval);\r\n    }, [subtitles, playMode, clock, seek]);\r\n\r\n    const handleOnStartedShowingSubtitle = useCallback(() => {\r\n        if (playMode !== PlayMode.autoPause || settingsProvider.autoPausePreference !== AutoPausePreference.atStart) {\r\n            return;\r\n        }\r\n\r\n        pause(clock, mediaAdapter, true);\r\n    }, [playMode, clock, mediaAdapter, settingsProvider]);\r\n\r\n    const handleOnWillStopShowingSubtitle = useCallback(() => {\r\n        if (playMode !== PlayMode.autoPause || settingsProvider.autoPausePreference !== AutoPausePreference.atEnd) {\r\n            return;\r\n        }\r\n\r\n        pause(clock, mediaAdapter, true);\r\n    }, [playMode, clock, mediaAdapter, settingsProvider]);\r\n\r\n    useEffect(() => {\r\n        if (videoPopOut && channelId && videoFileUrl) {\r\n            window.open(\r\n                process.env.PUBLIC_URL +\r\n                    '/?video=' +\r\n                    encodeURIComponent(videoFileUrl) +\r\n                    '&channel=' +\r\n                    channelId +\r\n                    '&popout=true',\r\n                'asbplayer-video-' + videoFileUrl,\r\n                'resizable,width=800,height=450'\r\n            );\r\n        }\r\n\r\n        setLastJumpToTopTimestamp(Date.now());\r\n    }, [videoPopOut, channelId, videoFileUrl, videoFrameRef]);\r\n\r\n    const handlePlay = useCallback(() => play(clock, mediaAdapter, true), [clock, mediaAdapter]);\r\n    const handlePause = useCallback(() => pause(clock, mediaAdapter, true), [clock, mediaAdapter]);\r\n    const handleSeek = useCallback(\r\n        async (progress: number) => {\r\n            if (!lengthRef.current) {\r\n                return;\r\n            }\r\n\r\n            if (playingRef.current) {\r\n                clock.stop();\r\n            }\r\n\r\n            await seek(progress * lengthRef.current, clock, true);\r\n\r\n            if (playingRef.current) {\r\n                clock.start();\r\n            }\r\n        },\r\n        [clock, seek]\r\n    );\r\n\r\n    const handleSeekToSubtitle = useCallback(\r\n        async (time: number, shouldPlay: boolean) => {\r\n            if (!shouldPlay) {\r\n                pause(clock, mediaAdapter, true);\r\n            }\r\n\r\n            if (playingRef.current) {\r\n                clock.stop();\r\n            }\r\n\r\n            await seek(time, clock, true);\r\n\r\n            if (shouldPlay && !playingRef.current) {\r\n                // play method will start the clock again\r\n                play(clock, mediaAdapter, true);\r\n            }\r\n        },\r\n        [clock, seek, mediaAdapter]\r\n    );\r\n\r\n    const handleCopyFromSubtitlePlayer = useCallback(\r\n        (\r\n            subtitle: SubtitleModel,\r\n            surroundingSubtitles: SubtitleModel[],\r\n            postMineAction: PostMineAction,\r\n            preventDuplicate: boolean\r\n        ) => {\r\n            onCopy(\r\n                subtitle,\r\n                surroundingSubtitles,\r\n                audioFile,\r\n                videoFile,\r\n                subtitleFiles[subtitle.track],\r\n                clock.time(lengthRef.current),\r\n                selectedAudioTrack,\r\n                undefined,\r\n                undefined,\r\n                undefined,\r\n                postMineAction,\r\n                false,\r\n                preventDuplicate,\r\n                undefined\r\n            );\r\n        },\r\n        [clock, onCopy, audioFile, videoFile, subtitleFiles, selectedAudioTrack]\r\n    );\r\n\r\n    const handleMouseMove = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\r\n        mousePositionRef.current.x = e.screenX;\r\n        mousePositionRef.current.y = e.screenY;\r\n    }, []);\r\n\r\n    const handleAudioTrackSelected = useCallback(\r\n        async (id: string) => {\r\n            if (videoRef.current instanceof VideoChannel) {\r\n                videoRef.current.audioTrackSelected(id);\r\n            }\r\n\r\n            pause(clock, mediaAdapter, true);\r\n\r\n            await seek(0, clock, true);\r\n\r\n            if (playingRef.current) {\r\n                play(clock, mediaAdapter, true);\r\n            }\r\n        },\r\n        [clock, mediaAdapter, seek]\r\n    );\r\n\r\n    const handleOffsetChange = useCallback(\r\n        (offset: number) => {\r\n            applyOffset(Math.max(-lengthRef.current ?? 0, offset), true);\r\n        },\r\n        [applyOffset]\r\n    );\r\n\r\n    const handleVolumeChange = useCallback((volume: number) => {\r\n        if (audioRef.current instanceof HTMLMediaElement) {\r\n            audioRef.current.volume = volume;\r\n        }\r\n    }, []);\r\n\r\n    const handlePlayMode = useCallback((playMode: PlayMode) => setPlayMode(playMode), []);\r\n\r\n    const handleToggleSubtitleTrack = useCallback(\r\n        (track: number) =>\r\n            setDisabledSubtitleTracks((tracks) => {\r\n                const newTracks = { ...tracks };\r\n                newTracks[track] = !tracks[track];\r\n                return newTracks;\r\n            }),\r\n        []\r\n    );\r\n\r\n    useEffect(() => {\r\n        if (tab) {\r\n            return;\r\n        }\r\n\r\n        const interval = setInterval(async () => {\r\n            const length = lengthRef.current;\r\n            const progress = clock.progress(length);\r\n\r\n            if (progress >= 1) {\r\n                pause(clock, mediaAdapter, true);\r\n                await seek(0, clock, true);\r\n                setLastJumpToTopTimestamp(Date.now());\r\n            }\r\n        }, 1000);\r\n\r\n        return () => clearInterval(interval);\r\n    }, [clock, subtitles, mediaAdapter, seek, tab]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindPlay(\r\n            (event) => {\r\n                event.preventDefault();\r\n\r\n                if (playing) {\r\n                    pause(clock, mediaAdapter, true);\r\n                } else {\r\n                    play(clock, mediaAdapter, true);\r\n                }\r\n            },\r\n            () => disableKeyEvents\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [playing, clock, mediaAdapter, disableKeyEvents]);\r\n\r\n    useEffect(() => {\r\n        return KeyBindings.bindAutoPause(\r\n            (event) => {\r\n                if (tab) {\r\n                    return;\r\n                }\r\n\r\n                event.preventDefault();\r\n                const newPlayMode = playMode === PlayMode.autoPause ? PlayMode.normal : PlayMode.autoPause;\r\n                setPlayMode(newPlayMode);\r\n                onAutoPauseModeChangedViaBind(newPlayMode);\r\n            },\r\n            () => disableKeyEvents\r\n        );\r\n    }, [disableKeyEvents, settingsProvider, playMode, tab, onAutoPauseModeChangedViaBind]);\r\n\r\n    useEffect(() => {\r\n        if ((audioFile || videoFile) && (!subtitles || subtitles.length === 0)) {\r\n            const unbindCopy = KeyBindings.bindCopy(\r\n                (event, subtitle) => {\r\n                    event.preventDefault();\r\n                    event.stopPropagation();\r\n                    const surroundingSubtitles = mockSurroundingSubtitles(subtitle, lengthRef.current, 5000);\r\n                    onCopy(\r\n                        subtitle,\r\n                        surroundingSubtitles,\r\n                        audioFile,\r\n                        videoFile,\r\n                        undefined,\r\n                        clock.time(lengthRef.current),\r\n                        selectedAudioTrack,\r\n                        undefined,\r\n                        undefined,\r\n                        undefined,\r\n                        undefined,\r\n                        undefined,\r\n                        undefined,\r\n                        undefined\r\n                    );\r\n                },\r\n                () => disableKeyEvents,\r\n                () => {\r\n                    if (!lengthRef.current) {\r\n                        return undefined;\r\n                    }\r\n\r\n                    const timestamp = clock.time(lengthRef.current);\r\n                    const end = Math.min(timestamp + 5000, lengthRef.current);\r\n\r\n                    return {\r\n                        text: '',\r\n                        start: timestamp,\r\n                        originalStart: timestamp,\r\n                        end: end,\r\n                        originalEnd: end,\r\n                        track: 0,\r\n                    };\r\n                }\r\n            );\r\n\r\n            const unbindAnkiExport = KeyBindings.bindAnkiExport(\r\n                (event) => {\r\n                    event.preventDefault();\r\n                    event.stopPropagation();\r\n                    const timestamp = clock.time(lengthRef.current);\r\n                    const end = Math.min(timestamp + 5000, lengthRef.current);\r\n                    const subtitle = {\r\n                        text: '',\r\n                        start: timestamp,\r\n                        originalStart: timestamp,\r\n                        end: end,\r\n                        originalEnd: end,\r\n                        track: 0,\r\n                    };\r\n                    const surroundingSubtitles = mockSurroundingSubtitles(subtitle, lengthRef.current, 5000);\r\n                    onCopy(\r\n                        subtitle,\r\n                        surroundingSubtitles,\r\n                        audioFile,\r\n                        videoFile,\r\n                        undefined,\r\n                        timestamp,\r\n                        selectedAudioTrack,\r\n                        undefined,\r\n                        undefined,\r\n                        undefined,\r\n                        PostMineAction.showAnkiDialog,\r\n                        false,\r\n                        undefined,\r\n                        undefined\r\n                    );\r\n                },\r\n                () => false\r\n            );\r\n\r\n            return () => {\r\n                unbindCopy();\r\n                unbindAnkiExport();\r\n            };\r\n        }\r\n    }, [audioFile, videoFile, subtitles, clock, selectedAudioTrack, disableKeyEvents, onCopy, onAnkiDialogRequest]);\r\n\r\n    useEffect(() => {\r\n        if (videoRef.current instanceof VideoChannel) {\r\n            videoRef.current.appBarToggle(appBarHidden);\r\n        }\r\n    }, [appBarHidden]);\r\n\r\n    useEffect(() => {\r\n        if (!rewindSubtitle) {\r\n            return;\r\n        }\r\n\r\n        if (playingRef.current) {\r\n            clock.stop();\r\n        }\r\n\r\n        handleSeekToSubtitle(rewindSubtitle.start, false);\r\n    }, [clock, rewindSubtitle, handleSeekToSubtitle]);\r\n\r\n    const length = lengthRef.current;\r\n    const loaded = audioFileUrl || videoFileUrl || subtitles;\r\n    const videoInWindow = Boolean(loaded && videoFileUrl && !videoPopOut);\r\n\r\n    return (\r\n        <div onMouseMove={handleMouseMove} className={classes.root}>\r\n            <Grid container direction=\"row\" wrap=\"nowrap\" className={classes.container}>\r\n                {videoInWindow && (\r\n                    <Grid item style={{ flexGrow: 1, minWidth: 600 }}>\r\n                        <iframe\r\n                            ref={videoFrameRef}\r\n                            className={classes.videoFrame}\r\n                            src={\r\n                                process.env.PUBLIC_URL +\r\n                                '/?video=' +\r\n                                encodeURIComponent(videoFileUrl!) +\r\n                                '&channel=' +\r\n                                channelId +\r\n                                '&popout=false'\r\n                            }\r\n                            title=\"asbplayer\"\r\n                        />\r\n                    </Grid>\r\n                )}\r\n                {(!videoInWindow || (subtitles && subtitles?.length > 0)) && (\r\n                    <Grid\r\n                        item\r\n                        style={{\r\n                            flexGrow: videoInWindow ? 0 : 1,\r\n                            width: videoInWindow && hideSubtitlePlayer ? 0 : 'auto',\r\n                        }}\r\n                    >\r\n                        {loaded && !(videoFileUrl && !videoPopOut) && (\r\n                            <Controls\r\n                                mousePositionRef={mousePositionRef}\r\n                                playing={playing}\r\n                                clock={clock}\r\n                                length={length}\r\n                                displayLength={trackLength(audioRef, videoRef, subtitles, false)}\r\n                                audioTracks={audioTracks}\r\n                                selectedAudioTrack={selectedAudioTrack}\r\n                                tabs={(!videoFileUrl && !audioFileUrl && availableTabs) || undefined}\r\n                                selectedTab={tab}\r\n                                audioFile={audioFile?.name}\r\n                                videoFile={videoFile?.name}\r\n                                offsetEnabled={true}\r\n                                offset={offset}\r\n                                volumeEnabled={Boolean(audioFileUrl)}\r\n                                playModeEnabled={Boolean(videoFileUrl || audioFileUrl)}\r\n                                playMode={playMode}\r\n                                onPlay={handlePlay}\r\n                                onPause={handlePause}\r\n                                onSeek={handleSeek}\r\n                                onAudioTrackSelected={handleAudioTrackSelected}\r\n                                onTabSelected={onTabSelected}\r\n                                onUnloadAudio={() => audioFileUrl && onUnloadAudio(audioFileUrl)}\r\n                                onUnloadVideo={() => videoFileUrl && onUnloadVideo(videoFileUrl)}\r\n                                onOffsetChange={handleOffsetChange}\r\n                                onVolumeChange={handleVolumeChange}\r\n                                onPlayMode={handlePlayMode}\r\n                                disableKeyEvents={disableKeyEvents}\r\n                                settingsProvider={settingsProvider}\r\n                                showOnMouseMovement={true}\r\n                            />\r\n                        )}\r\n                        <SubtitlePlayer\r\n                            playing={playing}\r\n                            subtitles={subtitles}\r\n                            clock={clock}\r\n                            length={length}\r\n                            jumpToSubtitle={jumpToSubtitle}\r\n                            drawerOpen={drawerOpen}\r\n                            appBarHidden={appBarHidden}\r\n                            compressed={Boolean(videoFileUrl && !videoPopOut)}\r\n                            loading={loadingSubtitles}\r\n                            displayHelp={audioFile?.name || (videoPopOut && videoFile?.name) || undefined}\r\n                            disableKeyEvents={disableKeyEvents}\r\n                            lastJumpToTopTimestamp={lastJumpToTopTimestamp}\r\n                            hidden={videoInWindow && hideSubtitlePlayer}\r\n                            disabledSubtitleTracks={disabledSubtitleTracks}\r\n                            onSeek={handleSeekToSubtitle}\r\n                            onCopy={handleCopyFromSubtitlePlayer}\r\n                            onOffsetChange={handleOffsetChange}\r\n                            onToggleSubtitleTrack={handleToggleSubtitleTrack}\r\n                            onStartedShowing={handleOnStartedShowingSubtitle}\r\n                            onWillStopShowing={handleOnWillStopShowingSubtitle}\r\n                            settingsProvider={settingsProvider}\r\n                        />\r\n                    </Grid>\r\n                )}\r\n            </Grid>\r\n            <audio ref={audioRef} src={audioFileUrl} />\r\n        </div>\r\n    );\r\n}\r\n","import { useState, useEffect } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\ninterface Props {\r\n    open: boolean;\r\n    onProceed: (fieldName: string) => void;\r\n    onCancel: () => void;\r\n    existingCustomFieldNames: string[];\r\n}\r\n\r\nexport default function CustomFieldDialog({ open, onProceed, onCancel, existingCustomFieldNames }: Props) {\r\n    const [fieldName, setFieldName] = useState<string>('');\r\n\r\n    useEffect(() => {\r\n        setFieldName('');\r\n    }, [open]);\r\n\r\n    const fieldExists = [\r\n        ...existingCustomFieldNames,\r\n        'Sentence',\r\n        'Word',\r\n        'Definition',\r\n        'Source',\r\n        'Image',\r\n        'Audio',\r\n    ].includes(fieldName);\r\n\r\n    return (\r\n        <Dialog\r\n            open={open}\r\n            disableEnforceFocus\r\n            fullWidth\r\n            maxWidth=\"xs\"\r\n            onClose={onCancel}\r\n        >\r\n            <DialogTitle>New Custom Field</DialogTitle>\r\n            <DialogContent>\r\n                <form>\r\n                    <TextField\r\n                        error={fieldExists}\r\n                        helperText={fieldExists && `Field ${fieldName} already exists`}\r\n                        variant=\"filled\"\r\n                        fullWidth\r\n                        label=\"Field Name\"\r\n                        value={fieldName}\r\n                        color=\"secondary\"\r\n                        onChange={(e) => setFieldName(e.target.value)}\r\n                    />\r\n                </form>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={() => onCancel()}>Cancel</Button>\r\n                <Button disabled={fieldExists || fieldName.trim() === ''} onClick={() => onProceed(fieldName.trim())}>\r\n                    Create\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n}\r\n","import React, { useCallback, useState, useEffect, useMemo, ChangeEvent, ReactNode } from 'react';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport { computeStyles } from '../services/Util';\r\nimport Button from '@material-ui/core/Button';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport CustomFieldDialog from './CustomFieldDialog';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Link from '@material-ui/core/Link';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport Select from '@material-ui/core/Select';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Theme } from '@material-ui/core/styles';\r\nimport { Anki, AsbplayerSettings, AutoPausePreference } from '@project/common';\r\nimport { TagsTextField } from '@project/common/components';\r\n\r\nconst useStyles = makeStyles<Theme>((theme) => ({\r\n    root: {\r\n        '& .MuiTextField-root': {\r\n            marginTop: theme.spacing(1),\r\n            marginBottom: theme.spacing(1),\r\n        },\r\n    },\r\n    subtitleSetting: {\r\n        '& .MuiTextField-root': {\r\n            marginTop: theme.spacing(1),\r\n            marginBottom: theme.spacing(1),\r\n        },\r\n    },\r\n    subtitlePreview: {\r\n        backgroundImage: `linear-gradient(45deg, ${theme.palette.action.disabledBackground} 25%, transparent 25%), linear-gradient(-45deg, ${theme.palette.action.disabledBackground} 25%, transparent 25%), linear-gradient(45deg, transparent 75%, ${theme.palette.action.disabledBackground} 75%), linear-gradient(-45deg, transparent 75%,${theme.palette.action.disabledBackground} 75%)`,\r\n        backgroundSize: '20px 20px',\r\n        backgroundPosition: '0 0, 0 10px, 10px -10px, -10px 0px',\r\n        marginTop: theme.spacing(1),\r\n        marginBottom: theme.spacing(1),\r\n        maxWidth: '100%',\r\n        padding: 10,\r\n    },\r\n    subtitlePreviewInput: {\r\n        border: 'none',\r\n        width: '100%',\r\n        textAlign: 'center',\r\n        backgroundColor: 'rgba(0,0,0,0)',\r\n        '&:focus': {\r\n            outline: 'none',\r\n        },\r\n    },\r\n    addFieldButton: {\r\n        width: '100%',\r\n    },\r\n}));\r\n\r\nconst useSelectableSettingStyles = makeStyles<Theme>((theme) => ({\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n    },\r\n    root: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        justifyContent: 'end',\r\n        alignItems: 'flex-end',\r\n    },\r\n}));\r\n\r\ninterface SelectableSettingProps {\r\n    label: string;\r\n    value: string;\r\n    selections?: string[];\r\n    removable?: boolean;\r\n    onChange: (event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => void;\r\n    onSelectionChange: (event: ChangeEvent<{ name?: string | undefined; value: unknown }>, child: ReactNode) => void;\r\n    onRemoval?: () => void;\r\n}\r\n\r\nfunction SelectableSetting({\r\n    label,\r\n    value,\r\n    selections,\r\n    removable,\r\n    onChange,\r\n    onSelectionChange,\r\n    onRemoval,\r\n}: SelectableSettingProps) {\r\n    const classes = useSelectableSettingStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <TextField\r\n                label={label}\r\n                value={value}\r\n                onChange={onChange}\r\n                fullWidth\r\n                color=\"secondary\"\r\n                InputProps={{\r\n                    endAdornment: removable && (\r\n                        <InputAdornment position=\"end\">\r\n                            <IconButton onClick={(e) => onRemoval?.()}>\r\n                                <DeleteIcon />\r\n                            </IconButton>\r\n                        </InputAdornment>\r\n                    ),\r\n                }}\r\n            />\r\n            <FormControl className={classes.formControl}>\r\n                <InputLabel></InputLabel>\r\n                <Select value={value} disabled={!selections} color=\"secondary\" onChange={onSelectionChange}>\r\n                    {selections &&\r\n                        selections.map((s) => (\r\n                            <MenuItem key={s} value={s}>\r\n                                {s}\r\n                            </MenuItem>\r\n                        ))}\r\n                </Select>\r\n            </FormControl>\r\n        </div>\r\n    );\r\n}\r\n\r\ninterface Props {\r\n    anki: Anki;\r\n    open: boolean;\r\n    settings: AsbplayerSettings;\r\n    onClose: (settings: AsbplayerSettings) => void;\r\n}\r\n\r\nexport default function SettingsDialog({ anki, open, settings, onClose }: Props) {\r\n    const classes = useStyles();\r\n    const [ankiConnectUrl, setAnkiConnectUrl] = useState<string>(settings.ankiConnectUrl);\r\n    const [ankiConnectUrlError, setAnkiConnectUrlError] = useState<string>();\r\n    const [ankiConnectUrlChangeTimestamp, setAnkiConnectUrlChangeTimestamp] = useState<number>(0);\r\n    const [deck, setDeck] = useState<string>(settings.deck || '');\r\n    const [deckNames, setDeckNames] = useState<string[]>();\r\n    const [noteType, setNoteType] = useState<string>(settings.noteType || '');\r\n    const [modelNames, setModelNames] = useState<string[]>();\r\n    const [sentenceField, setSentenceField] = useState<string>(settings.sentenceField || '');\r\n    const [definitionField, setDefinitionField] = useState<string>(settings.definitionField || '');\r\n    const [audioField, setAudioField] = useState<string>(settings.audioField || '');\r\n    const [imageField, setImageField] = useState<string>(settings.imageField || '');\r\n    const [wordField, setWordField] = useState<string>(settings.wordField || '');\r\n    const [sourceField, setSourceField] = useState<string>(settings.sourceField || '');\r\n    const [urlField, setUrlField] = useState<string>(settings.urlField || '');\r\n    const [customFields, setCustomFields] = useState<{ [key: string]: string }>(settings.customAnkiFields);\r\n    const [tags, setTags] = useState<string[]>(settings.tags);\r\n    const [preferMp3, setPreferMp3] = useState<boolean>(settings.preferMp3);\r\n    const [fieldNames, setFieldNames] = useState<string[]>();\r\n    const [customFieldDialogOpen, setCustomFieldDialogOpen] = useState<boolean>(false);\r\n    const [audioPaddingStart, setAudioPaddingStart] = useState<number>(settings.audioPaddingStart);\r\n    const [audioPaddingEnd, setAudioPaddingEnd] = useState<number>(settings.audioPaddingEnd);\r\n    const [maxImageWidth, setMaxImageWidth] = useState<number>(settings.maxImageWidth);\r\n    const [maxImageHeight, setMaxImageHeight] = useState<number>(settings.maxImageHeight);\r\n    const [subtitleColor, setSubtitleColor] = useState<string>(settings.subtitleColor);\r\n    const [subtitleSize, setSubtitleSize] = useState<number>(settings.subtitleSize);\r\n    const [subtitleOutlineColor, setSubtitleOutlineColor] = useState<string>(settings.subtitleOutlineColor);\r\n    const [subtitleOutlineThickness, setSubtitleOutlineThickness] = useState<number>(settings.subtitleOutlineThickness);\r\n    const [subtitleBackgroundColor, setSubtitleBackgroundColor] = useState<string>(settings.subtitleBackgroundColor);\r\n    const [subtitleBackgroundOpacity, setSubtitleBackgroundOpacity] = useState<number>(\r\n        settings.subtitleBackgroundOpacity\r\n    );\r\n    const [subtitleFontFamily, setSubtitleFontFamily] = useState<string>(settings.subtitleFontFamily);\r\n    const [imageBasedSubtitleScaleFactor, setImageBasedSubtitleScaleFactor] = useState<number>(\r\n        settings.imageBasedSubtitleScaleFactor\r\n    );\r\n    const [subtitlePreview, setSubtitlePreview] = useState<string>(settings.subtitlePreview);\r\n    const [themeType, setThemeType] = useState<'dark' | 'light'>(settings.themeType);\r\n    const [copyToClipboardOnMine, setCopyToClipboardOnMine] = useState<boolean>(settings.copyToClipboardOnMine);\r\n    const [autoPausePreference, setAutoPausePreference] = useState<AutoPausePreference>(settings.autoPausePreference);\r\n\r\n    const handleAnkiConnectUrlChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\r\n        setAnkiConnectUrl(e.target.value);\r\n        setAnkiConnectUrlChangeTimestamp(Date.now());\r\n    }, []);\r\n\r\n    const handleRetryAnkiConnectUrl = useCallback(\r\n        (e: React.MouseEvent<HTMLButtonElement>) => setAnkiConnectUrlChangeTimestamp(Date.now()),\r\n        []\r\n    );\r\n    const handleDeckChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setDeck(e.target.value),\r\n        []\r\n    );\r\n    const handleDeckSelectionChange = useCallback(\r\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setDeck(e.target.value as string),\r\n        []\r\n    );\r\n    const handleNoteTypeChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setNoteType(e.target.value),\r\n        []\r\n    );\r\n    const handleNoteTypeSelectionChange = useCallback(\r\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setNoteType(e.target.value as string),\r\n        []\r\n    );\r\n    const handleSentenceFieldChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSentenceField(e.target.value),\r\n        []\r\n    );\r\n    const handleSentenceFieldSelectionChange = useCallback(\r\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setSentenceField(e.target.value as string),\r\n        []\r\n    );\r\n    const handleDefinitionFieldChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setDefinitionField(e.target.value),\r\n        []\r\n    );\r\n    const handleDefinitionFieldSelectionChange = useCallback(\r\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setDefinitionField(e.target.value as string),\r\n        []\r\n    );\r\n    const handleAudioFieldChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setAudioField(e.target.value),\r\n        []\r\n    );\r\n    const handleAudioFieldSelectionChange = useCallback(\r\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setAudioField(e.target.value as string),\r\n        []\r\n    );\r\n    const handleImageFieldChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setImageField(e.target.value),\r\n        []\r\n    );\r\n    const handleImageFieldSelectionChange = useCallback(\r\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setImageField(e.target.value as string),\r\n        []\r\n    );\r\n    const handleWordFieldChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setWordField(e.target.value),\r\n        []\r\n    );\r\n    const handleWordFieldSelectionChange = useCallback(\r\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setWordField(e.target.value as string),\r\n        []\r\n    );\r\n    const handleSourceFieldChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSourceField(e.target.value),\r\n        []\r\n    );\r\n    const handleSourceFieldSelectionChange = useCallback(\r\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setSourceField(e.target.value as string),\r\n        []\r\n    );\r\n    const handleUrlFieldChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setUrlField(e.target.value),\r\n        []\r\n    );\r\n    const handleUrlFieldSelectionChange = useCallback(\r\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setUrlField(e.target.value as string),\r\n        []\r\n    );\r\n    const handleAudioPaddingStart = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setAudioPaddingStart(Number(e.target.value)),\r\n        []\r\n    );\r\n    const handleAudioPaddingEnd = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setAudioPaddingEnd(Number(e.target.value)),\r\n        []\r\n    );\r\n    const handleMaxImageWidth = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setMaxImageWidth(Number(e.target.value)),\r\n        []\r\n    );\r\n    const handleMaxImageHeight = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setMaxImageHeight(Number(e.target.value)),\r\n        []\r\n    );\r\n    const handleSubtitleColorChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleColor(e.target.value),\r\n        []\r\n    );\r\n    const handleSubtitleSizeChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleSize(Number(e.target.value)),\r\n        []\r\n    );\r\n    const handleSubtitleOutlineColorChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleOutlineColor(e.target.value),\r\n        []\r\n    );\r\n    const handleSubtitleOutlineThicknessChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleOutlineThickness(Number(e.target.value)),\r\n        []\r\n    );\r\n    const handleSubtitleBackgroundColorChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleBackgroundColor(e.target.value),\r\n        []\r\n    );\r\n    const handleSubtitleBackgroundOpacityChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) =>\r\n            setSubtitleBackgroundOpacity(Number(e.target.value)),\r\n        []\r\n    );\r\n    const handleSubtitleFontFamilyChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleFontFamily(e.target.value),\r\n        []\r\n    );\r\n    const handleSubtitlePreviewChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitlePreview(e.target.value),\r\n        []\r\n    );\r\n    const handleImageBasedSubtitleScaleFactorChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) =>\r\n            setImageBasedSubtitleScaleFactor(Number(e.target.value)),\r\n        []\r\n    );\r\n    const handleAddCustomField = useCallback((customFieldName: string) => {\r\n        setCustomFields((oldCustomFields: { [key: string]: string }) => {\r\n            const newCustomFields: { [key: string]: string } = {};\r\n            Object.assign(newCustomFields, oldCustomFields);\r\n            newCustomFields[customFieldName] = '';\r\n            return newCustomFields;\r\n        });\r\n        setCustomFieldDialogOpen(false);\r\n    }, []);\r\n    const handleCustomFieldChange = useCallback((customFieldName: string, value: string) => {\r\n        setCustomFields((oldCustomFields: { [key: string]: string }) => {\r\n            const newCustomFields: { [key: string]: string } = {};\r\n            Object.assign(newCustomFields, oldCustomFields);\r\n            newCustomFields[customFieldName] = value;\r\n            return newCustomFields;\r\n        });\r\n    }, []);\r\n    const handleCustomFieldRemoval = useCallback(\r\n        (customFieldName: string) =>\r\n            setCustomFields((oldCustomFields: { [key: string]: string }) => {\r\n                const newCustomFields: { [key: string]: string } = {};\r\n                Object.assign(newCustomFields, oldCustomFields);\r\n                delete newCustomFields[customFieldName];\r\n                return newCustomFields;\r\n            }),\r\n        []\r\n    );\r\n    const handleTagsChange = useCallback((newTags: string[]) => {\r\n        setTags(newTags);\r\n    }, []);\r\n    const handlePreferMp3Change = useCallback((e: ChangeEvent<HTMLInputElement>) => setPreferMp3(e.target.checked), []);\r\n    const handleThemeTypeChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.value !== 'dark' && e.target.value !== 'light') {\r\n            throw new Error(`Invalid theme type ${e.target.value}`);\r\n        }\r\n\r\n        setThemeType(e.target.value);\r\n    }, []);\r\n    const handleCopyToClipboardOnMine = useCallback(\r\n        (e: ChangeEvent<HTMLInputElement>) => setCopyToClipboardOnMine(e.target.checked),\r\n        []\r\n    );\r\n    const handleAutoPausePreferenceChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        setAutoPausePreference(Number(e.target.value) as AutoPausePreference);\r\n    }, []);\r\n    const subtitlePreviewStyles = useMemo(\r\n        () =>\r\n            computeStyles({\r\n                subtitleColor: subtitleColor,\r\n                subtitleSize: subtitleSize,\r\n                subtitleOutlineThickness: subtitleOutlineThickness,\r\n                subtitleOutlineColor: subtitleOutlineColor,\r\n                subtitleBackgroundOpacity: subtitleBackgroundOpacity,\r\n                subtitleBackgroundColor: subtitleBackgroundColor,\r\n                subtitleFontFamily: subtitleFontFamily,\r\n            }),\r\n        [\r\n            subtitleColor,\r\n            subtitleSize,\r\n            subtitleOutlineThickness,\r\n            subtitleOutlineColor,\r\n            subtitleBackgroundOpacity,\r\n            subtitleBackgroundColor,\r\n            subtitleFontFamily,\r\n        ]\r\n    );\r\n\r\n    useEffect(() => {\r\n        let canceled = false;\r\n\r\n        const timeout = setTimeout(async () => {\r\n            try {\r\n                if (canceled) {\r\n                    return;\r\n                }\r\n\r\n                await anki.requestPermission(ankiConnectUrl);\r\n                setDeckNames(await anki.deckNames(ankiConnectUrl));\r\n                setModelNames(await anki.modelNames(ankiConnectUrl));\r\n                setAnkiConnectUrlError(undefined);\r\n            } catch (e) {\r\n                if (canceled) {\r\n                    return;\r\n                }\r\n\r\n                console.error(e);\r\n                setDeckNames(undefined);\r\n                setModelNames(undefined);\r\n\r\n                if (e instanceof Error) {\r\n                    setAnkiConnectUrlError(e.message);\r\n                } else if (typeof e === 'string') {\r\n                    setAnkiConnectUrlError(e);\r\n                } else {\r\n                    setAnkiConnectUrlError(String(e));\r\n                }\r\n            }\r\n        }, 1000);\r\n\r\n        return () => {\r\n            canceled = true;\r\n            clearTimeout(timeout);\r\n        };\r\n    }, [anki, ankiConnectUrl, ankiConnectUrlChangeTimestamp]);\r\n\r\n    useEffect(() => {\r\n        if (!noteType || ankiConnectUrlError) {\r\n            return undefined;\r\n        }\r\n\r\n        let canceled = false;\r\n\r\n        async function refreshFieldNames() {\r\n            try {\r\n                if (canceled) {\r\n                    return;\r\n                }\r\n\r\n                setFieldNames(['', ...(await anki.modelFieldNames(noteType, ankiConnectUrl))]);\r\n                setAnkiConnectUrlError(undefined);\r\n            } catch (e) {\r\n                if (canceled) {\r\n                    return;\r\n                }\r\n\r\n                console.error(e);\r\n                setFieldNames(undefined);\r\n\r\n                if (e instanceof Error) {\r\n                    setAnkiConnectUrlError(e.message);\r\n                } else if (typeof e === 'string') {\r\n                    setAnkiConnectUrlError(e);\r\n                } else {\r\n                    setAnkiConnectUrlError(String(e));\r\n                }\r\n            }\r\n        }\r\n\r\n        refreshFieldNames();\r\n\r\n        return () => {\r\n            canceled = true;\r\n        };\r\n    }, [anki, noteType, ankiConnectUrl, ankiConnectUrlError, ankiConnectUrlChangeTimestamp]);\r\n\r\n    const handleClose = useCallback(() => {\r\n        onClose({\r\n            ankiConnectUrl: ankiConnectUrl,\r\n            deck: deck,\r\n            noteType: noteType,\r\n            sentenceField: sentenceField,\r\n            definitionField: definitionField,\r\n            audioField: audioField,\r\n            imageField: imageField,\r\n            wordField: wordField,\r\n            sourceField: sourceField,\r\n            urlField: urlField,\r\n            tags: tags.filter((t) => t !== ''),\r\n            subtitleSize: Number(subtitleSize),\r\n            subtitleColor: subtitleColor,\r\n            subtitleOutlineThickness: Number(subtitleOutlineThickness),\r\n            subtitleOutlineColor: subtitleOutlineColor,\r\n            subtitleBackgroundColor: subtitleBackgroundColor,\r\n            subtitleBackgroundOpacity: Number(subtitleBackgroundOpacity),\r\n            subtitleFontFamily: subtitleFontFamily,\r\n            subtitlePreview: subtitlePreview,\r\n            imageBasedSubtitleScaleFactor: imageBasedSubtitleScaleFactor,\r\n            customAnkiFields: customFields,\r\n            preferMp3: preferMp3,\r\n            themeType: themeType,\r\n            audioPaddingStart: audioPaddingStart,\r\n            audioPaddingEnd: audioPaddingEnd,\r\n            maxImageWidth: maxImageWidth,\r\n            maxImageHeight: maxImageHeight,\r\n            surroundingSubtitlesCountRadius: settings.surroundingSubtitlesCountRadius,\r\n            surroundingSubtitlesTimeRadius: settings.surroundingSubtitlesTimeRadius,\r\n            volume: settings.volume,\r\n            theaterMode: settings.theaterMode,\r\n            copyToClipboardOnMine: copyToClipboardOnMine,\r\n            autoPausePreference: autoPausePreference,\r\n        });\r\n    }, [\r\n        onClose,\r\n        ankiConnectUrl,\r\n        deck,\r\n        noteType,\r\n        sentenceField,\r\n        definitionField,\r\n        audioField,\r\n        imageField,\r\n        wordField,\r\n        sourceField,\r\n        urlField,\r\n        customFields,\r\n        tags,\r\n        preferMp3,\r\n        subtitleSize,\r\n        subtitleColor,\r\n        subtitleOutlineThickness,\r\n        subtitleOutlineColor,\r\n        subtitleBackgroundColor,\r\n        subtitleBackgroundOpacity,\r\n        subtitleFontFamily,\r\n        subtitlePreview,\r\n        imageBasedSubtitleScaleFactor,\r\n        themeType,\r\n        audioPaddingStart,\r\n        audioPaddingEnd,\r\n        maxImageWidth,\r\n        maxImageHeight,\r\n        settings.surroundingSubtitlesCountRadius,\r\n        settings.surroundingSubtitlesTimeRadius,\r\n        settings.volume,\r\n        settings.theaterMode,\r\n        copyToClipboardOnMine,\r\n        autoPausePreference,\r\n    ]);\r\n\r\n    const customFieldInputs = Object.keys(customFields).map((customFieldName) => {\r\n        return (\r\n            <SelectableSetting\r\n                key={customFieldName}\r\n                label={`${customFieldName} Field`}\r\n                value={customFields[customFieldName]}\r\n                selections={fieldNames!}\r\n                onChange={(e) => handleCustomFieldChange(customFieldName, e.target.value)}\r\n                onSelectionChange={(e) => handleCustomFieldChange(customFieldName, e.target.value as string)}\r\n                onRemoval={() => handleCustomFieldRemoval(customFieldName)}\r\n                removable={true}\r\n            />\r\n        );\r\n    });\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <CustomFieldDialog\r\n                open={customFieldDialogOpen}\r\n                existingCustomFieldNames={Object.keys(customFields)}\r\n                onProceed={handleAddCustomField}\r\n                onCancel={() => setCustomFieldDialogOpen(false)}\r\n            />\r\n            <Dialog open={open} maxWidth=\"xs\" fullWidth onClose={handleClose}>\r\n                <DialogTitle>Settings</DialogTitle>\r\n                <DialogContent>\r\n                    <Grid container direction=\"column\" spacing={3}>\r\n                        <Grid item>\r\n                            <FormLabel>Anki</FormLabel>\r\n                            <FormGroup className={classes.root}>\r\n                                <TextField\r\n                                    label=\"Anki Connect URL\"\r\n                                    value={ankiConnectUrl}\r\n                                    error={Boolean(ankiConnectUrlError)}\r\n                                    helperText={ankiConnectUrlError}\r\n                                    color=\"secondary\"\r\n                                    onChange={handleAnkiConnectUrlChange}\r\n                                    InputProps={{\r\n                                        endAdornment: (\r\n                                            <InputAdornment position=\"end\">\r\n                                                <IconButton onClick={handleRetryAnkiConnectUrl}>\r\n                                                    <RefreshIcon />\r\n                                                </IconButton>\r\n                                            </InputAdornment>\r\n                                        ),\r\n                                    }}\r\n                                />\r\n                                <FormHelperText>\r\n                                    Ensure that {window.location.protocol + '//' + window.location.hostname} is in the\r\n                                    webCorsOriginList in your AnkiConnect settings as in this{' '}\r\n                                    <Link\r\n                                        color=\"secondary\"\r\n                                        target=\"_blank\"\r\n                                        rel=\"noreferrer\"\r\n                                        href=\"https://youtu.be/Mv7fEVb6PHo?t=44\"\r\n                                    >\r\n                                        video\r\n                                    </Link>\r\n                                    .\r\n                                </FormHelperText>\r\n                                <SelectableSetting\r\n                                    label=\"Deck\"\r\n                                    value={deck}\r\n                                    selections={deckNames}\r\n                                    onChange={handleDeckChange}\r\n                                    onSelectionChange={handleDeckSelectionChange}\r\n                                />\r\n                                <SelectableSetting\r\n                                    label=\"Note Type\"\r\n                                    value={noteType}\r\n                                    selections={modelNames}\r\n                                    onChange={handleNoteTypeChange}\r\n                                    onSelectionChange={handleNoteTypeSelectionChange}\r\n                                />\r\n                                <SelectableSetting\r\n                                    label=\"Sentence Field\"\r\n                                    value={sentenceField}\r\n                                    selections={fieldNames}\r\n                                    onChange={handleSentenceFieldChange}\r\n                                    onSelectionChange={handleSentenceFieldSelectionChange}\r\n                                />\r\n                                <SelectableSetting\r\n                                    label=\"Definition Field\"\r\n                                    value={definitionField}\r\n                                    selections={fieldNames}\r\n                                    onChange={handleDefinitionFieldChange}\r\n                                    onSelectionChange={handleDefinitionFieldSelectionChange}\r\n                                />\r\n                                <SelectableSetting\r\n                                    label=\"Word Field\"\r\n                                    value={wordField}\r\n                                    selections={fieldNames}\r\n                                    onChange={handleWordFieldChange}\r\n                                    onSelectionChange={handleWordFieldSelectionChange}\r\n                                />\r\n                                <SelectableSetting\r\n                                    label=\"Audio Field\"\r\n                                    value={audioField}\r\n                                    selections={fieldNames}\r\n                                    onChange={handleAudioFieldChange}\r\n                                    onSelectionChange={handleAudioFieldSelectionChange}\r\n                                />\r\n                                <SelectableSetting\r\n                                    label=\"Image Field\"\r\n                                    value={imageField}\r\n                                    selections={fieldNames}\r\n                                    onChange={handleImageFieldChange}\r\n                                    onSelectionChange={handleImageFieldSelectionChange}\r\n                                />\r\n                                <SelectableSetting\r\n                                    label=\"Source Field\"\r\n                                    value={sourceField}\r\n                                    selections={fieldNames}\r\n                                    onChange={handleSourceFieldChange}\r\n                                    onSelectionChange={handleSourceFieldSelectionChange}\r\n                                />\r\n                                <SelectableSetting\r\n                                    label=\"URL Field\"\r\n                                    value={urlField}\r\n                                    selections={fieldNames}\r\n                                    onChange={handleUrlFieldChange}\r\n                                    onSelectionChange={handleUrlFieldSelectionChange}\r\n                                />\r\n                                {customFieldInputs}\r\n                                <Button\r\n                                    className={classes.addFieldButton}\r\n                                    onClick={(e) => setCustomFieldDialogOpen(true)}\r\n                                >\r\n                                    Add Custom Field\r\n                                </Button>\r\n                                <TagsTextField\r\n                                    label=\"Tags\"\r\n                                    helperText=\"Comma-separated list of strings\"\r\n                                    fullWidth\r\n                                    color=\"secondary\"\r\n                                    tags={tags}\r\n                                    onTagsChange={handleTagsChange}\r\n                                />\r\n                            </FormGroup>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <FormLabel>Mining</FormLabel>\r\n                            <FormGroup className={classes.root}>\r\n                                <FormControlLabel\r\n                                    control={<Checkbox checked={preferMp3} onChange={handlePreferMp3Change} />}\r\n                                    label=\"Re-encode audio as mp3 (slower)\"\r\n                                />\r\n                                <FormControlLabel\r\n                                    control={\r\n                                        <Checkbox\r\n                                            checked={copyToClipboardOnMine}\r\n                                            onChange={handleCopyToClipboardOnMine}\r\n                                        />\r\n                                    }\r\n                                    label=\"Copy mined subtitles to clipboard\"\r\n                                />\r\n                                <TextField\r\n                                    type=\"number\"\r\n                                    label=\"Audio Padding Start\"\r\n                                    fullWidth\r\n                                    value={audioPaddingStart}\r\n                                    color=\"secondary\"\r\n                                    onChange={handleAudioPaddingStart}\r\n                                    inputProps={{\r\n                                        min: 0,\r\n                                        step: 1,\r\n                                    }}\r\n                                    InputProps={{\r\n                                        endAdornment: <InputAdornment position=\"end\">ms</InputAdornment>,\r\n                                    }}\r\n                                />\r\n                                <TextField\r\n                                    type=\"number\"\r\n                                    label=\"Audio Padding End\"\r\n                                    fullWidth\r\n                                    value={audioPaddingEnd}\r\n                                    color=\"secondary\"\r\n                                    onChange={handleAudioPaddingEnd}\r\n                                    inputProps={{\r\n                                        min: 0,\r\n                                        step: 1,\r\n                                    }}\r\n                                    InputProps={{\r\n                                        endAdornment: <InputAdornment position=\"end\">ms</InputAdornment>,\r\n                                    }}\r\n                                />\r\n                                <TextField\r\n                                    type=\"number\"\r\n                                    label=\"Max Image Width\"\r\n                                    fullWidth\r\n                                    value={maxImageWidth}\r\n                                    color=\"secondary\"\r\n                                    onChange={handleMaxImageWidth}\r\n                                    inputProps={{\r\n                                        min: 0,\r\n                                        step: 1,\r\n                                    }}\r\n                                />\r\n                                <TextField\r\n                                    type=\"number\"\r\n                                    label=\"Max Image Height\"\r\n                                    fullWidth\r\n                                    value={maxImageHeight}\r\n                                    color=\"secondary\"\r\n                                    onChange={handleMaxImageHeight}\r\n                                    inputProps={{\r\n                                        min: 0,\r\n                                        step: 1,\r\n                                    }}\r\n                                />\r\n                            </FormGroup>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <FormLabel>Auto-pause Preference</FormLabel>\r\n                            <div>\r\n                                <FormControlLabel\r\n                                    control={\r\n                                        <Radio\r\n                                            checked={autoPausePreference === AutoPausePreference.atStart}\r\n                                            value={AutoPausePreference.atStart}\r\n                                            onChange={handleAutoPausePreferenceChange}\r\n                                        />\r\n                                    }\r\n                                    label=\"At Subtitle Start\"\r\n                                />\r\n                                <FormControlLabel\r\n                                    control={\r\n                                        <Radio\r\n                                            checked={autoPausePreference === AutoPausePreference.atEnd}\r\n                                            value={AutoPausePreference.atEnd}\r\n                                            onChange={handleAutoPausePreferenceChange}\r\n                                        />\r\n                                    }\r\n                                    label=\"At Subtitle End\"\r\n                                />\r\n                                <FormHelperText>\r\n                                    Does not enable auto-pause. Sets the preference for when to pause when auto-pause is\r\n                                    enabled.\r\n                                </FormHelperText>\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <FormLabel>Video Subtitle Appearance</FormLabel>\r\n                            <FormGroup>\r\n                                <div className={classes.subtitleSetting}>\r\n                                    <TextField\r\n                                        type=\"color\"\r\n                                        label=\"Subtitle Color\"\r\n                                        fullWidth\r\n                                        value={subtitleColor}\r\n                                        color=\"secondary\"\r\n                                        onChange={handleSubtitleColorChange}\r\n                                    />\r\n                                </div>\r\n                                <div className={classes.subtitleSetting}>\r\n                                    <TextField\r\n                                        type=\"number\"\r\n                                        label=\"Subtitle Size\"\r\n                                        fullWidth\r\n                                        value={subtitleSize}\r\n                                        color=\"secondary\"\r\n                                        onChange={handleSubtitleSizeChange}\r\n                                        inputProps={{\r\n                                            min: 1,\r\n                                            step: 1,\r\n                                        }}\r\n                                    />\r\n                                </div>\r\n                                <div className={classes.subtitleSetting}>\r\n                                    <TextField\r\n                                        type=\"color\"\r\n                                        label=\"Subtitle Outline Color\"\r\n                                        fullWidth\r\n                                        value={subtitleOutlineColor}\r\n                                        color=\"secondary\"\r\n                                        onChange={handleSubtitleOutlineColorChange}\r\n                                    />\r\n                                </div>\r\n                                <div className={classes.subtitleSetting}>\r\n                                    <TextField\r\n                                        type=\"number\"\r\n                                        label=\"Subtitle Outline Thickness\"\r\n                                        fullWidth\r\n                                        value={subtitleOutlineThickness}\r\n                                        onChange={handleSubtitleOutlineThicknessChange}\r\n                                        inputProps={{\r\n                                            min: 0,\r\n                                            step: 1,\r\n                                        }}\r\n                                        color=\"secondary\"\r\n                                    />\r\n                                </div>\r\n                                <div className={classes.subtitleSetting}>\r\n                                    <TextField\r\n                                        type=\"color\"\r\n                                        label=\"Subtitle Background Color\"\r\n                                        fullWidth\r\n                                        value={subtitleBackgroundColor}\r\n                                        color=\"secondary\"\r\n                                        onChange={handleSubtitleBackgroundColorChange}\r\n                                    />\r\n                                </div>\r\n                                <div className={classes.subtitleSetting}>\r\n                                    <TextField\r\n                                        type=\"number\"\r\n                                        label=\"Subtitle Background Opacity\"\r\n                                        fullWidth\r\n                                        inputProps={{\r\n                                            min: 0,\r\n                                            max: 1,\r\n                                            step: 0.1,\r\n                                        }}\r\n                                        value={subtitleBackgroundOpacity}\r\n                                        color=\"secondary\"\r\n                                        onChange={handleSubtitleBackgroundOpacityChange}\r\n                                    />\r\n                                </div>\r\n                                <div className={classes.subtitleSetting}>\r\n                                    <TextField\r\n                                        type=\"text\"\r\n                                        label=\"Subtitle Font Family\"\r\n                                        placeholder=\"Inherited\"\r\n                                        fullWidth\r\n                                        value={subtitleFontFamily}\r\n                                        color=\"secondary\"\r\n                                        onChange={handleSubtitleFontFamilyChange}\r\n                                    />\r\n                                </div>\r\n                                <div className={classes.subtitleSetting}>\r\n                                    <TextField\r\n                                        type=\"number\"\r\n                                        label=\"Image-based Subtitle Scale Factor\"\r\n                                        placeholder=\"Inherited\"\r\n                                        fullWidth\r\n                                        inputProps={{\r\n                                            min: 0,\r\n                                            max: 1,\r\n                                            step: 0.1,\r\n                                        }}\r\n                                        value={imageBasedSubtitleScaleFactor}\r\n                                        color=\"secondary\"\r\n                                        onChange={handleImageBasedSubtitleScaleFactorChange}\r\n                                    />\r\n                                </div>\r\n                                <div className={classes.subtitlePreview}>\r\n                                    <input\r\n                                        value={subtitlePreview}\r\n                                        className={classes.subtitlePreviewInput}\r\n                                        onChange={handleSubtitlePreviewChange}\r\n                                        style={subtitlePreviewStyles}\r\n                                    />\r\n                                </div>\r\n                            </FormGroup>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <FormLabel>Theme</FormLabel>\r\n                            <div>\r\n                                <FormControlLabel\r\n                                    control={\r\n                                        <Radio\r\n                                            checked={themeType === 'light'}\r\n                                            value=\"light\"\r\n                                            onChange={handleThemeTypeChange}\r\n                                        />\r\n                                    }\r\n                                    label=\"Light\"\r\n                                />\r\n                                <FormControlLabel\r\n                                    control={\r\n                                        <Radio\r\n                                            checked={themeType === 'dark'}\r\n                                            value=\"dark\"\r\n                                            onChange={handleThemeTypeChange}\r\n                                        />\r\n                                    }\r\n                                    label=\"Dark\"\r\n                                />\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose}>OK</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </React.Fragment>\r\n    );\r\n}\r\n","import { AsbplayerSettings, AsbplayerSettingsProvider, AutoPausePreference } from '@project/common';\r\n\r\nconst defaultAnkiConnectUrl = 'http://127.0.0.1:8765';\r\nconst defaultSubtitleSize = 36;\r\nconst defaultSubtitleColor = '#ffffff';\r\nconst defaultSubtitleOutlineThickness = 0;\r\nconst defaultSubtitleOutlineColor = '#000000';\r\nconst defaultSubtitleBackgroundColor = '#000000';\r\nconst defaultSubtitleBackgroundOpacity = 0.5;\r\nconst defaultSubtitleFontFamily = '';\r\nconst defaultSubtitlePreview = 'アあ安';\r\nconst defaultVolume = 100;\r\nconst defaultAudioPaddingStart = 0;\r\nconst defaultAudioPaddingEnd = 500;\r\nconst defaultMaxImageWidth = 0;\r\nconst defaultMaxImageHeight = 0;\r\nconst defaultSurroundingSubtitlesCountRadius = 1;\r\nconst defaultSurroundingSubtitlesTimeRadius = 5000;\r\nconst defaultAutoPausePreference = AutoPausePreference.atEnd;\r\n\r\nconst ankiConnectUrlKey = 'ankiConnectUrl';\r\nconst deckKey = 'deck';\r\nconst noteTypeKey = 'noteType';\r\nconst sentenceFieldKey = 'sentenceField';\r\nconst definitionFieldKey = 'definitionField';\r\nconst audioFieldKey = 'audioField';\r\nconst imageFieldKey = 'imageField';\r\nconst wordFieldKey = 'wordField';\r\nconst sourceFieldKey = 'sourceField';\r\nconst urlFieldKey = 'urlField';\r\nconst customAnkiFieldsKey = 'customAnkiFields';\r\nconst tagsKey = 'tags';\r\nconst subtitleSizeKey = 'subtitleSize';\r\nconst subtitleColorKey = 'subtitleColor';\r\nconst subtitleOutlineThicknessKey = 'subtitleOutlineThickness';\r\nconst subtitleOutlineColorKey = 'subtitleOutlineColor';\r\nconst subtitleBackgroundColorKey = 'subtitleBackgroundColor';\r\nconst subtitleBackgroundOpacityKey = 'subtitleBackgroundOpacity';\r\nconst subtitleFontFamilyKey = 'subtitleFontFamily';\r\nconst subtitlePreviewKey = 'subtitlePreview';\r\nconst imageBasedSubtitleScaleFactorKey = 'imageBasedSubtitleScaleFactor';\r\nconst audioPaddingStartKey = 'audioPaddingStart';\r\nconst audioPaddingEndKey = 'audioPaddingEnd';\r\nconst maxImageWidthKey = 'maxImageWidth';\r\nconst maxImageHeightKey = 'maxImageHeight';\r\nconst volumeKey = 'volume';\r\nconst theaterModeKey = 'theaterMode';\r\nconst preferMp3Key = 'preferMp3';\r\nconst themeTypeKey = 'themeType';\r\nconst copyToClipboardOnMineKey = 'copyToClipboardOnMine';\r\nconst autoPausePreferenceKey = 'autoPausePreference';\r\n\r\nexport default class SettingsProvider implements AsbplayerSettingsProvider {\r\n    private _tags?: string[];\r\n\r\n    constructor() {\r\n        // Cache tags so that it can be used in useEffect dependencies\r\n        this._tags = this.tags;\r\n    }\r\n\r\n    get settings(): AsbplayerSettings {\r\n        return {\r\n            ankiConnectUrl: this.ankiConnectUrl,\r\n            deck: this.deck,\r\n            noteType: this.noteType,\r\n            sentenceField: this.sentenceField,\r\n            definitionField: this.definitionField,\r\n            audioField: this.audioField,\r\n            imageField: this.imageField,\r\n            wordField: this.wordField,\r\n            urlField: this.urlField,\r\n            customAnkiFields: this.customAnkiFields,\r\n            tags: this.tags,\r\n            sourceField: this.sourceField,\r\n            subtitleSize: this.subtitleSize,\r\n            subtitleColor: this.subtitleColor,\r\n            subtitleOutlineThickness: this.subtitleOutlineThickness,\r\n            subtitleOutlineColor: this.subtitleOutlineColor,\r\n            subtitleBackgroundColor: this.subtitleBackgroundColor,\r\n            subtitleBackgroundOpacity: this.subtitleBackgroundOpacity,\r\n            subtitleFontFamily: this.subtitleFontFamily,\r\n            subtitlePreview: this.subtitlePreview,\r\n            imageBasedSubtitleScaleFactor: this.imageBasedSubtitleScaleFactor,\r\n            preferMp3: this.preferMp3,\r\n            themeType: this.themeType,\r\n            audioPaddingStart: this.audioPaddingStart,\r\n            audioPaddingEnd: this.audioPaddingEnd,\r\n            maxImageWidth: this.maxImageWidth,\r\n            maxImageHeight: this.maxImageHeight,\r\n            surroundingSubtitlesCountRadius: this.surroundingSubtitlesCountRadius,\r\n            surroundingSubtitlesTimeRadius: this.surroundingSubtitlesTimeRadius,\r\n            volume: this.volume,\r\n            theaterMode: this.theaterMode,\r\n            copyToClipboardOnMine: this.copyToClipboardOnMine,\r\n            autoPausePreference: this.autoPausePreference,\r\n        };\r\n    }\r\n\r\n    set settings(newSettings: AsbplayerSettings) {\r\n        this.ankiConnectUrl = newSettings.ankiConnectUrl;\r\n        this.deck = newSettings.deck;\r\n        this.noteType = newSettings.noteType;\r\n        this.sentenceField = newSettings.sentenceField;\r\n        this.definitionField = newSettings.definitionField;\r\n        this.audioField = newSettings.audioField;\r\n        this.imageField = newSettings.imageField;\r\n        this.wordField = newSettings.wordField;\r\n        this.sourceField = newSettings.sourceField;\r\n        this.urlField = newSettings.urlField;\r\n        this.tags = newSettings.tags;\r\n        this.subtitleSize = newSettings.subtitleSize;\r\n        this.subtitleColor = newSettings.subtitleColor;\r\n        this.subtitleOutlineThickness = newSettings.subtitleOutlineThickness;\r\n        this.subtitleOutlineColor = newSettings.subtitleOutlineColor;\r\n        this.subtitleBackgroundColor = newSettings.subtitleBackgroundColor;\r\n        this.subtitleBackgroundOpacity = newSettings.subtitleBackgroundOpacity;\r\n        this.subtitleFontFamily = newSettings.subtitleFontFamily;\r\n        this.subtitlePreview = newSettings.subtitlePreview;\r\n        this.imageBasedSubtitleScaleFactor = newSettings.imageBasedSubtitleScaleFactor;\r\n        this.customAnkiFields = newSettings.customAnkiFields;\r\n        this.preferMp3 = newSettings.preferMp3;\r\n        this.themeType = newSettings.themeType;\r\n        this.audioPaddingStart = newSettings.audioPaddingStart;\r\n        this.audioPaddingEnd = newSettings.audioPaddingEnd;\r\n        this.maxImageWidth = newSettings.maxImageWidth;\r\n        this.maxImageHeight = newSettings.maxImageHeight;\r\n        this.volume = newSettings.volume;\r\n        this.theaterMode = newSettings.theaterMode;\r\n        this.copyToClipboardOnMine = newSettings.copyToClipboardOnMine;\r\n        this.autoPausePreference = newSettings.autoPausePreference;\r\n    }\r\n\r\n    get subtitleSettings() {\r\n        return {\r\n            subtitleSize: this.subtitleSize,\r\n            subtitleColor: this.subtitleColor,\r\n            subtitleOutlineThickness: this.subtitleOutlineThickness,\r\n            subtitleOutlineColor: this.subtitleOutlineColor,\r\n            subtitleBackgroundColor: this.subtitleBackgroundColor,\r\n            subtitleBackgroundOpacity: this.subtitleBackgroundOpacity,\r\n            subtitleFontFamily: this.subtitleFontFamily,\r\n            imageBasedSubtitleScaleFactor: this.imageBasedSubtitleScaleFactor,\r\n        };\r\n    }\r\n\r\n    get ankiSettings() {\r\n        return {\r\n            ankiConnectUrl: this.ankiConnectUrl,\r\n            deck: this.deck,\r\n            noteType: this.noteType,\r\n            sentenceField: this.sentenceField,\r\n            definitionField: this.definitionField,\r\n            audioField: this.audioField,\r\n            imageField: this.imageField,\r\n            wordField: this.wordField,\r\n            sourceField: this.sourceField,\r\n            urlField: this.urlField,\r\n            customAnkiFields: this.customAnkiFields,\r\n            tags: this.tags,\r\n            preferMp3: this.preferMp3,\r\n            audioPaddingStart: this.audioPaddingStart,\r\n            audioPaddingEnd: this.audioPaddingEnd,\r\n            maxImageWidth: this.maxImageWidth,\r\n            maxImageHeight: this.maxImageHeight,\r\n            surroundingSubtitlesCountRadius: this.surroundingSubtitlesCountRadius,\r\n            surroundingSubtitlesTimeRadius: this.surroundingSubtitlesTimeRadius,\r\n        };\r\n    }\r\n\r\n    get miscSettings() {\r\n        return {\r\n            themeType: this.themeType,\r\n            copyToClipboardOnMine: this.copyToClipboardOnMine,\r\n            autoPausePreference: this.autoPausePreference,\r\n        };\r\n    }\r\n\r\n    _getNumberItem(key: string, defaultValue: number) {\r\n        const value = localStorage.getItem(key);\r\n\r\n        if (value === null) {\r\n            return defaultValue;\r\n        }\r\n\r\n        return Number(value);\r\n    }\r\n\r\n    _setOptionalItem(key: string, value?: string) {\r\n        if (typeof value === 'undefined') {\r\n            localStorage.removeItem(key);\r\n        } else {\r\n            localStorage.setItem(key, value);\r\n        }\r\n    }\r\n\r\n    get ankiConnectUrl() {\r\n        return localStorage.getItem(ankiConnectUrlKey) || defaultAnkiConnectUrl;\r\n    }\r\n\r\n    set ankiConnectUrl(url) {\r\n        localStorage.setItem(ankiConnectUrlKey, url);\r\n    }\r\n\r\n    get deck() {\r\n        return localStorage.getItem(deckKey) ?? undefined;\r\n    }\r\n\r\n    set deck(deck) {\r\n        this._setOptionalItem(deckKey, deck);\r\n    }\r\n\r\n    get noteType() {\r\n        return localStorage.getItem(noteTypeKey) ?? undefined;\r\n    }\r\n\r\n    set noteType(noteType) {\r\n        this._setOptionalItem(noteTypeKey, noteType);\r\n    }\r\n\r\n    get sentenceField() {\r\n        return localStorage.getItem(sentenceFieldKey) ?? undefined;\r\n    }\r\n\r\n    set sentenceField(sentenceField) {\r\n        this._setOptionalItem(sentenceFieldKey, sentenceField);\r\n    }\r\n\r\n    get definitionField() {\r\n        return localStorage.getItem(definitionFieldKey) ?? undefined;\r\n    }\r\n\r\n    set definitionField(definitionField) {\r\n        this._setOptionalItem(definitionFieldKey, definitionField);\r\n    }\r\n\r\n    get audioField() {\r\n        return localStorage.getItem(audioFieldKey) ?? undefined;\r\n    }\r\n\r\n    set audioField(audioField) {\r\n        this._setOptionalItem(audioFieldKey, audioField);\r\n    }\r\n\r\n    get imageField() {\r\n        return localStorage.getItem(imageFieldKey) ?? undefined;\r\n    }\r\n\r\n    set imageField(imageField) {\r\n        this._setOptionalItem(imageFieldKey, imageField);\r\n    }\r\n\r\n    get wordField() {\r\n        return localStorage.getItem(wordFieldKey) ?? undefined;\r\n    }\r\n\r\n    set wordField(wordField) {\r\n        this._setOptionalItem(wordFieldKey, wordField);\r\n    }\r\n\r\n    get sourceField() {\r\n        return localStorage.getItem(sourceFieldKey) ?? undefined;\r\n    }\r\n\r\n    set sourceField(sourceField) {\r\n        this._setOptionalItem(sourceFieldKey, sourceField);\r\n    }\r\n\r\n    get urlField() {\r\n        return localStorage.getItem(urlFieldKey) ?? undefined;\r\n    }\r\n\r\n    set urlField(urlField) {\r\n        this._setOptionalItem(urlFieldKey, urlField);\r\n    }\r\n\r\n    get customAnkiFields() {\r\n        const ankiFieldsString = localStorage.getItem(customAnkiFieldsKey);\r\n\r\n        if (ankiFieldsString) {\r\n            return JSON.parse(ankiFieldsString);\r\n        }\r\n\r\n        return {};\r\n    }\r\n\r\n    set customAnkiFields(customAnkiFields) {\r\n        localStorage.setItem(customAnkiFieldsKey, JSON.stringify(customAnkiFields));\r\n    }\r\n\r\n    get tags() {\r\n        if (typeof this._tags !== 'undefined') {\r\n            return this._tags;\r\n        }\r\n\r\n        const tagsString = localStorage.getItem(tagsKey);\r\n\r\n        if (tagsString) {\r\n            this._tags = JSON.parse(tagsString) as string[];\r\n            return this._tags;\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    set tags(tags) {\r\n        localStorage.setItem(tagsKey, JSON.stringify(tags));\r\n        this._tags = undefined;\r\n    }\r\n\r\n    get subtitleColor() {\r\n        return localStorage.getItem(subtitleColorKey) || defaultSubtitleColor;\r\n    }\r\n\r\n    set subtitleColor(subtitleColor) {\r\n        localStorage.setItem(subtitleColorKey, subtitleColor);\r\n    }\r\n\r\n    get subtitleSize() {\r\n        return this._getNumberItem(subtitleSizeKey, defaultSubtitleSize);\r\n    }\r\n\r\n    set subtitleSize(subtitleSize) {\r\n        localStorage.setItem(subtitleSizeKey, String(subtitleSize));\r\n    }\r\n\r\n    get subtitleOutlineColor() {\r\n        return localStorage.getItem(subtitleOutlineColorKey) || defaultSubtitleOutlineColor;\r\n    }\r\n\r\n    set subtitleOutlineColor(subtitleOutlineColor) {\r\n        localStorage.setItem(subtitleOutlineColorKey, subtitleOutlineColor);\r\n    }\r\n\r\n    get subtitleOutlineThickness() {\r\n        return this._getNumberItem(subtitleOutlineThicknessKey, defaultSubtitleOutlineThickness);\r\n    }\r\n\r\n    set subtitleOutlineThickness(subtitleOutlineThickness) {\r\n        localStorage.setItem(subtitleOutlineThicknessKey, String(subtitleOutlineThickness));\r\n    }\r\n\r\n    get subtitleBackgroundColor() {\r\n        return localStorage.getItem(subtitleBackgroundColorKey) || defaultSubtitleBackgroundColor;\r\n    }\r\n\r\n    set subtitleBackgroundColor(subtitleBackgroundColor) {\r\n        localStorage.setItem(subtitleBackgroundColorKey, subtitleBackgroundColor);\r\n    }\r\n\r\n    get subtitleBackgroundOpacity() {\r\n        return this._getNumberItem(subtitleBackgroundOpacityKey, defaultSubtitleBackgroundOpacity);\r\n    }\r\n\r\n    set subtitleBackgroundOpacity(subtitleBackgroundOpacity) {\r\n        localStorage.setItem(subtitleBackgroundOpacityKey, String(subtitleBackgroundOpacity));\r\n    }\r\n\r\n    get subtitleFontFamily() {\r\n        return localStorage.getItem(subtitleFontFamilyKey) || defaultSubtitleFontFamily;\r\n    }\r\n\r\n    set subtitleFontFamily(subtitleFontFamily) {\r\n        localStorage.setItem(subtitleFontFamilyKey, subtitleFontFamily);\r\n    }\r\n\r\n    get subtitlePreview() {\r\n        return localStorage.getItem(subtitlePreviewKey) || defaultSubtitlePreview;\r\n    }\r\n\r\n    set subtitlePreview(subtitlePreview) {\r\n        localStorage.setItem(subtitlePreviewKey, subtitlePreview);\r\n    }\r\n\r\n    get imageBasedSubtitleScaleFactor() {\r\n        return this._getNumberItem(imageBasedSubtitleScaleFactorKey, 1);\r\n    }\r\n\r\n    set imageBasedSubtitleScaleFactor(imageBasedSubtitleScaleFactor: number) {\r\n        localStorage.setItem(imageBasedSubtitleScaleFactorKey, String(imageBasedSubtitleScaleFactor));\r\n    }\r\n\r\n    get volume() {\r\n        return this._getNumberItem(volumeKey, defaultVolume);\r\n    }\r\n\r\n    set volume(volume) {\r\n        localStorage.setItem(volumeKey, String(volume));\r\n    }\r\n\r\n    get theaterMode() {\r\n        return localStorage.getItem(theaterModeKey) === 'true' || false;\r\n    }\r\n\r\n    set theaterMode(theaterMode) {\r\n        localStorage.setItem(theaterModeKey, String(theaterMode));\r\n    }\r\n\r\n    get preferMp3() {\r\n        return localStorage.getItem(preferMp3Key) === 'true' || false;\r\n    }\r\n\r\n    set preferMp3(preferMp3) {\r\n        localStorage.setItem(preferMp3Key, String(preferMp3));\r\n    }\r\n\r\n    get themeType() {\r\n        const themeType = localStorage.getItem(themeTypeKey) as 'dark' | 'light' | null;\r\n\r\n        if (themeType === null) {\r\n            return 'dark';\r\n        }\r\n\r\n        return themeType;\r\n    }\r\n\r\n    set themeType(themeType: 'dark' | 'light') {\r\n        localStorage.setItem(themeTypeKey, themeType);\r\n    }\r\n\r\n    get audioPaddingStart() {\r\n        const value = localStorage.getItem(audioPaddingStartKey);\r\n\r\n        if (!value) {\r\n            return defaultAudioPaddingStart;\r\n        }\r\n\r\n        return Number(value);\r\n    }\r\n\r\n    set audioPaddingStart(audioPaddingStart) {\r\n        localStorage.setItem(audioPaddingStartKey, String(audioPaddingStart));\r\n    }\r\n\r\n    get audioPaddingEnd() {\r\n        return this._getNumberItem(audioPaddingEndKey, defaultAudioPaddingEnd);\r\n    }\r\n\r\n    set audioPaddingEnd(audioPaddingEnd) {\r\n        localStorage.setItem(audioPaddingEndKey, String(audioPaddingEnd));\r\n    }\r\n\r\n    get maxImageWidth() {\r\n        const value = localStorage.getItem(maxImageWidthKey);\r\n\r\n        if (!value) {\r\n            return defaultMaxImageWidth;\r\n        }\r\n\r\n        return Number(value);\r\n    }\r\n\r\n    set maxImageWidth(maxImageWidth) {\r\n        localStorage.setItem(maxImageWidthKey, String(maxImageWidth));\r\n    }\r\n\r\n    get maxImageHeight() {\r\n        return this._getNumberItem(maxImageHeightKey, defaultMaxImageHeight);\r\n    }\r\n\r\n    set maxImageHeight(maxImageHeight) {\r\n        localStorage.setItem(maxImageHeightKey, String(maxImageHeight));\r\n    }\r\n\r\n    get surroundingSubtitlesCountRadius() {\r\n        // For now, not configurable\r\n        return defaultSurroundingSubtitlesCountRadius;\r\n    }\r\n\r\n    get surroundingSubtitlesTimeRadius() {\r\n        // For now, not configurable\r\n        return defaultSurroundingSubtitlesTimeRadius;\r\n    }\r\n\r\n    get copyToClipboardOnMine() {\r\n        return localStorage.getItem(copyToClipboardOnMineKey) === 'true' || false;\r\n    }\r\n\r\n    set copyToClipboardOnMine(copyToClipboardOnMine) {\r\n        localStorage.setItem(copyToClipboardOnMineKey, String(copyToClipboardOnMine));\r\n    }\r\n\r\n    get autoPausePreference() {\r\n        return this._getNumberItem(autoPausePreferenceKey, defaultAutoPausePreference);\r\n    }\r\n\r\n    set autoPausePreference(autoPausePreference) {\r\n        localStorage.setItem(autoPausePreferenceKey, String(autoPausePreference));\r\n    }\r\n}\r\n","import {\r\n    AnkiDialogRequestFromVideoMessage,\r\n    AppBarToggleMessageToVideoMessage,\r\n    AudioTrackModel,\r\n    AudioTrackSelectedFromVideoMessage,\r\n    AudioTrackSelectedToVideoMessage,\r\n    CopyMessage,\r\n    CurrentTimeToVideoMessage,\r\n    FinishedAnkiDialogRequestToVideoMessage,\r\n    HideSubtitlePlayerToggleToVideoMessage,\r\n    OffsetFromVideoMessage,\r\n    PauseFromVideoMessage,\r\n    PlayFromVideoMessage,\r\n    PlayMode,\r\n    PlayModeMessage,\r\n    PostMineAction,\r\n    ReadyFromVideoMessage,\r\n    ReadyStateFromVideoMessage,\r\n    ReadyToVideoMessage,\r\n    SubtitleModel,\r\n    SubtitlesToVideoMessage,\r\n    ToggleSubtitleTrackInListFromVideoMessage,\r\n} from '@project/common';\r\n\r\nexport default class PlayerChannel {\r\n    private channel?: BroadcastChannel;\r\n    private time: number;\r\n    private duration: number;\r\n    private readyCallbacks: ((duration: number) => void)[];\r\n    private playCallbacks: (() => void)[];\r\n    private pauseCallbacks: (() => void)[];\r\n    private currentTimeCallbacks: ((currentTime: number) => void)[];\r\n    private audioTrackSelectedCallbacks: ((id: string) => void)[];\r\n    private closeCallbacks: (() => void)[];\r\n    private subtitlesCallbacks: ((subtitles: SubtitleModel[]) => void)[];\r\n    private playModeCallbacks: ((playMode: PlayMode) => void)[];\r\n    private hideSubtitlePlayerToggleCallbacks: ((hidden: boolean) => void)[];\r\n    private appBarToggleCallbacks: ((hidden: boolean) => void)[];\r\n    private ankiDialogRequestCallbacks: (() => void)[];\r\n    private finishedAnkiDialogRequestCallbacks: ((resume: boolean) => void)[];\r\n\r\n    constructor(channel: string) {\r\n        this.channel = new BroadcastChannel(channel);\r\n        this.time = 0;\r\n        this.duration = 0;\r\n        this.playCallbacks = [];\r\n        this.pauseCallbacks = [];\r\n        this.currentTimeCallbacks = [];\r\n        this.audioTrackSelectedCallbacks = [];\r\n        this.closeCallbacks = [];\r\n        this.readyCallbacks = [];\r\n        this.subtitlesCallbacks = [];\r\n        this.playModeCallbacks = [];\r\n        this.hideSubtitlePlayerToggleCallbacks = [];\r\n        this.appBarToggleCallbacks = [];\r\n        this.ankiDialogRequestCallbacks = [];\r\n        this.finishedAnkiDialogRequestCallbacks = [];\r\n\r\n        const that = this;\r\n\r\n        this.channel.onmessage = (event) => {\r\n            switch (event.data.command) {\r\n                case 'init':\r\n                    // ignore, this is for the chrome extension\r\n                    break;\r\n                case 'ready':\r\n                    const readyMessage = event.data as ReadyToVideoMessage;\r\n\r\n                    for (let callback of that.readyCallbacks) {\r\n                        callback(readyMessage.duration);\r\n                    }\r\n                    break;\r\n                case 'play':\r\n                    for (let callback of that.playCallbacks) {\r\n                        callback();\r\n                    }\r\n                    break;\r\n                case 'pause':\r\n                    for (let callback of that.pauseCallbacks) {\r\n                        callback();\r\n                    }\r\n                    break;\r\n                case 'currentTime':\r\n                    const currentTimeMessage = event.data as CurrentTimeToVideoMessage;\r\n\r\n                    for (let callback of that.currentTimeCallbacks) {\r\n                        callback(currentTimeMessage.value);\r\n                    }\r\n                    break;\r\n                case 'audioTrackSelected':\r\n                    const audioTrackSelectedMessage = event.data as AudioTrackSelectedToVideoMessage;\r\n\r\n                    for (let callback of that.audioTrackSelectedCallbacks) {\r\n                        callback(audioTrackSelectedMessage.id);\r\n                    }\r\n                    break;\r\n                case 'close':\r\n                    for (let callback of that.closeCallbacks) {\r\n                        callback();\r\n                    }\r\n                    break;\r\n                case 'subtitles':\r\n                    const subtitlesMessage = event.data as SubtitlesToVideoMessage;\r\n\r\n                    for (let callback of that.subtitlesCallbacks) {\r\n                        callback(subtitlesMessage.value);\r\n                    }\r\n                    break;\r\n                case 'subtitleSettings':\r\n                    // ignore\r\n                    break;\r\n                case 'playMode':\r\n                    const playModeMessage = event.data as PlayModeMessage;\r\n\r\n                    for (let callback of that.playModeCallbacks) {\r\n                        callback(playModeMessage.playMode);\r\n                    }\r\n                    break;\r\n                case 'hideSubtitlePlayerToggle':\r\n                    const hideSubtitlePlayerToggleMessage = event.data as HideSubtitlePlayerToggleToVideoMessage;\r\n\r\n                    for (let callback of that.hideSubtitlePlayerToggleCallbacks) {\r\n                        callback(hideSubtitlePlayerToggleMessage.value);\r\n                    }\r\n                    break;\r\n                case 'appBarToggle':\r\n                    const appBarToggleMessage = event.data as AppBarToggleMessageToVideoMessage;\r\n\r\n                    for (let callback of that.appBarToggleCallbacks) {\r\n                        callback(appBarToggleMessage.value);\r\n                    }\r\n                    break;\r\n                case 'ankiDialogRequest':\r\n                    for (let callback of that.ankiDialogRequestCallbacks) {\r\n                        callback();\r\n                    }\r\n                    break;\r\n                case 'finishedAnkiDialogRequest':\r\n                    const finishedAnkiDialogRequestMessage = event.data as FinishedAnkiDialogRequestToVideoMessage;\r\n\r\n                    for (let callback of that.finishedAnkiDialogRequestCallbacks) {\r\n                        callback(finishedAnkiDialogRequestMessage.resume);\r\n                    }\r\n                    break;\r\n                case 'ankiSettings':\r\n                    // ignore\r\n                    break;\r\n                case 'miscSettings':\r\n                    // ignore\r\n                    break;\r\n                default:\r\n                    console.error('Unrecognized event ' + event.data.command);\r\n            }\r\n        };\r\n    }\r\n\r\n    set currentTime(value: number) {\r\n        this.time = value;\r\n        this.channel?.postMessage({ command: 'currentTime', value: this.time, echo: true });\r\n    }\r\n\r\n    onPlay(callback: () => void) {\r\n        this.playCallbacks.push(callback);\r\n    }\r\n\r\n    onPause(callback: () => void) {\r\n        this.pauseCallbacks.push(callback);\r\n    }\r\n\r\n    onCurrentTime(callback: (currentTime: number) => void) {\r\n        this.currentTimeCallbacks.push(callback);\r\n    }\r\n\r\n    onAudioTrackSelected(callback: (id: string) => void) {\r\n        this.audioTrackSelectedCallbacks.push(callback);\r\n    }\r\n\r\n    onClose(callback: () => void) {\r\n        this.closeCallbacks.push(callback);\r\n    }\r\n\r\n    onReady(callback: (duration: number) => void) {\r\n        this.readyCallbacks.push(callback);\r\n    }\r\n\r\n    onSubtitles(callback: (subtitles: SubtitleModel[]) => void) {\r\n        this.subtitlesCallbacks.push(callback);\r\n    }\r\n\r\n    onPlayMode(callback: (playMode: PlayMode) => void) {\r\n        this.playModeCallbacks.push(callback);\r\n    }\r\n\r\n    onHideSubtitlePlayerToggle(callback: (hidden: boolean) => void) {\r\n        this.hideSubtitlePlayerToggleCallbacks.push(callback);\r\n    }\r\n\r\n    onAppBarToggle(callback: (hidden: boolean) => void) {\r\n        this.appBarToggleCallbacks.push(callback);\r\n    }\r\n\r\n    onAnkiDialogRequest(callback: () => void) {\r\n        this.ankiDialogRequestCallbacks.push(callback);\r\n    }\r\n\r\n    onFinishedAnkiDialogRequest(callback: (resume: boolean) => void) {\r\n        this.finishedAnkiDialogRequestCallbacks.push(callback);\r\n    }\r\n\r\n    ready(\r\n        duration: number,\r\n        paused: boolean,\r\n        audioTracks: AudioTrackModel[] | undefined,\r\n        selectedAudioTrack: string | undefined\r\n    ) {\r\n        const message: ReadyFromVideoMessage = {\r\n            command: 'ready',\r\n            duration: duration,\r\n            paused: paused,\r\n            currentTime: 0,\r\n            audioTracks: audioTracks,\r\n            selectedAudioTrack: selectedAudioTrack,\r\n            playbackRate: 1,\r\n        };\r\n\r\n        this.channel?.postMessage(message);\r\n    }\r\n\r\n    readyState(readyState: number) {\r\n        const message: ReadyStateFromVideoMessage = { command: 'readyState', value: readyState };\r\n        this.channel?.postMessage(message);\r\n    }\r\n\r\n    play() {\r\n        const message: PlayFromVideoMessage = { command: 'play', echo: true };\r\n        this.channel?.postMessage(message);\r\n    }\r\n\r\n    pause() {\r\n        const message: PauseFromVideoMessage = { command: 'pause', echo: true };\r\n        this.channel?.postMessage(message);\r\n    }\r\n\r\n    audioTrackSelected(id: string) {\r\n        const message: AudioTrackSelectedFromVideoMessage = { command: 'audioTrackSelected', id: id };\r\n        this.channel?.postMessage(message);\r\n    }\r\n\r\n    offset(offset: number) {\r\n        const message: OffsetFromVideoMessage = { command: 'offset', value: offset };\r\n        this.channel?.postMessage(message);\r\n    }\r\n\r\n    popOutToggle() {\r\n        this.channel?.postMessage({ command: 'popOutToggle' });\r\n    }\r\n\r\n    copy(\r\n        subtitle: SubtitleModel,\r\n        surroundingSubtitles: SubtitleModel[],\r\n        postMineAction: PostMineAction,\r\n        preventDuplicate?: boolean\r\n    ) {\r\n        const message: CopyMessage = {\r\n            command: 'copy',\r\n            subtitle: subtitle,\r\n            surroundingSubtitles: surroundingSubtitles,\r\n            preventDuplicate: preventDuplicate,\r\n            postMineAction: postMineAction,\r\n        };\r\n\r\n        this.channel?.postMessage(message);\r\n    }\r\n\r\n    playMode(playMode: PlayMode) {\r\n        this.channel?.postMessage({ command: 'playMode', playMode: playMode });\r\n    }\r\n\r\n    hideSubtitlePlayerToggle() {\r\n        this.channel?.postMessage({ command: 'hideSubtitlePlayerToggle' });\r\n    }\r\n\r\n    appBarToggle() {\r\n        this.channel?.postMessage({ command: 'appBarToggle' });\r\n    }\r\n\r\n    ankiDialogRequest(forwardToVideo: boolean) {\r\n        const message: AnkiDialogRequestFromVideoMessage = {\r\n            command: 'ankiDialogRequest',\r\n            forwardToVideo: forwardToVideo,\r\n        };\r\n        this.channel?.postMessage(message);\r\n    }\r\n\r\n    toggleSubtitleTrackInList(track: number) {\r\n        const message: ToggleSubtitleTrackInListFromVideoMessage = {\r\n            command: 'toggleSubtitleTrackInList',\r\n            track: track,\r\n        };\r\n        this.channel?.postMessage(message);\r\n    }\r\n\r\n    close() {\r\n        if (this.channel) {\r\n            this.channel.postMessage({ command: 'exit' });\r\n            this.channel.close();\r\n            this.channel = undefined;\r\n            this.playCallbacks = [];\r\n            this.pauseCallbacks = [];\r\n            this.currentTimeCallbacks = [];\r\n            this.audioTrackSelectedCallbacks = [];\r\n            this.closeCallbacks = [];\r\n            this.readyCallbacks = [];\r\n            this.subtitlesCallbacks = [];\r\n            this.playModeCallbacks = [];\r\n            this.hideSubtitlePlayerToggleCallbacks = [];\r\n            this.appBarToggleCallbacks = [];\r\n            this.ankiDialogRequestCallbacks = [];\r\n            this.finishedAnkiDialogRequestCallbacks = [];\r\n        }\r\n    }\r\n}\r\n","import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\r\nimport { isMobile } from 'react-device-detect';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useWindowSize } from '../hooks/useWindowSize';\r\nimport { arrayEquals, computeStyles } from '../services/Util';\r\nimport {\r\n    KeyBindings,\r\n    surroundingSubtitles,\r\n    mockSurroundingSubtitles,\r\n    humanReadableTime,\r\n    SubtitleModel,\r\n    AudioTrackModel,\r\n    PostMineAction,\r\n    PlayMode,\r\n} from '@project/common';\r\nimport { SubtitleTextImage } from '@project/common/components';\r\nimport Alert from './Alert';\r\nimport Clock from '../services/Clock';\r\nimport Controls, { Point } from './Controls';\r\nimport PlayerChannel from '../services/PlayerChannel';\r\nimport SettingsProvider from '../services/SettingsProvider';\r\n\r\ninterface ExperimentalHTMLVideoElement extends HTMLVideoElement {\r\n    readonly audioTracks: any;\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        position: 'relative',\r\n        backgroundColor: 'black',\r\n        height: '100vh',\r\n        overflow: 'hidden',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n    },\r\n    video: {\r\n        margin: 'auto',\r\n    },\r\n    cursorHidden: {\r\n        cursor: 'none',\r\n    },\r\n    subtitleContainer: {\r\n        position: 'absolute',\r\n        paddingLeft: 20,\r\n        paddingRight: 20,\r\n        bottom: 100,\r\n        textAlign: 'center',\r\n        whiteSpace: 'pre-wrap',\r\n        lineHeight: 'normal',\r\n    },\r\n});\r\n\r\nfunction notifyReady(\r\n    element: ExperimentalHTMLVideoElement,\r\n    playerChannel: PlayerChannel,\r\n    setAudioTracks: React.Dispatch<React.SetStateAction<AudioTrackModel[] | undefined>>,\r\n    setSelectedAudioTrack: React.Dispatch<React.SetStateAction<string | undefined>>\r\n) {\r\n    if (window.outerWidth && element.videoWidth > 0 && element.videoHeight > 0) {\r\n        const availWidth = window.screen.availWidth - (window.outerWidth - window.innerWidth);\r\n        const availHeight = window.screen.availHeight - (window.outerHeight - window.innerHeight);\r\n        const resizeRatio = Math.min(1, Math.min(availWidth / element.videoWidth, availHeight / element.videoHeight));\r\n\r\n        window.resizeTo(\r\n            resizeRatio * element.videoWidth + (window.outerWidth - window.innerWidth),\r\n            resizeRatio * element.videoHeight + (window.outerHeight - window.innerHeight)\r\n        );\r\n    }\r\n\r\n    let tracks: AudioTrackModel[] | undefined;\r\n    let selectedTrack: string | undefined;\r\n\r\n    if (element.audioTracks) {\r\n        tracks = [];\r\n\r\n        for (let t of element.audioTracks) {\r\n            tracks.push({\r\n                id: t.id,\r\n                label: t.label,\r\n                language: t.language,\r\n            });\r\n\r\n            if (t.enabled) {\r\n                selectedTrack = t.id;\r\n            }\r\n        }\r\n    } else {\r\n        tracks = undefined;\r\n        selectedTrack = undefined;\r\n    }\r\n\r\n    setAudioTracks(tracks);\r\n    setSelectedAudioTrack(selectedTrack);\r\n    playerChannel.ready(element.duration, element.paused, tracks, selectedTrack);\r\n}\r\n\r\nfunction errorMessage(element: HTMLVideoElement) {\r\n    let error;\r\n    switch (element.error?.code) {\r\n        case 1:\r\n            error = 'Aborted';\r\n            break;\r\n        case 2:\r\n            error = 'Network error';\r\n            break;\r\n        case 3:\r\n            error = 'Decoding error';\r\n            break;\r\n        case 4:\r\n            error = 'Source not supported';\r\n            break;\r\n        default:\r\n            error = 'Unknown error';\r\n            break;\r\n    }\r\n\r\n    return error + ': ' + (element.error?.message || '<details missing>');\r\n}\r\n\r\nfunction useFullscreen() {\r\n    const [fullscreen, setFullscreen] = useState(Boolean(document.fullscreenElement));\r\n\r\n    useEffect(() => {\r\n        const listener = () => setFullscreen(Boolean(document.fullscreenElement));\r\n        document.addEventListener('fullscreenchange', listener);\r\n\r\n        return () => document.removeEventListener('fullscreenchange', listener);\r\n    }, []);\r\n\r\n    return fullscreen;\r\n}\r\n\r\ninterface Props {\r\n    settingsProvider: SettingsProvider;\r\n    videoFile: string;\r\n    channel: string;\r\n    popOut: boolean;\r\n    onError: (error: string) => void;\r\n    onAutoPauseModeChangedViaBind: (playMode: PlayMode) => void;\r\n}\r\n\r\ninterface IndexedSubtitleModel extends SubtitleModel {\r\n    index: number;\r\n}\r\n\r\nexport default function VideoPlayer(props: Props) {\r\n    const classes = useStyles();\r\n    const { settingsProvider, videoFile, channel, popOut, onError, onAutoPauseModeChangedViaBind } = props;\r\n    const poppingInRef = useRef<boolean>();\r\n    const videoRef = useRef<ExperimentalHTMLVideoElement>();\r\n    const [windowWidth, windowHeight] = useWindowSize(true);\r\n    if (videoRef.current) {\r\n        videoRef.current.width = windowWidth;\r\n        videoRef.current.height = windowHeight;\r\n    }\r\n    const playerChannel = useMemo(() => new PlayerChannel(channel), [channel]);\r\n    const [playing, setPlaying] = useState<boolean>(false);\r\n    const fullscreen = useFullscreen();\r\n    const fullscreenRef = useRef<boolean>();\r\n    fullscreenRef.current = fullscreen;\r\n    const playingRef = useRef<boolean>();\r\n    playingRef.current = playing;\r\n    const [length, setLength] = useState<number>(0);\r\n    const [offset, setOffset] = useState<number>(0);\r\n    const [audioTracks, setAudioTracks] = useState<AudioTrackModel[]>();\r\n    const [selectedAudioTrack, setSelectedAudioTrack] = useState<string>();\r\n    const [subtitles, setSubtitles] = useState<SubtitleModel[]>([]);\r\n    const [showSubtitles, setShowSubtitles] = useState<IndexedSubtitleModel[]>([]);\r\n    const [subtitlesEnabled, setSubtitlesEnabled] = useState(true);\r\n    const [disabledSubtitleTracks, setDisabledSubtitleTracks] = useState<{ [index: number]: boolean }>({});\r\n    const [playMode, setPlayMode] = useState<PlayMode>(PlayMode.normal);\r\n    const [subtitlePlayerHidden, setSubtitlePlayerHidden] = useState<boolean>(false);\r\n    const [appBarHidden, setAppBarHidden] = useState<boolean>(settingsProvider.theaterMode);\r\n    const showSubtitlesRef = useRef<IndexedSubtitleModel[]>([]);\r\n    showSubtitlesRef.current = showSubtitles;\r\n    const clock = useMemo<Clock>(() => new Clock(), []);\r\n    const mousePositionRef = useRef<Point>({ x: 0, y: 0 });\r\n    const [showCursor, setShowCursor] = useState<boolean>(false);\r\n    const lastMouseMovementTimestamp = useRef<number>(0);\r\n    const containerRef = useRef<HTMLDivElement>(null);\r\n    const [alert, setAlert] = useState<string>();\r\n    const [alertOpen, setAlertOpen] = useState<boolean>(false);\r\n    const [returnToFullscreenOnFinishedAnkiDialogRequest, setReturnToFullscreenOnFinishedAnkiDialogRequest] =\r\n        useState<boolean>(false);\r\n    const returnToFullscreenOnFinishedAnkiDialogRequestRef = useRef<boolean>();\r\n    returnToFullscreenOnFinishedAnkiDialogRequestRef.current = returnToFullscreenOnFinishedAnkiDialogRequest;\r\n\r\n    const videoRefCallback = useCallback(\r\n        (element: HTMLVideoElement) => {\r\n            if (element) {\r\n                const videoElement = element as ExperimentalHTMLVideoElement;\r\n                videoRef.current = videoElement;\r\n\r\n                if (videoElement.readyState === 4) {\r\n                    notifyReady(videoElement, playerChannel, setAudioTracks, setSelectedAudioTrack);\r\n                } else {\r\n                    videoElement.onloadeddata = (event) => {\r\n                        notifyReady(videoElement, playerChannel, setAudioTracks, setSelectedAudioTrack);\r\n                    };\r\n                }\r\n\r\n                videoElement.oncanplay = (event) => {\r\n                    playerChannel.readyState(4);\r\n\r\n                    if (playingRef.current) {\r\n                        clock.start();\r\n                    }\r\n                };\r\n\r\n                videoElement.ontimeupdate = (event) => clock.setTime(element.currentTime * 1000);\r\n\r\n                videoElement.onerror = (event) => onError(errorMessage(element));\r\n            }\r\n        },\r\n        [clock, playerChannel, onError]\r\n    );\r\n\r\n    function selectAudioTrack(id: string) {\r\n        const audioTracks = videoRef.current?.audioTracks;\r\n\r\n        if (!audioTracks) {\r\n            return;\r\n        }\r\n\r\n        // @ts-ignore\r\n        for (const t of audioTracks) {\r\n            if (t.id === id) {\r\n                t.enabled = true;\r\n            } else {\r\n                t.enabled = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        playerChannel.onReady((duration) => setLength(duration));\r\n\r\n        playerChannel.onPlay(async () => {\r\n            await videoRef.current?.play();\r\n            clock.start();\r\n            setPlaying(true);\r\n        });\r\n\r\n        playerChannel.onPause(() => {\r\n            videoRef.current?.pause();\r\n            clock.stop();\r\n            setPlaying(false);\r\n        });\r\n\r\n        playerChannel.onCurrentTime((currentTime) => {\r\n            if (videoRef.current) {\r\n                videoRef.current.currentTime = currentTime;\r\n            }\r\n\r\n            if (videoRef.current?.readyState === 4) {\r\n                playerChannel.readyState(4);\r\n            }\r\n\r\n            clock.stop();\r\n            clock.setTime(currentTime * 1000);\r\n        });\r\n\r\n        playerChannel.onAudioTrackSelected((id) => {\r\n            selectAudioTrack(id);\r\n            setSelectedAudioTrack(id);\r\n            playerChannel.audioTrackSelected(id);\r\n        });\r\n\r\n        playerChannel.onClose(() => {\r\n            playerChannel.close();\r\n            window.close();\r\n        });\r\n\r\n        playerChannel.onSubtitles((subtitles) => {\r\n            setSubtitles(subtitles);\r\n\r\n            if (subtitles && subtitles.length > 0) {\r\n                const s = subtitles[0];\r\n                const offset = s.start - s.originalStart;\r\n                setOffset(offset);\r\n            }\r\n        });\r\n\r\n        playerChannel.onPlayMode((playMode) => setPlayMode(playMode));\r\n        playerChannel.onHideSubtitlePlayerToggle((hidden) => setSubtitlePlayerHidden(hidden));\r\n        playerChannel.onAppBarToggle((hidden) => setAppBarHidden(hidden));\r\n        playerChannel.onAnkiDialogRequest(() => {\r\n            if (fullscreenRef.current && !popOut) {\r\n                document.exitFullscreen();\r\n                setReturnToFullscreenOnFinishedAnkiDialogRequest(true);\r\n            }\r\n        });\r\n\r\n        playerChannel.onFinishedAnkiDialogRequest(async (resume) => {\r\n            if (returnToFullscreenOnFinishedAnkiDialogRequestRef.current) {\r\n                if (resume) {\r\n                    try {\r\n                        await containerRef.current?.requestFullscreen();\r\n                    } catch (e) {\r\n                        console.error(e);\r\n                    }\r\n                }\r\n\r\n                setReturnToFullscreenOnFinishedAnkiDialogRequest(false);\r\n            }\r\n        });\r\n\r\n        window.onbeforeunload = (e) => {\r\n            if (!poppingInRef.current) {\r\n                playerChannel.close();\r\n            }\r\n        };\r\n\r\n        return () => playerChannel.close();\r\n    }, [clock, playerChannel, popOut]);\r\n\r\n    const handlePlay = useCallback(() => {\r\n        if (videoRef.current) {\r\n            playerChannel.play();\r\n        }\r\n    }, [playerChannel]);\r\n\r\n    const handlePause = useCallback(() => playerChannel.pause(), [playerChannel]);\r\n\r\n    const handleSeek = useCallback(\r\n        (progress: number) => {\r\n            if (playingRef.current) {\r\n                clock.stop();\r\n            }\r\n\r\n            const time = progress * length;\r\n            playerChannel.currentTime = time / 1000;\r\n        },\r\n        [length, clock, playerChannel]\r\n    );\r\n\r\n    function handleMouseMove(e: React.MouseEvent<HTMLDivElement>) {\r\n        lastMouseMovementTimestamp.current = Date.now();\r\n\r\n        if (!containerRef.current) {\r\n            return;\r\n        }\r\n\r\n        var bounds = containerRef.current.getBoundingClientRect();\r\n        mousePositionRef.current.x = e.clientX - bounds.left;\r\n        mousePositionRef.current.y = e.clientY - bounds.top;\r\n    }\r\n\r\n    const handleAudioTrackSelected = useCallback(\r\n        (id: string) => {\r\n            if (playingRef.current) {\r\n                clock.stop();\r\n                playerChannel.pause();\r\n            }\r\n\r\n            selectAudioTrack(id);\r\n            setSelectedAudioTrack(id);\r\n            playerChannel.currentTime = 0;\r\n            playerChannel.audioTrackSelected(id);\r\n        },\r\n        [playerChannel, clock]\r\n    );\r\n\r\n    useEffect(() => {\r\n        if (!subtitles || subtitles.length === 0) {\r\n            return;\r\n        }\r\n\r\n        const interval = setInterval(() => {\r\n            const now = clock.time(length);\r\n            let showSubtitles = [];\r\n\r\n            for (let i = 0; i < subtitles.length; ++i) {\r\n                const s = subtitles[i];\r\n\r\n                if (now >= s.start && now < s.end && !disabledSubtitleTracks[s.track]) {\r\n                    showSubtitles.push({ ...s, index: i });\r\n                }\r\n\r\n                if (now < s.start) {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            showSubtitles = showSubtitles.sort((s1, s2) => s1.track - s2.track);\r\n\r\n            if (!arrayEquals(showSubtitles, showSubtitlesRef.current, (s1, s2) => s1.index === s2.index)) {\r\n                setShowSubtitles(showSubtitles);\r\n            }\r\n        }, 50);\r\n\r\n        return () => clearTimeout(interval);\r\n    }, [subtitles, disabledSubtitleTracks, clock, length]);\r\n\r\n    const handleOffsetChange = useCallback(\r\n        (offset: number) => {\r\n            setOffset(offset);\r\n            setSubtitles((subtitles) =>\r\n                subtitles.map((s) => ({\r\n                    text: s.text,\r\n                    textImage: s.textImage,\r\n                    start: s.originalStart + offset,\r\n                    originalStart: s.originalStart,\r\n                    end: s.originalEnd + offset,\r\n                    originalEnd: s.originalEnd,\r\n                    track: s.track,\r\n                }))\r\n            );\r\n            playerChannel.offset(offset);\r\n        },\r\n        [playerChannel]\r\n    );\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindSeekToSubtitle(\r\n            (event, subtitle) => {\r\n                event.stopPropagation();\r\n                event.preventDefault();\r\n                playerChannel.currentTime = subtitle.start / 1000;\r\n            },\r\n            () => !videoRef.current,\r\n            () => clock.time(length),\r\n            () => subtitles\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [playerChannel, subtitles, length, clock]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindSeekToBeginningOfCurrentSubtitle(\r\n            (event, subtitle) => {\r\n                event.stopPropagation();\r\n                event.preventDefault();\r\n                playerChannel.currentTime = subtitle.start / 1000;\r\n            },\r\n            () => !videoRef.current,\r\n            () => clock.time(length),\r\n            () => subtitles\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [playerChannel, subtitles, length, clock]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindSeekBackwardOrForward(\r\n            (event, forward) => {\r\n                event.stopPropagation();\r\n                event.preventDefault();\r\n                const timestamp = clock.time(length);\r\n\r\n                if (forward) {\r\n                    playerChannel.currentTime = Math.min(length / 1000, (timestamp + 10000) / 1000);\r\n                } else {\r\n                    playerChannel.currentTime = Math.max(0, (timestamp - 10000) / 1000);\r\n                }\r\n            },\r\n            () => !videoRef.current\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [playerChannel, length, clock]);\r\n\r\n    const calculateSurroundingSubtitles = useCallback(\r\n        (index: number) => {\r\n            return surroundingSubtitles(\r\n                subtitles,\r\n                index,\r\n                settingsProvider.surroundingSubtitlesCountRadius,\r\n                settingsProvider.surroundingSubtitlesTimeRadius\r\n            );\r\n        },\r\n        [subtitles, settingsProvider.surroundingSubtitlesCountRadius, settingsProvider.surroundingSubtitlesTimeRadius]\r\n    );\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindCopy<IndexedSubtitleModel>(\r\n            (event, subtitle) => {\r\n                event.stopPropagation();\r\n                event.preventDefault();\r\n\r\n                const noSubtitles = !subtitles || subtitles.length === 0;\r\n\r\n                playerChannel.copy(\r\n                    subtitle,\r\n                    noSubtitles\r\n                        ? mockSurroundingSubtitles(subtitle, length, 5000)\r\n                        : calculateSurroundingSubtitles(subtitle.index),\r\n                    PostMineAction.none\r\n                );\r\n\r\n                if (fullscreen) {\r\n                    setAlert(\r\n                        subtitle.text === ''\r\n                            ? `Saved ${humanReadableTime(subtitle.start)}`\r\n                            : `Copied: \"${subtitle.text}\"`\r\n                    );\r\n                    setAlertOpen(true);\r\n                }\r\n            },\r\n            () => false,\r\n            () => {\r\n                if (!subtitles || subtitles.length === 0) {\r\n                    const timestamp = clock.time(length);\r\n                    const end = Math.min(timestamp + 5000, length);\r\n\r\n                    return {\r\n                        text: '',\r\n                        start: timestamp,\r\n                        originalStart: timestamp,\r\n                        end: end,\r\n                        originalEnd: end,\r\n                        track: 0,\r\n                        index: 0,\r\n                    };\r\n                }\r\n\r\n                if (!showSubtitlesRef.current || showSubtitlesRef.current.length === 0) {\r\n                    return undefined;\r\n                }\r\n\r\n                return showSubtitlesRef.current[0];\r\n            }\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [playerChannel, clock, length, subtitles, calculateSurroundingSubtitles, fullscreen]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindAdjustOffset(\r\n            (event, offset) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                handleOffsetChange(offset);\r\n            },\r\n            () => false,\r\n            () => subtitles\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [handleOffsetChange, subtitles]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindToggleSubtitles(\r\n            (event) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                setSubtitlesEnabled((enabled) => !enabled);\r\n            },\r\n            () => {},\r\n            () => false\r\n        );\r\n\r\n        return () => unbind();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindToggleSubtitleTrackInVideo(\r\n            (event, track) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                setDisabledSubtitleTracks((tracks) => {\r\n                    const newTracks = { ...tracks };\r\n                    newTracks[track] = !tracks[track];\r\n                    return newTracks;\r\n                });\r\n            },\r\n            () => {},\r\n            () => false\r\n        );\r\n\r\n        return () => unbind();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindToggleSubtitleTrackInList(\r\n            (event, track) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                playerChannel.toggleSubtitleTrackInList(track);\r\n            },\r\n            () => {},\r\n            () => false\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [playerChannel]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindOffsetToSubtitle(\r\n            (event, offset) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                handleOffsetChange(offset);\r\n            },\r\n            () => false,\r\n            () => clock.time(length),\r\n            () => subtitles\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [handleOffsetChange, subtitles, clock, length]);\r\n\r\n    const extractSubtitles = useCallback(\r\n        (\r\n            noSubtitleCallback: (subtitle: SubtitleModel, surroundingSubtitles: SubtitleModel[]) => void,\r\n            subtitleCallback: (subtitle: SubtitleModel, surroundingSubtitles: SubtitleModel[]) => void\r\n        ) => {\r\n            if (!subtitles || subtitles.length === 0) {\r\n                const timestamp = clock.time(length);\r\n                const end = Math.min(timestamp + 5000, length);\r\n                const subtitle = {\r\n                    text: '',\r\n                    start: timestamp,\r\n                    originalStart: timestamp,\r\n                    end: end,\r\n                    originalEnd: end,\r\n                    track: 0,\r\n                };\r\n\r\n                noSubtitleCallback(subtitle, mockSurroundingSubtitles(subtitle, length, 5000));\r\n            } else if (showSubtitlesRef.current && showSubtitlesRef.current.length > 0) {\r\n                const currentSubtitle = showSubtitlesRef.current[0];\r\n                subtitleCallback(currentSubtitle, calculateSurroundingSubtitles(currentSubtitle.index));\r\n            }\r\n        },\r\n        [subtitles, calculateSurroundingSubtitles, length, clock]\r\n    );\r\n\r\n    useEffect(() => {\r\n        return KeyBindings.bindAnkiExport(\r\n            (event) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n\r\n                extractSubtitles(\r\n                    (subtitle, surroundingSubtitles) =>\r\n                        playerChannel.copy(subtitle, surroundingSubtitles, PostMineAction.showAnkiDialog, false),\r\n                    (subtitle, surroundingSubtitles) =>\r\n                        playerChannel.copy(subtitle, surroundingSubtitles, PostMineAction.showAnkiDialog, true)\r\n                );\r\n            },\r\n            () => false\r\n        );\r\n    }, [playerChannel, extractSubtitles, fullscreen]);\r\n\r\n    useEffect(() => {\r\n        return KeyBindings.bindUpdateLastCard(\r\n            (event) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n\r\n                extractSubtitles(\r\n                    (subtitle, surroundingSubtitles) =>\r\n                        playerChannel.copy(subtitle, surroundingSubtitles, PostMineAction.updateLastCard, false),\r\n                    (subtitle, surroundingSubtitles) =>\r\n                        playerChannel.copy(subtitle, surroundingSubtitles, PostMineAction.updateLastCard, true)\r\n                );\r\n            },\r\n            () => false\r\n        );\r\n    }, [playerChannel, extractSubtitles]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindPlay(\r\n            (event) => {\r\n                event.preventDefault();\r\n\r\n                if (playing) {\r\n                    playerChannel.pause();\r\n                } else {\r\n                    playerChannel.play();\r\n                }\r\n            },\r\n            () => false\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [playing, playerChannel]);\r\n\r\n    useEffect(() => {\r\n        return KeyBindings.bindAutoPause(\r\n            (event) => {\r\n                event.preventDefault();\r\n                const newPlayMode =\r\n                    playMode === PlayMode.autoPause ? PlayMode.normal : PlayMode.autoPause;\r\n                playerChannel.playMode(newPlayMode);\r\n                onAutoPauseModeChangedViaBind(newPlayMode);\r\n            },\r\n            () => false\r\n        );\r\n    }, [playerChannel, playMode, onAutoPauseModeChangedViaBind]);\r\n\r\n    const handleSubtitlesToggle = useCallback(() => setSubtitlesEnabled((subtitlesEnabled) => !subtitlesEnabled), []);\r\n\r\n    const handleFullscreenToggle = useCallback(() => {\r\n        if (fullscreen) {\r\n            document.exitFullscreen();\r\n        } else {\r\n            containerRef.current?.requestFullscreen();\r\n        }\r\n    }, [fullscreen]);\r\n\r\n    const handleVolumeChange = useCallback((volume: number) => {\r\n        if (videoRef.current) {\r\n            videoRef.current.volume = volume;\r\n        }\r\n    }, []);\r\n\r\n    const handlePopOutToggle = useCallback(() => {\r\n        playerChannel.popOutToggle();\r\n        if (popOut) {\r\n            poppingInRef.current = true;\r\n            window.close();\r\n        }\r\n    }, [playerChannel, popOut]);\r\n\r\n    const handlePlayMode = useCallback(\r\n        (playMode: PlayMode) => {\r\n            playerChannel.playMode(playMode);\r\n        },\r\n        [playerChannel]\r\n    );\r\n\r\n    const handleClose = useCallback(() => {\r\n        playerChannel.close();\r\n        window.close();\r\n    }, [playerChannel]);\r\n\r\n    const handleHideSubtitlePlayerToggle = useCallback(() => {\r\n        playerChannel.hideSubtitlePlayerToggle();\r\n    }, [playerChannel]);\r\n\r\n    const handleTheaterModeToggle = useCallback(() => {\r\n        playerChannel.appBarToggle();\r\n    }, [playerChannel]);\r\n\r\n    const handleClick = useCallback(() => {\r\n        if (playing) {\r\n            playerChannel.pause();\r\n        } else {\r\n            playerChannel.play();\r\n        }\r\n    }, [playerChannel, playing]);\r\n\r\n    const handleDoubleClick = useCallback(() => handleFullscreenToggle(), [handleFullscreenToggle]);\r\n\r\n    const handleAlertClosed = useCallback(() => setAlertOpen(false), []);\r\n    const {\r\n        subtitleSize,\r\n        subtitleColor,\r\n        subtitleOutlineThickness,\r\n        subtitleOutlineColor,\r\n        subtitleBackgroundColor,\r\n        subtitleBackgroundOpacity,\r\n        subtitleFontFamily,\r\n        imageBasedSubtitleScaleFactor,\r\n    } = settingsProvider.subtitleSettings;\r\n    const subtitleStyles = useMemo(\r\n        () =>\r\n            computeStyles({\r\n                subtitleSize,\r\n                subtitleColor,\r\n                subtitleOutlineThickness,\r\n                subtitleOutlineColor,\r\n                subtitleBackgroundColor,\r\n                subtitleBackgroundOpacity,\r\n                subtitleFontFamily,\r\n            }),\r\n        [\r\n            subtitleSize,\r\n            subtitleColor,\r\n            subtitleOutlineThickness,\r\n            subtitleOutlineColor,\r\n            subtitleBackgroundColor,\r\n            subtitleBackgroundOpacity,\r\n            subtitleFontFamily,\r\n        ]\r\n    );\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            if (Date.now() - lastMouseMovementTimestamp.current > 300) {\r\n                if (showCursor) {\r\n                    setShowCursor(false);\r\n                }\r\n            } else if (!showCursor) {\r\n                setShowCursor(true);\r\n            }\r\n        }, 100);\r\n\r\n        return () => clearInterval(interval);\r\n    }, [showCursor]);\r\n\r\n    return (\r\n        <div ref={containerRef} onMouseMove={handleMouseMove} className={classes.root}>\r\n            <video\r\n                preload=\"auto\"\r\n                controls={false}\r\n                onClick={handleClick}\r\n                onDoubleClick={handleDoubleClick}\r\n                className={showCursor ? classes.video : `${classes.cursorHidden} ${classes.video}`}\r\n                ref={videoRefCallback}\r\n                src={videoFile}\r\n            />\r\n            {subtitlesEnabled && (\r\n                <div className={classes.subtitleContainer}>\r\n                    {showSubtitles.map((subtitle, index) => {\r\n                        let content;\r\n\r\n                        if (subtitle.textImage) {\r\n                            content = (\r\n                                <SubtitleTextImage\r\n                                    availableWidth={videoRef.current?.width ?? window.screen.availWidth}\r\n                                    subtitle={subtitle}\r\n                                    scale={imageBasedSubtitleScaleFactor}\r\n                                />\r\n                            );\r\n                        } else {\r\n                            content = <span style={subtitleStyles}>{subtitle.text}</span>;\r\n                        }\r\n\r\n                        if (index < showSubtitles.length - 1) {\r\n                            return (\r\n                                <React.Fragment key={subtitle.index}>\r\n                                    {content}\r\n                                    <br />\r\n                                </React.Fragment>\r\n                            );\r\n                        }\r\n\r\n                        return <React.Fragment key={subtitle.index}>{content}</React.Fragment>;\r\n                    })}\r\n                </div>\r\n            )}\r\n            {fullscreen && (\r\n                <Alert open={alertOpen} onClose={handleAlertClosed} autoHideDuration={3000} severity=\"success\">\r\n                    {alert}\r\n                </Alert>\r\n            )}\r\n            <Controls\r\n                mousePositionRef={mousePositionRef}\r\n                playing={playing}\r\n                clock={clock}\r\n                length={length}\r\n                audioTracks={audioTracks}\r\n                selectedAudioTrack={selectedAudioTrack}\r\n                subtitlesToggle={subtitles && subtitles.length > 0}\r\n                subtitlesEnabled={subtitlesEnabled}\r\n                offsetEnabled={true}\r\n                offset={offset}\r\n                fullscreenEnabled={true}\r\n                fullscreen={fullscreen}\r\n                closeEnabled={!popOut}\r\n                popOut={popOut}\r\n                volumeEnabled={true}\r\n                popOutEnabled={!isMobile}\r\n                playModeEnabled={true}\r\n                playMode={playMode}\r\n                hideSubtitlePlayerToggleEnabled={subtitles?.length > 0 && !popOut && !fullscreen}\r\n                subtitlePlayerHidden={subtitlePlayerHidden}\r\n                onPlay={handlePlay}\r\n                onPause={handlePause}\r\n                onSeek={handleSeek}\r\n                onAudioTrackSelected={handleAudioTrackSelected}\r\n                onSubtitlesToggle={handleSubtitlesToggle}\r\n                onFullscreenToggle={handleFullscreenToggle}\r\n                onVolumeChange={handleVolumeChange}\r\n                onOffsetChange={handleOffsetChange}\r\n                onPopOutToggle={handlePopOutToggle}\r\n                onPlayMode={handlePlayMode}\r\n                onClose={handleClose}\r\n                onHideSubtitlePlayerToggle={handleHideSubtitlePlayerToggle}\r\n                settingsProvider={settingsProvider}\r\n                showOnMouseMovement={false}\r\n                theaterModeToggleEnabled={!popOut}\r\n                theaterModeEnabled={appBarHidden}\r\n                onTheaterModeToggle={handleTheaterModeToggle}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n","import React, { useCallback, useEffect, useState, useMemo, useRef } from 'react';\r\nimport { Route, Navigate, Routes, useLocation, useSearchParams } from 'react-router-dom';\r\nimport { ThemeProvider, createTheme, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport { useWindowSize } from '../hooks/useWindowSize';\r\nimport { red } from '@material-ui/core/colors';\r\nimport {\r\n    Anki,\r\n    AudioClip,\r\n    Image,\r\n    humanReadableTime,\r\n    AnkiDialogSliderContext,\r\n    SubtitleModel,\r\n    VideoTabModel,\r\n    SubtitleSettingsToVideoMessage,\r\n    AnkiSettingsToVideoMessage,\r\n    MiscSettingsToVideoMessage,\r\n    LegacyPlayerSyncMessage,\r\n    PlayerSyncMessage,\r\n    AudioModel,\r\n    ImageModel,\r\n    AsbplayerSettings,\r\n    PostMineAction,\r\n    PlayMode,\r\n    download,\r\n} from '@project/common';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport clsx from 'clsx';\r\nimport Alert from './Alert';\r\nimport { AnkiDialog, ImageDialog } from '@project/common/components';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport DragOverlay from './DragOverlay';\r\nimport SubtitleReader from '../services/SubtitleReader';\r\nimport Bar from './Bar';\r\nimport ChromeExtension, { ExtensionMessage } from '../services/ChromeExtension';\r\nimport CopyHistory, { CopyHistoryItem } from './CopyHistory';\r\nimport LandingPage from './LandingPage';\r\nimport Player, { AnkiDialogFinishedRequest, MediaSources } from './Player';\r\nimport SettingsDialog from './SettingsDialog';\r\nimport SettingsProvider from '../services/SettingsProvider';\r\nimport VideoPlayer from './VideoPlayer';\r\nimport { Color } from '@material-ui/lab';\r\nimport { AnkiExportMode } from '@project/common';\r\n\r\nconst latestExtensionVersion = '0.19.0';\r\nconst extensionUrl = 'https://github.com/killergerbah/asbplayer/releases/latest';\r\n\r\nconst useContentStyles = makeStyles<Theme, ContentProps>((theme) => ({\r\n    content: {\r\n        flexGrow: 1,\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        marginRight: 0,\r\n    },\r\n    contentShift: ({ drawerWidth }) => ({\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n        marginRight: drawerWidth,\r\n    }),\r\n}));\r\n\r\nfunction extractSources(files: FileList | File[]): MediaSources {\r\n    let subtitleFiles = [];\r\n    let audioFile = undefined;\r\n    let videoFile = undefined;\r\n\r\n    for (let i = 0; i < files.length; ++i) {\r\n        const f = files[i];\r\n        const extensionStartIndex = f.name.lastIndexOf('.');\r\n\r\n        if (extensionStartIndex === -1) {\r\n            throw new Error('Unable to determine extension of ' + f.name);\r\n        }\r\n\r\n        const extension = f.name.substring(extensionStartIndex + 1, f.name.length);\r\n        switch (extension) {\r\n            case 'ass':\r\n            case 'srt':\r\n            case 'vtt':\r\n                subtitleFiles.push(f);\r\n                break;\r\n            case 'sup':\r\n                subtitleFiles.push(f);\r\n                break;\r\n            case 'mkv':\r\n            case 'mp4':\r\n            case 'avi':\r\n                if (videoFile) {\r\n                    throw new Error('Cannot open two video files simultaneously');\r\n                }\r\n                videoFile = f;\r\n                break;\r\n            case 'mp3':\r\n            case 'm4a':\r\n            case 'aac':\r\n            case 'flac':\r\n            case 'ogg':\r\n            case 'wav':\r\n            case 'opus':\r\n                if (audioFile) {\r\n                    throw new Error('Cannot open two audio files simultaneously');\r\n                }\r\n                audioFile = f;\r\n                break;\r\n            default:\r\n                throw new Error('Unsupported extension ' + extension);\r\n        }\r\n    }\r\n\r\n    if (videoFile && audioFile) {\r\n        throw new Error('Cannot load both an audio and video file simultaneously');\r\n    }\r\n\r\n    return { subtitleFiles: subtitleFiles, audioFile: audioFile, videoFile: videoFile };\r\n}\r\n\r\nfunction audioClipFromItem(\r\n    item: CopyHistoryItem,\r\n    sliderContext: AnkiDialogSliderContext | undefined,\r\n    paddingStart: number,\r\n    paddingEnd: number\r\n) {\r\n    if (item.audio) {\r\n        const start = item.audio.start ?? item.start;\r\n        const end = item.audio.end ?? item.end;\r\n\r\n        return AudioClip.fromBase64(\r\n            item.subtitleFile!.name,\r\n            Math.max(0, start - (item.audio.paddingStart ?? 0)),\r\n            end + (item.audio.paddingEnd ?? 0),\r\n            item.audio.base64,\r\n            item.audio.extension\r\n        );\r\n    }\r\n\r\n    if (item.audioFile || item.videoFile) {\r\n        let start;\r\n        let end;\r\n\r\n        if (sliderContext) {\r\n            start = sliderContext.subtitleStart;\r\n            end = sliderContext.subtitleEnd;\r\n        } else {\r\n            start = item.start;\r\n            end = item.end;\r\n        }\r\n\r\n        return AudioClip.fromFile(\r\n            (item.audioFile || item.videoFile)!,\r\n            Math.max(0, start - paddingStart),\r\n            end + paddingEnd,\r\n            item.audioTrack\r\n        );\r\n    }\r\n\r\n    return undefined;\r\n}\r\n\r\nfunction imageFromItem(item: CopyHistoryItem, maxWidth: number, maxHeight: number) {\r\n    if (item.image) {\r\n        return Image.fromBase64(item.subtitleFile!.name, item.start, item.image.base64, item.image.extension);\r\n    }\r\n\r\n    if (item.videoFile) {\r\n        return Image.fromFile(item.videoFile, item.mediaTimestamp ?? item.start, maxWidth, maxHeight);\r\n    }\r\n\r\n    return undefined;\r\n}\r\n\r\nfunction itemSourceString(item: CopyHistoryItem | undefined) {\r\n    if (!item) {\r\n        return undefined;\r\n    }\r\n\r\n    const source = item.subtitleFile?.name ?? item.audioFile?.name ?? item.videoFile?.name;\r\n\r\n    if (!source) {\r\n        return undefined;\r\n    }\r\n\r\n    return `${source} (${humanReadableTime(item.start)})`;\r\n}\r\n\r\nfunction itemSliderContext(item: CopyHistoryItem) {\r\n    if (!item) {\r\n        return undefined;\r\n    }\r\n\r\n    return {\r\n        subtitleStart: item.start,\r\n        subtitleEnd: item.end,\r\n        subtitles: item.surroundingSubtitles || [\r\n            { start: item.start, end: item.end, text: item.text, track: item.track },\r\n        ],\r\n    };\r\n}\r\n\r\nfunction revokeUrls(sources: MediaSources) {\r\n    if (sources.audioFileUrl) {\r\n        URL.revokeObjectURL(sources.audioFileUrl);\r\n    }\r\n\r\n    if (sources.videoFileUrl) {\r\n        URL.revokeObjectURL(sources.videoFileUrl);\r\n    }\r\n}\r\n\r\ninterface NavigateToVideoProps {\r\n    searchParams: URLSearchParams;\r\n}\r\n\r\nfunction NavigateToVideo({ searchParams }: NavigateToVideoProps) {\r\n    const videoFile = searchParams.get('video')!;\r\n    const channel = searchParams.get('channel')!;\r\n    const popOut = searchParams.get('popout')!;\r\n\r\n    return (\r\n        <Navigate to={'/video?video=' + encodeURIComponent(videoFile) + '&channel=' + channel + '&popout=' + popOut} />\r\n    );\r\n}\r\n\r\ninterface RenderVideoProps {\r\n    searchParams: URLSearchParams;\r\n    settingsProvider: SettingsProvider;\r\n    onError: (error: string) => void;\r\n    onAutoPauseModeChangedViaBind: (playMode: PlayMode) => void;\r\n}\r\n\r\nfunction RenderVideo({ searchParams, settingsProvider, onError, onAutoPauseModeChangedViaBind }: RenderVideoProps) {\r\n    const videoFile = searchParams.get('video')!;\r\n    const channel = searchParams.get('channel')!;\r\n    const popOut = searchParams.get('popout')! === 'true';\r\n\r\n    return (\r\n        <VideoPlayer\r\n            settingsProvider={settingsProvider}\r\n            videoFile={videoFile}\r\n            popOut={popOut}\r\n            channel={channel}\r\n            onError={onError}\r\n            onAutoPauseModeChangedViaBind={onAutoPauseModeChangedViaBind}\r\n        />\r\n    );\r\n}\r\n\r\ninterface ContentProps {\r\n    drawerOpen: boolean;\r\n    drawerWidth: number;\r\n    children: React.ReactNode[];\r\n}\r\n\r\nfunction Content(props: ContentProps) {\r\n    const classes = useContentStyles(props);\r\n\r\n    return (\r\n        <main\r\n            className={clsx(classes.content, {\r\n                [classes.contentShift]: props.drawerOpen,\r\n            })}\r\n        >\r\n            {props.children}\r\n        </main>\r\n    );\r\n}\r\n\r\nfunction App() {\r\n    const subtitleReader = useMemo<SubtitleReader>(() => new SubtitleReader(), []);\r\n    const settingsProvider = useMemo<SettingsProvider>(() => new SettingsProvider(), []);\r\n    const theme = useMemo<Theme>(\r\n        () =>\r\n            createTheme({\r\n                palette: {\r\n                    primary: {\r\n                        main: '#49007a',\r\n                    },\r\n                    secondary: {\r\n                        main: '#ff1f62',\r\n                    },\r\n                    error: {\r\n                        main: red.A400,\r\n                    },\r\n                    type: settingsProvider.themeType,\r\n                },\r\n            }),\r\n        [settingsProvider.themeType]\r\n    );\r\n    const anki = useMemo<Anki>(() => new Anki(settingsProvider), [settingsProvider]);\r\n    const location = useLocation();\r\n    const [searchParams] = useSearchParams();\r\n\r\n    const inVideoPlayer = location.pathname === '/video' || searchParams.get('video') !== null;\r\n    const extension = useMemo<ChromeExtension>(() => new ChromeExtension(), []);\r\n    const videoFrameRef = useRef<HTMLIFrameElement>(null);\r\n    const [width] = useWindowSize(!inVideoPlayer);\r\n    const drawerRatio = videoFrameRef.current ? 0.2 : 0.3;\r\n    const minDrawerSize = videoFrameRef.current ? 150 : 300;\r\n    const drawerWidth = Math.max(minDrawerSize, width * drawerRatio);\r\n    const [copiedSubtitles, setCopiedSubtitles] = useState<CopyHistoryItem[]>([]);\r\n    const copiedSubtitlesRef = useRef<CopyHistoryItem[]>([]);\r\n    copiedSubtitlesRef.current = copiedSubtitles;\r\n    const [copyHistoryOpen, setCopyHistoryOpen] = useState<boolean>(false);\r\n    const [theaterMode, setTheaterMode] = useState<boolean>(settingsProvider.theaterMode);\r\n    const [videoPopOut, setVideoPopOut] = useState<boolean>(false);\r\n    const [alert, setAlert] = useState<string>();\r\n    const [alertOpen, setAlertOpen] = useState<boolean>(false);\r\n    const [alertSeverity, setAlertSeverity] = useState<Color>();\r\n    const [jumpToSubtitle, setJumpToSubtitle] = useState<SubtitleModel>();\r\n    const [rewindSubtitle, setRewindSubtitle] = useState<SubtitleModel>();\r\n    const [sources, setSources] = useState<MediaSources>({ subtitleFiles: [] });\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n    const [dragging, setDragging] = useState<boolean>(false);\r\n    const dragEnterRef = useRef<Element | null>(null);\r\n    const [fileName, setFileName] = useState<string>();\r\n    const [ankiDialogOpen, setAnkiDialogOpen] = useState<boolean>(false);\r\n    const [ankiDialogDisabled, setAnkiDialogDisabled] = useState<boolean>(false);\r\n    const [ankiDialogItem, setAnkiDialogItem] = useState<CopyHistoryItem>();\r\n    const ankiDialogItemSliderContext = useMemo<AnkiDialogSliderContext | undefined>(\r\n        () => ankiDialogItem && itemSliderContext(ankiDialogItem),\r\n        [ankiDialogItem]\r\n    );\r\n    const ankiDialogAudioClip = useMemo<AudioClip | undefined>(\r\n        () =>\r\n            ankiDialogItem &&\r\n            audioClipFromItem(\r\n                ankiDialogItem,\r\n                ankiDialogItemSliderContext,\r\n                settingsProvider.audioPaddingStart,\r\n                settingsProvider.audioPaddingEnd\r\n            ),\r\n        [\r\n            ankiDialogItem,\r\n            ankiDialogItemSliderContext,\r\n            settingsProvider.audioPaddingStart,\r\n            settingsProvider.audioPaddingEnd,\r\n        ]\r\n    );\r\n    const ankiDialogImage = useMemo<Image | undefined>(\r\n        () =>\r\n            ankiDialogItem &&\r\n            imageFromItem(ankiDialogItem, settingsProvider.maxImageWidth, settingsProvider.maxImageHeight),\r\n        [ankiDialogItem, settingsProvider.maxImageWidth, settingsProvider.maxImageHeight]\r\n    );\r\n    const [ankiDialogRequestToVideo, setAnkiDialogRequestToVideo] = useState<number>();\r\n    const [ankiDialogRequested, setAnkiDialogRequested] = useState<boolean>(false);\r\n    const [ankiDialogFinishedRequest, setAnkiDialogFinishedRequest] = useState<AnkiDialogFinishedRequest>({\r\n        timestamp: 0,\r\n        resume: false,\r\n    });\r\n    const [settingsDialogOpen, setSettingsDialogOpen] = useState<boolean>(false);\r\n    const [imageDialogOpen, setImageDialogOpen] = useState<boolean>(false);\r\n    const [disableKeyEvents, setDisableKeyEvents] = useState<boolean>(false);\r\n    const [image, setImage] = useState<Image>();\r\n    const [tab, setTab] = useState<VideoTabModel>();\r\n    const [availableTabs, setAvailableTabs] = useState<VideoTabModel[]>([]);\r\n    const fileInputRef = useRef<HTMLInputElement>(null);\r\n    const ankiDialogRequestedRef = useRef<boolean>(false);\r\n    ankiDialogRequestedRef.current = ankiDialogRequested;\r\n    const { subtitleFiles } = sources;\r\n\r\n    const handleError = useCallback((message: string) => {\r\n        setAlertSeverity('error');\r\n        setAlert(message);\r\n        setAlertOpen(true);\r\n    }, []);\r\n\r\n    const handleAnkiDialogRequest = useCallback((forwardToVideo?: boolean, ankiDialogItem?: CopyHistoryItem) => {\r\n        if (!ankiDialogItem && copiedSubtitlesRef.current!.length === 0) {\r\n            return;\r\n        }\r\n\r\n        const item = ankiDialogItem ?? copiedSubtitlesRef.current[copiedSubtitlesRef.current.length - 1];\r\n        setAnkiDialogItem(item);\r\n        setAnkiDialogOpen(true);\r\n        setAnkiDialogDisabled(false);\r\n        setDisableKeyEvents(true);\r\n        setAnkiDialogRequested(true);\r\n\r\n        if (forwardToVideo) {\r\n            setAnkiDialogRequestToVideo(Date.now());\r\n        }\r\n    }, []);\r\n\r\n    const handleAnkiDialogProceed = useCallback(\r\n        async (\r\n            text: string,\r\n            definition: string,\r\n            audioClip: AudioClip | undefined,\r\n            image: Image | undefined,\r\n            word: string,\r\n            source: string,\r\n            url: string,\r\n            customFieldValues: { [key: string]: string },\r\n            tags: string[],\r\n            mode: AnkiExportMode\r\n        ) => {\r\n            setAnkiDialogDisabled(true);\r\n\r\n            try {\r\n                const result = await anki.export(\r\n                    text,\r\n                    definition,\r\n                    audioClip,\r\n                    image,\r\n                    word,\r\n                    source,\r\n                    url,\r\n                    customFieldValues,\r\n                    tags,\r\n                    mode\r\n                );\r\n\r\n                if (mode !== 'gui') {\r\n                    if (mode === 'default') {\r\n                        setAlertSeverity('success');\r\n                        setAlert('Exported card: ' + result);\r\n                        setAlertOpen(true);\r\n                    } else if (mode === 'updateLast') {\r\n                        setAlertSeverity('success');\r\n                        setAlert('Updated card: ' + result);\r\n                        setAlertOpen(true);\r\n                    }\r\n\r\n                    setAnkiDialogOpen(false);\r\n\r\n                    // We need the ref to avoid causing a state change that would re-init Player\r\n                    // It's a future task to make the Player init hook depend on less state\r\n                    if (ankiDialogRequestedRef.current) {\r\n                        setAnkiDialogFinishedRequest({ timestamp: Date.now(), resume: true });\r\n                        setAnkiDialogRequested(false);\r\n                    }\r\n                }\r\n            } catch (e) {\r\n                console.error(e);\r\n                if (e instanceof Error) {\r\n                    handleError(e.message);\r\n                } else {\r\n                    handleError(String(e));\r\n                }\r\n            } finally {\r\n                setAnkiDialogDisabled(false);\r\n                setDisableKeyEvents(false);\r\n            }\r\n        },\r\n        [anki, handleError]\r\n    );\r\n\r\n    const handleCopy = useCallback(\r\n        (\r\n            subtitle: SubtitleModel,\r\n            surroundingSubtitles: SubtitleModel[],\r\n            audioFile: File | undefined,\r\n            videoFile: File | undefined,\r\n            subtitleFile: File | undefined,\r\n            mediaTimestamp: number | undefined,\r\n            audioTrack: string | undefined,\r\n            audio: AudioModel | undefined,\r\n            image: ImageModel | undefined,\r\n            url: string | undefined,\r\n            postMineAction: PostMineAction | undefined,\r\n            fromVideo: boolean | undefined,\r\n            preventDuplicate: boolean | undefined,\r\n            id: string | undefined\r\n        ) => {\r\n            if (subtitle && settingsProvider.copyToClipboardOnMine) {\r\n                navigator.clipboard.writeText(subtitle.text);\r\n            }\r\n\r\n            const newCopiedSubtitle = {\r\n                ...subtitle,\r\n                surroundingSubtitles: surroundingSubtitles,\r\n                timestamp: Date.now(),\r\n                id: id || uuidv4(),\r\n                name: fileName!,\r\n                subtitleFile: subtitleFile,\r\n                audioFile: audioFile,\r\n                videoFile: videoFile,\r\n                mediaTimestamp: mediaTimestamp,\r\n                audioTrack: audioTrack,\r\n                audio: audio,\r\n                image: image,\r\n                url: url,\r\n            };\r\n\r\n            setCopiedSubtitles((copiedSubtitles) => {\r\n                if (preventDuplicate && copiedSubtitles.length > 0) {\r\n                    const last = copiedSubtitles[copiedSubtitles.length - 1];\r\n\r\n                    if (\r\n                        subtitle.start === last.start &&\r\n                        subtitle.end === last.end &&\r\n                        subtitle.text === last.text &&\r\n                        subtitleFile?.name === last.subtitleFile?.name\r\n                    ) {\r\n                        if (mediaTimestamp !== undefined && mediaTimestamp !== last.mediaTimestamp) {\r\n                            const newCopiedSubtitles = [...copiedSubtitles];\r\n                            newCopiedSubtitles[newCopiedSubtitles.length - 1] = newCopiedSubtitle;\r\n                            return newCopiedSubtitles;\r\n                        }\r\n\r\n                        return copiedSubtitles;\r\n                    }\r\n                }\r\n\r\n                // Note: we are not dealing with the case where an item with the given ID is already in the list\r\n                return [...copiedSubtitles, newCopiedSubtitle];\r\n            });\r\n\r\n            switch (postMineAction ?? PostMineAction.none) {\r\n                case PostMineAction.none:\r\n                    break;\r\n                case PostMineAction.showAnkiDialog:\r\n                    handleAnkiDialogRequest(fromVideo, newCopiedSubtitle);\r\n                    break;\r\n                case PostMineAction.updateLastCard:\r\n                    // FIXME: We should really rename the functions below because we're actually skipping the Anki dialog in this case\r\n                    setAnkiDialogRequested(true);\r\n                    handleAnkiDialogProceed(\r\n                        subtitle.text,\r\n                        '',\r\n                        audioClipFromItem(\r\n                            newCopiedSubtitle,\r\n                            undefined,\r\n                            settingsProvider.audioPaddingStart,\r\n                            settingsProvider.audioPaddingEnd\r\n                        ),\r\n                        imageFromItem(\r\n                            newCopiedSubtitle,\r\n                            settingsProvider.maxImageWidth,\r\n                            settingsProvider.maxImageHeight\r\n                        ),\r\n                        '',\r\n                        itemSourceString(newCopiedSubtitle) ?? '',\r\n                        '',\r\n                        {},\r\n                        settingsProvider.tags,\r\n                        'updateLast'\r\n                    );\r\n                    break;\r\n                default:\r\n                    throw new Error('Unknown post mine action: ' + postMineAction);\r\n            }\r\n\r\n            if (subtitle) {\r\n                setAlertSeverity('success');\r\n                setAlert(\r\n                    subtitle.text === '' ? `Saved ${humanReadableTime(subtitle.start)}` : `Copied: \"${subtitle.text}\"`\r\n                );\r\n                setAlertOpen(true);\r\n            }\r\n        },\r\n        [fileName, settingsProvider, handleAnkiDialogProceed, handleAnkiDialogRequest]\r\n    );\r\n\r\n    const handleOpenCopyHistory = useCallback(() => setCopyHistoryOpen((copyHistoryOpen) => !copyHistoryOpen), []);\r\n    const handleCloseCopyHistory = useCallback(() => setCopyHistoryOpen(false), []);\r\n    const handleAppBarToggle = useCallback(() => {\r\n        settingsProvider.theaterMode = !settingsProvider.theaterMode;\r\n        setTheaterMode(settingsProvider.theaterMode);\r\n    }, [settingsProvider]);\r\n    const handleVideoPopOut = useCallback(() => {\r\n        setVideoPopOut((videoPopOut) => !videoPopOut);\r\n    }, []);\r\n    const handleOpenSettings = useCallback(() => {\r\n        setDisableKeyEvents(true);\r\n        setSettingsDialogOpen(true);\r\n    }, []);\r\n    const handleAlertClosed = useCallback(() => setAlertOpen(false), []);\r\n    const handleImageDialogClosed = useCallback(() => setImageDialogOpen(false), []);\r\n    const handleCloseSettings = useCallback(\r\n        (newSettings: AsbplayerSettings) => {\r\n            settingsProvider.settings = newSettings;\r\n            setSettingsDialogOpen(false);\r\n\r\n            // ATM only the Anki dialog may appear under the settings dialog,\r\n            // so it's the only one we need to check to re-enable key events\r\n            setDisableKeyEvents(ankiDialogOpen);\r\n\r\n            const subtitleSettingsMessage: SubtitleSettingsToVideoMessage = {\r\n                command: 'subtitleSettings',\r\n                value: settingsProvider.subtitleSettings,\r\n            };\r\n            const ankiSettingsMessage: AnkiSettingsToVideoMessage = {\r\n                command: 'ankiSettings',\r\n                value: settingsProvider.ankiSettings,\r\n            };\r\n            const miscSettingsMessage: MiscSettingsToVideoMessage = {\r\n                command: 'miscSettings',\r\n                value: settingsProvider.miscSettings,\r\n            };\r\n            extension.publishMessage(subtitleSettingsMessage);\r\n            extension.publishMessage(ankiSettingsMessage);\r\n            extension.publishMessage(miscSettingsMessage);\r\n        },\r\n        [extension, settingsProvider, ankiDialogOpen]\r\n    );\r\n\r\n    const handleDeleteCopyHistoryItem = useCallback(\r\n        (item: CopyHistoryItem) => {\r\n            const newCopiedSubtitles = [];\r\n\r\n            for (let subtitle of copiedSubtitles) {\r\n                if (item.id !== subtitle.id) {\r\n                    newCopiedSubtitles.push(subtitle);\r\n                }\r\n            }\r\n\r\n            setCopiedSubtitles(newCopiedSubtitles);\r\n        },\r\n        [copiedSubtitles]\r\n    );\r\n\r\n    const handleUnloadAudio = useCallback(\r\n        (audioFileUrl: string) => {\r\n            if (audioFileUrl !== sources.audioFileUrl) {\r\n                return;\r\n            }\r\n\r\n            setSources((previous) => {\r\n                URL.revokeObjectURL(audioFileUrl);\r\n\r\n                return {\r\n                    subtitleFiles: previous.subtitleFiles,\r\n                    audioFile: undefined,\r\n                    audioFileUrl: undefined,\r\n                    videoFile: previous.videoFile,\r\n                    videoFileUrl: previous.videoFileUrl,\r\n                };\r\n            });\r\n        },\r\n        [sources]\r\n    );\r\n\r\n    const handleUnloadVideo = useCallback(\r\n        (videoFileUrl: string) => {\r\n            if (videoFileUrl !== sources.videoFileUrl) {\r\n                return;\r\n            }\r\n\r\n            setSources((previous) => {\r\n                URL.revokeObjectURL(videoFileUrl);\r\n\r\n                return {\r\n                    subtitleFiles: previous.subtitleFiles,\r\n                    audioFile: previous.audioFile,\r\n                    audioFileUrl: previous.audioFileUrl,\r\n                    videoFile: undefined,\r\n                    videoFileUrl: undefined,\r\n                };\r\n            });\r\n        },\r\n        [sources]\r\n    );\r\n\r\n    const handleClipAudio = useCallback(\r\n        async (item: CopyHistoryItem) => {\r\n            try {\r\n                const clip = await audioClipFromItem(\r\n                    item,\r\n                    undefined,\r\n                    settingsProvider.audioPaddingStart,\r\n                    settingsProvider.audioPaddingEnd\r\n                );\r\n\r\n                if (settingsProvider.preferMp3) {\r\n                    clip!.toMp3().download();\r\n                } else {\r\n                    clip!.download();\r\n                }\r\n            } catch (e) {\r\n                console.error(e);\r\n                if (e instanceof Error) {\r\n                    handleError(e.message);\r\n                } else {\r\n                    handleError(String(e));\r\n                }\r\n            }\r\n        },\r\n        [handleError, settingsProvider]\r\n    );\r\n\r\n    const handleDownloadImage = useCallback(\r\n        async (item: CopyHistoryItem) => {\r\n            try {\r\n                (await imageFromItem(\r\n                    item,\r\n                    settingsProvider.maxImageWidth,\r\n                    settingsProvider.maxImageHeight\r\n                ))!.download();\r\n            } catch (e) {\r\n                console.error(e);\r\n                if (e instanceof Error) {\r\n                    handleError(e.message);\r\n                } else {\r\n                    handleError(String(e));\r\n                }\r\n            }\r\n        },\r\n        [handleError, settingsProvider]\r\n    );\r\n\r\n    const handleDownloadCopyHistorySectionAsSrt = useCallback(\r\n        (name: string, items: CopyHistoryItem[]) => {\r\n            const deduplicated: SubtitleModel[] = [];\r\n\r\n            for (const item of items) {\r\n                if (\r\n                    deduplicated.find(\r\n                        (i) => i.start === item.start && i.end === item.end && i.text === item.text\r\n                    ) === undefined\r\n                ) {\r\n                    deduplicated.push(item);\r\n                }\r\n            }\r\n\r\n            download(\r\n                new Blob([subtitleReader.subtitlesToSrt(deduplicated)], { type: 'text/plain' }),\r\n                `${name}_MiningHistory_${new Date().toISOString()}.srt`\r\n            );\r\n        },\r\n        [subtitleReader]\r\n    );\r\n\r\n    const handleSelectCopyHistoryItem = useCallback(\r\n        (item: CopyHistoryItem) => {\r\n            if (!subtitleFiles.find((f) => f.name === item.subtitleFile?.name)) {\r\n                handleError('Subtitle file ' + item.subtitleFile?.name + ' is not open.');\r\n                return;\r\n            }\r\n\r\n            setJumpToSubtitle({\r\n                text: item.text,\r\n                start: item.start,\r\n                end: item.end,\r\n                originalStart: item.originalStart,\r\n                originalEnd: item.originalEnd,\r\n                track: item.track,\r\n            });\r\n        },\r\n        [subtitleFiles, handleError]\r\n    );\r\n\r\n    const handleAnki = useCallback((item: CopyHistoryItem) => {\r\n        setAnkiDialogItem(item);\r\n        setAnkiDialogOpen(true);\r\n        setAnkiDialogDisabled(false);\r\n        setDisableKeyEvents(true);\r\n    }, []);\r\n\r\n    const handleAnkiDialogCancel = useCallback(() => {\r\n        setAnkiDialogOpen(false);\r\n        setAnkiDialogDisabled(false);\r\n        setDisableKeyEvents(false);\r\n\r\n        if (ankiDialogRequested) {\r\n            setAnkiDialogFinishedRequest({ timestamp: Date.now(), resume: true });\r\n            setAnkiDialogRequested(false);\r\n        }\r\n    }, [ankiDialogRequested]);\r\n\r\n    const handleAnkiDialogRewind = useCallback(() => {\r\n        if (!ankiDialogItem) {\r\n            return;\r\n        }\r\n\r\n        if (!subtitleFiles.find((f) => f.name === ankiDialogItem.subtitleFile?.name)) {\r\n            handleError('Subtitle file ' + ankiDialogItem.subtitleFile?.name + ' is not open.');\r\n            return;\r\n        }\r\n\r\n        const subtitle = {\r\n            text: ankiDialogItem.text,\r\n            start: ankiDialogItem.start,\r\n            end: ankiDialogItem.end,\r\n            originalStart: ankiDialogItem.originalStart,\r\n            originalEnd: ankiDialogItem.originalEnd,\r\n            track: ankiDialogItem.track,\r\n        };\r\n        setRewindSubtitle(subtitle);\r\n        setJumpToSubtitle(subtitle);\r\n\r\n        handleAnkiDialogCancel();\r\n    }, [ankiDialogItem, subtitleFiles, handleAnkiDialogCancel, handleError]);\r\n\r\n    const handleViewImage = useCallback((image: Image) => {\r\n        setImage(image);\r\n        setImageDialogOpen(true);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        function onTabs(tabs: VideoTabModel[]) {\r\n            if (tabs.length !== availableTabs.length) {\r\n                setAvailableTabs(tabs);\r\n            } else {\r\n                let update = false;\r\n\r\n                for (let i = 0; i < availableTabs.length; ++i) {\r\n                    const t1 = availableTabs[i];\r\n                    const t2 = tabs[i];\r\n                    if (t1.id !== t2.id || t1.title !== t2.title || t1.src !== t2.src) {\r\n                        update = true;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (update) {\r\n                    setAvailableTabs(tabs);\r\n                }\r\n            }\r\n\r\n            let selectedTabMissing = tab && tabs.filter((t) => t.id === tab.id && t.src === tab.src).length === 0;\r\n\r\n            if (selectedTabMissing) {\r\n                setTab(undefined);\r\n                handleError('Lost connection with tab ' + tab!.id + ' ' + tab!.title);\r\n            }\r\n        }\r\n\r\n        extension.subscribeTabs(onTabs);\r\n\r\n        return () => extension.unsubscribeTabs(onTabs);\r\n    }, [availableTabs, tab, extension, handleError]);\r\n\r\n    const handleTabSelected = useCallback((tab: VideoTabModel) => setTab(tab), []);\r\n\r\n    const handleFiles = useCallback(\r\n        (files: FileList | File[]) => {\r\n            try {\r\n                let { subtitleFiles, audioFile, videoFile } = extractSources(files);\r\n\r\n                setSources((previous) => {\r\n                    setLoading(true);\r\n\r\n                    let videoFileUrl = undefined;\r\n                    let audioFileUrl = undefined;\r\n\r\n                    if (videoFile || audioFile) {\r\n                        revokeUrls(previous);\r\n\r\n                        if (videoFile) {\r\n                            videoFileUrl = URL.createObjectURL(videoFile);\r\n                        } else if (audioFile) {\r\n                            audioFileUrl = URL.createObjectURL(audioFile);\r\n                        }\r\n\r\n                        setTab(undefined);\r\n                    } else {\r\n                        videoFile = previous.videoFile;\r\n                        videoFileUrl = previous.videoFileUrl;\r\n                        audioFile = previous.audioFile;\r\n                        audioFileUrl = previous.audioFileUrl;\r\n                    }\r\n\r\n                    const sources = {\r\n                        subtitleFiles: subtitleFiles.length === 0 ? previous.subtitleFiles : subtitleFiles,\r\n                        audioFile: audioFile,\r\n                        audioFileUrl: audioFileUrl,\r\n                        videoFile: videoFile,\r\n                        videoFileUrl: videoFileUrl,\r\n                    };\r\n\r\n                    return sources;\r\n                });\r\n\r\n                if (subtitleFiles.length > 0) {\r\n                    const subtitleFileName = subtitleFiles[0].name;\r\n                    setFileName(subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')));\r\n                }\r\n            } catch (e) {\r\n                console.error(e);\r\n                if (e instanceof Error) {\r\n                    handleError(e.message);\r\n                } else {\r\n                    handleError(String(e));\r\n                }\r\n            }\r\n        },\r\n        [handleError]\r\n    );\r\n\r\n    const handleDirectory = useCallback(\r\n        async (items: DataTransferItemList) => {\r\n            if (items.length !== 1) {\r\n                handleError('Cannot load more than one directory at a time');\r\n                return;\r\n            }\r\n\r\n            const fileSystemEntry = items[0].webkitGetAsEntry();\r\n\r\n            if (!fileSystemEntry || !fileSystemEntry.isDirectory) {\r\n                handleError('Failed to load directory');\r\n                return;\r\n            }\r\n\r\n            const fileSystemDirectoryEntry = fileSystemEntry as FileSystemDirectoryEntry;\r\n\r\n            try {\r\n                const entries = await new Promise<FileSystemEntry[]>((resolve, reject) =>\r\n                    fileSystemDirectoryEntry.createReader().readEntries(resolve, reject)\r\n                );\r\n\r\n                if (entries.find((e) => e.isDirectory)) {\r\n                    handleError('Cannot load a directory with subdirectories');\r\n                    return;\r\n                }\r\n\r\n                const filePromises = entries.map(\r\n                    (e) => new Promise<File>((resolve, reject) => (e as FileSystemFileEntry).file(resolve, reject))\r\n                );\r\n                const files: File[] = [];\r\n\r\n                for (const f of filePromises) {\r\n                    files.push(await f);\r\n                }\r\n\r\n                handleFiles(files);\r\n            } catch (e) {\r\n                console.error(e);\r\n                if (e instanceof Error) {\r\n                    handleError(e.message);\r\n                } else {\r\n                    handleError(String(e));\r\n                }\r\n            }\r\n        },\r\n        [handleError, handleFiles]\r\n    );\r\n\r\n    useEffect(() => {\r\n        if (inVideoPlayer) {\r\n            return undefined;\r\n        }\r\n\r\n        async function onMessage(message: ExtensionMessage) {\r\n            if (message.data.command === 'sync' || message.data.command === 'syncv2') {\r\n                const tabs = extension.tabs.filter((t) => {\r\n                    if (t.id !== message.tabId) {\r\n                        return false;\r\n                    }\r\n\r\n                    return !message.src || t.src === message.src;\r\n                });\r\n\r\n                if (tabs.length === 0) {\r\n                    if (message.src) {\r\n                        console.error(\r\n                            'Received sync request but the requesting tab ID ' +\r\n                                message.tabId +\r\n                                ' with src ' +\r\n                                message.src +\r\n                                ' was not found'\r\n                        );\r\n                    } else {\r\n                        console.error(\r\n                            'Received sync request but the requesting tab ID ' + message.tabId + ' was not found'\r\n                        );\r\n                    }\r\n\r\n                    return;\r\n                }\r\n\r\n                const tab = tabs[0];\r\n                let subtitleFiles: File[];\r\n\r\n                if (message.data.command === 'sync') {\r\n                    const syncMessage = message.data as LegacyPlayerSyncMessage;\r\n                    subtitleFiles = [\r\n                        new File(\r\n                            [await (await fetch('data:text/plain;base64,' + syncMessage.subtitles.base64)).blob()],\r\n                            syncMessage.subtitles.name\r\n                        ),\r\n                    ];\r\n                } else if (message.data.command === 'syncv2') {\r\n                    const syncMessage = message.data as PlayerSyncMessage;\r\n                    subtitleFiles = await Promise.all(\r\n                        syncMessage.subtitles.map(\r\n                            async (s) =>\r\n                                new File([await (await fetch('data:text/plain;base64,' + s.base64)).blob()], s.name)\r\n                        )\r\n                    );\r\n                } else {\r\n                    console.error('Unknown message ' + message.data.command);\r\n                    return;\r\n                }\r\n\r\n                const subtitleFileName = subtitleFiles[0].name;\r\n                setFileName(subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')));\r\n                setSources({\r\n                    subtitleFiles: subtitleFiles,\r\n                    audioFile: undefined,\r\n                    audioFileUrl: undefined,\r\n                    videoFile: undefined,\r\n                    videoFileUrl: undefined,\r\n                });\r\n                setTab(tab);\r\n            }\r\n        }\r\n\r\n        extension.subscribe(onMessage);\r\n        extension.startHeartbeat();\r\n        return () => extension.unsubscribe(onMessage);\r\n    }, [extension, inVideoPlayer]);\r\n\r\n    const handleAutoPauseModeChangedViaBind = useCallback((playMode: PlayMode) => {\r\n        switch (playMode) {\r\n            case PlayMode.autoPause:\r\n                setAlert('Auto-pause: On');\r\n                setAlertSeverity('info');\r\n                setAlertOpen(true);\r\n                break;\r\n            case PlayMode.normal:\r\n                setAlert('Auto-pause: Off');\r\n                setAlertSeverity('info');\r\n                setAlertOpen(true);\r\n        }\r\n    }, []);\r\n\r\n    const handleDrop = useCallback(\r\n        (e: React.DragEvent) => {\r\n            if (ankiDialogOpen) {\r\n                return;\r\n            }\r\n\r\n            e.preventDefault();\r\n\r\n            if (inVideoPlayer) {\r\n                handleError('Video player cannot receive dropped files. Drop outside of the video frame instead.');\r\n                return;\r\n            }\r\n\r\n            setDragging(false);\r\n            dragEnterRef.current = null;\r\n\r\n            function allDirectories(items: DataTransferItemList) {\r\n                for (let i = 0; i < items.length; ++i) {\r\n                    if (!items[i].webkitGetAsEntry()?.isDirectory) {\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                return true;\r\n            }\r\n\r\n            if (e.dataTransfer.items && e.dataTransfer.items.length > 0 && allDirectories(e.dataTransfer.items)) {\r\n                handleDirectory(e.dataTransfer.items);\r\n            } else if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\r\n                handleFiles(e.dataTransfer.files);\r\n            }\r\n        },\r\n        [inVideoPlayer, handleError, handleFiles, handleDirectory, ankiDialogOpen]\r\n    );\r\n\r\n    const handleFileInputChange = useCallback(() => {\r\n        const files = fileInputRef.current?.files;\r\n\r\n        if (files && files.length > 0) {\r\n            handleFiles(files);\r\n        }\r\n    }, [handleFiles]);\r\n\r\n    const handleFileSelector = useCallback(() => fileInputRef.current?.click(), []);\r\n\r\n    const handleDownloadSubtitleFilesAsSrt = useCallback(async () => {\r\n        if (sources.subtitleFiles === undefined) {\r\n            return;\r\n        }\r\n\r\n        const nonSupSubtitleFiles = sources.subtitleFiles.filter((f) => !f.name.endsWith('.sup'));\r\n\r\n        if (nonSupSubtitleFiles.length === 0) {\r\n            return;\r\n        }\r\n\r\n        download(\r\n            new Blob([await subtitleReader.filesToSrt(nonSupSubtitleFiles)], {\r\n                type: 'text/plain',\r\n            }),\r\n            `${fileName}.srt`\r\n        );\r\n    }, [fileName, sources.subtitleFiles, subtitleReader]);\r\n\r\n    const handleDragOver = useCallback(\r\n        (e: React.DragEvent<HTMLDivElement>) => {\r\n            if (ankiDialogOpen) {\r\n                return;\r\n            }\r\n\r\n            e.preventDefault();\r\n        },\r\n        [ankiDialogOpen]\r\n    );\r\n\r\n    const handleDragEnter = useCallback(\r\n        (e: React.DragEvent<HTMLDivElement>) => {\r\n            if (ankiDialogOpen) {\r\n                return;\r\n            }\r\n\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n\r\n            if (!inVideoPlayer) {\r\n                dragEnterRef.current = e.target as Element;\r\n                setDragging(true);\r\n            }\r\n        },\r\n        [inVideoPlayer, ankiDialogOpen]\r\n    );\r\n\r\n    const handleDragLeave = useCallback(\r\n        (e: React.DragEvent<HTMLDivElement>) => {\r\n            e.nativeEvent.preventDefault();\r\n            e.nativeEvent.stopPropagation();\r\n\r\n            if (!inVideoPlayer && dragEnterRef.current === e.target) {\r\n                setDragging(false);\r\n            }\r\n        },\r\n        [inVideoPlayer]\r\n    );\r\n\r\n    const handleSourcesLoaded = useCallback(() => setLoading(false), []);\r\n\r\n    if (location.pathname === '/' && searchParams.get('video')) {\r\n        return <NavigateToVideo searchParams={searchParams} />;\r\n    }\r\n\r\n    const nothingLoaded =\r\n        (loading && !videoFrameRef.current) ||\r\n        (sources.subtitleFiles.length === 0 && !sources.audioFile && !sources.videoFile);\r\n    const appBarHidden = sources.videoFile !== undefined && theaterMode && !videoPopOut;\r\n\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <CssBaseline />\r\n            <div\r\n                onDrop={handleDrop}\r\n                onDragOver={handleDragOver}\r\n                onDragEnter={handleDragEnter}\r\n                onDragLeave={handleDragLeave}\r\n            >\r\n                <Alert open={alertOpen} onClose={handleAlertClosed} autoHideDuration={3000} severity={alertSeverity}>\r\n                    {alert}\r\n                </Alert>\r\n                <Routes>\r\n                    <Route\r\n                        path=\"/video\"\r\n                        element={\r\n                            <RenderVideo\r\n                                searchParams={searchParams}\r\n                                settingsProvider={settingsProvider}\r\n                                onError={handleError}\r\n                                onAutoPauseModeChangedViaBind={handleAutoPauseModeChangedViaBind}\r\n                            />\r\n                        }\r\n                    />\r\n                    <Route\r\n                        path=\"/\"\r\n                        element={\r\n                            <div>\r\n                                <CopyHistory\r\n                                    items={copiedSubtitles}\r\n                                    open={copyHistoryOpen}\r\n                                    drawerWidth={drawerWidth}\r\n                                    onClose={handleCloseCopyHistory}\r\n                                    onDelete={handleDeleteCopyHistoryItem}\r\n                                    onClipAudio={handleClipAudio}\r\n                                    onDownloadImage={handleDownloadImage}\r\n                                    onDownloadSectionAsSrt={handleDownloadCopyHistorySectionAsSrt}\r\n                                    onSelect={handleSelectCopyHistoryItem}\r\n                                    onAnki={handleAnki}\r\n                                />\r\n                                <AnkiDialog\r\n                                    open={ankiDialogOpen}\r\n                                    disabled={ankiDialogDisabled}\r\n                                    text={ankiDialogItem?.text}\r\n                                    audioClip={ankiDialogAudioClip}\r\n                                    image={ankiDialogImage}\r\n                                    source={itemSourceString(ankiDialogItem)}\r\n                                    url={ankiDialogItem?.url}\r\n                                    sliderContext={ankiDialogItemSliderContext}\r\n                                    customFields={settingsProvider.customAnkiFields}\r\n                                    anki={anki}\r\n                                    settingsProvider={settingsProvider}\r\n                                    onCancel={handleAnkiDialogCancel}\r\n                                    onRewind={handleAnkiDialogRewind}\r\n                                    onProceed={handleAnkiDialogProceed}\r\n                                    onViewImage={handleViewImage}\r\n                                    onOpenSettings={handleOpenSettings}\r\n                                />\r\n                                <ImageDialog open={imageDialogOpen} image={image} onClose={handleImageDialogClosed} />\r\n                                <SettingsDialog\r\n                                    anki={anki}\r\n                                    open={settingsDialogOpen}\r\n                                    onClose={handleCloseSettings}\r\n                                    settings={settingsProvider.settings}\r\n                                />\r\n                                <Bar\r\n                                    title={fileName || 'asbplayer'}\r\n                                    drawerWidth={drawerWidth}\r\n                                    drawerOpen={copyHistoryOpen}\r\n                                    hidden={appBarHidden}\r\n                                    subtitleFiles={sources.subtitleFiles}\r\n                                    onOpenCopyHistory={handleOpenCopyHistory}\r\n                                    onDownloadSubtitleFilesAsSrt={handleDownloadSubtitleFilesAsSrt}\r\n                                    onOpenSettings={handleOpenSettings}\r\n                                    onFileSelector={handleFileSelector}\r\n                                />\r\n                                <input\r\n                                    ref={fileInputRef}\r\n                                    onChange={handleFileInputChange}\r\n                                    type=\"file\"\r\n                                    accept=\".srt,.ass,.vtt,.sup,.mp3,.m4a,.aac,.flac,.ogg,.wav,.opus,.mkv,.mp4,.avi\"\r\n                                    multiple\r\n                                    hidden\r\n                                />\r\n                                <Content drawerWidth={drawerWidth} drawerOpen={copyHistoryOpen}>\r\n                                    {nothingLoaded && (\r\n                                        <LandingPage\r\n                                            latestExtensionVersion={latestExtensionVersion}\r\n                                            extensionUrl={extensionUrl}\r\n                                            extension={extension}\r\n                                            loading={loading}\r\n                                            dragging={dragging}\r\n                                            appBarHidden={appBarHidden}\r\n                                            onFileSelector={handleFileSelector}\r\n                                        />\r\n                                    )}\r\n                                    <DragOverlay dragging={dragging} appBarHidden={appBarHidden} loading={loading} />\r\n                                    <Player\r\n                                        subtitleReader={subtitleReader}\r\n                                        settingsProvider={settingsProvider}\r\n                                        onCopy={handleCopy}\r\n                                        onError={handleError}\r\n                                        onUnloadAudio={handleUnloadAudio}\r\n                                        onUnloadVideo={handleUnloadVideo}\r\n                                        onLoaded={handleSourcesLoaded}\r\n                                        onTabSelected={handleTabSelected}\r\n                                        onAnkiDialogRequest={handleAnkiDialogRequest}\r\n                                        onAppBarToggle={handleAppBarToggle}\r\n                                        onVideoPopOut={handleVideoPopOut}\r\n                                        onAutoPauseModeChangedViaBind={handleAutoPauseModeChangedViaBind}\r\n                                        tab={tab}\r\n                                        availableTabs={availableTabs}\r\n                                        sources={sources}\r\n                                        jumpToSubtitle={jumpToSubtitle}\r\n                                        rewindSubtitle={rewindSubtitle}\r\n                                        videoFrameRef={videoFrameRef}\r\n                                        extension={extension}\r\n                                        drawerOpen={copyHistoryOpen}\r\n                                        appBarHidden={appBarHidden}\r\n                                        videoPopOut={videoPopOut}\r\n                                        disableKeyEvents={disableKeyEvents}\r\n                                        ankiDialogRequested={ankiDialogRequested}\r\n                                        ankiDialogRequestToVideo={ankiDialogRequestToVideo}\r\n                                        ankiDialogFinishedRequest={ankiDialogFinishedRequest}\r\n                                    />\r\n                                </Content>\r\n                            </div>\r\n                        }\r\n                    />\r\n                </Routes>\r\n            </div>\r\n        </ThemeProvider>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = (onPerfEntry) => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n            getCLS(onPerfEntry);\r\n            getFID(onPerfEntry);\r\n            getFCP(onPerfEntry);\r\n            getLCP(onPerfEntry);\r\n            getTTFB(onPerfEntry);\r\n        });\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import '@fontsource/roboto';\r\nimport { createRoot } from 'react-dom/client';\r\nimport App from './components/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\ncreateRoot(document.querySelector('#root')!).render(\r\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n        <App />\r\n    </BrowserRouter>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}