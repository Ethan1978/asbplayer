{"version":3,"sources":["hooks/useWindowSize/index.ts","../../common/src/KeySequence.ts","../../common/src/KeyEvents.ts","../../common/src/KeySequences.ts","../../common/src/KeyBindings.ts","../../common/src/Mp3Encoder.ts","../../common/src/mp3-encoder.js","../../common/src/AudioClip.ts","../../common/src/CanvasResizer.ts","../../common/src/Image.ts","../../common/src/Fetcher.ts","../../common/src/Anki.ts","../../common/src/Util.ts","components/Alert.tsx","components/TagsTextField.tsx","components/AnkiDialog.tsx","components/background-colored.png","components/DragOverlay.tsx","components/HelpDialog.tsx","components/ImageDialog.tsx","services/SubtitleReader.ts","components/Bar.tsx","services/ChromeExtension.ts","services/Util.ts","components/CopyHistory.tsx","components/LandingPage.tsx","services/BroadcastChannelVideoProtocol.ts","services/ChromeTabVideoProtocol.ts","services/Clock.ts","components/Controls.tsx","services/MediaAdapter.ts","components/SubtitlePlayer.tsx","services/VideoChannel.ts","components/Player.tsx","components/CustomFieldDialog.tsx","components/SettingsDialog.tsx","services/SettingsProvider.ts","services/PlayerChannel.ts","components/VideoPlayer.tsx","components/App.tsx","reportWebVitals.js","index.tsx"],"names":["useWindowSize","enabled","useState","size","setSize","useLayoutEffect","updateSize","window","innerWidth","innerHeight","addEventListener","removeEventListener","KeySequenceTransitionResult","KeyEvents","event","ctrlKey","shiftKey","keyCode","detectDecreaseOffset","detectIncreaseOffset","detectIncreaseOffsetToPreviousSubtitle","detectDecreaseOffsetToNextSubtitle","KeySequence","up","holding","canceledBy","map","currentlyHolding","canceled","this","result","REJECTED","extra","type","includes","ADVANCED","CANCELED","_holdingAll","COMPLETE","KeySequences","KeyBindings","onCopy","disabledGetter","subtitleGetter","useCapture","_bindDown","detectCopy","subtitle","onAnkiExport","detectAnkiExport","onSeekToSubtitle","timeGetter","subtitlesGetter","subtitles","length","forward","detectPreviousSubtitle","detectNextSubtitle","_adjacentSubtitle","start","end","onOffsetChange","time","subtitleStart","originalStart","now","adjacentSubtitleIndex","minDiff","Number","MAX_SAFE_INTEGER","i","s","diff","Math","max","increase","currentOffset","onToggleSubtitles","onSequenceAdvanced","sequence","toggleSubtitles","handler","reset","transition","accept","unbindDown","unbindUp","_bindUp","onToggleSubtitleTrack","toggleSubtitleTrack","onToggleSubtitleTrackInList","toggleSubtitleTrackInList","onPlay","detectPlay","Mp3Encoder","blob","workerFactory","Promise","resolve","reject","a","reader","FileReader","onload","e","audioContext","AudioContext","target","Error","decodeAudioData","audioBuffer","channels","numberOfChannels","push","getChannelData","worker","postMessage","command","sampleRate","onmessage","Blob","data","buffer","terminate","onerror","error","message","readAsArrayBuffer","Worker_fn","Worker","AUDIO_TYPES","Object","keys","filter","MediaRecorder","isTypeSupported","t","recorderMimeType","recorderExtension","defaultMp3WorkerFactory","Base64AudioData","baseName","base64","extension","_name","_base64","_extension","cachedBlob","floor","_blob","audio","Audio","src","URL","createObjectURL","preload","load","play","setTimeout","pause","revokeObjectURL","undefined","fetch","FileAudioData","file","trackId","name","readAsDataURL","onloadend","substring","indexOf","_clipAudio","_audioElement","currentTime","_stopAudio","oncanplay","stream","_captureStream","getVideoTracks","stop","recorder","mimeType","chunks","ondataavailable","onstop","source","selectTrack","onloadedmetadata","audioTracks","id","captureStream","mozCaptureStream","Mp3AudioData","encode","slice","isSliceable","AudioClip","url","document","createElement","body","appendChild","style","display","href","download","click","remove","mp3WorkerFactory","subtitleFileName","lastIndexOf","CanvasResizer","canvas","ctx","maxWidth","maxHeight","widthRatio","width","heightRatio","height","ratio","min","newWidth","newHeight","createImageBitmap","resizeWidth","resizeHeight","then","sprite","drawImage","catch","Base64ImageData","_dataUrl","FileImageData","timestamp","_canvas","dataUrl","toDataURL","toBlob","video","_videoElement","videoWidth","videoHeight","getContext","resizer","resize","Image","imageName","HttpFetcher","method","JSON","stringify","response","json","ankiQuerySpecialCharacters","fileNameSpecialCharacters","Anki","settingsProvider","fetcher","ankiConnectUrl","_executeAction","modelName","word","query","wordField","_escapeQuery","escaped","char","text","definition","audioClip","image","customFieldValues","tags","mode","fields","_appendField","sentenceField","definitionField","sourceField","urlField","customFieldName","customAnkiFields","params","note","deckName","deck","noteType","options","allowDuplicate","duplicateScope","duplicateScopeOptions","checkChildren","gui","audioField","sanitizedName","_sanitizeFileName","_storeMediaFile","fileName","filename","imageField","recentNotes","sort","lastNoteId","fieldName","value","multiline","newValue","split","join","existingValue","sanitized","action","version","humanReadableTime","seconds","nearestTenth","totalSeconds","round","minutes","hours","String","padStart","surroundingSubtitles","index","countRadius","timeRadius","startIndex","atBoundary","endIndex","mockSurroundingSubtitles","middleSubtitle","maxTimestamp","offset","afterTimestamp","originalEnd","track","beforeTimestamp","unshift","initialIndex","sign","next","abs","useAlertStyles","makeStyles","root","justifyContent","position","top","pointerEvents","zIndex","Alert","props","classes","useEffect","open","timeout","onClose","autoHideDuration","clearTimeout","className","Grow","in","severity","children","TagsTextField","onTagsChange","setValue","handleChange","useCallback","currentValue","endsWith","newTags","splitTags","tag","trim","extractTagsFromString","TextField","onChange","useStyles","theme","marginBottom","spacing","title","flexGrow","mediaField","cursor","rangeSelectSlider","transform","sliderMarksFromSliderContext","sliderContext","boundary","seenTimestamps","label","mark","sliderValueLabelFormat","ms","ValueLabelComponent","Tooltip","enterTouchDelay","placement","AnkiDialog","disabled","initialText","onProceed","onCancel","onViewImage","onOpenSettings","initialAudioClip","initialSource","initialUrl","customFields","anki","setDefinition","setText","setWord","lastSearchedWord","setLastSearchedWord","setSource","setTags","setUrl","duplicateNotes","setDuplicateNotes","wordTimestamp","setWordTimestamp","setCustomFieldValues","timestampInterval","setTimestampInterval","initialTimestampInterval","setInitialTimestampInterval","initialTimestampBoundaryInterval","setInitialTimestampBoundaryInterval","timestampBoundaryInterval","setTimestampBoundaryInterval","timestampMarks","setTimestampMarks","lastAppliedTimestampIntervalToText","setLastAppliedTimestampIntervalToText","lastAppliedTimestampIntervalToAudio","setLastAppliedTimestampIntervalToAudio","setAudioClip","subtitleEnd","boundaryIntervalFromSliderContext","newAudioClip","preferMp3","toMp3","audioPaddingStart","audioPaddingEnd","Date","trimmedWord","findNotesWithWord","console","wordHelperText","handlePlayAudio","preventDefault","stopPropagation","handleViewImage","handleTimestampIntervalChange","handleApplyTimestampIntervalToText","intersectingSubtitles","interval","handleApplyTimestampIntervalToAudio","handleResetTimestampInterval","handleZoomInTimestampInterval","newTimestampBoundaryInterval","handleCustomFieldChange","newCustomFieldValues","assign","disableApplyTextSelection","Dialog","disableEnforceFocus","fullWidth","Toolbar","Typography","variant","IconButton","edge","onClick","DialogContent","color","maxRows","InputProps","endAdornment","InputAdornment","rows","helperText","findNotesWithWordGui","Grid","container","direction","item","Slider","valueLabelFormat","marks","step","valueLabelDisplay","marginTop","DialogActions","Button","dragging","transparentBackground","content","flexDirection","alignItems","textAlign","backgroundSize","backgroundRepeat","backgroundPosition","backgroundImage","coloredBackground","backgroundBlendMode","background","DragOverlay","loading","Fade","inlineIcon","flexWrap","HelpDialog","extensionUrl","component","Link","rel","fontSize","TableContainer","Table","TableBody","TableRow","TableCell","ImageDialog","resizeRatio","setDataUrl","setWidth","setHeight","windowWidth","windowHeight","img","fetchImage","Card","CardMedia","tagRegex","RegExp","assNewLineRegex","helperElement","SubtitleReader","xmlParser","files","all","f","_subtitles","flatMap","nodes","n1","n2","parseSrt","node","isFromNetflix","parser","WebVTT","Parser","StringDecoder","cues","oncue","c","replace","lines","newLines","line","_fixRTL","onflush","startTime","endTime","parse","flush","parseAss","dialogues","dialogue","slices","fragments","fragment","xml","_xmlParser","textNodes","elm","parseFloat","_decodeHTML","index1","index2","newLine","innerHTML","childNodes","nodeValue","XMLParser","ignoreAttributes","appBar","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","drawerWidth","easeOut","enteringScreen","marginRight","copyHistoryButton","padding","copyHistoryButtonShift","hide","useCopyHistoryTooltipStyles","tooltip","show","CopyHistoryTooltip","toolTipProps","Bar","AppBar","elevation","clsx","drawerOpen","onFileSelector","onOpenHelp","onOpenCopyHistory","ChromeExtension","heartbeat","onMessageCallbacks","onTabsCallbacks","versionPromise","tabs","versionResolve","uuidv4","sender","tabId","_sendHeartbeat","setInterval","receivedTabs","tab","callback","_remove","callbacks","splice","computeStyles","subtitleColor","subtitleSize","subtitleOutlineThickness","subtitleOutlineColor","subtitleBackgroundOpacity","subtitleBackgroundColor","subtitleFontFamily","styles","thickness","opacity","hex","exec","r","parseInt","g","b","hexToRgb","timeDurationDisplay","milliseconds","totalMilliseconds","includeMilliseconds","secs","mins","hrs","pad","padEnd","n","drawer","flexShrink","drawerPaper","drawerHeader","mixins","toolbar","listContainer","overflowY","overflowX","listItem","backgroundColor","palette","hover","listItemGutters","paddingLeft","paddingRight","listItemIconRoot","minWidth","emptyState","emptyText","secondary","Menu","anchorEl","onSelect","onClipAudio","onDownloadImage","onDelete","handleCopy","navigator","clipboard","writeText","handleJumpTo","handleClipAudio","handleDownloadImage","handleDelete","Popover","anchorOrigin","vertical","horizontal","transformOrigin","ListItem","button","ListItemText","primaryTypographyProps","primary","videoFile","audioFile","CopyHistory","scrollToBottomRefCallback","element","scrollIntoView","menuItem","setMenuItem","menuOpen","setMenuOpen","menuAnchorEl","setMenuAnchorEl","handleMenu","currentTarget","handleMenuClosed","items","lastSeenItemName","itemNameCounters","ListSubheader","disableSticky","ref","gutters","ListItemIcon","onAnki","wrap","Fragment","Drawer","anchor","paper","Divider","browseLink","LandingPage","latestExtensionVersion","installedExtensionVersion","setInstalledExtensionVersion","installedVersion","fetchInstalledExtensionVersion","extensionUpdateAvailable","gt","extensionNotInstalled","BroadcastChannelVideoProtocol","channelId","channel","onMessage","BroadcastChannel","that","close","ChromeTabVideoProtocol","listener","subscribe","sendMessage","unsubscribe","Clock","accumulated","started","useControlStyles","left","bottom","buttonContainer","timeDisplay","marginLeft","offsetInput","volumeInputContainerShown","short","volumeInputContainerHidden","volumeInputHidden","volumeInputShown","volumeInputThumbHidden","volumeInputThumbShown","subContainer","inactiveButton","progress","margin","closeButton","hideSubtitlePlayerToggleButton","right","gridContainer","useProgressBarStyles","mouseEventListener","fillContainer","fillContainerThick","easeInOut","fill","handleContainer","handle","borderRadius","handleOn","shortest","VolumeSlider","withStyles","verticalAlign","thumb","boxShadow","active","displayTime","secondsInMinute","ProgressBar","onSeek","mouseOver","setMouseOver","containerRef","useRef","handleClick","rect","getBoundingClientRect","pageX","handleMouseOver","handleMouseOut","progressWidth","current","elementWidth","fillStyle","handleStyle","fillContainerClassName","handleClassName","onMouseOver","onMouseOut","AudioTrackSelector","selectedAudioTrack","onAudioTrackSelected","list","selected","language","TabSelector","selectedTab","onTabSelected","MediaUnloader","onUnload","Controls","clock","playing","offsetEnabled","displayLength","mousePositionRef","onShow","onPause","onUnloadAudio","onUnloadVideo","onVolumeChange","disableKeyEvents","closeEnabled","volumeEnabled","condensedModeEnabled","condensedModeToggleEnabled","onCondensedModeToggle","subtitlesEnabled","subtitlesToggle","onSubtitlesToggle","popOutEnabled","popOut","onPopOutToggle","fullscreenEnabled","fullscreen","onFullscreenToggle","hideSubtitlePlayerToggleEnabled","subtitlePlayerHidden","onHideSubtitlePlayerToggle","showOnMouseMovement","setShow","audioTrackSelectorOpen","setAudioTrackSelectorOpen","audioTrackSelectorAnchorEl","setAudioTrackSelectorAnchorEl","tabSelectorOpen","setTabSelectorOpen","tabSelectorAnchorEl","setTabSelectorAnchorEl","audioUnloaderOpen","setAudioUnloaderOpen","audioUnloaderAnchorEl","setAudioUnloaderAnchorEl","videoUnloaderOpen","setVideoUnloaderOpen","videoUnloaderAnchorEl","setVideoUnloaderAnchorEl","showVolumeBar","setShowVolumeBar","volume","setVolume","lastCommittedVolume","setLastCommittedVolume","lastMousePositionRef","x","y","lastShowTimestampRef","lastOffsetInputChangeTimestampRef","lastShowRef","forceShowRef","offsetInputRef","closeButtonRef","updateState","forceUpdate","handleSeek","savedVolume","currentShow","pow","activeElement","offsetTop","offsetHeight","clearInterval","handleKey","key","isNaN","blur","handleOffsetInputClicked","setSelectionRange","offsetSeconds","toFixed","handleAudioTrackSelectorClosed","handleAudioTrackSelectorOpened","handleAudioTrackSelected","handleTabSelectorClosed","handleTabSelectorOpened","handleTabSelected","handleAudioUnloaderClosed","handleAudioUnloaderOpened","handleUnloadAudio","handleVideoUnloaderClosed","handleVideoUnloaderOpened","handleUnloadVideo","handleVolumeMouseOut","handleVolumeMouseOver","handleVolumeChange","handleVolumeChangeCommitted","handleVolumeToggle","newVolume","onChangeCommitted","defaultValue","Input","inputRef","disableUnderline","placeholder","MediaAdapter","readyResolves","_onMediaCanPlay","readyState","useSubtitlePlayerStyles","default","compressed","table","noSubtitles","useSubtitleRowStyles","subtitleRow","overflowWrap","compressedSubtitle","disabledSubtitle","disabledBackground","copyButton","SubtitleRow","React","memo","subtitleRef","onClickSubtitle","onCopySubtitle","tableRowProps","textRef","textSelected","setTextSelected","disabledClassName","onMouseUp","selection","getSelection","isSameNode","anchorNode","parentNode","SubtitlePlayer","onAnkiDialogRequest","jumpToSubtitle","displayHelp","lastJumpToTopTimestamp","hidden","disabledSubtitleTracks","playingRef","clockRef","subtitleListRef","subtitleRefs","useMemo","Array","_","createRef","subtitleRefsRef","disableKeyEventsRef","selectedSubtitleIndexes","setSelectedSubtitleIndexes","selectedSubtitleIndexesRef","lengthRef","hiddenRef","lastScrollTimestampRef","requestAnimationRef","requestAnimationFrame","update","smallestIndex","fallbackIndex","currentSubtitleIndexes","keysAreEqual","scrollToSubtitleRef","allowScroll","block","inline","behavior","cancelAnimationFrame","scrollToCurrentSubtitle","indexes","scrollIfVisible","visibilityState","firstSubtitleRef","unbind","bindAdjustOffset","bindOffsetToSubtitle","bindSeekToSubtitle","handleScroll","jumpToIndex","calculateSurroundingSubtitlesForIndex","surroundingSubtitlesCountRadius","surroundingSubtitlesTimeRadius","calculateSurroundingSubtitles","bindCopy","subtitleIndexes","bindToggleSubtitleTrackInList","bindAnkiExport","subtitleTable","Paper","square","VideoChannel","protocol","isReady","readyCallbacks","playCallbacks","pauseCallbacks","audioTrackSelectedCallbacks","currentTimeCallbacks","exitCallbacks","offsetCallbacks","popOutToggleCallbacks","copyCallbacks","condensedModeToggleCallbacks","hideSubtitlePlayerToggleCallbacks","ankiDialogRequestCallbacks","toggleSubtitleTrackInListCallbacks","readyMessage","paused","readyStateMessage","Event","playMessage","echo","pauseMessage","audioTrackSelectedMessage","currentTimeMessage","offsetMessage","copyMessage","preventDuplicate","ankiDialogRequestMessage","forwardToVideo","toggleSubtitleTrackInListMessage","subtitleFileNames","names","settings","resume","videoFrame","border","trackLength","audioRef","videoRef","useOffset","subtitlesLength","audioLength","videoLength","Player","sources","subtitleFiles","audioFileUrl","videoFileUrl","subtitleReader","videoFrameRef","availableTabs","ankiDialogRequestToVideo","ankiDialogRequested","ankiDialogFinishedRequest","onError","onLoaded","setSubtitles","subtitlesRef","loadingSubtitles","setLoadingSubtitles","setPlaying","setLastJumpToTopTimestamp","setOffset","setAudioTracks","setSelectedAudioTrack","setChannelId","videoPopOut","setVideoPopOut","setResumeOnFinishedAnkiDialogRequest","hideSubtitlePlayer","setHideSubtitlePlayer","hideSubtitlePlayerRef","setDisabledSubtitleTracks","setCondensedModeEnabled","condensedModeEnabledRef","mediaAdapter","seek","forwardToMedia","setTime","applyOffset","newSubtitles","channelClosed","onReady","init","subscribed","onExit","hideSubtitlePlayerToggle","ready","subtitleSettings","ankiSettings","miscSettings","condensedModeToggle","onOffset","onCurrentTime","tracks","newTracks","ankiDialogRequest","finishedAnkiDialogRequest","resumeOnFinishedAnkiDialogRequest","seeking","expectedSeekTime","currentOrNextIndex","currentIndex","nextSubtitle","t0","process","encodeURIComponent","handlePlay","handlePause","handleSeekToSubtitle","shouldPlay","handleMouseMove","screenX","screenY","audioTrackSelected","handleOffsetChange","v","HTMLMediaElement","handleCondensedModeToggle","handleToggleSubtitleTrack","bindPlay","unbindCopy","unbindAnkiExport","loaded","videoInWindow","Boolean","onMouseMove","CustomFieldDialog","existingCustomFieldNames","setFieldName","fieldExists","DialogTitle","subtitleSetting","subtitlePreview","subtitlePreviewInput","outline","addFieldButton","useSelectableSettingStyles","formControl","SelectableSetting","selections","removable","onSelectionChange","onRemoval","FormControl","InputLabel","Select","MenuItem","SettingsDialog","setAnkiConnectUrl","ankiConnectUrlError","setAnkiConnectUrlError","ankiConnectUrlChangeTimestamp","setAnkiConnectUrlChangeTimestamp","setDeck","deckNames","setDeckNames","setNoteType","modelNames","setModelNames","setSentenceField","setDefinitionField","setAudioField","setImageField","setWordField","setSourceField","setUrlField","setCustomFields","setPreferMp3","fieldNames","setFieldNames","customFieldDialogOpen","setCustomFieldDialogOpen","setAudioPaddingStart","setAudioPaddingEnd","maxImageWidth","setMaxImageWidth","maxImageHeight","setMaxImageHeight","setSubtitleColor","setSubtitleSize","setSubtitleOutlineColor","setSubtitleOutlineThickness","setSubtitleBackgroundColor","setSubtitleBackgroundOpacity","setSubtitleFontFamily","setSubtitlePreview","themeType","setThemeType","handleAnkiConnectUrlChange","handleRetryAnkiConnectUrl","handleDeckChange","handleNoteTypeChange","handleSentenceFieldChange","handleDefinitionFieldChange","handleAudioFieldChange","handleImageFieldChange","handleWordFieldChange","handleSourceFieldChange","handleUrlFieldChange","handleAudioPaddingStart","handleAudioPaddingEnd","handleMaxImageWidth","handleMaxImageHeight","handleSubtitleColorChange","handleSubtitleSizeChange","handleSubtitleOutlineColorChange","handleSubtitleOutlineThicknessChange","handleSubtitleBackgroundColorChange","handleSubtitleBackgroundOpacityChange","handleSubtitleFontFamilyChange","handleSubtitlePreviewChange","handleAddCustomField","oldCustomFields","newCustomFields","handleCustomFieldRemoval","handleTagsChange","handlePreferMp3Change","checked","handleThemeTypeChange","subtitlePreviewStyles","requestPermission","refreshFieldNames","modelFieldNames","handleClose","customFieldInputs","FormLabel","FormGroup","FormHelperText","location","hostname","FormControlLabel","control","Checkbox","inputProps","Radio","ankiConnectUrlKey","deckKey","noteTypeKey","sentenceFieldKey","definitionFieldKey","audioFieldKey","imageFieldKey","wordFieldKey","sourceFieldKey","urlFieldKey","customAnkiFieldsKey","tagsKey","subtitleSizeKey","subtitleColorKey","subtitleOutlineThicknessKey","subtitleOutlineColorKey","subtitleBackgroundColorKey","subtitleBackgroundOpacityKey","subtitleFontFamilyKey","subtitlePreviewKey","audioPaddingStartKey","audioPaddingEndKey","maxImageWidthKey","maxImageHeightKey","volumeKey","preferMp3Key","themeTypeKey","SettingsProvider","_tags","newSettings","localStorage","getItem","removeItem","setItem","_setOptionalItem","ankiFieldsString","tagsString","_getNumberItem","PlayerChannel","closeCallbacks","subtitlesCallbacks","finishedAnkiDialogRequestCallbacks","subtitlesMessage","condensedModeToggleMessage","hideSubtitlePlayerToggleMessage","finishedAnkiDialogRequestMessage","playbackRate","overflow","cursorHidden","notifyReady","playerChannel","outerWidth","availWidth","screen","availHeight","outerHeight","resizeTo","selectedTrack","VideoPlayer","poppingInRef","fullscreenElement","setFullscreen","useFullscreen","fullscreenRef","setLength","showSubtitles","setShowSubtitles","setSubtitlesEnabled","setSubtitlePlayerHidden","showSubtitlesRef","showCursor","setShowCursor","lastMouseMovementTimestamp","alert","setAlert","alertOpen","setAlertOpen","returnToFullscreenOnFinishedAnkiDialogRequest","setReturnToFullscreenOnFinishedAnkiDialogRequest","returnToFullscreenOnFinishedAnkiDialogRequestRef","videoRefCallback","videoElement","onloadeddata","ontimeupdate","code","errorMessage","selectAudioTrack","onSubtitles","exitFullscreen","onFinishedAnkiDialogRequest","requestFullscreen","onbeforeunload","equals","arrayEquals","s1","s2","copy","bindToggleSubtitles","bindToggleSubtitleTrackInVideo","currentSubtitle","handleSubtitlesToggle","handleFullscreenToggle","handlePopOutToggle","popOutToggle","handleHideSubtitlePlayerToggle","handleDoubleClick","handleAlertClosed","subtitleStyles","bounds","clientX","clientY","controls","onDoubleClick","isMobile","useContentStyles","contentShift","audioClipFromItem","paddingStart","paddingEnd","fromBase64","subtitleFile","fromFile","audioTrack","imageFromItem","itemSourceString","Content","App","createTheme","main","red","A400","inVideoPlayer","useLocation","pathname","drawerRatio","minDrawerSize","copiedSubtitles","setCopiedSubtitles","copiedSubtitlesRef","copyHistoryOpen","setCopyHistoryOpen","alertSeverity","setAlertSeverity","setJumpToSubtitle","setSources","setLoading","setDragging","dragEnterRef","setFileName","ankiDialogOpen","setAnkiDialogOpen","ankiDialogDisabled","setAnkiDialogDisabled","ankiDialogItem","setAnkiDialogItem","ankiDialogItemSliderContext","itemSliderContext","ankiDialogAudioClip","ankiDialogImage","setAnkiDialogRequestToVideo","setAnkiDialogRequested","setAnkiDialogFinishedRequest","settingsDialogOpen","setSettingsDialogOpen","helpDialogOpen","setHelpDialogOpen","imageDialogOpen","setImageDialogOpen","setDisableKeyEvents","setImage","setTab","setAvailableTabs","fileInputRef","last","newCopiedSubtitles","updated","copiedSubtitle","newCopiedSubtitle","handleOpenCopyHistory","handleCloseCopyHistory","handleOpenSettings","handleOpenHelp","handleCloseHelp","handleImageDialogClosed","handleCloseSettings","subtitleSettingsMessage","ankiSettingsMessage","miscSettingsMessage","publishMessage","handleDeleteCopyHistoryItem","handleError","previous","clip","handleSelectCopyHistoryItem","handleAnki","handleAnkiDialogCancel","handleAnkiDialogProceed","export","handleAnkiDialogRequest","onTabs","t1","t2","subscribeTabs","unsubscribeTabs","handleFiles","extensionStartIndex","extractSources","revokeUrls","syncMessage","File","handleDrop","dataTransfer","handleFileInputChange","handleFileSelector","handleDragEnter","handleDragLeave","handleSourcesLoaded","nothingLoaded","ThemeProvider","CssBaseline","onDrop","onDragOver","onDragEnter","onDragLeave","exact","path","render","URLSearchParams","search","get","to","multiple","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","basename","forceRefresh","querySelector"],"mappings":"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","file":"static/js/main.f271b266.chunk.js","sourcesContent":["import { useLayoutEffect, useState } from 'react';\r\n\r\n// https://stackoverflow.com/questions/19014250/rerender-view-on-browser-resize-with-react\r\nexport function useWindowSize(enabled: boolean) {\r\n    const [size, setSize] = useState([0, 0]);\r\n\r\n    useLayoutEffect(() => {\r\n        function updateSize() {\r\n            if (enabled) {\r\n                setSize([window.innerWidth, window.innerHeight]);\r\n            }\r\n        }\r\n\r\n        window.addEventListener('resize', updateSize);\r\n        updateSize();\r\n\r\n        return () => window.removeEventListener('resize', updateSize);\r\n    }, [enabled]);\r\n\r\n    return size;\r\n}\r\n","export enum KeySequenceTransitionResult {\r\n    REJECTED = 0,\r\n    CANCELED = 1,\r\n    ADVANCED = 2,\r\n    COMPLETE = 3,\r\n}\r\n\r\nexport interface KeySequenceOptions {\r\n    up?: number[];\r\n    holding?: number[];\r\n    canceledBy?: number[];\r\n    map?: (event: KeyboardEvent) => any;\r\n}\r\n\r\nexport interface KeySequenceTransition {\r\n    result: KeySequenceTransitionResult;\r\n    extra?: any;\r\n}\r\n\r\nexport default class KeySequence {\r\n    private up: number[];\r\n    private holding: number[];\r\n    private canceledBy: number[];\r\n    private map: (event: KeyboardEvent) => any;\r\n    private currentlyHolding: { [key: number]: boolean };\r\n    private canceled: boolean;\r\n\r\n    constructor({ up, holding, canceledBy, map }: KeySequenceOptions) {\r\n        this.up = up || [];\r\n        this.holding = holding || [];\r\n        this.canceledBy = canceledBy || [];\r\n        this.map = map || ((event: KeyboardEvent) => true);\r\n        this.currentlyHolding = {};\r\n        this.canceled = false;\r\n    }\r\n\r\n    reset() {\r\n        this.currentlyHolding = {};\r\n        this.canceled = false;\r\n    }\r\n\r\n    accept(event: KeyboardEvent): KeySequenceTransition {\r\n        let result = KeySequenceTransitionResult.REJECTED;\r\n        let extra = null;\r\n\r\n        if (event.type === 'keydown') {\r\n            if (this.holding.includes(event.keyCode)) {\r\n                this.currentlyHolding[event.keyCode] = true;\r\n                this.canceled = false;\r\n                result = KeySequenceTransitionResult.ADVANCED;\r\n            }\r\n\r\n            if (this.canceledBy.includes(event.keyCode)) {\r\n                this.canceled = true;\r\n                result = KeySequenceTransitionResult.CANCELED;\r\n            }\r\n\r\n            if (this.up.includes(event.keyCode)) {\r\n                this.canceled = false;\r\n                result = KeySequenceTransitionResult.ADVANCED;\r\n            }\r\n        }\r\n\r\n        if (event.type === 'keyup') {\r\n            delete this.currentlyHolding[event.keyCode];\r\n\r\n            if (this.up.includes(event.keyCode) && this._holdingAll() && !this.canceled) {\r\n                extra = this.map(event);\r\n                result = KeySequenceTransitionResult.COMPLETE;\r\n            }\r\n        }\r\n\r\n        return { result: result, extra: extra };\r\n    }\r\n\r\n    _holdingAll() {\r\n        for (const key of this.holding) {\r\n            if (!(key in this.currentlyHolding)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n","export default class KeyEvents {\r\n    static detectCopy(event: KeyboardEvent) {\r\n        // Ctrl + Shift + A\r\n        return event.ctrlKey && event.shiftKey && event.keyCode === 65;\r\n    }\r\n\r\n    static detectDecreaseOffset(event: KeyboardEvent) {\r\n        // Ctrl + Shift + Right\r\n        return event.ctrlKey && event.shiftKey && event.keyCode === 39;\r\n    }\r\n\r\n    static detectAnkiExport(event: KeyboardEvent) {\r\n        // Ctrl + Shift + Q\r\n        return event.ctrlKey && event.shiftKey && event.keyCode === 81;\r\n    }\r\n\r\n    static detectIncreaseOffset(event: KeyboardEvent) {\r\n        // Ctrl + Shift + Left\r\n        return event.ctrlKey && event.shiftKey && event.keyCode === 37;\r\n    }\r\n\r\n    static detectDecreaseOffsetToNextSubtitle(event: KeyboardEvent) {\r\n        // Ctrl + Right\r\n        return !KeyEvents.detectDecreaseOffset(event) && (event.ctrlKey || event.shiftKey) && event.keyCode === 39;\r\n    }\r\n\r\n    static detectIncreaseOffsetToPreviousSubtitle(event: KeyboardEvent) {\r\n        // Ctrl + Left\r\n        return !KeyEvents.detectIncreaseOffset(event) && (event.ctrlKey || event.shiftKey) && event.keyCode === 37;\r\n    }\r\n\r\n    static detectPreviousSubtitle(event: KeyboardEvent) {\r\n        // Left\r\n        return (\r\n            !KeyEvents.detectIncreaseOffset(event) &&\r\n            !KeyEvents.detectIncreaseOffsetToPreviousSubtitle(event) &&\r\n            event.keyCode === 37\r\n        );\r\n    }\r\n\r\n    static detectNextSubtitle(event: KeyboardEvent) {\r\n        // Right\r\n        return (\r\n            !KeyEvents.detectDecreaseOffset(event) &&\r\n            !KeyEvents.detectDecreaseOffsetToNextSubtitle(event) &&\r\n            event.keyCode === 39\r\n        );\r\n    }\r\n\r\n    static detectPlay(event: KeyboardEvent) {\r\n        // Space\r\n        return event.keyCode === 32;\r\n    }\r\n}\r\n","import KeySequence from './KeySequence';\r\n\r\nexport default class KeySequences {\r\n    static toggleSubtitles() {\r\n        // Up S, canceled by 1...9\r\n        return new KeySequence({ up: [83], canceledBy: [49, 50, 51, 52, 53, 54, 55, 56, 57] });\r\n    }\r\n\r\n    static toggleSubtitleTrack() {\r\n        // Holding S, up 1...9\r\n        return new KeySequence({\r\n            holding: [83],\r\n            up: [49, 50, 51, 52, 53, 54, 55, 56, 57],\r\n            map: (event) => event.keyCode - 49,\r\n        });\r\n    }\r\n\r\n    static toggleSubtitleTrackInList() {\r\n        // Holding D, up 1...9\r\n        return new KeySequence({\r\n            holding: [68],\r\n            up: [49, 50, 51, 52, 53, 54, 55, 56, 57],\r\n            map: (event) => event.keyCode - 49,\r\n        });\r\n    }\r\n}\r\n","import { SubtitleModel } from '.';\r\nimport KeyEvents from './KeyEvents';\r\nimport { KeySequenceTransitionResult } from './KeySequence';\r\nimport KeySequences from './KeySequences';\r\n\r\nexport default class KeyBindings {\r\n    static bindCopy<T extends SubtitleModel = SubtitleModel>(\r\n        onCopy: (event: KeyboardEvent, subtitle: T) => void,\r\n        disabledGetter: () => boolean,\r\n        subtitleGetter: () => T | undefined,\r\n        useCapture = false\r\n    ) {\r\n        return KeyBindings._bindDown((event) => {\r\n            if (disabledGetter()) {\r\n                return;\r\n            }\r\n\r\n            if (!KeyEvents.detectCopy(event)) {\r\n                return;\r\n            }\r\n\r\n            const subtitle = subtitleGetter();\r\n\r\n            if (!subtitle) {\r\n                return;\r\n            }\r\n\r\n            onCopy(event, subtitle);\r\n        }, useCapture);\r\n    }\r\n\r\n    static bindAnkiExport(\r\n        onAnkiExport: (event: KeyboardEvent) => void,\r\n        disabledGetter: () => boolean,\r\n        useCapture = false\r\n    ) {\r\n        return KeyBindings._bindDown((event) => {\r\n            if (disabledGetter()) {\r\n                return;\r\n            }\r\n\r\n            if (!KeyEvents.detectAnkiExport(event)) {\r\n                return;\r\n            }\r\n\r\n            onAnkiExport(event);\r\n        }, useCapture);\r\n    }\r\n\r\n    static bindSeekToSubtitle(\r\n        onSeekToSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\r\n        disabledGetter: () => boolean,\r\n        timeGetter: () => number,\r\n        subtitlesGetter: () => SubtitleModel[] | undefined,\r\n        useCapture = false\r\n    ) {\r\n        return KeyBindings._bindDown((event) => {\r\n            if (disabledGetter()) {\r\n                return;\r\n            }\r\n\r\n            const subtitles = subtitlesGetter();\r\n\r\n            if (!subtitles || subtitles.length === 0) {\r\n                return;\r\n            }\r\n\r\n            let forward;\r\n\r\n            if (KeyEvents.detectPreviousSubtitle(event)) {\r\n                forward = false;\r\n            } else if (KeyEvents.detectNextSubtitle(event)) {\r\n                forward = true;\r\n            } else {\r\n                return;\r\n            }\r\n\r\n            const subtitle = KeyBindings._adjacentSubtitle(forward, timeGetter(), subtitles);\r\n\r\n            if (subtitle !== null && subtitle.start >= 0 && subtitle.end >= 0) {\r\n                onSeekToSubtitle(event, subtitle);\r\n            }\r\n        }, useCapture);\r\n    }\r\n\r\n    static bindOffsetToSubtitle(\r\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\r\n        disabledGetter: () => boolean,\r\n        timeGetter: () => number,\r\n        subtitlesGetter: () => SubtitleModel[] | undefined,\r\n        useCapture = false\r\n    ) {\r\n        return KeyBindings._bindDown((event) => {\r\n            if (disabledGetter()) {\r\n                return;\r\n            }\r\n\r\n            const subtitles = subtitlesGetter();\r\n\r\n            if (!subtitles || subtitles.length === 0) {\r\n                return;\r\n            }\r\n\r\n            let forward;\r\n\r\n            if (KeyEvents.detectIncreaseOffsetToPreviousSubtitle(event)) {\r\n                forward = false;\r\n            } else if (KeyEvents.detectDecreaseOffsetToNextSubtitle(event)) {\r\n                forward = true;\r\n            } else {\r\n                return;\r\n            }\r\n\r\n            const time = timeGetter();\r\n            const subtitle = KeyBindings._adjacentSubtitle(forward, time, subtitles);\r\n\r\n            if (subtitle !== null) {\r\n                const subtitleStart = subtitle.originalStart;\r\n                const newOffset = time - subtitleStart;\r\n                onOffsetChange(event, newOffset);\r\n            }\r\n        }, useCapture);\r\n    }\r\n\r\n    static _adjacentSubtitle(forward: boolean, time: number, subtitles: SubtitleModel[]) {\r\n        const now = time;\r\n        let adjacentSubtitleIndex = -1;\r\n        let minDiff = Number.MAX_SAFE_INTEGER;\r\n\r\n        for (let i = 0; i < subtitles.length; ++i) {\r\n            const s = subtitles[i];\r\n            const diff = forward ? s.start - now : now - s.start;\r\n\r\n            if (minDiff <= diff) {\r\n                continue;\r\n            }\r\n\r\n            if (forward && now < s.start) {\r\n                minDiff = diff;\r\n                adjacentSubtitleIndex = i;\r\n            } else if (!forward && now > s.start) {\r\n                minDiff = diff;\r\n                adjacentSubtitleIndex = now < s.end ? Math.max(0, i - 1) : i;\r\n            }\r\n        }\r\n\r\n        if (adjacentSubtitleIndex !== -1) {\r\n            return subtitles[adjacentSubtitleIndex];\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    static bindAdjustOffset(\r\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\r\n        disabledGetter: () => boolean,\r\n        subtitlesGetter: () => SubtitleModel[] | undefined,\r\n        useCapture = false\r\n    ) {\r\n        return KeyBindings._bindDown((event) => {\r\n            if (disabledGetter()) {\r\n                return;\r\n            }\r\n\r\n            const subtitles = subtitlesGetter();\r\n\r\n            if (!subtitles || subtitles.length === 0) {\r\n                return;\r\n            }\r\n\r\n            let increase;\r\n\r\n            if (KeyEvents.detectDecreaseOffset(event)) {\r\n                increase = false;\r\n            } else if (KeyEvents.detectIncreaseOffset(event)) {\r\n                increase = true;\r\n            } else {\r\n                return;\r\n            }\r\n\r\n            const currentOffset = subtitles[0].start - subtitles[0].originalStart;\r\n            const newOffset = currentOffset + (increase ? 100 : -100);\r\n            onOffsetChange(event, newOffset);\r\n        }, useCapture);\r\n    }\r\n\r\n    static bindToggleSubtitles(\r\n        onToggleSubtitles: (event: KeyboardEvent) => void,\r\n        onSequenceAdvanced: () => void,\r\n        disabledGetter: () => boolean,\r\n        useCapture = false\r\n    ) {\r\n        const sequence = KeySequences.toggleSubtitles();\r\n        const handler = (event: KeyboardEvent) => {\r\n            if (disabledGetter()) {\r\n                sequence.reset();\r\n                return;\r\n            }\r\n\r\n            const transition = sequence.accept(event);\r\n\r\n            if (transition.result === KeySequenceTransitionResult.ADVANCED) {\r\n                onSequenceAdvanced();\r\n            } else if (transition.result === KeySequenceTransitionResult.COMPLETE) {\r\n                onToggleSubtitles(event);\r\n            }\r\n        };\r\n        const unbindDown = KeyBindings._bindDown(handler, useCapture);\r\n        const unbindUp = KeyBindings._bindUp(handler, useCapture);\r\n\r\n        return () => {\r\n            unbindDown();\r\n            unbindUp();\r\n        };\r\n    }\r\n\r\n    static bindToggleSubtitleTrackInVideo(\r\n        onToggleSubtitleTrack: (event: KeyboardEvent, extra: any) => void,\r\n        onSequenceAdvanced: (event: KeyboardEvent) => void,\r\n        disabledGetter: () => boolean,\r\n        useCapture = false\r\n    ) {\r\n        const sequence = KeySequences.toggleSubtitleTrack();\r\n        const handler = (event: KeyboardEvent) => {\r\n            if (disabledGetter()) {\r\n                sequence.reset();\r\n                return;\r\n            }\r\n\r\n            const transition = sequence.accept(event);\r\n\r\n            if (transition.result === KeySequenceTransitionResult.ADVANCED) {\r\n                onSequenceAdvanced(event);\r\n            } else if (transition.result === KeySequenceTransitionResult.COMPLETE) {\r\n                onToggleSubtitleTrack(event, transition.extra);\r\n            }\r\n        };\r\n        const unbindDown = KeyBindings._bindDown(handler, useCapture);\r\n        const unbindUp = KeyBindings._bindUp(handler, useCapture);\r\n\r\n        return () => {\r\n            unbindDown();\r\n            unbindUp();\r\n        };\r\n    }\r\n\r\n    static bindToggleSubtitleTrackInList(\r\n        onToggleSubtitleTrackInList: (event: KeyboardEvent, extra: any) => void,\r\n        onSequenceAdvanced: (event: KeyboardEvent) => void,\r\n        disabledGetter: () => boolean,\r\n        useCapture = false\r\n    ) {\r\n        const sequence = KeySequences.toggleSubtitleTrackInList();\r\n        const handler = (event: KeyboardEvent) => {\r\n            if (disabledGetter()) {\r\n                sequence.reset();\r\n                return;\r\n            }\r\n\r\n            const transition = sequence.accept(event);\r\n\r\n            if (transition.result === KeySequenceTransitionResult.ADVANCED) {\r\n                onSequenceAdvanced(event);\r\n            } else if (transition.result === KeySequenceTransitionResult.COMPLETE) {\r\n                onToggleSubtitleTrackInList(event, transition.extra);\r\n            }\r\n        };\r\n        const unbindDown = KeyBindings._bindDown(handler, useCapture);\r\n        const unbindUp = KeyBindings._bindUp(handler, useCapture);\r\n\r\n        return () => {\r\n            unbindDown();\r\n            unbindUp();\r\n        };\r\n    }\r\n\r\n    static bindPlay(onPlay: (event: KeyboardEvent) => void, disabledGetter: () => boolean, useCapture = false) {\r\n        return KeyBindings._bindDown((event) => {\r\n            if (disabledGetter()) {\r\n                return;\r\n            }\r\n\r\n            if (!KeyEvents.detectPlay(event)) {\r\n                return;\r\n            }\r\n\r\n            onPlay(event);\r\n        }, useCapture);\r\n    }\r\n\r\n    static _bindDown(handler: (event: KeyboardEvent) => void, useCapture: boolean) {\r\n        window.addEventListener('keydown', handler, useCapture);\r\n\r\n        return () => window.removeEventListener('keydown', handler, useCapture);\r\n    }\r\n\r\n    static _bindUp(handler: (event: KeyboardEvent) => void, useCapture: boolean) {\r\n        window.addEventListener('keyup', handler, useCapture);\r\n\r\n        return () => window.removeEventListener('keyup', handler, useCapture);\r\n    }\r\n}\r\n","export default class Mp3Encoder {\r\n    static async encode(blob: Blob, workerFactory: () => Worker): Promise<Blob> {\r\n        return new Promise(async (resolve, reject) => {\r\n            var reader = new FileReader();\r\n            reader.onload = async (e) => {\r\n                try {\r\n                    const audioContext = new AudioContext();\r\n\r\n                    if (e.target === null) {\r\n                        reject(new Error(\"Could not obtain buffer to encode\"));\r\n                        return;\r\n                    }\r\n\r\n                    const audioBuffer = await audioContext.decodeAudioData(e.target.result as ArrayBuffer);\r\n                    const channels = [];\r\n\r\n                    for (let i = 0; i < audioBuffer.numberOfChannels; ++i) {\r\n                        channels.push(audioBuffer.getChannelData(i));\r\n                    }\r\n\r\n                    const worker = workerFactory();\r\n                    worker.postMessage({\r\n                        command: 'encode',\r\n                        audioBuffer: {\r\n                            channels: channels,\r\n                            numberOfChannels: audioBuffer.numberOfChannels,\r\n                            length: audioBuffer.length,\r\n                            sampleRate: audioBuffer.sampleRate,\r\n                        },\r\n                    });\r\n                    worker.onmessage = (e) => {\r\n                        resolve(new Blob(e.data.buffer, { type: 'audio/mp3' }));\r\n                        worker.terminate();\r\n                    };\r\n                    worker.onerror = (e) => {\r\n                        const error = e?.error ?? new Error('MP3 encoding failed: ' + e?.message);\r\n                        reject(error);\r\n                        worker.terminate();\r\n                    };\r\n                } catch (e) {\r\n                    reject(e);\r\n                }\r\n            };\r\n            reader.readAsArrayBuffer(blob);\r\n        });\r\n    }\r\n}\r\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/mp3-encoder.d9a88fab.worker.js\");\n}\n","import Mp3Encoder from './Mp3Encoder';\r\n// eslint-disable-next-line\r\n// @ts-ignore\r\nimport Worker from 'worker-loader!./mp3-encoder.js';\r\nconst AUDIO_TYPES: { [key: string]: string } = { 'audio/ogg;codecs=opus': 'ogg', 'audio/webm;codecs=opus': 'webm' };\r\nconst [recorderMimeType, recorderExtension] = Object.keys(AUDIO_TYPES)\r\n    .filter(MediaRecorder.isTypeSupported)\r\n    .map((t) => [t as string, AUDIO_TYPES[t] as string])[0];\r\nconst defaultMp3WorkerFactory = () => new Worker();\r\n\r\ninterface ExperimentalAudioElement extends HTMLAudioElement {\r\n    audioTracks: any;\r\n    captureStream?: () => MediaStream;\r\n    mozCaptureStream?: () => MediaStream;\r\n}\r\n\r\ninterface AudioData {\r\n    name: string;\r\n    extension: string;\r\n    play: () => Promise<void>;\r\n    blob: () => Promise<Blob>;\r\n    base64: () => Promise<string>;\r\n    slice: (start: number, end: number) => AudioData;\r\n    isSliceable: (start: number, end: number) => boolean;\r\n}\r\n\r\nclass Base64AudioData implements AudioData {\r\n    private readonly _name: string;\r\n    private readonly start: number;\r\n    private readonly end: number;\r\n    private readonly _base64: string;\r\n    private readonly _extension: string;\r\n\r\n    private cachedBlob?: Blob;\r\n\r\n    constructor(baseName: string, start: number, end: number, base64: string, extension: string) {\r\n        this._name = baseName + '_' + Math.floor(start) + '_' + Math.floor(end);\r\n        this.start = start;\r\n        this.end = end;\r\n        this._base64 = base64;\r\n        this._extension = extension;\r\n    }\r\n\r\n    get name(): string {\r\n        return this._name;\r\n    }\r\n\r\n    get extension(): string {\r\n        return this._extension;\r\n    }\r\n\r\n    async base64() {\r\n        return this._base64;\r\n    }\r\n\r\n    async blob() {\r\n        return await this._blob();\r\n    }\r\n\r\n    async play(): Promise<void> {\r\n        const blob = await this._blob();\r\n        const audio = new Audio();\r\n        audio.src = URL.createObjectURL(blob);\r\n        audio.preload = 'none';\r\n        audio.load();\r\n\r\n        await audio.play();\r\n\r\n        return new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n                audio.pause();\r\n                const src = audio.src;\r\n                audio.src = '';\r\n                URL.revokeObjectURL(src);\r\n                resolve(undefined);\r\n            }, this.end - this.start + 1000);\r\n        });\r\n    }\r\n\r\n    async _blob() {\r\n        if (!this.cachedBlob) {\r\n            this.cachedBlob = await (await fetch('data:audio/' + this.extension + ';base64,' + this._base64)).blob();\r\n        }\r\n\r\n        return this.cachedBlob;\r\n    }\r\n\r\n    slice(start: number, end: number): AudioData {\r\n        // Not supported\r\n        return this;\r\n    }\r\n\r\n    isSliceable(start: number, end: number) {\r\n        return false;\r\n    }\r\n}\r\n\r\nclass FileAudioData implements AudioData {\r\n    private readonly file: File;\r\n    private readonly _name: string;\r\n    private readonly start: number;\r\n    private readonly end: number;\r\n    private readonly trackId?: string;\r\n    private readonly _extension: string;\r\n\r\n    private _blob?: Blob;\r\n\r\n    constructor(file: File, start: number, end: number, trackId?: string) {\r\n        this.file = file;\r\n        this._name = file.name + '_' + start + '_' + end;\r\n        this.start = start;\r\n        this.end = end;\r\n        this.trackId = trackId;\r\n        this._extension = recorderExtension;\r\n    }\r\n\r\n    get name(): string {\r\n        return this._name;\r\n    }\r\n\r\n    get extension(): string {\r\n        return this._extension;\r\n    }\r\n\r\n    async base64() {\r\n        return new Promise<string>(async (resolve, reject) => {\r\n            var reader = new FileReader();\r\n            reader.readAsDataURL(await this.blob());\r\n            reader.onloadend = () => {\r\n                const result = reader.result as string;\r\n                const base64 = result.substring(result.indexOf(',') + 1);\r\n                resolve(base64);\r\n            };\r\n        });\r\n    }\r\n\r\n    async play() {\r\n        if (!this._blob) {\r\n            this._blob = await this._clipAudio();\r\n            return;\r\n        }\r\n\r\n        const audio = await this._audioElement(this._blob, false);\r\n        audio.currentTime = 0;\r\n        await audio.play();\r\n        await this._stopAudio(audio);\r\n    }\r\n\r\n    async blob() {\r\n        if (!this._blob) {\r\n            this._blob = await this._clipAudio();\r\n        }\r\n\r\n        return this._blob;\r\n    }\r\n\r\n    async _clipAudio(): Promise<Blob> {\r\n        return new Promise(async (resolve, reject) => {\r\n            const audio = await this._audioElement(this.file, true);\r\n\r\n            audio.oncanplay = async (e) => {\r\n                audio.play();\r\n                const stream = this._captureStream(audio);\r\n\r\n                for (const t of stream.getVideoTracks()) {\r\n                    t.stop();\r\n                }\r\n\r\n                const recorder = new MediaRecorder(stream, { mimeType: recorderMimeType });\r\n                const chunks: BlobPart[] = [];\r\n\r\n                recorder.ondataavailable = (e) => {\r\n                    chunks.push(e.data);\r\n                };\r\n\r\n                recorder.onstop = (e) => {\r\n                    resolve(new Blob(chunks));\r\n                };\r\n\r\n                recorder.start();\r\n                await this._stopAudio(audio);\r\n                recorder.stop();\r\n            };\r\n        });\r\n    }\r\n\r\n    _audioElement(source: Blob, selectTrack: boolean): Promise<ExperimentalAudioElement> {\r\n        const audio = new Audio() as ExperimentalAudioElement;\r\n        audio.src = URL.createObjectURL(source);\r\n\r\n        return new Promise((resolve, reject) => {\r\n            audio.onloadedmetadata = (e) => {\r\n                if (selectTrack && this.trackId && audio.audioTracks && audio.audioTracks.length > 0) {\r\n                    // @ts-ignore\r\n                    for (const t of audio.audioTracks) {\r\n                        t.enabled = this.trackId === t.id;\r\n                    }\r\n                }\r\n\r\n                audio.currentTime = this.start / 1000;\r\n                resolve(audio);\r\n            };\r\n        });\r\n    }\r\n\r\n    _captureStream(audio: ExperimentalAudioElement) {\r\n        if (typeof audio.captureStream === 'function') {\r\n            return audio.captureStream();\r\n        }\r\n\r\n        if (typeof audio.mozCaptureStream === 'function') {\r\n            return audio.mozCaptureStream();\r\n        }\r\n\r\n        throw new Error('Unable to capture stream from audio');\r\n    }\r\n\r\n    async _stopAudio(audio: ExperimentalAudioElement): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n                audio.pause();\r\n                const src = audio.src;\r\n                audio.src = '';\r\n                URL.revokeObjectURL(src);\r\n                resolve(undefined);\r\n            }, this.end - this.start + 100);\r\n        });\r\n    }\r\n\r\n    slice(start: number, end: number) {\r\n        return new FileAudioData(this.file, start, end, this.trackId);\r\n    }\r\n\r\n    isSliceable(start: number, end: number) {\r\n        return true;\r\n    }\r\n}\r\n\r\nclass Mp3AudioData implements AudioData {\r\n    private readonly data: AudioData;\r\n    private readonly workerFactory: () => Worker;\r\n    private _blob?: Blob;\r\n\r\n    constructor(data: AudioData, workerFactory: () => Worker) {\r\n        this.data = data;\r\n        this.workerFactory = workerFactory;\r\n    }\r\n\r\n    get name() {\r\n        return this.data.name;\r\n    }\r\n\r\n    get extension() {\r\n        return 'mp3';\r\n    }\r\n\r\n    async base64() {\r\n        return new Promise<string>(async (resolve, reject) => {\r\n            try {\r\n                var reader = new FileReader();\r\n                reader.readAsDataURL(await this.blob());\r\n                reader.onloadend = () => {\r\n                    const result = reader.result as string;\r\n                    const base64 = result.substring(result.indexOf(',') + 1);\r\n                    resolve(base64);\r\n                };\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    }\r\n\r\n    async play() {\r\n        await this.data.play();\r\n    }\r\n\r\n    async blob() {\r\n        if (!this._blob) {\r\n            this._blob = await Mp3Encoder.encode(await this.data.blob(), this.workerFactory);\r\n        }\r\n\r\n        return this._blob;\r\n    }\r\n\r\n    slice(start: number, end: number) {\r\n        return new Mp3AudioData(this.data.slice(start, end), this.workerFactory);\r\n    }\r\n\r\n    isSliceable(start: number, end: number) {\r\n        return this.data.isSliceable(start, end);\r\n    }\r\n}\r\n\r\nexport default class AudioClip {\r\n    private readonly data: AudioData;\r\n\r\n    constructor(data: AudioData) {\r\n        this.data = data;\r\n    }\r\n\r\n    static fromBase64(subtitleFileName: string, start: number, end: number, base64: string, extension: string) {\r\n        return new AudioClip(\r\n            new Base64AudioData(\r\n                subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')),\r\n                start,\r\n                end,\r\n                base64,\r\n                extension\r\n            )\r\n        );\r\n    }\r\n\r\n    static fromFile(file: File, start: number, end: number, trackId?: string) {\r\n        return new AudioClip(new FileAudioData(file, start, end, trackId));\r\n    }\r\n\r\n    get name() {\r\n        return this.data.name + '.' + this.data.extension;\r\n    }\r\n\r\n    async play() {\r\n        await this.data.play();\r\n    }\r\n\r\n    async base64() {\r\n        return await this.data.base64();\r\n    }\r\n\r\n    async download() {\r\n        const blob = await this.data.blob();\r\n        const url = window.URL.createObjectURL(blob);\r\n        const a = document.createElement('a');\r\n        document.body.appendChild(a);\r\n        a.style.display = 'none';\r\n        a.href = url;\r\n        a.download = this.name;\r\n        a.click();\r\n        URL.revokeObjectURL(url);\r\n        a.remove();\r\n    }\r\n\r\n    toMp3(mp3WorkerFactory = defaultMp3WorkerFactory) {\r\n        return new AudioClip(new Mp3AudioData(this.data, mp3WorkerFactory));\r\n    }\r\n\r\n    slice(start: number, end: number) {\r\n        return new AudioClip(this.data.slice(start, end));\r\n    }\r\n\r\n    isSliceable(start: number, end: number) {\r\n        return this.data.isSliceable(start, end);\r\n    }\r\n}\r\n","export default class CanvasResizer {\r\n    resize(\r\n        canvas: HTMLCanvasElement,\r\n        ctx: CanvasRenderingContext2D,\r\n        maxWidth: number,\r\n        maxHeight: number\r\n    ): Promise<HTMLCanvasElement> {\r\n        return new Promise((resolve, reject) => {\r\n            const widthRatio = maxWidth <= 0 ? 1 : maxWidth / canvas.width;\r\n            const heightRatio = maxHeight <= 0 ? 1 : maxHeight / canvas.height;\r\n            const ratio = Math.min(1, Math.min(widthRatio, heightRatio));\r\n\r\n            if (ratio < 1) {\r\n                const newWidth = canvas.width * ratio;\r\n                const newHeight = canvas.height * ratio;\r\n                createImageBitmap(canvas, { resizeWidth: newWidth, resizeHeight: newHeight })\r\n                    .then((sprite) => {\r\n                        canvas.width = newWidth;\r\n                        canvas.height = newHeight;\r\n                        ctx.drawImage(sprite, 0, 0);\r\n                        resolve(canvas);\r\n                    })\r\n                    .catch((e) => reject(e));\r\n            } else {\r\n                resolve(canvas);\r\n            }\r\n        });\r\n    }\r\n}\r\n","import CanvasResizer from './CanvasResizer';\r\n\r\nclass Base64ImageData implements ImageData {\r\n    private readonly _name: string;\r\n    private readonly _base64: string;\r\n    private readonly _extension: string;\r\n\r\n    private cachedBlob?: Blob;\r\n\r\n    constructor(name: string, base64: string, extension: string) {\r\n        this._name = name;\r\n        this._base64 = base64;\r\n        this._extension = extension;\r\n    }\r\n\r\n    get name() {\r\n        return this._name;\r\n    }\r\n\r\n    get extension() {\r\n        return this._extension;\r\n    }\r\n\r\n    async base64() {\r\n        return this._base64;\r\n    }\r\n\r\n    async blob() {\r\n        return await this._blob();\r\n    }\r\n\r\n    async _blob() {\r\n        if (!this.cachedBlob) {\r\n            this.cachedBlob = await (await fetch(this._dataUrl())).blob();\r\n        }\r\n\r\n        return this.cachedBlob;\r\n    }\r\n\r\n    async dataUrl() {\r\n        return this._dataUrl();\r\n    }\r\n\r\n    _dataUrl() {\r\n        return 'data:image/' + this.extension + ';base64,' + this._base64;\r\n    }\r\n}\r\n\r\nclass FileImageData implements ImageData {\r\n    private readonly file: File;\r\n    private readonly timestamp: number;\r\n    private readonly maxWidth: number;\r\n    private readonly maxHeight: number;\r\n    private readonly _name: string;\r\n\r\n    constructor(file: File, timestamp: number, maxWidth: number, maxHeight: number) {\r\n        this.file = file;\r\n        this._name = file.name + '_' + Math.floor(timestamp) + '.jpeg';\r\n        this.timestamp = timestamp;\r\n        this.maxWidth = maxWidth;\r\n        this.maxHeight = maxHeight;\r\n    }\r\n\r\n    get name() {\r\n        return this._name;\r\n    }\r\n\r\n    async base64(): Promise<string> {\r\n        return new Promise(async (resolve, reject) => {\r\n            const canvas = await this._canvas();\r\n            const dataUrl = canvas.toDataURL('image/jpeg');\r\n            resolve(dataUrl.substring(dataUrl.indexOf(',') + 1));\r\n        });\r\n    }\r\n\r\n    async blob(): Promise<Blob> {\r\n        return new Promise(async (resolve, reject) => {\r\n            const canvas = await this._canvas();\r\n            canvas.toBlob((blob) => {\r\n                if (blob === null) {\r\n                    reject(new Error('Could not obtain blob'));\r\n                } else {\r\n                    resolve(blob);\r\n                }\r\n            }, 'image/jpeg');\r\n        });\r\n    }\r\n\r\n    async dataUrl() {\r\n        const canvas = await this._canvas();\r\n        return canvas.toDataURL();\r\n    }\r\n\r\n    async _canvas(): Promise<HTMLCanvasElement> {\r\n        return new Promise(async (resolve, reject) => {\r\n            const video = this._videoElement(this.file);\r\n\r\n            video.oncanplay = async (e) => {\r\n                const canvas = document.createElement('canvas');\r\n                canvas.width = video.videoWidth;\r\n                canvas.height = video.videoHeight;\r\n                const ctx = canvas.getContext('2d');\r\n                ctx!.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n                if (this.maxWidth > 0 || this.maxHeight > 0) {\r\n                    const resizer = new CanvasResizer();\r\n                    await resizer.resize(canvas, ctx!, this.maxWidth, this.maxHeight);\r\n                    resolve(canvas);\r\n                } else {\r\n                    resolve(canvas);\r\n                }\r\n                URL.revokeObjectURL(video.src);\r\n            };\r\n        });\r\n    }\r\n\r\n    _videoElement(source: File) {\r\n        const video = document.createElement('video');\r\n        video.src = URL.createObjectURL(source);\r\n        video.preload = 'none';\r\n        video.currentTime = this.timestamp / 1000;\r\n        video.load();\r\n\r\n        return video;\r\n    }\r\n}\r\n\r\ninterface ImageData {\r\n    name: string;\r\n    base64: () => Promise<string>;\r\n    dataUrl: () => Promise<string>;\r\n    blob: () => Promise<Blob>;\r\n}\r\n\r\nexport default class Image {\r\n    private readonly data: ImageData;\r\n\r\n    constructor(data: ImageData) {\r\n        this.data = data;\r\n    }\r\n\r\n    static fromBase64(subtitleFileName: string, timestamp: number, base64: string, extension: string) {\r\n        const imageName =\r\n            subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')) +\r\n            '_' +\r\n            Math.floor(timestamp) +\r\n            '.' +\r\n            extension;\r\n        return new Image(new Base64ImageData(imageName, base64, extension));\r\n    }\r\n\r\n    static fromFile(file: File, timestamp: number, maxWidth: number, maxHeight: number) {\r\n        return new Image(new FileImageData(file, timestamp, maxWidth, maxHeight));\r\n    }\r\n\r\n    get name() {\r\n        return this.data.name;\r\n    }\r\n\r\n    async base64() {\r\n        return await this.data.base64();\r\n    }\r\n\r\n    async dataUrl() {\r\n        return await this.data.dataUrl();\r\n    }\r\n\r\n    async download() {\r\n        const blob = await this.data.blob();\r\n        const url = window.URL.createObjectURL(blob);\r\n        const a = document.createElement('a');\r\n        document.body.appendChild(a);\r\n        a.style.display = 'none';\r\n        a.href = url;\r\n        a.download = this.data.name;\r\n        a.click();\r\n        URL.revokeObjectURL(url);\r\n        a.remove();\r\n    }\r\n}\r\n","export interface Fetcher {\r\n    fetch: (url: string, body: any) => Promise<any>;\r\n}\r\n\r\nexport class HttpFetcher implements Fetcher {\r\n    async fetch(url: string, body: any) {\r\n        const response = await fetch(url, {\r\n            method: 'POST',\r\n            body: JSON.stringify(body),\r\n        });\r\n        return await response.json();\r\n    }\r\n}\r\n","import { AnkiSettings, AudioClip, Image } from '..';\r\nimport { HttpFetcher, Fetcher } from './Fetcher';\r\n\r\nconst ankiQuerySpecialCharacters = ['\"', '*', '_', '\\\\', ':'];\r\nconst fileNameSpecialCharacters = [':', '/', '\\\\', '<', '>', '\"', '|', '?', '*', '^'];\r\n\r\nexport type ExportMode = 'gui' | 'updateLast' | 'default';\r\n\r\nexport default class Anki {\r\n    private readonly settingsProvider: AnkiSettings;\r\n    private readonly fetcher: Fetcher;\r\n\r\n    constructor(settingsProvider: AnkiSettings, fetcher = new HttpFetcher()) {\r\n        this.settingsProvider = settingsProvider;\r\n        this.fetcher = fetcher;\r\n    }\r\n\r\n    async deckNames(ankiConnectUrl?: string) {\r\n        const response = await this._executeAction('deckNames', null, ankiConnectUrl);\r\n        return response.result;\r\n    }\r\n\r\n    async modelNames(ankiConnectUrl?: string) {\r\n        const response = await this._executeAction('modelNames', null, ankiConnectUrl);\r\n        return response.result;\r\n    }\r\n\r\n    async modelFieldNames(modelName: string, ankiConnectUrl?: string) {\r\n        const response = await this._executeAction('modelFieldNames', { modelName: modelName }, ankiConnectUrl);\r\n        return response.result;\r\n    }\r\n\r\n    async findNotesWithWord(word: string, ankiConnectUrl?: string) {\r\n        const response = await this._executeAction(\r\n            'findNotes',\r\n            { query: this.settingsProvider.wordField + ':' + this._escapeQuery(word) },\r\n            ankiConnectUrl\r\n        );\r\n        return response.result;\r\n    }\r\n\r\n    async findNotesWithWordGui(word: string, ankiConnectUrl?: string) {\r\n        const response = await this._executeAction(\r\n            'guiBrowse',\r\n            { query: this.settingsProvider.wordField + ':' + this._escapeQuery(word) },\r\n            ankiConnectUrl\r\n        );\r\n        return response.result;\r\n    }\r\n\r\n    _escapeQuery(query: string) {\r\n        let escaped = '';\r\n\r\n        for (let i = 0; i < query.length; ++i) {\r\n            const char = query[i];\r\n            if (ankiQuerySpecialCharacters.includes(char)) {\r\n                escaped += `\\\\${char}`;\r\n            } else {\r\n                escaped += char;\r\n            }\r\n        }\r\n\r\n        return `\"${escaped}\"`;\r\n    }\r\n\r\n    async requestPermission(ankiConnectUrl?: string) {\r\n        const response = await this._executeAction('requestPermission', null, ankiConnectUrl);\r\n        return response.result;\r\n    }\r\n\r\n    async export(\r\n        text: string | undefined,\r\n        definition: string | undefined,\r\n        audioClip: AudioClip | undefined,\r\n        image: Image | undefined,\r\n        word: string | undefined,\r\n        source: string | undefined,\r\n        url: string | undefined,\r\n        customFieldValues: { [key: string]: string },\r\n        tags: string[],\r\n        mode: ExportMode,\r\n        ankiConnectUrl?: string\r\n    ) {\r\n        const fields = {};\r\n\r\n        this._appendField(fields, this.settingsProvider.sentenceField, text, true);\r\n        this._appendField(fields, this.settingsProvider.definitionField, definition, true);\r\n        this._appendField(fields, this.settingsProvider.wordField, word, false);\r\n        this._appendField(fields, this.settingsProvider.sourceField, source, false);\r\n        this._appendField(fields, this.settingsProvider.urlField, url, false);\r\n\r\n        if (customFieldValues) {\r\n            for (const customFieldName of Object.keys(customFieldValues)) {\r\n                this._appendField(\r\n                    fields,\r\n                    this.settingsProvider.customAnkiFields[customFieldName],\r\n                    customFieldValues[customFieldName],\r\n                    false\r\n                );\r\n            }\r\n        }\r\n\r\n        const params: any = {\r\n            note: {\r\n                deckName: this.settingsProvider.deck,\r\n                modelName: this.settingsProvider.noteType,\r\n                tags: tags,\r\n                options: {\r\n                    allowDuplicate: false,\r\n                    duplicateScope: 'deck',\r\n                    duplicateScopeOptions: {\r\n                        deckName: this.settingsProvider.deck,\r\n                        checkChildren: false,\r\n                    },\r\n                },\r\n            },\r\n        };\r\n\r\n        const gui = mode === 'gui';\r\n\r\n        if (this.settingsProvider.audioField && audioClip) {\r\n            const sanitizedName = this._sanitizeFileName(audioClip.name);\r\n\r\n            if (gui) {\r\n                const fileName = (await this._storeMediaFile(sanitizedName, await audioClip.base64(), ankiConnectUrl))\r\n                    .result;\r\n                this._appendField(fields, this.settingsProvider.audioField, `[sound:${fileName}]`, false);\r\n            } else {\r\n                params.note['audio'] = {\r\n                    filename: sanitizedName,\r\n                    data: await audioClip.base64(),\r\n                    fields: [this.settingsProvider.audioField],\r\n                };\r\n            }\r\n        }\r\n\r\n        if (this.settingsProvider.imageField && image) {\r\n            const sanitizedName = this._sanitizeFileName(image.name);\r\n\r\n            if (gui) {\r\n                const fileName = (await this._storeMediaFile(sanitizedName, await image.base64(), ankiConnectUrl))\r\n                    .result;\r\n                this._appendField(\r\n                    fields,\r\n                    this.settingsProvider.imageField,\r\n                    `<div><img src=\"${fileName}\"></div>`,\r\n                    false\r\n                );\r\n            } else {\r\n                params.note['picture'] = {\r\n                    filename: sanitizedName,\r\n                    data: await image.base64(),\r\n                    fields: [this.settingsProvider.imageField],\r\n                };\r\n            }\r\n        }\r\n\r\n        params.note['fields'] = fields;\r\n\r\n        switch (mode) {\r\n            case 'gui':\r\n                return (await this._executeAction('guiAddCards', params, ankiConnectUrl)).result;\r\n            case 'updateLast':\r\n                const recentNotes = (\r\n                    await this._executeAction('findNotes', { query: 'added:1' }, ankiConnectUrl)\r\n                ).result.sort();\r\n\r\n                if (recentNotes.length === 0) {\r\n                    throw new Error('Could not find note to update');\r\n                }\r\n\r\n                const lastNoteId = recentNotes[recentNotes.length - 1];\r\n                params.note['id'] = lastNoteId;\r\n                await this._executeAction('updateNoteFields', params, ankiConnectUrl);\r\n                return lastNoteId;\r\n            case 'default':\r\n                return (await this._executeAction('addNote', params, ankiConnectUrl)).result;\r\n            default:\r\n                throw new Error('Unknown export mode: ' + mode);\r\n        }\r\n    }\r\n\r\n    _appendField(fields: any, fieldName: string | undefined, value: string | undefined, multiline: boolean) {\r\n        if (!fieldName || !value) {\r\n            return;\r\n        }\r\n\r\n        let newValue = multiline ? value.split('\\n').join('<br>') : value;\r\n        const existingValue = fields[fieldName];\r\n\r\n        if (existingValue) {\r\n            newValue = existingValue + '<br>' + newValue;\r\n        }\r\n\r\n        fields[fieldName] = newValue;\r\n    }\r\n\r\n    _sanitizeFileName(name: string) {\r\n        let sanitized = '';\r\n\r\n        for (let i = 0; i < name.length; ++i) {\r\n            const char = name[i];\r\n\r\n            if (fileNameSpecialCharacters.includes(char)) {\r\n                sanitized += '_';\r\n            } else {\r\n                sanitized += char;\r\n            }\r\n        }\r\n\r\n        return sanitized;\r\n    }\r\n\r\n    async _storeMediaFile(name: string, base64: string, ankiConnectUrl?: string) {\r\n        return this._executeAction('storeMediaFile', { filename: name, data: base64 }, ankiConnectUrl);\r\n    }\r\n\r\n    async _executeAction(action: string, params: any, ankiConnectUrl?: string) {\r\n        const body: any = {\r\n            action: action,\r\n            version: 6,\r\n        };\r\n\r\n        if (params) {\r\n            body['params'] = params;\r\n        }\r\n\r\n        const json = await this.fetcher.fetch(ankiConnectUrl || this.settingsProvider.ankiConnectUrl, body);\r\n\r\n        if (json.error) {\r\n            throw new Error(json.error);\r\n        }\r\n\r\n        return json;\r\n    }\r\n}\r\n","import { SubtitleModel } from './Model';\r\n\r\nexport function humanReadableTime(timestamp: number, nearestTenth = false): string {\r\n    const totalSeconds = Math.floor(timestamp / 1000);\r\n    let seconds;\r\n\r\n    if (nearestTenth) {\r\n        seconds = Math.round(((timestamp / 1000) % 60) * 10) / 10;\r\n    } else {\r\n        seconds = totalSeconds % 60;\r\n    }\r\n\r\n    const minutes = Math.floor(totalSeconds / 60) % 60;\r\n    const hours = Math.floor(totalSeconds / 3600);\r\n\r\n    if (hours > 0) {\r\n        return hours + 'h' + String(minutes).padStart(2, '0') + 'm' + String(seconds).padStart(2, '0') + 's';\r\n    }\r\n\r\n    return minutes + 'm' + String(seconds).padStart(2, '0') + 's';\r\n}\r\n\r\nexport function surroundingSubtitles(\r\n    subtitles: SubtitleModel[],\r\n    index: number,\r\n    countRadius: number,\r\n    timeRadius: number\r\n): SubtitleModel[] {\r\n    let startIndex = index;\r\n\r\n    for (let i = index; i >= 0; --i) {\r\n        startIndex = i;\r\n\r\n        if (atBoundary(subtitles, startIndex, index, countRadius, timeRadius, false)) {\r\n            break;\r\n        }\r\n    }\r\n\r\n    let endIndex = startIndex;\r\n\r\n    for (let i = index; i <= subtitles.length - 1; ++i) {\r\n        endIndex = i;\r\n\r\n        if (atBoundary(subtitles, endIndex, index, countRadius, timeRadius, true)) {\r\n            break;\r\n        }\r\n    }\r\n\r\n    return subtitles.slice(startIndex, endIndex + 1);\r\n}\r\n\r\nexport function mockSurroundingSubtitles(\r\n    middleSubtitle: SubtitleModel,\r\n    maxTimestamp: number,\r\n    timeRadius: number\r\n): SubtitleModel[] {\r\n    const subtitles = [middleSubtitle];\r\n    const offset = middleSubtitle.start - middleSubtitle.originalStart;\r\n\r\n    if (middleSubtitle.end < maxTimestamp) {\r\n        const afterTimestamp = Math.min(maxTimestamp, middleSubtitle.end + timeRadius);\r\n        subtitles.push({\r\n            text: '',\r\n            start: middleSubtitle.end,\r\n            end: afterTimestamp,\r\n            originalStart: middleSubtitle.end - offset,\r\n            originalEnd: afterTimestamp - offset,\r\n            track: middleSubtitle.track,\r\n        });\r\n    }\r\n\r\n    if (middleSubtitle.start > 0) {\r\n        const beforeTimestamp = Math.max(0, middleSubtitle.start - timeRadius);\r\n        subtitles.unshift({\r\n            text: '',\r\n            start: beforeTimestamp,\r\n            end: middleSubtitle.start,\r\n            originalStart: beforeTimestamp - offset,\r\n            originalEnd: middleSubtitle.start - offset,\r\n            track: middleSubtitle.track,\r\n        });\r\n    }\r\n\r\n    return subtitles;\r\n}\r\n\r\nfunction atBoundary(\r\n    subtitles: SubtitleModel[],\r\n    index: number,\r\n    initialIndex: number,\r\n    countRadius: number,\r\n    timeRadius: number,\r\n    sign: boolean\r\n): boolean {\r\n    let next;\r\n\r\n    if (sign) {\r\n        next = index + 1 < subtitles.length ? subtitles[index + 1] : null;\r\n    } else {\r\n        next = index - 1 >= 0 ? subtitles[index - 1] : null;\r\n    }\r\n\r\n    if (\r\n        Math.abs(initialIndex - index) >= countRadius &&\r\n        (next === null || Math.abs(next.start - subtitles[initialIndex].start) >= timeRadius)\r\n    ) {\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n","import { useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport MuiAlert, { Color } from '@material-ui/lab/Alert';\r\nimport Grow from '@material-ui/core/Grow';\r\n\r\nconst useAlertStyles = makeStyles({\r\n    root: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        position: 'fixed',\r\n        top: 80,\r\n        width: '100%',\r\n        pointerEvents: 'none',\r\n        zIndex: 2000,\r\n    },\r\n});\r\n\r\ninterface Props {\r\n    open: boolean;\r\n    autoHideDuration: number;\r\n    onClose: () => void;\r\n    severity: Color | undefined;\r\n    children: React.ReactNode\r\n}\r\n\r\nexport default function Alert(props: Props) {\r\n    const classes = useAlertStyles();\r\n\r\n    useEffect(() => {\r\n        if (props.open) {\r\n            const timeout = setTimeout(props.onClose, props.autoHideDuration);\r\n            return () => clearTimeout(timeout);\r\n        }\r\n    }, [props.open, props.autoHideDuration, props.onClose]);\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Grow in={props.open}>\r\n                <MuiAlert severity={props.severity}>{props.children}</MuiAlert>\r\n            </Grow>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useCallback, useEffect, useState } from \"react\";\r\nimport { TextField, TextFieldProps } from \"@material-ui/core\";\r\n\r\nfunction extractTagsFromString(value: string) {\r\n    const splitTags = value.split(' ').join('').split(',');\r\n    const tags = [];\r\n\r\n    for (const tag of splitTags) {\r\n        tags.push(tag.trim());\r\n    }\r\n\r\n    return tags;\r\n}\r\n\r\nexport interface Props {\r\n    tags: string[];\r\n    onTagsChange: (tags: string[]) => void;\r\n}\r\n\r\nexport default function TagsTextField({tags, onTagsChange, ...props}: Props & TextFieldProps) {\r\n    const [value, setValue] = useState('');\r\n\r\n    useEffect(() => {\r\n        const tagsString = tags.join(', ');\r\n\r\n        if (tagsString !== value) {\r\n            setValue(tags.join(', '));\r\n        }\r\n    }, [value, tags]);\r\n\r\n    const handleChange = useCallback((e) => {\r\n        let currentValue = e.target.value;\r\n\r\n        if (\r\n            value.length > currentValue.length &&\r\n            value.includes(currentValue) &&\r\n            currentValue.endsWith(',')\r\n        ) {\r\n            // Detected a backspace at the last comma, move cursor back enough to remove the comma\r\n            currentValue = currentValue.substring(0, currentValue.length - 1);\r\n        }\r\n\r\n        // Decompose string into individual tags by removing all spaces and splitting on \",\"\r\n        const newTags = extractTagsFromString(currentValue);\r\n        setValue(newTags.join(', '));\r\n        onTagsChange(newTags);\r\n    }, [value, onTagsChange]);\r\n\r\n    return (\r\n        <TextField\r\n            {...props}\r\n            value={value}\r\n            onChange={handleChange}\r\n        />\r\n    );\r\n}\r\n","import { useCallback, useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Anki, AnkiDialogSliderContext, AudioClip, Image, humanReadableTime, AnkiSettings } from '@project/common';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport RestoreIcon from '@material-ui/icons/Restore';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport Slider, { Mark } from '@material-ui/core/Slider';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ZoomInIcon from '@material-ui/icons/ZoomIn';\r\nimport TagsTextField from './TagsTextField';\r\nimport { ExportMode } from '@project/common/src/Anki';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        '& .MuiTextField-root': {\r\n            marginBottom: theme.spacing(1),\r\n        },\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    mediaField: {\r\n        cursor: 'pointer',\r\n        '& input': {\r\n            cursor: 'pointer',\r\n        },\r\n    },\r\n    rangeSelectSlider: {\r\n        '& .MuiSlider-markLabel': {\r\n            transform: 'translateX(-3%)',\r\n        },\r\n    },\r\n}));\r\n\r\nfunction boundaryIntervalFromSliderContext(sliderContext: AnkiDialogSliderContext) {\r\n    let min = null;\r\n    let max = null;\r\n\r\n    for (const s of sliderContext.subtitles) {\r\n        if (min === null || s.start < min) {\r\n            min = s.start;\r\n        }\r\n\r\n        if (max === null || s.end > max) {\r\n            max = s.end;\r\n        }\r\n    }\r\n\r\n    return min !== null && max !== null && [min, max];\r\n}\r\n\r\nfunction sliderMarksFromSliderContext(sliderContext: AnkiDialogSliderContext, boundary: number[]): Mark[] {\r\n    const seenTimestamps: any = {};\r\n\r\n    return sliderContext.subtitles\r\n        .filter((s) => s.text.trim() !== '')\r\n        .map((s) => {\r\n            if (s.start in seenTimestamps) {\r\n                return null;\r\n            }\r\n\r\n            seenTimestamps[s.start] = true;\r\n\r\n            return {\r\n                value: s.start,\r\n                label: `${s.text.trim().substring(0, Math.min(s.text.length, 3))}...`,\r\n            };\r\n        })\r\n        .filter((mark: Mark | null) => mark !== null)\r\n        .filter((mark: Mark | null) => mark!.value >= boundary[0] && mark!.value <= boundary[1]) as Mark[];\r\n}\r\n\r\nfunction sliderValueLabelFormat(ms: number) {\r\n    return humanReadableTime(ms, true);\r\n}\r\n\r\ninterface ValueLabelComponentProps {\r\n    children: React.ReactElement;\r\n    open: boolean;\r\n    value: number;\r\n}\r\n\r\nfunction ValueLabelComponent({ children, open, value }: ValueLabelComponentProps) {\r\n    return (\r\n        <Tooltip open={open} enterTouchDelay={0} placement=\"top\" title={value}>\r\n            {children}\r\n        </Tooltip>\r\n    );\r\n}\r\n\r\ninterface AnkiDialogProps {\r\n    open: boolean;\r\n    disabled: boolean;\r\n    text?: string;\r\n    onProceed: (\r\n        text: string,\r\n        definition: string,\r\n        audioClip: AudioClip | undefined,\r\n        image: Image | undefined,\r\n        word: string,\r\n        source: string,\r\n        url: string,\r\n        customFieldValues: { [key: string]: string },\r\n        tags: string[],\r\n        mode: ExportMode\r\n    ) => void;\r\n    onCancel: () => void;\r\n    onViewImage: (image: Image) => void;\r\n    onOpenSettings: () => void;\r\n    audioClip?: AudioClip;\r\n    image?: Image;\r\n    source?: string;\r\n    url?: string;\r\n    sliderContext?: AnkiDialogSliderContext;\r\n    customFields: { [key: string]: string };\r\n    settingsProvider: AnkiSettings;\r\n    anki: Anki;\r\n}\r\n\r\nexport default function AnkiDialog({\r\n    open,\r\n    disabled,\r\n    text: initialText,\r\n    onProceed,\r\n    onCancel,\r\n    onViewImage,\r\n    onOpenSettings,\r\n    audioClip: initialAudioClip,\r\n    image,\r\n    source: initialSource,\r\n    url: initialUrl,\r\n    sliderContext,\r\n    customFields,\r\n    settingsProvider,\r\n    anki,\r\n}: AnkiDialogProps) {\r\n    const classes = useStyles();\r\n    const [definition, setDefinition] = useState<string>('');\r\n    const [text, setText] = useState<string>('');\r\n    const [word, setWord] = useState<string>('');\r\n    const [lastSearchedWord, setLastSearchedWord] = useState<string>();\r\n    const [source, setSource] = useState<string | undefined>(initialSource);\r\n    const [tags, setTags] = useState<string[]>(settingsProvider.tags);\r\n    const [url, setUrl] = useState<string | undefined>(initialUrl);\r\n    const [duplicateNotes, setDuplicateNotes] = useState<any[]>([]);\r\n    const [wordTimestamp, setWordTimestamp] = useState<number>(0);\r\n    const [customFieldValues, setCustomFieldValues] = useState<{ [key: string]: string }>({});\r\n    const [timestampInterval, setTimestampInterval] = useState<number[]>();\r\n    const [initialTimestampInterval, setInitialTimestampInterval] = useState<number[]>();\r\n    const [initialTimestampBoundaryInterval, setInitialTimestampBoundaryInterval] = useState<number[]>();\r\n    const [timestampBoundaryInterval, setTimestampBoundaryInterval] = useState<number[]>();\r\n    const [timestampMarks, setTimestampMarks] = useState<Mark[]>();\r\n    const [lastAppliedTimestampIntervalToText, setLastAppliedTimestampIntervalToText] = useState<number[]>();\r\n    const [lastAppliedTimestampIntervalToAudio, setLastAppliedTimestampIntervalToAudio] = useState<number[]>();\r\n    const [audioClip, setAudioClip] = useState<AudioClip>();\r\n\r\n    useEffect(() => {\r\n        setText(initialText ?? '');\r\n        setDefinition('');\r\n        setWord('');\r\n        setSource(initialSource);\r\n        setUrl(initialUrl);\r\n        setDuplicateNotes([]);\r\n        setCustomFieldValues({});\r\n        setTags(settingsProvider.tags);\r\n    }, [initialText, initialSource, initialUrl, settingsProvider.tags]);\r\n\r\n    useEffect(() => {\r\n        const timestampInterval =\r\n            (sliderContext && [sliderContext.subtitleStart, sliderContext.subtitleEnd]) || undefined;\r\n        const timestampBoundaryInterval =\r\n            (sliderContext && boundaryIntervalFromSliderContext(sliderContext)) || undefined;\r\n        setTimestampInterval(timestampInterval);\r\n        setInitialTimestampInterval(timestampInterval);\r\n        setLastAppliedTimestampIntervalToText(timestampInterval);\r\n        setLastAppliedTimestampIntervalToAudio(timestampInterval);\r\n        setTimestampBoundaryInterval(timestampBoundaryInterval);\r\n        setInitialTimestampBoundaryInterval(timestampBoundaryInterval);\r\n        setTimestampMarks(\r\n            sliderContext &&\r\n                timestampBoundaryInterval &&\r\n                sliderMarksFromSliderContext(sliderContext, timestampBoundaryInterval)\r\n        );\r\n    }, [sliderContext]);\r\n\r\n    useEffect(() => {\r\n        if (!initialAudioClip) {\r\n            setAudioClip(undefined);\r\n            return;\r\n        }\r\n\r\n        let newAudioClip = initialAudioClip;\r\n\r\n        if (settingsProvider.preferMp3) {\r\n            newAudioClip = newAudioClip.toMp3();\r\n        }\r\n\r\n        if (lastAppliedTimestampIntervalToAudio) {\r\n            newAudioClip = newAudioClip.slice(\r\n                Math.max(0, Math.round(lastAppliedTimestampIntervalToAudio[0]) - settingsProvider.audioPaddingStart),\r\n                Math.round(lastAppliedTimestampIntervalToAudio[1]) + settingsProvider.audioPaddingEnd\r\n            );\r\n        }\r\n\r\n        setAudioClip(newAudioClip);\r\n    }, [\r\n        initialAudioClip,\r\n        settingsProvider.preferMp3,\r\n        lastAppliedTimestampIntervalToAudio,\r\n        settingsProvider.audioPaddingStart,\r\n        settingsProvider.audioPaddingEnd,\r\n    ]);\r\n\r\n    useEffect(() => {\r\n        setWordTimestamp(Date.now());\r\n    }, [word]);\r\n\r\n    useEffect(() => {\r\n        if (!word || !settingsProvider.wordField) {\r\n            return;\r\n        }\r\n\r\n        const trimmedWord = word.trim();\r\n\r\n        if (trimmedWord === '' || trimmedWord === lastSearchedWord) {\r\n            return;\r\n        }\r\n\r\n        const timeout = setTimeout(async () => {\r\n            try {\r\n                setDuplicateNotes(await anki.findNotesWithWord(trimmedWord));\r\n                setLastSearchedWord(trimmedWord);\r\n            } catch (e) {\r\n                console.error(e);\r\n            }\r\n        }, 500);\r\n\r\n        return () => clearTimeout(timeout);\r\n    }, [word, wordTimestamp, lastSearchedWord, anki, settingsProvider.wordField]);\r\n\r\n    const handlePlayAudio = useCallback(\r\n        (e) => {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n            audioClip!.play();\r\n        },\r\n        [audioClip]\r\n    );\r\n\r\n    const handleViewImage = useCallback(\r\n        (e) => {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n            onViewImage(image!);\r\n        },\r\n        [image, onViewImage]\r\n    );\r\n\r\n    const handleTimestampIntervalChange = useCallback((e, newValue) => {\r\n        setTimestampInterval(newValue);\r\n    }, []);\r\n\r\n    const handleApplyTimestampIntervalToText = useCallback(() => {\r\n        const intersectingSubtitles = [];\r\n        const interval = timestampInterval!;\r\n\r\n        for (const s of sliderContext!.subtitles) {\r\n            if (\r\n                (s.start >= interval[0] && s.start <= interval[1]) ||\r\n                (s.end >= interval[0] && s.end <= interval[1]) ||\r\n                (interval[0] >= s.start && interval[0] <= s.end) ||\r\n                (interval[1] >= s.start && interval[1] <= s.end)\r\n            ) {\r\n                intersectingSubtitles.push(s.text);\r\n            }\r\n        }\r\n\r\n        setText(intersectingSubtitles.join('\\n'));\r\n        setLastAppliedTimestampIntervalToText(timestampInterval);\r\n    }, [timestampInterval, sliderContext]);\r\n\r\n    const handleApplyTimestampIntervalToAudio = useCallback(\r\n        (e) => {\r\n            e.stopPropagation();\r\n            setLastAppliedTimestampIntervalToAudio(timestampInterval);\r\n        },\r\n        [timestampInterval]\r\n    );\r\n\r\n    const handleResetTimestampInterval = useCallback(() => {\r\n        if (!initialTimestampBoundaryInterval) {\r\n            return;\r\n        }\r\n\r\n        setTimestampInterval(initialTimestampInterval);\r\n        setTimestampBoundaryInterval(initialTimestampBoundaryInterval);\r\n        setTimestampMarks(\r\n            sliderContext && sliderMarksFromSliderContext(sliderContext, initialTimestampBoundaryInterval)\r\n        );\r\n    }, [initialTimestampInterval, initialTimestampBoundaryInterval, sliderContext]);\r\n\r\n    const handleZoomInTimestampInterval = useCallback(() => {\r\n        if (!timestampBoundaryInterval || !timestampInterval) {\r\n            return;\r\n        }\r\n\r\n        const newMin = (timestampBoundaryInterval[0] + timestampInterval[0]) / 2;\r\n        const newMax = (timestampBoundaryInterval[1] + timestampInterval[1]) / 2;\r\n        const newTimestampBoundaryInterval = [newMin, newMax];\r\n        setTimestampBoundaryInterval(newTimestampBoundaryInterval);\r\n        setTimestampMarks(sliderContext && sliderMarksFromSliderContext(sliderContext, newTimestampBoundaryInterval));\r\n    }, [timestampBoundaryInterval, timestampInterval, sliderContext]);\r\n\r\n    const handleCustomFieldChange = useCallback(\r\n        (customFieldName: string, value: string) => {\r\n            const newCustomFieldValues: { [fieldName: string]: string } = {};\r\n            Object.assign(newCustomFieldValues, customFieldValues);\r\n            newCustomFieldValues[customFieldName] = value;\r\n            setCustomFieldValues(newCustomFieldValues);\r\n        },\r\n        [customFieldValues]\r\n    );\r\n\r\n    let wordHelperText;\r\n\r\n    if (word && word.trim() === lastSearchedWord && settingsProvider.wordField) {\r\n        wordHelperText =\r\n            duplicateNotes.length > 0\r\n                ? `Found ${duplicateNotes.length} notes with word \"${word}\" in field \"${settingsProvider.wordField}\"`\r\n                : `No notes found with word \"${word.trim()}\" in field \"${settingsProvider.wordField}\"`;\r\n    } else {\r\n        wordHelperText = '';\r\n    }\r\n\r\n    const disableApplyTextSelection =\r\n        !sliderContext || sliderContext.subtitles.filter((s) => s.text.trim() !== '').length === 0;\r\n\r\n    return (\r\n        <Dialog\r\n            open={open}\r\n            disableEnforceFocus\r\n            fullWidth\r\n            maxWidth=\"sm\"\r\n            onClose={onCancel}\r\n        >\r\n            <Toolbar>\r\n                <Typography variant=\"h6\" className={classes.title}>\r\n                    Anki Export\r\n                </Typography>\r\n                <IconButton edge=\"end\" onClick={() => onOpenSettings()}>\r\n                    <SettingsIcon />\r\n                </IconButton>\r\n            </Toolbar>\r\n            <DialogContent>\r\n                <form className={classes.root}>\r\n                    <TextField\r\n                        variant=\"filled\"\r\n                        color=\"secondary\"\r\n                        multiline\r\n                        fullWidth\r\n                        maxRows={8}\r\n                        label=\"Sentence\"\r\n                        value={text}\r\n                        onChange={(e) => setText(e.target.value)}\r\n                        InputProps={{\r\n                            endAdornment: timestampInterval && (\r\n                                <InputAdornment position=\"end\">\r\n                                    <Tooltip title=\"Apply Selection\">\r\n                                        <span>\r\n                                            <IconButton\r\n                                                disabled={\r\n                                                    !timestampInterval ||\r\n                                                    !lastAppliedTimestampIntervalToText ||\r\n                                                    (timestampInterval[0] === lastAppliedTimestampIntervalToText[0] &&\r\n                                                        timestampInterval[1] ===\r\n                                                            lastAppliedTimestampIntervalToText[1]) ||\r\n                                                    disableApplyTextSelection\r\n                                                }\r\n                                                onClick={handleApplyTimestampIntervalToText}\r\n                                                edge=\"end\"\r\n                                            >\r\n                                                <DoneIcon />\r\n                                            </IconButton>\r\n                                        </span>\r\n                                    </Tooltip>\r\n                                </InputAdornment>\r\n                            ),\r\n                        }}\r\n                    />\r\n                    <TextField\r\n                        variant=\"filled\"\r\n                        color=\"secondary\"\r\n                        multiline\r\n                        fullWidth\r\n                        rows={8}\r\n                        label=\"Definition\"\r\n                        value={definition}\r\n                        onChange={(e) => setDefinition(e.target.value)}\r\n                    />\r\n                    <TextField\r\n                        variant=\"filled\"\r\n                        color=\"secondary\"\r\n                        fullWidth\r\n                        label=\"Word\"\r\n                        value={word}\r\n                        onChange={(e) => setWord(e.target.value)}\r\n                        helperText={wordHelperText}\r\n                        InputProps={{\r\n                            endAdornment: (\r\n                                <InputAdornment position=\"end\">\r\n                                    <Tooltip title=\"Search in Anki\">\r\n                                        <span>\r\n                                            <IconButton\r\n                                                disabled={\r\n                                                    disabled ||\r\n                                                    !settingsProvider.wordField ||\r\n                                                    !word ||\r\n                                                    word.trim() === ''\r\n                                                }\r\n                                                onClick={() => anki.findNotesWithWordGui(word.trim())}\r\n                                                edge=\"end\"\r\n                                            >\r\n                                                <SearchIcon />\r\n                                            </IconButton>\r\n                                        </span>\r\n                                    </Tooltip>\r\n                                </InputAdornment>\r\n                            ),\r\n                        }}\r\n                    />\r\n                    {Object.keys(customFields).map((customFieldName) => (\r\n                        <TextField\r\n                            key={customFieldName}\r\n                            variant=\"filled\"\r\n                            color=\"secondary\"\r\n                            fullWidth\r\n                            multiline\r\n                            maxRows={8}\r\n                            label={customFieldName}\r\n                            value={customFieldValues[customFieldName] || ''}\r\n                            onChange={(e) => handleCustomFieldChange(customFieldName, e.target.value)}\r\n                        />\r\n                    ))}\r\n                    {audioClip && (\r\n                        <div className={classes.mediaField} onClick={handlePlayAudio}>\r\n                            <TextField\r\n                                variant=\"filled\"\r\n                                color=\"secondary\"\r\n                                fullWidth\r\n                                value={audioClip.name}\r\n                                label=\"Audio\"\r\n                                InputProps={{\r\n                                    endAdornment: timestampInterval && (\r\n                                        <InputAdornment position=\"end\">\r\n                                            <Tooltip title=\"Apply Selection\">\r\n                                                <span>\r\n                                                    <IconButton\r\n                                                        disabled={\r\n                                                            !lastAppliedTimestampIntervalToAudio ||\r\n                                                            (timestampInterval[0] ===\r\n                                                                lastAppliedTimestampIntervalToAudio[0] &&\r\n                                                                timestampInterval[1] ===\r\n                                                                    lastAppliedTimestampIntervalToAudio[1]) ||\r\n                                                            !audioClip.isSliceable(\r\n                                                                timestampInterval[0],\r\n                                                                timestampInterval[1]\r\n                                                            )\r\n                                                        }\r\n                                                        onClick={handleApplyTimestampIntervalToAudio}\r\n                                                        edge=\"end\"\r\n                                                    >\r\n                                                        <DoneIcon />\r\n                                                    </IconButton>\r\n                                                </span>\r\n                                            </Tooltip>\r\n                                        </InputAdornment>\r\n                                    ),\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    )}\r\n                    {image && (\r\n                        <div className={classes.mediaField} onClick={handleViewImage}>\r\n                            <TextField variant=\"filled\" color=\"secondary\" fullWidth value={image.name} label=\"Image\" />\r\n                        </div>\r\n                    )}\r\n                    <TextField\r\n                        variant=\"filled\"\r\n                        color=\"secondary\"\r\n                        fullWidth\r\n                        label=\"Source\"\r\n                        value={source}\r\n                        onChange={(e) => setSource(e.target.value)}\r\n                    />\r\n                    {initialUrl && (\r\n                        <TextField\r\n                            variant=\"filled\"\r\n                            color=\"secondary\"\r\n                            fullWidth\r\n                            label=\"URL\"\r\n                            value={url}\r\n                            onChange={(e) => setUrl(e.target.value)}\r\n                        />\r\n                    )}\r\n                    {settingsProvider.tags.length > 0 && (\r\n                        <TagsTextField\r\n                            variant=\"filled\"\r\n                            label=\"Tags\"\r\n                            helperText=\"Comma-separated list of strings\"\r\n                            fullWidth\r\n                            color=\"secondary\"\r\n                            tags={tags}\r\n                            onTagsChange={(newTags) => setTags(newTags)}\r\n                        />\r\n                    )}\r\n                    {timestampInterval && timestampBoundaryInterval && timestampMarks && (\r\n                        <Grid container direction=\"row\">\r\n                            <Grid item style={{ flexGrow: 1 }}>\r\n                                <Slider\r\n                                    ValueLabelComponent={ValueLabelComponent}\r\n                                    value={timestampInterval}\r\n                                    valueLabelFormat={sliderValueLabelFormat}\r\n                                    onChange={handleTimestampIntervalChange}\r\n                                    min={timestampBoundaryInterval[0]}\r\n                                    max={timestampBoundaryInterval[1]}\r\n                                    marks={timestampMarks}\r\n                                    step={1}\r\n                                    valueLabelDisplay=\"auto\"\r\n                                    className={classes.rangeSelectSlider}\r\n                                    color=\"secondary\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Tooltip title=\"Reset\">\r\n                                    <span>\r\n                                        <IconButton\r\n                                            edge=\"end\"\r\n                                            style={{ marginTop: -8 }}\r\n                                            onClick={handleResetTimestampInterval}\r\n                                        >\r\n                                            <RestoreIcon />\r\n                                        </IconButton>\r\n                                    </span>\r\n                                </Tooltip>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Tooltip title=\"Zoom In\">\r\n                                    <span>\r\n                                        <IconButton\r\n                                            edge=\"end\"\r\n                                            style={{ marginTop: -8 }}\r\n                                            onClick={handleZoomInTimestampInterval}\r\n                                        >\r\n                                            <ZoomInIcon />\r\n                                        </IconButton>\r\n                                    </span>\r\n                                </Tooltip>\r\n                            </Grid>\r\n                        </Grid>\r\n                    )}\r\n                </form>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button disabled={disabled} onClick={() => onCancel()}>\r\n                    Cancel\r\n                </Button>\r\n                <Button\r\n                    disabled={disabled}\r\n                    onClick={() =>\r\n                        onProceed(\r\n                            text,\r\n                            definition,\r\n                            audioClip,\r\n                            image,\r\n                            word,\r\n                            source ?? '',\r\n                            url ?? '',\r\n                            customFieldValues,\r\n                            tags,\r\n                            'gui'\r\n                        )\r\n                    }\r\n                >\r\n                    Open in Anki\r\n                </Button>\r\n                <Button\r\n                    disabled={disabled}\r\n                    onClick={() =>\r\n                        onProceed(\r\n                            text,\r\n                            definition,\r\n                            audioClip,\r\n                            image,\r\n                            word,\r\n                            source ?? '',\r\n                            url ?? '',\r\n                            customFieldValues,\r\n                            tags,\r\n                            'updateLast'\r\n                        )\r\n                    }\r\n                >\r\n                    Update Last Card\r\n                </Button>\r\n                <Button\r\n                    disabled={disabled}\r\n                    onClick={() =>\r\n                        onProceed(\r\n                            text,\r\n                            definition,\r\n                            audioClip,\r\n                            image,\r\n                            word,\r\n                            source ?? '',\r\n                            url ?? '',\r\n                            customFieldValues,\r\n                            tags,\r\n                            'default'\r\n                        )\r\n                    }\r\n                >\r\n                    Export\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/background-colored.cbc50e45.png\";","import { makeStyles } from '@material-ui/styles';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport coloredBackground from './background-colored.png';\r\nimport { Theme } from '@material-ui/core';\r\n\r\ninterface StylesProps {\r\n    dragging: boolean;\r\n}\r\n\r\ninterface Props {\r\n    dragging: boolean;\r\n    loading: boolean;\r\n}\r\n\r\nconst useStyles = makeStyles<Theme, StylesProps, string>((theme) => ({\r\n    root: ({ dragging }) => ({\r\n        position: 'absolute',\r\n        height: 'calc(100% - 64px)',\r\n        width: '100%',\r\n        zIndex: 101,\r\n        pointerEvents: dragging ? 'auto' : 'none',\r\n    }),\r\n    transparentBackground: {\r\n        '&::before': {\r\n            content: \"' '\",\r\n            position: 'absolute',\r\n            height: 'calc(100vh - 64px)',\r\n            width: '100%',\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            textAlign: 'center',\r\n            backgroundSize: '300px 300px',\r\n            backgroundRepeat: 'no-repeat',\r\n            backgroundPosition: 'center',\r\n            backgroundImage: `url(${coloredBackground})`,\r\n            backgroundBlendMode: 'overlay',\r\n            background: 'rgba(0, 0, 0, .3)',\r\n            filter: 'drop-shadow(10px 10px 10px rgb(0, 0, 0, .4))',\r\n        },\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n}));\r\n\r\nexport default function DragOverlay({ dragging, loading }: Props) {\r\n    const classes = useStyles({ dragging: dragging });\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Fade in={dragging || loading}>\r\n                <div className={classes.transparentBackground} />\r\n            </Fade>\r\n        </div>\r\n    );\r\n}\r\n","import { makeStyles } from '@material-ui/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport Link from '@material-ui/core/Link';\r\nimport SpeedIcon from '@material-ui/icons/Speed';\r\nimport StarIcon from '@material-ui/icons/Star';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    inlineIcon: {\r\n        maxWidth: '80%',\r\n        height: 20,\r\n        display: 'inline-flex',\r\n        flexDirection: 'column',\r\n        flexWrap: 'wrap',\r\n        alignItems: 'start',\r\n        textAlign: 'left',\r\n    },\r\n}));\r\n\r\ninterface Props {\r\n    open: boolean;\r\n    extensionUrl: string;\r\n    onClose: () => void;\r\n}\r\n\r\nexport default function HelpDialog({ open, extensionUrl, onClose }: Props) {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Dialog open={open} onClose={onClose}>\r\n            <DialogContent>\r\n                <Typography variant=\"h6\">Loading files</Typography>\r\n                <Typography component=\"ul\">\r\n                    <li>Drag and drop mkv, srt, ass, or mp3 files into the player.</li>\r\n                    <li>Multiple files can be dragged and dropped simultaneously e.g. mkv+srt, mp3+ass etc.</li>\r\n                    <li>\r\n                        Multiple subtitle files can loaded simultaneously. When multiple subtitle files are loaded, they\r\n                        can be toggled on and off in-video using S+1, S+2, etc.\r\n                    </li>\r\n                </Typography>\r\n                <br />\r\n                <Typography variant=\"h6\">Syncing with streaming video in another tab</Typography>\r\n                <Typography component=\"ul\">\r\n                    <li>\r\n                        Install the Chrome{' '}\r\n                        <Link color=\"secondary\" target=\"_blank\" rel=\"noreferrer\" href={extensionUrl}>\r\n                            extension\r\n                        </Link>\r\n                        .\r\n                    </li>\r\n                    <li>Drag-and-drop a subtitle file into the video element you want to sync.</li>\r\n                    <li>Or, load a subtitle file into asbplayer and use the camera button in the bottom right.</li>\r\n                    <li>\r\n                        On supported sites you can sync detected subtitles via the extension keyboard shortcut\r\n                        (Ctrl+Shift+F by default), or via the \"automatically sync detected subtitles\" option. The same\r\n                        shortcut also allows you to sync an empty subtitle track, allowing you to mine media without\r\n                        accompanying subtitles.\r\n                    </li>\r\n                    <li>\r\n                        It is recommended to use the extension keyboard shortcut (Ctrl+Shift+X by default) to mine\r\n                        subtitles since that will include audio/screenshots.\r\n                    </li>\r\n                </Typography>\r\n                <br />\r\n                <Typography variant=\"h6\">Supported streaming video sites for subtitle detection</Typography>\r\n                <Typography component=\"ul\">\r\n                    <li>Netflix (on main /watch url)</li>\r\n                    <li>Youtube (on main /watch url)</li>\r\n                </Typography>\r\n                <br />\r\n                <Typography variant=\"h6\">Anki</Typography>\r\n                <Typography component=\"ul\">\r\n                    <li>Synchronous workflow:</li>\r\n                    <ul>\r\n                        <li>For synced streaming video, open the Anki dialog during playback by using Ctrl+Shift+X.</li>\r\n                        <li>For local file playback, open the Anki dialog during playback by using Ctrl+Shift+Q.</li>\r\n                    </ul>\r\n                    <li>Asynchronous workflow:</li>\r\n                    <ul>\r\n                        <li>For synced streaming video, copy the current subtitle by using Ctrl+Shift+Z.</li>\r\n                        <li>For local file playback, copy the current subtitle by using Ctrl+Shift+A.</li>\r\n                        <li>\r\n                            <div className={classes.inlineIcon}>\r\n                                Use the &nbsp;\r\n                                <StarIcon fontSize=\"small\" />\r\n                                &nbsp; button in the copy history.\r\n                            </div>\r\n                        </li>\r\n                    </ul>\r\n                    <li>\r\n                        For synced streaming video, an audio/image will only be available if an extension keyboard\r\n                        shortcut was used (Ctrl+Shift+X or Ctrl+Shift+Z by default).\r\n                    </li>\r\n                    <li>\r\n                        Configure Anki settings with the settings button in the top right. See this{' '}\r\n                        <Link\r\n                            color=\"secondary\"\r\n                            target=\"_blank\"\r\n                            rel=\"noreferrer\"\r\n                            href=\"https://youtu.be/Mv7fEVb6PHo?t=44\"\r\n                        >\r\n                            video\r\n                        </Link>{' '}\r\n                        for how to configure AnkiConnect so that asbplayer can connect to Anki.\r\n                    </li>\r\n                </Typography>\r\n                <br />\r\n                <Typography variant=\"h6\">Changing subtitle offset</Typography>\r\n                <Typography component=\"ul\">\r\n                    <li>Use Ctrl+Left/Right to cause the previous/next subtitle to appear at the current timestamp.</li>\r\n                    <li>Use Ctrl+Shift+Left/Right to adjust timing further by 100 ms increments.</li>\r\n                    <li>Or, click on the subtitle offset input field in the controls, type a number, and hit Enter.</li>\r\n                </Typography>\r\n                <br />\r\n                <Typography variant=\"h6\">Condensed playback of local media files</Typography>\r\n                <Typography component=\"ul\">\r\n                    <li>Load an audio/video file with a subtitle file.</li>\r\n                    <li>\r\n                        <div className={classes.inlineIcon}>\r\n                            Use the &nbsp;\r\n                            <SpeedIcon fontSize=\"small\" />\r\n                            &nbsp; button in the bottom right.\r\n                        </div>\r\n                    </li>\r\n                </Typography>\r\n                <br />\r\n                <Typography variant=\"h6\">Keyboard shortcuts</Typography>\r\n                <TableContainer>\r\n                    <Table size=\"small\">\r\n                        <TableBody>\r\n                            <TableRow>\r\n                                <TableCell>\r\n                                    <Typography>Ctrl+Shift+A</Typography>\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    <Typography>Copy current subtitle</Typography>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>\r\n                                    <Typography>Ctrl+Shift+Q</Typography>\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    <Typography>Copy current subtitle and open Anki export dialog</Typography>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>\r\n                                    <Typography>Ctrl+Shift+Z (default, streaming video)</Typography>\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    <Typography>Copy current subtitle</Typography>\r\n                                    <Typography>\r\n                                        When video is synced without a subtitle file, starts/stops recording audio\r\n                                    </Typography>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>\r\n                                    <Typography>Ctrl+Shift+X (default, streaming video)</Typography>\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    <Typography>Copy current subtitle and open Anki export dialog</Typography>\r\n                                    <Typography>\r\n                                        When video is synced without a subtitle file, starts/stops recording audio\r\n                                    </Typography>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>\r\n                                    <Typography>Ctrl+Shift+F (default, streaming video)</Typography>\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    <Typography>\r\n                                        Select video element to mine without a subtitle file, or with detected subtitles\r\n                                        on supported sites\r\n                                    </Typography>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>\r\n                                    <Typography>Space</Typography>\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    <Typography>Play/pause</Typography>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>\r\n                                    <Typography>S</Typography>\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    <Typography>Toggle subtitles</Typography>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>\r\n                                    <Typography>S+1, S+2...</Typography>\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    <Typography>Toggle subtitle track 1, 2... in video</Typography>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>\r\n                                    <Typography>D+1, D+2...</Typography>\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    <Typography>Toggle subtitle track 1, 2... in asbplayer</Typography>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>\r\n                                    <Typography>Left/Right</Typography>\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    <Typography>Seek to previous/next subtitle</Typography>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>\r\n                                    <Typography>Ctrl+Left/Right or Shift+Left/Right</Typography>\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    <Typography>Adjust offset to previous/next subtitle</Typography>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>\r\n                                    <Typography>Ctrl+Shift+Left/Right</Typography>\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    <Typography>Adjust offset by +/- 100 ms</Typography>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n                <br />\r\n                <Typography variant=\"h6\">Common issues</Typography>\r\n                <Typography component=\"ul\">\r\n                    <li>asbplayer isn't detecting streaming video.</li>\r\n                    <ul>\r\n                        <li>Try refreshing both the asbplayer tab and the video in the other tab.</li>\r\n                        <li>\r\n                            Make sure that in the extension details, the extension has access to all sites. A lot of\r\n                            video players are loaded inside of iframes, so it's difficult to list every single URL that\r\n                            the extension might need access to.\r\n                        </li>\r\n                    </ul>\r\n                    <li>The extension keyboard shortcuts aren't working.</li>\r\n                    <ul>\r\n                        <li>Try uninstalling and reinstalling the extension and restarting Chrome.</li>\r\n                        <li>Make sure the extension isn't installed twice.</li>\r\n                        <li>\r\n                            Verify the keyboard shortcut is bound as in this{' '}\r\n                            <Link\r\n                                color=\"secondary\"\r\n                                target=\"_blank\"\r\n                                rel=\"noreferrer\"\r\n                                href=\"https://youtu.be/wYWbgovfNlI\"\r\n                            >\r\n                                video\r\n                            </Link>\r\n                            .\r\n                        </li>\r\n                    </ul>\r\n                    <li>asbplayer can't connect to Anki. It shows an error message e.g. 'Failed to fetch.'</li>\r\n                    <ul>\r\n                        <li>If you're using Brave, make sure asbplayer isn't being blocked by Shield.</li>\r\n                        <li>\r\n                            Make sure that asbplayer is allowed by AnkiConnect, as in this{' '}\r\n                            <Link\r\n                                color=\"secondary\"\r\n                                target=\"_blank\"\r\n                                rel=\"noreferrer\"\r\n                                href=\"https://youtu.be/Mv7fEVb6PHo?t=44\"\r\n                            >\r\n                                video\r\n                            </Link>\r\n                            .\r\n                        </li>\r\n                        <li>\r\n                            Check that your browser or an ad blocker isn't blocking the request. A good place to start\r\n                            is by opening your browser's developer console and looking for errors.\r\n                        </li>\r\n                    </ul>\r\n                    <li>When mining streaming video, asbplayer isn't including audio/screenshot in flashcards.</li>\r\n                    <ul>\r\n                        <li>Make sure you use an extension keyboard shortcut (Ctrl+Shift+X by default).</li>\r\n                    </ul>\r\n                </Typography>\r\n                <Typography variant=\"h6\">Demos</Typography>\r\n                <Typography component=\"ul\">\r\n                    <li>\r\n                        <Link\r\n                            color=\"secondary\"\r\n                            target=\"_blank\"\r\n                            rel=\"noreferrer\"\r\n                            href=\"https://www.youtube.com/watch?v=W9Lf3C7sRzc\"\r\n                        >\r\n                            Sentence mining streaming video (synchronous workflow)\r\n                        </Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link\r\n                            color=\"secondary\"\r\n                            target=\"_blank\"\r\n                            rel=\"noreferrer\"\r\n                            href=\"https://www.youtube.com/watch?v=kJXVVixD8H8\"\r\n                        >\r\n                            Sentence mining streaming video (asynchronous workflow)\r\n                        </Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link\r\n                            color=\"secondary\"\r\n                            target=\"_blank\"\r\n                            rel=\"noreferrer\"\r\n                            href=\"https://www.youtube.com/watch?v=sgrJF99WX-Q\"\r\n                        >\r\n                            Sentence mining streaming video (no subtitle file)\r\n                        </Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link\r\n                            color=\"secondary\"\r\n                            target=\"_blank\"\r\n                            rel=\"noreferrer\"\r\n                            href=\"https://www.youtube.com/watch?v=J3E82spYqIk\"\r\n                        >\r\n                            Sentence mining video files (synchronous workflow)\r\n                        </Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link\r\n                            color=\"secondary\"\r\n                            target=\"_blank\"\r\n                            rel=\"noreferrer\"\r\n                            href=\"https://www.youtube.com/watch?v=HsrrpnfM4pI\"\r\n                        >\r\n                            Sentence mining video files (asynchronous workflow)\r\n                        </Link>\r\n                    </li>\r\n                </Typography>\r\n                <br />\r\n                <Typography variant=\"h6\">Browser Compatibility</Typography>\r\n                <Typography component=\"ul\">\r\n                    <li>\r\n                        The asbplayer application and extension have only been tested on Chrome 91 and later and likely\r\n                        work on other Chromium-based browsers.\r\n                    </li>\r\n                    <li>\r\n                        Local file playback is supported only for codecs supported by the browser. The{' '}\r\n                        <Link\r\n                            color=\"secondary\"\r\n                            target=\"_blank\"\r\n                            rel=\"noreferrer\"\r\n                            href=\"https://github.com/animebook/animebook.github.io#video-format-support\"\r\n                        >\r\n                            animebook\r\n                        </Link>{' '}\r\n                        readme has a detailed explanation of this and links to browsers that have good compatibility.\r\n                        Personally, I use Microsoft Edge and paid one dollar for HEVC support.\r\n                    </li>\r\n                    <li>\r\n                        Audio track selection for mkv files is available if experimental web platform features are\r\n                        enabled from chrome://flags.\r\n                    </li>\r\n                </Typography>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={() => onClose()}>OK</Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n}\r\n","import { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport { Image as CommonImage } from '@project/common';\r\nimport { useWindowSize } from '../hooks/useWindowSize';\r\n\r\ninterface ImageDimensions {\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    image: ({ width, height }: ImageDimensions) => ({\r\n        width: width,\r\n        height: height,\r\n        backgroundSize: 'contain',\r\n    }),\r\n}));\r\n\r\ninterface Props {\r\n    open: boolean;\r\n    image?: CommonImage;\r\n    onClose: () => void;\r\n}\r\n\r\nexport default function ImageDialog({ open, image, onClose }: Props) {\r\n    const [dataUrl, setDataUrl] = useState<string>();\r\n    const [width, setWidth] = useState<number>(0);\r\n    const [height, setHeight] = useState<number>(0);\r\n    const [windowWidth, windowHeight] = useWindowSize(true);\r\n\r\n    let resizeRatio;\r\n\r\n    if (width > 0 && height > 0) {\r\n        resizeRatio = Math.min(1, Math.min(windowWidth / (2 * width), windowHeight / (2 * height)));\r\n    } else {\r\n        resizeRatio = 1;\r\n    }\r\n\r\n    const classes = useStyles({ width: width * resizeRatio, height: height * resizeRatio });\r\n\r\n    useEffect(() => {\r\n        setDataUrl(undefined);\r\n        async function fetchImage() {\r\n            if (!image) {\r\n                return;\r\n            }\r\n\r\n            const dataUrl = await image.dataUrl();\r\n            const img = new Image();\r\n            img.onload = () => {\r\n                setWidth(img.width);\r\n                setHeight(img.height);\r\n                setDataUrl(dataUrl);\r\n            };\r\n            img.src = dataUrl;\r\n        }\r\n\r\n        fetchImage();\r\n    }, [image]);\r\n\r\n    if (!image || !dataUrl) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <Dialog open={open} onClose={onClose} maxWidth=\"lg\">\r\n            <Card>\r\n                <CardMedia\r\n                    className={classes.image}\r\n                    image={dataUrl}\r\n                    title={image.name}\r\n                    style={{ width: width * resizeRatio, height: height * resizeRatio }}\r\n                />\r\n            </Card>\r\n        </Dialog>\r\n    );\r\n}\r\n","import { compile as parseAss } from 'ass-compiler';\r\nimport { parseSync as parseSrt } from 'subtitle';\r\nimport { WebVTT } from 'vtt.js';\r\nimport { XMLParser } from 'fast-xml-parser';\r\n\r\nconst tagRegex = RegExp('</?([^>]*)>', 'ig');\r\nconst assNewLineRegex = RegExp(/\\\\[nN]/, 'ig');\r\nconst helperElement = document.createElement('div');\r\n\r\ninterface SubtitleNode {\r\n    start: number;\r\n    end: number;\r\n    text: string;\r\n    track: number;\r\n}\r\n\r\nexport default class SubtitleReader {\r\n    private xmlParser?: XMLParser;\r\n\r\n    async subtitles(files: File[]) {\r\n        return (await Promise.all(files.map((f, i) => this._subtitles(f, i))))\r\n            .flatMap((nodes) => nodes)\r\n            .sort((n1, n2) => n1.start - n2.start);\r\n    }\r\n\r\n    async _subtitles(file: File, track: number): Promise<SubtitleNode[]> {\r\n        if (file.name.endsWith('.srt')) {\r\n            const nodes = parseSrt(await file.text());\r\n            return nodes.map((node: any) => ({ ...node.data, track: track }));\r\n        }\r\n\r\n        if (file.name.endsWith('.vtt') || file.name.endsWith('.nfvtt')) {\r\n            return new Promise(async (resolve, reject) => {\r\n                const isFromNetflix = file.name.endsWith('.nfvtt');\r\n                const parser = new WebVTT.Parser(window, WebVTT.StringDecoder());\r\n                const cues: any[] = [];\r\n                parser.oncue = (c: any) => {\r\n                    if (isFromNetflix) {\r\n                        c.text = c.text.replace(tagRegex, '');\r\n\r\n                        const lines = c.text.split('\\n');\r\n                        const newLines = [];\r\n\r\n                        for (const line of lines) {\r\n                            newLines.push(this._fixRTL(line));\r\n                        }\r\n\r\n                        c.text = newLines.join('\\n');\r\n                    }\r\n                    cues.push(c);\r\n                };\r\n                parser.onflush = () =>\r\n                    resolve(\r\n                        cues.map((c) => ({\r\n                            start: Math.floor(c.startTime * 1000),\r\n                            end: Math.floor(c.endTime * 1000),\r\n                            text: c.text as string,\r\n                            track: track,\r\n                        }))\r\n                    );\r\n                parser.parse(await file.text());\r\n                parser.flush();\r\n            });\r\n        }\r\n\r\n        if (file.name.endsWith('.ass')) {\r\n            const nodes = parseAss(await file.text(), {});\r\n            return nodes.dialogues.map((dialogue) => {\r\n                return {\r\n                    start: Math.round(dialogue.start * 1000),\r\n                    end: Math.round(dialogue.end * 1000),\r\n                    text: dialogue.slices\r\n                        .flatMap((slice) => slice.fragments.map((fragment) => fragment.text))\r\n                        .join('')\r\n                        .replace(assNewLineRegex, '\\n'),\r\n                    track: track,\r\n                };\r\n            });\r\n        }\r\n\r\n        if (file.name.endsWith('.ytxml')) {\r\n            const text = await file.text();\r\n            const xml = this._xmlParser().parse(text);\r\n            \r\n            if (Object.keys(xml).length === 0) {\r\n                return [];\r\n            }\r\n            \r\n            const textNodes = xml['transcript']['text'];\r\n            const subtitles = [];\r\n\r\n            for (let index = 0, length = textNodes.length; index < length; index++) {\r\n                const elm = textNodes[index];\r\n                const start = parseFloat(elm['@_start']);\r\n\r\n                subtitles.push({\r\n                    start: Math.floor(start * 1000),\r\n                    end: Math.floor((start + parseFloat(elm['@_dur'])) * 1000),\r\n                    text: this._decodeHTML(String(elm['#text']).replace(tagRegex, '')),\r\n                    track,\r\n                });\r\n            }\r\n\r\n            return subtitles;\r\n        }\r\n\r\n        throw new Error('Unsupported subtitle file format');\r\n    }\r\n\r\n    _fixRTL(line: string): string {\r\n        const index1 = line.indexOf('&lrm;');\r\n        const index2 = line.indexOf('&rlm;');\r\n        let newLine = '';\r\n\r\n        if (index1 > -1) {\r\n            newLine = line.substring(0, index1) + '\\u202a' + line.substring(index1 + 5) + '\\u202c';\r\n            return this._fixRTL(newLine);\r\n        } else if (index2 > -1) {\r\n            newLine = line.substring(0, index2) + '\\u202b' + line.substring(index2 + 5) + '\\u202c';\r\n            return this._fixRTL(newLine);\r\n        }\r\n\r\n        return line;\r\n    }\r\n\r\n    _decodeHTML(text: string): string {\r\n        helperElement.innerHTML = text;\r\n        return helperElement.childNodes.length === 0 ? '' : helperElement.childNodes[0].nodeValue!;\r\n    }\r\n\r\n    _xmlParser() {\r\n        if (this.xmlParser === undefined) {\r\n            this.xmlParser = new XMLParser({ ignoreAttributes: false });\r\n        }\r\n\r\n        return this.xmlParser;\r\n    }\r\n}\r\n","import { makeStyles, Theme } from '@material-ui/core/styles';\r\nimport clsx from 'clsx';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport BugReportIcon from '@material-ui/icons/BugReport';\r\nimport HelpIcon from '@material-ui/icons/Help';\r\nimport FolderOpenIcon from '@material-ui/icons/FolderOpen';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ListIcon from '@material-ui/icons/List';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Tooltip, { TooltipProps } from '@material-ui/core/Tooltip';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\ninterface BarProps {\r\n    drawerWidth: number;\r\n    drawerOpen: boolean;\r\n    title: string;\r\n    onFileSelector: () => void;\r\n    onOpenHelp: () => void;\r\n    onOpenSettings: () => void;\r\n    onOpenCopyHistory: () => void;\r\n}\r\n\r\nconst useStyles = makeStyles<Theme, BarProps, string>((theme) => ({\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    appBar: {\r\n        transition: theme.transitions.create(['margin', 'width'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    appBarShift: {\r\n        width: ({ drawerWidth }) => `calc(100% - ${drawerWidth}px)`,\r\n        transition: theme.transitions.create(['margin', 'width'], {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n        marginRight: ({ drawerWidth }) => drawerWidth,\r\n    },\r\n    copyHistoryButton: {\r\n        transform: 'scaleX(1)',\r\n        width: 48,\r\n        padding: 12,\r\n        transition: theme.transitions.create(['transform', 'padding', 'width'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    copyHistoryButtonShift: {\r\n        transform: 'scaleX(0)',\r\n        width: 0,\r\n        padding: 5,\r\n        transition: theme.transitions.create(['transform', 'padding', 'width'], {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    hide: {\r\n        display: 'none',\r\n    },\r\n}));\r\n\r\ninterface CopyHistoryTooltipStylesProps {\r\n    show: boolean;\r\n}\r\n\r\ninterface CopyHistoryTooltipProps extends TooltipProps {\r\n    show: boolean;\r\n}\r\n\r\nconst useCopyHistoryTooltipStyles = makeStyles<Theme, CopyHistoryTooltipStylesProps, string>((theme) => ({\r\n    tooltip: ({ show }) => ({\r\n        display: show ? 'block' : 'none',\r\n    }),\r\n}));\r\n\r\nfunction CopyHistoryTooltip({ show, ...toolTipProps }: CopyHistoryTooltipProps) {\r\n    const classes = useCopyHistoryTooltipStyles({ show: show });\r\n    return <Tooltip classes={classes} {...toolTipProps} />;\r\n}\r\n\r\nexport default function Bar(props: BarProps) {\r\n    const classes = useStyles(props);\r\n    return (\r\n        <AppBar\r\n            position=\"static\"\r\n            elevation={0}\r\n            className={clsx(classes.appBar, {\r\n                [classes.appBarShift]: props.drawerOpen,\r\n            })}\r\n        >\r\n            <Toolbar>\r\n                <Tooltip title=\"Open Files\">\r\n                    <IconButton edge=\"start\" color=\"inherit\" onClick={props.onFileSelector}>\r\n                        <FolderOpenIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n                <Typography variant=\"h6\" className={classes.title}>\r\n                    {props.title}\r\n                </Typography>\r\n                <Tooltip title=\"Submit Issue\">\r\n                    <IconButton\r\n                        edge=\"end\"\r\n                        color=\"inherit\"\r\n                        component=\"a\"\r\n                        href=\"https://github.com/killergerbah/asbplayer/issues\"\r\n                        target=\"_blank\"\r\n                        rel=\"noreferrer\"\r\n                    >\r\n                        <BugReportIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n                <Tooltip title=\"Help\">\r\n                    <IconButton edge=\"end\" color=\"inherit\" onClick={props.onOpenHelp}>\r\n                        <HelpIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n                <Tooltip title=\"Settings\">\r\n                    <IconButton edge=\"end\" color=\"inherit\" onClick={props.onOpenSettings}>\r\n                        <SettingsIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n                <CopyHistoryTooltip title=\"Copy History\" show={!props.drawerOpen}>\r\n                    <IconButton\r\n                        edge=\"end\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"menu\"\r\n                        className={clsx(classes.copyHistoryButton, {\r\n                            [classes.copyHistoryButtonShift]: props.drawerOpen,\r\n                        })}\r\n                        onClick={props.onOpenCopyHistory}\r\n                    >\r\n                        <ListIcon />\r\n                    </IconButton>\r\n                </CopyHistoryTooltip>\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n}\r\n","import { AsbPlayerToVideoCommandV2, Message, VideoTabModel } from '@project/common';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nexport interface ExtensionMessage {\r\n    data: Message;\r\n    tabId: number;\r\n    src: string;\r\n}\r\n\r\nexport default class ChromeExtension {\r\n    private readonly onMessageCallbacks: Array<(message: ExtensionMessage) => void>;\r\n    private readonly onTabsCallbacks: Array<(tabs: VideoTabModel[]) => void>;\r\n    private readonly versionPromise: Promise<string>;\r\n    private readonly id:string;\r\n\r\n    private tabs: VideoTabModel[];\r\n    private versionResolve?: (value: string | PromiseLike<string>) => void;\r\n\r\n    constructor(heartbeat: boolean) {\r\n        this.onMessageCallbacks = [];\r\n        this.onTabsCallbacks = [];\r\n        this.tabs = [];\r\n        this.versionPromise = new Promise((resolve, reject) => {\r\n            this.versionResolve = resolve;\r\n        });\r\n        this.id = uuidv4();\r\n\r\n        window.addEventListener('message', (event) => {\r\n            if (event.source !== window) {\r\n                return;\r\n            }\r\n\r\n            if (event.data.sender === 'asbplayer-extension-to-player') {\r\n                if (event.data.message) {\r\n                    if (event.data.message.command === 'tabs') {\r\n                        this.tabs = event.data.message.tabs;\r\n\r\n                        for (let c of this.onTabsCallbacks) {\r\n                            c(this.tabs);\r\n                        }\r\n\r\n                        return;\r\n                    }\r\n\r\n                    if (event.data.message.command === 'version') {\r\n                        this.versionResolve!(event.data.message.version);\r\n                        return;\r\n                    }\r\n\r\n                    for (let c of this.onMessageCallbacks) {\r\n                        c({\r\n                            data: event.data.message,\r\n                            tabId: event.data.tabId,\r\n                            src: event.data.src,\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        if (heartbeat) {\r\n            this._sendHeartbeat();\r\n            setInterval(() => this._sendHeartbeat(), 1000);\r\n        }\r\n    }\r\n\r\n    _sendHeartbeat() {\r\n        window.postMessage(\r\n            {\r\n                sender: 'asbplayerv2',\r\n                message: {\r\n                    command: 'heartbeat',\r\n                    id: this.id,\r\n                    receivedTabs: this.tabs,\r\n                },\r\n            },\r\n            '*'\r\n        );\r\n    }\r\n\r\n    async installedVersion(): Promise<string> {\r\n        return await this.versionPromise;\r\n    }\r\n\r\n    sendMessage(message: Message, tabId: number, src: string) {\r\n        const command: AsbPlayerToVideoCommandV2<Message> = { sender: 'asbplayerv2', message: message, tabId: tabId, src: src };\r\n        window.postMessage(command, '*');\r\n    }\r\n\r\n    publishMessage(message: Message) {\r\n        for (const tab of this.tabs) {\r\n            const command: AsbPlayerToVideoCommandV2<Message> = { sender: 'asbplayerv2', message: message, tabId: tab.id, src: tab.src };\r\n            window.postMessage(command, '*');\r\n        }\r\n    }\r\n\r\n    subscribeTabs(callback: (tabs: VideoTabModel[]) => void) {\r\n        this.onTabsCallbacks.push(callback);\r\n    }\r\n\r\n    unsubscribeTabs(callback: (tabs: VideoTabModel[]) => void) {\r\n        this._remove(callback, this.onTabsCallbacks);\r\n    }\r\n\r\n    subscribe(callback: (message: ExtensionMessage) => void) {\r\n        this.onMessageCallbacks.push(callback);\r\n    }\r\n\r\n    unsubscribe(callback: (message: ExtensionMessage) => void) {\r\n        this._remove(callback, this.onMessageCallbacks);\r\n    }\r\n\r\n    _remove(callback: Function, callbacks: Function[]) {\r\n        for (let i = callbacks.length - 1; i >= 0; --i) {\r\n            if (callback === callbacks[i]) {\r\n                callbacks.splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { Rgb } from \"@project/common\";\r\n\r\nexport function arrayEquals(a: any[], b: any[], equals = (a: any, b: any) => a === b) {\r\n    if (a.length !== b.length) {\r\n        return false;\r\n    }\r\n\r\n    for (let i = 0; i < a.length; ++i) {\r\n        if (!equals(a[i], b[i])) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport function keysAreEqual(a: any, b: any) {\r\n    for (let key in a) {\r\n        if (!(key in b)) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    for (let key in b) {\r\n        if (!(key in a)) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n// https://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb\r\nfunction hexToRgb(hex: string): Rgb {\r\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)!;\r\n    return {\r\n        r: parseInt(result[1], 16),\r\n        g: parseInt(result[2], 16),\r\n        b: parseInt(result[3], 16),\r\n    };\r\n}\r\n\r\ninterface SubtitleStyle {\r\n    subtitleColor: string;\r\n    subtitleSize: number;\r\n    subtitleOutlineThickness: number;\r\n    subtitleOutlineColor: string;\r\n    subtitleBackgroundOpacity: number;\r\n    subtitleBackgroundColor: string;\r\n    subtitleFontFamily: string;\r\n}\r\n\r\nexport function computeStyles({\r\n    subtitleColor,\r\n    subtitleSize,\r\n    subtitleOutlineThickness,\r\n    subtitleOutlineColor,\r\n    subtitleBackgroundOpacity,\r\n    subtitleBackgroundColor,\r\n    subtitleFontFamily,\r\n}: SubtitleStyle) {\r\n    const styles: any = {\r\n        color: subtitleColor,\r\n        fontSize: Number(subtitleSize),\r\n    };\r\n\r\n    if (subtitleOutlineThickness > 0) {\r\n        const thickness = subtitleOutlineThickness;\r\n        const color = subtitleOutlineColor;\r\n        styles[\r\n            'textShadow'\r\n        ] = `0 0 ${thickness}px ${color}, 0 0 ${thickness}px ${color}, 0 0 ${thickness}px ${color}, 0 0 ${thickness}px ${color}`;\r\n    }\r\n\r\n    if (subtitleBackgroundOpacity > 0) {\r\n        const opacity = subtitleBackgroundOpacity;\r\n        const color = subtitleBackgroundColor;\r\n        const { r, g, b } = hexToRgb(color);\r\n        styles['backgroundColor'] = `rgba(${r}, ${g}, ${b}, ${opacity})`;\r\n    }\r\n\r\n    if (subtitleFontFamily && subtitleFontFamily.length > 0) {\r\n        styles['fontFamily'] = subtitleFontFamily;\r\n    }\r\n\r\n    return styles;\r\n}\r\n\r\nexport function timeDurationDisplay(\r\n    milliseconds: number,\r\n    totalMilliseconds: number,\r\n    includeMilliseconds = true\r\n): string {\r\n    if (milliseconds < 0) {\r\n        return timeDurationDisplay(0, totalMilliseconds);\r\n    }\r\n\r\n    milliseconds = Math.round(milliseconds);\r\n    const ms = milliseconds % 1000;\r\n    milliseconds = (milliseconds - ms) / 1000;\r\n    const secs = milliseconds % 60;\r\n    milliseconds = (milliseconds - secs) / 60;\r\n    const mins = milliseconds % 60;\r\n\r\n    if (totalMilliseconds >= 3600000) {\r\n        const hrs = (milliseconds - mins) / 60;\r\n\r\n        if (includeMilliseconds) {\r\n            return pad(hrs) + ':' + pad(mins) + ':' + pad(secs) + '.' + padEnd(ms);\r\n        }\r\n\r\n        return pad(hrs) + ':' + pad(mins) + ':' + pad(secs);\r\n    }\r\n\r\n    if (includeMilliseconds) {\r\n        return pad(mins) + ':' + pad(secs) + '.' + padEnd(ms);\r\n    }\r\n\r\n    return pad(mins) + ':' + pad(secs);\r\n}\r\n\r\nfunction pad(n: number) {\r\n    return String(n).padStart(2, '0');\r\n}\r\n\r\nfunction padEnd(n: number) {\r\n    return String(n).padEnd(3, '0');\r\n}\r\n","import React, { useCallback, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { timeDurationDisplay } from '../services/Util';\r\nimport { Theme } from '@material-ui/core';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\nimport Popover from '@material-ui/core/Popover';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport StarIcon from '@material-ui/icons/Star';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { AudioModel, ImageModel, SubtitleModel } from '@project/common';\r\n\r\nexport interface CopyHistoryItem extends SubtitleModel {\r\n    name: string;\r\n    id: string;\r\n    timestamp: number;\r\n    surroundingSubtitles: SubtitleModel[];\r\n    audioFile?: File;\r\n    audioTrack?: string;\r\n    videoFile?: File;\r\n    subtitleFile?: File;\r\n    audio?: AudioModel;\r\n    image?: ImageModel;\r\n    url?: string;\r\n}\r\n\r\ninterface CopyHistoryProps {\r\n    open: boolean;\r\n    drawerWidth: number;\r\n    items: CopyHistoryItem[];\r\n    onClose: () => void;\r\n    onDelete: (item: CopyHistoryItem) => void;\r\n    onAnki: (item: CopyHistoryItem) => void;\r\n    onSelect: (item: CopyHistoryItem) => void;\r\n    onClipAudio: (item: CopyHistoryItem) => void;\r\n    onDownloadImage: (item: CopyHistoryItem) => void;\r\n}\r\n\r\nconst useStyles = makeStyles<Theme, CopyHistoryProps, string>((theme) => ({\r\n    drawer: {\r\n        width: ({ drawerWidth }) => drawerWidth,\r\n        flexShrink: 0,\r\n    },\r\n    drawerPaper: {\r\n        width: ({ drawerWidth }) => drawerWidth,\r\n    },\r\n    drawerHeader: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        position: 'static',\r\n        padding: theme.spacing(0, 1),\r\n        // necessary for content to be below app bar\r\n        ...theme.mixins.toolbar,\r\n        justifyContent: 'flex-start',\r\n    },\r\n    listContainer: {\r\n        position: 'relative',\r\n        height: '100%',\r\n        overflowY: 'auto',\r\n        overflowX: 'hidden',\r\n    },\r\n    listItem: {\r\n        '&:hover': {\r\n            backgroundColor: theme.palette.action.hover,\r\n        },\r\n    },\r\n    listItemGutters: {\r\n        paddingLeft: 5,\r\n        paddingRight: 5,\r\n    },\r\n    listItemIconRoot: {\r\n        minWidth: 20,\r\n    },\r\n    emptyState: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        flexDirection: 'column',\r\n        textAlign: 'center',\r\n        height: '100%',\r\n        padding: 15,\r\n    },\r\n    text: {\r\n        flexGrow: 1,\r\n    },\r\n    emptyText: {\r\n        flexGrow: 1,\r\n        color: theme.palette.text.secondary,\r\n    },\r\n    timestamp: {\r\n        paddingRight: 15,\r\n        paddingLeft: 15,\r\n        color: theme.palette.text.secondary,\r\n    },\r\n}));\r\n\r\ninterface MenuProps {\r\n    open: boolean;\r\n    item?: CopyHistoryItem;\r\n    anchorEl?: Element;\r\n    onClose: () => void;\r\n    onSelect: (item: CopyHistoryItem) => void;\r\n    onClipAudio: (item: CopyHistoryItem) => void;\r\n    onDownloadImage: (item: CopyHistoryItem) => void;\r\n    onDelete: (item: CopyHistoryItem) => void;\r\n}\r\n\r\nfunction Menu({ open, anchorEl, onClose, onSelect, onClipAudio, onDownloadImage, onDelete, item }: MenuProps) {\r\n    const handleCopy = useCallback(() => {\r\n        navigator.clipboard.writeText(item!.text);\r\n        onClose();\r\n    }, [item, onClose]);\r\n\r\n    const handleJumpTo = useCallback(() => {\r\n        onSelect(item!);\r\n        onClose();\r\n    }, [item, onSelect, onClose]);\r\n\r\n    const handleClipAudio = useCallback(() => {\r\n        onClipAudio(item!);\r\n        onClose();\r\n    }, [item, onClipAudio, onClose]);\r\n\r\n    const handleDownloadImage = useCallback(() => {\r\n        onDownloadImage(item!);\r\n        onClose();\r\n    }, [item, onDownloadImage, onClose]);\r\n\r\n    const handleDelete = useCallback(() => {\r\n        onDelete(item!);\r\n        onClose();\r\n    }, [item, onDelete, onClose]);\r\n\r\n    if (!item) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <Popover\r\n            disableEnforceFocus={true}\r\n            open={open}\r\n            anchorEl={anchorEl}\r\n            onClose={onClose}\r\n            anchorOrigin={{\r\n                vertical: 'center',\r\n                horizontal: 'center',\r\n            }}\r\n            transformOrigin={{\r\n                vertical: 'top',\r\n                horizontal: 'right',\r\n            }}\r\n        >\r\n            <List>\r\n                <ListItem button onClick={handleCopy}>\r\n                    <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Copy\" />\r\n                </ListItem>\r\n                <ListItem button onClick={handleJumpTo}>\r\n                    <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Jump To\" />\r\n                </ListItem>\r\n                {(item.videoFile || item.audioFile || item.audio) && (\r\n                    <ListItem button onClick={handleClipAudio}>\r\n                        <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Download Audio\" />\r\n                    </ListItem>\r\n                )}\r\n                {(item.videoFile || item.image) && (\r\n                    <ListItem button onClick={handleDownloadImage}>\r\n                        <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Download Image\" />\r\n                    </ListItem>\r\n                )}\r\n                <ListItem button onClick={handleDelete}>\r\n                    <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Delete\" />\r\n                </ListItem>\r\n            </List>\r\n        </Popover>\r\n    );\r\n}\r\n\r\nexport default function CopyHistory(props: CopyHistoryProps) {\r\n    const onDelete = props.onDelete;\r\n    const classes = useStyles(props);\r\n    const scrollToBottomRefCallback = useCallback((element) => {\r\n        if (element) {\r\n            element.scrollIntoView();\r\n        }\r\n    }, []);\r\n    const [menuItem, setMenuItem] = useState<CopyHistoryItem>();\r\n    const [menuOpen, setMenuOpen] = useState<boolean>(false);\r\n    const [menuAnchorEl, setMenuAnchorEl] = useState<Element>();\r\n\r\n    const handleMenu = useCallback((e: React.MouseEvent, item) => {\r\n        setMenuItem(item);\r\n        setMenuOpen(true);\r\n        setMenuAnchorEl(e.currentTarget);\r\n    }, []);\r\n\r\n    const handleMenuClosed = useCallback(() => {\r\n        setMenuItem(undefined);\r\n        setMenuOpen(false);\r\n        setMenuAnchorEl(undefined);\r\n    }, []);\r\n\r\n    const handleDelete = useCallback(\r\n        (item) => {\r\n            onDelete(item);\r\n        },\r\n        [onDelete]\r\n    );\r\n\r\n    let content;\r\n\r\n    if (props.items.length > 0) {\r\n        const items = [];\r\n        let lastSeenItemName = null;\r\n        let i = 0;\r\n        const itemNameCounters: { [name: string]: number } = {};\r\n\r\n        for (const item of props.items) {\r\n            if (lastSeenItemName === null || lastSeenItemName !== item.name) {\r\n                if (item.name in itemNameCounters) {\r\n                    itemNameCounters[item.name]++;\r\n                } else {\r\n                    itemNameCounters[item.name] = 0;\r\n                }\r\n\r\n                lastSeenItemName = item.name;\r\n                items.push(\r\n                    <ListSubheader disableSticky={true} key={item.name + '-' + itemNameCounters[item.name]}>\r\n                        {item.name}\r\n                    </ListSubheader>\r\n                );\r\n            }\r\n\r\n            const ref = i === props.items.length - 1 ? scrollToBottomRefCallback : null;\r\n\r\n            items.push(\r\n                <ListItem\r\n                    ref={ref}\r\n                    key={item.id}\r\n                    className={classes.listItem}\r\n                    classes={{ gutters: classes.listItemGutters }}\r\n                >\r\n                    <ListItemIcon classes={{ root: classes.listItemIconRoot }}>\r\n                        <Tooltip title=\"Export to Anki\">\r\n                            <IconButton onClick={() => props.onAnki(item)}>\r\n                                <StarIcon fontSize=\"small\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </ListItemIcon>\r\n                    <ListItemIcon classes={{ root: classes.listItemIconRoot }}>\r\n                        <IconButton onClick={(e) => handleMenu(e, item)}>\r\n                            <MoreVertIcon fontSize=\"small\" />\r\n                        </IconButton>\r\n                    </ListItemIcon>\r\n                    <ListItemText\r\n                        primary={\r\n                            <Grid wrap=\"nowrap\" container>\r\n                                <Grid item className={item.text === '' ? classes.emptyText : classes.text}>\r\n                                    {item.text === '' ? 'No text' : item.text}\r\n                                </Grid>\r\n                                <Grid item className={classes.timestamp}>\r\n                                    {timeDurationDisplay(item.start, item.start, false)}\r\n                                </Grid>\r\n                            </Grid>\r\n                        }\r\n                    />\r\n                </ListItem>\r\n            );\r\n\r\n            ++i;\r\n        }\r\n\r\n        content = (\r\n            <div className={classes.listContainer}>\r\n                <List>{items}</List>\r\n            </div>\r\n        );\r\n    } else {\r\n        content = (\r\n            <div className={classes.emptyState}>\r\n                <Typography variant=\"h6\">Copy history is empty.</Typography>\r\n                <Typography variant=\"caption\">See the help for keyboard shortcuts.</Typography>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Drawer\r\n                variant=\"persistent\"\r\n                anchor=\"right\"\r\n                open={props.open}\r\n                className={classes.drawer}\r\n                classes={{\r\n                    paper: classes.drawerPaper,\r\n                }}\r\n            >\r\n                <div className={classes.drawerHeader}>\r\n                    <IconButton onClick={props.onClose}>\r\n                        <ChevronRightIcon />\r\n                    </IconButton>\r\n                </div>\r\n                <Divider />\r\n                {content}\r\n            </Drawer>\r\n            <Menu\r\n                open={props.open && menuOpen}\r\n                anchorEl={menuAnchorEl}\r\n                item={menuItem}\r\n                onClose={handleMenuClosed}\r\n                onSelect={props.onSelect}\r\n                onClipAudio={props.onClipAudio}\r\n                onDownloadImage={props.onDownloadImage}\r\n                onDelete={handleDelete}\r\n            />\r\n        </React.Fragment>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport gt from 'semver/functions/gt';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport Link from '@material-ui/core/Link';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ChromeExtension from '../services/ChromeExtension';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    background: {\r\n        position: 'absolute',\r\n        height: 'calc(100vh - 64px)',\r\n        width: '100%',\r\n        zIndex: 100,\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        padding: 15,\r\n        textAlign: 'center',\r\n    },\r\n    browseLink: {\r\n        cursor: 'pointer',\r\n    },\r\n}));\r\n\r\ninterface Props {\r\n    extension: ChromeExtension;\r\n    latestExtensionVersion: string;\r\n    extensionUrl: string;\r\n    loading: boolean;\r\n    dragging: boolean;\r\n    onFileSelector: React.MouseEventHandler<HTMLAnchorElement> &\r\n        React.MouseEventHandler<HTMLSpanElement> &\r\n        React.MouseEventHandler<HTMLLabelElement>;\r\n}\r\n\r\nexport default function LandingPage({\r\n    extension,\r\n    latestExtensionVersion,\r\n    extensionUrl,\r\n    loading,\r\n    dragging,\r\n    onFileSelector,\r\n}: Props) {\r\n    const classes = useStyles();\r\n    const [installedExtensionVersion, setInstalledExtensionVersion] = useState<string>();\r\n\r\n    useEffect(() => {\r\n        async function fetchInstalledExtensionVersion() {\r\n            setInstalledExtensionVersion(await extension.installedVersion());\r\n        }\r\n\r\n        fetchInstalledExtensionVersion();\r\n    }, [extension]);\r\n\r\n    const extensionUpdateAvailable = installedExtensionVersion && gt(latestExtensionVersion, installedExtensionVersion);\r\n    const extensionNotInstalled = !installedExtensionVersion;\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Fade in={!loading && !dragging} timeout={500}>\r\n                <div className={classes.background}>\r\n                    <Typography variant=\"h6\">\r\n                        Drag and drop subtitle and media files, or{' '}\r\n                        <Link\r\n                            target=\"#\"\r\n                            className={classes.browseLink}\r\n                            onClick={onFileSelector}\r\n                            color=\"secondary\"\r\n                            component=\"label\"\r\n                        >\r\n                            browse\r\n                        </Link>\r\n                        .\r\n                        <br />\r\n                        {extensionNotInstalled && (\r\n                            <span>\r\n                                Install the{' '}\r\n                                <Link color=\"secondary\" target=\"_blank\" rel=\"noreferrer\" href={extensionUrl}>\r\n                                    Chrome extension\r\n                                </Link>{' '}\r\n                                to sync subtitles with streaming video.\r\n                            </span>\r\n                        )}\r\n                        {extensionUpdateAvailable && (\r\n                            <span>\r\n                                An extension{' '}\r\n                                <Link color=\"secondary\" target=\"_blank\" rel=\"noreferrer\" href={extensionUrl}>\r\n                                    update\r\n                                </Link>{' '}\r\n                                is available.\r\n                            </span>\r\n                        )}\r\n                    </Typography>\r\n                </div>\r\n            </Fade>\r\n        </React.Fragment>\r\n    );\r\n}\r\n","import { Message } from \"@project/common\";\r\nimport { VideoProtocol, VideoProtocolMessage } from \"./VideoProtocol\";\r\n\r\nexport default class BroadcastChannelVideoProtocol implements VideoProtocol {\r\n    private channel?: BroadcastChannel;\r\n\r\n    onMessage?: (message: VideoProtocolMessage) => void;\r\n    \r\n    constructor(channelId: string) {\r\n        this.channel = new BroadcastChannel(channelId);\r\n        const that = this;\r\n        this.channel.onmessage = (event) => {\r\n            that.onMessage?.(event as VideoProtocolMessage);\r\n        };\r\n    }\r\n\r\n    postMessage(message: Message) {\r\n        this.channel?.postMessage(message);\r\n    }\r\n\r\n    close() {\r\n        this.channel?.close();\r\n        this.channel = undefined;\r\n    }\r\n}\r\n","import { Message } from '@project/common';\r\nimport ChromeExtension, { ExtensionMessage } from './ChromeExtension';\r\nimport { VideoProtocol, VideoProtocolMessage } from './VideoProtocol';\r\n\r\nexport default class ChromeTabVideoProtocol implements VideoProtocol {\r\n    private readonly tabId: number;\r\n    private readonly src: string;\r\n    private readonly extension: ChromeExtension;\r\n    private readonly listener: (message: ExtensionMessage) => void;\r\n\r\n    onMessage?: (message: VideoProtocolMessage) => void;\r\n\r\n    constructor(tabId: number, src: string, extension: ChromeExtension) {\r\n        this.tabId = tabId;\r\n        this.src = src;\r\n        this.listener = (message) => {\r\n            if (message.tabId === tabId && (!message.src || message.src === src)) {\r\n                this.onMessage?.({\r\n                    data: message.data,\r\n                });\r\n            }\r\n        };\r\n\r\n        extension.subscribe(this.listener);\r\n        this.extension = extension;\r\n    }\r\n\r\n    postMessage(message: Message) {\r\n        this.extension.sendMessage(message, this.tabId, this.src);\r\n    }\r\n\r\n    close() {\r\n        this.extension.unsubscribe(this.listener);\r\n    }\r\n}\r\n","export default class Clock {\r\n    private accumulated: number;\r\n    private started: boolean;\r\n    private startTime?: number;\r\n\r\n    constructor() {\r\n        this.accumulated = 0;\r\n        this.started = false;\r\n    }\r\n\r\n    time(max: number) {\r\n        if (this.started) {\r\n            return Math.min(max, this.accumulated + Date.now() - this.startTime!);\r\n        }\r\n\r\n        return Math.min(max, this.accumulated);\r\n    }\r\n\r\n    stop() {\r\n        if (!this.started) {\r\n            return;\r\n        }\r\n\r\n        this.started = false;\r\n        this.accumulated += Date.now() - this.startTime!;\r\n    }\r\n\r\n    start() {\r\n        this.startTime = Date.now();\r\n        this.started = true;\r\n    }\r\n\r\n    setTime(time: number) {\r\n        if (this.started) {\r\n            this.startTime = Date.now();\r\n            this.accumulated = time;\r\n        } else {\r\n            this.accumulated = time;\r\n        }\r\n    }\r\n\r\n    progress(max: number) {\r\n        return max === 0 ? 0 : Math.min(1, this.time(max) / max);\r\n    }\r\n}\r\n","import React, { useCallback, useEffect, useState, useRef, MutableRefObject } from 'react';\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\r\nimport AudiotrackIcon from '@material-ui/icons/Audiotrack';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Input from '@material-ui/core/Input';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport OpenInNewIcon from '@material-ui/icons/OpenInNew';\r\nimport Popover from '@material-ui/core/Popover';\r\nimport FullscreenIcon from '@material-ui/icons/Fullscreen';\r\nimport FullscreenExitIcon from '@material-ui/icons/FullscreenExit';\r\nimport PauseIcon from '@material-ui/icons/Pause';\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\r\nimport QueueMusicIcon from '@material-ui/icons/QueueMusic';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport SpeedIcon from '@material-ui/icons/Speed';\r\nimport SubtitlesIcon from '@material-ui/icons/Subtitles';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport VideocamIcon from '@material-ui/icons/Videocam';\r\nimport VolumeOffIcon from '@material-ui/icons/VolumeOff';\r\nimport VolumeUpIcon from '@material-ui/icons/VolumeUp';\r\nimport { AsbplayerSettingsProvider, AudioTrackModel, VideoTabModel } from '@project/common';\r\nimport Clock from '../services/Clock';\r\n\r\nconst useControlStyles = makeStyles((theme) => ({\r\n    container: {\r\n        position: 'absolute',\r\n        left: '50%',\r\n        width: '50%',\r\n        bottom: 0,\r\n        pointerEvents: 'none',\r\n        color: '#fff',\r\n    },\r\n    buttonContainer: {\r\n        flexDirection: 'row',\r\n    },\r\n    timeDisplay: {\r\n        color: '#fff',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        height: '100%',\r\n        cursor: 'default',\r\n        fontSize: 20,\r\n        marginLeft: 10,\r\n    },\r\n    offsetInput: {\r\n        height: '100%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        fontSize: 20,\r\n        marginLeft: 10,\r\n        width: 100,\r\n        color: '#fff',\r\n        pointerEvents: 'auto',\r\n    },\r\n    volumeInputContainerShown: {\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.short,\r\n        }),\r\n        marginRight: 5,\r\n        pointerEvents: 'auto',\r\n    },\r\n    volumeInputContainerHidden: {\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.short,\r\n        }),\r\n        marginRight: 0,\r\n        pointerEvents: 'auto',\r\n    },\r\n    volumeInputHidden: {\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.short,\r\n        }),\r\n        width: 0,\r\n        pointerEvents: 'auto',\r\n    },\r\n    volumeInputShown: {\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.short,\r\n        }),\r\n        width: 100,\r\n        pointerEvents: 'auto',\r\n    },\r\n    volumeInputThumbHidden: {\r\n        transition: theme.transitions.create('visibility', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.short,\r\n        }),\r\n        opacity: 0,\r\n        pointerEvents: 'auto',\r\n    },\r\n    volumeInputThumbShown: {\r\n        transition: theme.transitions.create('visibility', {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.short,\r\n        }),\r\n        opacity: 1,\r\n        pointerEvents: 'auto',\r\n    },\r\n    subContainer: {\r\n        background: 'linear-gradient(to bottom, rgba(0, 0, 0, 0), rgba(0, 0, 0, .4) 40%, rgba(0, 0, 0, 0.7))',\r\n        position: 'relative',\r\n        left: '-100%',\r\n        width: '200%',\r\n        zIndex: 10,\r\n    },\r\n    button: {\r\n        pointerEvents: 'auto',\r\n    },\r\n    inactiveButton: {\r\n        color: 'rgba(72, 72, 72, 0.7)',\r\n        pointerEvents: 'auto',\r\n    },\r\n    progress: {\r\n        margin: 5,\r\n    },\r\n    closeButton: {\r\n        position: 'absolute',\r\n        top: 0,\r\n        left: 0,\r\n        pointerEvents: 'auto',\r\n        color: '#fff',\r\n    },\r\n    hideSubtitlePlayerToggleButton: {\r\n        position: 'absolute',\r\n        top: 0,\r\n        right: 0,\r\n        pointerEvents: 'auto',\r\n        color: '#fff',\r\n    },\r\n    gridContainer: {\r\n        pointerEvents: 'auto',\r\n        padding: 2,\r\n    },\r\n}));\r\n\r\nconst useProgressBarStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: 10,\r\n    },\r\n    container: {\r\n        height: 10,\r\n        pointerEvents: 'auto',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        flexDirection: 'column',\r\n        position: 'absolute',\r\n        width: 'calc(100% - 20px)',\r\n        marginLeft: 10,\r\n    },\r\n    mouseEventListener: {\r\n        zIndex: 1,\r\n        height: 10,\r\n        cursor: 'pointer',\r\n        pointerEvents: 'auto',\r\n        position: 'absolute',\r\n        width: '100%',\r\n    },\r\n    fillContainer: {\r\n        background: 'rgba(30,30,30,0.7)',\r\n        width: '100%',\r\n        height: 5,\r\n        position: 'relative',\r\n    },\r\n    fillContainerThick: {\r\n        transition: theme.transitions.create('height', {\r\n            easing: theme.transitions.easing.easeInOut,\r\n            duration: 50,\r\n        }),\r\n        height: 8,\r\n    },\r\n    fill: {\r\n        background: 'linear-gradient(to left, #ff1f62, #49007a)',\r\n        height: '100%',\r\n    },\r\n    handleContainer: {\r\n        position: 'absolute',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        flexDirection: 'column',\r\n        height: '100%',\r\n        bottom: 0,\r\n    },\r\n    handle: {\r\n        borderRadius: '50%',\r\n        width: 16,\r\n        height: 16,\r\n        opacity: 0,\r\n        left: -8,\r\n        background: 'white',\r\n        position: 'absolute',\r\n    },\r\n    handleOn: {\r\n        opacity: 1,\r\n        transition: theme.transitions.create('opacity', {\r\n            easing: theme.transitions.easing.easeInOut,\r\n            duration: theme.transitions.duration.shortest,\r\n        }),\r\n    },\r\n}));\r\n\r\nconst VolumeSlider = withStyles((theme) => ({\r\n    root: {\r\n        color: 'white',\r\n        verticalAlign: 'middle',\r\n    },\r\n    thumb: {\r\n        backgroundColor: 'white',\r\n        color: 'white',\r\n        '&:focus': {\r\n            boxShadow: 'inherit',\r\n        },\r\n        '&:hover, &$active': {\r\n            boxShadow: '0px 0px 0px 8px rgba(255, 255, 255, 0.1)',\r\n        },\r\n    },\r\n    active: {\r\n        color: 'white',\r\n    },\r\n}))(Slider);\r\n\r\nfunction displayTime(milliseconds: number) {\r\n    const seconds = Math.floor(milliseconds / 1000);\r\n    const minutes = Math.floor(seconds / 60);\r\n    const secondsInMinute = seconds % 60;\r\n    return String(minutes) + ':' + String(secondsInMinute).padStart(2, '0');\r\n}\r\n\r\nfunction elementWidth(element: HTMLElement) {\r\n    const rect = element.getBoundingClientRect();\r\n    return rect.right - rect.left;\r\n}\r\n\r\ninterface ProgressBarProps {\r\n    onSeek: (progress: number) => void;\r\n    value: number;\r\n}\r\n\r\nfunction ProgressBar({ onSeek, value }: ProgressBarProps) {\r\n    const classes = useProgressBarStyles();\r\n    const [mouseOver, setMouseOver] = useState(false);\r\n    const containerRef = useRef(null);\r\n\r\n    const handleClick = useCallback(\r\n        (e) => {\r\n            const rect = e.currentTarget.getBoundingClientRect();\r\n            // Account for margins by subtracting 10 from left/right sides\r\n            const width = rect.right - rect.left - 20;\r\n            const progress = Math.min(1, Math.max(0, (e.pageX - rect.left - 10) / width));\r\n            onSeek(progress);\r\n        },\r\n        [onSeek]\r\n    );\r\n\r\n    const handleMouseOver = useCallback(() => setMouseOver(true), []);\r\n    const handleMouseOut = useCallback(() => setMouseOver(false), []);\r\n    const progressWidth = containerRef.current ? (elementWidth(containerRef.current) * value) / 100 : 0;\r\n    const fillStyle = { width: progressWidth };\r\n    const handleStyle = { marginLeft: progressWidth };\r\n    const fillContainerClassName = mouseOver\r\n        ? classes.fillContainer + ' ' + classes.fillContainerThick\r\n        : classes.fillContainer;\r\n    const handleClassName = mouseOver ? classes.handle + ' ' + classes.handleOn : classes.handle;\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <div ref={containerRef} className={classes.container}>\r\n                <div className={fillContainerClassName}>\r\n                    <div className={classes.fill} style={fillStyle}></div>\r\n                    <div className={classes.handleContainer}>\r\n                        <div className={handleClassName} style={handleStyle} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div\r\n                className={classes.mouseEventListener}\r\n                onClick={handleClick}\r\n                onMouseOver={handleMouseOver}\r\n                onMouseOut={handleMouseOut}\r\n            ></div>\r\n        </div>\r\n    );\r\n}\r\n\r\ninterface AudioTrackSelectorProps {\r\n    open: boolean;\r\n    anchorEl?: Element;\r\n    audioTracks?: AudioTrackModel[];\r\n    selectedAudioTrack?: string;\r\n    onAudioTrackSelected: (id: string) => void;\r\n    onClose: () => void;\r\n}\r\n\r\nfunction AudioTrackSelector({\r\n    open,\r\n    anchorEl,\r\n    audioTracks,\r\n    selectedAudioTrack,\r\n    onAudioTrackSelected,\r\n    onClose,\r\n}: AudioTrackSelectorProps) {\r\n    if (!audioTracks || audioTracks.length === 0) {\r\n        return null;\r\n    }\r\n\r\n    const list = audioTracks.map((t) => {\r\n        return (\r\n            <ListItem\r\n                key={t.id}\r\n                selected={t.id === selectedAudioTrack}\r\n                button\r\n                onClick={() => onAudioTrackSelected(t.id)}\r\n            >\r\n                {t.language} {t.label}\r\n            </ListItem>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <Popover\r\n                disableEnforceFocus={true}\r\n                open={open}\r\n                anchorEl={anchorEl}\r\n                onClose={onClose}\r\n                anchorOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'center',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'center',\r\n                }}\r\n            >\r\n                <List>{list}</List>\r\n            </Popover>\r\n        </div>\r\n    );\r\n}\r\n\r\ninterface TabSelectorProps {\r\n    open: boolean;\r\n    anchorEl?: Element;\r\n    tabs?: VideoTabModel[];\r\n    selectedTab?: VideoTabModel;\r\n    onTabSelected: (tab: VideoTabModel) => void;\r\n    onClose: () => void;\r\n}\r\n\r\nfunction TabSelector({ open, anchorEl, onClose, tabs, selectedTab, onTabSelected }: TabSelectorProps) {\r\n    if (!tabs || tabs.length === 0) {\r\n        return null;\r\n    }\r\n\r\n    const list = tabs.map((t) => {\r\n        return (\r\n            <ListItem\r\n                key={t.id}\r\n                selected={selectedTab && t.id === selectedTab.id && t.src === selectedTab.src}\r\n                button\r\n                onClick={() => onTabSelected(t)}\r\n            >\r\n                {t.id} {t.title} {t.src}\r\n            </ListItem>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <Popover\r\n                disableEnforceFocus={true}\r\n                open={open}\r\n                anchorEl={anchorEl}\r\n                onClose={onClose}\r\n                anchorOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'center',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'center',\r\n                }}\r\n            >\r\n                <List>{list}</List>\r\n            </Popover>\r\n        </div>\r\n    );\r\n}\r\n\r\ninterface MediaUnloaderProps {\r\n    open: boolean;\r\n    anchorEl?: Element;\r\n    file?: string;\r\n    onUnload: () => void;\r\n    onClose: () => void;\r\n}\r\n\r\nfunction MediaUnloader({ open, anchorEl, onUnload, onClose, file }: MediaUnloaderProps) {\r\n    return (\r\n        <div>\r\n            <Popover\r\n                disableEnforceFocus={true}\r\n                open={open}\r\n                anchorEl={anchorEl}\r\n                onClose={onClose}\r\n                anchorOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'center',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'center',\r\n                }}\r\n            >\r\n                <List>\r\n                    <ListItem button onClick={(e) => onUnload()}>\r\n                        Unload {file}\r\n                    </ListItem>\r\n                </List>\r\n            </Popover>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport interface Point {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\ninterface ControlsProps {\r\n    clock: Clock;\r\n    playing: boolean;\r\n    length: number;\r\n    offsetEnabled?: boolean;\r\n    displayLength?: number;\r\n    offset: number;\r\n    onAudioTrackSelected: (id: string) => void;\r\n    onSeek: (progress: number) => void;\r\n    mousePositionRef: MutableRefObject<Point>;\r\n    onShow?: (show: boolean) => void;\r\n    onPause: () => void;\r\n    onPlay: () => void;\r\n    onTabSelected?: (tab: VideoTabModel) => void;\r\n    onUnloadAudio?: () => void;\r\n    onUnloadVideo?: () => void;\r\n    onOffsetChange: (offset: number) => void;\r\n    onVolumeChange: (volume: number) => void;\r\n    disableKeyEvents?: boolean;\r\n    settingsProvider: AsbplayerSettingsProvider;\r\n    closeEnabled?: boolean;\r\n    onClose?: () => void;\r\n    volumeEnabled?: boolean;\r\n    condensedModeEnabled?: boolean;\r\n    condensedModeToggleEnabled?: boolean;\r\n    onCondensedModeToggle?: () => void;\r\n    subtitlesEnabled?: boolean;\r\n    subtitlesToggle?: boolean;\r\n    onSubtitlesToggle?: () => void;\r\n    videoFile?: string;\r\n    audioFile?: string;\r\n    audioTracks?: AudioTrackModel[];\r\n    selectedAudioTrack?: string;\r\n    tabs?: VideoTabModel[];\r\n    selectedTab?: VideoTabModel;\r\n    popOutEnabled?: boolean;\r\n    popOut?: boolean;\r\n    onPopOutToggle?: () => void;\r\n    fullscreenEnabled?: boolean;\r\n    fullscreen?: boolean;\r\n    onFullscreenToggle?: () => void;\r\n    hideSubtitlePlayerToggleEnabled?: boolean;\r\n    subtitlePlayerHidden?: boolean;\r\n    onHideSubtitlePlayerToggle?: () => void;\r\n    showOnMouseMovement: boolean;\r\n}\r\n\r\nexport default function Controls({\r\n    clock,\r\n    playing,\r\n    length,\r\n    offsetEnabled,\r\n    displayLength,\r\n    offset,\r\n    onAudioTrackSelected,\r\n    onSeek,\r\n    mousePositionRef,\r\n    onShow,\r\n    onPause,\r\n    onPlay,\r\n    onTabSelected,\r\n    onUnloadAudio,\r\n    onUnloadVideo,\r\n    onOffsetChange,\r\n    onVolumeChange,\r\n    disableKeyEvents,\r\n    settingsProvider,\r\n    closeEnabled,\r\n    onClose,\r\n    volumeEnabled,\r\n    condensedModeEnabled,\r\n    condensedModeToggleEnabled,\r\n    onCondensedModeToggle,\r\n    subtitlesEnabled,\r\n    subtitlesToggle,\r\n    onSubtitlesToggle,\r\n    videoFile,\r\n    audioFile,\r\n    audioTracks,\r\n    selectedAudioTrack,\r\n    tabs,\r\n    selectedTab,\r\n    popOutEnabled,\r\n    popOut,\r\n    onPopOutToggle,\r\n    fullscreenEnabled,\r\n    fullscreen,\r\n    onFullscreenToggle,\r\n    hideSubtitlePlayerToggleEnabled,\r\n    subtitlePlayerHidden,\r\n    onHideSubtitlePlayerToggle,\r\n    showOnMouseMovement,\r\n}: ControlsProps) {\r\n    const classes = useControlStyles();\r\n    const [show, setShow] = useState<boolean>(true);\r\n    const [audioTrackSelectorOpen, setAudioTrackSelectorOpen] = useState<boolean>(false);\r\n    const [audioTrackSelectorAnchorEl, setAudioTrackSelectorAnchorEl] = useState<Element>();\r\n    const [tabSelectorOpen, setTabSelectorOpen] = useState<boolean>(false);\r\n    const [tabSelectorAnchorEl, setTabSelectorAnchorEl] = useState<Element>();\r\n    const [audioUnloaderOpen, setAudioUnloaderOpen] = useState<boolean>(false);\r\n    const [audioUnloaderAnchorEl, setAudioUnloaderAnchorEl] = useState<Element>();\r\n    const [videoUnloaderOpen, setVideoUnloaderOpen] = useState<boolean>(false);\r\n    const [videoUnloaderAnchorEl, setVideoUnloaderAnchorEl] = useState<Element>();\r\n    const [showVolumeBar, setShowVolumeBar] = useState<boolean>(false);\r\n    const [volume, setVolume] = useState<number>(100);\r\n    const [lastCommittedVolume, setLastCommittedVolume] = useState<number>(100);\r\n    const lastMousePositionRef = useRef<Point>({ x: 0, y: 0 });\r\n    const lastShowTimestampRef = useRef<number>(Date.now());\r\n    const lastOffsetInputChangeTimestampRef = useRef<number>(Date.now());\r\n    const lastShowRef = useRef<boolean>(true);\r\n    const forceShowRef = useRef<boolean>(false);\r\n    const offsetInputRef = useRef<HTMLInputElement>();\r\n    const containerRef = useRef<HTMLDivElement>(null);\r\n    const closeButtonRef = useRef<HTMLButtonElement>(null);\r\n    const [, updateState] = useState<any>();\r\n    const forceUpdate = useCallback(() => updateState({}), []);\r\n\r\n    const handleSeek = useCallback(\r\n        (progress) => {\r\n            onSeek(progress);\r\n        },\r\n        [onSeek]\r\n    );\r\n\r\n    function handleMouseOver() {\r\n        forceShowRef.current = true;\r\n    }\r\n\r\n    function handleMouseOut() {\r\n        forceShowRef.current = false;\r\n    }\r\n\r\n    useEffect(() => {\r\n        const savedVolume = Number(settingsProvider.volume);\r\n        setVolume(savedVolume);\r\n        onVolumeChange(savedVolume / 100);\r\n\r\n        if (savedVolume > 0) {\r\n            setLastCommittedVolume(savedVolume);\r\n        }\r\n    }, [settingsProvider, onVolumeChange]);\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            let currentShow: boolean;\r\n\r\n            if (showOnMouseMovement) {\r\n                const now = Date.now();\r\n                currentShow =\r\n                    now - lastShowTimestampRef.current < 2000 ||\r\n                    Math.pow(mousePositionRef.current.x - lastMousePositionRef.current.x, 2) +\r\n                        Math.pow(mousePositionRef.current.y - lastMousePositionRef.current.y, 2) >\r\n                        100 ||\r\n                    forceShowRef.current ||\r\n                    offsetInputRef.current === document.activeElement ||\r\n                    now - lastOffsetInputChangeTimestampRef.current < 2000;\r\n            } else {\r\n                currentShow =\r\n                    ((containerRef.current && mousePositionRef.current.y > containerRef.current.offsetTop - 20) ||\r\n                        (closeButtonRef.current && mousePositionRef.current.y < closeButtonRef.current.offsetHeight + 20)) ??\r\n                    false;\r\n            }\r\n\r\n            if (currentShow && !lastShowRef.current) {\r\n                lastShowTimestampRef.current = Date.now();\r\n                setShow(currentShow);\r\n            } else if (!currentShow && lastShowRef.current) {\r\n                setShow(currentShow);\r\n            }\r\n\r\n            lastShowRef.current = currentShow;\r\n            lastMousePositionRef.current.x = mousePositionRef.current.x;\r\n            lastMousePositionRef.current.y = mousePositionRef.current.y;\r\n        }, 100);\r\n        return () => clearInterval(interval);\r\n    }, [mousePositionRef, showOnMouseMovement]);\r\n\r\n    useEffect(() => onShow?.(show), [onShow, show]);\r\n\r\n    useEffect(() => {\r\n        if (disableKeyEvents) {\r\n            return;\r\n        }\r\n\r\n        function handleKey(event: KeyboardEvent) {\r\n            if (event.key === 'Enter') {\r\n                if (offsetInputRef.current === document.activeElement) {\r\n                    const offset = Number(offsetInputRef.current.value);\r\n\r\n                    if (Number.isNaN(offset)) {\r\n                        return;\r\n                    }\r\n\r\n                    onOffsetChange(offset * 1000);\r\n                    offsetInputRef.current.blur();\r\n                }\r\n            }\r\n        }\r\n\r\n        window.addEventListener('keydown', handleKey);\r\n\r\n        return () => {\r\n            window.removeEventListener('keydown', handleKey);\r\n        };\r\n    }, [onOffsetChange, disableKeyEvents]);\r\n\r\n    const handleOffsetInputClicked = useCallback((e) => e.target.setSelectionRange(0, e.target.value?.length || 0), []);\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            forceUpdate();\r\n        }, 100);\r\n\r\n        return () => clearInterval(interval);\r\n    }, [forceUpdate]);\r\n\r\n    useEffect(() => {\r\n        if (offsetInputRef.current) {\r\n            if (offset === 0) {\r\n                offsetInputRef.current.value = '';\r\n            } else {\r\n                const offsetSeconds = offset / 1000;\r\n                const value = offsetSeconds >= 0 ? '+' + offsetSeconds.toFixed(2) : String(offsetSeconds.toFixed(2));\r\n                offsetInputRef.current.value = value;\r\n                lastOffsetInputChangeTimestampRef.current = Date.now();\r\n            }\r\n        }\r\n    }, [offset]);\r\n\r\n    const handleAudioTrackSelectorClosed = useCallback(() => {\r\n        setAudioTrackSelectorAnchorEl(undefined);\r\n        setAudioTrackSelectorOpen(false);\r\n    }, []);\r\n\r\n    const handleAudioTrackSelectorOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        setAudioTrackSelectorAnchorEl(e.currentTarget);\r\n        setAudioTrackSelectorOpen(true);\r\n    }, []);\r\n\r\n    const handleAudioTrackSelected = useCallback(\r\n        (id: string) => {\r\n            onAudioTrackSelected(id);\r\n            setAudioTrackSelectorAnchorEl(undefined);\r\n            setAudioTrackSelectorOpen(false);\r\n        },\r\n        [onAudioTrackSelected]\r\n    );\r\n\r\n    const handleTabSelectorClosed = useCallback(() => {\r\n        setTabSelectorAnchorEl(undefined);\r\n        setTabSelectorOpen(false);\r\n    }, []);\r\n\r\n    const handleTabSelectorOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        setTabSelectorAnchorEl(e.currentTarget);\r\n        setTabSelectorOpen(true);\r\n    }, []);\r\n\r\n    const handleTabSelected = useCallback(\r\n        (tab) => {\r\n            onTabSelected?.(tab);\r\n            setTabSelectorAnchorEl(undefined);\r\n            setTabSelectorOpen(false);\r\n        },\r\n        [onTabSelected]\r\n    );\r\n\r\n    const handleAudioUnloaderClosed = useCallback(() => {\r\n        setAudioUnloaderAnchorEl(undefined);\r\n        setAudioUnloaderOpen(false);\r\n    }, []);\r\n\r\n    const handleAudioUnloaderOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        setAudioUnloaderAnchorEl(e.currentTarget);\r\n        setAudioUnloaderOpen(true);\r\n    }, []);\r\n\r\n    const handleUnloadAudio = useCallback(() => {\r\n        onUnloadAudio?.();\r\n        setAudioUnloaderOpen(false);\r\n    }, [onUnloadAudio]);\r\n\r\n    const handleVideoUnloaderClosed = useCallback(() => {\r\n        setVideoUnloaderAnchorEl(undefined);\r\n        setVideoUnloaderOpen(false);\r\n    }, []);\r\n\r\n    const handleVideoUnloaderOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        setVideoUnloaderAnchorEl(e.currentTarget);\r\n        setVideoUnloaderOpen(true);\r\n    }, []);\r\n\r\n    const handleUnloadVideo = useCallback(() => {\r\n        onUnloadVideo?.();\r\n        setVideoUnloaderOpen(false);\r\n    }, [onUnloadVideo]);\r\n\r\n    const handleVolumeMouseOut = useCallback(() => setShowVolumeBar(false), []);\r\n    const handleVolumeMouseOver = useCallback(() => setShowVolumeBar(true), []);\r\n\r\n    const handleVolumeChange = useCallback(\r\n        (e, value) => {\r\n            setVolume(value);\r\n            onVolumeChange(value / 100);\r\n        },\r\n        [onVolumeChange]\r\n    );\r\n\r\n    const handleVolumeChangeCommitted = useCallback(\r\n        (e, value) => {\r\n            if (value > 0) {\r\n                setLastCommittedVolume(value);\r\n            }\r\n\r\n            settingsProvider.volume = value;\r\n        },\r\n        [settingsProvider]\r\n    );\r\n\r\n    const handleVolumeToggle = useCallback(() => {\r\n        setVolume((volume) => {\r\n            const newVolume = volume > 0 ? 0 : lastCommittedVolume;\r\n            onVolumeChange(newVolume / 100);\r\n            return newVolume;\r\n        });\r\n    }, [onVolumeChange, lastCommittedVolume]);\r\n\r\n    const progress = clock.progress(length);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {closeEnabled && (\r\n                <Fade in={show} timeout={200}>\r\n                    <IconButton\r\n                        ref={closeButtonRef}\r\n                        color=\"inherit\"\r\n                        className={classes.closeButton}\r\n                        onClick={onClose}\r\n                        onMouseOver={handleMouseOver}\r\n                        onMouseOut={handleMouseOut}\r\n                    >\r\n                        <CloseIcon />\r\n                    </IconButton>\r\n                </Fade>\r\n            )}\r\n            {hideSubtitlePlayerToggleEnabled && (\r\n                <Fade in={show} timeout={200}>\r\n                    <IconButton\r\n                        color=\"inherit\"\r\n                        className={classes.hideSubtitlePlayerToggleButton}\r\n                        onClick={onHideSubtitlePlayerToggle}\r\n                        onMouseOver={handleMouseOver}\r\n                        onMouseOut={handleMouseOut}\r\n                    >\r\n                        {subtitlePlayerHidden ? <ArrowBackIcon /> : <ArrowForwardIcon />}\r\n                    </IconButton>\r\n                </Fade>\r\n            )}\r\n            <div\r\n                ref={containerRef}\r\n                className={classes.container}\r\n                onMouseOver={handleMouseOver}\r\n                onMouseOut={handleMouseOut}\r\n            >\r\n                <Fade in={show} timeout={200}>\r\n                    <div className={classes.subContainer}>\r\n                        <ProgressBar onSeek={handleSeek} value={progress * 100} />\r\n                        <Grid container className={classes.gridContainer} direction=\"row\">\r\n                            <Grid item>\r\n                                <IconButton color=\"inherit\" onClick={() => (playing ? onPause() : onPlay())}>\r\n                                    {playing ? (\r\n                                        <PauseIcon className={classes.button} />\r\n                                    ) : (\r\n                                        <PlayArrowIcon className={classes.button} />\r\n                                    )}\r\n                                </IconButton>\r\n                            </Grid>\r\n                            {volumeEnabled && (\r\n                                <Grid\r\n                                    item\r\n                                    onMouseOver={handleVolumeMouseOver}\r\n                                    onMouseOut={handleVolumeMouseOut}\r\n                                    className={\r\n                                        showVolumeBar\r\n                                            ? classes.volumeInputContainerShown\r\n                                            : classes.volumeInputContainerHidden\r\n                                    }\r\n                                >\r\n                                    <IconButton color=\"inherit\" onClick={handleVolumeToggle}>\r\n                                        {volume === 0 ? <VolumeOffIcon /> : <VolumeUpIcon />}\r\n                                    </IconButton>\r\n                                    <VolumeSlider\r\n                                        onChange={handleVolumeChange}\r\n                                        onChangeCommitted={handleVolumeChangeCommitted}\r\n                                        value={volume}\r\n                                        defaultValue={100}\r\n                                        classes={{\r\n                                            root: showVolumeBar ? classes.volumeInputShown : classes.volumeInputHidden,\r\n                                            thumb: showVolumeBar\r\n                                                ? classes.volumeInputThumbShown\r\n                                                : classes.volumeInputThumbHidden,\r\n                                        }}\r\n                                    />\r\n                                </Grid>\r\n                            )}\r\n                            <Grid item>\r\n                                <div className={classes.timeDisplay}>\r\n                                    {displayTime(progress * length)} / {displayTime(displayLength || length)}\r\n                                </div>\r\n                            </Grid>\r\n                            {offsetEnabled && (\r\n                                <Grid item>\r\n                                    <Input\r\n                                        inputRef={offsetInputRef}\r\n                                        disableUnderline={true}\r\n                                        className={classes.offsetInput}\r\n                                        placeholder={'±' + Number(0).toFixed(2)}\r\n                                        onClick={handleOffsetInputClicked}\r\n                                    />\r\n                                </Grid>\r\n                            )}\r\n                            <Grid item style={{ flexGrow: 1 }}></Grid>\r\n                            {condensedModeToggleEnabled && (\r\n                                <Grid item>\r\n                                    <Tooltip title=\"Condensed Mode\">\r\n                                        <IconButton color=\"inherit\" onClick={onCondensedModeToggle}>\r\n                                            <SpeedIcon\r\n                                                className={\r\n                                                    condensedModeEnabled ? classes.button : classes.inactiveButton\r\n                                                }\r\n                                            />\r\n                                        </IconButton>\r\n                                    </Tooltip>\r\n                                </Grid>\r\n                            )}\r\n                            {subtitlesToggle && (\r\n                                <Grid item>\r\n                                    <IconButton color=\"inherit\" onClick={onSubtitlesToggle}>\r\n                                        <SubtitlesIcon\r\n                                            className={subtitlesEnabled ? classes.button : classes.inactiveButton}\r\n                                        />\r\n                                    </IconButton>\r\n                                </Grid>\r\n                            )}\r\n                            {videoFile && (\r\n                                <Grid item>\r\n                                    <IconButton color=\"inherit\" onClick={handleVideoUnloaderOpened}>\r\n                                        <VideocamIcon className={classes.button} />\r\n                                    </IconButton>\r\n                                </Grid>\r\n                            )}\r\n                            {audioFile && (\r\n                                <Grid item>\r\n                                    <IconButton color=\"inherit\" onClick={handleAudioUnloaderOpened}>\r\n                                        <AudiotrackIcon className={classes.button} />\r\n                                    </IconButton>\r\n                                </Grid>\r\n                            )}\r\n                            {audioTracks && audioTracks.length > 1 && (\r\n                                <Grid item>\r\n                                    <IconButton color=\"inherit\" onClick={handleAudioTrackSelectorOpened}>\r\n                                        <QueueMusicIcon className={classes.button} />\r\n                                    </IconButton>\r\n                                </Grid>\r\n                            )}\r\n                            {tabs && tabs.length > 0 && (\r\n                                <Grid item>\r\n                                    <IconButton color=\"inherit\" onClick={handleTabSelectorOpened}>\r\n                                        <VideocamIcon\r\n                                            className={selectedTab ? classes.button : classes.inactiveButton}\r\n                                        />\r\n                                    </IconButton>\r\n                                </Grid>\r\n                            )}\r\n                            {popOutEnabled && (\r\n                                <Grid item>\r\n                                    <IconButton color=\"inherit\" onClick={onPopOutToggle}>\r\n                                        <OpenInNewIcon\r\n                                            className={classes.button}\r\n                                            style={popOut ? { transform: 'rotateX(180deg)' } : {}}\r\n                                        />\r\n                                    </IconButton>\r\n                                </Grid>\r\n                            )}\r\n                            {fullscreenEnabled && (\r\n                                <Grid item>\r\n                                    <IconButton color=\"inherit\" onClick={onFullscreenToggle}>\r\n                                        {fullscreen ? (\r\n                                            <FullscreenExitIcon className={classes.button} />\r\n                                        ) : (\r\n                                            <FullscreenIcon className={classes.button} />\r\n                                        )}\r\n                                    </IconButton>\r\n                                </Grid>\r\n                            )}\r\n                        </Grid>\r\n                    </div>\r\n                </Fade>\r\n                <TabSelector\r\n                    open={tabSelectorOpen && show}\r\n                    anchorEl={tabSelectorAnchorEl}\r\n                    tabs={tabs}\r\n                    selectedTab={selectedTab}\r\n                    onClose={handleTabSelectorClosed}\r\n                    onTabSelected={handleTabSelected}\r\n                />\r\n                <AudioTrackSelector\r\n                    open={audioTrackSelectorOpen && show}\r\n                    anchorEl={audioTrackSelectorAnchorEl}\r\n                    audioTracks={audioTracks}\r\n                    selectedAudioTrack={selectedAudioTrack}\r\n                    onClose={handleAudioTrackSelectorClosed}\r\n                    onAudioTrackSelected={handleAudioTrackSelected}\r\n                />\r\n                <MediaUnloader\r\n                    open={audioUnloaderOpen}\r\n                    anchorEl={audioUnloaderAnchorEl}\r\n                    file={audioFile}\r\n                    onClose={handleAudioUnloaderClosed}\r\n                    onUnload={handleUnloadAudio}\r\n                />\r\n                <MediaUnloader\r\n                    open={videoUnloaderOpen}\r\n                    anchorEl={videoUnloaderAnchorEl}\r\n                    file={videoFile}\r\n                    onClose={handleVideoUnloaderClosed}\r\n                    onUnload={handleUnloadVideo}\r\n                />\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n","import { RefObject } from \"react\";\r\n\r\nexport interface MediaElement {\r\n    currentTime: number;\r\n    readyState: number;\r\n    oncanplay: ((ev: Event) => void) | null;\r\n    play: () => Promise<void>;\r\n    pause: () => void;\r\n    duration: number;\r\n}\r\n\r\nexport default class MediaAdapter {\r\n    private readonly ref: RefObject<MediaElement | undefined>;\r\n    private readonly readyResolves: (() => void)[];\r\n\r\n    constructor(ref: RefObject<MediaElement | undefined>) {\r\n        this.ref = ref;\r\n        this.readyResolves = [];\r\n    }\r\n\r\n    async seek(time: number) {\r\n        return new Promise((resolve, reject) => {\r\n            if (this.ref.current) {\r\n                this.ref.current.currentTime = time;\r\n                this._onMediaCanPlay(() => resolve(undefined));\r\n            } else {\r\n                resolve(undefined);\r\n            }\r\n        });\r\n    }\r\n\r\n    async onReady() {\r\n        return new Promise((resolve, reject) => {\r\n            if (this.ref.current) {\r\n                this._onMediaCanPlay(() => resolve(undefined));\r\n            } else {\r\n                resolve(undefined);\r\n            }\r\n        });\r\n    }\r\n\r\n    _onMediaCanPlay(callback: () => void) {\r\n        if (this.ref.current?.readyState === 4) {\r\n            callback();\r\n            return;\r\n        }\r\n\r\n        if (this.ref.current && !this.ref.current.oncanplay) {\r\n            this.ref.current.oncanplay = (e) => {\r\n                for (const resolve of this.readyResolves) {\r\n                    resolve();\r\n                }\r\n\r\n                this.readyResolves.length = 0;\r\n\r\n                if (this.ref.current) {\r\n                    this.ref.current.oncanplay = null;\r\n                }\r\n            };\r\n        }\r\n\r\n        this.readyResolves.push(callback);\r\n    }\r\n\r\n    play() {\r\n        this.ref.current?.play();\r\n    }\r\n\r\n    pause() {\r\n        this.ref.current?.pause();\r\n    }\r\n}\r\n","import React, { useCallback, useEffect, useState, useMemo, useRef, createRef, RefObject } from 'react';\r\nimport { makeStyles, Theme } from '@material-ui/core/styles';\r\nimport { keysAreEqual } from '../services/Util';\r\nimport { useWindowSize } from '../hooks/useWindowSize';\r\nimport { AsbplayerSettingsProvider, KeyBindings, surroundingSubtitles, SubtitleModel } from '@project/common';\r\nimport FileCopy from '@material-ui/icons/FileCopy';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableRow, { TableRowProps } from '@material-ui/core/TableRow';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Clock from '../services/Clock';\r\n\r\ninterface StylesProps {\r\n    compressed: boolean;\r\n    windowWidth: number;\r\n}\r\n\r\nconst useSubtitlePlayerStyles = makeStyles<Theme, StylesProps, string>((theme) => ({\r\n    container: {\r\n        height: 'calc(100vh - 64px)',\r\n        position: 'relative',\r\n        overflowX: 'hidden',\r\n        backgroundColor: theme.palette.background.default,\r\n        width: ({ compressed, windowWidth }) => (compressed ? Math.max(350, 0.25 * windowWidth) : '100%'),\r\n    },\r\n    table: {\r\n        backgroundColor: theme.palette.background.default,\r\n        marginBottom: 75, // so the last row doesn't collide with controls\r\n    },\r\n    noSubtitles: {\r\n        height: '100%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        padding: 15,\r\n        textAlign: 'center',\r\n    },\r\n}));\r\n\r\nconst useSubtitleRowStyles = makeStyles((theme) => ({\r\n    subtitleRow: {\r\n        '&:hover': {\r\n            backgroundColor: theme.palette.action.hover,\r\n        },\r\n    },\r\n    subtitle: {\r\n        fontSize: 20,\r\n        paddingRight: 0,\r\n        minWidth: 200,\r\n        width: '100%',\r\n        overflowWrap: 'anywhere',\r\n    },\r\n    compressedSubtitle: {\r\n        fontSize: 16,\r\n        paddingRight: 0,\r\n        minWidth: 200,\r\n        width: '100%',\r\n        overflowWrap: 'anywhere',\r\n    },\r\n    disabledSubtitle: {\r\n        color: 'transparent',\r\n        backgroundColor: theme.palette.action.disabledBackground,\r\n        borderRadius: 5,\r\n    },\r\n    timestamp: {\r\n        fontSize: 14,\r\n        color: '#aaaaaa',\r\n        textAlign: 'right',\r\n        paddingRight: 15,\r\n        paddingLeft: 5,\r\n    },\r\n    copyButton: {\r\n        textAlign: 'right',\r\n        padding: 0,\r\n    },\r\n}));\r\n\r\nexport interface DisplaySubtitleModel extends SubtitleModel {\r\n    displayTime: string;\r\n}\r\n\r\ninterface SubtitleRowProps extends TableRowProps {\r\n    index: number;\r\n    compressed: boolean;\r\n    selected: boolean;\r\n    disabled: boolean;\r\n    subtitle: DisplaySubtitleModel;\r\n    subtitleRef: RefObject<HTMLTableRowElement>;\r\n    onClickSubtitle: (index: number) => void;\r\n    onCopySubtitle: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>, index: number) => void;\r\n}\r\n\r\nconst SubtitleRow = React.memo((props: SubtitleRowProps) => {\r\n    const { index, selected, subtitleRef, onClickSubtitle, onCopySubtitle, compressed, disabled, subtitle, ...tableRowProps } = props;\r\n    const classes = useSubtitleRowStyles();\r\n    const textRef = useRef<HTMLSpanElement>(null);\r\n    const [textSelected, setTextSelected] = useState<boolean>(false);\r\n    let className = compressed ? classes.compressedSubtitle : classes.subtitle;\r\n    let disabledClassName = disabled ? classes.disabledSubtitle : '';\r\n\r\n    if (subtitle.start < 0 || subtitle.end < 0) {\r\n        return null;\r\n    }\r\n\r\n    function handleMouseUp() {\r\n        const selection = document.getSelection();\r\n        const selected =\r\n            selection?.type === 'Range' && textRef.current?.isSameNode(selection.anchorNode?.parentNode ?? null);\r\n        setTextSelected(selected ?? false);\r\n    }\r\n\r\n    return (\r\n        <TableRow\r\n            onClick={() => !textSelected && onClickSubtitle(index)}\r\n            onMouseUp={handleMouseUp}\r\n            ref={subtitleRef}\r\n            className={classes.subtitleRow}\r\n            selected={selected}\r\n            {...tableRowProps}\r\n        >\r\n            <TableCell className={className}>\r\n                <span ref={textRef} className={disabledClassName}>\r\n                    {subtitle.text}\r\n                </span>\r\n            </TableCell>\r\n            <TableCell className={classes.copyButton}>\r\n                <IconButton onClick={(e) => onCopySubtitle(e, index)}>\r\n                    <FileCopy fontSize={compressed ? 'small' : 'medium'} />\r\n                </IconButton>\r\n            </TableCell>\r\n            <TableCell className={classes.timestamp}>{subtitle.displayTime}</TableCell>\r\n        </TableRow>\r\n    );\r\n});\r\n\r\ninterface SubtitlePlayerProps {\r\n    clock: Clock;\r\n    onSeek: (progress: number, shouldPlay: boolean) => void;\r\n    onCopy: (subtitle: SubtitleModel, surroundingSubtitles: SubtitleModel[], preventDuplicate: boolean) => void;\r\n    onOffsetChange: (offset: number) => void;\r\n    onAnkiDialogRequest: () => void;\r\n    onToggleSubtitleTrack: (track: number) => void;\r\n    playing: boolean;\r\n    subtitles?: DisplaySubtitleModel[];\r\n    length: number;\r\n    jumpToSubtitle?: SubtitleModel;\r\n    compressed: boolean;\r\n    loading: boolean;\r\n    drawerOpen: boolean;\r\n    displayHelp?: string;\r\n    disableKeyEvents: boolean;\r\n    lastJumpToTopTimestamp: number;\r\n    hidden: boolean;\r\n    disabledSubtitleTracks: { [track: number]: boolean };\r\n    settingsProvider: AsbplayerSettingsProvider;\r\n}\r\n\r\nexport default function SubtitlePlayer({\r\n    clock,\r\n    onSeek,\r\n    onCopy,\r\n    onOffsetChange,\r\n    onAnkiDialogRequest,\r\n    onToggleSubtitleTrack,\r\n    playing,\r\n    subtitles,\r\n    length,\r\n    jumpToSubtitle,\r\n    compressed,\r\n    loading,\r\n    drawerOpen,\r\n    displayHelp,\r\n    disableKeyEvents,\r\n    lastJumpToTopTimestamp,\r\n    hidden,\r\n    disabledSubtitleTracks,\r\n    settingsProvider,\r\n}: SubtitlePlayerProps) {\r\n    const playingRef = useRef<boolean>();\r\n    playingRef.current = playing;\r\n    const clockRef = useRef<Clock>(clock);\r\n    clockRef.current = clock;\r\n    const subtitleListRef = useRef<DisplaySubtitleModel[]>();\r\n    subtitleListRef.current = subtitles;\r\n    const subtitleRefs = useMemo<RefObject<HTMLTableRowElement>[]>(\r\n        () =>\r\n            subtitles\r\n                ? Array(subtitles.length)\r\n                      .fill(undefined)\r\n                      .map((_) => createRef<HTMLTableRowElement>())\r\n                : [],\r\n        [subtitles]\r\n    );\r\n    const subtitleRefsRef = useRef<RefObject<HTMLTableRowElement>[]>([]);\r\n    subtitleRefsRef.current = subtitleRefs;\r\n    const disableKeyEventsRef = useRef<boolean>();\r\n    disableKeyEventsRef.current = disableKeyEvents;\r\n    const [selectedSubtitleIndexes, setSelectedSubtitleIndexes] = useState<{ [index: number]: boolean }>({});\r\n    const selectedSubtitleIndexesRef = useRef<{ [index: number]: boolean }>({});\r\n    const lengthRef = useRef<number>(0);\r\n    lengthRef.current = length;\r\n    const hiddenRef = useRef<boolean>(false);\r\n    hiddenRef.current = hidden;\r\n    const lastScrollTimestampRef = useRef<number>(0);\r\n    const requestAnimationRef = useRef<number>();\r\n    const containerRef = useRef<HTMLElement>();\r\n    const drawerOpenRef = useRef<boolean>();\r\n    drawerOpenRef.current = drawerOpen;\r\n    const [windowWidth] = useWindowSize(true);\r\n    const classes = useSubtitlePlayerStyles({ compressed, windowWidth });\r\n\r\n    // This effect should be scheduled only once as re-scheduling seems to cause performance issues.\r\n    // Therefore all of the state it operates on is contained in refs.\r\n    useEffect(() => {\r\n        const update = () => {\r\n            const subtitles = subtitleListRef.current || [];\r\n            const subtitleRefs = subtitleRefsRef.current;\r\n            const length = lengthRef.current;\r\n            const clock = clockRef.current;\r\n            const progress = clock.progress(lengthRef.current);\r\n\r\n            let smallestIndex = Number.MAX_SAFE_INTEGER;\r\n            let fallbackIndex = -1;\r\n            const currentSubtitleIndexes: { [index: number]: boolean } = {};\r\n\r\n            for (let i = subtitles.length - 1; i >= 0; --i) {\r\n                const s = subtitles[i];\r\n                const start = s.start / length;\r\n                const end = s.end / length;\r\n\r\n                if (progress >= start) {\r\n                    if (progress < end) {\r\n                        smallestIndex = i < smallestIndex ? i : smallestIndex;\r\n                        currentSubtitleIndexes[i] = true;\r\n                    }\r\n\r\n                    if (fallbackIndex === -1) {\r\n                        fallbackIndex = i;\r\n                    }\r\n                } else if (smallestIndex !== Number.MAX_SAFE_INTEGER) {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            // Attempt to highlight *something* if no subtitles were found at the current timestamp\r\n            if (smallestIndex === Number.MAX_SAFE_INTEGER && fallbackIndex !== -1) {\r\n                currentSubtitleIndexes[fallbackIndex] = true;\r\n            }\r\n\r\n            if (!keysAreEqual(currentSubtitleIndexes, selectedSubtitleIndexesRef.current)) {\r\n                selectedSubtitleIndexesRef.current = currentSubtitleIndexes;\r\n                setSelectedSubtitleIndexes(currentSubtitleIndexes);\r\n\r\n                if (smallestIndex !== Number.MAX_SAFE_INTEGER) {\r\n                    const scrollToSubtitleRef = subtitleRefs[smallestIndex];\r\n                    const allowScroll = !hiddenRef.current && Date.now() - lastScrollTimestampRef.current > 5000;\r\n\r\n                    if (scrollToSubtitleRef?.current && allowScroll) {\r\n                        scrollToSubtitleRef.current.scrollIntoView({\r\n                            block: 'center',\r\n                            inline: 'nearest',\r\n                            behavior: 'smooth',\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n            requestAnimationRef.current = requestAnimationFrame(update);\r\n        };\r\n\r\n        requestAnimationRef.current = requestAnimationFrame(update);\r\n\r\n        return () => {\r\n            if (requestAnimationRef.current !== undefined) {\r\n                cancelAnimationFrame(requestAnimationRef.current);\r\n            }\r\n        };\r\n    }, []);\r\n\r\n    const scrollToCurrentSubtitle = useCallback(() => {\r\n        const selectedSubtitleIndexes = selectedSubtitleIndexesRef.current;\r\n\r\n        if (!selectedSubtitleIndexes) {\r\n            return;\r\n        }\r\n\r\n        const indexes = Object.keys(selectedSubtitleIndexes);\r\n\r\n        if (indexes.length === 0) {\r\n            return;\r\n        }\r\n\r\n        const scrollToSubtitleRef = subtitleRefs[Number(indexes[0])];\r\n\r\n        scrollToSubtitleRef?.current?.scrollIntoView({\r\n            block: 'center',\r\n            inline: 'nearest',\r\n            behavior: 'smooth',\r\n        });\r\n    }, [subtitleRefs]);\r\n\r\n    useEffect(() => {\r\n        if (hidden) {\r\n            return;\r\n        }\r\n\r\n        function scrollIfVisible() {\r\n            if (document.visibilityState === 'visible') {\r\n                scrollToCurrentSubtitle();\r\n            }\r\n        }\r\n\r\n        document.addEventListener('visibilitychange', scrollIfVisible);\r\n\r\n        return () => document.removeEventListener('visibilitychange', scrollIfVisible);\r\n    }, [hidden, selectedSubtitleIndexes, subtitleRefs, scrollToCurrentSubtitle]);\r\n\r\n    useEffect(() => {\r\n        if (!hidden) {\r\n            scrollToCurrentSubtitle();\r\n        }\r\n    }, [hidden, scrollToCurrentSubtitle]);\r\n\r\n    useEffect(() => {\r\n        if (hiddenRef.current) {\r\n            return;\r\n        }\r\n\r\n        const subtitleRefs = subtitleRefsRef.current;\r\n\r\n        if (!subtitleRefs || subtitleRefs.length === 0) {\r\n            return;\r\n        }\r\n\r\n        const firstSubtitleRef = subtitleRefs[0];\r\n        firstSubtitleRef?.current?.scrollIntoView({\r\n            block: 'center',\r\n            inline: 'nearest',\r\n            behavior: 'smooth',\r\n        });\r\n    }, [lastJumpToTopTimestamp]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindAdjustOffset(\r\n            (event, offset) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                onOffsetChange(offset);\r\n            },\r\n            () => disableKeyEvents,\r\n            () => subtitles\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [onOffsetChange, disableKeyEvents, subtitles]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindOffsetToSubtitle(\r\n            (event, offset) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                onOffsetChange(offset);\r\n            },\r\n            () => disableKeyEvents,\r\n            () => clock.time(length),\r\n            () => subtitles\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [onOffsetChange, disableKeyEvents, clock, subtitles, length]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindSeekToSubtitle(\r\n            (event, subtitle) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                onSeek(subtitle.start, false);\r\n            },\r\n            () => disableKeyEvents,\r\n            () => clock.time(length),\r\n            () => subtitles\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [onSeek, subtitles, disableKeyEvents, clock, length]);\r\n\r\n    useEffect(() => {\r\n        function handleScroll() {\r\n            lastScrollTimestampRef.current = Date.now();\r\n        }\r\n\r\n        const table = containerRef.current;\r\n        table?.addEventListener('wheel', handleScroll);\r\n\r\n        return () => table?.removeEventListener('wheel', handleScroll);\r\n    }, [containerRef, lastScrollTimestampRef]);\r\n\r\n    useEffect(() => {\r\n        if (hidden) {\r\n            return;\r\n        }\r\n\r\n        if (!jumpToSubtitle || !subtitles) {\r\n            return;\r\n        }\r\n\r\n        let jumpToIndex = -1;\r\n        let i = 0;\r\n\r\n        for (let s of subtitles) {\r\n            if (s.originalStart === jumpToSubtitle.originalStart && s.text === jumpToSubtitle.text) {\r\n                jumpToIndex = i;\r\n                break;\r\n            }\r\n\r\n            ++i;\r\n        }\r\n\r\n        if (jumpToIndex !== -1) {\r\n            subtitleRefs[jumpToIndex]?.current?.scrollIntoView({\r\n                block: 'center',\r\n                inline: 'nearest',\r\n                behavior: 'smooth',\r\n            });\r\n        }\r\n    }, [hidden, jumpToSubtitle, subtitles, subtitleRefs]);\r\n\r\n    const calculateSurroundingSubtitlesForIndex = useCallback(\r\n        (index) => {\r\n            if (!selectedSubtitleIndexesRef.current || !subtitles) {\r\n                return [];\r\n            }\r\n\r\n            return surroundingSubtitles(\r\n                subtitles,\r\n                index,\r\n                settingsProvider.surroundingSubtitlesCountRadius,\r\n                settingsProvider.surroundingSubtitlesTimeRadius\r\n            );\r\n        },\r\n        [subtitles, settingsProvider.surroundingSubtitlesCountRadius, settingsProvider.surroundingSubtitlesTimeRadius]\r\n    );\r\n\r\n    const calculateSurroundingSubtitles = useCallback(() => {\r\n        if (!selectedSubtitleIndexesRef.current) {\r\n            return [];\r\n        }\r\n        const index = Math.min(...Object.keys(selectedSubtitleIndexesRef.current).map((i) => Number(i)));\r\n        return calculateSurroundingSubtitlesForIndex(index);\r\n    }, [calculateSurroundingSubtitlesForIndex]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindCopy(\r\n            (event, subtitle) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                onCopy(subtitle, calculateSurroundingSubtitles(), false);\r\n            },\r\n            () => disableKeyEventsRef.current ?? false,\r\n            () => {\r\n                const subtitleIndexes = Object.keys(selectedSubtitleIndexesRef.current).map((i) => Number(i));\r\n\r\n                if (!subtitles || !subtitleIndexes || subtitleIndexes.length === 0) {\r\n                    return undefined;\r\n                }\r\n\r\n                const index = Math.min(...subtitleIndexes);\r\n                return subtitles[index];\r\n            }\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [subtitles, calculateSurroundingSubtitles, onCopy]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindToggleSubtitleTrackInList(\r\n            (event, track) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                onToggleSubtitleTrack(track);\r\n            },\r\n            () => {},\r\n            () => disableKeyEvents\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [disableKeyEvents, onToggleSubtitleTrack]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindAnkiExport(\r\n            (event) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                const subtitleIndexes = Object.keys(selectedSubtitleIndexesRef.current).map((i) => Number(i));\r\n\r\n                if (subtitles && subtitleIndexes && subtitleIndexes.length > 0) {\r\n                    const index = Math.min(...subtitleIndexes);\r\n                    onCopy(subtitles[index], calculateSurroundingSubtitlesForIndex(index), true);\r\n                }\r\n\r\n                onAnkiDialogRequest();\r\n            },\r\n            () => false\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [onAnkiDialogRequest, onCopy, subtitles, calculateSurroundingSubtitlesForIndex]);\r\n\r\n    const handleClick = useCallback(\r\n        (index: number) => {\r\n            if (!subtitles) {\r\n                return;\r\n            }\r\n\r\n            const selectedSubtitleIndexes = selectedSubtitleIndexesRef.current || {};\r\n            onSeek(subtitles[index].start, !playingRef.current && index in selectedSubtitleIndexes);\r\n        },\r\n        [subtitles, onSeek]\r\n    );\r\n\r\n    const handleCopy = useCallback(\r\n        (e: React.MouseEvent<HTMLButtonElement, MouseEvent>, index: number) => {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n\r\n            if (!subtitles) {\r\n                return;\r\n            }\r\n\r\n            onCopy(subtitles[index], calculateSurroundingSubtitlesForIndex(index), false);\r\n        },\r\n        [subtitles, calculateSurroundingSubtitlesForIndex, onCopy]\r\n    );\r\n\r\n    let subtitleTable = null;\r\n\r\n    if (!subtitles || subtitles.length === 0) {\r\n        if (!loading && displayHelp) {\r\n            subtitleTable = !loading && displayHelp && (\r\n                <div className={classes.noSubtitles}>\r\n                    <Typography variant=\"h6\">{displayHelp}</Typography>\r\n                </div>\r\n            );\r\n        } else if (subtitles && subtitles.length === 0) {\r\n            subtitleTable = (\r\n                <div className={classes.noSubtitles}>\r\n                    <Typography variant=\"h6\">No subtitles</Typography>\r\n                </div>\r\n            );\r\n        }\r\n    } else {\r\n        subtitleTable = (\r\n            <TableContainer className={classes.table}>\r\n                <Table>\r\n                    <TableBody>\r\n                        {subtitles.map((s: SubtitleModel, index: number) => {\r\n                            const selected = index in selectedSubtitleIndexes;\r\n\r\n                            return (\r\n                                <SubtitleRow\r\n                                    key={index}\r\n                                    index={index}\r\n                                    compressed={compressed}\r\n                                    selected={selected}\r\n                                    disabled={disabledSubtitleTracks[s.track]}\r\n                                    subtitle={subtitles[index]}\r\n                                    subtitleRef={subtitleRefs[index]}\r\n                                    onClickSubtitle={handleClick}\r\n                                    onCopySubtitle={handleCopy}\r\n                                />\r\n                            );\r\n                        })}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Paper square elevation={0} ref={containerRef} className={classes.container}>\r\n            {subtitleTable}\r\n        </Paper>\r\n    );\r\n}\r\n","import {\r\n    AnkiDialogRequestFromVideoMessage,\r\n    AnkiSettings,\r\n    AnkiSettingsToVideoMessage,\r\n    AudioModel,\r\n    AudioTrackModel,\r\n    AudioTrackSelectedFromVideoMessage,\r\n    AudioTrackSelectedToVideoMessage,\r\n    CondensedModeToggleToVideoMessage,\r\n    CopyMessage,\r\n    CurrentTimeFromVideoMessage,\r\n    CurrentTimeToVideoMessage,\r\n    FinishedAnkiDialogRequestToVideoMessage,\r\n    HideSubtitlePlayerToggleToVideoMessage,\r\n    ImageModel,\r\n    MiscSettings,\r\n    MiscSettingsToVideoMessage,\r\n    OffsetFromVideoMessage,\r\n    PauseFromVideoMessage,\r\n    PlayFromVideoMessage,\r\n    ReadyFromVideoMessage,\r\n    ReadyStateFromVideoMessage,\r\n    ReadyToVideoMessage,\r\n    SubtitleModel,\r\n    SubtitleSettings,\r\n    SubtitleSettingsToVideoMessage,\r\n    SubtitlesToVideoMessage,\r\n    ToggleSubtitleTrackInListFromVideoMessage,\r\n} from '@project/common';\r\nimport { VideoProtocol } from './VideoProtocol';\r\n\r\nexport default class VideoChannel {\r\n    private readonly protocol: VideoProtocol;\r\n    private time: number;\r\n    private isReady: boolean;\r\n    private readyCallbacks: ((paused: boolean) => void)[];\r\n    private playCallbacks: ((echo: boolean) => void)[];\r\n    private pauseCallbacks: ((echo: boolean) => void)[];\r\n    private audioTrackSelectedCallbacks: ((audioTrack: string) => void)[];\r\n    private currentTimeCallbacks: ((currentTime: number, echo: boolean) => void)[];\r\n    private exitCallbacks: (() => void)[];\r\n    private offsetCallbacks: ((offset: number) => void)[];\r\n    private popOutToggleCallbacks: (() => void)[];\r\n    private copyCallbacks: ((\r\n        subtitle: SubtitleModel,\r\n        surroundingSubtitles: SubtitleModel[],\r\n        audio: AudioModel | undefined,\r\n        image: ImageModel | undefined,\r\n        url: string | undefined,\r\n        preventDuplicate: boolean,\r\n        id: string | undefined\r\n    ) => void)[];\r\n    private condensedModeToggleCallbacks: (() => void)[];\r\n    private hideSubtitlePlayerToggleCallbacks: (() => void)[];\r\n    private ankiDialogRequestCallbacks: ((forwardToVideo: boolean) => void)[];\r\n    private toggleSubtitleTrackInListCallbacks: ((track: number) => void)[];\r\n\r\n    readyState: number;\r\n    oncanplay: ((ev: Event) => void) | null = null;\r\n    audioTracks?: AudioTrackModel[];\r\n    selectedAudioTrack?: string;\r\n    duration: number;\r\n\r\n    constructor(protocol: VideoProtocol) {\r\n        this.protocol = protocol;\r\n        this.time = 0;\r\n        this.duration = 0;\r\n        this.isReady = false;\r\n        this.readyState = 0;\r\n        this.selectedAudioTrack = undefined;\r\n        this.readyCallbacks = [];\r\n        this.playCallbacks = [];\r\n        this.pauseCallbacks = [];\r\n        this.currentTimeCallbacks = [];\r\n        this.audioTrackSelectedCallbacks = [];\r\n        this.exitCallbacks = [];\r\n        this.offsetCallbacks = [];\r\n        this.popOutToggleCallbacks = [];\r\n        this.copyCallbacks = [];\r\n        this.condensedModeToggleCallbacks = [];\r\n        this.hideSubtitlePlayerToggleCallbacks = [];\r\n        this.ankiDialogRequestCallbacks = [];\r\n        this.toggleSubtitleTrackInListCallbacks = [];\r\n\r\n        const that = this;\r\n\r\n        this.protocol.onMessage = (event) => {\r\n            switch (event.data.command) {\r\n                case 'ready':\r\n                    const readyMessage = event.data as ReadyFromVideoMessage;\r\n\r\n                    that.duration = readyMessage.duration;\r\n                    that.isReady = true;\r\n                    that.audioTracks = readyMessage.audioTracks;\r\n                    that.selectedAudioTrack = readyMessage.selectedAudioTrack;\r\n                    that.readyState = 4;\r\n                    that.time = readyMessage.currentTime;\r\n\r\n                    for (let callback of that.readyCallbacks) {\r\n                        callback(readyMessage.paused);\r\n                    }\r\n                    break;\r\n                case 'readyState':\r\n                    const readyStateMessage = event.data as ReadyStateFromVideoMessage;\r\n\r\n                    that.readyState = readyStateMessage.value;\r\n                    if (that.readyState === 4) {\r\n                        that.oncanplay?.(new Event('canplay'));\r\n                    }\r\n                    break;\r\n                case 'play':\r\n                    const playMessage = event.data as PlayFromVideoMessage;\r\n\r\n                    for (let callback of that.playCallbacks) {\r\n                        callback(playMessage.echo);\r\n                    }\r\n                    break;\r\n                case 'pause':\r\n                    const pauseMessage = event.data as PauseFromVideoMessage;\r\n\r\n                    for (let callback of that.pauseCallbacks) {\r\n                        callback(pauseMessage.echo);\r\n                    }\r\n                    break;\r\n                case 'audioTrackSelected':\r\n                    const audioTrackSelectedMessage = event.data as AudioTrackSelectedFromVideoMessage;\r\n\r\n                    for (let callback of that.audioTrackSelectedCallbacks) {\r\n                        that.selectedAudioTrack = audioTrackSelectedMessage.id;\r\n                        callback(audioTrackSelectedMessage.id);\r\n                    }\r\n                    break;\r\n                case 'currentTime':\r\n                    const currentTimeMessage = event.data as CurrentTimeFromVideoMessage;\r\n\r\n                    for (let callback of that.currentTimeCallbacks) {\r\n                        callback(currentTimeMessage.value, currentTimeMessage.echo);\r\n                    }\r\n                    break;\r\n                case 'exit':\r\n                    for (let callback of that.exitCallbacks) {\r\n                        callback();\r\n                    }\r\n                    break;\r\n                case 'offset':\r\n                    const offsetMessage = event.data as OffsetFromVideoMessage;\r\n\r\n                    for (let callback of that.offsetCallbacks) {\r\n                        callback(offsetMessage.value);\r\n                    }\r\n                    break;\r\n                case 'popOutToggle':\r\n                    for (let callback of that.popOutToggleCallbacks) {\r\n                        callback();\r\n                    }\r\n                    break;\r\n                case 'copy':\r\n                    for (let callback of that.copyCallbacks) {\r\n                        const copyMessage = event.data as CopyMessage;\r\n\r\n                        callback(\r\n                            copyMessage.subtitle,\r\n                            copyMessage.surroundingSubtitles,\r\n                            copyMessage.audio,\r\n                            copyMessage.image,\r\n                            copyMessage.url,\r\n                            copyMessage.preventDuplicate ?? false,\r\n                            copyMessage.id\r\n                        );\r\n                    }\r\n                    break;\r\n                case 'condensedModeToggle':\r\n                    for (let callback of that.condensedModeToggleCallbacks) {\r\n                        callback();\r\n                    }\r\n                    break;\r\n                case 'hideSubtitlePlayerToggle':\r\n                    for (let callback of that.hideSubtitlePlayerToggleCallbacks) {\r\n                        callback();\r\n                    }\r\n                    break;\r\n                case 'sync':\r\n                    // ignore\r\n                    break;\r\n                case 'syncv2':\r\n                    // ignore\r\n                    break;\r\n                case 'ankiDialogRequest':\r\n                    const ankiDialogRequestMessage = event.data as AnkiDialogRequestFromVideoMessage;\r\n\r\n                    for (let callback of that.ankiDialogRequestCallbacks) {\r\n                        callback(ankiDialogRequestMessage.forwardToVideo);\r\n                    }\r\n                    break;\r\n                case 'toggleSubtitleTrackInList':\r\n                    const toggleSubtitleTrackInListMessage = event.data as ToggleSubtitleTrackInListFromVideoMessage;\r\n\r\n                    for (const callback of that.toggleSubtitleTrackInListCallbacks) {\r\n                        callback(toggleSubtitleTrackInListMessage.track);\r\n                    }\r\n                    break;\r\n                case 'playbackRate':\r\n                    // ignore for now\r\n                    break;\r\n                default:\r\n                    console.error('Unrecognized event ' + event.data.command);\r\n            }\r\n        };\r\n    }\r\n\r\n    get currentTime() {\r\n        return this.time;\r\n    }\r\n\r\n    set currentTime(value: number) {\r\n        this.time = value;\r\n        this.readyState = 3;\r\n        const message: CurrentTimeToVideoMessage = { command: 'currentTime', value: this.time };\r\n        this.protocol.postMessage(message);\r\n    }\r\n\r\n    onReady(callback: (paused: boolean) => void) {\r\n        if (this.isReady) {\r\n            callback(false);\r\n        }\r\n        this.readyCallbacks.push(callback);\r\n    }\r\n\r\n    onPlay(callback: (echo: boolean) => void) {\r\n        this.playCallbacks.push(callback);\r\n    }\r\n\r\n    onPause(callback: (echo: boolean) => void) {\r\n        this.pauseCallbacks.push(callback);\r\n    }\r\n\r\n    onCurrentTime(callback: (currentTime: number, echo: boolean) => void) {\r\n        this.currentTimeCallbacks.push(callback);\r\n    }\r\n\r\n    onAudioTrackSelected(callback: (id: string) => void) {\r\n        this.audioTrackSelectedCallbacks.push(callback);\r\n    }\r\n\r\n    onExit(callback: () => void) {\r\n        this.exitCallbacks.push(callback);\r\n    }\r\n\r\n    onOffset(callback: (offset: number) => void) {\r\n        this.offsetCallbacks.push(callback);\r\n    }\r\n\r\n    onPopOutToggle(callback: () => void) {\r\n        this.popOutToggleCallbacks.push(callback);\r\n    }\r\n\r\n    onCopy(\r\n        callback: (\r\n            subtitle: SubtitleModel,\r\n            surroundingSubtitles: SubtitleModel[],\r\n            audio: AudioModel | undefined,\r\n            image: ImageModel | undefined,\r\n            url: string | undefined,\r\n            preventDuplicate: boolean,\r\n            id: string | undefined\r\n        ) => void\r\n    ) {\r\n        this.copyCallbacks.push(callback);\r\n    }\r\n\r\n    onCondensedModeToggle(callback: () => void) {\r\n        this.condensedModeToggleCallbacks.push(callback);\r\n    }\r\n\r\n    onHideSubtitlePlayerToggle(callback: () => void) {\r\n        this.hideSubtitlePlayerToggleCallbacks.push(callback);\r\n    }\r\n\r\n    onAnkiDialogRequest(callback: (forwardToVideo: boolean) => void) {\r\n        this.ankiDialogRequestCallbacks.push(callback);\r\n    }\r\n\r\n    onToggleSubtitleTrackInList(callback: (track: number) => void) {\r\n        this.toggleSubtitleTrackInListCallbacks.push(callback);\r\n    }\r\n\r\n    ready(duration: number) {\r\n        const message: ReadyToVideoMessage = { command: 'ready', duration: duration };\r\n        this.protocol.postMessage(message);\r\n    }\r\n\r\n    init() {\r\n        this.protocol.postMessage({ command: 'init' });\r\n    }\r\n\r\n    // Return a promise to implement the analogous HTMLMediaElement method\r\n    play(): Promise<void> {\r\n        this.protocol.postMessage({ command: 'play' });\r\n        return new Promise((resolve, reject) => resolve());\r\n    }\r\n\r\n    pause() {\r\n        this.protocol.postMessage({ command: 'pause' });\r\n    }\r\n\r\n    audioTrackSelected(id: string) {\r\n        const message: AudioTrackSelectedToVideoMessage = { command: 'audioTrackSelected', id: id };\r\n        this.protocol.postMessage(message);\r\n    }\r\n\r\n    subtitles(subtitles: SubtitleModel[], subtitleFileNames: string[]) {\r\n        this.protocol.postMessage({\r\n            command: 'subtitles',\r\n            value: subtitles,\r\n            name: subtitleFileNames.length > 0 ? subtitleFileNames[0] : null,\r\n            names: subtitleFileNames,\r\n        } as SubtitlesToVideoMessage);\r\n    }\r\n\r\n    subtitleSettings(settings: SubtitleSettings) {\r\n        const message: SubtitleSettingsToVideoMessage = { command: 'subtitleSettings', value: settings };\r\n        this.protocol.postMessage(message);\r\n    }\r\n\r\n    condensedModeToggle(enabled: boolean) {\r\n        const message: CondensedModeToggleToVideoMessage = {\r\n            command: 'condensedModeToggle',\r\n            value: enabled,\r\n        };\r\n        this.protocol.postMessage(message);\r\n    }\r\n\r\n    hideSubtitlePlayerToggle(hidden: boolean) {\r\n        const message: HideSubtitlePlayerToggleToVideoMessage = {\r\n            command: 'hideSubtitlePlayerToggle',\r\n            value: hidden,\r\n        };\r\n        this.protocol.postMessage(message);\r\n    }\r\n\r\n    ankiDialogRequest() {\r\n        this.protocol.postMessage({ command: 'ankiDialogRequest' });\r\n    }\r\n\r\n    finishedAnkiDialogRequest(resume: boolean) {\r\n        const message: FinishedAnkiDialogRequestToVideoMessage = {\r\n            command: 'finishedAnkiDialogRequest',\r\n            resume: resume,\r\n        };\r\n        this.protocol.postMessage(message);\r\n    }\r\n\r\n    ankiSettings(settings: AnkiSettings) {\r\n        const message: AnkiSettingsToVideoMessage = { command: 'ankiSettings', value: settings };\r\n        this.protocol.postMessage(message);\r\n    }\r\n\r\n    miscSettings(settings: MiscSettings) {\r\n        const message: MiscSettingsToVideoMessage = { command: 'miscSettings', value: settings };\r\n        this.protocol.postMessage(message);\r\n    }\r\n\r\n    close() {\r\n        this.protocol.postMessage({ command: 'close' });\r\n        this.protocol.close();\r\n        this.readyCallbacks = [];\r\n        this.playCallbacks = [];\r\n        this.pauseCallbacks = [];\r\n        this.currentTimeCallbacks = [];\r\n        this.audioTrackSelectedCallbacks = [];\r\n        this.exitCallbacks = [];\r\n        this.offsetCallbacks = [];\r\n        this.popOutToggleCallbacks = [];\r\n        this.copyCallbacks = [];\r\n        this.condensedModeToggleCallbacks = [];\r\n        this.hideSubtitlePlayerToggleCallbacks = [];\r\n        this.ankiDialogRequestCallbacks = [];\r\n        this.toggleSubtitleTrackInListCallbacks = [];\r\n    }\r\n}\r\n","import { useEffect, useState, useMemo, useCallback, useRef, MutableRefObject } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport {\r\n    AsbplayerSettingsProvider,\r\n    AudioModel,\r\n    AudioTrackModel,\r\n    ImageModel,\r\n    KeyBindings,\r\n    mockSurroundingSubtitles,\r\n    SubtitleModel,\r\n    VideoTabModel,\r\n} from '@project/common';\r\nimport { timeDurationDisplay } from '../services/Util';\r\nimport BroadcastChannelVideoProtocol from '../services/BroadcastChannelVideoProtocol';\r\nimport ChromeTabVideoProtocol from '../services/ChromeTabVideoProtocol';\r\nimport Clock from '../services/Clock';\r\nimport Controls, { Point } from './Controls';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport MediaAdapter, { MediaElement } from '../services/MediaAdapter';\r\nimport SubtitlePlayer, { DisplaySubtitleModel } from './SubtitlePlayer';\r\nimport VideoChannel from '../services/VideoChannel';\r\nimport ChromeExtension from '../services/ChromeExtension';\r\nimport SubtitleReader from '../services/SubtitleReader';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        height: 'calc(100vh - 64px)',\r\n        position: 'relative',\r\n        overflowX: 'hidden',\r\n    },\r\n    container: {\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n    videoFrame: {\r\n        width: '100%',\r\n        height: '100%',\r\n        border: 0,\r\n        display: 'block'\r\n    },\r\n});\r\n\r\nfunction trackLength(\r\n    audioRef: MutableRefObject<HTMLAudioElement | null>,\r\n    videoRef: MutableRefObject<MediaElement | undefined>,\r\n    subtitles: SubtitleModel[] | undefined,\r\n    useOffset?: boolean\r\n) {\r\n    let subtitlesLength;\r\n    if (subtitles && subtitles.length > 0) {\r\n        if (useOffset) {\r\n            subtitlesLength = subtitles[subtitles.length - 1].end;\r\n        } else {\r\n            subtitlesLength = subtitles[subtitles.length - 1].originalEnd;\r\n        }\r\n    } else {\r\n        subtitlesLength = 0;\r\n    }\r\n\r\n    const audioLength = audioRef.current && audioRef.current.duration ? 1000 * audioRef.current.duration : 0;\r\n\r\n    const videoLength = videoRef.current && videoRef.current.duration ? 1000 * videoRef.current.duration : 0;\r\n\r\n    return Math.max(videoLength, Math.max(subtitlesLength, audioLength));\r\n}\r\n\r\nexport interface MediaSources {\r\n    subtitleFiles: File[];\r\n    audioFile?: File;\r\n    audioFileUrl?: string;\r\n    videoFile?: File;\r\n    videoFileUrl?: string;\r\n}\r\n\r\nexport interface AnkiDialogFinishedRequest {\r\n    resume: boolean;\r\n    timestamp: number;\r\n}\r\n\r\ninterface PlayerProps {\r\n    sources: MediaSources;\r\n    subtitleReader: SubtitleReader;\r\n    settingsProvider: AsbplayerSettingsProvider;\r\n    extension: ChromeExtension;\r\n    videoFrameRef: MutableRefObject<HTMLIFrameElement | null>;\r\n    drawerOpen: boolean;\r\n    tab?: VideoTabModel;\r\n    availableTabs: VideoTabModel[];\r\n    ankiDialogRequestToVideo?: number;\r\n    ankiDialogRequested: boolean;\r\n    ankiDialogFinishedRequest: AnkiDialogFinishedRequest;\r\n    onError: (error: string) => void;\r\n    onUnloadAudio: (url: string) => void;\r\n    onUnloadVideo: (url: string) => void;\r\n    onCopy: (\r\n        subtitle: SubtitleModel,\r\n        surroundingSubtitles: SubtitleModel[],\r\n        audioFile: File | undefined,\r\n        videoFile: File | undefined,\r\n        subtitleFile: File | undefined,\r\n        audioTrack: string | undefined,\r\n        audio: AudioModel | undefined,\r\n        image: ImageModel | undefined,\r\n        url: string | undefined,\r\n        preventDuplicate: boolean | undefined,\r\n        id: string | undefined\r\n    ) => void;\r\n    onLoaded: () => void;\r\n    onTabSelected: (tab: VideoTabModel) => void;\r\n    onAnkiDialogRequest: (forwardToVideo?: boolean) => void;\r\n    disableKeyEvents: boolean;\r\n    jumpToSubtitle?: SubtitleModel;\r\n}\r\n\r\nexport default function Player({\r\n    sources: { subtitleFiles, audioFile, audioFileUrl, videoFile, videoFileUrl },\r\n    subtitleReader,\r\n    settingsProvider,\r\n    extension,\r\n    videoFrameRef,\r\n    drawerOpen,\r\n    tab,\r\n    availableTabs,\r\n    ankiDialogRequestToVideo,\r\n    ankiDialogRequested,\r\n    ankiDialogFinishedRequest,\r\n    onError,\r\n    onUnloadAudio,\r\n    onUnloadVideo,\r\n    onCopy,\r\n    onLoaded,\r\n    onTabSelected,\r\n    onAnkiDialogRequest,\r\n    disableKeyEvents,\r\n    jumpToSubtitle,\r\n}: PlayerProps) {\r\n    const [subtitles, setSubtitles] = useState<DisplaySubtitleModel[]>();\r\n    const subtitlesRef = useRef<SubtitleModel[]>();\r\n    subtitlesRef.current = subtitles;\r\n    const [loadingSubtitles, setLoadingSubtitles] = useState<boolean>(false);\r\n    const [playing, setPlaying] = useState<boolean>(false);\r\n    const [lastJumpToTopTimestamp, setLastJumpToTopTimestamp] = useState<number>(0);\r\n    const [offset, setOffset] = useState<number>(0);\r\n    const playingRef = useRef<boolean>();\r\n    playingRef.current = playing;\r\n    const [, updateState] = useState<any>();\r\n    const [audioTracks, setAudioTracks] = useState<AudioTrackModel[]>();\r\n    const [selectedAudioTrack, setSelectedAudioTrack] = useState<string>();\r\n    const [channelId, setChannelId] = useState<string>();\r\n    const [videoPopOut, setVideoPopOut] = useState<boolean>(false);\r\n    const [, setResumeOnFinishedAnkiDialogRequest] = useState<boolean>(false);\r\n    const [hideSubtitlePlayer, setHideSubtitlePlayer] = useState<boolean>(false);\r\n    const hideSubtitlePlayerRef = useRef<boolean>();\r\n    hideSubtitlePlayerRef.current = hideSubtitlePlayer;\r\n    const [disabledSubtitleTracks, setDisabledSubtitleTracks] = useState<{ [track: number]: boolean }>({});\r\n    const [condensedModeEnabled, setCondensedModeEnabled] = useState<boolean>(false);\r\n    const condensedModeEnabledRef = useRef<boolean>();\r\n    condensedModeEnabledRef.current = condensedModeEnabled;\r\n    const forceUpdate = useCallback(() => updateState({}), []);\r\n    const mousePositionRef = useRef<Point>({ x: 0, y: 0 });\r\n    const audioRef = useRef<HTMLAudioElement>(null);\r\n    const videoRef = useRef<MediaElement>();\r\n    const mediaAdapter = useMemo(() => {\r\n        if (audioFileUrl) {\r\n            return new MediaAdapter(audioRef);\r\n        } else if (videoFileUrl || tab) {\r\n            return new MediaAdapter(videoRef);\r\n        }\r\n\r\n        return new MediaAdapter({ current: null });\r\n    }, [audioFileUrl, videoFileUrl, tab]);\r\n    const clock = useMemo<Clock>(() => new Clock(), []);\r\n    const classes = useStyles();\r\n    const lengthRef = useRef<number>(0);\r\n    lengthRef.current = trackLength(audioRef, videoRef, subtitles, true);\r\n\r\n    const seek = useCallback(\r\n        async (time, clock, forwardToMedia) => {\r\n            clock.setTime(time);\r\n            forceUpdate();\r\n\r\n            if (forwardToMedia) {\r\n                await mediaAdapter.seek(time / 1000);\r\n            }\r\n        },\r\n        [forceUpdate, mediaAdapter]\r\n    );\r\n\r\n    const applyOffset = useCallback(\r\n        (offset, forwardToVideo) => {\r\n            setOffset(offset);\r\n\r\n            setSubtitles((subtitles) => {\r\n                if (!subtitles) {\r\n                    return;\r\n                }\r\n\r\n                const length = subtitles.length > 0 ? subtitles[subtitles.length - 1].end + offset : 0;\r\n\r\n                const newSubtitles = subtitles.map((s) => ({\r\n                    text: s.text,\r\n                    start: s.originalStart + offset,\r\n                    originalStart: s.originalStart,\r\n                    end: s.originalEnd + offset,\r\n                    originalEnd: s.originalEnd,\r\n                    displayTime: timeDurationDisplay(s.originalStart + offset, length),\r\n                    track: s.track,\r\n                }));\r\n\r\n                if (forwardToVideo) {\r\n                    if (videoRef.current instanceof VideoChannel) {\r\n                        videoRef.current.subtitles(\r\n                            newSubtitles,\r\n                            subtitleFiles.map((f) => f.name)\r\n                        );\r\n                    }\r\n                }\r\n\r\n                return newSubtitles;\r\n            });\r\n        },\r\n        [subtitleFiles]\r\n    );\r\n\r\n    useEffect(() => {\r\n        let channel: VideoChannel | undefined = undefined;\r\n        let channelClosed = false;\r\n\r\n        async function init() {\r\n            if (videoRef.current instanceof VideoChannel) {\r\n                videoRef.current.close();\r\n            }\r\n            videoRef.current = undefined;\r\n            clock.setTime(0);\r\n            clock.stop();\r\n            setOffset(0);\r\n            setPlaying(false);\r\n            setAudioTracks(undefined);\r\n            setSelectedAudioTrack(undefined);\r\n            setCondensedModeEnabled(false);\r\n            if (audioRef.current) {\r\n                audioRef.current.currentTime = 0;\r\n                audioRef.current.pause();\r\n            }\r\n\r\n            let subtitles;\r\n\r\n            if (subtitleFiles.length > 0) {\r\n                setLoadingSubtitles(true);\r\n\r\n                try {\r\n                    const nodes = await subtitleReader.subtitles(subtitleFiles);\r\n                    const length = nodes.length > 0 ? nodes[nodes.length - 1].end : 0;\r\n                    subtitles = nodes.map((s) => ({\r\n                        text: s.text,\r\n                        start: s.start,\r\n                        originalStart: s.start,\r\n                        end: s.end,\r\n                        originalEnd: s.end,\r\n                        displayTime: timeDurationDisplay(s.start, length),\r\n                        track: s.track,\r\n                    }));\r\n\r\n                    setSubtitles(subtitles);\r\n                    setLastJumpToTopTimestamp(Date.now());\r\n                } catch (e) {\r\n                    if (e instanceof Error) {\r\n                        onError(e.message);\r\n                    } else {\r\n                        onError(String(e));\r\n                    }\r\n                } finally {\r\n                    setLoadingSubtitles(false);\r\n                }\r\n            } else {\r\n                subtitles = null;\r\n            }\r\n\r\n            if (audioFileUrl) {\r\n                await mediaAdapter.onReady();\r\n                forceUpdate();\r\n            } else if (videoFileUrl || tab) {\r\n                if (channelClosed) {\r\n                    return;\r\n                }\r\n\r\n                if (videoFileUrl) {\r\n                    const channelId = uuidv4();\r\n                    channel = new VideoChannel(new BroadcastChannelVideoProtocol(channelId));\r\n                    setChannelId(channelId);\r\n                } else if (tab) {\r\n                    channel = new VideoChannel(new ChromeTabVideoProtocol(tab.id, tab.src, extension));\r\n                    channel.init();\r\n                } else {\r\n                    // Not possible\r\n                    // But throw error so typescript recognizes channel as defined\r\n                    throw new Error('Unreachable code');\r\n                }\r\n\r\n                videoRef.current = channel;\r\n                let subscribed = false;\r\n\r\n                channel.onExit(() => videoFileUrl && onUnloadVideo(videoFileUrl));\r\n                channel.onPopOutToggle(() => setVideoPopOut((popOut) => !popOut));\r\n                channel.onHideSubtitlePlayerToggle(() => {\r\n                    setHideSubtitlePlayer((hidden) => {\r\n                        channel?.hideSubtitlePlayerToggle(!hidden);\r\n                        return !hidden;\r\n                    });\r\n                });\r\n                channel.onReady((paused) => {\r\n                    lengthRef.current = trackLength(audioRef, videoRef, subtitlesRef.current);\r\n                    channel?.ready(lengthRef.current);\r\n\r\n                    if (subtitlesRef.current) {\r\n                        channel?.subtitleSettings(settingsProvider.subtitleSettings);\r\n                        channel?.subtitles(\r\n                            subtitlesRef.current,\r\n                            subtitleFiles.map((f) => f.name)\r\n                        );\r\n                    }\r\n\r\n                    channel?.ankiSettings(settingsProvider.ankiSettings);\r\n                    channel?.miscSettings(settingsProvider.miscSettings);\r\n                    channel?.condensedModeToggle(condensedModeEnabledRef.current ?? false);\r\n                    channel?.hideSubtitlePlayerToggle(hideSubtitlePlayerRef.current ?? false);\r\n\r\n                    if (channel?.audioTracks && channel?.audioTracks?.length > 1) {\r\n                        setAudioTracks(channel?.audioTracks);\r\n                        setSelectedAudioTrack(channel?.selectedAudioTrack);\r\n                    } else {\r\n                        setAudioTracks(undefined);\r\n                        setSelectedAudioTrack(undefined);\r\n                    }\r\n\r\n                    if (videoRef.current) {\r\n                        clock.setTime(videoRef.current.currentTime * 1000);\r\n                    }\r\n\r\n                    if (paused) {\r\n                        clock.stop();\r\n                    } else {\r\n                        clock.start();\r\n                    }\r\n\r\n                    setPlaying(!paused);\r\n\r\n                    if (!subscribed) {\r\n                        channel?.onPlay((forwardToMedia) => play(clock, mediaAdapter, forwardToMedia));\r\n                        channel?.onPause((forwardToMedia) => pause(clock, mediaAdapter, forwardToMedia));\r\n                        channel?.onOffset((offset) => applyOffset(Math.max(-lengthRef.current ?? 0, offset), false));\r\n                        channel?.onCopy((subtitle, surroundingSubtitles, audio, image, url, preventDuplicate, id) =>\r\n                            onCopy(\r\n                                subtitle,\r\n                                surroundingSubtitles,\r\n                                audioFile,\r\n                                videoFile,\r\n                                subtitle ? subtitleFiles[subtitle.track] : undefined,\r\n                                channel?.selectedAudioTrack,\r\n                                audio,\r\n                                image,\r\n                                url,\r\n                                preventDuplicate,\r\n                                id\r\n                            )\r\n                        );\r\n                        channel?.onCondensedModeToggle(() =>\r\n                            setCondensedModeEnabled((enabled) => {\r\n                                const newValue = !enabled;\r\n                                channel?.condensedModeToggle(newValue);\r\n                                return newValue;\r\n                            })\r\n                        );\r\n                        channel?.onCurrentTime(async (currentTime, forwardToMedia) => {\r\n                            if (playingRef.current) {\r\n                                clock.stop();\r\n                            }\r\n\r\n                            await seek(currentTime * 1000, clock, forwardToMedia);\r\n\r\n                            if (playingRef.current) {\r\n                                clock.start();\r\n                            }\r\n                        });\r\n                        channel?.onAudioTrackSelected(async (id) => {\r\n                            if (playingRef.current) {\r\n                                clock.stop();\r\n                            }\r\n\r\n                            await mediaAdapter.onReady();\r\n                            if (playingRef.current) {\r\n                                clock.start();\r\n                            }\r\n\r\n                            setSelectedAudioTrack(id);\r\n                        });\r\n                        channel?.onAnkiDialogRequest((forwardToVideo) => onAnkiDialogRequest(forwardToVideo));\r\n                        channel?.onToggleSubtitleTrackInList((track) =>\r\n                            setDisabledSubtitleTracks((tracks) => {\r\n                                const newTracks = { ...tracks };\r\n                                newTracks[track] = !tracks[track];\r\n                                return newTracks;\r\n                            })\r\n                        );\r\n\r\n                        subscribed = true;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        init().then(() => onLoaded());\r\n\r\n        return () => {\r\n            channel?.close();\r\n            channelClosed = true;\r\n        };\r\n    }, [\r\n        subtitleReader,\r\n        extension,\r\n        settingsProvider,\r\n        clock,\r\n        mediaAdapter,\r\n        seek,\r\n        onLoaded,\r\n        onError,\r\n        onUnloadVideo,\r\n        onCopy,\r\n        onAnkiDialogRequest,\r\n        subtitleFiles,\r\n        audioFile,\r\n        audioFileUrl,\r\n        videoFile,\r\n        videoFileUrl,\r\n        tab,\r\n        forceUpdate,\r\n        videoFrameRef,\r\n        applyOffset,\r\n    ]);\r\n\r\n    function play(clock: Clock, mediaAdapter: MediaAdapter, forwardToMedia: boolean) {\r\n        setPlaying(true);\r\n        clock.start();\r\n\r\n        if (forwardToMedia) {\r\n            mediaAdapter.play();\r\n        }\r\n    }\r\n\r\n    function pause(clock: Clock, mediaAdapter: MediaAdapter, forwardToMedia: boolean) {\r\n        setPlaying(false);\r\n        clock.stop();\r\n\r\n        if (forwardToMedia) {\r\n            mediaAdapter.pause();\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (ankiDialogRequestToVideo && videoRef.current instanceof VideoChannel) {\r\n            videoRef.current.ankiDialogRequest();\r\n        }\r\n    }, [ankiDialogRequestToVideo]);\r\n\r\n    useEffect(() => {\r\n        if (ankiDialogFinishedRequest && ankiDialogFinishedRequest.timestamp > 0) {\r\n            if (videoRef.current instanceof VideoChannel) {\r\n                videoRef.current.finishedAnkiDialogRequest(ankiDialogFinishedRequest.resume);\r\n            }\r\n\r\n            setResumeOnFinishedAnkiDialogRequest((resumeOnFinishedAnkiDialogRequest) => {\r\n                if (resumeOnFinishedAnkiDialogRequest && ankiDialogFinishedRequest.resume) {\r\n                    play(clock, mediaAdapter, true);\r\n                }\r\n\r\n                return false;\r\n            });\r\n        }\r\n    }, [ankiDialogFinishedRequest, clock, mediaAdapter]);\r\n\r\n    useEffect(() => {\r\n        if (ankiDialogRequested && playingRef.current) {\r\n            pause(clock, mediaAdapter, true);\r\n            setResumeOnFinishedAnkiDialogRequest(true);\r\n        }\r\n    }, [ankiDialogRequested, clock, mediaAdapter]);\r\n\r\n    useEffect(() => {\r\n        if (!condensedModeEnabled) {\r\n            return;\r\n        }\r\n\r\n        if (!subtitles || subtitles.length === 0) {\r\n            return;\r\n        }\r\n\r\n        let seeking = false;\r\n        let expectedSeekTime = 1000;\r\n\r\n        const interval = setInterval(async () => {\r\n            const length = lengthRef.current;\r\n\r\n            if (!length) {\r\n                return;\r\n            }\r\n\r\n            const progress = clock.progress(length);\r\n\r\n            let currentOrNextIndex = 0;\r\n            let currentIndex = -1;\r\n\r\n            for (let i = subtitles.length - 1; i >= 0; --i) {\r\n                const s = subtitles[i];\r\n                const start = s.start / length;\r\n                const end = s.end / length;\r\n\r\n                if (progress >= start) {\r\n                    if (progress < end) {\r\n                        currentIndex = i;\r\n                        currentOrNextIndex = i;\r\n                    } else {\r\n                        currentOrNextIndex = Math.min(subtitles.length - 1, i + 1);\r\n                    }\r\n\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (currentIndex !== currentOrNextIndex) {\r\n                const nextSubtitle = subtitles[currentOrNextIndex];\r\n\r\n                if (nextSubtitle.start - progress * length < expectedSeekTime + 500) {\r\n                    return;\r\n                }\r\n\r\n                if (playingRef.current) {\r\n                    clock.stop();\r\n                }\r\n\r\n                if (!seeking) {\r\n                    seeking = true;\r\n                    const t0 = Date.now();\r\n                    await seek(nextSubtitle.start, clock, true);\r\n                    expectedSeekTime = Date.now() - t0;\r\n                    seeking = false;\r\n                }\r\n\r\n                if (playingRef.current) {\r\n                    clock.start();\r\n                }\r\n            }\r\n        }, 100);\r\n\r\n        return () => clearInterval(interval);\r\n    }, [subtitles, condensedModeEnabled, clock, seek]);\r\n\r\n    useEffect(() => {\r\n        if (videoPopOut && channelId && videoFileUrl) {\r\n            window.open(\r\n                process.env.PUBLIC_URL +\r\n                    '/?video=' +\r\n                    encodeURIComponent(videoFileUrl) +\r\n                    '&channel=' +\r\n                    channelId +\r\n                    '&popout=true',\r\n                'asbplayer-video-' + videoFileUrl,\r\n                'resizable,width=800,height=450'\r\n            );\r\n        }\r\n\r\n        setLastJumpToTopTimestamp(Date.now());\r\n    }, [videoPopOut, channelId, videoFileUrl, videoFrameRef]);\r\n\r\n    const handlePlay = useCallback(() => play(clock, mediaAdapter, true), [clock, mediaAdapter]);\r\n    const handlePause = useCallback(() => pause(clock, mediaAdapter, true), [clock, mediaAdapter]);\r\n    const handleSeek = useCallback(\r\n        async (progress) => {\r\n            if (!lengthRef.current) {\r\n                return;\r\n            }\r\n\r\n            if (playingRef.current) {\r\n                clock.stop();\r\n            }\r\n\r\n            await seek(progress * lengthRef.current, clock, true);\r\n\r\n            if (playingRef.current) {\r\n                clock.start();\r\n            }\r\n        },\r\n        [clock, seek]\r\n    );\r\n\r\n    const handleSeekToSubtitle = useCallback(\r\n        async (time, shouldPlay) => {\r\n            if (!shouldPlay) {\r\n                pause(clock, mediaAdapter, true);\r\n            }\r\n\r\n            if (playingRef.current) {\r\n                clock.stop();\r\n            }\r\n\r\n            await seek(time, clock, true);\r\n\r\n            if (shouldPlay && !playingRef.current) {\r\n                // play method will start the clock again\r\n                play(clock, mediaAdapter, true);\r\n            }\r\n        },\r\n        [clock, seek, mediaAdapter]\r\n    );\r\n\r\n    const handleCopy = useCallback(\r\n        (subtitle, surroundingSubtitles, preventDuplicate) => {\r\n            onCopy(\r\n                subtitle,\r\n                surroundingSubtitles,\r\n                audioFile,\r\n                videoFile,\r\n                subtitleFiles[subtitle.track],\r\n                selectedAudioTrack,\r\n                undefined,\r\n                undefined,\r\n                undefined,\r\n                preventDuplicate,\r\n                undefined\r\n            );\r\n        },\r\n        [onCopy, audioFile, videoFile, subtitleFiles, selectedAudioTrack]\r\n    );\r\n\r\n    const handleMouseMove = useCallback((e) => {\r\n        mousePositionRef.current.x = e.screenX;\r\n        mousePositionRef.current.y = e.screenY;\r\n    }, []);\r\n\r\n    const handleAudioTrackSelected = useCallback(\r\n        async (id) => {\r\n            if (videoRef.current instanceof VideoChannel) {\r\n                videoRef.current.audioTrackSelected(id);\r\n            }\r\n\r\n            pause(clock, mediaAdapter, true);\r\n\r\n            await seek(0, clock, true);\r\n\r\n            if (playingRef.current) {\r\n                play(clock, mediaAdapter, true);\r\n            }\r\n        },\r\n        [clock, mediaAdapter, seek]\r\n    );\r\n\r\n    const handleOffsetChange = useCallback(\r\n        (offset) => {\r\n            applyOffset(Math.max(-lengthRef.current ?? 0, offset), true);\r\n        },\r\n        [applyOffset]\r\n    );\r\n\r\n    const handleVolumeChange = useCallback((v) => {\r\n        if (audioRef.current instanceof HTMLMediaElement) {\r\n            audioRef.current.volume = v;\r\n        }\r\n    }, []);\r\n\r\n    const handleCondensedModeToggle = useCallback(() => setCondensedModeEnabled((v) => !v), []);\r\n\r\n    const handleToggleSubtitleTrack = useCallback(\r\n        (track) =>\r\n            setDisabledSubtitleTracks((tracks) => {\r\n                const newTracks = { ...tracks };\r\n                newTracks[track] = !tracks[track];\r\n                return newTracks;\r\n            }),\r\n        []\r\n    );\r\n\r\n    useEffect(() => {\r\n        if (tab) {\r\n            return;\r\n        }\r\n\r\n        const interval = setInterval(async () => {\r\n            const length = lengthRef.current;\r\n            const progress = clock.progress(length);\r\n\r\n            if (progress >= 1) {\r\n                pause(clock, mediaAdapter, true);\r\n                await seek(0, clock, true);\r\n                setLastJumpToTopTimestamp(Date.now());\r\n            }\r\n        }, 1000);\r\n\r\n        return () => clearInterval(interval);\r\n    }, [clock, subtitles, mediaAdapter, seek, tab]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindPlay(\r\n            (event) => {\r\n                event.preventDefault();\r\n\r\n                if (playing) {\r\n                    pause(clock, mediaAdapter, true);\r\n                } else {\r\n                    play(clock, mediaAdapter, true);\r\n                }\r\n            },\r\n            () => disableKeyEvents\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [playing, clock, mediaAdapter, disableKeyEvents]);\r\n\r\n    useEffect(() => {\r\n        if ((audioFile || videoFile) && (!subtitles || subtitles.length === 0)) {\r\n            const unbindCopy = KeyBindings.bindCopy(\r\n                (event, subtitle) => {\r\n                    event.preventDefault();\r\n                    event.stopPropagation();\r\n                    const surroundingSubtitles = mockSurroundingSubtitles(subtitle, lengthRef.current, 5000);\r\n                    onCopy(\r\n                        subtitle,\r\n                        surroundingSubtitles,\r\n                        audioFile,\r\n                        videoFile,\r\n                        undefined,\r\n                        selectedAudioTrack,\r\n                        undefined,\r\n                        undefined,\r\n                        undefined,\r\n                        undefined,\r\n                        undefined\r\n                    );\r\n                },\r\n                () => disableKeyEvents,\r\n                () => {\r\n                    if (!lengthRef.current) {\r\n                        return undefined;\r\n                    }\r\n\r\n                    const timestamp = clock.time(lengthRef.current);\r\n                    const end = Math.min(timestamp + 5000, lengthRef.current);\r\n\r\n                    return {\r\n                        text: '',\r\n                        start: timestamp,\r\n                        originalStart: timestamp,\r\n                        end: end,\r\n                        originalEnd: end,\r\n                        track: 0,\r\n                    };\r\n                }\r\n            );\r\n\r\n            const unbindAnkiExport = KeyBindings.bindAnkiExport(\r\n                (event) => {\r\n                    event.preventDefault();\r\n                    event.stopPropagation();\r\n                    const timestamp = clock.time(lengthRef.current);\r\n                    const end = Math.min(timestamp + 5000, lengthRef.current);\r\n                    const subtitle = {\r\n                        text: '',\r\n                        start: timestamp,\r\n                        originalStart: timestamp,\r\n                        end: end,\r\n                        originalEnd: end,\r\n                        track: 0,\r\n                    };\r\n                    const surroundingSubtitles = mockSurroundingSubtitles(subtitle, lengthRef.current, 5000);\r\n                    onCopy(\r\n                        subtitle,\r\n                        surroundingSubtitles,\r\n                        audioFile,\r\n                        videoFile,\r\n                        undefined,\r\n                        selectedAudioTrack,\r\n                        undefined,\r\n                        undefined,\r\n                        undefined,\r\n                        undefined,\r\n                        undefined\r\n                    );\r\n\r\n                    onAnkiDialogRequest();\r\n                },\r\n                () => false\r\n            );\r\n\r\n            return () => {\r\n                unbindCopy();\r\n                unbindAnkiExport();\r\n            };\r\n        }\r\n    }, [audioFile, videoFile, subtitles, clock, selectedAudioTrack, disableKeyEvents, onCopy, onAnkiDialogRequest]);\r\n\r\n    const length = lengthRef.current;\r\n    const loaded = audioFileUrl || videoFileUrl || subtitles;\r\n    const videoInWindow = Boolean(loaded && videoFileUrl && !videoPopOut);\r\n\r\n    return (\r\n        <div onMouseMove={handleMouseMove} className={classes.root}>\r\n            <Grid container direction=\"row\" wrap=\"nowrap\" className={classes.container}>\r\n                {videoInWindow && (\r\n                    <Grid item style={{ flexGrow: 1, minWidth: 600 }}>\r\n                        <iframe\r\n                            ref={videoFrameRef}\r\n                            className={classes.videoFrame}\r\n                            src={\r\n                                process.env.PUBLIC_URL +\r\n                                '/?video=' +\r\n                                encodeURIComponent(videoFileUrl!) +\r\n                                '&channel=' +\r\n                                channelId +\r\n                                '&popout=false'\r\n                            }\r\n                            title=\"asbplayer\"\r\n                        />\r\n                    </Grid>\r\n                )}\r\n                {(!videoInWindow || (subtitles && subtitles?.length > 0)) && (\r\n                    <Grid\r\n                        item\r\n                        style={{\r\n                            flexGrow: videoInWindow ? 0 : 1,\r\n                            width: videoInWindow && hideSubtitlePlayer ? 0 : 'auto',\r\n                        }}\r\n                    >\r\n                        {loaded && !(videoFileUrl && !videoPopOut) && (\r\n                            <Controls\r\n                                mousePositionRef={mousePositionRef}\r\n                                playing={playing}\r\n                                clock={clock}\r\n                                length={length}\r\n                                displayLength={trackLength(audioRef, videoRef, subtitles, false)}\r\n                                audioTracks={audioTracks}\r\n                                selectedAudioTrack={selectedAudioTrack}\r\n                                tabs={(!videoFileUrl && !audioFileUrl && availableTabs) || undefined}\r\n                                selectedTab={tab}\r\n                                audioFile={audioFile?.name}\r\n                                videoFile={videoFile?.name}\r\n                                offsetEnabled={true}\r\n                                offset={offset}\r\n                                volumeEnabled={Boolean(audioFileUrl)}\r\n                                condensedModeToggleEnabled={Boolean(audioFileUrl) && subtitles && subtitles.length > 0}\r\n                                condensedModeEnabled={condensedModeEnabled}\r\n                                onPlay={handlePlay}\r\n                                onPause={handlePause}\r\n                                onSeek={handleSeek}\r\n                                onAudioTrackSelected={handleAudioTrackSelected}\r\n                                onTabSelected={onTabSelected}\r\n                                onUnloadAudio={() => audioFileUrl && onUnloadAudio(audioFileUrl)}\r\n                                onUnloadVideo={() => videoFileUrl && onUnloadVideo(videoFileUrl)}\r\n                                onOffsetChange={handleOffsetChange}\r\n                                onVolumeChange={handleVolumeChange}\r\n                                onCondensedModeToggle={handleCondensedModeToggle}\r\n                                disableKeyEvents={disableKeyEvents}\r\n                                settingsProvider={settingsProvider}\r\n                                showOnMouseMovement={true}\r\n                            />\r\n                        )}\r\n                        <SubtitlePlayer\r\n                            playing={playing}\r\n                            subtitles={subtitles}\r\n                            clock={clock}\r\n                            length={length}\r\n                            jumpToSubtitle={jumpToSubtitle}\r\n                            drawerOpen={drawerOpen}\r\n                            compressed={Boolean(videoFileUrl && !videoPopOut)}\r\n                            loading={loadingSubtitles}\r\n                            displayHelp={audioFile?.name || (videoPopOut && videoFile?.name) || undefined}\r\n                            disableKeyEvents={disableKeyEvents}\r\n                            lastJumpToTopTimestamp={lastJumpToTopTimestamp}\r\n                            hidden={videoInWindow && hideSubtitlePlayer}\r\n                            disabledSubtitleTracks={disabledSubtitleTracks}\r\n                            onSeek={handleSeekToSubtitle}\r\n                            onCopy={handleCopy}\r\n                            onOffsetChange={handleOffsetChange}\r\n                            onAnkiDialogRequest={onAnkiDialogRequest}\r\n                            onToggleSubtitleTrack={handleToggleSubtitleTrack}\r\n                            settingsProvider={settingsProvider}\r\n                        />\r\n                    </Grid>\r\n                )}\r\n            </Grid>\r\n            <audio ref={audioRef} src={audioFileUrl} />\r\n        </div>\r\n    );\r\n}\r\n","import { useState, useEffect } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\ninterface Props {\r\n    open: boolean;\r\n    onProceed: (fieldName: string) => void;\r\n    onCancel: () => void;\r\n    existingCustomFieldNames: string[];\r\n}\r\n\r\nexport default function CustomFieldDialog({ open, onProceed, onCancel, existingCustomFieldNames }: Props) {\r\n    const [fieldName, setFieldName] = useState<string>('');\r\n\r\n    useEffect(() => {\r\n        setFieldName('');\r\n    }, [open]);\r\n\r\n    const fieldExists = [\r\n        ...existingCustomFieldNames,\r\n        'Sentence',\r\n        'Word',\r\n        'Definition',\r\n        'Source',\r\n        'Image',\r\n        'Audio',\r\n    ].includes(fieldName);\r\n\r\n    return (\r\n        <Dialog\r\n            open={open}\r\n            disableEnforceFocus\r\n            fullWidth\r\n            maxWidth=\"xs\"\r\n            onClose={onCancel}\r\n        >\r\n            <DialogTitle>New Custom Field</DialogTitle>\r\n            <DialogContent>\r\n                <form>\r\n                    <TextField\r\n                        error={fieldExists}\r\n                        helperText={fieldExists && `Field ${fieldName} already exists`}\r\n                        variant=\"filled\"\r\n                        fullWidth\r\n                        label=\"Field Name\"\r\n                        value={fieldName}\r\n                        color=\"secondary\"\r\n                        onChange={(e) => setFieldName(e.target.value)}\r\n                    />\r\n                </form>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={() => onCancel()}>Cancel</Button>\r\n                <Button disabled={fieldExists || fieldName.trim() === ''} onClick={() => onProceed(fieldName.trim())}>\r\n                    Create\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n}\r\n","import React, { useCallback, useState, useEffect, useMemo, ChangeEvent, ReactNode } from 'react';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport { computeStyles } from '../services/Util';\r\nimport Button from '@material-ui/core/Button';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport CustomFieldDialog from './CustomFieldDialog';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Link from '@material-ui/core/Link';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport Select from '@material-ui/core/Select';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport TagsTextField from './TagsTextField';\r\nimport { Theme } from '@material-ui/core/styles';\r\nimport { Anki, AsbplayerSettings } from '@project/common';\r\n\r\nconst useStyles = makeStyles<Theme>((theme) => ({\r\n    root: {\r\n        '& .MuiTextField-root': {\r\n            marginTop: theme.spacing(1),\r\n            marginBottom: theme.spacing(1),\r\n        },\r\n    },\r\n    subtitleSetting: {\r\n        '& .MuiTextField-root': {\r\n            marginTop: theme.spacing(1),\r\n            marginBottom: theme.spacing(1),\r\n        },\r\n    },\r\n    subtitlePreview: {\r\n        backgroundImage: `linear-gradient(45deg, ${theme.palette.action.disabledBackground} 25%, transparent 25%), linear-gradient(-45deg, ${theme.palette.action.disabledBackground} 25%, transparent 25%), linear-gradient(45deg, transparent 75%, ${theme.palette.action.disabledBackground} 75%), linear-gradient(-45deg, transparent 75%,${theme.palette.action.disabledBackground} 75%)`,\r\n        backgroundSize: '20px 20px',\r\n        backgroundPosition: '0 0, 0 10px, 10px -10px, -10px 0px',\r\n        marginTop: theme.spacing(1),\r\n        marginBottom: theme.spacing(1),\r\n        maxWidth: '100%',\r\n        padding: 10,\r\n    },\r\n    subtitlePreviewInput: {\r\n        border: 'none',\r\n        width: '100%',\r\n        textAlign: 'center',\r\n        backgroundColor: 'rgba(0,0,0,0)',\r\n        '&:focus': {\r\n            outline: 'none',\r\n        },\r\n    },\r\n    addFieldButton: {\r\n        width: '100%',\r\n    },\r\n}));\r\n\r\nconst useSelectableSettingStyles = makeStyles<Theme>((theme) => ({\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n    },\r\n    root: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        justifyContent: 'end',\r\n        alignItems: 'flex-end',\r\n    },\r\n}));\r\n\r\ninterface SelectableSettingProps {\r\n    label: string;\r\n    value: string;\r\n    selections?: string[];\r\n    removable?: boolean;\r\n    onChange: (event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => void;\r\n    onSelectionChange: (event: ChangeEvent<{name?: string | undefined, value: unknown}>, child: ReactNode) => void;\r\n    onRemoval?: () => void;\r\n}\r\n\r\nfunction SelectableSetting({\r\n    label,\r\n    value,\r\n    selections,\r\n    removable,\r\n    onChange,\r\n    onSelectionChange,\r\n    onRemoval,\r\n}: SelectableSettingProps) {\r\n    const classes = useSelectableSettingStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <TextField\r\n                label={label}\r\n                value={value}\r\n                onChange={onChange}\r\n                fullWidth\r\n                color=\"secondary\"\r\n                InputProps={{\r\n                    endAdornment: removable && (\r\n                        <InputAdornment position=\"end\">\r\n                            <IconButton onClick={(e) => onRemoval?.()}>\r\n                                <DeleteIcon />\r\n                            </IconButton>\r\n                        </InputAdornment>\r\n                    ),\r\n                }}\r\n            />\r\n            <FormControl className={classes.formControl}>\r\n                <InputLabel></InputLabel>\r\n                <Select value={value} disabled={!selections} color=\"secondary\" onChange={onSelectionChange}>\r\n                    {selections &&\r\n                        selections.map((s) => (\r\n                            <MenuItem key={s} value={s}>\r\n                                {s}\r\n                            </MenuItem>\r\n                        ))}\r\n                </Select>\r\n            </FormControl>\r\n        </div>\r\n    );\r\n}\r\n\r\ninterface Props {\r\n    anki: Anki;\r\n    open: boolean;\r\n    settings: AsbplayerSettings;\r\n    onClose: (settings: AsbplayerSettings) => void;\r\n}\r\n\r\nexport default function SettingsDialog({ anki, open, settings, onClose }: Props) {\r\n    const classes = useStyles();\r\n    const [ankiConnectUrl, setAnkiConnectUrl] = useState<string>(settings.ankiConnectUrl);\r\n    const [ankiConnectUrlError, setAnkiConnectUrlError] = useState<string>();\r\n    const [ankiConnectUrlChangeTimestamp, setAnkiConnectUrlChangeTimestamp] = useState<number>(0);\r\n    const [deck, setDeck] = useState<string>(settings.deck || '');\r\n    const [deckNames, setDeckNames] = useState<string[]>();\r\n    const [noteType, setNoteType] = useState<string>(settings.noteType || '');\r\n    const [modelNames, setModelNames] = useState<string[]>();\r\n    const [sentenceField, setSentenceField] = useState<string>(settings.sentenceField || '');\r\n    const [definitionField, setDefinitionField] = useState<string>(settings.definitionField || '');\r\n    const [audioField, setAudioField] = useState<string>(settings.audioField || '');\r\n    const [imageField, setImageField] = useState<string>(settings.imageField || '');\r\n    const [wordField, setWordField] = useState<string>(settings.wordField || '');\r\n    const [sourceField, setSourceField] = useState<string>(settings.sourceField || '');\r\n    const [urlField, setUrlField] = useState<string>(settings.urlField || '');\r\n    const [customFields, setCustomFields] = useState<{ [key: string]: string }>(settings.customAnkiFields);\r\n    const [tags, setTags] = useState<string[]>(settings.tags);\r\n    const [preferMp3, setPreferMp3] = useState<boolean>(settings.preferMp3);\r\n    const [fieldNames, setFieldNames] = useState<string[]>();\r\n    const [customFieldDialogOpen, setCustomFieldDialogOpen] = useState<boolean>(false);\r\n    const [audioPaddingStart, setAudioPaddingStart] = useState<number>(settings.audioPaddingStart);\r\n    const [audioPaddingEnd, setAudioPaddingEnd] = useState<number>(settings.audioPaddingEnd);\r\n    const [maxImageWidth, setMaxImageWidth] = useState<number>(settings.maxImageWidth);\r\n    const [maxImageHeight, setMaxImageHeight] = useState<number>(settings.maxImageHeight);\r\n    const [subtitleColor, setSubtitleColor] = useState<string>(settings.subtitleColor);\r\n    const [subtitleSize, setSubtitleSize] = useState<number>(settings.subtitleSize);\r\n    const [subtitleOutlineColor, setSubtitleOutlineColor] = useState<string>(settings.subtitleOutlineColor);\r\n    const [subtitleOutlineThickness, setSubtitleOutlineThickness] = useState<number>(settings.subtitleOutlineThickness);\r\n    const [subtitleBackgroundColor, setSubtitleBackgroundColor] = useState<string>(settings.subtitleBackgroundColor);\r\n    const [subtitleBackgroundOpacity, setSubtitleBackgroundOpacity] = useState<number>(\r\n        settings.subtitleBackgroundOpacity\r\n    );\r\n    const [subtitleFontFamily, setSubtitleFontFamily] = useState<string>(settings.subtitleFontFamily);\r\n    const [subtitlePreview, setSubtitlePreview] = useState<string>(settings.subtitlePreview);\r\n    const [themeType, setThemeType] = useState<\"dark\" | \"light\">(settings.themeType);\r\n\r\n    const handleAnkiConnectUrlChange = useCallback((e) => {\r\n        setAnkiConnectUrl(e.target.value);\r\n        setAnkiConnectUrlChangeTimestamp(Date.now());\r\n    }, []);\r\n\r\n    const handleRetryAnkiConnectUrl = useCallback((e) => setAnkiConnectUrlChangeTimestamp(Date.now()), []);\r\n    const handleDeckChange = useCallback((e) => setDeck(e.target.value), []);\r\n    const handleNoteTypeChange = useCallback((e) => setNoteType(e.target.value), []);\r\n    const handleSentenceFieldChange = useCallback((e) => setSentenceField(e.target.value), []);\r\n    const handleDefinitionFieldChange = useCallback((e) => setDefinitionField(e.target.value), []);\r\n    const handleAudioFieldChange = useCallback((e) => setAudioField(e.target.value), []);\r\n    const handleImageFieldChange = useCallback((e) => setImageField(e.target.value), []);\r\n    const handleWordFieldChange = useCallback((e) => setWordField(e.target.value), []);\r\n    const handleSourceFieldChange = useCallback((e) => setSourceField(e.target.value), []);\r\n    const handleUrlFieldChange = useCallback((e) => setUrlField(e.target.value), []);\r\n    const handleAudioPaddingStart = useCallback((e) => setAudioPaddingStart(e.target.value), []);\r\n    const handleAudioPaddingEnd = useCallback((e) => setAudioPaddingEnd(e.target.value), []);\r\n    const handleMaxImageWidth = useCallback((e) => setMaxImageWidth(e.target.value), []);\r\n    const handleMaxImageHeight = useCallback((e) => setMaxImageHeight(e.target.value), []);\r\n    const handleSubtitleColorChange = useCallback((e) => setSubtitleColor(e.target.value), []);\r\n    const handleSubtitleSizeChange = useCallback((e) => setSubtitleSize(e.target.value), []);\r\n    const handleSubtitleOutlineColorChange = useCallback((e) => setSubtitleOutlineColor(e.target.value), []);\r\n    const handleSubtitleOutlineThicknessChange = useCallback((e) => setSubtitleOutlineThickness(e.target.value), []);\r\n    const handleSubtitleBackgroundColorChange = useCallback((e) => setSubtitleBackgroundColor(e.target.value), []);\r\n    const handleSubtitleBackgroundOpacityChange = useCallback((e) => setSubtitleBackgroundOpacity(e.target.value), []);\r\n    const handleSubtitleFontFamilyChange = useCallback((e) => setSubtitleFontFamily(e.target.value), []);\r\n    const handleSubtitlePreviewChange = useCallback((e) => setSubtitlePreview(e.target.value), []);\r\n    const handleAddCustomField = useCallback((customFieldName: string) => {\r\n        setCustomFields((oldCustomFields: { [key: string]: string }) => {\r\n            const newCustomFields: { [key: string]: string } = {};\r\n            Object.assign(newCustomFields, oldCustomFields);\r\n            newCustomFields[customFieldName] = '';\r\n            return newCustomFields;\r\n        });\r\n        setCustomFieldDialogOpen(false);\r\n    }, []);\r\n    const handleCustomFieldChange = useCallback((customFieldName: string, value: string) => {\r\n        setCustomFields((oldCustomFields: { [key: string]: string }) => {\r\n            const newCustomFields: { [key: string]: string } = {};\r\n            Object.assign(newCustomFields, oldCustomFields);\r\n            newCustomFields[customFieldName] = value;\r\n            return newCustomFields;\r\n        });\r\n    }, []);\r\n    const handleCustomFieldRemoval = useCallback(\r\n        (customFieldName: string) =>\r\n            setCustomFields((oldCustomFields: { [key: string]: string }) => {\r\n                const newCustomFields: { [key: string]: string } = {};\r\n                Object.assign(newCustomFields, oldCustomFields);\r\n                delete newCustomFields[customFieldName];\r\n                return newCustomFields;\r\n            }),\r\n        []\r\n    );\r\n    const handleTagsChange = useCallback((newTags) => {\r\n        setTags(newTags);\r\n    }, []);\r\n    const handlePreferMp3Change = useCallback((e) => setPreferMp3(e.target.checked), []);\r\n    const handleThemeTypeChange = useCallback((e) => setThemeType(e.target.value), []);\r\n    const subtitlePreviewStyles = useMemo(\r\n        () =>\r\n            computeStyles({\r\n                subtitleColor: subtitleColor,\r\n                subtitleSize: subtitleSize,\r\n                subtitleOutlineThickness: subtitleOutlineThickness,\r\n                subtitleOutlineColor: subtitleOutlineColor,\r\n                subtitleBackgroundOpacity: subtitleBackgroundOpacity,\r\n                subtitleBackgroundColor: subtitleBackgroundColor,\r\n                subtitleFontFamily: subtitleFontFamily,\r\n            }),\r\n        [\r\n            subtitleColor,\r\n            subtitleSize,\r\n            subtitleOutlineThickness,\r\n            subtitleOutlineColor,\r\n            subtitleBackgroundOpacity,\r\n            subtitleBackgroundColor,\r\n            subtitleFontFamily,\r\n        ]\r\n    );\r\n\r\n    useEffect(() => {\r\n        let canceled = false;\r\n\r\n        const timeout = setTimeout(async () => {\r\n            try {\r\n                if (canceled) {\r\n                    return;\r\n                }\r\n\r\n                await anki.requestPermission(ankiConnectUrl);\r\n                setDeckNames(await anki.deckNames(ankiConnectUrl));\r\n                setModelNames(await anki.modelNames(ankiConnectUrl));\r\n                setAnkiConnectUrlError(undefined);\r\n            } catch (e) {\r\n                if (canceled) {\r\n                    return;\r\n                }\r\n\r\n                console.error(e);\r\n                setDeckNames(undefined);\r\n                setModelNames(undefined);\r\n\r\n                if (e instanceof Error) {\r\n                    setAnkiConnectUrlError(e.message);\r\n                } else if (typeof e === 'string') {\r\n                    setAnkiConnectUrlError(e);\r\n                } else {\r\n                    setAnkiConnectUrlError(String(e));\r\n                }\r\n            }\r\n        }, 1000);\r\n\r\n        return () => {\r\n            canceled = true;\r\n            clearTimeout(timeout);\r\n        };\r\n    }, [anki, ankiConnectUrl, ankiConnectUrlChangeTimestamp]);\r\n\r\n    useEffect(() => {\r\n        if (!noteType || ankiConnectUrlError) {\r\n            return undefined;\r\n        }\r\n\r\n        let canceled = false;\r\n\r\n        async function refreshFieldNames() {\r\n            try {\r\n                if (canceled) {\r\n                    return;\r\n                }\r\n\r\n                setFieldNames(['', ...(await anki.modelFieldNames(noteType, ankiConnectUrl))]);\r\n                setAnkiConnectUrlError(undefined);\r\n            } catch (e) {\r\n                if (canceled) {\r\n                    return;\r\n                }\r\n\r\n                console.error(e);\r\n                setFieldNames(undefined);\r\n\r\n                if (e instanceof Error) {\r\n                    setAnkiConnectUrlError(e.message);\r\n                } else if (typeof e === 'string') {\r\n                    setAnkiConnectUrlError(e);\r\n                } else {\r\n                    setAnkiConnectUrlError(String(e));\r\n                }\r\n            }\r\n        }\r\n\r\n        refreshFieldNames();\r\n\r\n        return () => {\r\n            canceled = true;\r\n        };\r\n    }, [anki, noteType, ankiConnectUrl, ankiConnectUrlError, ankiConnectUrlChangeTimestamp]);\r\n\r\n    const handleClose = useCallback(() => {\r\n        onClose({\r\n            ankiConnectUrl: ankiConnectUrl,\r\n            deck: deck,\r\n            noteType: noteType,\r\n            sentenceField: sentenceField,\r\n            definitionField: definitionField,\r\n            audioField: audioField,\r\n            imageField: imageField,\r\n            wordField: wordField,\r\n            sourceField: sourceField,\r\n            urlField: urlField,\r\n            tags: tags.filter((t) => t !== ''),\r\n            subtitleSize: Number(subtitleSize),\r\n            subtitleColor: subtitleColor,\r\n            subtitleOutlineThickness: Number(subtitleOutlineThickness),\r\n            subtitleOutlineColor: subtitleOutlineColor,\r\n            subtitleBackgroundColor: subtitleBackgroundColor,\r\n            subtitleBackgroundOpacity: Number(subtitleBackgroundOpacity),\r\n            subtitleFontFamily: subtitleFontFamily,\r\n            subtitlePreview: subtitlePreview,\r\n            customAnkiFields: customFields,\r\n            preferMp3: preferMp3,\r\n            themeType: themeType,\r\n            audioPaddingStart: audioPaddingStart,\r\n            audioPaddingEnd: audioPaddingEnd,\r\n            maxImageWidth: maxImageWidth,\r\n            maxImageHeight: maxImageHeight,\r\n            surroundingSubtitlesCountRadius: settings.surroundingSubtitlesCountRadius,\r\n            surroundingSubtitlesTimeRadius: settings.surroundingSubtitlesTimeRadius,\r\n            volume: settings.volume\r\n        });\r\n    }, [\r\n        onClose,\r\n        ankiConnectUrl,\r\n        deck,\r\n        noteType,\r\n        sentenceField,\r\n        definitionField,\r\n        audioField,\r\n        imageField,\r\n        wordField,\r\n        sourceField,\r\n        urlField,\r\n        customFields,\r\n        tags,\r\n        preferMp3,\r\n        subtitleSize,\r\n        subtitleColor,\r\n        subtitleOutlineThickness,\r\n        subtitleOutlineColor,\r\n        subtitleBackgroundColor,\r\n        subtitleBackgroundOpacity,\r\n        subtitleFontFamily,\r\n        subtitlePreview,\r\n        themeType,\r\n        audioPaddingStart,\r\n        audioPaddingEnd,\r\n        maxImageWidth,\r\n        maxImageHeight,\r\n        settings.surroundingSubtitlesCountRadius,\r\n        settings.surroundingSubtitlesTimeRadius,\r\n        settings.volume\r\n    ]);\r\n\r\n    const customFieldInputs = Object.keys(customFields).map((customFieldName) => {\r\n        return (\r\n            <SelectableSetting\r\n                key={customFieldName}\r\n                label={`${customFieldName} Field`}\r\n                value={customFields[customFieldName]}\r\n                selections={fieldNames!}\r\n                onChange={(e) => handleCustomFieldChange(customFieldName, e.target.value)}\r\n                onSelectionChange={(e) => handleCustomFieldChange(customFieldName, e.target.value as string)}\r\n                onRemoval={() => handleCustomFieldRemoval(customFieldName)}\r\n                removable={true}\r\n            />\r\n        );\r\n    });\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <CustomFieldDialog\r\n                open={customFieldDialogOpen}\r\n                existingCustomFieldNames={Object.keys(customFields)}\r\n                onProceed={handleAddCustomField}\r\n                onCancel={() => setCustomFieldDialogOpen(false)}\r\n            />\r\n            <Dialog open={open} maxWidth=\"xs\" fullWidth onClose={handleClose}>\r\n                <DialogTitle>Settings</DialogTitle>\r\n                <DialogContent>\r\n                    <Grid container direction=\"column\" spacing={3}>\r\n                        <Grid item>\r\n                            <FormLabel>Anki</FormLabel>\r\n                            <FormGroup className={classes.root}>\r\n                                <TextField\r\n                                    label=\"Anki Connect URL\"\r\n                                    value={ankiConnectUrl}\r\n                                    error={Boolean(ankiConnectUrlError)}\r\n                                    helperText={ankiConnectUrlError}\r\n                                    color=\"secondary\"\r\n                                    onChange={handleAnkiConnectUrlChange}\r\n                                    InputProps={{\r\n                                        endAdornment: (\r\n                                            <InputAdornment position=\"end\">\r\n                                                <IconButton onClick={handleRetryAnkiConnectUrl}>\r\n                                                    <RefreshIcon />\r\n                                                </IconButton>\r\n                                            </InputAdornment>\r\n                                        ),\r\n                                    }}\r\n                                />\r\n                                <FormHelperText>\r\n                                    Ensure that {window.location.protocol + '//' + window.location.hostname} is in the\r\n                                    webCorsOriginList in your AnkiConnect settings as in this{' '}\r\n                                    <Link\r\n                                        color=\"secondary\"\r\n                                        target=\"_blank\"\r\n                                        rel=\"noreferrer\"\r\n                                        href=\"https://youtu.be/Mv7fEVb6PHo?t=44\"\r\n                                    >\r\n                                        video\r\n                                    </Link>\r\n                                    .\r\n                                </FormHelperText>\r\n                                <SelectableSetting\r\n                                    label=\"Deck\"\r\n                                    value={deck}\r\n                                    selections={deckNames}\r\n                                    onChange={handleDeckChange}\r\n                                    onSelectionChange={handleDeckChange}\r\n                                />\r\n                                <SelectableSetting\r\n                                    label=\"Note Type\"\r\n                                    value={noteType}\r\n                                    selections={modelNames}\r\n                                    onChange={handleNoteTypeChange}\r\n                                    onSelectionChange={handleNoteTypeChange}\r\n                                />\r\n                                <SelectableSetting\r\n                                    label=\"Sentence Field\"\r\n                                    value={sentenceField}\r\n                                    selections={fieldNames}\r\n                                    onChange={handleSentenceFieldChange}\r\n                                    onSelectionChange={handleSentenceFieldChange}\r\n                                />\r\n                                <SelectableSetting\r\n                                    label=\"Definition Field\"\r\n                                    value={definitionField}\r\n                                    selections={fieldNames}\r\n                                    onChange={handleDefinitionFieldChange}\r\n                                    onSelectionChange={handleDefinitionFieldChange}\r\n                                />\r\n                                <SelectableSetting\r\n                                    label=\"Word Field\"\r\n                                    value={wordField}\r\n                                    selections={fieldNames}\r\n                                    onChange={handleWordFieldChange}\r\n                                    onSelectionChange={handleWordFieldChange}\r\n                                />\r\n                                <SelectableSetting\r\n                                    label=\"Audio Field\"\r\n                                    value={audioField}\r\n                                    selections={fieldNames}\r\n                                    onChange={handleAudioFieldChange}\r\n                                    onSelectionChange={handleAudioFieldChange}\r\n                                />\r\n                                <SelectableSetting\r\n                                    label=\"Image Field\"\r\n                                    value={imageField}\r\n                                    selections={fieldNames}\r\n                                    onChange={handleImageFieldChange}\r\n                                    onSelectionChange={handleImageFieldChange}\r\n                                />\r\n                                <SelectableSetting\r\n                                    label=\"Source Field\"\r\n                                    value={sourceField}\r\n                                    selections={fieldNames}\r\n                                    onChange={handleSourceFieldChange}\r\n                                    onSelectionChange={handleSourceFieldChange}\r\n                                />\r\n                                <SelectableSetting\r\n                                    label=\"URL Field\"\r\n                                    value={urlField}\r\n                                    selections={fieldNames}\r\n                                    onChange={handleUrlFieldChange}\r\n                                    onSelectionChange={handleUrlFieldChange}\r\n                                />\r\n                                {customFieldInputs}\r\n                                <Button\r\n                                    className={classes.addFieldButton}\r\n                                    onClick={(e) => setCustomFieldDialogOpen(true)}\r\n                                >\r\n                                    Add Custom Field\r\n                                </Button>\r\n                                <TagsTextField\r\n                                    label=\"Tags\"\r\n                                    helperText=\"Comma-separated list of strings\"\r\n                                    fullWidth\r\n                                    color=\"secondary\"\r\n                                    tags={tags}\r\n                                    onTagsChange={handleTagsChange}\r\n                                />\r\n                                <FormControlLabel\r\n                                    control={<Checkbox checked={preferMp3} onChange={handlePreferMp3Change} />}\r\n                                    label=\"Re-encode audio as mp3 (slower)\"\r\n                                />\r\n                                <TextField\r\n                                    type=\"number\"\r\n                                    label=\"Audio Padding Start\"\r\n                                    fullWidth\r\n                                    value={audioPaddingStart}\r\n                                    color=\"secondary\"\r\n                                    onChange={handleAudioPaddingStart}\r\n                                    inputProps={{\r\n                                        min: 0,\r\n                                        step: 1,\r\n                                    }}\r\n                                    InputProps={{\r\n                                        endAdornment: <InputAdornment position=\"end\">ms</InputAdornment>,\r\n                                    }}\r\n                                />\r\n                                <TextField\r\n                                    type=\"number\"\r\n                                    label=\"Audio Padding End\"\r\n                                    fullWidth\r\n                                    value={audioPaddingEnd}\r\n                                    color=\"secondary\"\r\n                                    onChange={handleAudioPaddingEnd}\r\n                                    inputProps={{\r\n                                        min: 0,\r\n                                        step: 1,\r\n                                    }}\r\n                                    InputProps={{\r\n                                        endAdornment: <InputAdornment position=\"end\">ms</InputAdornment>,\r\n                                    }}\r\n                                />\r\n                                <TextField\r\n                                    type=\"number\"\r\n                                    label=\"Max Image Width\"\r\n                                    fullWidth\r\n                                    value={maxImageWidth}\r\n                                    color=\"secondary\"\r\n                                    onChange={handleMaxImageWidth}\r\n                                    inputProps={{\r\n                                        min: 0,\r\n                                        step: 1,\r\n                                    }}\r\n                                />\r\n                                <TextField\r\n                                    type=\"number\"\r\n                                    label=\"Max Image Height\"\r\n                                    fullWidth\r\n                                    value={maxImageHeight}\r\n                                    color=\"secondary\"\r\n                                    onChange={handleMaxImageHeight}\r\n                                    inputProps={{\r\n                                        min: 0,\r\n                                        step: 1,\r\n                                    }}\r\n                                />\r\n                            </FormGroup>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <FormLabel>Video Subtitle Appearance</FormLabel>\r\n                            <FormGroup>\r\n                                <div className={classes.subtitleSetting}>\r\n                                    <TextField\r\n                                        type=\"color\"\r\n                                        label=\"Subtitle Color\"\r\n                                        fullWidth\r\n                                        value={subtitleColor}\r\n                                        color=\"secondary\"\r\n                                        onChange={handleSubtitleColorChange}\r\n                                    />\r\n                                </div>\r\n                                <div className={classes.subtitleSetting}>\r\n                                    <TextField\r\n                                        type=\"number\"\r\n                                        label=\"Subtitle Size\"\r\n                                        fullWidth\r\n                                        value={subtitleSize}\r\n                                        color=\"secondary\"\r\n                                        onChange={handleSubtitleSizeChange}\r\n                                        inputProps={{\r\n                                            min: 1,\r\n                                            step: 1,\r\n                                        }}\r\n                                    />\r\n                                </div>\r\n                                <div className={classes.subtitleSetting}>\r\n                                    <TextField\r\n                                        type=\"color\"\r\n                                        label=\"Subtitle Outline Color\"\r\n                                        fullWidth\r\n                                        value={subtitleOutlineColor}\r\n                                        color=\"secondary\"\r\n                                        onChange={handleSubtitleOutlineColorChange}\r\n                                    />\r\n                                </div>\r\n                                <div className={classes.subtitleSetting}>\r\n                                    <TextField\r\n                                        type=\"number\"\r\n                                        label=\"Subtitle Outline Thickness\"\r\n                                        fullWidth\r\n                                        value={subtitleOutlineThickness}\r\n                                        onChange={handleSubtitleOutlineThicknessChange}\r\n                                        inputProps={{\r\n                                            min: 0,\r\n                                            step: 1,\r\n                                        }}\r\n                                        color=\"secondary\"\r\n                                    />\r\n                                </div>\r\n                                <div className={classes.subtitleSetting}>\r\n                                    <TextField\r\n                                        type=\"color\"\r\n                                        label=\"Subtitle Background Color\"\r\n                                        fullWidth\r\n                                        value={subtitleBackgroundColor}\r\n                                        color=\"secondary\"\r\n                                        onChange={handleSubtitleBackgroundColorChange}\r\n                                    />\r\n                                </div>\r\n                                <div className={classes.subtitleSetting}>\r\n                                    <TextField\r\n                                        type=\"number\"\r\n                                        label=\"Subtitle Background Opacity\"\r\n                                        fullWidth\r\n                                        inputProps={{\r\n                                            min: 0,\r\n                                            max: 1,\r\n                                            step: 0.1,\r\n                                        }}\r\n                                        value={subtitleBackgroundOpacity}\r\n                                        color=\"secondary\"\r\n                                        onChange={handleSubtitleBackgroundOpacityChange}\r\n                                    />\r\n                                </div>\r\n                                <div className={classes.subtitleSetting}>\r\n                                    <TextField\r\n                                        type=\"text\"\r\n                                        label=\"Subtitle Font Family\"\r\n                                        placeholder=\"Inherited\"\r\n                                        fullWidth\r\n                                        value={subtitleFontFamily}\r\n                                        color=\"secondary\"\r\n                                        onChange={handleSubtitleFontFamilyChange}\r\n                                    />\r\n                                </div>\r\n                                <div className={classes.subtitlePreview}>\r\n                                    <input\r\n                                        value={subtitlePreview}\r\n                                        className={classes.subtitlePreviewInput}\r\n                                        onChange={handleSubtitlePreviewChange}\r\n                                        style={subtitlePreviewStyles}\r\n                                    />\r\n                                </div>\r\n                            </FormGroup>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <FormLabel>Theme</FormLabel>\r\n                            <div>\r\n                                <FormControlLabel\r\n                                    control={\r\n                                        <Radio\r\n                                            checked={themeType === 'light'}\r\n                                            value=\"light\"\r\n                                            onChange={handleThemeTypeChange}\r\n                                        />\r\n                                    }\r\n                                    label=\"Light\"\r\n                                />\r\n                                <FormControlLabel\r\n                                    control={\r\n                                        <Radio\r\n                                            checked={themeType === 'dark'}\r\n                                            value=\"dark\"\r\n                                            onChange={handleThemeTypeChange}\r\n                                        />\r\n                                    }\r\n                                    label=\"Dark\"\r\n                                />\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose}>OK</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </React.Fragment>\r\n    );\r\n}\r\n","import { AsbplayerSettingsProvider } from '@project/common';\r\n\r\nconst defaultAnkiConnectUrl = 'http://127.0.0.1:8765';\r\nconst defaultSubtitleSize = 36;\r\nconst defaultSubtitleColor = '#ffffff';\r\nconst defaultSubtitleOutlineThickness = 0;\r\nconst defaultSubtitleOutlineColor = '#000000';\r\nconst defaultSubtitleBackgroundColor = '#000000';\r\nconst defaultSubtitleBackgroundOpacity = 0.5;\r\nconst defaultSubtitleFontFamily = '';\r\nconst defaultSubtitlePreview = 'アあ安';\r\nconst defaultVolume = 100;\r\nconst defaultAudioPaddingStart = 0;\r\nconst defaultAudioPaddingEnd = 500;\r\nconst defaultMaxImageWidth = 0;\r\nconst defaultMaxImageHeight = 0;\r\nconst defaultSurroundingSubtitlesCountRadius = 1;\r\nconst defaultSurroundingSubtitlesTimeRadius = 5000;\r\n\r\nconst ankiConnectUrlKey = 'ankiConnectUrl';\r\nconst deckKey = 'deck';\r\nconst noteTypeKey = 'noteType';\r\nconst sentenceFieldKey = 'sentenceField';\r\nconst definitionFieldKey = 'definitionField';\r\nconst audioFieldKey = 'audioField';\r\nconst imageFieldKey = 'imageField';\r\nconst wordFieldKey = 'wordField';\r\nconst sourceFieldKey = 'sourceField';\r\nconst urlFieldKey = 'urlField';\r\nconst customAnkiFieldsKey = 'customAnkiFields';\r\nconst tagsKey = 'tags';\r\nconst subtitleSizeKey = 'subtitleSize';\r\nconst subtitleColorKey = 'subtitleColor';\r\nconst subtitleOutlineThicknessKey = 'subtitleOutlineThickness';\r\nconst subtitleOutlineColorKey = 'subtitleOutlineColor';\r\nconst subtitleBackgroundColorKey = 'subtitleBackgroundColor';\r\nconst subtitleBackgroundOpacityKey = 'subtitleBackgroundOpacity';\r\nconst subtitleFontFamilyKey = 'subtitleFontFamily';\r\nconst subtitlePreviewKey = 'subtitlePreview';\r\nconst audioPaddingStartKey = 'audioPaddingStart';\r\nconst audioPaddingEndKey = 'audioPaddingEnd';\r\nconst maxImageWidthKey = 'maxImageWidth';\r\nconst maxImageHeightKey = 'maxImageHeight';\r\nconst volumeKey = 'volume';\r\nconst preferMp3Key = 'preferMp3';\r\nconst themeTypeKey = 'themeType';\r\n\r\nexport default class SettingsProvider implements AsbplayerSettingsProvider {\r\n    private _tags?: string[];\r\n\r\n    constructor() {\r\n        // Cache tags so that it can be used in useEffect dependencies\r\n        this._tags = this.tags;\r\n    }\r\n\r\n    get settings() {\r\n        return {\r\n            ankiConnectUrl: this.ankiConnectUrl,\r\n            deck: this.deck,\r\n            noteType: this.noteType,\r\n            sentenceField: this.sentenceField,\r\n            definitionField: this.definitionField,\r\n            audioField: this.audioField,\r\n            imageField: this.imageField,\r\n            wordField: this.wordField,\r\n            urlField: this.urlField,\r\n            customAnkiFields: this.customAnkiFields,\r\n            tags: this.tags,\r\n            sourceField: this.sourceField,\r\n            subtitleSize: this.subtitleSize,\r\n            subtitleColor: this.subtitleColor,\r\n            subtitleOutlineThickness: this.subtitleOutlineThickness,\r\n            subtitleOutlineColor: this.subtitleOutlineColor,\r\n            subtitleBackgroundColor: this.subtitleBackgroundColor,\r\n            subtitleBackgroundOpacity: this.subtitleBackgroundOpacity,\r\n            subtitleFontFamily: this.subtitleFontFamily,\r\n            subtitlePreview: this.subtitlePreview,\r\n            preferMp3: this.preferMp3,\r\n            themeType: this.themeType,\r\n            audioPaddingStart: this.audioPaddingStart,\r\n            audioPaddingEnd: this.audioPaddingEnd,\r\n            maxImageWidth: this.maxImageWidth,\r\n            maxImageHeight: this.maxImageHeight,\r\n            surroundingSubtitlesCountRadius: this.surroundingSubtitlesCountRadius,\r\n            surroundingSubtitlesTimeRadius: this.surroundingSubtitlesTimeRadius,\r\n            volume: this.volume,\r\n        };\r\n    }\r\n\r\n    set settings(newSettings) {\r\n        this.ankiConnectUrl = newSettings.ankiConnectUrl;\r\n        this.deck = newSettings.deck;\r\n        this.noteType = newSettings.noteType;\r\n        this.sentenceField = newSettings.sentenceField;\r\n        this.definitionField = newSettings.definitionField;\r\n        this.audioField = newSettings.audioField;\r\n        this.imageField = newSettings.imageField;\r\n        this.wordField = newSettings.wordField;\r\n        this.sourceField = newSettings.sourceField;\r\n        this.urlField = newSettings.urlField;\r\n        this.tags = newSettings.tags;\r\n        this.subtitleSize = newSettings.subtitleSize;\r\n        this.subtitleColor = newSettings.subtitleColor;\r\n        this.subtitleOutlineThickness = newSettings.subtitleOutlineThickness;\r\n        this.subtitleOutlineColor = newSettings.subtitleOutlineColor;\r\n        this.subtitleBackgroundColor = newSettings.subtitleBackgroundColor;\r\n        this.subtitleBackgroundOpacity = newSettings.subtitleBackgroundOpacity;\r\n        this.subtitleFontFamily = newSettings.subtitleFontFamily;\r\n        this.subtitlePreview = newSettings.subtitlePreview;\r\n        this.customAnkiFields = newSettings.customAnkiFields;\r\n        this.preferMp3 = newSettings.preferMp3;\r\n        this.themeType = newSettings.themeType;\r\n        this.audioPaddingStart = newSettings.audioPaddingStart;\r\n        this.audioPaddingEnd = newSettings.audioPaddingEnd;\r\n        this.maxImageWidth = newSettings.maxImageWidth;\r\n        this.maxImageHeight = newSettings.maxImageHeight;\r\n        this.volume = newSettings.volume;\r\n    }\r\n\r\n    get subtitleSettings() {\r\n        return {\r\n            subtitleSize: this.subtitleSize,\r\n            subtitleColor: this.subtitleColor,\r\n            subtitleOutlineThickness: this.subtitleOutlineThickness,\r\n            subtitleOutlineColor: this.subtitleOutlineColor,\r\n            subtitleBackgroundColor: this.subtitleBackgroundColor,\r\n            subtitleBackgroundOpacity: this.subtitleBackgroundOpacity,\r\n            subtitleFontFamily: this.subtitleFontFamily,\r\n        };\r\n    }\r\n\r\n    get ankiSettings() {\r\n        return {\r\n            ankiConnectUrl: this.ankiConnectUrl,\r\n            deck: this.deck,\r\n            noteType: this.noteType,\r\n            sentenceField: this.sentenceField,\r\n            definitionField: this.definitionField,\r\n            audioField: this.audioField,\r\n            imageField: this.imageField,\r\n            wordField: this.wordField,\r\n            sourceField: this.sourceField,\r\n            urlField: this.urlField,\r\n            customAnkiFields: this.customAnkiFields,\r\n            tags: this.tags,\r\n            preferMp3: this.preferMp3,\r\n            audioPaddingStart: this.audioPaddingStart,\r\n            audioPaddingEnd: this.audioPaddingEnd,\r\n            maxImageWidth: this.maxImageWidth,\r\n            maxImageHeight: this.maxImageHeight,\r\n            surroundingSubtitlesCountRadius: this.surroundingSubtitlesCountRadius,\r\n            surroundingSubtitlesTimeRadius: this.surroundingSubtitlesTimeRadius,\r\n        };\r\n    }\r\n\r\n    get miscSettings() {\r\n        return {\r\n            themeType: this.themeType,\r\n        };\r\n    }\r\n\r\n    _getNumberItem(key: string, defaultValue: number) {\r\n        const value = localStorage.getItem(key);\r\n\r\n        if (value === null) {\r\n            return defaultValue;\r\n        }\r\n\r\n        return Number(value);\r\n    }\r\n\r\n    _setOptionalItem(key: string, value?: string) {\r\n        if (typeof value === 'undefined') {\r\n            localStorage.removeItem(key);\r\n        } else {\r\n            localStorage.setItem(key, value);\r\n        }\r\n    }\r\n\r\n    get ankiConnectUrl() {\r\n        return localStorage.getItem(ankiConnectUrlKey) || defaultAnkiConnectUrl;\r\n    }\r\n\r\n    set ankiConnectUrl(url) {\r\n        localStorage.setItem(ankiConnectUrlKey, url);\r\n    }\r\n\r\n    get deck() {\r\n        return localStorage.getItem(deckKey) ?? undefined;\r\n    }\r\n\r\n    set deck(deck) {\r\n        this._setOptionalItem(deckKey, deck);\r\n    }\r\n\r\n    get noteType() {\r\n        return localStorage.getItem(noteTypeKey) ?? undefined;\r\n    }\r\n\r\n    set noteType(noteType) {\r\n        this._setOptionalItem(noteTypeKey, noteType);\r\n    }\r\n\r\n    get sentenceField() {\r\n        return localStorage.getItem(sentenceFieldKey) ?? undefined;\r\n    }\r\n\r\n    set sentenceField(sentenceField) {\r\n        this._setOptionalItem(sentenceFieldKey, sentenceField);\r\n    }\r\n\r\n    get definitionField() {\r\n        return localStorage.getItem(definitionFieldKey) ?? undefined;\r\n    }\r\n\r\n    set definitionField(definitionField) {\r\n        this._setOptionalItem(definitionFieldKey, definitionField);\r\n    }\r\n\r\n    get audioField() {\r\n        return localStorage.getItem(audioFieldKey) ?? undefined;\r\n    }\r\n\r\n    set audioField(audioField) {\r\n        this._setOptionalItem(audioFieldKey, audioField);\r\n    }\r\n\r\n    get imageField() {\r\n        return localStorage.getItem(imageFieldKey) ?? undefined;\r\n    }\r\n\r\n    set imageField(imageField) {\r\n        this._setOptionalItem(imageFieldKey, imageField);\r\n    }\r\n\r\n    get wordField() {\r\n        return localStorage.getItem(wordFieldKey) ?? undefined;\r\n    }\r\n\r\n    set wordField(wordField) {\r\n        this._setOptionalItem(wordFieldKey, wordField);\r\n    }\r\n\r\n    get sourceField() {\r\n        return localStorage.getItem(sourceFieldKey) ?? undefined;\r\n    }\r\n\r\n    set sourceField(sourceField) {\r\n        this._setOptionalItem(sourceFieldKey, sourceField);\r\n    }\r\n\r\n    get urlField() {\r\n        return localStorage.getItem(urlFieldKey) ?? undefined;\r\n    }\r\n\r\n    set urlField(urlField) {\r\n        this._setOptionalItem(urlFieldKey, urlField);\r\n    }\r\n\r\n    get customAnkiFields() {\r\n        const ankiFieldsString = localStorage.getItem(customAnkiFieldsKey);\r\n\r\n        if (ankiFieldsString) {\r\n            return JSON.parse(ankiFieldsString);\r\n        }\r\n\r\n        return {};\r\n    }\r\n\r\n    set customAnkiFields(customAnkiFields) {\r\n        localStorage.setItem(customAnkiFieldsKey, JSON.stringify(customAnkiFields));\r\n    }\r\n\r\n    get tags() {\r\n        if (typeof this._tags !== 'undefined') {\r\n            return this._tags;\r\n        }\r\n\r\n        const tagsString = localStorage.getItem(tagsKey);\r\n\r\n        if (tagsString) {\r\n            this._tags = JSON.parse(tagsString) as string[];\r\n            return this._tags;\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    set tags(tags) {\r\n        localStorage.setItem(tagsKey, JSON.stringify(tags));\r\n        this._tags = undefined;\r\n    }\r\n\r\n    get subtitleColor() {\r\n        return localStorage.getItem(subtitleColorKey) || defaultSubtitleColor;\r\n    }\r\n\r\n    set subtitleColor(subtitleColor) {\r\n        localStorage.setItem(subtitleColorKey, subtitleColor);\r\n    }\r\n\r\n    get subtitleSize() {\r\n        return this._getNumberItem(subtitleSizeKey, defaultSubtitleSize);\r\n    }\r\n\r\n    set subtitleSize(subtitleSize) {\r\n        localStorage.setItem(subtitleSizeKey, String(subtitleSize));\r\n    }\r\n\r\n    get subtitleOutlineColor() {\r\n        return localStorage.getItem(subtitleOutlineColorKey) || defaultSubtitleOutlineColor;\r\n    }\r\n\r\n    set subtitleOutlineColor(subtitleOutlineColor) {\r\n        localStorage.setItem(subtitleOutlineColorKey, subtitleOutlineColor);\r\n    }\r\n\r\n    get subtitleOutlineThickness() {\r\n        return this._getNumberItem(subtitleOutlineThicknessKey, defaultSubtitleOutlineThickness);\r\n    }\r\n\r\n    set subtitleOutlineThickness(subtitleOutlineThickness) {\r\n        localStorage.setItem(subtitleOutlineThicknessKey, String(subtitleOutlineThickness));\r\n    }\r\n\r\n    get subtitleBackgroundColor() {\r\n        return localStorage.getItem(subtitleBackgroundColorKey) || defaultSubtitleBackgroundColor;\r\n    }\r\n\r\n    set subtitleBackgroundColor(subtitleBackgroundColor) {\r\n        localStorage.setItem(subtitleBackgroundColorKey, subtitleBackgroundColor);\r\n    }\r\n\r\n    get subtitleBackgroundOpacity() {\r\n        return this._getNumberItem(subtitleBackgroundOpacityKey, defaultSubtitleBackgroundOpacity);\r\n    }\r\n\r\n    set subtitleBackgroundOpacity(subtitleBackgroundOpacity) {\r\n        localStorage.setItem(subtitleBackgroundOpacityKey, String(subtitleBackgroundOpacity));\r\n    }\r\n\r\n    get subtitleFontFamily() {\r\n        return localStorage.getItem(subtitleFontFamilyKey) || defaultSubtitleFontFamily;\r\n    }\r\n\r\n    set subtitleFontFamily(subtitleFontFamily) {\r\n        localStorage.setItem(subtitleFontFamilyKey, subtitleFontFamily);\r\n    }\r\n\r\n    get subtitlePreview() {\r\n        return localStorage.getItem(subtitlePreviewKey) || defaultSubtitlePreview;\r\n    }\r\n\r\n    set subtitlePreview(subtitlePreview) {\r\n        localStorage.setItem(subtitlePreviewKey, subtitlePreview);\r\n    }\r\n\r\n    get volume() {\r\n        return this._getNumberItem(volumeKey, defaultVolume);\r\n    }\r\n\r\n    set volume(volume) {\r\n        localStorage.setItem(volumeKey, String(volume));\r\n    }\r\n\r\n    get preferMp3() {\r\n        return localStorage.getItem(preferMp3Key) === 'true' || false;\r\n    }\r\n\r\n    set preferMp3(preferMp3) {\r\n        localStorage.setItem(preferMp3Key, String(preferMp3));\r\n    }\r\n\r\n    get themeType() {\r\n        const themeType = localStorage.getItem(themeTypeKey) as 'dark' | 'light' | null;\r\n\r\n        if (themeType === null) {\r\n            return 'dark';\r\n        }\r\n\r\n        return themeType;\r\n    }\r\n\r\n    set themeType(themeType: 'dark' | 'light') {\r\n        localStorage.setItem(themeTypeKey, themeType);\r\n    }\r\n\r\n    get audioPaddingStart() {\r\n        const value = localStorage.getItem(audioPaddingStartKey);\r\n\r\n        if (!value) {\r\n            return defaultAudioPaddingStart;\r\n        }\r\n\r\n        return Number(value);\r\n    }\r\n\r\n    set audioPaddingStart(audioPaddingStart) {\r\n        localStorage.setItem(audioPaddingStartKey, String(audioPaddingStart));\r\n    }\r\n\r\n    get audioPaddingEnd() {\r\n        return this._getNumberItem(audioPaddingEndKey, defaultAudioPaddingEnd);\r\n    }\r\n\r\n    set audioPaddingEnd(audioPaddingEnd) {\r\n        localStorage.setItem(audioPaddingEndKey, String(audioPaddingEnd));\r\n    }\r\n\r\n    get maxImageWidth() {\r\n        const value = localStorage.getItem(maxImageWidthKey);\r\n\r\n        if (!value) {\r\n            return defaultMaxImageWidth;\r\n        }\r\n\r\n        return Number(value);\r\n    }\r\n\r\n    set maxImageWidth(maxImageWidth) {\r\n        localStorage.setItem(maxImageWidthKey, String(maxImageWidth));\r\n    }\r\n\r\n    get maxImageHeight() {\r\n        return this._getNumberItem(maxImageHeightKey, defaultMaxImageHeight);\r\n    }\r\n\r\n    set maxImageHeight(maxImageHeight) {\r\n        localStorage.setItem(maxImageHeightKey, String(maxImageHeight));\r\n    }\r\n\r\n    get surroundingSubtitlesCountRadius() {\r\n        // For now, not configurable\r\n        return defaultSurroundingSubtitlesCountRadius;\r\n    }\r\n\r\n    get surroundingSubtitlesTimeRadius() {\r\n        // For now, not configurable\r\n        return defaultSurroundingSubtitlesTimeRadius;\r\n    }\r\n}\r\n","import {\r\n    AnkiDialogRequestFromVideoMessage,\r\n    AudioTrackModel,\r\n    AudioTrackSelectedFromVideoMessage,\r\n    AudioTrackSelectedToVideoMessage,\r\n    CondensedModeToggleToVideoMessage,\r\n    CopyMessage,\r\n    CurrentTimeToVideoMessage,\r\n    FinishedAnkiDialogRequestToVideoMessage,\r\n    HideSubtitlePlayerToggleToVideoMessage,\r\n    OffsetFromVideoMessage,\r\n    PauseFromVideoMessage,\r\n    PlayFromVideoMessage,\r\n    ReadyFromVideoMessage,\r\n    ReadyStateFromVideoMessage,\r\n    ReadyToVideoMessage,\r\n    SubtitleModel,\r\n    SubtitlesToVideoMessage,\r\n    ToggleSubtitleTrackInListFromVideoMessage,\r\n} from '@project/common';\r\n\r\nexport default class PlayerChannel {\r\n    private channel?: BroadcastChannel;\r\n    private time: number;\r\n    private duration: number;\r\n    private readyCallbacks: ((duration: number) => void)[];\r\n    private playCallbacks: (() => void)[];\r\n    private pauseCallbacks: (() => void)[];\r\n    private currentTimeCallbacks: ((currentTime: number) => void)[];\r\n    private audioTrackSelectedCallbacks: ((id: string) => void)[];\r\n    private closeCallbacks: (() => void)[];\r\n    private subtitlesCallbacks: ((subtitles: SubtitleModel[]) => void)[];\r\n    private condensedModeToggleCallbacks: ((enabled: boolean) => void)[];\r\n    private hideSubtitlePlayerToggleCallbacks: ((enabled: boolean) => void)[];\r\n    private ankiDialogRequestCallbacks: (() => void)[];\r\n    private finishedAnkiDialogRequestCallbacks: ((resume: boolean) => void)[];\r\n\r\n    constructor(channel: string) {\r\n        this.channel = new BroadcastChannel(channel);\r\n        this.time = 0;\r\n        this.duration = 0;\r\n        this.playCallbacks = [];\r\n        this.pauseCallbacks = [];\r\n        this.currentTimeCallbacks = [];\r\n        this.audioTrackSelectedCallbacks = [];\r\n        this.closeCallbacks = [];\r\n        this.readyCallbacks = [];\r\n        this.subtitlesCallbacks = [];\r\n        this.condensedModeToggleCallbacks = [];\r\n        this.hideSubtitlePlayerToggleCallbacks = [];\r\n        this.ankiDialogRequestCallbacks = [];\r\n        this.finishedAnkiDialogRequestCallbacks = [];\r\n\r\n        const that = this;\r\n\r\n        this.channel.onmessage = (event) => {\r\n            switch (event.data.command) {\r\n                case 'init':\r\n                    // ignore, this is for the chrome extension\r\n                    break;\r\n                case 'ready':\r\n                    const readyMessage = event.data as ReadyToVideoMessage;\r\n\r\n                    for (let callback of that.readyCallbacks) {\r\n                        callback(readyMessage.duration);\r\n                    }\r\n                    break;\r\n                case 'play':\r\n                    for (let callback of that.playCallbacks) {\r\n                        callback();\r\n                    }\r\n                    break;\r\n                case 'pause':\r\n                    for (let callback of that.pauseCallbacks) {\r\n                        callback();\r\n                    }\r\n                    break;\r\n                case 'currentTime':\r\n                    const currentTimeMessage = event.data as CurrentTimeToVideoMessage;\r\n\r\n                    for (let callback of that.currentTimeCallbacks) {\r\n                        callback(currentTimeMessage.value);\r\n                    }\r\n                    break;\r\n                case 'audioTrackSelected':\r\n                    const audioTrackSelectedMessage = event.data as AudioTrackSelectedToVideoMessage;\r\n\r\n                    for (let callback of that.audioTrackSelectedCallbacks) {\r\n                        callback(audioTrackSelectedMessage.id);\r\n                    }\r\n                    break;\r\n                case 'close':\r\n                    for (let callback of that.closeCallbacks) {\r\n                        callback();\r\n                    }\r\n                    break;\r\n                case 'subtitles':\r\n                    const subtitlesMessage = event.data as SubtitlesToVideoMessage;\r\n\r\n                    for (let callback of that.subtitlesCallbacks) {\r\n                        callback(subtitlesMessage.value);\r\n                    }\r\n                    break;\r\n                case 'subtitleSettings':\r\n                    // ignore\r\n                    break;\r\n                case 'condensedModeToggle':\r\n                    const condensedModeToggleMessage = event.data as CondensedModeToggleToVideoMessage;\r\n\r\n                    for (let callback of that.condensedModeToggleCallbacks) {\r\n                        callback(condensedModeToggleMessage.value);\r\n                    }\r\n                    break;\r\n                case 'hideSubtitlePlayerToggle':\r\n                    const hideSubtitlePlayerToggleMessage = event.data as HideSubtitlePlayerToggleToVideoMessage;\r\n\r\n                    for (let callback of that.hideSubtitlePlayerToggleCallbacks) {\r\n                        callback(hideSubtitlePlayerToggleMessage.value);\r\n                    }\r\n                    break;\r\n                case 'ankiDialogRequest':\r\n                    for (let callback of that.ankiDialogRequestCallbacks) {\r\n                        callback();\r\n                    }\r\n                    break;\r\n                case 'finishedAnkiDialogRequest':\r\n                    const finishedAnkiDialogRequestMessage = event.data as FinishedAnkiDialogRequestToVideoMessage;\r\n\r\n                    for (let callback of that.finishedAnkiDialogRequestCallbacks) {\r\n                        callback(finishedAnkiDialogRequestMessage.resume);\r\n                    }\r\n                    break;\r\n                case 'ankiSettings':\r\n                    // ignore\r\n                    break;\r\n                case 'miscSettings':\r\n                    // ignore\r\n                    break;\r\n                default:\r\n                    console.error('Unrecognized event ' + event.data.command);\r\n            }\r\n        };\r\n    }\r\n\r\n    get currentTime() {\r\n        return this.time;\r\n    }\r\n\r\n    set currentTime(value) {\r\n        this.time = value;\r\n        this.channel?.postMessage({ command: 'currentTime', value: this.time, echo: true });\r\n    }\r\n\r\n    onPlay(callback: () => void) {\r\n        this.playCallbacks.push(callback);\r\n    }\r\n\r\n    onPause(callback: () => void) {\r\n        this.pauseCallbacks.push(callback);\r\n    }\r\n\r\n    onCurrentTime(callback: (currentTime: number) => void) {\r\n        this.currentTimeCallbacks.push(callback);\r\n    }\r\n\r\n    onAudioTrackSelected(callback: (id: string) => void) {\r\n        this.audioTrackSelectedCallbacks.push(callback);\r\n    }\r\n\r\n    onClose(callback: () => void) {\r\n        this.closeCallbacks.push(callback);\r\n    }\r\n\r\n    onReady(callback: (duration: number) => void) {\r\n        this.readyCallbacks.push(callback);\r\n    }\r\n\r\n    onSubtitles(callback: (subtitles: SubtitleModel[]) => void) {\r\n        this.subtitlesCallbacks.push(callback);\r\n    }\r\n\r\n    onCondensedModeToggle(callback: (enabled: boolean) => void) {\r\n        this.condensedModeToggleCallbacks.push(callback);\r\n    }\r\n\r\n    onHideSubtitlePlayerToggle(callback: (enabled: boolean) => void) {\r\n        this.hideSubtitlePlayerToggleCallbacks.push(callback);\r\n    }\r\n\r\n    onAnkiDialogRequest(callback: () => void) {\r\n        this.ankiDialogRequestCallbacks.push(callback);\r\n    }\r\n\r\n    onFinishedAnkiDialogRequest(callback: (resume: boolean) => void) {\r\n        this.finishedAnkiDialogRequestCallbacks.push(callback);\r\n    }\r\n\r\n    ready(\r\n        duration: number,\r\n        paused: boolean,\r\n        audioTracks: AudioTrackModel[] | undefined,\r\n        selectedAudioTrack: string | undefined\r\n    ) {\r\n        const message: ReadyFromVideoMessage = {\r\n            command: 'ready',\r\n            duration: duration,\r\n            paused: paused,\r\n            currentTime: 0,\r\n            audioTracks: audioTracks,\r\n            selectedAudioTrack: selectedAudioTrack,\r\n            playbackRate: 1,\r\n        };\r\n\r\n        this.channel?.postMessage(message);\r\n    }\r\n\r\n    readyState(readyState: number) {\r\n        const message: ReadyStateFromVideoMessage = { command: 'readyState', value: readyState };\r\n        this.channel?.postMessage(message);\r\n    }\r\n\r\n    play() {\r\n        const message: PlayFromVideoMessage = { command: 'play', echo: true };\r\n        this.channel?.postMessage(message);\r\n    }\r\n\r\n    pause() {\r\n        const message: PauseFromVideoMessage = { command: 'pause', echo: true };\r\n        this.channel?.postMessage(message);\r\n    }\r\n\r\n    audioTrackSelected(id: string) {\r\n        const message: AudioTrackSelectedFromVideoMessage = { command: 'audioTrackSelected', id: id };\r\n        this.channel?.postMessage(message);\r\n    }\r\n\r\n    offset(offset: number) {\r\n        const message: OffsetFromVideoMessage = { command: 'offset', value: offset };\r\n        this.channel?.postMessage(message);\r\n    }\r\n\r\n    popOutToggle() {\r\n        this.channel?.postMessage({ command: 'popOutToggle' });\r\n    }\r\n\r\n    copy(subtitle: SubtitleModel, surroundingSubtitles: SubtitleModel[], preventDuplicate?: boolean) {\r\n        const message: CopyMessage = {\r\n            command: 'copy',\r\n            subtitle: subtitle,\r\n            surroundingSubtitles: surroundingSubtitles,\r\n            preventDuplicate: preventDuplicate,\r\n        };\r\n\r\n        this.channel?.postMessage(message);\r\n    }\r\n\r\n    condensedModeToggle() {\r\n        this.channel?.postMessage({ command: 'condensedModeToggle' });\r\n    }\r\n\r\n    hideSubtitlePlayerToggle() {\r\n        this.channel?.postMessage({ command: 'hideSubtitlePlayerToggle' });\r\n    }\r\n\r\n    ankiDialogRequest(forwardToVideo: boolean) {\r\n        const message: AnkiDialogRequestFromVideoMessage = {\r\n            command: 'ankiDialogRequest',\r\n            forwardToVideo: forwardToVideo,\r\n        };\r\n        this.channel?.postMessage(message);\r\n    }\r\n\r\n    toggleSubtitleTrackInList(track: number) {\r\n        const message: ToggleSubtitleTrackInListFromVideoMessage = {\r\n            command: 'toggleSubtitleTrackInList',\r\n            track: track,\r\n        };\r\n        this.channel?.postMessage(message);\r\n    }\r\n\r\n    close() {\r\n        if (this.channel) {\r\n            this.channel.postMessage({ command: 'exit' });\r\n            this.channel.close();\r\n            this.channel = undefined;\r\n            this.playCallbacks = [];\r\n            this.pauseCallbacks = [];\r\n            this.currentTimeCallbacks = [];\r\n            this.audioTrackSelectedCallbacks = [];\r\n            this.closeCallbacks = [];\r\n            this.readyCallbacks = [];\r\n            this.subtitlesCallbacks = [];\r\n            this.condensedModeToggleCallbacks = [];\r\n            this.hideSubtitlePlayerToggleCallbacks = [];\r\n            this.ankiDialogRequestCallbacks = [];\r\n            this.finishedAnkiDialogRequestCallbacks = [];\r\n        }\r\n    }\r\n}\r\n","import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\r\nimport { isMobile } from 'react-device-detect';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useWindowSize } from '../hooks/useWindowSize';\r\nimport { arrayEquals, computeStyles } from '../services/Util';\r\nimport {\r\n    KeyBindings,\r\n    surroundingSubtitles,\r\n    mockSurroundingSubtitles,\r\n    humanReadableTime,\r\n    SubtitleSettings,\r\n    SubtitleModel,\r\n    AudioTrackModel,\r\n} from '@project/common';\r\nimport Alert from './Alert';\r\nimport Clock from '../services/Clock';\r\nimport Controls, { Point } from './Controls';\r\nimport PlayerChannel from '../services/PlayerChannel';\r\nimport SettingsProvider from '../services/SettingsProvider';\r\n\r\ninterface ExperimentalHTMLVideoElement extends HTMLVideoElement {\r\n    readonly audioTracks: any;\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        position: 'relative',\r\n        backgroundColor: 'black',\r\n        height: '100vh',\r\n        overflow: 'hidden',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n    },\r\n    video: {\r\n        margin: 'auto',\r\n    },\r\n    cursorHidden: {\r\n        cursor: 'none',\r\n    },\r\n});\r\n\r\nfunction makeSubtitleStyles(subtitleSettings: SubtitleSettings) {\r\n    return {\r\n        position: 'absolute',\r\n        paddingLeft: 20,\r\n        paddingRight: 20,\r\n        bottom: 100,\r\n        textAlign: 'center',\r\n        ...computeStyles(subtitleSettings),\r\n    };\r\n}\r\n\r\nfunction notifyReady(\r\n    element: ExperimentalHTMLVideoElement,\r\n    playerChannel: PlayerChannel,\r\n    setAudioTracks: React.Dispatch<React.SetStateAction<AudioTrackModel[] | undefined>>,\r\n    setSelectedAudioTrack: React.Dispatch<React.SetStateAction<string | undefined>>\r\n) {\r\n    if (window.outerWidth && element.videoWidth > 0 && element.videoHeight > 0) {\r\n        const availWidth = window.screen.availWidth - (window.outerWidth - window.innerWidth);\r\n        const availHeight = window.screen.availHeight - (window.outerHeight - window.innerHeight);\r\n        const resizeRatio = Math.min(1, Math.min(availWidth / element.videoWidth, availHeight / element.videoHeight));\r\n\r\n        window.resizeTo(\r\n            resizeRatio * element.videoWidth + (window.outerWidth - window.innerWidth),\r\n            resizeRatio * element.videoHeight + (window.outerHeight - window.innerHeight)\r\n        );\r\n    }\r\n\r\n    let tracks: AudioTrackModel[] | undefined;\r\n    let selectedTrack: string | undefined;\r\n\r\n    if (element.audioTracks) {\r\n        tracks = [];\r\n\r\n        for (let t of element.audioTracks) {\r\n            tracks.push({\r\n                id: t.id,\r\n                label: t.label,\r\n                language: t.language,\r\n            });\r\n\r\n            if (t.enabled) {\r\n                selectedTrack = t.id;\r\n            }\r\n        }\r\n    } else {\r\n        tracks = undefined;\r\n        selectedTrack = undefined;\r\n    }\r\n\r\n    setAudioTracks(tracks);\r\n    setSelectedAudioTrack(selectedTrack);\r\n    playerChannel.ready(element.duration, element.paused, tracks, selectedTrack);\r\n}\r\n\r\nfunction errorMessage(element: HTMLVideoElement) {\r\n    let error;\r\n    switch (element.error?.code) {\r\n        case 1:\r\n            error = 'Aborted';\r\n            break;\r\n        case 2:\r\n            error = 'Network error';\r\n            break;\r\n        case 3:\r\n            error = 'Decoding error';\r\n            break;\r\n        case 4:\r\n            error = 'Source not supported';\r\n            break;\r\n        default:\r\n            error = 'Unknown error';\r\n            break;\r\n    }\r\n\r\n    return error + ': ' + (element.error?.message || '<details missing>');\r\n}\r\n\r\nfunction useFullscreen() {\r\n    const [fullscreen, setFullscreen] = useState(Boolean(document.fullscreenElement));\r\n\r\n    useEffect(() => {\r\n        const listener = () => setFullscreen(Boolean(document.fullscreenElement));\r\n        document.addEventListener('fullscreenchange', listener);\r\n\r\n        return () => document.removeEventListener('fullscreenchange', listener);\r\n    }, []);\r\n\r\n    return fullscreen;\r\n}\r\n\r\ninterface Props {\r\n    settingsProvider: SettingsProvider;\r\n    videoFile: string;\r\n    channel: string;\r\n    popOut: boolean;\r\n    onError: (error: string) => void;\r\n}\r\n\r\ninterface IndexedSubtitleModel extends SubtitleModel {\r\n    index: number;\r\n}\r\n\r\nexport default function VideoPlayer(props: Props) {\r\n    const classes = useStyles();\r\n    const { settingsProvider, videoFile, channel, popOut, onError } = props;\r\n    const poppingInRef = useRef<boolean>();\r\n    const videoRef = useRef<ExperimentalHTMLVideoElement>();\r\n    const [windowWidth, windowHeight] = useWindowSize(true);\r\n    if (videoRef.current) {\r\n        videoRef.current.width = windowWidth;\r\n        videoRef.current.height = windowHeight;\r\n    }\r\n    const playerChannel = useMemo(() => new PlayerChannel(channel), [channel]);\r\n    const [playing, setPlaying] = useState<boolean>(false);\r\n    const fullscreen = useFullscreen();\r\n    const fullscreenRef = useRef<boolean>();\r\n    fullscreenRef.current = fullscreen;\r\n    const playingRef = useRef<boolean>();\r\n    playingRef.current = playing;\r\n    const [length, setLength] = useState<number>(0);\r\n    const [offset, setOffset] = useState<number>(0);\r\n    const [audioTracks, setAudioTracks] = useState<AudioTrackModel[]>();\r\n    const [selectedAudioTrack, setSelectedAudioTrack] = useState<string>();\r\n    const [subtitles, setSubtitles] = useState<SubtitleModel[]>([]);\r\n    const [showSubtitles, setShowSubtitles] = useState<IndexedSubtitleModel[]>([]);\r\n    const [subtitlesEnabled, setSubtitlesEnabled] = useState(true);\r\n    const [disabledSubtitleTracks, setDisabledSubtitleTracks] = useState<{ [index: number]: boolean }>({});\r\n    const [condensedModeEnabled, setCondensedModeEnabled] = useState<boolean>(false);\r\n    const [subtitlePlayerHidden, setSubtitlePlayerHidden] = useState<boolean>(false);\r\n    const showSubtitlesRef = useRef<IndexedSubtitleModel[]>([]);\r\n    showSubtitlesRef.current = showSubtitles;\r\n    const clock = useMemo<Clock>(() => new Clock(), []);\r\n    const mousePositionRef = useRef<Point>({ x: 0, y: 0 });\r\n    const [showCursor, setShowCursor] = useState<boolean>(false);\r\n    const lastMouseMovementTimestamp = useRef<number>(0);\r\n    const containerRef = useRef<HTMLDivElement>(null);\r\n    const [alert, setAlert] = useState<string>();\r\n    const [alertOpen, setAlertOpen] = useState<boolean>(false);\r\n    const [returnToFullscreenOnFinishedAnkiDialogRequest, setReturnToFullscreenOnFinishedAnkiDialogRequest] =\r\n        useState<boolean>(false);\r\n    const returnToFullscreenOnFinishedAnkiDialogRequestRef = useRef<boolean>();\r\n    returnToFullscreenOnFinishedAnkiDialogRequestRef.current = returnToFullscreenOnFinishedAnkiDialogRequest;\r\n\r\n    const videoRefCallback = useCallback(\r\n        (element) => {\r\n            if (element) {\r\n                const videoElement = element as ExperimentalHTMLVideoElement;\r\n                videoRef.current = videoElement;\r\n\r\n                if (videoElement.readyState === 4) {\r\n                    notifyReady(element, playerChannel, setAudioTracks, setSelectedAudioTrack);\r\n                } else {\r\n                    videoElement.onloadeddata = (event) => {\r\n                        notifyReady(element, playerChannel, setAudioTracks, setSelectedAudioTrack);\r\n                    };\r\n                }\r\n\r\n                videoElement.oncanplay = (event) => {\r\n                    playerChannel.readyState(4);\r\n\r\n                    if (playingRef.current) {\r\n                        clock.start();\r\n                    }\r\n                };\r\n\r\n                videoElement.ontimeupdate = (event) => clock.setTime(element.currentTime * 1000);\r\n\r\n                videoElement.onerror = (event) => onError(errorMessage(element));\r\n            }\r\n        },\r\n        [clock, playerChannel, onError]\r\n    );\r\n\r\n    function selectAudioTrack(id: string) {\r\n        const audioTracks = videoRef.current?.audioTracks;\r\n\r\n        if (!audioTracks) {\r\n            return;\r\n        }\r\n\r\n        // @ts-ignore\r\n        for (const t of audioTracks) {\r\n            if (t.id === id) {\r\n                t.enabled = true;\r\n            } else {\r\n                t.enabled = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        playerChannel.onReady((duration) => setLength(duration));\r\n\r\n        playerChannel.onPlay(async () => {\r\n            await videoRef.current?.play();\r\n            clock.start();\r\n            setPlaying(true);\r\n        });\r\n\r\n        playerChannel.onPause(() => {\r\n            videoRef.current?.pause();\r\n            clock.stop();\r\n            setPlaying(false);\r\n        });\r\n\r\n        playerChannel.onCurrentTime((currentTime) => {\r\n            if (videoRef.current) {\r\n                videoRef.current.currentTime = currentTime;\r\n            }\r\n\r\n            if (videoRef.current?.readyState === 4) {\r\n                playerChannel.readyState(4);\r\n            }\r\n\r\n            clock.stop();\r\n            clock.setTime(currentTime * 1000);\r\n        });\r\n\r\n        playerChannel.onAudioTrackSelected((id) => {\r\n            selectAudioTrack(id);\r\n            setSelectedAudioTrack(id);\r\n            playerChannel.audioTrackSelected(id);\r\n        });\r\n\r\n        playerChannel.onClose(() => {\r\n            playerChannel.close();\r\n            window.close();\r\n        });\r\n\r\n        playerChannel.onSubtitles((subtitles) => {\r\n            setSubtitles(subtitles);\r\n\r\n            if (subtitles && subtitles.length > 0) {\r\n                const s = subtitles[0];\r\n                const offset = s.start - s.originalStart;\r\n                setOffset(offset);\r\n            }\r\n        });\r\n\r\n        playerChannel.onCondensedModeToggle((enabled) => setCondensedModeEnabled(enabled));\r\n        playerChannel.onHideSubtitlePlayerToggle((hidden) => setSubtitlePlayerHidden(hidden));\r\n        playerChannel.onAnkiDialogRequest(() => {\r\n            if (fullscreenRef.current && !popOut) {\r\n                document.exitFullscreen();\r\n                setReturnToFullscreenOnFinishedAnkiDialogRequest(true);\r\n            }\r\n        });\r\n\r\n        playerChannel.onFinishedAnkiDialogRequest(async (resume) => {\r\n            if (returnToFullscreenOnFinishedAnkiDialogRequestRef.current) {\r\n                if (resume) {\r\n                    try {\r\n                        await containerRef.current?.requestFullscreen();\r\n                    } catch (e) {\r\n                        console.error(e);\r\n                    }\r\n                }\r\n\r\n                setReturnToFullscreenOnFinishedAnkiDialogRequest(false);\r\n            }\r\n        });\r\n\r\n        window.onbeforeunload = (e) => {\r\n            if (!poppingInRef.current) {\r\n                playerChannel.close();\r\n            }\r\n        };\r\n\r\n        return () => playerChannel.close();\r\n    }, [clock, playerChannel, popOut]);\r\n\r\n    const handlePlay = useCallback(() => {\r\n        if (videoRef.current) {\r\n            playerChannel.play();\r\n        }\r\n    }, [playerChannel]);\r\n\r\n    const handlePause = useCallback(() => playerChannel.pause(), [playerChannel]);\r\n\r\n    const handleSeek = useCallback(\r\n        (progress) => {\r\n            if (playingRef.current) {\r\n                clock.stop();\r\n            }\r\n\r\n            const time = progress * length;\r\n            playerChannel.currentTime = time / 1000;\r\n        },\r\n        [length, clock, playerChannel]\r\n    );\r\n\r\n    function handleMouseMove(e: React.MouseEvent<HTMLDivElement>) {\r\n        lastMouseMovementTimestamp.current = Date.now();\r\n\r\n        if (!containerRef.current) {\r\n            return;\r\n        }\r\n\r\n        var bounds = containerRef.current.getBoundingClientRect();\r\n        mousePositionRef.current.x =  e.clientX - bounds.left;\r\n        mousePositionRef.current.y = e.clientY - bounds.top;\r\n    }\r\n\r\n    const handleAudioTrackSelected = useCallback(\r\n        (id) => {\r\n            if (playingRef.current) {\r\n                clock.stop();\r\n                playerChannel.pause();\r\n            }\r\n\r\n            selectAudioTrack(id);\r\n            setSelectedAudioTrack(id);\r\n            playerChannel.currentTime = 0;\r\n            playerChannel.audioTrackSelected(id);\r\n        },\r\n        [playerChannel, clock]\r\n    );\r\n\r\n    useEffect(() => {\r\n        if (!subtitles || subtitles.length === 0) {\r\n            return;\r\n        }\r\n\r\n        const interval = setInterval(() => {\r\n            const now = clock.time(length);\r\n            let showSubtitles = [];\r\n\r\n            for (let i = 0; i < subtitles.length; ++i) {\r\n                const s = subtitles[i];\r\n\r\n                if (now >= s.start && now < s.end && !disabledSubtitleTracks[s.track]) {\r\n                    showSubtitles.push({ ...s, index: i });\r\n                }\r\n\r\n                if (now < s.start) {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            showSubtitles = showSubtitles.sort((s1, s2) => s1.track - s2.track);\r\n\r\n            if (!arrayEquals(showSubtitles, showSubtitlesRef.current, (s1, s2) => s1.index === s2.index)) {\r\n                setShowSubtitles(showSubtitles);\r\n            }\r\n        }, 50);\r\n\r\n        return () => clearTimeout(interval);\r\n    }, [subtitles, disabledSubtitleTracks, clock, length]);\r\n\r\n    const handleOffsetChange = useCallback(\r\n        (offset) => {\r\n            setOffset(offset);\r\n            setSubtitles((subtitles) =>\r\n                subtitles.map((s) => ({\r\n                    text: s.text,\r\n                    start: s.originalStart + offset,\r\n                    originalStart: s.originalStart,\r\n                    end: s.originalEnd + offset,\r\n                    originalEnd: s.originalEnd,\r\n                    track: s.track,\r\n                }))\r\n            );\r\n            playerChannel.offset(offset);\r\n        },\r\n        [playerChannel]\r\n    );\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindSeekToSubtitle(\r\n            (event, subtitle) => {\r\n                event.stopPropagation();\r\n                event.preventDefault();\r\n                playerChannel.currentTime = subtitle.start / 1000;\r\n            },\r\n            () => !videoRef.current,\r\n            () => clock.time(length),\r\n            () => subtitles\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [playerChannel, subtitles, length, clock]);\r\n\r\n    const calculateSurroundingSubtitles = useCallback(\r\n        (index: number) => {\r\n            return surroundingSubtitles(\r\n                subtitles,\r\n                index,\r\n                settingsProvider.surroundingSubtitlesCountRadius,\r\n                settingsProvider.surroundingSubtitlesTimeRadius\r\n            );\r\n        },\r\n        [subtitles, settingsProvider.surroundingSubtitlesCountRadius, settingsProvider.surroundingSubtitlesTimeRadius]\r\n    );\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindCopy<IndexedSubtitleModel>(\r\n            (event, subtitle) => {\r\n                event.stopPropagation();\r\n                event.preventDefault();\r\n\r\n                const noSubtitles = !subtitles || subtitles.length === 0;\r\n\r\n                playerChannel.copy(\r\n                    subtitle,\r\n                    noSubtitles\r\n                        ? mockSurroundingSubtitles(subtitle, length, 5000)\r\n                        : calculateSurroundingSubtitles(subtitle.index)\r\n                );\r\n\r\n                if (fullscreen) {\r\n                    setAlert(\r\n                        subtitle.text === ''\r\n                            ? `Saved ${humanReadableTime(subtitle.start)}`\r\n                            : `Copied: \"${subtitle.text}\"`\r\n                    );\r\n                    setAlertOpen(true);\r\n                }\r\n            },\r\n            () => false,\r\n            () => {\r\n                if (!subtitles || subtitles.length === 0) {\r\n                    const timestamp = clock.time(length);\r\n                    const end = Math.min(timestamp + 5000, length);\r\n\r\n                    return {\r\n                        text: '',\r\n                        start: timestamp,\r\n                        originalStart: timestamp,\r\n                        end: end,\r\n                        originalEnd: end,\r\n                        track: 0,\r\n                        index: 0,\r\n                    };\r\n                }\r\n\r\n                if (!showSubtitlesRef.current || showSubtitlesRef.current.length === 0) {\r\n                    return undefined;\r\n                }\r\n\r\n                return showSubtitlesRef.current[0];\r\n            }\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [playerChannel, clock, length, subtitles, calculateSurroundingSubtitles, fullscreen]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindAdjustOffset(\r\n            (event, offset) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                handleOffsetChange(offset);\r\n            },\r\n            () => false,\r\n            () => subtitles\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [handleOffsetChange, subtitles]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindToggleSubtitles(\r\n            (event) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                setSubtitlesEnabled((enabled) => !enabled);\r\n            },\r\n            () => {},\r\n            () => false\r\n        );\r\n\r\n        return () => unbind();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindToggleSubtitleTrackInVideo(\r\n            (event, track) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                setDisabledSubtitleTracks((tracks) => {\r\n                    const newTracks = { ...tracks };\r\n                    newTracks[track] = !tracks[track];\r\n                    return newTracks;\r\n                });\r\n            },\r\n            () => {},\r\n            () => false\r\n        );\r\n\r\n        return () => unbind();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindToggleSubtitleTrackInList(\r\n            (event, track) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                playerChannel.toggleSubtitleTrackInList(track);\r\n            },\r\n            () => {},\r\n            () => false\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [playerChannel]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindOffsetToSubtitle(\r\n            (event, offset) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                handleOffsetChange(offset);\r\n            },\r\n            () => false,\r\n            () => clock.time(length),\r\n            () => subtitles\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [handleOffsetChange, subtitles, clock, length]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindAnkiExport(\r\n            (event) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n\r\n                if (!subtitles || subtitles.length === 0) {\r\n                    const timestamp = clock.time(length);\r\n                    const end = Math.min(timestamp + 5000, length);\r\n                    const subtitle = {\r\n                        text: '',\r\n                        start: timestamp,\r\n                        originalStart: timestamp,\r\n                        end: end,\r\n                        originalEnd: end,\r\n                        track: 0,\r\n                    };\r\n\r\n                    playerChannel.copy(subtitle, mockSurroundingSubtitles(subtitle, length, 5000), false);\r\n                } else if (showSubtitlesRef.current && showSubtitlesRef.current.length > 0) {\r\n                    const currentSubtitle = showSubtitlesRef.current[0];\r\n                    playerChannel.copy(currentSubtitle, calculateSurroundingSubtitles(currentSubtitle.index), true);\r\n                }\r\n\r\n                playerChannel.ankiDialogRequest(fullscreen);\r\n            },\r\n            () => false\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [playerChannel, subtitles, clock, length, calculateSurroundingSubtitles, fullscreen]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindPlay(\r\n            (event) => {\r\n                event.preventDefault();\r\n\r\n                if (playing) {\r\n                    playerChannel.pause();\r\n                } else {\r\n                    playerChannel.play();\r\n                }\r\n            },\r\n            () => false\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [playing, playerChannel]);\r\n\r\n    const handleSubtitlesToggle = useCallback(() => setSubtitlesEnabled((subtitlesEnabled) => !subtitlesEnabled), []);\r\n\r\n    const handleFullscreenToggle = useCallback(() => {\r\n        if (fullscreen) {\r\n            document.exitFullscreen();\r\n        } else {\r\n            containerRef.current?.requestFullscreen();\r\n        }\r\n    }, [fullscreen]);\r\n\r\n    const handleVolumeChange = useCallback((v) => {\r\n        if (videoRef.current) {\r\n            videoRef.current.volume = v;\r\n        }\r\n    }, []);\r\n\r\n    const handlePopOutToggle = useCallback(() => {\r\n        playerChannel.popOutToggle();\r\n        if (popOut) {\r\n            poppingInRef.current = true;\r\n            window.close();\r\n        }\r\n    }, [playerChannel, popOut]);\r\n\r\n    const handleCondensedModeToggle = useCallback(() => {\r\n        playerChannel.condensedModeToggle();\r\n    }, [playerChannel]);\r\n\r\n    const handleClose = useCallback(() => {\r\n        playerChannel.close();\r\n        window.close();\r\n    }, [playerChannel]);\r\n\r\n    const handleHideSubtitlePlayerToggle = useCallback(() => {\r\n        playerChannel.hideSubtitlePlayerToggle();\r\n    }, [playerChannel]);\r\n\r\n    const handleClick = useCallback(() => {\r\n        if (playing) {\r\n            playerChannel.pause();\r\n        } else {\r\n            playerChannel.play();\r\n        }\r\n    }, [playerChannel, playing]);\r\n\r\n    const handleDoubleClick = useCallback(() => handleFullscreenToggle(), [handleFullscreenToggle]);\r\n\r\n    const handleAlertClosed = useCallback(() => setAlertOpen(false), []);\r\n    const {\r\n        subtitleSize,\r\n        subtitleColor,\r\n        subtitleOutlineThickness,\r\n        subtitleOutlineColor,\r\n        subtitleBackgroundColor,\r\n        subtitleBackgroundOpacity,\r\n        subtitleFontFamily,\r\n    } = settingsProvider.subtitleSettings;\r\n    const subtitleStyles = useMemo(\r\n        () =>\r\n            makeSubtitleStyles({\r\n                subtitleSize,\r\n                subtitleColor,\r\n                subtitleOutlineThickness,\r\n                subtitleOutlineColor,\r\n                subtitleBackgroundColor,\r\n                subtitleBackgroundOpacity,\r\n                subtitleFontFamily,\r\n            }),\r\n        [\r\n            subtitleSize,\r\n            subtitleColor,\r\n            subtitleOutlineThickness,\r\n            subtitleOutlineColor,\r\n            subtitleBackgroundColor,\r\n            subtitleBackgroundOpacity,\r\n            subtitleFontFamily,\r\n        ]\r\n    );\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            if (Date.now() - lastMouseMovementTimestamp.current > 300) {\r\n                if (showCursor) {\r\n                    setShowCursor(false);\r\n                }\r\n            } else if (!showCursor) {\r\n                setShowCursor(true);\r\n            }\r\n        }, 100);\r\n\r\n        return () => clearInterval(interval);\r\n    }, [showCursor])\r\n\r\n    return (\r\n        <div ref={containerRef} onMouseMove={handleMouseMove} className={classes.root}>\r\n            <video\r\n                preload=\"auto\"\r\n                controls={false}\r\n                onClick={handleClick}\r\n                onDoubleClick={handleDoubleClick}\r\n                className={showCursor ? classes.video : `${classes.cursorHidden} ${classes.video}`}\r\n                ref={videoRefCallback}\r\n                src={videoFile}\r\n            />\r\n            {subtitlesEnabled && (\r\n                <div style={subtitleStyles}>\r\n                    {showSubtitles.map((s) => (\r\n                        <React.Fragment key={s.index}>\r\n                            {s.text}\r\n                            <br />\r\n                        </React.Fragment>\r\n                    ))}\r\n                </div>\r\n            )}\r\n            {fullscreen && (\r\n                <Alert open={alertOpen} onClose={handleAlertClosed} autoHideDuration={3000} severity=\"success\">\r\n                    {alert}\r\n                </Alert>\r\n            )}\r\n            <Controls\r\n                mousePositionRef={mousePositionRef}\r\n                playing={playing}\r\n                clock={clock}\r\n                length={length}\r\n                audioTracks={audioTracks}\r\n                selectedAudioTrack={selectedAudioTrack}\r\n                subtitlesToggle={subtitles && subtitles.length > 0}\r\n                subtitlesEnabled={subtitlesEnabled}\r\n                offsetEnabled={true}\r\n                offset={offset}\r\n                fullscreenEnabled={true}\r\n                fullscreen={fullscreen}\r\n                closeEnabled={!popOut}\r\n                popOut={popOut}\r\n                volumeEnabled={true}\r\n                popOutEnabled={!isMobile}\r\n                condensedModeToggleEnabled={true}\r\n                condensedModeEnabled={condensedModeEnabled}\r\n                hideSubtitlePlayerToggleEnabled={subtitles?.length > 0 && !popOut && !fullscreen}\r\n                subtitlePlayerHidden={subtitlePlayerHidden}\r\n                onPlay={handlePlay}\r\n                onPause={handlePause}\r\n                onSeek={handleSeek}\r\n                onAudioTrackSelected={handleAudioTrackSelected}\r\n                onSubtitlesToggle={handleSubtitlesToggle}\r\n                onFullscreenToggle={handleFullscreenToggle}\r\n                onVolumeChange={handleVolumeChange}\r\n                onOffsetChange={handleOffsetChange}\r\n                onPopOutToggle={handlePopOutToggle}\r\n                onCondensedModeToggle={handleCondensedModeToggle}\r\n                onClose={handleClose}\r\n                onHideSubtitlePlayerToggle={handleHideSubtitlePlayerToggle}\r\n                settingsProvider={settingsProvider}\r\n                showOnMouseMovement={false}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n","import React, { useCallback, useEffect, useState, useMemo, useRef } from 'react';\r\nimport { Route, Redirect, Switch, useLocation } from 'react-router-dom';\r\nimport { ThemeProvider, createTheme, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport { useWindowSize } from '../hooks/useWindowSize';\r\nimport { red } from '@material-ui/core/colors';\r\nimport {\r\n    Anki,\r\n    AudioClip,\r\n    Image,\r\n    humanReadableTime,\r\n    AnkiDialogSliderContext,\r\n    SubtitleModel,\r\n    VideoTabModel,\r\n    SubtitleSettingsToVideoMessage,\r\n    AnkiSettingsToVideoMessage,\r\n    MiscSettingsToVideoMessage,\r\n    LegacyPlayerSyncMessage,\r\n    PlayerSyncMessage,\r\n    AudioModel,\r\n    ImageModel,\r\n} from '@project/common';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport clsx from 'clsx';\r\nimport Alert from './Alert';\r\nimport AnkiDialog from './AnkiDialog';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport DragOverlay from './DragOverlay';\r\nimport HelpDialog from './HelpDialog';\r\nimport ImageDialog from './ImageDialog';\r\nimport SubtitleReader from '../services/SubtitleReader';\r\nimport Bar from './Bar';\r\nimport ChromeExtension, { ExtensionMessage } from '../services/ChromeExtension';\r\nimport CopyHistory, { CopyHistoryItem } from './CopyHistory';\r\nimport LandingPage from './LandingPage';\r\nimport Player, { AnkiDialogFinishedRequest, MediaSources } from './Player';\r\nimport SettingsDialog from './SettingsDialog';\r\nimport SettingsProvider from '../services/SettingsProvider';\r\nimport VideoPlayer from './VideoPlayer';\r\nimport { Color } from '@material-ui/lab';\r\n\r\nconst latestExtensionVersion = '0.17.0';\r\nconst extensionUrl = 'https://github.com/killergerbah/asbplayer/releases/latest';\r\n\r\nconst useContentStyles = makeStyles<Theme, ContentProps>((theme) => ({\r\n    content: {\r\n        flexGrow: 1,\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        marginRight: 0,\r\n    },\r\n    contentShift: ({ drawerWidth }) => ({\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n        marginRight: drawerWidth,\r\n    }),\r\n}));\r\n\r\nfunction extractSources(files: File[]): MediaSources {\r\n    let subtitleFiles = [];\r\n    let audioFile = undefined;\r\n    let videoFile = undefined;\r\n\r\n    for (const f of files) {\r\n        const extensionStartIndex = f.name.lastIndexOf('.');\r\n\r\n        if (extensionStartIndex === -1) {\r\n            throw new Error('Unable to determine extension of ' + f.name);\r\n        }\r\n\r\n        const extension = f.name.substring(extensionStartIndex + 1, f.name.length);\r\n        switch (extension) {\r\n            case 'ass':\r\n            case 'srt':\r\n            case 'vtt':\r\n                subtitleFiles.push(f);\r\n                break;\r\n            case 'mkv':\r\n            case 'mp4':\r\n            case 'avi':\r\n                if (videoFile) {\r\n                    throw new Error('Cannot open two video files simultaneously');\r\n                }\r\n                videoFile = f;\r\n                break;\r\n            case 'mp3':\r\n            case 'm4a':\r\n            case 'aac':\r\n            case 'flac':\r\n            case 'ogg':\r\n            case 'wav':\r\n            case 'opus':\r\n                if (audioFile) {\r\n                    throw new Error('Cannot open two audio files simultaneously');\r\n                }\r\n                audioFile = f;\r\n                break;\r\n            default:\r\n                throw new Error('Unsupported extension ' + extension);\r\n        }\r\n    }\r\n\r\n    if (videoFile && audioFile) {\r\n        throw new Error('Cannot load both an audio and video file simultaneously');\r\n    }\r\n\r\n    return { subtitleFiles: subtitleFiles, audioFile: audioFile, videoFile: videoFile };\r\n}\r\n\r\nfunction audioClipFromItem(\r\n    item: CopyHistoryItem,\r\n    sliderContext: AnkiDialogSliderContext | undefined,\r\n    paddingStart: number,\r\n    paddingEnd: number\r\n) {\r\n    if (item.audio) {\r\n        const start = item.audio.start ?? item.start;\r\n        const end = item.audio.end ?? item.end;\r\n\r\n        return AudioClip.fromBase64(\r\n            item.subtitleFile!.name,\r\n            Math.max(0, start - (item.audio.paddingStart ?? 0)),\r\n            end + (item.audio.paddingEnd ?? 0),\r\n            item.audio.base64,\r\n            item.audio.extension\r\n        );\r\n    }\r\n\r\n    if (item.audioFile || item.videoFile) {\r\n        let start;\r\n        let end;\r\n\r\n        if (sliderContext) {\r\n            start = sliderContext.subtitleStart;\r\n            end = sliderContext.subtitleEnd;\r\n        } else {\r\n            start = item.start;\r\n            end = item.end;\r\n        }\r\n\r\n        return AudioClip.fromFile(\r\n            (item.audioFile || item.videoFile)!,\r\n            Math.max(0, start - paddingStart),\r\n            end + paddingEnd,\r\n            item.audioTrack\r\n        );\r\n    }\r\n\r\n    return undefined;\r\n}\r\n\r\nfunction imageFromItem(item: CopyHistoryItem, maxWidth: number, maxHeight: number) {\r\n    if (item.image) {\r\n        return Image.fromBase64(item.subtitleFile!.name, item.start, item.image.base64, item.image.extension);\r\n    }\r\n\r\n    if (item.videoFile) {\r\n        return Image.fromFile(item.videoFile, item.start, maxWidth, maxHeight);\r\n    }\r\n\r\n    return undefined;\r\n}\r\n\r\nfunction itemSourceString(item: CopyHistoryItem | undefined) {\r\n    if (!item) {\r\n        return undefined;\r\n    }\r\n\r\n    const source = item.subtitleFile?.name ?? item.audioFile?.name ?? item.videoFile?.name;\r\n\r\n    if (!source) {\r\n        return undefined;\r\n    }\r\n\r\n    return `${source} (${humanReadableTime(item.start)})`;\r\n}\r\n\r\nfunction itemSliderContext(item: CopyHistoryItem) {\r\n    if (!item) {\r\n        return undefined;\r\n    }\r\n\r\n    return {\r\n        subtitleStart: item.start,\r\n        subtitleEnd: item.end,\r\n        subtitles: item.surroundingSubtitles || [\r\n            { start: item.start, end: item.end, text: item.text, track: item.track },\r\n        ],\r\n    };\r\n}\r\n\r\nfunction revokeUrls(sources: MediaSources) {\r\n    if (sources.audioFileUrl) {\r\n        URL.revokeObjectURL(sources.audioFileUrl);\r\n    }\r\n\r\n    if (sources.videoFileUrl) {\r\n        URL.revokeObjectURL(sources.videoFileUrl);\r\n    }\r\n}\r\n\r\ninterface ContentProps {\r\n    drawerOpen: boolean;\r\n    drawerWidth: number;\r\n    children: React.ReactNode[];\r\n}\r\n\r\nfunction Content(props: ContentProps) {\r\n    const classes = useContentStyles(props);\r\n\r\n    return (\r\n        <main\r\n            className={clsx(classes.content, {\r\n                [classes.contentShift]: props.drawerOpen,\r\n            })}\r\n        >\r\n            {props.children}\r\n        </main>\r\n    );\r\n}\r\n\r\nfunction App() {\r\n    const subtitleReader = useMemo<SubtitleReader>(() => new SubtitleReader(), []);\r\n    const settingsProvider = useMemo<SettingsProvider>(() => new SettingsProvider(), []);\r\n    const theme = useMemo<Theme>(\r\n        () =>\r\n            createTheme({\r\n                palette: {\r\n                    primary: {\r\n                        main: '#49007a',\r\n                    },\r\n                    secondary: {\r\n                        main: '#ff1f62',\r\n                    },\r\n                    error: {\r\n                        main: red.A400,\r\n                    },\r\n                    type: settingsProvider.themeType,\r\n                },\r\n            }),\r\n        [settingsProvider.themeType]\r\n    );\r\n    const anki = useMemo<Anki>(() => new Anki(settingsProvider), [settingsProvider]);\r\n    const location = useLocation();\r\n    const inVideoPlayer = location.pathname === '/video';\r\n    const extension = useMemo<ChromeExtension>(() => new ChromeExtension(!inVideoPlayer), [inVideoPlayer]);\r\n    const videoFrameRef = useRef<HTMLIFrameElement>(null);\r\n    const [width] = useWindowSize(!inVideoPlayer);\r\n    const drawerRatio = videoFrameRef.current ? 0.2 : 0.3;\r\n    const minDrawerSize = videoFrameRef.current ? 150 : 300;\r\n    const drawerWidth = Math.max(minDrawerSize, width * drawerRatio);\r\n    const [copiedSubtitles, setCopiedSubtitles] = useState<CopyHistoryItem[]>([]);\r\n    const copiedSubtitlesRef = useRef<CopyHistoryItem[]>([]);\r\n    copiedSubtitlesRef.current = copiedSubtitles;\r\n    const [copyHistoryOpen, setCopyHistoryOpen] = useState<boolean>(false);\r\n    const [alert, setAlert] = useState<string>();\r\n    const [alertOpen, setAlertOpen] = useState<boolean>(false);\r\n    const [alertSeverity, setAlertSeverity] = useState<Color>();\r\n    const [jumpToSubtitle, setJumpToSubtitle] = useState<SubtitleModel>();\r\n    const [sources, setSources] = useState<MediaSources>({ subtitleFiles: [] });\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n    const [dragging, setDragging] = useState<boolean>(false);\r\n    const dragEnterRef = useRef<Element | null>(null);\r\n    const [fileName, setFileName] = useState<string>();\r\n    const [ankiDialogOpen, setAnkiDialogOpen] = useState<boolean>(false);\r\n    const [ankiDialogDisabled, setAnkiDialogDisabled] = useState<boolean>(false);\r\n    const [ankiDialogItem, setAnkiDialogItem] = useState<CopyHistoryItem>();\r\n    const ankiDialogItemSliderContext = useMemo<AnkiDialogSliderContext | undefined>(\r\n        () => ankiDialogItem && itemSliderContext(ankiDialogItem),\r\n        [ankiDialogItem]\r\n    );\r\n    const ankiDialogAudioClip = useMemo<AudioClip | undefined>(\r\n        () =>\r\n            ankiDialogItem &&\r\n            audioClipFromItem(\r\n                ankiDialogItem,\r\n                ankiDialogItemSliderContext,\r\n                settingsProvider.audioPaddingStart,\r\n                settingsProvider.audioPaddingEnd\r\n            ),\r\n        [\r\n            ankiDialogItem,\r\n            ankiDialogItemSliderContext,\r\n            settingsProvider.audioPaddingStart,\r\n            settingsProvider.audioPaddingEnd,\r\n        ]\r\n    );\r\n    const ankiDialogImage = useMemo<Image | undefined>(\r\n        () =>\r\n            ankiDialogItem &&\r\n            imageFromItem(ankiDialogItem, settingsProvider.maxImageWidth, settingsProvider.maxImageHeight),\r\n        [ankiDialogItem, settingsProvider.maxImageWidth, settingsProvider.maxImageHeight]\r\n    );\r\n    const [ankiDialogRequestToVideo, setAnkiDialogRequestToVideo] = useState<number>();\r\n    const [ankiDialogRequested, setAnkiDialogRequested] = useState<boolean>(false);\r\n    const [ankiDialogFinishedRequest, setAnkiDialogFinishedRequest] = useState<AnkiDialogFinishedRequest>({\r\n        timestamp: 0,\r\n        resume: false,\r\n    });\r\n    const [settingsDialogOpen, setSettingsDialogOpen] = useState<boolean>(false);\r\n    const [helpDialogOpen, setHelpDialogOpen] = useState<boolean>(false);\r\n    const [imageDialogOpen, setImageDialogOpen] = useState<boolean>(false);\r\n    const [disableKeyEvents, setDisableKeyEvents] = useState<boolean>(false);\r\n    const [image, setImage] = useState<Image>();\r\n    const [tab, setTab] = useState<VideoTabModel>();\r\n    const [availableTabs, setAvailableTabs] = useState<VideoTabModel[]>([]);\r\n    const fileInputRef = useRef<HTMLInputElement>(null);\r\n    const { subtitleFiles } = sources;\r\n\r\n    const handleCopy = useCallback(\r\n        (\r\n            subtitle: SubtitleModel,\r\n            surroundingSubtitles: SubtitleModel[],\r\n            audioFile: File | undefined,\r\n            videoFile: File | undefined,\r\n            subtitleFile: File | undefined,\r\n            audioTrack: string | undefined,\r\n            audio: AudioModel | undefined,\r\n            image: ImageModel | undefined,\r\n            url: string | undefined,\r\n            preventDuplicate: boolean | undefined,\r\n            id: string | undefined\r\n        ) => {\r\n            if (subtitle) {\r\n                navigator.clipboard.writeText(subtitle.text);\r\n            }\r\n\r\n            setCopiedSubtitles((copiedSubtitles) => {\r\n                if (preventDuplicate && copiedSubtitles.length > 0) {\r\n                    const last = copiedSubtitles[copiedSubtitles.length - 1];\r\n\r\n                    if (\r\n                        subtitle.start === last.start &&\r\n                        subtitle.end === last.end &&\r\n                        subtitle.text === last.text &&\r\n                        subtitleFile?.name === last.subtitleFile?.name\r\n                    ) {\r\n                        return copiedSubtitles;\r\n                    }\r\n                }\r\n\r\n                const newCopiedSubtitles: CopyHistoryItem[] = [];\r\n                let updated = false;\r\n\r\n                for (const copiedSubtitle of copiedSubtitles) {\r\n                    if (id && copiedSubtitle.id === id) {\r\n                        const newCopiedSubtitle = {\r\n                            ...copiedSubtitle,\r\n                            ...subtitle,\r\n                            ...(surroundingSubtitles && { surroundingSubtitles: surroundingSubtitles }),\r\n                            ...(subtitleFile && { subtitleFile: subtitleFile }),\r\n                            ...(audioFile && { audioFile: audioFile }),\r\n                            ...(videoFile && { videoFile: videoFile }),\r\n                            ...(audioTrack && { audioTrack: audioTrack }),\r\n                            ...(audio && { audio: audio }),\r\n                            ...(image && { image: image }),\r\n                            ...(url && { url: url }),\r\n                        };\r\n                        newCopiedSubtitles.push(newCopiedSubtitle);\r\n                        updated = true;\r\n                    } else {\r\n                        newCopiedSubtitles.push(copiedSubtitle);\r\n                    }\r\n                }\r\n\r\n                if (!updated) {\r\n                    newCopiedSubtitles.push({\r\n                        ...subtitle,\r\n                        surroundingSubtitles: surroundingSubtitles,\r\n                        timestamp: Date.now(),\r\n                        id: id || uuidv4(),\r\n                        name: fileName!,\r\n                        subtitleFile: subtitleFile,\r\n                        audioFile: audioFile,\r\n                        videoFile: videoFile,\r\n                        audioTrack: audioTrack,\r\n                        audio: audio,\r\n                        image: image,\r\n                        url: url,\r\n                    });\r\n                }\r\n\r\n                return newCopiedSubtitles;\r\n            });\r\n\r\n            if (subtitle) {\r\n                setAlertSeverity('success');\r\n                setAlert(\r\n                    subtitle.text === '' ? `Saved ${humanReadableTime(subtitle.start)}` : `Copied: \"${subtitle.text}\"`\r\n                );\r\n                setAlertOpen(true);\r\n            }\r\n        },\r\n        [fileName]\r\n    );\r\n\r\n    const handleOpenCopyHistory = useCallback(() => setCopyHistoryOpen((copyHistoryOpen) => !copyHistoryOpen), []);\r\n    const handleCloseCopyHistory = useCallback(() => setCopyHistoryOpen(false), []);\r\n    const handleOpenSettings = useCallback(() => {\r\n        setDisableKeyEvents(true);\r\n        setSettingsDialogOpen(true);\r\n    }, []);\r\n    const handleOpenHelp = useCallback(() => setHelpDialogOpen(true), []);\r\n    const handleCloseHelp = useCallback(() => setHelpDialogOpen(false), []);\r\n    const handleAlertClosed = useCallback(() => setAlertOpen(false), []);\r\n    const handleImageDialogClosed = useCallback(() => setImageDialogOpen(false), []);\r\n    const handleCloseSettings = useCallback(\r\n        (newSettings) => {\r\n            settingsProvider.settings = newSettings;\r\n            setSettingsDialogOpen(false);\r\n            setDisableKeyEvents(false);\r\n            const subtitleSettingsMessage: SubtitleSettingsToVideoMessage = {\r\n                command: 'subtitleSettings',\r\n                value: settingsProvider.subtitleSettings,\r\n            };\r\n            const ankiSettingsMessage: AnkiSettingsToVideoMessage = {\r\n                command: 'ankiSettings',\r\n                value: settingsProvider.ankiSettings,\r\n            };\r\n            const miscSettingsMessage: MiscSettingsToVideoMessage = {\r\n                command: 'miscSettings',\r\n                value: settingsProvider.miscSettings,\r\n            };\r\n            extension.publishMessage(subtitleSettingsMessage);\r\n            extension.publishMessage(ankiSettingsMessage);\r\n            extension.publishMessage(miscSettingsMessage);\r\n        },\r\n        [extension, settingsProvider]\r\n    );\r\n\r\n    const handleDeleteCopyHistoryItem = useCallback(\r\n        (item) => {\r\n            const newCopiedSubtitles = [];\r\n\r\n            for (let subtitle of copiedSubtitles) {\r\n                if (item.id !== subtitle.id) {\r\n                    newCopiedSubtitles.push(subtitle);\r\n                }\r\n            }\r\n\r\n            setCopiedSubtitles(newCopiedSubtitles);\r\n        },\r\n        [copiedSubtitles]\r\n    );\r\n\r\n    const handleError = useCallback((message) => {\r\n        setAlertSeverity('error');\r\n        setAlert(message);\r\n        setAlertOpen(true);\r\n    }, []);\r\n\r\n    const handleUnloadAudio = useCallback(\r\n        (audioFileUrl) => {\r\n            if (audioFileUrl !== sources.audioFileUrl) {\r\n                return;\r\n            }\r\n\r\n            setSources((previous) => {\r\n                URL.revokeObjectURL(audioFileUrl);\r\n\r\n                return {\r\n                    subtitleFiles: previous.subtitleFiles,\r\n                    audioFile: undefined,\r\n                    audioFileUrl: undefined,\r\n                    videoFile: previous.videoFile,\r\n                    videoFileUrl: previous.videoFileUrl,\r\n                };\r\n            });\r\n        },\r\n        [sources]\r\n    );\r\n\r\n    const handleUnloadVideo = useCallback(\r\n        (videoFileUrl) => {\r\n            if (videoFileUrl !== sources.videoFileUrl) {\r\n                return;\r\n            }\r\n\r\n            setSources((previous) => {\r\n                URL.revokeObjectURL(videoFileUrl);\r\n\r\n                return {\r\n                    subtitleFiles: previous.subtitleFiles,\r\n                    audioFile: previous.audioFile,\r\n                    audioFileUrl: previous.audioFileUrl,\r\n                    videoFile: undefined,\r\n                    videoFileUrl: undefined,\r\n                };\r\n            });\r\n        },\r\n        [sources]\r\n    );\r\n\r\n    const handleClipAudio = useCallback(\r\n        async (item) => {\r\n            try {\r\n                const clip = await audioClipFromItem(\r\n                    item,\r\n                    undefined,\r\n                    settingsProvider.audioPaddingStart,\r\n                    settingsProvider.audioPaddingEnd\r\n                );\r\n\r\n                if (settingsProvider.preferMp3) {\r\n                    clip!.toMp3().download();\r\n                } else {\r\n                    clip!.download();\r\n                }\r\n            } catch (e) {\r\n                console.error(e);\r\n                if (e instanceof Error) {\r\n                    handleError(e.message);\r\n                } else {\r\n                    handleError(String(e));\r\n                }\r\n            }\r\n        },\r\n        [handleError, settingsProvider]\r\n    );\r\n\r\n    const handleDownloadImage = useCallback(\r\n        async (item) => {\r\n            try {\r\n                (await imageFromItem(\r\n                    item,\r\n                    settingsProvider.maxImageWidth,\r\n                    settingsProvider.maxImageHeight\r\n                ))!.download();\r\n            } catch (e) {\r\n                console.error(e);\r\n                if (e instanceof Error) {\r\n                    handleError(e.message);\r\n                } else {\r\n                    handleError(String(e));\r\n                }\r\n            }\r\n        },\r\n        [handleError, settingsProvider]\r\n    );\r\n\r\n    const handleSelectCopyHistoryItem = useCallback(\r\n        (item) => {\r\n            if (subtitleFiles.filter((f) => f.name === item.subtitleFile.name).length === 0) {\r\n                handleError('Subtitle file ' + item.subtitleFile.name + ' is not open.');\r\n                return;\r\n            }\r\n\r\n            setJumpToSubtitle(item);\r\n        },\r\n        [subtitleFiles, handleError]\r\n    );\r\n\r\n    const handleAnki = useCallback((item) => {\r\n        setAnkiDialogItem(item);\r\n        setAnkiDialogOpen(true);\r\n        setAnkiDialogDisabled(false);\r\n        setDisableKeyEvents(true);\r\n    }, []);\r\n\r\n    const handleAnkiDialogCancel = useCallback(() => {\r\n        setAnkiDialogOpen(false);\r\n        setAnkiDialogDisabled(false);\r\n        setDisableKeyEvents(false);\r\n\r\n        if (ankiDialogRequested) {\r\n            setAnkiDialogFinishedRequest({ timestamp: Date.now(), resume: true });\r\n            setAnkiDialogRequested(false);\r\n        }\r\n    }, [ankiDialogRequested]);\r\n\r\n    const handleAnkiDialogProceed = useCallback(\r\n        async (text, definition, audioClip, image, word, source, url, customFieldValues, tags, mode) => {\r\n            setAnkiDialogDisabled(true);\r\n\r\n            try {\r\n                const result = await anki.export(\r\n                    text,\r\n                    definition,\r\n                    audioClip,\r\n                    image,\r\n                    word,\r\n                    source,\r\n                    url,\r\n                    customFieldValues,\r\n                    tags,\r\n                    mode\r\n                );\r\n\r\n                if (mode !== 'gui') {\r\n                    if (mode === 'default') {\r\n                        setAlertSeverity('success');\r\n                        setAlert('Export succeeded: ' + result);\r\n                        setAlertOpen(true);\r\n                    } else if (mode === 'updateLast') {\r\n                        setAlertSeverity('success');\r\n                        setAlert('Update succeeded: ' + result);\r\n                        setAlertOpen(true);\r\n                    }\r\n\r\n                    setAnkiDialogOpen(false);\r\n\r\n                    if (ankiDialogRequested) {\r\n                        setAnkiDialogFinishedRequest({ timestamp: Date.now(), resume: true });\r\n                        setAnkiDialogRequested(false);\r\n                    }\r\n                }\r\n            } catch (e) {\r\n                console.error(e);\r\n                if (e instanceof Error) {\r\n                    handleError(e.message);\r\n                } else {\r\n                    handleError(String(e));\r\n                }\r\n            } finally {\r\n                setAnkiDialogDisabled(false);\r\n                setDisableKeyEvents(false);\r\n            }\r\n        },\r\n        [anki, handleError, ankiDialogRequested]\r\n    );\r\n\r\n    const handleAnkiDialogRequest = useCallback((forwardToVideo) => {\r\n        if (copiedSubtitlesRef.current!.length === 0) {\r\n            return;\r\n        }\r\n\r\n        const item = copiedSubtitlesRef.current[copiedSubtitlesRef.current.length - 1];\r\n        setAnkiDialogItem(item);\r\n        setAnkiDialogOpen(true);\r\n        setAnkiDialogDisabled(false);\r\n        setDisableKeyEvents(true);\r\n        setAnkiDialogRequested(true);\r\n\r\n        if (forwardToVideo) {\r\n            setAnkiDialogRequestToVideo(Date.now());\r\n        }\r\n    }, []);\r\n\r\n    const handleViewImage = useCallback((image) => {\r\n        setImage(image);\r\n        setImageDialogOpen(true);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        function onTabs(tabs: VideoTabModel[]) {\r\n            if (tabs.length !== availableTabs.length) {\r\n                setAvailableTabs(tabs);\r\n            } else {\r\n                let update = false;\r\n\r\n                for (let i = 0; i < availableTabs.length; ++i) {\r\n                    const t1 = availableTabs[i];\r\n                    const t2 = tabs[i];\r\n                    if (t1.id !== t2.id || t1.title !== t2.title || t1.src !== t2.src) {\r\n                        update = true;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (update) {\r\n                    setAvailableTabs(tabs);\r\n                }\r\n            }\r\n\r\n            let selectedTabMissing = tab && tabs.filter((t) => t.id === tab.id && t.src === tab.src).length === 0;\r\n\r\n            if (selectedTabMissing) {\r\n                setTab(undefined);\r\n                handleError('Lost connection with tab ' + tab!.id + ' ' + tab!.title);\r\n            }\r\n        }\r\n\r\n        extension.subscribeTabs(onTabs);\r\n\r\n        return () => extension.unsubscribeTabs(onTabs);\r\n    }, [availableTabs, tab, extension, handleError]);\r\n\r\n    const handleTabSelected = useCallback((tab) => setTab(tab), []);\r\n\r\n    const handleFiles = useCallback(\r\n        (files) => {\r\n            try {\r\n                let { subtitleFiles, audioFile, videoFile } = extractSources(files);\r\n\r\n                setSources((previous) => {\r\n                    setLoading(true);\r\n\r\n                    let videoFileUrl = undefined;\r\n                    let audioFileUrl = undefined;\r\n\r\n                    if (videoFile || audioFile) {\r\n                        revokeUrls(previous);\r\n\r\n                        if (videoFile) {\r\n                            videoFileUrl = URL.createObjectURL(videoFile);\r\n                        } else if (audioFile) {\r\n                            audioFileUrl = URL.createObjectURL(audioFile);\r\n                        }\r\n\r\n                        setTab(undefined);\r\n                    } else {\r\n                        videoFile = previous.videoFile;\r\n                        videoFileUrl = previous.videoFileUrl;\r\n                        audioFile = previous.audioFile;\r\n                        audioFileUrl = previous.audioFileUrl;\r\n                    }\r\n\r\n                    const sources = {\r\n                        subtitleFiles: subtitleFiles.length === 0 ? previous.subtitleFiles : subtitleFiles,\r\n                        audioFile: audioFile,\r\n                        audioFileUrl: audioFileUrl,\r\n                        videoFile: videoFile,\r\n                        videoFileUrl: videoFileUrl,\r\n                    };\r\n\r\n                    return sources;\r\n                });\r\n\r\n                if (subtitleFiles.length > 0) {\r\n                    const subtitleFileName = subtitleFiles[0].name;\r\n                    setFileName(subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')));\r\n                }\r\n            } catch (e) {\r\n                console.error(e);\r\n                if (e instanceof Error) {\r\n                    handleError(e.message);\r\n                } else {\r\n                    handleError(String(e));\r\n                }\r\n            }\r\n        },\r\n        [handleError]\r\n    );\r\n\r\n    useEffect(() => {\r\n        async function onMessage(message: ExtensionMessage) {\r\n            if (message.data.command === 'sync' || message.data.command === 'syncv2') {\r\n                const tabs = availableTabs.filter((t) => {\r\n                    if (t.id !== message.tabId) {\r\n                        return false;\r\n                    }\r\n\r\n                    return !message.src || t.src === message.src;\r\n                });\r\n\r\n                if (tabs.length === 0) {\r\n                    if (message.src) {\r\n                        console.error(\r\n                            'Received sync request but the requesting tab ID ' +\r\n                                message.tabId +\r\n                                ' with src ' +\r\n                                message.src +\r\n                                ' was not found'\r\n                        );\r\n                    } else {\r\n                        console.error(\r\n                            'Received sync request but the requesting tab ID ' + message.tabId + ' was not found'\r\n                        );\r\n                    }\r\n\r\n                    return;\r\n                }\r\n\r\n                const tab = tabs[0];\r\n                let subtitleFiles: File[];\r\n\r\n                if (message.data.command === 'sync') {\r\n                    const syncMessage = message.data as LegacyPlayerSyncMessage;\r\n                    subtitleFiles = [\r\n                        new File(\r\n                            [await (await fetch('data:text/plain;base64,' + syncMessage.subtitles.base64)).blob()],\r\n                            syncMessage.subtitles.name\r\n                        ),\r\n                    ];\r\n                } else if (message.data.command === 'syncv2') {\r\n                    const syncMessage = message.data as PlayerSyncMessage;\r\n                    subtitleFiles = await Promise.all(\r\n                        syncMessage.subtitles.map(\r\n                            async (s) =>\r\n                                new File([await (await fetch('data:text/plain;base64,' + s.base64)).blob()], s.name)\r\n                        )\r\n                    );\r\n                } else {\r\n                    console.error('Unknown message ' + message.data.command);\r\n                    return;\r\n                }\r\n\r\n                const subtitleFileName = subtitleFiles[0].name;\r\n                setFileName(subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')));\r\n                setSources({\r\n                    subtitleFiles: subtitleFiles,\r\n                    audioFile: undefined,\r\n                    audioFileUrl: undefined,\r\n                    videoFile: undefined,\r\n                    videoFileUrl: undefined,\r\n                });\r\n                setTab(tab);\r\n            }\r\n        }\r\n\r\n        extension.subscribe(onMessage);\r\n\r\n        return () => extension.unsubscribe(onMessage);\r\n    }, [extension, availableTabs]);\r\n\r\n    const handleDrop = useCallback(\r\n        (e: React.DragEvent) => {\r\n            e.preventDefault();\r\n\r\n            if (inVideoPlayer) {\r\n                handleError('Video player cannot receive dropped files. Drop outside of the video frame instead.');\r\n                return;\r\n            }\r\n\r\n            setDragging(false);\r\n            dragEnterRef.current = null;\r\n\r\n            if (!e.dataTransfer.files || e.dataTransfer.files.length === 0) {\r\n                return;\r\n            }\r\n\r\n            handleFiles(e.dataTransfer.files);\r\n        },\r\n        [inVideoPlayer, handleError, handleFiles]\r\n    );\r\n\r\n    const handleFileInputChange = useCallback(() => {\r\n        const files = fileInputRef.current?.files;\r\n\r\n        if (files && files.length > 0) {\r\n            handleFiles(files);\r\n        }\r\n    }, [handleFiles]);\r\n\r\n    const handleFileSelector = useCallback(() => fileInputRef.current?.click(), []);\r\n\r\n    const handleDragEnter = useCallback(\r\n        (e: React.DragEvent) => {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n\r\n            if (!inVideoPlayer) {\r\n                dragEnterRef.current = e.target as Element;\r\n                setDragging(true);\r\n            }\r\n        },\r\n        [inVideoPlayer]\r\n    );\r\n\r\n    const handleDragLeave = useCallback(\r\n        (e) => {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n\r\n            if (!inVideoPlayer && dragEnterRef.current === e.target) {\r\n                setDragging(false);\r\n            }\r\n        },\r\n        [inVideoPlayer]\r\n    );\r\n\r\n    const handleSourcesLoaded = useCallback(() => setLoading(false), []);\r\n    const nothingLoaded =\r\n        (loading && !videoFrameRef.current) ||\r\n        (sources.subtitleFiles.length === 0 && !sources.audioFile && !sources.videoFile);\r\n\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <CssBaseline />\r\n            <div\r\n                onDrop={handleDrop}\r\n                onDragOver={(e) => e.preventDefault()}\r\n                onDragEnter={handleDragEnter}\r\n                onDragLeave={handleDragLeave}\r\n            >\r\n                <Alert open={alertOpen} onClose={handleAlertClosed} autoHideDuration={3000} severity={alertSeverity}>\r\n                    {alert}\r\n                </Alert>\r\n                <Switch>\r\n                    <Route\r\n                        exact\r\n                        path=\"/\"\r\n                        render={() => {\r\n                            const params = new URLSearchParams(window.location.search);\r\n                            const videoFile = params.get('video');\r\n                            const channel = params.get('channel');\r\n                            const popOut = params.get('popout');\r\n\r\n                            if (videoFile && channel) {\r\n                                return (\r\n                                    <Redirect\r\n                                        to={\r\n                                            '/video?video=' +\r\n                                            encodeURIComponent(videoFile) +\r\n                                            '&channel=' +\r\n                                            channel +\r\n                                            '&popout=' +\r\n                                            popOut\r\n                                        }\r\n                                    />\r\n                                );\r\n                            }\r\n\r\n                            return (\r\n                                <div>\r\n                                    <CopyHistory\r\n                                        items={copiedSubtitles}\r\n                                        open={copyHistoryOpen}\r\n                                        drawerWidth={drawerWidth}\r\n                                        onClose={handleCloseCopyHistory}\r\n                                        onDelete={handleDeleteCopyHistoryItem}\r\n                                        onClipAudio={handleClipAudio}\r\n                                        onDownloadImage={handleDownloadImage}\r\n                                        onSelect={handleSelectCopyHistoryItem}\r\n                                        onAnki={handleAnki}\r\n                                    />\r\n                                    <AnkiDialog\r\n                                        open={ankiDialogOpen}\r\n                                        disabled={ankiDialogDisabled}\r\n                                        text={ankiDialogItem?.text}\r\n                                        audioClip={ankiDialogAudioClip}\r\n                                        image={ankiDialogImage}\r\n                                        source={itemSourceString(ankiDialogItem)}\r\n                                        url={ankiDialogItem?.url}\r\n                                        sliderContext={ankiDialogItemSliderContext}\r\n                                        customFields={settingsProvider.customAnkiFields}\r\n                                        anki={anki}\r\n                                        settingsProvider={settingsProvider}\r\n                                        onCancel={handleAnkiDialogCancel}\r\n                                        onProceed={handleAnkiDialogProceed}\r\n                                        onViewImage={handleViewImage}\r\n                                        onOpenSettings={handleOpenSettings}\r\n                                    />\r\n                                    <ImageDialog\r\n                                        open={imageDialogOpen}\r\n                                        image={image}\r\n                                        onClose={handleImageDialogClosed}\r\n                                    />\r\n                                    <SettingsDialog\r\n                                        anki={anki}\r\n                                        open={settingsDialogOpen}\r\n                                        onClose={handleCloseSettings}\r\n                                        settings={settingsProvider.settings}\r\n                                    />\r\n                                    <HelpDialog\r\n                                        open={helpDialogOpen}\r\n                                        extensionUrl={extensionUrl}\r\n                                        onClose={handleCloseHelp}\r\n                                    />\r\n                                    <Bar\r\n                                        title={fileName || 'asbplayer'}\r\n                                        drawerWidth={drawerWidth}\r\n                                        drawerOpen={copyHistoryOpen}\r\n                                        onOpenCopyHistory={handleOpenCopyHistory}\r\n                                        onOpenSettings={handleOpenSettings}\r\n                                        onOpenHelp={handleOpenHelp}\r\n                                        onFileSelector={handleFileSelector}\r\n                                    />\r\n                                    <input\r\n                                        ref={fileInputRef}\r\n                                        onChange={handleFileInputChange}\r\n                                        type=\"file\"\r\n                                        accept=\".srt,.ass,.vtt,.mp3,.m4a,.aac,.flac,.ogg,.wav,.opus,.mkv,.mp4,.avi\"\r\n                                        multiple\r\n                                        hidden\r\n                                    />\r\n                                    <Content drawerWidth={drawerWidth} drawerOpen={copyHistoryOpen}>\r\n                                        {nothingLoaded && (\r\n                                            <LandingPage\r\n                                                latestExtensionVersion={latestExtensionVersion}\r\n                                                extensionUrl={extensionUrl}\r\n                                                extension={extension}\r\n                                                loading={loading}\r\n                                                dragging={dragging}\r\n                                                onFileSelector={handleFileSelector}\r\n                                            />\r\n                                        )}\r\n                                        <DragOverlay dragging={dragging} loading={loading} />\r\n                                        <Player\r\n                                            subtitleReader={subtitleReader}\r\n                                            settingsProvider={settingsProvider}\r\n                                            onCopy={handleCopy}\r\n                                            onError={handleError}\r\n                                            onUnloadAudio={handleUnloadAudio}\r\n                                            onUnloadVideo={handleUnloadVideo}\r\n                                            onLoaded={handleSourcesLoaded}\r\n                                            onTabSelected={handleTabSelected}\r\n                                            onAnkiDialogRequest={handleAnkiDialogRequest}\r\n                                            tab={tab}\r\n                                            availableTabs={availableTabs}\r\n                                            sources={sources}\r\n                                            jumpToSubtitle={jumpToSubtitle}\r\n                                            videoFrameRef={videoFrameRef}\r\n                                            extension={extension}\r\n                                            drawerOpen={copyHistoryOpen}\r\n                                            disableKeyEvents={disableKeyEvents}\r\n                                            ankiDialogRequested={ankiDialogRequested}\r\n                                            ankiDialogRequestToVideo={ankiDialogRequestToVideo}\r\n                                            ankiDialogFinishedRequest={ankiDialogFinishedRequest}\r\n                                        />\r\n                                    </Content>\r\n                                </div>\r\n                            );\r\n                        }}\r\n                    />\r\n                    <Route\r\n                        exact\r\n                        path=\"/video\"\r\n                        render={() => {\r\n                            const params = new URLSearchParams(window.location.search);\r\n                            const videoFile = params.get('video')!;\r\n                            const channel = params.get('channel')!;\r\n                            const popOut = params.get('popout') === 'true';\r\n\r\n                            return (\r\n                                <VideoPlayer\r\n                                    settingsProvider={settingsProvider}\r\n                                    videoFile={videoFile}\r\n                                    popOut={popOut}\r\n                                    channel={channel}\r\n                                    onError={handleError}\r\n                                />\r\n                            );\r\n                        }}\r\n                    />\r\n                </Switch>\r\n            </div>\r\n        </ThemeProvider>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = (onPerfEntry) => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n            getCLS(onPerfEntry);\r\n            getFID(onPerfEntry);\r\n            getFCP(onPerfEntry);\r\n            getLCP(onPerfEntry);\r\n            getTTFB(onPerfEntry);\r\n        });\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import '@fontsource/roboto';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n    <BrowserRouter basename={process.env.PUBLIC_URL} forceRefresh={false}>\r\n        <App />\r\n    </BrowserRouter>,\r\n    document.querySelector('#root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}