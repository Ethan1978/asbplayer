{"version":3,"sources":["hooks/useWindowSize/index.ts","../../common/src/KeySequence.ts","../../common/src/KeyEvents.ts","../../common/src/KeySequences.ts","../../common/src/KeyBindings.ts","../../common/src/Mp3Encoder.ts","../../common/src/mp3-encoder.js","../../common/src/AudioClip.ts","../../common/src/CanvasResizer.ts","../../common/src/Image.ts","../../common/src/Fetcher.ts","../../common/src/Anki.ts","../../common/src/Util.ts","components/Alert.tsx","../../common/components/src/TagsTextField.tsx","../../common/components/src/ImageDialog.tsx","../../common/components/src/SubtitleTextImage.tsx","../../common/components/src/AnkiDialog.tsx","components/background-colored.png","components/DragOverlay.tsx","components/HelpDialog.tsx","services/pgs-parser/segment.ts","services/pgs-parser/buffer.ts","services/pgs-parser/parser.ts","services/SubtitleReader.ts","components/Bar.tsx","services/ChromeExtension.ts","services/Util.ts","components/CopyHistory.tsx","components/LandingPage.tsx","services/BroadcastChannelVideoProtocol.ts","services/ChromeTabVideoProtocol.ts","services/Clock.ts","components/Controls.tsx","services/MediaAdapter.ts","components/SubtitlePlayer.tsx","services/VideoChannel.ts","components/Player.tsx","components/CustomFieldDialog.tsx","components/SettingsDialog.tsx","services/SettingsProvider.ts","services/PlayerChannel.ts","components/VideoPlayer.tsx","components/App.tsx","reportWebVitals.js","index.tsx"],"names":["useWindowSize","enabled","useState","size","setSize","useLayoutEffect","updateSize","window","innerWidth","innerHeight","addEventListener","removeEventListener","KeySequenceTransitionResult","KeyEvents","event","ctrlKey","shiftKey","key","console","log","detectDecreaseOffset","detectIncreaseOffset","detectIncreaseOffsetToPreviousSubtitle","detectDecreaseOffsetToNextSubtitle","detectCopy","KeySequence","up","holding","canceledBy","map","currentlyHolding","canceled","this","result","REJECTED","extra","type","includes","keyCode","ADVANCED","CANCELED","_holdingAll","COMPLETE","KeySequences","KeyBindings","onCopy","disabledGetter","subtitleGetter","useCapture","_bindDown","subtitle","onAnkiExport","detectAnkiExport","onSeekToSubtitle","timeGetter","subtitlesGetter","subtitles","length","forward","detectPreviousSubtitle","detectNextSubtitle","_adjacentSubtitle","start","end","onSeekToBeginningOfCurrentSubtitle","detectCurrentSubtitle","_currentSubtitle","undefined","time","currentSubtitle","now","minDiff","Number","MAX_SAFE_INTEGER","i","s","diff","onSeekBackwardOrForward","detectSeekBackward","detectSeekForward","onOffsetChange","subtitleStart","originalStart","adjacentSubtitleIndex","Math","max","increase","currentOffset","onToggleSubtitles","onSequenceAdvanced","sequence","toggleSubtitles","handler","reset","transition","accept","unbindDown","unbindUp","_bindUp","onToggleSubtitleTrack","toggleSubtitleTrack","onToggleSubtitleTrackInList","toggleSubtitleTrackInList","onPlay","detectPlay","Mp3Encoder","blob","workerFactory","Promise","resolve","reject","a","reader","FileReader","onload","e","audioContext","AudioContext","target","Error","decodeAudioData","audioBuffer","channels","numberOfChannels","push","getChannelData","worker","postMessage","command","sampleRate","onmessage","Blob","data","buffer","terminate","onerror","error","message","readAsArrayBuffer","Worker_fn","Worker","AUDIO_TYPES","Object","keys","filter","MediaRecorder","isTypeSupported","t","recorderMimeType","recorderExtension","defaultMp3WorkerFactory","Base64AudioData","baseName","base64","extension","_name","_base64","_extension","cachedBlob","floor","_blob","audio","Audio","src","URL","createObjectURL","preload","load","play","setTimeout","pause","revokeObjectURL","fetch","FileAudioData","file","trackId","name","readAsDataURL","onloadend","substring","indexOf","_clipAudio","_audioElement","currentTime","_stopAudio","oncanplay","stream","_captureStream","getVideoTracks","stop","recorder","mimeType","chunks","ondataavailable","onstop","source","selectTrack","onloadedmetadata","audioTracks","id","captureStream","mozCaptureStream","Mp3AudioData","encode","slice","isSliceable","AudioClip","url","document","createElement","body","appendChild","style","display","href","download","click","remove","mp3WorkerFactory","subtitleFileName","lastIndexOf","CanvasResizer","canvas","ctx","maxWidth","maxHeight","widthRatio","width","heightRatio","height","ratio","min","newWidth","newHeight","createImageBitmap","resizeWidth","resizeHeight","then","sprite","drawImage","catch","Base64ImageData","_dataUrl","FileImageData","timestamp","_canvas","dataUrl","toDataURL","toBlob","video","_videoElement","videoWidth","videoHeight","getContext","resizer","resize","Image","imageName","HttpFetcher","method","JSON","stringify","response","json","ankiQuerySpecialCharacters","fileNameSpecialCharacters","Anki","settingsProvider","fetcher","ankiConnectUrl","_executeAction","modelName","word","query","wordField","_escapeQuery","escaped","char","text","definition","audioClip","image","customFieldValues","tags","mode","fields","_appendField","sentenceField","definitionField","sourceField","urlField","customFieldName","customAnkiFields","params","note","deckName","deck","noteType","options","allowDuplicate","duplicateScope","duplicateScopeOptions","checkChildren","gui","audioField","sanitizedName","_sanitizeFileName","_storeMediaFile","fileName","filename","imageField","recentNotes","sort","lastNoteId","fieldName","value","multiline","newValue","split","join","existingValue","sanitized","action","version","humanReadableTime","seconds","nearestTenth","totalSeconds","round","minutes","hours","String","padStart","surroundingSubtitles","index","countRadius","timeRadius","startIndex","atBoundary","endIndex","mockSurroundingSubtitles","middleSubtitle","maxTimestamp","offset","afterTimestamp","originalEnd","track","beforeTimestamp","unshift","initialIndex","sign","next","abs","useAlertStyles","makeStyles","root","justifyContent","position","top","pointerEvents","zIndex","Alert","props","classes","useEffect","open","timeout","onClose","autoHideDuration","clearTimeout","className","Grow","in","severity","children","TagsTextField","onTagsChange","setValue","handleChange","useCallback","currentValue","endsWith","newTags","splitTags","tag","trim","extractTagsFromString","TextField","onChange","useStyles","theme","backgroundSize","ImageDialog","resizeRatio","setDataUrl","setWidth","setHeight","windowWidth","windowHeight","img","fetchImage","Dialog","Card","CardMedia","title","SubtitleTextImage","availableWidth","scale","textImage","screen","alt","marginBottom","spacing","flexGrow","mediaField","cursor","rangeSelectSlider","transform","sliderMarksFromSliderContext","sliderContext","boundary","seenTimestamps","label","mark","sliderValueLabelFormat","ms","subtitleIntersectsTimeInterval","interval","ValueLabelComponent","Tooltip","enterTouchDelay","placement","useTextImageSetStyles","padding","backgroundColor","palette","disabledBackground","TextImageSet","selectedSubtitles","Paper","elevation","TextFieldEndAdornment","withStyles","InputAdornment","AnkiDialog","disabled","initialText","onProceed","onCancel","onViewImage","onOpenSettings","onRerecord","initialAudioClip","initialSource","initialUrl","customFields","anki","initialDefinition","initialWord","initialCustomFieldValues","initialSelectedTimestampInterval","timestampInterval","initialLastAppliedTimestampIntervalToText","lastAppliedTimestampIntervalToText","setDefinition","setText","setWord","lastSearchedWord","setLastSearchedWord","setSource","setTags","setUrl","duplicateNotes","setDuplicateNotes","wordTimestamp","setWordTimestamp","setCustomFieldValues","setTimestampInterval","setSelectedSubtitles","initialTimestampInterval","setInitialTimestampInterval","initialTimestampBoundaryInterval","setInitialTimestampBoundaryInterval","timestampBoundaryInterval","setTimestampBoundaryInterval","timestampMarks","setTimestampMarks","setLastAppliedTimestampIntervalToText","lastAppliedTimestampIntervalToAudio","setLastAppliedTimestampIntervalToAudio","setAudioClip","dialogRefCallback","element","getBoundingClientRect","subtitleEnd","boundaryIntervalFromSliderContext","newAudioClip","preferMp3","toMp3","audioPaddingStart","audioPaddingEnd","Date","trimmedWord","findNotesWithWord","wordHelperText","handlePlayAudio","preventDefault","stopPropagation","handleCustomFieldChange","newCustomFieldValues","assign","handleViewImage","handleTimestampIntervalChange","handleApplyTimestampIntervalToText","newText","handleApplyTimestampIntervalToAudio","handleResetTimestampInterval","handleZoomInTimestampInterval","newTimestampBoundaryInterval","disableApplyTextSelection","disableEnforceFocus","fullWidth","Toolbar","Typography","variant","IconButton","edge","onClick","DialogContent","ref","color","maxRows","InputProps","endAdornment","rows","helperText","findNotesWithWordGui","Grid","container","direction","item","Slider","valueLabelFormat","marks","step","valueLabelDisplay","marginTop","DialogActions","Button","dragging","appBarHidden","transparentBackground","content","flexDirection","alignItems","textAlign","backgroundRepeat","backgroundPosition","backgroundImage","coloredBackground","backgroundBlendMode","background","DragOverlay","loading","Fade","inlineIcon","flexWrap","HelpDialog","extensionUrl","component","Link","rel","fontSize","TableContainer","Table","TableBody","TableRow","TableCell","SegmentType","Uint8ArrayBuffer","subarray","CompositeBuffer","buffers","previousBuffersLength","bufferIndex","at","startBufferIndex","endBufferIndex","CompositeBufferReader","bytes","accumulated","shift","required","c","BufferGenerator","accumulatedBuffer","requestedBytes","getReader","read","done","add","BufferReader","_index","limit","number","digit","from","CompositionState","segmentTypeValues","values","segmentTypeFromByte","byte","LastInSequenceFlag","compositionStateValues","lastInSequenceFlagValues","RunLengthEncodedBuffer","encodedBuffer","callback","encodedIndex","decodedLineIndex","currentLine","encodedLength","firstByte","runLength","increment","secondByte","thirdByte","x","DisplaySet","presentationCompositionSegment","windowDefinitionSegments","paletteDefinitionSegments","objectDefinitionSegments","endDefinitionSegment","previousDisplaySet","find","ods","lastInSequenceFlag","firstInSequence","firstAndLastInSequence","paletteId","pds","compositionState","normal","paletteDefinitionSegment","firstOds","imageDataArray","Uint8ClampedArray","rgbaPalette","paletteEntries","ycrcbToRgba","objectData","decode","y","paletteIndex","imageDataOffset","r","g","b","ImageData","luminance","cb","colorDifferenceBlue","cr","colorDifferenceRed","clamp","transparency","parseDisplaySets","bufferGenerator","header","segmentType","pcs","wds","parsePcsSegment","parseWdsSegment","parsePdsSegment","parseOdsSegment","lastDisplaySet","magicNumber","readHex","presentationTimestamp","decodingTimestamp","segmentSize","compositionNumber","state","compositionStateFromByte","paletteUpdateFlag","paletteUpdateFlagFromByte","compositionObjectCount","objectId","windowId","objectCroppedFlag","objectCroppedFlagFromByte","objectHorizontalPosition","objectVerticalPosition","objectCroppingHorizontalPosition","objectCroppingVerticalPosition","objectCroppingWidth","objectCroppingHeightPosition","windowCount","windowDefinitions","windowHorizontalPosition","windowVerticalPosition","paletteVersionNumber","paletteEntryId","objectVersionNumber","flag","lastInSequenceFlagFromByte","objectDataLength","readBuffer","tagRegex","RegExp","assNewLineRegex","helperElement","helperCanvas","SubtitleReader","canvasResizer","xmlParser","files","all","f","_subtitles","flatMap","nodes","n1","n2","parseSrt","node","isFromNetflix","parser","WebVTT","Parser","StringDecoder","cues","oncue","replace","lines","newLines","line","_fixRTL","onflush","startTime","endTime","parse","flush","parseAss","dialogues","dialogue","slices","fragments","fragment","xml","_xmlParser","textNodes","elm","parseFloat","_decodeHTML","parsePgsDisplaySets","displaySet","currentImageDisplaySet","screenWidth","screenHeight","imageData","putImageData","index1","index2","newLine","innerHTML","childNodes","nodeValue","XMLParser","ignoreAttributes","appBar","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","drawerWidth","easeOut","enteringScreen","marginRight","copyHistoryButton","copyHistoryButtonShift","hide","useCopyHistoryTooltipStyles","tooltip","show","CopyHistoryTooltip","toolTipProps","Bar","AppBar","clsx","drawerOpen","hidden","onFileSelector","onOpenHelp","onOpenCopyHistory","ChromeExtension","heartbeat","onMessageCallbacks","onTabsCallbacks","versionPromise","tabs","versionResolve","uuidv4","sender","tabId","_sendHeartbeat","setInterval","receivedTabs","tab","_remove","callbacks","splice","computeStyles","subtitleColor","subtitleSize","subtitleOutlineThickness","subtitleOutlineColor","subtitleBackgroundOpacity","subtitleBackgroundColor","subtitleFontFamily","styles","thickness","opacity","hex","exec","parseInt","hexToRgb","timeDurationDisplay","milliseconds","totalMilliseconds","includeMilliseconds","secs","mins","hrs","pad","padEnd","n","drawer","flexShrink","drawerPaper","drawerHeader","mixins","toolbar","listContainer","overflowY","overflowX","listItem","hover","listItemGutters","paddingLeft","paddingRight","listItemIconRoot","minWidth","emptyState","emptyText","secondary","Menu","anchorEl","onSelect","onClipAudio","onDownloadImage","onDelete","handleCopy","navigator","clipboard","writeText","handleJumpTo","handleClipAudio","handleDownloadImage","handleDelete","Popover","anchorOrigin","vertical","horizontal","transformOrigin","ListItem","button","ListItemText","primaryTypographyProps","primary","videoFile","audioFile","CopyHistory","scrollToBottomRefCallback","scrollIntoView","menuItem","setMenuItem","menuOpen","setMenuOpen","menuAnchorEl","setMenuAnchorEl","handleMenu","currentTarget","handleMenuClosed","items","lastSeenItemName","itemNameCounters","ListSubheader","disableSticky","gutters","ListItemIcon","onAnki","wrap","Fragment","Drawer","anchor","paper","Divider","browseLink","LandingPage","latestExtensionVersion","installedExtensionVersion","setInstalledExtensionVersion","installedVersion","fetchInstalledExtensionVersion","extensionUpdateAvailable","gt","extensionNotInstalled","BroadcastChannelVideoProtocol","channelId","channel","onMessage","BroadcastChannel","that","close","ChromeTabVideoProtocol","listener","subscribe","sendMessage","unsubscribe","Clock","started","useControlStyles","left","bottom","buttonContainer","timeDisplay","marginLeft","offsetInput","volumeInputContainerShown","short","volumeInputContainerHidden","volumeInputHidden","volumeInputShown","volumeInputThumbHidden","volumeInputThumbShown","subContainer","inactiveButton","inactiveTopButton","progress","margin","topButton","gridContainer","useProgressBarStyles","mouseEventListener","fillContainer","fillContainerThick","easeInOut","fill","handleContainer","handle","borderRadius","handleOn","shortest","VolumeSlider","verticalAlign","thumb","boxShadow","active","displayTime","secondsInMinute","ProgressBar","onSeek","mouseOver","setMouseOver","containerRef","useRef","handleClick","rect","right","pageX","handleMouseOver","handleMouseOut","progressWidth","current","elementWidth","fillStyle","handleStyle","fillContainerClassName","handleClassName","onMouseOver","onMouseOut","AudioTrackSelector","selectedAudioTrack","onAudioTrackSelected","list","selected","language","TabSelector","selectedTab","onTabSelected","MediaUnloader","onUnload","Controls","clock","playing","offsetEnabled","displayLength","mousePositionRef","onShow","onPause","onUnloadAudio","onUnloadVideo","onVolumeChange","disableKeyEvents","closeEnabled","volumeEnabled","condensedModeEnabled","condensedModeToggleEnabled","onCondensedModeToggle","subtitlesEnabled","subtitlesToggle","onSubtitlesToggle","popOutEnabled","popOut","onPopOutToggle","fullscreenEnabled","fullscreen","onFullscreenToggle","hideSubtitlePlayerToggleEnabled","subtitlePlayerHidden","onHideSubtitlePlayerToggle","showOnMouseMovement","theaterModeToggleEnabled","theaterModeEnabled","onTheaterModeToggle","setShow","audioTrackSelectorOpen","setAudioTrackSelectorOpen","audioTrackSelectorAnchorEl","setAudioTrackSelectorAnchorEl","tabSelectorOpen","setTabSelectorOpen","tabSelectorAnchorEl","setTabSelectorAnchorEl","audioUnloaderOpen","setAudioUnloaderOpen","audioUnloaderAnchorEl","setAudioUnloaderAnchorEl","videoUnloaderOpen","setVideoUnloaderOpen","videoUnloaderAnchorEl","setVideoUnloaderAnchorEl","showVolumeBar","setShowVolumeBar","volume","setVolume","lastCommittedVolume","setLastCommittedVolume","lastMousePositionRef","lastShowTimestampRef","lastOffsetInputChangeTimestampRef","lastShowRef","forceShowRef","offsetInputRef","closeButtonRef","updateState","forceUpdate","handleSeek","savedVolume","currentShow","pow","offsetTop","offsetHeight","activeElement","clearInterval","handleKey","isNaN","blur","handleOffsetInputClicked","inputElement","setSelectionRange","offsetSeconds","toFixed","handleAudioTrackSelectorClosed","handleAudioTrackSelectorOpened","handleAudioTrackSelected","handleTabSelectorClosed","handleTabSelectorOpened","handleTabSelected","handleAudioUnloaderClosed","handleAudioUnloaderOpened","handleUnloadAudio","handleVideoUnloaderClosed","handleVideoUnloaderOpened","handleUnloadVideo","handleVolumeMouseOut","handleVolumeMouseOver","handleVolumeChange","handleVolumeChangeCommitted","handleVolumeToggle","newVolume","onChangeCommitted","defaultValue","Input","inputRef","disableUnderline","placeholder","MediaAdapter","readyResolves","_onMediaCanPlay","readyState","useSubtitlePlayerStyles","default","compressed","table","noSubtitles","useSubtitleRowStyles","subtitleRow","overflowWrap","compressedSubtitle","disabledSubtitle","copyButton","SubtitleRow","React","memo","subtitleRef","onClickSubtitle","onCopySubtitle","tableRowProps","textRef","textSelected","setTextSelected","disabledClassName","availWidth","onMouseUp","selection","getSelection","isSameNode","anchorNode","parentNode","SubtitlePlayer","onAnkiDialogRequest","jumpToSubtitle","displayHelp","lastJumpToTopTimestamp","disabledSubtitleTracks","playingRef","clockRef","subtitleListRef","subtitleRefs","useMemo","Array","_","createRef","subtitleRefsRef","disableKeyEventsRef","selectedSubtitleIndexes","setSelectedSubtitleIndexes","selectedSubtitleIndexesRef","lengthRef","hiddenRef","lastScrollTimestampRef","requestAnimationRef","requestAnimationFrame","update","smallestIndex","fallbackIndex","currentSubtitleIndexes","keysAreEqual","scrollToSubtitleRef","allowScroll","block","inline","behavior","cancelAnimationFrame","scrollToCurrentSubtitle","indexes","scrollIfVisible","visibilityState","firstSubtitleRef","unbind","bindAdjustOffset","bindOffsetToSubtitle","bindSeekToSubtitle","bindSeekToBeginningOfCurrentSubtitle","bindSeekBackwardOrForward","handleScroll","jumpToIndex","calculateSurroundingSubtitlesForIndex","surroundingSubtitlesCountRadius","surroundingSubtitlesTimeRadius","calculateSurroundingSubtitles","bindCopy","subtitleIndexes","bindToggleSubtitleTrackInList","bindAnkiExport","subtitleTable","square","VideoChannel","protocol","isReady","readyCallbacks","playCallbacks","pauseCallbacks","audioTrackSelectedCallbacks","currentTimeCallbacks","exitCallbacks","offsetCallbacks","popOutToggleCallbacks","copyCallbacks","condensedModeToggleCallbacks","hideSubtitlePlayerToggleCallbacks","appBarToggleCallbacks","ankiDialogRequestCallbacks","toggleSubtitleTrackInListCallbacks","readyMessage","paused","readyStateMessage","Event","playMessage","echo","pauseMessage","audioTrackSelectedMessage","currentTimeMessage","offsetMessage","copyMessage","preventDuplicate","ankiDialogRequestMessage","forwardToVideo","toggleSubtitleTrackInListMessage","subtitleFileNames","names","settings","resume","videoFrame","border","trackLength","audioRef","videoRef","useOffset","subtitlesLength","audioLength","videoLength","Player","sources","subtitleFiles","audioFileUrl","videoFileUrl","subtitleReader","videoFrameRef","videoPopOut","availableTabs","ankiDialogRequestToVideo","ankiDialogRequested","ankiDialogFinishedRequest","onError","onLoaded","onAppBarToggle","onVideoPopOut","setSubtitles","subtitlesRef","loadingSubtitles","setLoadingSubtitles","setPlaying","setLastJumpToTopTimestamp","setOffset","setAudioTracks","setSelectedAudioTrack","setChannelId","setResumeOnFinishedAnkiDialogRequest","hideSubtitlePlayer","setHideSubtitlePlayer","hideSubtitlePlayerRef","setDisabledSubtitleTracks","setCondensedModeEnabled","condensedModeEnabledRef","mediaAdapter","seek","forwardToMedia","setTime","applyOffset","newSubtitles","channelClosed","onReady","init","subscribed","onExit","hideSubtitlePlayerToggle","ready","subtitleSettings","ankiSettings","miscSettings","condensedModeToggle","onOffset","onCurrentTime","tracks","newTracks","ankiDialogRequest","finishedAnkiDialogRequest","resumeOnFinishedAnkiDialogRequest","seeking","expectedSeekTime","currentOrNextIndex","currentIndex","nextSubtitle","t0","process","encodeURIComponent","handlePlay","handlePause","handleSeekToSubtitle","shouldPlay","handleMouseMove","screenX","screenY","audioTrackSelected","handleOffsetChange","HTMLMediaElement","handleCondensedModeToggle","handleToggleSubtitleTrack","bindPlay","unbindCopy","unbindAnkiExport","appBarToggle","loaded","videoInWindow","Boolean","onMouseMove","CustomFieldDialog","existingCustomFieldNames","setFieldName","fieldExists","DialogTitle","subtitleSetting","subtitlePreview","subtitlePreviewInput","outline","addFieldButton","useSelectableSettingStyles","formControl","SelectableSetting","selections","removable","onSelectionChange","onRemoval","FormControl","InputLabel","Select","MenuItem","SettingsDialog","setAnkiConnectUrl","ankiConnectUrlError","setAnkiConnectUrlError","ankiConnectUrlChangeTimestamp","setAnkiConnectUrlChangeTimestamp","setDeck","deckNames","setDeckNames","setNoteType","modelNames","setModelNames","setSentenceField","setDefinitionField","setAudioField","setImageField","setWordField","setSourceField","setUrlField","setCustomFields","setPreferMp3","fieldNames","setFieldNames","customFieldDialogOpen","setCustomFieldDialogOpen","setAudioPaddingStart","setAudioPaddingEnd","maxImageWidth","setMaxImageWidth","maxImageHeight","setMaxImageHeight","setSubtitleColor","setSubtitleSize","setSubtitleOutlineColor","setSubtitleOutlineThickness","setSubtitleBackgroundColor","setSubtitleBackgroundOpacity","setSubtitleFontFamily","imageBasedSubtitleScaleFactor","setImageBasedSubtitleScaleFactor","setSubtitlePreview","themeType","setThemeType","handleAnkiConnectUrlChange","handleRetryAnkiConnectUrl","handleDeckChange","handleDeckSelectionChange","handleNoteTypeChange","handleNoteTypeSelectionChange","handleSentenceFieldChange","handleSentenceFieldSelectionChange","handleDefinitionFieldChange","handleDefinitionFieldSelectionChange","handleAudioFieldChange","handleAudioFieldSelectionChange","handleImageFieldChange","handleImageFieldSelectionChange","handleWordFieldChange","handleWordFieldSelectionChange","handleSourceFieldChange","handleSourceFieldSelectionChange","handleUrlFieldChange","handleUrlFieldSelectionChange","handleAudioPaddingStart","handleAudioPaddingEnd","handleMaxImageWidth","handleMaxImageHeight","handleSubtitleColorChange","handleSubtitleSizeChange","handleSubtitleOutlineColorChange","handleSubtitleOutlineThicknessChange","handleSubtitleBackgroundColorChange","handleSubtitleBackgroundOpacityChange","handleSubtitleFontFamilyChange","handleSubtitlePreviewChange","handleImageBasedSubtitleScaleFactorChange","handleAddCustomField","oldCustomFields","newCustomFields","handleCustomFieldRemoval","handleTagsChange","handlePreferMp3Change","checked","handleThemeTypeChange","subtitlePreviewStyles","requestPermission","refreshFieldNames","modelFieldNames","handleClose","theaterMode","customFieldInputs","FormLabel","FormGroup","FormHelperText","location","hostname","FormControlLabel","control","Checkbox","inputProps","Radio","ankiConnectUrlKey","deckKey","noteTypeKey","sentenceFieldKey","definitionFieldKey","audioFieldKey","imageFieldKey","wordFieldKey","sourceFieldKey","urlFieldKey","customAnkiFieldsKey","tagsKey","subtitleSizeKey","subtitleColorKey","subtitleOutlineThicknessKey","subtitleOutlineColorKey","subtitleBackgroundColorKey","subtitleBackgroundOpacityKey","subtitleFontFamilyKey","subtitlePreviewKey","imageBasedSubtitleScaleFactorKey","audioPaddingStartKey","audioPaddingEndKey","maxImageWidthKey","maxImageHeightKey","volumeKey","theaterModeKey","preferMp3Key","themeTypeKey","SettingsProvider","_tags","newSettings","localStorage","getItem","removeItem","setItem","_setOptionalItem","ankiFieldsString","tagsString","_getNumberItem","PlayerChannel","closeCallbacks","subtitlesCallbacks","finishedAnkiDialogRequestCallbacks","subtitlesMessage","condensedModeToggleMessage","hideSubtitlePlayerToggleMessage","appBarToggleMessage","finishedAnkiDialogRequestMessage","playbackRate","overflow","cursorHidden","subtitleContainer","notifyReady","playerChannel","outerWidth","availHeight","outerHeight","resizeTo","selectedTrack","VideoPlayer","poppingInRef","fullscreenElement","setFullscreen","useFullscreen","fullscreenRef","setLength","showSubtitles","setShowSubtitles","setSubtitlesEnabled","setSubtitlePlayerHidden","setAppBarHidden","showSubtitlesRef","showCursor","setShowCursor","lastMouseMovementTimestamp","alert","setAlert","alertOpen","setAlertOpen","returnToFullscreenOnFinishedAnkiDialogRequest","setReturnToFullscreenOnFinishedAnkiDialogRequest","returnToFullscreenOnFinishedAnkiDialogRequestRef","videoRefCallback","videoElement","onloadeddata","ontimeupdate","code","errorMessage","selectAudioTrack","onSubtitles","exitFullscreen","onFinishedAnkiDialogRequest","requestFullscreen","onbeforeunload","equals","arrayEquals","s1","s2","copy","bindToggleSubtitles","bindToggleSubtitleTrackInVideo","handleSubtitlesToggle","handleFullscreenToggle","handlePopOutToggle","popOutToggle","handleHideSubtitlePlayerToggle","handleTheaterModeToggle","handleDoubleClick","handleAlertClosed","subtitleStyles","bounds","clientX","clientY","controls","onDoubleClick","isMobile","useContentStyles","contentShift","audioClipFromItem","paddingStart","paddingEnd","fromBase64","subtitleFile","fromFile","audioTrack","imageFromItem","itemSourceString","NavigateToVideo","searchParams","get","to","RenderVideo","Content","App","createTheme","main","red","A400","useLocation","inVideoPlayer","pathname","drawerRatio","minDrawerSize","copiedSubtitles","setCopiedSubtitles","copiedSubtitlesRef","copyHistoryOpen","setCopyHistoryOpen","setTheaterMode","setVideoPopOut","alertSeverity","setAlertSeverity","setJumpToSubtitle","setSources","setLoading","setDragging","dragEnterRef","setFileName","ankiDialogOpen","setAnkiDialogOpen","ankiDialogDisabled","setAnkiDialogDisabled","ankiDialogItem","setAnkiDialogItem","ankiDialogItemSliderContext","itemSliderContext","ankiDialogAudioClip","ankiDialogImage","setAnkiDialogRequestToVideo","setAnkiDialogRequested","setAnkiDialogFinishedRequest","settingsDialogOpen","setSettingsDialogOpen","helpDialogOpen","setHelpDialogOpen","imageDialogOpen","setImageDialogOpen","setDisableKeyEvents","setImage","setTab","setAvailableTabs","fileInputRef","last","newCopiedSubtitles","updated","copiedSubtitle","newCopiedSubtitle","handleOpenCopyHistory","handleCloseCopyHistory","handleAppBarToggle","handleVideoPopOut","handleOpenSettings","handleOpenHelp","handleCloseHelp","handleImageDialogClosed","handleCloseSettings","subtitleSettingsMessage","ankiSettingsMessage","miscSettingsMessage","publishMessage","handleDeleteCopyHistoryItem","handleError","previous","clip","handleSelectCopyHistoryItem","handleAnki","handleAnkiDialogCancel","handleAnkiDialogProceed","export","handleAnkiDialogRequest","onTabs","t1","t2","subscribeTabs","unsubscribeTabs","handleFiles","extensionStartIndex","extractSources","revokeUrls","syncMessage","File","handleDrop","dataTransfer","handleFileInputChange","handleFileSelector","handleDragEnter","handleDragLeave","nativeEvent","handleSourcesLoaded","useSearchParams","nothingLoaded","ThemeProvider","CssBaseline","onDrop","onDragOver","onDragEnter","onDragLeave","path","multiple","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","createRoot","querySelector","render","basename"],"mappings":"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","file":"static/js/main.469d3b93.chunk.js","sourcesContent":["import { useLayoutEffect, useState } from 'react';\r\n\r\n// https://stackoverflow.com/questions/19014250/rerender-view-on-browser-resize-with-react\r\nexport function useWindowSize(enabled: boolean) {\r\n    const [size, setSize] = useState([0, 0]);\r\n\r\n    useLayoutEffect(() => {\r\n        function updateSize() {\r\n            if (enabled) {\r\n                setSize([window.innerWidth, window.innerHeight]);\r\n            }\r\n        }\r\n\r\n        window.addEventListener('resize', updateSize);\r\n        updateSize();\r\n\r\n        return () => window.removeEventListener('resize', updateSize);\r\n    }, [enabled]);\r\n\r\n    return size;\r\n}\r\n","export enum KeySequenceTransitionResult {\r\n    REJECTED = 0,\r\n    CANCELED = 1,\r\n    ADVANCED = 2,\r\n    COMPLETE = 3,\r\n}\r\n\r\nexport interface KeySequenceOptions {\r\n    up?: number[];\r\n    holding?: number[];\r\n    canceledBy?: number[];\r\n    map?: (event: KeyboardEvent) => any;\r\n}\r\n\r\nexport interface KeySequenceTransition {\r\n    result: KeySequenceTransitionResult;\r\n    extra?: any;\r\n}\r\n\r\nexport default class KeySequence {\r\n    private up: number[];\r\n    private holding: number[];\r\n    private canceledBy: number[];\r\n    private map: (event: KeyboardEvent) => any;\r\n    private currentlyHolding: { [key: number]: boolean };\r\n    private canceled: boolean;\r\n\r\n    constructor({ up, holding, canceledBy, map }: KeySequenceOptions) {\r\n        this.up = up || [];\r\n        this.holding = holding || [];\r\n        this.canceledBy = canceledBy || [];\r\n        this.map = map || ((event: KeyboardEvent) => true);\r\n        this.currentlyHolding = {};\r\n        this.canceled = false;\r\n    }\r\n\r\n    reset() {\r\n        this.currentlyHolding = {};\r\n        this.canceled = false;\r\n    }\r\n\r\n    accept(event: KeyboardEvent): KeySequenceTransition {\r\n        let result = KeySequenceTransitionResult.REJECTED;\r\n        let extra = null;\r\n\r\n        if (event.type === 'keydown') {\r\n            if (this.holding.includes(event.keyCode)) {\r\n                this.currentlyHolding[event.keyCode] = true;\r\n                this.canceled = false;\r\n                result = KeySequenceTransitionResult.ADVANCED;\r\n            }\r\n\r\n            if (this.canceledBy.includes(event.keyCode)) {\r\n                this.canceled = true;\r\n                result = KeySequenceTransitionResult.CANCELED;\r\n            }\r\n\r\n            if (this.up.includes(event.keyCode)) {\r\n                this.canceled = false;\r\n                result = KeySequenceTransitionResult.ADVANCED;\r\n            }\r\n        }\r\n\r\n        if (event.type === 'keyup') {\r\n            delete this.currentlyHolding[event.keyCode];\r\n\r\n            if (this.up.includes(event.keyCode) && this._holdingAll() && !this.canceled) {\r\n                extra = this.map(event);\r\n                result = KeySequenceTransitionResult.COMPLETE;\r\n            }\r\n        }\r\n\r\n        return { result: result, extra: extra };\r\n    }\r\n\r\n    _holdingAll() {\r\n        for (const key of this.holding) {\r\n            if (!(key in this.currentlyHolding)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n","export default class KeyEvents {\r\n    static detectCopy(event: KeyboardEvent) {\r\n        // Ctrl + Shift + A\r\n        return event.ctrlKey && event.shiftKey && event.key === 'A';\r\n    }\r\n\r\n    static detectDecreaseOffset(event: KeyboardEvent) {\r\n        // Ctrl + Shift + Right\r\n        return event.ctrlKey && event.shiftKey && event.key === 'ArrowRight';\r\n    }\r\n\r\n    static detectAnkiExport(event: KeyboardEvent) {\r\n        // Ctrl + Shift + Q\r\n        console.log(event.key);\r\n        return event.ctrlKey && event.shiftKey && event.key === 'Q';\r\n    }\r\n\r\n    static detectIncreaseOffset(event: KeyboardEvent) {\r\n        // Ctrl + Shift + Left\r\n        return event.ctrlKey && event.shiftKey && event.key === 'ArrowLeft';\r\n    }\r\n\r\n    static detectDecreaseOffsetToNextSubtitle(event: KeyboardEvent) {\r\n        // Ctrl + Right\r\n        return (\r\n            !KeyEvents.detectDecreaseOffset(event) && (event.ctrlKey || event.shiftKey) && event.key === 'ArrowRight'\r\n        );\r\n    }\r\n\r\n    static detectIncreaseOffsetToPreviousSubtitle(event: KeyboardEvent) {\r\n        // Ctrl + Left\r\n        return !KeyEvents.detectIncreaseOffset(event) && (event.ctrlKey || event.shiftKey) && event.key === 'ArrowLeft';\r\n    }\r\n\r\n    static detectPreviousSubtitle(event: KeyboardEvent) {\r\n        // Left\r\n        return (\r\n            !KeyEvents.detectIncreaseOffset(event) &&\r\n            !KeyEvents.detectIncreaseOffsetToPreviousSubtitle(event) &&\r\n            event.key === 'ArrowLeft'\r\n        );\r\n    }\r\n\r\n    static detectNextSubtitle(event: KeyboardEvent) {\r\n        // Right\r\n        return (\r\n            !KeyEvents.detectDecreaseOffset(event) &&\r\n            !KeyEvents.detectDecreaseOffsetToNextSubtitle(event) &&\r\n            event.key === 'ArrowRight'\r\n        );\r\n    }\r\n\r\n    static detectCurrentSubtitle(event: KeyboardEvent) {\r\n        // Down\r\n        return event.key === 'ArrowDown';\r\n    }\r\n\r\n    static detectSeekBackward(event: KeyboardEvent) {\r\n        // A\r\n        return !KeyEvents.detectCopy(event) && event.key === 'a';\r\n    }\r\n\r\n    static detectSeekForward(event: KeyboardEvent) {\r\n        // D\r\n        return event.key === 'd';\r\n    }\r\n\r\n    static detectPlay(event: KeyboardEvent) {\r\n        // Space\r\n        return event.key === ' ';\r\n    }\r\n}\r\n","import KeySequence from './KeySequence';\r\n\r\nexport default class KeySequences {\r\n    static toggleSubtitles() {\r\n        // Up S, canceled by 1...9\r\n        return new KeySequence({ up: [83], canceledBy: [49, 50, 51, 52, 53, 54, 55, 56, 57] });\r\n    }\r\n\r\n    static toggleSubtitleTrack() {\r\n        // Holding S, up 1...9\r\n        return new KeySequence({\r\n            holding: [83],\r\n            up: [49, 50, 51, 52, 53, 54, 55, 56, 57],\r\n            map: (event) => event.keyCode - 49,\r\n        });\r\n    }\r\n\r\n    static toggleSubtitleTrackInList() {\r\n        // Holding W, up 1...9\r\n        return new KeySequence({\r\n            holding: [87],\r\n            up: [49, 50, 51, 52, 53, 54, 55, 56, 57],\r\n            map: (event) => event.keyCode - 49,\r\n        });\r\n    }\r\n}\r\n","import { SubtitleModel } from './Model';\r\nimport KeyEvents from './KeyEvents';\r\nimport { KeySequenceTransitionResult } from './KeySequence';\r\nimport KeySequences from './KeySequences';\r\n\r\nexport default class KeyBindings {\r\n    static bindCopy<T extends SubtitleModel = SubtitleModel>(\r\n        onCopy: (event: KeyboardEvent, subtitle: T) => void,\r\n        disabledGetter: () => boolean,\r\n        subtitleGetter: () => T | undefined,\r\n        useCapture = false\r\n    ) {\r\n        return KeyBindings._bindDown((event) => {\r\n            if (disabledGetter()) {\r\n                return;\r\n            }\r\n\r\n            if (!KeyEvents.detectCopy(event)) {\r\n                return;\r\n            }\r\n\r\n            const subtitle = subtitleGetter();\r\n\r\n            if (!subtitle) {\r\n                return;\r\n            }\r\n\r\n            onCopy(event, subtitle);\r\n        }, useCapture);\r\n    }\r\n\r\n    static bindAnkiExport(\r\n        onAnkiExport: (event: KeyboardEvent) => void,\r\n        disabledGetter: () => boolean,\r\n        useCapture = false\r\n    ) {\r\n        return KeyBindings._bindDown((event) => {\r\n            if (disabledGetter()) {\r\n                return;\r\n            }\r\n\r\n            if (!KeyEvents.detectAnkiExport(event)) {\r\n                return;\r\n            }\r\n\r\n            onAnkiExport(event);\r\n        }, useCapture);\r\n    }\r\n\r\n    static bindSeekToSubtitle(\r\n        onSeekToSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\r\n        disabledGetter: () => boolean,\r\n        timeGetter: () => number,\r\n        subtitlesGetter: () => SubtitleModel[] | undefined,\r\n        useCapture = false\r\n    ) {\r\n        return KeyBindings._bindDown((event) => {\r\n            if (disabledGetter()) {\r\n                return;\r\n            }\r\n\r\n            const subtitles = subtitlesGetter();\r\n\r\n            if (!subtitles || subtitles.length === 0) {\r\n                return;\r\n            }\r\n\r\n            let forward;\r\n\r\n            if (KeyEvents.detectPreviousSubtitle(event)) {\r\n                forward = false;\r\n            } else if (KeyEvents.detectNextSubtitle(event)) {\r\n                forward = true;\r\n            } else {\r\n                return;\r\n            }\r\n\r\n            const subtitle = KeyBindings._adjacentSubtitle(forward, timeGetter(), subtitles);\r\n\r\n            if (subtitle !== null && subtitle.start >= 0 && subtitle.end >= 0) {\r\n                onSeekToSubtitle(event, subtitle);\r\n            }\r\n        }, useCapture);\r\n    }\r\n\r\n    static bindSeekToBeginningOfCurrentSubtitle(\r\n        onSeekToBeginningOfCurrentSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\r\n        disabledGetter: () => boolean,\r\n        timeGetter: () => number,\r\n        subtitlesGetter: () => SubtitleModel[] | undefined,\r\n        useCapture = false\r\n    ) {\r\n        return KeyBindings._bindDown((event) => {\r\n            if (disabledGetter()) {\r\n                return;\r\n            }\r\n\r\n            if (!KeyEvents.detectCurrentSubtitle(event)) {\r\n                return;\r\n            }\r\n\r\n            const subtitles = subtitlesGetter();\r\n\r\n            if (!subtitles || subtitles.length === 0) {\r\n                return;\r\n            }\r\n\r\n            const subtitle = KeyBindings._currentSubtitle(timeGetter(), subtitles);\r\n\r\n            if (subtitle !== undefined && subtitle.start >= 0 && subtitle.end >= 0) {\r\n                onSeekToBeginningOfCurrentSubtitle(event, subtitle);\r\n            }\r\n        }, useCapture);\r\n    }\r\n\r\n    static _currentSubtitle(time: number, subtitles: SubtitleModel[]) {\r\n        const now = time;\r\n        let currentSubtitle: SubtitleModel | undefined;\r\n        let minDiff = Number.MAX_SAFE_INTEGER;\r\n\r\n        for (let i = 0; i < subtitles.length; ++i) {\r\n            const s = subtitles[i];\r\n\r\n            if (s.start < 0 || s.end < 0) {\r\n                continue;\r\n            }\r\n\r\n            const diff = now - s.start;\r\n\r\n            if (now >= s.start && now < s.end) {\r\n                if (diff < minDiff) {\r\n                    currentSubtitle = s;\r\n                    minDiff = diff;\r\n                }\r\n            }\r\n        }\r\n\r\n        return currentSubtitle;\r\n    }\r\n\r\n    static bindSeekBackwardOrForward(\r\n        onSeekBackwardOrForward: (event: KeyboardEvent, forward: boolean) => void,\r\n        disabledGetter: () => boolean,\r\n        useCapture = false\r\n    ) {\r\n        return KeyBindings._bindDown((event) => {\r\n            if (disabledGetter()) {\r\n                return;\r\n            }\r\n\r\n            let forward: boolean;\r\n\r\n            if (KeyEvents.detectSeekBackward(event)) {\r\n                forward = false;\r\n            } else if (KeyEvents.detectSeekForward(event)) {\r\n                forward = true;\r\n            } else {\r\n                return;\r\n            }\r\n\r\n            onSeekBackwardOrForward(event, forward);\r\n        }, useCapture);\r\n    }\r\n\r\n    static bindOffsetToSubtitle(\r\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\r\n        disabledGetter: () => boolean,\r\n        timeGetter: () => number,\r\n        subtitlesGetter: () => SubtitleModel[] | undefined,\r\n        useCapture = false\r\n    ) {\r\n        return KeyBindings._bindDown((event) => {\r\n            if (disabledGetter()) {\r\n                return;\r\n            }\r\n\r\n            const subtitles = subtitlesGetter();\r\n\r\n            if (!subtitles || subtitles.length === 0) {\r\n                return;\r\n            }\r\n\r\n            let forward;\r\n\r\n            if (KeyEvents.detectIncreaseOffsetToPreviousSubtitle(event)) {\r\n                forward = false;\r\n            } else if (KeyEvents.detectDecreaseOffsetToNextSubtitle(event)) {\r\n                forward = true;\r\n            } else {\r\n                return;\r\n            }\r\n\r\n            const time = timeGetter();\r\n            const subtitle = KeyBindings._adjacentSubtitle(forward, time, subtitles);\r\n\r\n            if (subtitle !== null) {\r\n                const subtitleStart = subtitle.originalStart;\r\n                const newOffset = time - subtitleStart;\r\n                onOffsetChange(event, newOffset);\r\n            }\r\n        }, useCapture);\r\n    }\r\n\r\n    static _adjacentSubtitle(forward: boolean, time: number, subtitles: SubtitleModel[]) {\r\n        const now = time;\r\n        let adjacentSubtitleIndex = -1;\r\n        let minDiff = Number.MAX_SAFE_INTEGER;\r\n\r\n        for (let i = 0; i < subtitles.length; ++i) {\r\n            const s = subtitles[i];\r\n            const diff = forward ? s.start - now : now - s.start;\r\n\r\n            if (minDiff <= diff) {\r\n                continue;\r\n            }\r\n\r\n            if (forward && now < s.start) {\r\n                minDiff = diff;\r\n                adjacentSubtitleIndex = i;\r\n            } else if (!forward && now > s.start) {\r\n                minDiff = diff;\r\n                adjacentSubtitleIndex = now < s.end ? Math.max(0, i - 1) : i;\r\n            }\r\n        }\r\n\r\n        if (adjacentSubtitleIndex !== -1) {\r\n            return subtitles[adjacentSubtitleIndex];\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    static bindAdjustOffset(\r\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\r\n        disabledGetter: () => boolean,\r\n        subtitlesGetter: () => SubtitleModel[] | undefined,\r\n        useCapture = false\r\n    ) {\r\n        return KeyBindings._bindDown((event) => {\r\n            if (disabledGetter()) {\r\n                return;\r\n            }\r\n\r\n            const subtitles = subtitlesGetter();\r\n\r\n            if (!subtitles || subtitles.length === 0) {\r\n                return;\r\n            }\r\n\r\n            let increase;\r\n\r\n            if (KeyEvents.detectDecreaseOffset(event)) {\r\n                increase = false;\r\n            } else if (KeyEvents.detectIncreaseOffset(event)) {\r\n                increase = true;\r\n            } else {\r\n                return;\r\n            }\r\n\r\n            const currentOffset = subtitles[0].start - subtitles[0].originalStart;\r\n            const newOffset = currentOffset + (increase ? 100 : -100);\r\n            onOffsetChange(event, newOffset);\r\n        }, useCapture);\r\n    }\r\n\r\n    static bindToggleSubtitles(\r\n        onToggleSubtitles: (event: KeyboardEvent) => void,\r\n        onSequenceAdvanced: () => void,\r\n        disabledGetter: () => boolean,\r\n        useCapture = false\r\n    ) {\r\n        const sequence = KeySequences.toggleSubtitles();\r\n        const handler = (event: KeyboardEvent) => {\r\n            if (disabledGetter()) {\r\n                sequence.reset();\r\n                return;\r\n            }\r\n\r\n            const transition = sequence.accept(event);\r\n\r\n            if (transition.result === KeySequenceTransitionResult.ADVANCED) {\r\n                onSequenceAdvanced();\r\n            } else if (transition.result === KeySequenceTransitionResult.COMPLETE) {\r\n                onToggleSubtitles(event);\r\n            }\r\n        };\r\n        const unbindDown = KeyBindings._bindDown(handler, useCapture);\r\n        const unbindUp = KeyBindings._bindUp(handler, useCapture);\r\n\r\n        return () => {\r\n            unbindDown();\r\n            unbindUp();\r\n        };\r\n    }\r\n\r\n    static bindToggleSubtitleTrackInVideo(\r\n        onToggleSubtitleTrack: (event: KeyboardEvent, extra: any) => void,\r\n        onSequenceAdvanced: (event: KeyboardEvent) => void,\r\n        disabledGetter: () => boolean,\r\n        useCapture = false\r\n    ) {\r\n        const sequence = KeySequences.toggleSubtitleTrack();\r\n        const handler = (event: KeyboardEvent) => {\r\n            if (disabledGetter()) {\r\n                sequence.reset();\r\n                return;\r\n            }\r\n\r\n            const transition = sequence.accept(event);\r\n\r\n            if (transition.result === KeySequenceTransitionResult.ADVANCED) {\r\n                onSequenceAdvanced(event);\r\n            } else if (transition.result === KeySequenceTransitionResult.COMPLETE) {\r\n                onToggleSubtitleTrack(event, transition.extra);\r\n            }\r\n        };\r\n        const unbindDown = KeyBindings._bindDown(handler, useCapture);\r\n        const unbindUp = KeyBindings._bindUp(handler, useCapture);\r\n\r\n        return () => {\r\n            unbindDown();\r\n            unbindUp();\r\n        };\r\n    }\r\n\r\n    static bindToggleSubtitleTrackInList(\r\n        onToggleSubtitleTrackInList: (event: KeyboardEvent, extra: any) => void,\r\n        onSequenceAdvanced: (event: KeyboardEvent) => void,\r\n        disabledGetter: () => boolean,\r\n        useCapture = false\r\n    ) {\r\n        const sequence = KeySequences.toggleSubtitleTrackInList();\r\n        const handler = (event: KeyboardEvent) => {\r\n            if (disabledGetter()) {\r\n                sequence.reset();\r\n                return;\r\n            }\r\n\r\n            const transition = sequence.accept(event);\r\n\r\n            if (transition.result === KeySequenceTransitionResult.ADVANCED) {\r\n                onSequenceAdvanced(event);\r\n            } else if (transition.result === KeySequenceTransitionResult.COMPLETE) {\r\n                onToggleSubtitleTrackInList(event, transition.extra);\r\n            }\r\n        };\r\n        const unbindDown = KeyBindings._bindDown(handler, useCapture);\r\n        const unbindUp = KeyBindings._bindUp(handler, useCapture);\r\n\r\n        return () => {\r\n            unbindDown();\r\n            unbindUp();\r\n        };\r\n    }\r\n\r\n    static bindPlay(onPlay: (event: KeyboardEvent) => void, disabledGetter: () => boolean, useCapture = false) {\r\n        return KeyBindings._bindDown((event) => {\r\n            if (disabledGetter()) {\r\n                return;\r\n            }\r\n\r\n            if (!KeyEvents.detectPlay(event)) {\r\n                return;\r\n            }\r\n\r\n            onPlay(event);\r\n        }, useCapture);\r\n    }\r\n\r\n    static _bindDown(handler: (event: KeyboardEvent) => void, useCapture: boolean) {\r\n        window.addEventListener('keydown', handler, useCapture);\r\n\r\n        return () => window.removeEventListener('keydown', handler, useCapture);\r\n    }\r\n\r\n    static _bindUp(handler: (event: KeyboardEvent) => void, useCapture: boolean) {\r\n        window.addEventListener('keyup', handler, useCapture);\r\n\r\n        return () => window.removeEventListener('keyup', handler, useCapture);\r\n    }\r\n}\r\n","export default class Mp3Encoder {\r\n    static async encode(blob: Blob, workerFactory: () => Worker): Promise<Blob> {\r\n        return new Promise(async (resolve, reject) => {\r\n            var reader = new FileReader();\r\n            reader.onload = async (e) => {\r\n                try {\r\n                    const audioContext = new AudioContext();\r\n\r\n                    if (e.target === null) {\r\n                        reject(new Error(\"Could not obtain buffer to encode\"));\r\n                        return;\r\n                    }\r\n\r\n                    const audioBuffer = await audioContext.decodeAudioData(e.target.result as ArrayBuffer);\r\n                    const channels = [];\r\n\r\n                    for (let i = 0; i < audioBuffer.numberOfChannels; ++i) {\r\n                        channels.push(audioBuffer.getChannelData(i));\r\n                    }\r\n\r\n                    const worker = workerFactory();\r\n                    worker.postMessage({\r\n                        command: 'encode',\r\n                        audioBuffer: {\r\n                            channels: channels,\r\n                            numberOfChannels: audioBuffer.numberOfChannels,\r\n                            length: audioBuffer.length,\r\n                            sampleRate: audioBuffer.sampleRate,\r\n                        },\r\n                    });\r\n                    worker.onmessage = (e) => {\r\n                        resolve(new Blob(e.data.buffer, { type: 'audio/mp3' }));\r\n                        worker.terminate();\r\n                    };\r\n                    worker.onerror = (e) => {\r\n                        const error = e?.error ?? new Error('MP3 encoding failed: ' + e?.message);\r\n                        reject(error);\r\n                        worker.terminate();\r\n                    };\r\n                } catch (e) {\r\n                    reject(e);\r\n                }\r\n            };\r\n            reader.readAsArrayBuffer(blob);\r\n        });\r\n    }\r\n}\r\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/mp3-encoder.d9a88fab.worker.js\");\n}\n","import Mp3Encoder from './Mp3Encoder';\r\n// eslint-disable-next-line\r\n// @ts-ignore\r\nimport Worker from 'worker-loader!./mp3-encoder.js';\r\nconst AUDIO_TYPES: { [key: string]: string } = { 'audio/ogg;codecs=opus': 'ogg', 'audio/webm;codecs=opus': 'webm' };\r\nconst [recorderMimeType, recorderExtension] = Object.keys(AUDIO_TYPES)\r\n    .filter(MediaRecorder.isTypeSupported)\r\n    .map((t) => [t as string, AUDIO_TYPES[t] as string])[0];\r\nconst defaultMp3WorkerFactory = () => new Worker();\r\n\r\ninterface ExperimentalAudioElement extends HTMLAudioElement {\r\n    audioTracks: any;\r\n    captureStream?: () => MediaStream;\r\n    mozCaptureStream?: () => MediaStream;\r\n}\r\n\r\ninterface AudioData {\r\n    name: string;\r\n    extension: string;\r\n    play: () => Promise<void>;\r\n    blob: () => Promise<Blob>;\r\n    base64: () => Promise<string>;\r\n    slice: (start: number, end: number) => AudioData;\r\n    isSliceable: (start: number, end: number) => boolean;\r\n}\r\n\r\nclass Base64AudioData implements AudioData {\r\n    private readonly _name: string;\r\n    private readonly start: number;\r\n    private readonly end: number;\r\n    private readonly _base64: string;\r\n    private readonly _extension: string;\r\n\r\n    private cachedBlob?: Blob;\r\n\r\n    constructor(baseName: string, start: number, end: number, base64: string, extension: string) {\r\n        this._name = baseName + '_' + Math.floor(start) + '_' + Math.floor(end);\r\n        this.start = start;\r\n        this.end = end;\r\n        this._base64 = base64;\r\n        this._extension = extension;\r\n    }\r\n\r\n    get name(): string {\r\n        return this._name;\r\n    }\r\n\r\n    get extension(): string {\r\n        return this._extension;\r\n    }\r\n\r\n    async base64() {\r\n        return this._base64;\r\n    }\r\n\r\n    async blob() {\r\n        return await this._blob();\r\n    }\r\n\r\n    async play(): Promise<void> {\r\n        const blob = await this._blob();\r\n        const audio = new Audio();\r\n        audio.src = URL.createObjectURL(blob);\r\n        audio.preload = 'none';\r\n        audio.load();\r\n\r\n        await audio.play();\r\n\r\n        return new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n                audio.pause();\r\n                const src = audio.src;\r\n                audio.src = '';\r\n                URL.revokeObjectURL(src);\r\n                resolve(undefined);\r\n            }, this.end - this.start + 1000);\r\n        });\r\n    }\r\n\r\n    async _blob() {\r\n        if (!this.cachedBlob) {\r\n            this.cachedBlob = await (await fetch('data:audio/' + this.extension + ';base64,' + this._base64)).blob();\r\n        }\r\n\r\n        return this.cachedBlob;\r\n    }\r\n\r\n    slice(start: number, end: number): AudioData {\r\n        // Not supported\r\n        return this;\r\n    }\r\n\r\n    isSliceable(start: number, end: number) {\r\n        return false;\r\n    }\r\n}\r\n\r\nclass FileAudioData implements AudioData {\r\n    private readonly file: File;\r\n    private readonly _name: string;\r\n    private readonly start: number;\r\n    private readonly end: number;\r\n    private readonly trackId?: string;\r\n    private readonly _extension: string;\r\n\r\n    private _blob?: Blob;\r\n\r\n    constructor(file: File, start: number, end: number, trackId?: string) {\r\n        this.file = file;\r\n        this._name = file.name + '_' + start + '_' + end;\r\n        this.start = start;\r\n        this.end = end;\r\n        this.trackId = trackId;\r\n        this._extension = recorderExtension;\r\n    }\r\n\r\n    get name(): string {\r\n        return this._name;\r\n    }\r\n\r\n    get extension(): string {\r\n        return this._extension;\r\n    }\r\n\r\n    async base64() {\r\n        return new Promise<string>(async (resolve, reject) => {\r\n            var reader = new FileReader();\r\n            reader.readAsDataURL(await this.blob());\r\n            reader.onloadend = () => {\r\n                const result = reader.result as string;\r\n                const base64 = result.substring(result.indexOf(',') + 1);\r\n                resolve(base64);\r\n            };\r\n        });\r\n    }\r\n\r\n    async play() {\r\n        if (!this._blob) {\r\n            this._blob = await this._clipAudio();\r\n            return;\r\n        }\r\n\r\n        const audio = await this._audioElement(this._blob, false);\r\n        audio.currentTime = 0;\r\n        await audio.play();\r\n        await this._stopAudio(audio);\r\n    }\r\n\r\n    async blob() {\r\n        if (!this._blob) {\r\n            this._blob = await this._clipAudio();\r\n        }\r\n\r\n        return this._blob;\r\n    }\r\n\r\n    async _clipAudio(): Promise<Blob> {\r\n        return new Promise(async (resolve, reject) => {\r\n            const audio = await this._audioElement(this.file, true);\r\n\r\n            audio.oncanplay = async (e) => {\r\n                audio.play();\r\n                const stream = this._captureStream(audio);\r\n\r\n                for (const t of stream.getVideoTracks()) {\r\n                    t.stop();\r\n                }\r\n\r\n                const recorder = new MediaRecorder(stream, { mimeType: recorderMimeType });\r\n                const chunks: BlobPart[] = [];\r\n\r\n                recorder.ondataavailable = (e) => {\r\n                    chunks.push(e.data);\r\n                };\r\n\r\n                recorder.onstop = (e) => {\r\n                    resolve(new Blob(chunks));\r\n                };\r\n\r\n                recorder.start();\r\n                await this._stopAudio(audio);\r\n                recorder.stop();\r\n            };\r\n        });\r\n    }\r\n\r\n    _audioElement(source: Blob, selectTrack: boolean): Promise<ExperimentalAudioElement> {\r\n        const audio = new Audio() as ExperimentalAudioElement;\r\n        audio.src = URL.createObjectURL(source);\r\n\r\n        return new Promise((resolve, reject) => {\r\n            audio.onloadedmetadata = (e) => {\r\n                if (selectTrack && this.trackId && audio.audioTracks && audio.audioTracks.length > 0) {\r\n                    // @ts-ignore\r\n                    for (const t of audio.audioTracks) {\r\n                        t.enabled = this.trackId === t.id;\r\n                    }\r\n                }\r\n\r\n                audio.currentTime = this.start / 1000;\r\n                resolve(audio);\r\n            };\r\n        });\r\n    }\r\n\r\n    _captureStream(audio: ExperimentalAudioElement) {\r\n        if (typeof audio.captureStream === 'function') {\r\n            return audio.captureStream();\r\n        }\r\n\r\n        if (typeof audio.mozCaptureStream === 'function') {\r\n            return audio.mozCaptureStream();\r\n        }\r\n\r\n        throw new Error('Unable to capture stream from audio');\r\n    }\r\n\r\n    async _stopAudio(audio: ExperimentalAudioElement): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            setTimeout(() => {\r\n                audio.pause();\r\n                const src = audio.src;\r\n                audio.src = '';\r\n                URL.revokeObjectURL(src);\r\n                resolve(undefined);\r\n            }, this.end - this.start + 100);\r\n        });\r\n    }\r\n\r\n    slice(start: number, end: number) {\r\n        return new FileAudioData(this.file, start, end, this.trackId);\r\n    }\r\n\r\n    isSliceable(start: number, end: number) {\r\n        return true;\r\n    }\r\n}\r\n\r\nclass Mp3AudioData implements AudioData {\r\n    private readonly data: AudioData;\r\n    private readonly workerFactory: () => Worker;\r\n    private _blob?: Blob;\r\n\r\n    constructor(data: AudioData, workerFactory: () => Worker) {\r\n        this.data = data;\r\n        this.workerFactory = workerFactory;\r\n    }\r\n\r\n    get name() {\r\n        return this.data.name;\r\n    }\r\n\r\n    get extension() {\r\n        return 'mp3';\r\n    }\r\n\r\n    async base64() {\r\n        return new Promise<string>(async (resolve, reject) => {\r\n            try {\r\n                var reader = new FileReader();\r\n                reader.readAsDataURL(await this.blob());\r\n                reader.onloadend = () => {\r\n                    const result = reader.result as string;\r\n                    const base64 = result.substring(result.indexOf(',') + 1);\r\n                    resolve(base64);\r\n                };\r\n            } catch (e) {\r\n                reject(e);\r\n            }\r\n        });\r\n    }\r\n\r\n    async play() {\r\n        await this.data.play();\r\n    }\r\n\r\n    async blob() {\r\n        if (!this._blob) {\r\n            this._blob = await Mp3Encoder.encode(await this.data.blob(), this.workerFactory);\r\n        }\r\n\r\n        return this._blob;\r\n    }\r\n\r\n    slice(start: number, end: number) {\r\n        return new Mp3AudioData(this.data.slice(start, end), this.workerFactory);\r\n    }\r\n\r\n    isSliceable(start: number, end: number) {\r\n        return this.data.isSliceable(start, end);\r\n    }\r\n}\r\n\r\nexport default class AudioClip {\r\n    private readonly data: AudioData;\r\n\r\n    constructor(data: AudioData) {\r\n        this.data = data;\r\n    }\r\n\r\n    static fromBase64(subtitleFileName: string, start: number, end: number, base64: string, extension: string) {\r\n        return new AudioClip(\r\n            new Base64AudioData(\r\n                subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')),\r\n                start,\r\n                end,\r\n                base64,\r\n                extension\r\n            )\r\n        );\r\n    }\r\n\r\n    static fromFile(file: File, start: number, end: number, trackId?: string) {\r\n        return new AudioClip(new FileAudioData(file, start, end, trackId));\r\n    }\r\n\r\n    get name() {\r\n        return this.data.name + '.' + this.data.extension;\r\n    }\r\n\r\n    async play() {\r\n        await this.data.play();\r\n    }\r\n\r\n    async base64() {\r\n        return await this.data.base64();\r\n    }\r\n\r\n    async download() {\r\n        const blob = await this.data.blob();\r\n        const url = window.URL.createObjectURL(blob);\r\n        const a = document.createElement('a');\r\n        document.body.appendChild(a);\r\n        a.style.display = 'none';\r\n        a.href = url;\r\n        a.download = this.name;\r\n        a.click();\r\n        URL.revokeObjectURL(url);\r\n        a.remove();\r\n    }\r\n\r\n    toMp3(mp3WorkerFactory = defaultMp3WorkerFactory) {\r\n        return new AudioClip(new Mp3AudioData(this.data, mp3WorkerFactory));\r\n    }\r\n\r\n    slice(start: number, end: number) {\r\n        return new AudioClip(this.data.slice(start, end));\r\n    }\r\n\r\n    isSliceable(start: number, end: number) {\r\n        return this.data.isSliceable(start, end);\r\n    }\r\n}\r\n","export default class CanvasResizer {\r\n    resize(\r\n        canvas: HTMLCanvasElement,\r\n        ctx: CanvasRenderingContext2D,\r\n        maxWidth: number,\r\n        maxHeight: number\r\n    ): Promise<HTMLCanvasElement> {\r\n        return new Promise((resolve, reject) => {\r\n            const widthRatio = maxWidth <= 0 ? 1 : maxWidth / canvas.width;\r\n            const heightRatio = maxHeight <= 0 ? 1 : maxHeight / canvas.height;\r\n            const ratio = Math.min(1, Math.min(widthRatio, heightRatio));\r\n\r\n            if (ratio < 1) {\r\n                const newWidth = canvas.width * ratio;\r\n                const newHeight = canvas.height * ratio;\r\n                createImageBitmap(canvas, { resizeWidth: newWidth, resizeHeight: newHeight })\r\n                    .then((sprite) => {\r\n                        canvas.width = newWidth;\r\n                        canvas.height = newHeight;\r\n                        ctx.drawImage(sprite, 0, 0);\r\n                        resolve(canvas);\r\n                    })\r\n                    .catch((e) => reject(e));\r\n            } else {\r\n                resolve(canvas);\r\n            }\r\n        });\r\n    }\r\n}\r\n","import CanvasResizer from './CanvasResizer';\r\n\r\nclass Base64ImageData implements ImageData {\r\n    private readonly _name: string;\r\n    private readonly _base64: string;\r\n    private readonly _extension: string;\r\n\r\n    private cachedBlob?: Blob;\r\n\r\n    constructor(name: string, base64: string, extension: string) {\r\n        this._name = name;\r\n        this._base64 = base64;\r\n        this._extension = extension;\r\n    }\r\n\r\n    get name() {\r\n        return this._name;\r\n    }\r\n\r\n    get extension() {\r\n        return this._extension;\r\n    }\r\n\r\n    async base64() {\r\n        return this._base64;\r\n    }\r\n\r\n    async blob() {\r\n        return await this._blob();\r\n    }\r\n\r\n    async _blob() {\r\n        if (!this.cachedBlob) {\r\n            this.cachedBlob = await (await fetch(this._dataUrl())).blob();\r\n        }\r\n\r\n        return this.cachedBlob;\r\n    }\r\n\r\n    async dataUrl() {\r\n        return this._dataUrl();\r\n    }\r\n\r\n    _dataUrl() {\r\n        return 'data:image/' + this.extension + ';base64,' + this._base64;\r\n    }\r\n}\r\n\r\nclass FileImageData implements ImageData {\r\n    private readonly file: File;\r\n    private readonly timestamp: number;\r\n    private readonly maxWidth: number;\r\n    private readonly maxHeight: number;\r\n    private readonly _name: string;\r\n\r\n    constructor(file: File, timestamp: number, maxWidth: number, maxHeight: number) {\r\n        this.file = file;\r\n        this._name = file.name + '_' + Math.floor(timestamp) + '.jpeg';\r\n        this.timestamp = timestamp;\r\n        this.maxWidth = maxWidth;\r\n        this.maxHeight = maxHeight;\r\n    }\r\n\r\n    get name() {\r\n        return this._name;\r\n    }\r\n\r\n    async base64(): Promise<string> {\r\n        return new Promise(async (resolve, reject) => {\r\n            const canvas = await this._canvas();\r\n            const dataUrl = canvas.toDataURL('image/jpeg');\r\n            resolve(dataUrl.substring(dataUrl.indexOf(',') + 1));\r\n        });\r\n    }\r\n\r\n    async blob(): Promise<Blob> {\r\n        return new Promise(async (resolve, reject) => {\r\n            const canvas = await this._canvas();\r\n            canvas.toBlob((blob) => {\r\n                if (blob === null) {\r\n                    reject(new Error('Could not obtain blob'));\r\n                } else {\r\n                    resolve(blob);\r\n                }\r\n            }, 'image/jpeg');\r\n        });\r\n    }\r\n\r\n    async dataUrl() {\r\n        const canvas = await this._canvas();\r\n        return canvas.toDataURL();\r\n    }\r\n\r\n    async _canvas(): Promise<HTMLCanvasElement> {\r\n        return new Promise(async (resolve, reject) => {\r\n            const video = this._videoElement(this.file);\r\n\r\n            video.oncanplay = async (e) => {\r\n                const canvas = document.createElement('canvas');\r\n                canvas.width = video.videoWidth;\r\n                canvas.height = video.videoHeight;\r\n                const ctx = canvas.getContext('2d');\r\n                ctx!.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n                if (this.maxWidth > 0 || this.maxHeight > 0) {\r\n                    const resizer = new CanvasResizer();\r\n                    await resizer.resize(canvas, ctx!, this.maxWidth, this.maxHeight);\r\n                    resolve(canvas);\r\n                } else {\r\n                    resolve(canvas);\r\n                }\r\n                URL.revokeObjectURL(video.src);\r\n            };\r\n        });\r\n    }\r\n\r\n    _videoElement(source: File) {\r\n        const video = document.createElement('video');\r\n        video.src = URL.createObjectURL(source);\r\n        video.preload = 'none';\r\n        video.currentTime = this.timestamp / 1000;\r\n        video.load();\r\n\r\n        return video;\r\n    }\r\n}\r\n\r\ninterface ImageData {\r\n    name: string;\r\n    base64: () => Promise<string>;\r\n    dataUrl: () => Promise<string>;\r\n    blob: () => Promise<Blob>;\r\n}\r\n\r\nexport default class Image {\r\n    private readonly data: ImageData;\r\n\r\n    constructor(data: ImageData) {\r\n        this.data = data;\r\n    }\r\n\r\n    static fromBase64(subtitleFileName: string, timestamp: number, base64: string, extension: string) {\r\n        const imageName =\r\n            subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')) +\r\n            '_' +\r\n            Math.floor(timestamp) +\r\n            '.' +\r\n            extension;\r\n        return new Image(new Base64ImageData(imageName, base64, extension));\r\n    }\r\n\r\n    static fromFile(file: File, timestamp: number, maxWidth: number, maxHeight: number) {\r\n        return new Image(new FileImageData(file, timestamp, maxWidth, maxHeight));\r\n    }\r\n\r\n    get name() {\r\n        return this.data.name;\r\n    }\r\n\r\n    async base64() {\r\n        return await this.data.base64();\r\n    }\r\n\r\n    async dataUrl() {\r\n        return await this.data.dataUrl();\r\n    }\r\n\r\n    async download() {\r\n        const blob = await this.data.blob();\r\n        const url = window.URL.createObjectURL(blob);\r\n        const a = document.createElement('a');\r\n        document.body.appendChild(a);\r\n        a.style.display = 'none';\r\n        a.href = url;\r\n        a.download = this.data.name;\r\n        a.click();\r\n        URL.revokeObjectURL(url);\r\n        a.remove();\r\n    }\r\n}\r\n","export interface Fetcher {\r\n    fetch: (url: string, body: any) => Promise<any>;\r\n}\r\n\r\nexport class HttpFetcher implements Fetcher {\r\n    async fetch(url: string, body: any) {\r\n        const response = await fetch(url, {\r\n            method: 'POST',\r\n            body: JSON.stringify(body),\r\n        });\r\n        return await response.json();\r\n    }\r\n}\r\n","import AudioClip from './AudioClip';\r\nimport Image from './Image';\r\nimport { HttpFetcher, Fetcher } from './Fetcher';\r\nimport { AnkiSettings } from './Settings';\r\n\r\nconst ankiQuerySpecialCharacters = ['\"', '*', '_', '\\\\', ':'];\r\nconst fileNameSpecialCharacters = [':', '/', '\\\\', '<', '>', '\"', '|', '?', '*', '^'];\r\n\r\nexport type AnkiExportMode = 'gui' | 'updateLast' | 'default';\r\n\r\nexport class Anki {\r\n    private readonly settingsProvider: AnkiSettings;\r\n    private readonly fetcher: Fetcher;\r\n\r\n    constructor(settingsProvider: AnkiSettings, fetcher = new HttpFetcher()) {\r\n        this.settingsProvider = settingsProvider;\r\n        this.fetcher = fetcher;\r\n    }\r\n\r\n    async deckNames(ankiConnectUrl?: string) {\r\n        const response = await this._executeAction('deckNames', null, ankiConnectUrl);\r\n        return response.result;\r\n    }\r\n\r\n    async modelNames(ankiConnectUrl?: string) {\r\n        const response = await this._executeAction('modelNames', null, ankiConnectUrl);\r\n        return response.result;\r\n    }\r\n\r\n    async modelFieldNames(modelName: string, ankiConnectUrl?: string) {\r\n        const response = await this._executeAction('modelFieldNames', { modelName: modelName }, ankiConnectUrl);\r\n        return response.result;\r\n    }\r\n\r\n    async findNotesWithWord(word: string, ankiConnectUrl?: string) {\r\n        const response = await this._executeAction(\r\n            'findNotes',\r\n            { query: this.settingsProvider.wordField + ':' + this._escapeQuery(word) },\r\n            ankiConnectUrl\r\n        );\r\n        return response.result;\r\n    }\r\n\r\n    async findNotesWithWordGui(word: string, ankiConnectUrl?: string) {\r\n        const response = await this._executeAction(\r\n            'guiBrowse',\r\n            { query: this.settingsProvider.wordField + ':' + this._escapeQuery(word) },\r\n            ankiConnectUrl\r\n        );\r\n        return response.result;\r\n    }\r\n\r\n    _escapeQuery(query: string) {\r\n        let escaped = '';\r\n\r\n        for (let i = 0; i < query.length; ++i) {\r\n            const char = query[i];\r\n            if (ankiQuerySpecialCharacters.includes(char)) {\r\n                escaped += `\\\\${char}`;\r\n            } else {\r\n                escaped += char;\r\n            }\r\n        }\r\n\r\n        return `\"${escaped}\"`;\r\n    }\r\n\r\n    async requestPermission(ankiConnectUrl?: string) {\r\n        const response = await this._executeAction('requestPermission', null, ankiConnectUrl);\r\n        return response.result;\r\n    }\r\n\r\n    async export(\r\n        text: string | undefined,\r\n        definition: string | undefined,\r\n        audioClip: AudioClip | undefined,\r\n        image: Image | undefined,\r\n        word: string | undefined,\r\n        source: string | undefined,\r\n        url: string | undefined,\r\n        customFieldValues: { [key: string]: string },\r\n        tags: string[],\r\n        mode: AnkiExportMode,\r\n        ankiConnectUrl?: string\r\n    ) {\r\n        const fields = {};\r\n\r\n        this._appendField(fields, this.settingsProvider.sentenceField, text, true);\r\n        this._appendField(fields, this.settingsProvider.definitionField, definition, true);\r\n        this._appendField(fields, this.settingsProvider.wordField, word, false);\r\n        this._appendField(fields, this.settingsProvider.sourceField, source, false);\r\n        this._appendField(fields, this.settingsProvider.urlField, url, false);\r\n\r\n        if (customFieldValues) {\r\n            for (const customFieldName of Object.keys(customFieldValues)) {\r\n                this._appendField(\r\n                    fields,\r\n                    this.settingsProvider.customAnkiFields[customFieldName],\r\n                    customFieldValues[customFieldName],\r\n                    false\r\n                );\r\n            }\r\n        }\r\n\r\n        const params: any = {\r\n            note: {\r\n                deckName: this.settingsProvider.deck,\r\n                modelName: this.settingsProvider.noteType,\r\n                tags: tags,\r\n                options: {\r\n                    allowDuplicate: false,\r\n                    duplicateScope: 'deck',\r\n                    duplicateScopeOptions: {\r\n                        deckName: this.settingsProvider.deck,\r\n                        checkChildren: false,\r\n                    },\r\n                },\r\n            },\r\n        };\r\n\r\n        const gui = mode === 'gui';\r\n\r\n        if (this.settingsProvider.audioField && audioClip) {\r\n            const sanitizedName = this._sanitizeFileName(audioClip.name);\r\n\r\n            if (gui) {\r\n                const fileName = (await this._storeMediaFile(sanitizedName, await audioClip.base64(), ankiConnectUrl))\r\n                    .result;\r\n                this._appendField(fields, this.settingsProvider.audioField, `[sound:${fileName}]`, false);\r\n            } else {\r\n                params.note['audio'] = {\r\n                    filename: sanitizedName,\r\n                    data: await audioClip.base64(),\r\n                    fields: [this.settingsProvider.audioField],\r\n                };\r\n            }\r\n        }\r\n\r\n        if (this.settingsProvider.imageField && image) {\r\n            const sanitizedName = this._sanitizeFileName(image.name);\r\n\r\n            if (gui) {\r\n                const fileName = (await this._storeMediaFile(sanitizedName, await image.base64(), ankiConnectUrl))\r\n                    .result;\r\n                this._appendField(\r\n                    fields,\r\n                    this.settingsProvider.imageField,\r\n                    `<div><img src=\"${fileName}\"></div>`,\r\n                    false\r\n                );\r\n            } else {\r\n                params.note['picture'] = {\r\n                    filename: sanitizedName,\r\n                    data: await image.base64(),\r\n                    fields: [this.settingsProvider.imageField],\r\n                };\r\n            }\r\n        }\r\n\r\n        params.note['fields'] = fields;\r\n\r\n        switch (mode) {\r\n            case 'gui':\r\n                return (await this._executeAction('guiAddCards', params, ankiConnectUrl)).result;\r\n            case 'updateLast':\r\n                const recentNotes = (\r\n                    await this._executeAction('findNotes', { query: 'added:1' }, ankiConnectUrl)\r\n                ).result.sort();\r\n\r\n                if (recentNotes.length === 0) {\r\n                    throw new Error('Could not find note to update');\r\n                }\r\n\r\n                const lastNoteId = recentNotes[recentNotes.length - 1];\r\n                params.note['id'] = lastNoteId;\r\n                await this._executeAction('updateNoteFields', params, ankiConnectUrl);\r\n                return lastNoteId;\r\n            case 'default':\r\n                return (await this._executeAction('addNote', params, ankiConnectUrl)).result;\r\n            default:\r\n                throw new Error('Unknown export mode: ' + mode);\r\n        }\r\n    }\r\n\r\n    _appendField(fields: any, fieldName: string | undefined, value: string | undefined, multiline: boolean) {\r\n        if (!fieldName || !value) {\r\n            return;\r\n        }\r\n\r\n        let newValue = multiline ? value.split('\\n').join('<br>') : value;\r\n        const existingValue = fields[fieldName];\r\n\r\n        if (existingValue) {\r\n            newValue = existingValue + '<br>' + newValue;\r\n        }\r\n\r\n        fields[fieldName] = newValue;\r\n    }\r\n\r\n    _sanitizeFileName(name: string) {\r\n        let sanitized = '';\r\n\r\n        for (let i = 0; i < name.length; ++i) {\r\n            const char = name[i];\r\n\r\n            if (fileNameSpecialCharacters.includes(char)) {\r\n                sanitized += '_';\r\n            } else {\r\n                sanitized += char;\r\n            }\r\n        }\r\n\r\n        return sanitized;\r\n    }\r\n\r\n    async _storeMediaFile(name: string, base64: string, ankiConnectUrl?: string) {\r\n        return this._executeAction('storeMediaFile', { filename: name, data: base64 }, ankiConnectUrl);\r\n    }\r\n\r\n    async _executeAction(action: string, params: any, ankiConnectUrl?: string) {\r\n        const body: any = {\r\n            action: action,\r\n            version: 6,\r\n        };\r\n\r\n        if (params) {\r\n            body['params'] = params;\r\n        }\r\n\r\n        const json = await this.fetcher.fetch(ankiConnectUrl || this.settingsProvider.ankiConnectUrl, body);\r\n\r\n        if (json.error) {\r\n            throw new Error(json.error);\r\n        }\r\n\r\n        return json;\r\n    }\r\n}\r\n","import { SubtitleModel } from './Model';\r\n\r\nexport function humanReadableTime(timestamp: number, nearestTenth = false): string {\r\n    const totalSeconds = Math.floor(timestamp / 1000);\r\n    let seconds;\r\n\r\n    if (nearestTenth) {\r\n        seconds = Math.round(((timestamp / 1000) % 60) * 10) / 10;\r\n    } else {\r\n        seconds = totalSeconds % 60;\r\n    }\r\n\r\n    const minutes = Math.floor(totalSeconds / 60) % 60;\r\n    const hours = Math.floor(totalSeconds / 3600);\r\n\r\n    if (hours > 0) {\r\n        return hours + 'h' + String(minutes).padStart(2, '0') + 'm' + String(seconds).padStart(2, '0') + 's';\r\n    }\r\n\r\n    return minutes + 'm' + String(seconds).padStart(2, '0') + 's';\r\n}\r\n\r\nexport function surroundingSubtitles(\r\n    subtitles: SubtitleModel[],\r\n    index: number,\r\n    countRadius: number,\r\n    timeRadius: number\r\n): SubtitleModel[] {\r\n    let startIndex = index;\r\n\r\n    for (let i = index; i >= 0; --i) {\r\n        startIndex = i;\r\n\r\n        if (atBoundary(subtitles, startIndex, index, countRadius, timeRadius, false)) {\r\n            break;\r\n        }\r\n    }\r\n\r\n    let endIndex = startIndex;\r\n\r\n    for (let i = index; i <= subtitles.length - 1; ++i) {\r\n        endIndex = i;\r\n\r\n        if (atBoundary(subtitles, endIndex, index, countRadius, timeRadius, true)) {\r\n            break;\r\n        }\r\n    }\r\n\r\n    return subtitles.slice(startIndex, endIndex + 1);\r\n}\r\n\r\nexport function mockSurroundingSubtitles(\r\n    middleSubtitle: SubtitleModel,\r\n    maxTimestamp: number,\r\n    timeRadius: number\r\n): SubtitleModel[] {\r\n    const subtitles = [middleSubtitle];\r\n    const offset = middleSubtitle.start - middleSubtitle.originalStart;\r\n\r\n    if (middleSubtitle.end < maxTimestamp) {\r\n        const afterTimestamp = Math.min(maxTimestamp, middleSubtitle.end + timeRadius);\r\n        subtitles.push({\r\n            text: '',\r\n            start: middleSubtitle.end,\r\n            end: afterTimestamp,\r\n            originalStart: middleSubtitle.end - offset,\r\n            originalEnd: afterTimestamp - offset,\r\n            track: middleSubtitle.track,\r\n        });\r\n    }\r\n\r\n    if (middleSubtitle.start > 0) {\r\n        const beforeTimestamp = Math.max(0, middleSubtitle.start - timeRadius);\r\n        subtitles.unshift({\r\n            text: '',\r\n            start: beforeTimestamp,\r\n            end: middleSubtitle.start,\r\n            originalStart: beforeTimestamp - offset,\r\n            originalEnd: middleSubtitle.start - offset,\r\n            track: middleSubtitle.track,\r\n        });\r\n    }\r\n\r\n    return subtitles;\r\n}\r\n\r\nfunction atBoundary(\r\n    subtitles: SubtitleModel[],\r\n    index: number,\r\n    initialIndex: number,\r\n    countRadius: number,\r\n    timeRadius: number,\r\n    sign: boolean\r\n): boolean {\r\n    let next;\r\n\r\n    if (sign) {\r\n        next = index + 1 < subtitles.length ? subtitles[index + 1] : null;\r\n    } else {\r\n        next = index - 1 >= 0 ? subtitles[index - 1] : null;\r\n    }\r\n\r\n    if (\r\n        Math.abs(initialIndex - index) >= countRadius &&\r\n        (next === null || Math.abs(next.start - subtitles[initialIndex].start) >= timeRadius)\r\n    ) {\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n","import { useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport MuiAlert, { Color } from '@material-ui/lab/Alert';\r\nimport Grow from '@material-ui/core/Grow';\r\n\r\nconst useAlertStyles = makeStyles({\r\n    root: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        position: 'fixed',\r\n        top: 80,\r\n        width: '100%',\r\n        pointerEvents: 'none',\r\n        zIndex: 2000,\r\n    },\r\n});\r\n\r\ninterface Props {\r\n    open: boolean;\r\n    autoHideDuration: number;\r\n    onClose: () => void;\r\n    severity: Color | undefined;\r\n    children: React.ReactNode\r\n}\r\n\r\nexport default function Alert(props: Props) {\r\n    const classes = useAlertStyles();\r\n\r\n    useEffect(() => {\r\n        if (props.open) {\r\n            const timeout = setTimeout(props.onClose, props.autoHideDuration);\r\n            return () => clearTimeout(timeout);\r\n        }\r\n    }, [props.open, props.autoHideDuration, props.onClose]);\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Grow in={props.open}>\r\n                <MuiAlert severity={props.severity}>{props.children}</MuiAlert>\r\n            </Grow>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useCallback, useEffect, useState } from \"react\";\r\nimport { TextField, TextFieldProps } from \"@material-ui/core\";\r\n\r\nfunction extractTagsFromString(value: string) {\r\n    const splitTags = value.split(' ').join('').split(',');\r\n    const tags = [];\r\n\r\n    for (const tag of splitTags) {\r\n        tags.push(tag.trim());\r\n    }\r\n\r\n    return tags;\r\n}\r\n\r\nexport interface Props {\r\n    tags: string[];\r\n    onTagsChange: (tags: string[]) => void;\r\n}\r\n\r\nexport default function TagsTextField({tags, onTagsChange, ...props}: Props & TextFieldProps) {\r\n    const [value, setValue] = useState('');\r\n\r\n    useEffect(() => {\r\n        const tagsString = tags.join(', ');\r\n\r\n        if (tagsString !== value) {\r\n            setValue(tags.join(', '));\r\n        }\r\n    }, [value, tags]);\r\n\r\n    const handleChange = useCallback((e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n        let currentValue = e.target.value;\r\n\r\n        if (\r\n            value.length > currentValue.length &&\r\n            value.includes(currentValue) &&\r\n            currentValue.endsWith(',')\r\n        ) {\r\n            // Detected a backspace at the last comma, move cursor back enough to remove the comma\r\n            currentValue = currentValue.substring(0, currentValue.length - 1);\r\n        }\r\n\r\n        // Decompose string into individual tags by removing all spaces and splitting on \",\"\r\n        const newTags = extractTagsFromString(currentValue);\r\n        setValue(newTags.join(', '));\r\n        onTagsChange(newTags);\r\n    }, [value, onTagsChange]);\r\n\r\n    return (\r\n        <TextField\r\n            {...props}\r\n            value={value}\r\n            onChange={handleChange}\r\n        />\r\n    );\r\n}\r\n","import React, { useEffect, useState, useLayoutEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport { Image as CommonImage } from '@project/common';\r\n\r\ninterface ImageDimensions {\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    image: ({ width, height }: ImageDimensions) => ({\r\n        width: width,\r\n        height: height,\r\n        backgroundSize: 'contain',\r\n    }),\r\n}));\r\n\r\n// https://stackoverflow.com/questions/19014250/rerender-view-on-browser-resize-with-react\r\nfunction useWindowSize() {\r\n    const [size, setSize] = useState([0, 0]);\r\n\r\n    useLayoutEffect(() => {\r\n        function updateSize() {\r\n            setSize([window.innerWidth, window.innerHeight]);\r\n        }\r\n\r\n        window.addEventListener('resize', updateSize);\r\n        updateSize();\r\n\r\n        return () => window.removeEventListener('resize', updateSize);\r\n    }, []);\r\n\r\n    return size;\r\n}\r\n\r\ninterface Props {\r\n    open: boolean;\r\n    image?: CommonImage;\r\n    onClose: () => void;\r\n}\r\n\r\nexport default function ImageDialog({ open, image, onClose }: Props) {\r\n    const [dataUrl, setDataUrl] = useState<string>();\r\n    const [width, setWidth] = useState<number>(0);\r\n    const [height, setHeight] = useState<number>(0);\r\n    const [windowWidth, windowHeight] = useWindowSize();\r\n\r\n    let resizeRatio;\r\n\r\n    if (width > 0 && height > 0) {\r\n        resizeRatio = Math.min(1, Math.min(windowWidth / (2 * width), windowHeight / (2 * height)));\r\n    } else {\r\n        resizeRatio = 1;\r\n    }\r\n\r\n    const classes = useStyles({ width: width * resizeRatio, height: height * resizeRatio });\r\n\r\n    useEffect(() => {\r\n        setDataUrl(undefined);\r\n        async function fetchImage() {\r\n            if (!image) {\r\n                return;\r\n            }\r\n\r\n            const dataUrl = await image.dataUrl();\r\n            const img = new Image();\r\n            img.onload = () => {\r\n                setWidth(img.width);\r\n                setHeight(img.height);\r\n                setDataUrl(dataUrl);\r\n            };\r\n            img.src = dataUrl;\r\n        }\r\n\r\n        fetchImage();\r\n    }, [image]);\r\n\r\n    if (!image || !dataUrl) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <Dialog open={open} onClose={onClose} maxWidth=\"lg\">\r\n            <Card>\r\n                <CardMedia\r\n                    className={classes.image}\r\n                    image={dataUrl}\r\n                    title={image.name}\r\n                    style={{ width: width * resizeRatio, height: height * resizeRatio }}\r\n                />\r\n            </Card>\r\n        </Dialog>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { SubtitleModel } from '../..';\r\n\r\ninterface Props {\r\n    subtitle: SubtitleModel;\r\n    availableWidth: number;\r\n    scale: number;\r\n}\r\n\r\nexport default function SubtitleTextImage({ subtitle, availableWidth, scale }: Props) {\r\n    if (subtitle.textImage === undefined) {\r\n        return null;\r\n    }\r\n\r\n    const imageScale = (scale * availableWidth) / subtitle.textImage.screen.width;\r\n    const width = imageScale * subtitle.textImage.image.width;\r\n\r\n    return (\r\n        <div style={{ maxWidth: width }}>\r\n            <img style={{ width: '100%' }} alt=\"subtitle\" src={subtitle.textImage.dataUrl} />\r\n        </div>\r\n    );\r\n}\r\n","import React, { useCallback, useState, useEffect } from 'react';\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport {\r\n    Anki,\r\n    AnkiDialogSliderContext,\r\n    AudioClip,\r\n    Image,\r\n    humanReadableTime,\r\n    AnkiSettings,\r\n    SubtitleModel,\r\n} from '@project/common';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport RestoreIcon from '@material-ui/icons/Restore';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport Slider, { Mark } from '@material-ui/core/Slider';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ZoomInIcon from '@material-ui/icons/ZoomIn';\r\nimport SubtitleTextImage from './SubtitleTextImage';\r\nimport TagsTextField from './TagsTextField';\r\nimport { AnkiExportMode } from '@project/common';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        '& .MuiTextField-root': {\r\n            marginBottom: theme.spacing(1),\r\n        },\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    mediaField: {\r\n        cursor: 'pointer',\r\n        '& input': {\r\n            cursor: 'pointer',\r\n        },\r\n    },\r\n    rangeSelectSlider: {\r\n        '& .MuiSlider-markLabel': {\r\n            transform: 'translateX(-3%)',\r\n        },\r\n    },\r\n}));\r\n\r\nfunction boundaryIntervalFromSliderContext(sliderContext: AnkiDialogSliderContext) {\r\n    let min = null;\r\n    let max = null;\r\n\r\n    for (const s of sliderContext.subtitles) {\r\n        if (min === null || s.start < min) {\r\n            min = s.start;\r\n        }\r\n\r\n        if (max === null || s.end > max) {\r\n            max = s.end;\r\n        }\r\n    }\r\n\r\n    return min !== null && max !== null && [min, max];\r\n}\r\n\r\nfunction sliderMarksFromSliderContext(sliderContext: AnkiDialogSliderContext, boundary: number[]): Mark[] {\r\n    const seenTimestamps: any = {};\r\n\r\n    return sliderContext.subtitles\r\n        .filter((s) => s.text.trim() !== '' || s.textImage !== undefined)\r\n        .map((s) => {\r\n            if (s.start in seenTimestamps) {\r\n                return null;\r\n            }\r\n\r\n            seenTimestamps[s.start] = true;\r\n\r\n            return {\r\n                value: s.start,\r\n                label: `${s.text.trim().substring(0, Math.min(s.text.length, 3))}...`,\r\n            };\r\n        })\r\n        .filter((mark: Mark | null) => mark !== null)\r\n        .filter((mark: Mark | null) => mark!.value >= boundary[0] && mark!.value <= boundary[1]) as Mark[];\r\n}\r\n\r\nfunction sliderValueLabelFormat(ms: number) {\r\n    return humanReadableTime(ms, true);\r\n}\r\n\r\nfunction subtitleIntersectsTimeInterval(subtitle: SubtitleModel, interval: number[]) {\r\n    return (\r\n        (subtitle.start >= interval[0] && subtitle.start <= interval[1]) ||\r\n        (subtitle.end >= interval[0] && subtitle.end <= interval[1]) ||\r\n        (interval[0] >= subtitle.start && interval[0] <= subtitle.end) ||\r\n        (interval[1] >= subtitle.start && interval[1] <= subtitle.end)\r\n    );\r\n}\r\n\r\ninterface ValueLabelComponentProps {\r\n    children: React.ReactElement;\r\n    open: boolean;\r\n    value: number;\r\n}\r\n\r\nfunction ValueLabelComponent({ children, open, value }: ValueLabelComponentProps) {\r\n    return (\r\n        <Tooltip open={open} enterTouchDelay={0} placement=\"top\" title={value}>\r\n            {children}\r\n        </Tooltip>\r\n    );\r\n}\r\n\r\ninterface TextImageSetProps {\r\n    selectedSubtitles: SubtitleModel[];\r\n    width: number;\r\n}\r\n\r\nconst useTextImageSetStyles = makeStyles((theme) => ({\r\n    root: {\r\n        marginBottom: theme.spacing(1),\r\n        padding: theme.spacing(1),\r\n        backgroundColor: theme.palette.action.disabledBackground,\r\n    },\r\n}));\r\n\r\nfunction TextImageSet({ selectedSubtitles, width }: TextImageSetProps) {\r\n    const classes = useTextImageSetStyles();\r\n\r\n    if (selectedSubtitles.length === 0 || width <= 0) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <Paper elevation={0} className={classes.root}>\r\n            {selectedSubtitles.map((s, index) => {\r\n                return <SubtitleTextImage key={index} availableWidth={width} subtitle={s} scale={1} />;\r\n            })}\r\n        </Paper>\r\n    );\r\n}\r\n\r\nconst TextFieldEndAdornment = withStyles({\r\n    // Hack to recenter TextField end adornment\r\n    root: {\r\n        transform: 'translateY(-8px)',\r\n    },\r\n})(InputAdornment);\r\n\r\nexport interface AnkiDialogRerecordParams {\r\n    text: string;\r\n    sliderContext: AnkiDialogSliderContext;\r\n    definition: string;\r\n    word: string;\r\n    source: string;\r\n    url: string;\r\n    customFieldValues: { [key: string]: string };\r\n    lastAppliedTimestampIntervalToText: number[];\r\n    timestampInterval: number[];\r\n}\r\n\r\ninterface AnkiDialogProps {\r\n    open: boolean;\r\n    disabled: boolean;\r\n    text?: string;\r\n    onProceed: (\r\n        text: string,\r\n        definition: string,\r\n        audioClip: AudioClip | undefined,\r\n        image: Image | undefined,\r\n        word: string,\r\n        source: string,\r\n        url: string,\r\n        customFieldValues: { [key: string]: string },\r\n        tags: string[],\r\n        mode: AnkiExportMode\r\n    ) => void;\r\n    onRerecord?: (params: AnkiDialogRerecordParams) => void;\r\n    onCancel: () => void;\r\n    onViewImage: (image: Image) => void;\r\n    onOpenSettings?: () => void;\r\n    audioClip?: AudioClip;\r\n    image?: Image;\r\n    source?: string;\r\n    url?: string;\r\n    sliderContext?: AnkiDialogSliderContext;\r\n    settingsProvider: AnkiSettings;\r\n    anki: Anki;\r\n    definition?: string;\r\n    word?: string;\r\n    customFields: { [key: string]: string };\r\n    customFieldValues?: { [key: string]: string };\r\n    timestampInterval?: number[];\r\n    lastAppliedTimestampIntervalToText?: number[];\r\n}\r\n\r\nexport function AnkiDialog({\r\n    open,\r\n    disabled,\r\n    text: initialText,\r\n    onProceed,\r\n    onCancel,\r\n    onViewImage,\r\n    onOpenSettings,\r\n    onRerecord,\r\n    audioClip: initialAudioClip,\r\n    image,\r\n    source: initialSource,\r\n    url: initialUrl,\r\n    sliderContext,\r\n    customFields,\r\n    settingsProvider,\r\n    anki,\r\n    definition: initialDefinition,\r\n    word: initialWord,\r\n    customFieldValues: initialCustomFieldValues,\r\n    timestampInterval: initialSelectedTimestampInterval,\r\n    lastAppliedTimestampIntervalToText: initialLastAppliedTimestampIntervalToText,\r\n}: AnkiDialogProps) {\r\n    const classes = useStyles();\r\n    const [definition, setDefinition] = useState<string>('');\r\n    const [text, setText] = useState<string>('');\r\n    const [word, setWord] = useState<string>('');\r\n    const [lastSearchedWord, setLastSearchedWord] = useState<string>();\r\n    const [source, setSource] = useState<string>(initialSource ?? '');\r\n    const [tags, setTags] = useState<string[]>(settingsProvider.tags);\r\n    const [url, setUrl] = useState<string>(initialUrl ?? '');\r\n    const [duplicateNotes, setDuplicateNotes] = useState<any[]>([]);\r\n    const [wordTimestamp, setWordTimestamp] = useState<number>(0);\r\n    const [customFieldValues, setCustomFieldValues] = useState<{ [key: string]: string }>({});\r\n    const [timestampInterval, setTimestampInterval] = useState<number[]>();\r\n    const [selectedSubtitles, setSelectedSubtitles] = useState<SubtitleModel[]>([]);\r\n    const [initialTimestampInterval, setInitialTimestampInterval] = useState<number[]>();\r\n    const [initialTimestampBoundaryInterval, setInitialTimestampBoundaryInterval] = useState<number[]>();\r\n    const [timestampBoundaryInterval, setTimestampBoundaryInterval] = useState<number[]>();\r\n    const [timestampMarks, setTimestampMarks] = useState<Mark[]>();\r\n    const [lastAppliedTimestampIntervalToText, setLastAppliedTimestampIntervalToText] = useState<number[]>();\r\n    const [lastAppliedTimestampIntervalToAudio, setLastAppliedTimestampIntervalToAudio] = useState<number[]>();\r\n    const [width, setWidth] = useState<number>(0);\r\n    const [audioClip, setAudioClip] = useState<AudioClip>();\r\n    const dialogRefCallback = useCallback((element: HTMLElement) => {\r\n        setWidth(element?.getBoundingClientRect().width ?? 0);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setText(initialText ?? '');\r\n        setDefinition(initialDefinition ?? '');\r\n        setWord(initialWord ?? '');\r\n        setSource(initialSource ?? '');\r\n        setUrl(initialUrl ?? '');\r\n        setDuplicateNotes([]);\r\n        setCustomFieldValues(initialCustomFieldValues ?? {});\r\n        setTags(settingsProvider.tags);\r\n    }, [\r\n        initialText,\r\n        initialSource,\r\n        initialDefinition,\r\n        initialWord,\r\n        initialCustomFieldValues,\r\n        initialUrl,\r\n        settingsProvider.tags,\r\n    ]);\r\n\r\n    useEffect(() => {\r\n        const timestampInterval =\r\n            initialSelectedTimestampInterval ||\r\n            (sliderContext && [sliderContext.subtitleStart, sliderContext.subtitleEnd]) ||\r\n            undefined;\r\n        const timestampBoundaryInterval =\r\n            (sliderContext && boundaryIntervalFromSliderContext(sliderContext)) || undefined;\r\n        const timestampMarks =\r\n            (sliderContext && sliderMarksFromSliderContext(sliderContext, timestampBoundaryInterval!)) || undefined;\r\n        const selectedSubtitles =\r\n            sliderContext === undefined || timestampInterval === undefined\r\n                ? []\r\n                : sliderContext.subtitles.filter((s) => subtitleIntersectsTimeInterval(s, timestampInterval));\r\n\r\n        setTimestampInterval(timestampInterval);\r\n        setSelectedSubtitles(selectedSubtitles);\r\n        setInitialTimestampInterval(timestampInterval);\r\n        setLastAppliedTimestampIntervalToText(initialLastAppliedTimestampIntervalToText || timestampInterval);\r\n        setLastAppliedTimestampIntervalToAudio(timestampInterval);\r\n        setTimestampBoundaryInterval(timestampBoundaryInterval);\r\n        setInitialTimestampBoundaryInterval(timestampBoundaryInterval);\r\n        setTimestampMarks(timestampMarks);\r\n    }, [sliderContext, initialSelectedTimestampInterval, initialLastAppliedTimestampIntervalToText]);\r\n\r\n    useEffect(() => {\r\n        if (!initialAudioClip) {\r\n            setAudioClip(undefined);\r\n            return;\r\n        }\r\n\r\n        let newAudioClip = initialAudioClip;\r\n\r\n        if (settingsProvider.preferMp3) {\r\n            newAudioClip = newAudioClip.toMp3();\r\n        }\r\n\r\n        if (lastAppliedTimestampIntervalToAudio) {\r\n            newAudioClip = newAudioClip.slice(\r\n                Math.max(0, Math.round(lastAppliedTimestampIntervalToAudio[0]) - settingsProvider.audioPaddingStart),\r\n                Math.round(lastAppliedTimestampIntervalToAudio[1]) + settingsProvider.audioPaddingEnd\r\n            );\r\n        }\r\n\r\n        setAudioClip(newAudioClip);\r\n    }, [\r\n        initialAudioClip,\r\n        settingsProvider.preferMp3,\r\n        lastAppliedTimestampIntervalToAudio,\r\n        settingsProvider.audioPaddingStart,\r\n        settingsProvider.audioPaddingEnd,\r\n    ]);\r\n\r\n    useEffect(() => {\r\n        setWordTimestamp(Date.now());\r\n    }, [word]);\r\n\r\n    useEffect(() => {\r\n        if (!word || !settingsProvider.wordField) {\r\n            return;\r\n        }\r\n\r\n        const trimmedWord = word.trim();\r\n\r\n        if (trimmedWord === '' || trimmedWord === lastSearchedWord) {\r\n            return;\r\n        }\r\n\r\n        const timeout = setTimeout(async () => {\r\n            try {\r\n                setDuplicateNotes(await anki.findNotesWithWord(trimmedWord));\r\n                setLastSearchedWord(trimmedWord);\r\n            } catch (e) {\r\n                console.error(e);\r\n            }\r\n        }, 500);\r\n\r\n        return () => clearTimeout(timeout);\r\n    }, [word, wordTimestamp, lastSearchedWord, anki, settingsProvider.wordField]);\r\n\r\n    const handlePlayAudio = useCallback(\r\n        (e: React.MouseEvent<HTMLDivElement>) => {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n            audioClip!.play();\r\n        },\r\n        [audioClip]\r\n    );\r\n\r\n    const handleCustomFieldChange = useCallback(\r\n        (customFieldName: string, value: string) => {\r\n            const newCustomFieldValues: { [fieldName: string]: string } = {};\r\n            Object.assign(newCustomFieldValues, customFieldValues);\r\n            newCustomFieldValues[customFieldName] = value;\r\n            setCustomFieldValues(newCustomFieldValues);\r\n        },\r\n        [customFieldValues]\r\n    );\r\n\r\n    let wordHelperText;\r\n\r\n    if (word && word.trim() === lastSearchedWord && settingsProvider.wordField) {\r\n        wordHelperText =\r\n            duplicateNotes.length > 0\r\n                ? `Found ${duplicateNotes.length} notes with word \"${word}\" in field \"${settingsProvider.wordField}\"`\r\n                : `No notes found with word \"${word.trim()}\" in field \"${settingsProvider.wordField}\"`;\r\n    } else {\r\n        wordHelperText = '';\r\n    }\r\n\r\n    const handleViewImage = useCallback(\r\n        (e: React.MouseEvent<HTMLDivElement>) => {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n            onViewImage(image!);\r\n        },\r\n        [image, onViewImage]\r\n    );\r\n\r\n    const handleTimestampIntervalChange = useCallback(\r\n        (e: React.ChangeEvent<{}>, newValue: number | number[]) => {\r\n            const timestampInterval = newValue as number[];\r\n            setTimestampInterval(timestampInterval);\r\n            const selectedSubtitles = sliderContext!.subtitles.filter((s) =>\r\n                subtitleIntersectsTimeInterval(s, timestampInterval)\r\n            );\r\n            setSelectedSubtitles(selectedSubtitles);\r\n        },\r\n        [sliderContext]\r\n    );\r\n\r\n    const handleApplyTimestampIntervalToText = useCallback(() => {\r\n        const interval = timestampInterval!;\r\n        const newText = sliderContext!.subtitles\r\n            .filter((s) => subtitleIntersectsTimeInterval(s, interval))\r\n            .map((s) => s.text)\r\n            .join('\\n');\r\n\r\n        setText(newText);\r\n        setLastAppliedTimestampIntervalToText(timestampInterval);\r\n    }, [timestampInterval, sliderContext]);\r\n\r\n    const handleApplyTimestampIntervalToAudio = useCallback(\r\n        (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n            e.stopPropagation();\r\n            if (onRerecord) {\r\n                if (!lastAppliedTimestampIntervalToText || !timestampInterval) {\r\n                    return;\r\n                }\r\n\r\n                e.stopPropagation();\r\n                onRerecord({\r\n                    text: text,\r\n                    sliderContext: sliderContext!,\r\n                    definition: definition,\r\n                    word: word,\r\n                    source: source,\r\n                    url: url,\r\n                    customFieldValues: customFieldValues,\r\n                    lastAppliedTimestampIntervalToText: lastAppliedTimestampIntervalToText,\r\n                    timestampInterval: timestampInterval,\r\n                });\r\n            } else {\r\n                setLastAppliedTimestampIntervalToAudio(timestampInterval);\r\n            }\r\n        },\r\n        [\r\n            onRerecord,\r\n            lastAppliedTimestampIntervalToText,\r\n            timestampInterval,\r\n            text,\r\n            sliderContext,\r\n            definition,\r\n            word,\r\n            source,\r\n            url,\r\n            customFieldValues,\r\n        ]\r\n    );\r\n\r\n    const handleResetTimestampInterval = useCallback(() => {\r\n        if (!initialTimestampBoundaryInterval) {\r\n            return;\r\n        }\r\n\r\n        const selectedSubtitles =\r\n            sliderContext === undefined || initialTimestampInterval === undefined\r\n                ? []\r\n                : sliderContext.subtitles.filter((s) => subtitleIntersectsTimeInterval(s, initialTimestampInterval));\r\n        setSelectedSubtitles(selectedSubtitles);\r\n        setTimestampInterval(initialTimestampInterval);\r\n        setTimestampBoundaryInterval(initialTimestampBoundaryInterval);\r\n        setTimestampMarks(\r\n            sliderContext && sliderMarksFromSliderContext(sliderContext, initialTimestampBoundaryInterval)\r\n        );\r\n    }, [initialTimestampInterval, initialTimestampBoundaryInterval, sliderContext]);\r\n\r\n    const handleZoomInTimestampInterval = useCallback(() => {\r\n        if (!timestampBoundaryInterval || !timestampInterval) {\r\n            return;\r\n        }\r\n\r\n        const newMin = (timestampBoundaryInterval[0] + timestampInterval[0]) / 2;\r\n        const newMax = (timestampBoundaryInterval[1] + timestampInterval[1]) / 2;\r\n        const newTimestampBoundaryInterval = [newMin, newMax];\r\n        setTimestampBoundaryInterval(newTimestampBoundaryInterval);\r\n        setTimestampMarks(sliderContext && sliderMarksFromSliderContext(sliderContext, newTimestampBoundaryInterval));\r\n    }, [timestampBoundaryInterval, timestampInterval, sliderContext]);\r\n\r\n    const disableApplyTextSelection =\r\n        !sliderContext || sliderContext.subtitles.filter((s) => s.text.trim() !== '').length === 0;\r\n\r\n    return (\r\n        <Dialog open={open} disableEnforceFocus fullWidth maxWidth=\"sm\" onClose={onCancel}>\r\n            <Toolbar>\r\n                <Typography variant=\"h6\" className={classes.title}>\r\n                    Anki Export\r\n                </Typography>\r\n                {onOpenSettings && (\r\n                    <IconButton edge=\"end\" onClick={() => onOpenSettings()}>\r\n                        <SettingsIcon />\r\n                    </IconButton>\r\n                )}\r\n            </Toolbar>\r\n            <DialogContent ref={dialogRefCallback}>\r\n                <form className={classes.root}>\r\n                    {sliderContext && timestampInterval && (\r\n                        <TextImageSet\r\n                            selectedSubtitles={selectedSubtitles.filter((s) => s.textImage !== undefined)}\r\n                            width={width}\r\n                        />\r\n                    )}\r\n                    <TextField\r\n                        variant=\"filled\"\r\n                        color=\"secondary\"\r\n                        multiline\r\n                        fullWidth\r\n                        maxRows={8}\r\n                        label=\"Sentence\"\r\n                        value={text}\r\n                        onChange={(e) => setText(e.target.value)}\r\n                        InputProps={{\r\n                            endAdornment: timestampInterval && (\r\n                                <TextFieldEndAdornment position=\"end\">\r\n                                    <Tooltip title=\"Apply Selection\">\r\n                                        <span>\r\n                                            <IconButton\r\n                                                disabled={\r\n                                                    !timestampInterval ||\r\n                                                    !lastAppliedTimestampIntervalToText ||\r\n                                                    (timestampInterval[0] === lastAppliedTimestampIntervalToText[0] &&\r\n                                                        timestampInterval[1] ===\r\n                                                            lastAppliedTimestampIntervalToText[1]) ||\r\n                                                    disableApplyTextSelection\r\n                                                }\r\n                                                onClick={handleApplyTimestampIntervalToText}\r\n                                                edge=\"end\"\r\n                                            >\r\n                                                <DoneIcon />\r\n                                            </IconButton>\r\n                                        </span>\r\n                                    </Tooltip>\r\n                                </TextFieldEndAdornment>\r\n                            ),\r\n                        }}\r\n                    />\r\n                    <TextField\r\n                        variant=\"filled\"\r\n                        color=\"secondary\"\r\n                        multiline\r\n                        fullWidth\r\n                        rows={8}\r\n                        label=\"Definition\"\r\n                        value={definition}\r\n                        onChange={(e) => setDefinition(e.target.value)}\r\n                    />\r\n                    <TextField\r\n                        variant=\"filled\"\r\n                        color=\"secondary\"\r\n                        fullWidth\r\n                        label=\"Word\"\r\n                        value={word}\r\n                        onChange={(e) => setWord(e.target.value)}\r\n                        helperText={wordHelperText}\r\n                        InputProps={{\r\n                            endAdornment: (\r\n                                <InputAdornment position=\"end\">\r\n                                    <Tooltip title=\"Search in Anki\">\r\n                                        <span>\r\n                                            <IconButton\r\n                                                disabled={\r\n                                                    disabled ||\r\n                                                    !settingsProvider.wordField ||\r\n                                                    !word ||\r\n                                                    word.trim() === ''\r\n                                                }\r\n                                                onClick={() => anki.findNotesWithWordGui(word.trim())}\r\n                                                edge=\"end\"\r\n                                            >\r\n                                                <SearchIcon />\r\n                                            </IconButton>\r\n                                        </span>\r\n                                    </Tooltip>\r\n                                </InputAdornment>\r\n                            ),\r\n                        }}\r\n                    />\r\n                    {Object.keys(customFields).map((customFieldName) => (\r\n                        <TextField\r\n                            key={customFieldName}\r\n                            variant=\"filled\"\r\n                            color=\"secondary\"\r\n                            fullWidth\r\n                            multiline\r\n                            maxRows={8}\r\n                            label={customFieldName}\r\n                            value={customFieldValues[customFieldName] || ''}\r\n                            onChange={(e) => handleCustomFieldChange(customFieldName, e.target.value)}\r\n                        />\r\n                    ))}\r\n                    {audioClip && (\r\n                        <div className={classes.mediaField} onClick={handlePlayAudio}>\r\n                            <TextField\r\n                                variant=\"filled\"\r\n                                color=\"secondary\"\r\n                                fullWidth\r\n                                value={audioClip.name}\r\n                                label=\"Audio\"\r\n                                InputProps={{\r\n                                    endAdornment: timestampInterval && (\r\n                                        <InputAdornment position=\"end\">\r\n                                            {onRerecord ? (\r\n                                                <Tooltip title=\"Apply Selection (rerecord)\">\r\n                                                    <span>\r\n                                                        <IconButton\r\n                                                            disabled={\r\n                                                                !timestampInterval ||\r\n                                                                !initialTimestampInterval ||\r\n                                                                (timestampInterval[0] === initialTimestampInterval[0] &&\r\n                                                                    timestampInterval[1] ===\r\n                                                                        initialTimestampInterval[1])\r\n                                                            }\r\n                                                            onClick={handleApplyTimestampIntervalToAudio}\r\n                                                            edge=\"end\"\r\n                                                        >\r\n                                                            <DoneIcon />\r\n                                                        </IconButton>\r\n                                                    </span>\r\n                                                </Tooltip>\r\n                                            ) : (\r\n                                                <Tooltip title={'Apply Selection'}>\r\n                                                    <span>\r\n                                                        <IconButton\r\n                                                            disabled={\r\n                                                                !lastAppliedTimestampIntervalToAudio ||\r\n                                                                (timestampInterval[0] ===\r\n                                                                    lastAppliedTimestampIntervalToAudio[0] &&\r\n                                                                    timestampInterval[1] ===\r\n                                                                        lastAppliedTimestampIntervalToAudio[1]) ||\r\n                                                                !audioClip.isSliceable(\r\n                                                                    timestampInterval[0],\r\n                                                                    timestampInterval[1]\r\n                                                                )\r\n                                                            }\r\n                                                            onClick={handleApplyTimestampIntervalToAudio}\r\n                                                            edge=\"end\"\r\n                                                        >\r\n                                                            <DoneIcon />\r\n                                                        </IconButton>\r\n                                                    </span>\r\n                                                </Tooltip>\r\n                                            )}\r\n                                        </InputAdornment>\r\n                                    ),\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    )}\r\n                    {image && (\r\n                        <div className={classes.mediaField} onClick={handleViewImage}>\r\n                            <TextField variant=\"filled\" color=\"secondary\" fullWidth value={image.name} label=\"Image\" />\r\n                        </div>\r\n                    )}\r\n                    <TextField\r\n                        variant=\"filled\"\r\n                        color=\"secondary\"\r\n                        fullWidth\r\n                        label=\"Source\"\r\n                        value={source}\r\n                        onChange={(e) => setSource(e.target.value)}\r\n                    />\r\n                    {initialUrl && (\r\n                        <TextField\r\n                            variant=\"filled\"\r\n                            color=\"secondary\"\r\n                            fullWidth\r\n                            label=\"URL\"\r\n                            value={url}\r\n                            onChange={(e) => setUrl(e.target.value)}\r\n                        />\r\n                    )}\r\n                    {settingsProvider.tags.length > 0 && (\r\n                        <TagsTextField\r\n                            variant=\"filled\"\r\n                            label=\"Tags\"\r\n                            helperText=\"Comma-separated list of strings\"\r\n                            fullWidth\r\n                            color=\"secondary\"\r\n                            tags={tags}\r\n                            onTagsChange={(newTags) => setTags(newTags)}\r\n                        />\r\n                    )}\r\n                    {timestampInterval && timestampBoundaryInterval && timestampMarks && (\r\n                        <Grid container direction=\"row\">\r\n                            <Grid item style={{ flexGrow: 1 }}>\r\n                                <Slider\r\n                                    ValueLabelComponent={ValueLabelComponent}\r\n                                    value={timestampInterval}\r\n                                    valueLabelFormat={sliderValueLabelFormat}\r\n                                    onChange={handleTimestampIntervalChange}\r\n                                    min={timestampBoundaryInterval[0]}\r\n                                    max={timestampBoundaryInterval[1]}\r\n                                    marks={timestampMarks}\r\n                                    step={1}\r\n                                    valueLabelDisplay=\"auto\"\r\n                                    className={classes.rangeSelectSlider}\r\n                                    color=\"secondary\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Tooltip title=\"Reset\">\r\n                                    <span>\r\n                                        <IconButton\r\n                                            edge=\"end\"\r\n                                            style={{ marginTop: -8 }}\r\n                                            onClick={handleResetTimestampInterval}\r\n                                        >\r\n                                            <RestoreIcon />\r\n                                        </IconButton>\r\n                                    </span>\r\n                                </Tooltip>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Tooltip title=\"Zoom In\">\r\n                                    <span>\r\n                                        <IconButton\r\n                                            edge=\"end\"\r\n                                            style={{ marginTop: -8 }}\r\n                                            onClick={handleZoomInTimestampInterval}\r\n                                        >\r\n                                            <ZoomInIcon />\r\n                                        </IconButton>\r\n                                    </span>\r\n                                </Tooltip>\r\n                            </Grid>\r\n                        </Grid>\r\n                    )}\r\n                </form>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button disabled={disabled} onClick={() => onCancel()}>\r\n                    Cancel\r\n                </Button>\r\n                <Button\r\n                    disabled={disabled}\r\n                    onClick={() =>\r\n                        onProceed(\r\n                            text,\r\n                            definition,\r\n                            audioClip,\r\n                            image,\r\n                            word,\r\n                            source ?? '',\r\n                            url ?? '',\r\n                            customFieldValues,\r\n                            tags,\r\n                            'gui'\r\n                        )\r\n                    }\r\n                >\r\n                    Open in Anki\r\n                </Button>\r\n                <Button\r\n                    disabled={disabled}\r\n                    onClick={() =>\r\n                        onProceed(\r\n                            text,\r\n                            definition,\r\n                            audioClip,\r\n                            image,\r\n                            word,\r\n                            source ?? '',\r\n                            url ?? '',\r\n                            customFieldValues,\r\n                            tags,\r\n                            'updateLast'\r\n                        )\r\n                    }\r\n                >\r\n                    Update Last Card\r\n                </Button>\r\n                <Button\r\n                    disabled={disabled}\r\n                    onClick={() =>\r\n                        onProceed(\r\n                            text,\r\n                            definition,\r\n                            audioClip,\r\n                            image,\r\n                            word,\r\n                            source ?? '',\r\n                            url ?? '',\r\n                            customFieldValues,\r\n                            tags,\r\n                            'default'\r\n                        )\r\n                    }\r\n                >\r\n                    Export\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/background-colored.cbc50e45.png\";","import { makeStyles } from '@material-ui/styles';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport coloredBackground from './background-colored.png';\r\nimport { Theme } from '@material-ui/core';\r\n\r\ninterface StylesProps {\r\n    dragging: boolean;\r\n    appBarHidden: boolean;\r\n}\r\n\r\ninterface Props {\r\n    dragging: boolean;\r\n    appBarHidden: boolean;\r\n    loading: boolean;\r\n}\r\n\r\nconst useStyles = makeStyles<Theme, StylesProps>((theme) => ({\r\n    root: ({ dragging, appBarHidden }) => ({\r\n        position: 'absolute',\r\n        height: appBarHidden ? '100%' : 'calc(100% - 64px)',\r\n        width: '100%',\r\n        zIndex: 101,\r\n        pointerEvents: dragging ? 'auto' : 'none',\r\n    }),\r\n    transparentBackground: ({ appBarHidden }) => ({\r\n        '&::before': {\r\n            content: \"' '\",\r\n            position: 'absolute',\r\n            height: appBarHidden ? '100vh' : 'calc(100vh - 64px)',\r\n            width: '100%',\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n            textAlign: 'center',\r\n            backgroundSize: '300px 300px',\r\n            backgroundRepeat: 'no-repeat',\r\n            backgroundPosition: 'center',\r\n            backgroundImage: `url(${coloredBackground})`,\r\n            backgroundBlendMode: 'overlay',\r\n            background: 'rgba(0, 0, 0, .3)',\r\n            filter: 'drop-shadow(10px 10px 10px rgb(0, 0, 0, .4))',\r\n        },\r\n        width: '100%',\r\n        height: '100%',\r\n    }),\r\n}));\r\n\r\nexport default function DragOverlay({ dragging, appBarHidden, loading }: Props) {\r\n    const classes = useStyles({ dragging, appBarHidden });\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Fade in={dragging || loading}>\r\n                <div className={classes.transparentBackground} />\r\n            </Fade>\r\n        </div>\r\n    );\r\n}\r\n","import { makeStyles } from '@material-ui/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport Link from '@material-ui/core/Link';\r\nimport SpeedIcon from '@material-ui/icons/Speed';\r\nimport StarIcon from '@material-ui/icons/Star';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    inlineIcon: {\r\n        maxWidth: '80%',\r\n        height: 20,\r\n        display: 'inline-flex',\r\n        flexDirection: 'column',\r\n        flexWrap: 'wrap',\r\n        alignItems: 'start',\r\n        textAlign: 'left',\r\n    },\r\n}));\r\n\r\ninterface Props {\r\n    open: boolean;\r\n    extensionUrl: string;\r\n    onClose: () => void;\r\n}\r\n\r\nexport default function HelpDialog({ open, extensionUrl, onClose }: Props) {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Dialog open={open} onClose={onClose}>\r\n            <DialogContent>\r\n                <Typography variant=\"h6\">Loading files</Typography>\r\n                <Typography component=\"ul\">\r\n                    <li>Drag and drop mkv, srt, ass, or mp3 files into the player.</li>\r\n                    <li>Multiple files can be dragged and dropped simultaneously e.g. mkv+srt, mp3+ass etc.</li>\r\n                    <li>\r\n                        Multiple subtitle files can loaded simultaneously. When multiple subtitle files are loaded, they\r\n                        can be toggled on and off in-video using S+1, S+2, etc.\r\n                    </li>\r\n                </Typography>\r\n                <br />\r\n                <Typography variant=\"h6\">Syncing with streaming video in another tab</Typography>\r\n                <Typography component=\"ul\">\r\n                    <li>\r\n                        Install the Chrome{' '}\r\n                        <Link color=\"secondary\" target=\"_blank\" rel=\"noreferrer\" href={extensionUrl}>\r\n                            extension\r\n                        </Link>\r\n                        .\r\n                    </li>\r\n                    <li>Drag-and-drop a subtitle file into the video element you want to sync.</li>\r\n                    <li>Or, load a subtitle file into asbplayer and use the camera button in the bottom right.</li>\r\n                    <li>\r\n                        On supported sites you can sync detected subtitles via the extension keyboard shortcut\r\n                        (Ctrl+Shift+F by default), or via the \"automatically sync detected subtitles\" option. The same\r\n                        shortcut also allows you to sync an empty subtitle track, allowing you to mine media without\r\n                        accompanying subtitles.\r\n                    </li>\r\n                    <li>\r\n                        It is recommended to use the extension keyboard shortcut (Ctrl+Shift+X by default) to mine\r\n                        subtitles since that will include audio/screenshots.\r\n                    </li>\r\n                </Typography>\r\n                <br />\r\n                <Typography variant=\"h6\">Supported streaming video sites for subtitle detection</Typography>\r\n                <Typography component=\"ul\">\r\n                    <li>Netflix (on main /watch url)</li>\r\n                    <li>Youtube (on main /watch url)</li>\r\n                </Typography>\r\n                <br />\r\n                <Typography variant=\"h6\">Anki</Typography>\r\n                <Typography component=\"ul\">\r\n                    <li>Synchronous workflow:</li>\r\n                    <ul>\r\n                        <li>For synced streaming video, open the Anki dialog during playback by using Ctrl+Shift+X.</li>\r\n                        <li>For local file playback, open the Anki dialog during playback by using Ctrl+Shift+Q.</li>\r\n                    </ul>\r\n                    <li>Asynchronous workflow:</li>\r\n                    <ul>\r\n                        <li>For synced streaming video, copy the current subtitle by using Ctrl+Shift+Z.</li>\r\n                        <li>For local file playback, copy the current subtitle by using Ctrl+Shift+A.</li>\r\n                        <li>\r\n                            <div className={classes.inlineIcon}>\r\n                                Use the &nbsp;\r\n                                <StarIcon fontSize=\"small\" />\r\n                                &nbsp; button in the copy history.\r\n                            </div>\r\n                        </li>\r\n                    </ul>\r\n                    <li>\r\n                        For synced streaming video, an audio/image will only be available if an extension keyboard\r\n                        shortcut was used (Ctrl+Shift+X or Ctrl+Shift+Z by default).\r\n                    </li>\r\n                    <li>\r\n                        Configure Anki settings with the settings button in the top right. See this{' '}\r\n                        <Link\r\n                            color=\"secondary\"\r\n                            target=\"_blank\"\r\n                            rel=\"noreferrer\"\r\n                            href=\"https://youtu.be/Mv7fEVb6PHo?t=44\"\r\n                        >\r\n                            video\r\n                        </Link>{' '}\r\n                        for how to configure AnkiConnect so that asbplayer can connect to Anki.\r\n                    </li>\r\n                </Typography>\r\n                <br />\r\n                <Typography variant=\"h6\">Changing subtitle offset</Typography>\r\n                <Typography component=\"ul\">\r\n                    <li>Use Ctrl+Left/Right to cause the previous/next subtitle to appear at the current timestamp.</li>\r\n                    <li>Use Ctrl+Shift+Left/Right to adjust timing further by 100 ms increments.</li>\r\n                    <li>Or, click on the subtitle offset input field in the controls, type a number, and hit Enter.</li>\r\n                </Typography>\r\n                <br />\r\n                <Typography variant=\"h6\">Condensed playback of local media files</Typography>\r\n                <Typography component=\"ul\">\r\n                    <li>Load an audio/video file with a subtitle file.</li>\r\n                    <li>\r\n                        <div className={classes.inlineIcon}>\r\n                            Use the &nbsp;\r\n                            <SpeedIcon fontSize=\"small\" />\r\n                            &nbsp; button in the bottom right.\r\n                        </div>\r\n                    </li>\r\n                </Typography>\r\n                <br />\r\n                <Typography variant=\"h6\">Keyboard shortcuts</Typography>\r\n                <TableContainer>\r\n                    <Table size=\"small\">\r\n                        <TableBody>\r\n                            <TableRow>\r\n                                <TableCell>\r\n                                    <Typography>Ctrl+Shift+A</Typography>\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    <Typography>Copy current subtitle</Typography>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>\r\n                                    <Typography>Ctrl+Shift+Q</Typography>\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    <Typography>Copy current subtitle and open Anki export dialog</Typography>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>\r\n                                    <Typography>Ctrl+Shift+Z (default, streaming video)</Typography>\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    <Typography>Copy current subtitle</Typography>\r\n                                    <Typography>\r\n                                        When video is synced without a subtitle file, starts/stops recording audio\r\n                                    </Typography>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>\r\n                                    <Typography>Ctrl+Shift+X (default, streaming video)</Typography>\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    <Typography>Copy current subtitle and open Anki export dialog</Typography>\r\n                                    <Typography>\r\n                                        When video is synced without a subtitle file, starts/stops recording audio\r\n                                    </Typography>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>\r\n                                    <Typography>Ctrl+Shift+F (default, streaming video)</Typography>\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    <Typography>\r\n                                        Select video element to mine without a subtitle file, or with detected subtitles\r\n                                        on supported sites\r\n                                    </Typography>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>\r\n                                    <Typography>Space</Typography>\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    <Typography>Play/pause</Typography>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>\r\n                                    <Typography>S</Typography>\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    <Typography>Toggle subtitles</Typography>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>\r\n                                    <Typography>S+1, S+2...</Typography>\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    <Typography>Toggle subtitle track 1, 2... in video</Typography>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>\r\n                                    <Typography>W+1, W+2...</Typography>\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    <Typography>Toggle subtitle track 1, 2... in asbplayer</Typography>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>\r\n                                    <Typography>A/D</Typography>\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    <Typography>Seek backward/forward by 5 seconds</Typography>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>\r\n                                    <Typography>Left/Right</Typography>\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    <Typography>Seek to previous/next subtitle</Typography>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>\r\n                                    <Typography>Down</Typography>\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    <Typography>Seek to beginning of current subtitle</Typography>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>\r\n                                    <Typography>Ctrl+Left/Right or Shift+Left/Right</Typography>\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    <Typography>Adjust offset to previous/next subtitle</Typography>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                            <TableRow>\r\n                                <TableCell>\r\n                                    <Typography>Ctrl+Shift+Left/Right</Typography>\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    <Typography>Adjust offset by +/- 100 ms</Typography>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n                <br />\r\n                <Typography variant=\"h6\">Common issues</Typography>\r\n                <Typography component=\"ul\">\r\n                    <li>asbplayer isn't detecting streaming video.</li>\r\n                    <ul>\r\n                        <li>Try refreshing both the asbplayer tab and the video in the other tab.</li>\r\n                        <li>\r\n                            Make sure that in the extension details, the extension has access to all sites. A lot of\r\n                            video players are loaded inside of iframes, so it's difficult to list every single URL that\r\n                            the extension might need access to.\r\n                        </li>\r\n                    </ul>\r\n                    <li>The extension keyboard shortcuts aren't working.</li>\r\n                    <ul>\r\n                        <li>Try uninstalling and reinstalling the extension and restarting Chrome.</li>\r\n                        <li>Make sure the extension isn't installed twice.</li>\r\n                        <li>\r\n                            Verify the keyboard shortcut is bound as in this{' '}\r\n                            <Link\r\n                                color=\"secondary\"\r\n                                target=\"_blank\"\r\n                                rel=\"noreferrer\"\r\n                                href=\"https://youtu.be/wYWbgovfNlI\"\r\n                            >\r\n                                video\r\n                            </Link>\r\n                            .\r\n                        </li>\r\n                    </ul>\r\n                    <li>asbplayer can't connect to Anki. It shows an error message e.g. 'Failed to fetch.'</li>\r\n                    <ul>\r\n                        <li>If you're using Brave, make sure asbplayer isn't being blocked by Shield.</li>\r\n                        <li>\r\n                            Make sure that asbplayer is allowed by AnkiConnect, as in this{' '}\r\n                            <Link\r\n                                color=\"secondary\"\r\n                                target=\"_blank\"\r\n                                rel=\"noreferrer\"\r\n                                href=\"https://youtu.be/Mv7fEVb6PHo?t=44\"\r\n                            >\r\n                                video\r\n                            </Link>\r\n                            .\r\n                        </li>\r\n                        <li>\r\n                            Check that your browser or an ad blocker isn't blocking the request. A good place to start\r\n                            is by opening your browser's developer console and looking for errors.\r\n                        </li>\r\n                    </ul>\r\n                    <li>When mining streaming video, asbplayer isn't including audio/screenshot in flashcards.</li>\r\n                    <ul>\r\n                        <li>Make sure you use an extension keyboard shortcut (Ctrl+Shift+X by default).</li>\r\n                    </ul>\r\n                </Typography>\r\n                <Typography variant=\"h6\">Demos</Typography>\r\n                <Typography component=\"ul\">\r\n                    <li>\r\n                        <Link\r\n                            color=\"secondary\"\r\n                            target=\"_blank\"\r\n                            rel=\"noreferrer\"\r\n                            href=\"https://www.youtube.com/watch?v=W9Lf3C7sRzc\"\r\n                        >\r\n                            Sentence mining streaming video (synchronous workflow)\r\n                        </Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link\r\n                            color=\"secondary\"\r\n                            target=\"_blank\"\r\n                            rel=\"noreferrer\"\r\n                            href=\"https://www.youtube.com/watch?v=kJXVVixD8H8\"\r\n                        >\r\n                            Sentence mining streaming video (asynchronous workflow)\r\n                        </Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link\r\n                            color=\"secondary\"\r\n                            target=\"_blank\"\r\n                            rel=\"noreferrer\"\r\n                            href=\"https://www.youtube.com/watch?v=sgrJF99WX-Q\"\r\n                        >\r\n                            Sentence mining streaming video (no subtitle file)\r\n                        </Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link\r\n                            color=\"secondary\"\r\n                            target=\"_blank\"\r\n                            rel=\"noreferrer\"\r\n                            href=\"https://www.youtube.com/watch?v=BSr_JusW8E8\"\r\n                        >\r\n                            Sentence mining video files (synchronous workflow)\r\n                        </Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link\r\n                            color=\"secondary\"\r\n                            target=\"_blank\"\r\n                            rel=\"noreferrer\"\r\n                            href=\"https://www.youtube.com/watch?v=J3E82spYqIk\"\r\n                        >\r\n                            Sentence mining video files (synchronous workflow using Yomichan export)\r\n                        </Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link\r\n                            color=\"secondary\"\r\n                            target=\"_blank\"\r\n                            rel=\"noreferrer\"\r\n                            href=\"https://www.youtube.com/watch?v=HsrrpnfM4pI\"\r\n                        >\r\n                            Sentence mining video files (asynchronous workflow)\r\n                        </Link>\r\n                    </li>\r\n                </Typography>\r\n                <br />\r\n                <Typography variant=\"h6\">Browser Compatibility</Typography>\r\n                <Typography component=\"ul\">\r\n                    <li>\r\n                        The asbplayer application and extension have only been tested on Chrome 91 and later and likely\r\n                        work on other Chromium-based browsers.\r\n                    </li>\r\n                    <li>\r\n                        Local file playback is supported only for codecs supported by the browser. The{' '}\r\n                        <Link\r\n                            color=\"secondary\"\r\n                            target=\"_blank\"\r\n                            rel=\"noreferrer\"\r\n                            href=\"https://github.com/animebook/animebook.github.io#video-format-support\"\r\n                        >\r\n                            animebook\r\n                        </Link>{' '}\r\n                        readme has a detailed explanation of this and links to browsers that have good compatibility.\r\n                        Personally, I use Microsoft Edge and paid one dollar for HEVC support.\r\n                    </li>\r\n                    <li>\r\n                        Audio track selection for mkv files is available if experimental web platform features are\r\n                        enabled from chrome://flags.\r\n                    </li>\r\n                </Typography>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={() => onClose()}>OK</Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n}\r\n","import { BufferAdapter } from \"./buffer\";\r\n\r\nexport enum SegmentType {\r\n    pds = 20,\r\n    ods = 21,\r\n    pcs = 22,\r\n    wds = 23,\r\n    end = 128,\r\n}\r\n\r\nconst segmentTypeValues = Object.values(SegmentType);\r\n\r\nexport function segmentTypeFromByte(byte: number) {\r\n    for (const type of segmentTypeValues) {\r\n        if (byte === type) {\r\n            return type;\r\n        }\r\n    }\r\n\r\n    throw new Error(`Invalid segment type byte: ${byte}`);\r\n}\r\n\r\nexport enum CompositionState {\r\n    normal = 0,\r\n    acquisitionState = 64,\r\n    epochStart = 128,\r\n}\r\n\r\nconst compositionStateValues = Object.values(CompositionState);\r\n\r\nexport function compositionStateFromByte(byte: number) {\r\n    for (const state of compositionStateValues) {\r\n        if (byte === state) {\r\n            return state;\r\n        }\r\n    }\r\n\r\n    throw new Error(`Invalid composition state byte: ${byte}`);\r\n}\r\n\r\nexport function paletteUpdateFlagFromByte(byte: number) {\r\n    switch (byte) {\r\n        case 0:\r\n            return false;\r\n        case 128:\r\n            return true;\r\n        default:\r\n            throw new Error(`Invalid palette update flag byte: ${byte}`);\r\n    }\r\n}\r\n\r\nexport function objectCroppedFlagFromByte(byte: number) {\r\n    switch (byte) {\r\n        case 0:\r\n            return false;\r\n        case 64:\r\n            return true;\r\n        default:\r\n            throw new Error(`Invalid object cropped flag byte: ${byte}`);\r\n    }\r\n}\r\n\r\nexport enum LastInSequenceFlag {\r\n    lastInSequence = 64,\r\n    firstInSequence = 128,\r\n    firstAndLastInSequence = 192,\r\n}\r\n\r\nconst lastInSequenceFlagValues = Object.values(LastInSequenceFlag);\r\n\r\nexport function lastInSequenceFlagFromByte(byte: number) {\r\n    for (const flag of lastInSequenceFlagValues) {\r\n        if (byte === flag) {\r\n            return flag;\r\n        }\r\n    }\r\n\r\n    throw new Error(`Invalid last in sequence flag byte: ${byte}`);\r\n}\r\n\r\nexport interface SegmentHeader {\r\n    presentationTimestamp: number;\r\n    decodingTimestamp: number;\r\n    segmentType: SegmentType;\r\n    segmentSize: number;\r\n}\r\n\r\nexport interface Segment {\r\n    readonly header: SegmentHeader;\r\n}\r\n\r\nexport interface PresentationCompositionSegment extends Segment {\r\n    readonly width: number;\r\n    readonly height: number;\r\n    readonly compositionNumber: number;\r\n    readonly compositionState: CompositionState;\r\n    readonly paletteUpdateFlag: boolean;\r\n    readonly paletteId: number;\r\n    readonly compositionObjectCount: number;\r\n    readonly objectId: number;\r\n    readonly windowId: number;\r\n    readonly objectCroppedFlag: boolean;\r\n    readonly objectHorizontalPosition: number;\r\n    readonly objectVerticalPosition: number;\r\n    readonly objectCroppingHorizontalPosition: number;\r\n    readonly objectCroppingVerticalPosition: number;\r\n    readonly objectCroppingWidth: number;\r\n    readonly objectCroppingHeightPosition: number;\r\n}\r\n\r\nexport interface WindowDefinition {\r\n    readonly windowId: number;\r\n    readonly windowHorizontalPosition: number;\r\n    readonly windowVerticalPosition: number;\r\n    readonly windowWidth: number;\r\n    readonly windowHeight: number;\r\n}\r\n\r\nexport interface WindowDefinitionSegment extends Segment {\r\n    readonly windowCount: number;\r\n    readonly windowDefinitions: WindowDefinition[];\r\n}\r\n\r\nexport interface PaletteEntry {\r\n    readonly paletteEntryId: number;\r\n    readonly luminance: number;\r\n    readonly colorDifferenceRed: number;\r\n    readonly colorDifferenceBlue: number;\r\n    readonly transparency: number;\r\n}\r\n\r\nexport interface PaletteDefinitionSegment extends Segment {\r\n    readonly paletteId: number;\r\n    readonly paletteVersionNumber: number;\r\n    readonly paletteEntries: PaletteEntry[];\r\n}\r\n\r\nexport interface ObjectDefinitionSegment extends Segment {\r\n    readonly objectId: number;\r\n    readonly objectVersionNumber: number;\r\n    readonly lastInSequenceFlag: LastInSequenceFlag;\r\n    readonly objectDataLength: number;\r\n    readonly width?: number;\r\n    readonly height?: number;\r\n    readonly objectData: BufferAdapter;\r\n}\r\n","export interface BufferAdapter {\r\n    length: number;\r\n    at(index: number): number;\r\n    subarray(start: number, end: number): BufferAdapter;\r\n}\r\n\r\nexport class Uint8ArrayBuffer implements BufferAdapter {\r\n    private readonly buffer: Uint8Array;\r\n\r\n    constructor(buffer: Uint8Array) {\r\n        this.buffer = buffer;\r\n    }\r\n\r\n    get length() {\r\n        return this.buffer.length;\r\n    }\r\n\r\n    at(index: number): number {\r\n        return this.buffer[index];\r\n    }\r\n\r\n    subarray(start: number, end: number) {\r\n        return new Uint8ArrayBuffer(this.buffer.subarray(start, end));\r\n    }\r\n}\r\n\r\nexport class CompositeBuffer implements BufferAdapter {\r\n    private readonly buffers: BufferAdapter[] = [];\r\n\r\n    constructor(buffers: BufferAdapter[]) {\r\n        this.buffers = buffers;\r\n    }\r\n\r\n    get length(): number {\r\n        let length = 0;\r\n        for (const b of this.buffers) {\r\n            length += b.length;\r\n        }\r\n\r\n        return length;\r\n    }\r\n\r\n    at(index: number): number {\r\n        let previousBuffersLength = 0;\r\n\r\n        for (const buffer of this.buffers) {\r\n            const bufferIndex = index - previousBuffersLength;\r\n\r\n            if (bufferIndex < buffer.length) {\r\n                return buffer.at(bufferIndex);\r\n            }\r\n\r\n            previousBuffersLength += buffer.length;\r\n        }\r\n\r\n        throw new Error('Out of bounds');\r\n    }\r\n\r\n    subarray(start: number, end: number): BufferAdapter {\r\n        const chunks: BufferAdapter[] = [];\r\n        let previousBuffersLength = 0;\r\n\r\n        for (const buffer of this.buffers) {\r\n            const startBufferIndex = Math.max(0, start - previousBuffersLength);\r\n            const endBufferIndex = Math.min(buffer.length, end - previousBuffersLength);\r\n\r\n            if (endBufferIndex > 0 && startBufferIndex < endBufferIndex) {\r\n                chunks.push(buffer.subarray(startBufferIndex, endBufferIndex));\r\n            }\r\n\r\n            previousBuffersLength += buffer.length;\r\n        }\r\n\r\n        return new CompositeBuffer(chunks);\r\n    }\r\n}\r\n\r\nexport class CompositeBufferReader {\r\n    private buffers: Uint8Array[] = [];\r\n\r\n    add(buffer: Uint8Array) {\r\n        this.buffers.push(buffer);\r\n    }\r\n\r\n    get length(): number {\r\n        let length = 0;\r\n\r\n        for (const buffer of this.buffers) {\r\n            length += buffer.length;\r\n        }\r\n\r\n        return length;\r\n    }\r\n\r\n    read(bytes: number): BufferAdapter {\r\n        if (bytes === 0) {\r\n            return new CompositeBuffer([]);\r\n        }\r\n\r\n        const chunks: Uint8Array[] = [];\r\n        let accumulated = 0;\r\n\r\n        while (true) {\r\n            if (this.buffers.length === 0) {\r\n                throw new Error('Trying to read more bytes than available');\r\n            }\r\n\r\n            const buffer = this.buffers.shift()!;\r\n            const required = bytes - accumulated;\r\n\r\n            if (buffer.length === required) {\r\n                chunks.push(buffer);\r\n                break;\r\n            } else if (buffer.length > required) {\r\n                chunks.push(buffer.subarray(0, required));\r\n                this.buffers.unshift(buffer.subarray(required, buffer.length));\r\n                break;\r\n            }\r\n\r\n            accumulated += buffer.length;\r\n            chunks.push(buffer);\r\n        }\r\n\r\n        return new CompositeBuffer(chunks.map(c => new Uint8ArrayBuffer(c)));\r\n    }\r\n}\r\n\r\nexport class BufferGenerator {\r\n    private stream: ReadableStream;\r\n    private accumulatedBuffer: CompositeBufferReader = new CompositeBufferReader();\r\n\r\n    requestedBytes: number = 0;\r\n\r\n    constructor(stream: ReadableStream) {\r\n        this.stream = stream;\r\n    }\r\n\r\n    async *buffers() {\r\n        const reader = this.stream.getReader();\r\n\r\n        while (true) {\r\n            if (this.accumulatedBuffer.length >= this.requestedBytes) {\r\n                yield this.accumulatedBuffer.read(this.requestedBytes);\r\n            } else {\r\n                const result = await reader.read();\r\n\r\n                if (result.done) {\r\n                    break;\r\n                }\r\n\r\n                this.accumulatedBuffer.add(result.value as Uint8Array);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport class BufferReader {\r\n    private buffer: BufferAdapter;\r\n    private _index: number = 0;\r\n\r\n    constructor(bytes: BufferAdapter) {\r\n        this.buffer = bytes;\r\n    }\r\n\r\n    get index() {\r\n        return this._index;\r\n    }\r\n\r\n    get hasNext() {\r\n        return this._index < this.buffer.length;\r\n    }\r\n\r\n    readHex(bytes: number, limit?: number) {\r\n        if (limit !== undefined && this._index + bytes > limit) {\r\n            return 0;\r\n        }\r\n\r\n        let number = 0;\r\n        let digit = 0;\r\n        const from = this._index;\r\n        const to = this._index + bytes - 1;\r\n\r\n        for (let i = to; i >= from; --i) {\r\n            number += this.buffer.at(i) << (8 * digit);\r\n            ++digit;\r\n        }\r\n\r\n        this._index += bytes;\r\n        return number;\r\n    }\r\n\r\n    readBuffer(bytes: number) {\r\n        const buffer = this.buffer.subarray(this.index, this.index + bytes);\r\n        this._index += bytes;\r\n        return buffer;\r\n    }\r\n}\r\n","import { BufferAdapter, BufferGenerator, BufferReader, CompositeBuffer } from './buffer';\r\nimport {\r\n    CompositionState,\r\n    compositionStateFromByte,\r\n    LastInSequenceFlag,\r\n    lastInSequenceFlagFromByte,\r\n    objectCroppedFlagFromByte,\r\n    ObjectDefinitionSegment,\r\n    PaletteDefinitionSegment,\r\n    PaletteEntry,\r\n    paletteUpdateFlagFromByte,\r\n    PresentationCompositionSegment,\r\n    Segment,\r\n    SegmentHeader,\r\n    SegmentType,\r\n    segmentTypeFromByte,\r\n    WindowDefinitionSegment,\r\n} from './segment';\r\n\r\nconst pgMagicNumber = 20551; // 0x5047\r\n\r\nexport class RunLengthEncodedBuffer {\r\n    private readonly encodedBuffer: BufferAdapter;\r\n\r\n    constructor(encodedBuffer: BufferAdapter) {\r\n        this.encodedBuffer = encodedBuffer;\r\n    }\r\n\r\n    decode(callback: (x: number, y: number, color: number) => void) {\r\n        let encodedIndex = 0;\r\n        let decodedLineIndex = 0;\r\n        let currentLine = 0;\r\n        const encodedLength = this.encodedBuffer.length;\r\n\r\n        while (encodedIndex < encodedLength) {\r\n            const firstByte = this.encodedBuffer.at(encodedIndex);\r\n            let runLength;\r\n            let color;\r\n            let increment;\r\n\r\n            // Deal with each possible code\r\n            if (firstByte > 0) {\r\n                // CCCCCCCC\t- One pixel in color C\r\n                color = firstByte;\r\n                runLength = 1;\r\n                increment = 1;\r\n            } else {\r\n                const secondByte = this.encodedBuffer.at(encodedIndex + 1);\r\n\r\n                if (secondByte === 0) {\r\n                    // 00000000 00000000 - End of line\r\n                    color = 0;\r\n                    runLength = 0;\r\n                    increment = 2;\r\n                    decodedLineIndex = 0;\r\n                    ++currentLine;\r\n                } else if (secondByte < 64) {\r\n                    // 00000000 00LLLLLL - L pixels in color 0 (L between 1 and 63)\r\n                    color = 0;\r\n                    runLength = secondByte;\r\n                    increment = 2;\r\n                } else if (secondByte < 128) {\r\n                    // 00000000 01LLLLLL LLLLLLLL - L pixels in color 0 (L between 64 and 16383)\r\n                    const thirdByte = this.encodedBuffer.at(encodedIndex + 2);\r\n                    color = 0;\r\n                    runLength = ((secondByte - 64) << 8) + thirdByte;\r\n                    increment = 3;\r\n                } else if (secondByte < 192) {\r\n                    // 00000000 10LLLLLL CCCCCCCC - L pixels in color C (L between 3 and 63)\r\n                    const thirdByte = this.encodedBuffer.at(encodedIndex + 2);\r\n                    color = thirdByte;\r\n                    runLength = secondByte - 128;\r\n                    increment = 3;\r\n                } else {\r\n                    // 00000000 11LLLLLL LLLLLLLL CCCCCCCC - L pixels in color C (L between 64 and 16383)\r\n                    const thirdByte = this.encodedBuffer.at(encodedIndex + 2);\r\n                    const fourthByte = this.encodedBuffer.at(encodedIndex + 3);\r\n                    color = fourthByte;\r\n                    runLength = ((secondByte - 192) << 8) + thirdByte;\r\n                    increment = 4;\r\n                }\r\n            }\r\n\r\n            if (runLength > 0) {\r\n                for (let x = decodedLineIndex; x < decodedLineIndex + runLength; ++x) {\r\n                    callback(x, currentLine, color);\r\n                }\r\n                // decodedLine.fill(color, decodedLineIndex, decodedLineIndex + runLength);\r\n                decodedLineIndex += runLength;\r\n            }\r\n\r\n            encodedIndex += increment;\r\n        }\r\n    }\r\n}\r\n\r\nexport class DisplaySet {\r\n    readonly presentationCompositionSegment: PresentationCompositionSegment;\r\n    readonly windowDefinitionSegments: WindowDefinitionSegment[];\r\n    readonly paletteDefinitionSegments: PaletteDefinitionSegment[];\r\n    readonly objectDefinitionSegments: ObjectDefinitionSegment[];\r\n    readonly endDefinitionSegment: Segment;\r\n\r\n    private readonly previousDisplaySet?: DisplaySet;\r\n\r\n    constructor(\r\n        presentationCompositionSegment: PresentationCompositionSegment,\r\n        windowDefinitionSegments: WindowDefinitionSegment[],\r\n        paletteDefinitionSegments: PaletteDefinitionSegment[],\r\n        objectDefinitionSegments: ObjectDefinitionSegment[],\r\n        endDefinitionSegment: Segment,\r\n        previousDisplaySet?: DisplaySet\r\n    ) {\r\n        this.presentationCompositionSegment = presentationCompositionSegment;\r\n        this.windowDefinitionSegments = windowDefinitionSegments;\r\n        this.paletteDefinitionSegments = paletteDefinitionSegments;\r\n        this.objectDefinitionSegments = objectDefinitionSegments;\r\n        this.endDefinitionSegment = endDefinitionSegment;\r\n        this.previousDisplaySet = previousDisplaySet;\r\n    }\r\n\r\n    get firstOds() {\r\n        return this.objectDefinitionSegments.find(\r\n            (ods) =>\r\n                ods.lastInSequenceFlag === LastInSequenceFlag.firstInSequence ||\r\n                ods.lastInSequenceFlag === LastInSequenceFlag.firstAndLastInSequence\r\n        );\r\n    }\r\n\r\n    protected paletteDefinitionSegment(paletteId: number): PaletteDefinitionSegment | undefined {\r\n        const pds = this.paletteDefinitionSegments.find((s) => s.paletteId === paletteId);\r\n\r\n        if (pds === undefined) {\r\n            if (this.presentationCompositionSegment.compositionState !== CompositionState.normal) {\r\n                throw new Error(`PCS references invalid PDS and composition state is not 'normal'`);\r\n            }\r\n\r\n            if (this.previousDisplaySet === undefined) {\r\n                throw new Error(`PCS references invalid PDS and no previous display set to fallback to`);\r\n            }\r\n\r\n            return this.previousDisplaySet.paletteDefinitionSegment(paletteId);\r\n        }\r\n\r\n        return pds;\r\n    }\r\n\r\n    imageData(buffer?: Uint8ClampedArray) {\r\n        const pds = this.paletteDefinitionSegment(this.presentationCompositionSegment.paletteId);\r\n\r\n        if (pds === undefined) {\r\n            throw new Error(`PCS references invalid PDS`);\r\n        }\r\n\r\n        const firstOds = this.firstOds;\r\n\r\n        if (firstOds === undefined || firstOds.width === undefined || firstOds.height === undefined) {\r\n            throw new Error(`Missing first ODS with defined width and height`);\r\n        }\r\n\r\n        const imageDataArray = buffer ?? new Uint8ClampedArray(firstOds.width * firstOds.height * 4);\r\n        const rgbaPalette = pds.paletteEntries.map((palette) => this.ycrcbToRgba(palette));\r\n        const width = firstOds.width;\r\n\r\n        new RunLengthEncodedBuffer(\r\n            new CompositeBuffer(this.objectDefinitionSegments.map((ods) => ods.objectData))\r\n        ).decode((x, y, paletteIndex) => {\r\n            const pixelIndex = y * width + x;\r\n            const imageDataOffset = pixelIndex * 4;\r\n\r\n            if (paletteIndex >= rgbaPalette.length) {\r\n                imageDataArray[imageDataOffset] = 0;\r\n                imageDataArray[imageDataOffset + 1] = 0;\r\n                imageDataArray[imageDataOffset + 2] = 0;\r\n                imageDataArray[imageDataOffset + 3] = 0;\r\n            } else {\r\n                const color = rgbaPalette[paletteIndex];\r\n                imageDataArray[imageDataOffset] = color.r;\r\n                imageDataArray[imageDataOffset + 1] = color.g;\r\n                imageDataArray[imageDataOffset + 2] = color.b;\r\n                imageDataArray[imageDataOffset + 3] = color.a;\r\n            }\r\n        });\r\n\r\n        return new ImageData(\r\n            imageDataArray.subarray(0, 4 * firstOds.width * firstOds.height),\r\n            firstOds.width,\r\n            firstOds.height\r\n        );\r\n    }\r\n\r\n    // https://stackoverflow.com/questions/21264648/javascript-convert-yuv-to-rgb\r\n    private ycrcbToRgba(palette: PaletteEntry) {\r\n        const y = palette.luminance;\r\n        const cb = palette.colorDifferenceBlue;\r\n        const cr = palette.colorDifferenceRed;\r\n\r\n        const r = this.clamp(Math.floor(y + 1.4075 * (cr - 128)), 0, 255);\r\n        const g = this.clamp(Math.floor(y - 0.3455 * (cb - 128) - 0.7169 * (cr - 128)), 0, 255);\r\n        const b = this.clamp(Math.floor(y + 1.779 * (cb - 128)), 0, 255);\r\n        return { r, g, b, a: palette.transparency };\r\n    }\r\n\r\n    private clamp(number: number, min: number, max: number) {\r\n        return Math.max(min, Math.min(max, number));\r\n    }\r\n}\r\n\r\nexport async function* parseDisplaySets(s: ReadableStream) {\r\n    const bufferGenerator = new BufferGenerator(s);\r\n    bufferGenerator.requestedBytes = 13;\r\n\r\n    let header: SegmentHeader | undefined;\r\n    let lastDisplaySet: DisplaySet | undefined;\r\n    let presentationCompositionSegment: PresentationCompositionSegment | undefined;\r\n    let windowDefinitionSegments: WindowDefinitionSegment[] = [];\r\n    let paletteDefinitionSegments: PaletteDefinitionSegment[] = [];\r\n    let objectDefinitionSegments: ObjectDefinitionSegment[] = [];\r\n\r\n    for await (const buffer of bufferGenerator.buffers()) {\r\n        const reader = new BufferReader(buffer);\r\n\r\n        if (header) {\r\n            switch (header.segmentType) {\r\n                case SegmentType.pcs:\r\n                    if (presentationCompositionSegment !== undefined) {\r\n                        throw new Error(`Unexpected PDS`);\r\n                    }\r\n\r\n                    presentationCompositionSegment = parsePcsSegment(reader, header);\r\n                    break;\r\n                case SegmentType.wds:\r\n                    if (presentationCompositionSegment === undefined) {\r\n                        throw new Error(`Unexpected WDS`);\r\n                    }\r\n\r\n                    windowDefinitionSegments.push(parseWdsSegment(reader, header));\r\n                    break;\r\n                case SegmentType.pds:\r\n                    if (presentationCompositionSegment === undefined) {\r\n                        throw new Error(`Unexpected PDS`);\r\n                    }\r\n\r\n                    paletteDefinitionSegments.push(parsePdsSegment(reader, header));\r\n                    break;\r\n                case SegmentType.ods:\r\n                    if (presentationCompositionSegment === undefined) {\r\n                        throw new Error(`Unexpected ODS`);\r\n                    }\r\n\r\n                    const ods = parseOdsSegment(reader, header);\r\n                    objectDefinitionSegments.push(ods);\r\n                    break;\r\n                case SegmentType.end:\r\n                    if (presentationCompositionSegment === undefined) {\r\n                        throw new Error(`Unexpected end segment`);\r\n                    }\r\n\r\n                    const endDefinitionSegment = { header };\r\n                    lastDisplaySet = new DisplaySet(\r\n                        presentationCompositionSegment,\r\n                        windowDefinitionSegments,\r\n                        paletteDefinitionSegments,\r\n                        objectDefinitionSegments,\r\n                        endDefinitionSegment,\r\n                        lastDisplaySet\r\n                    );\r\n\r\n                    yield lastDisplaySet;\r\n\r\n                    presentationCompositionSegment = undefined;\r\n                    windowDefinitionSegments = [];\r\n                    paletteDefinitionSegments = [];\r\n                    objectDefinitionSegments = [];\r\n                    break;\r\n                default:\r\n                    throw new Error(`Unknown segment type: ${header.segmentType}`);\r\n            }\r\n\r\n            header = undefined;\r\n            bufferGenerator.requestedBytes = 13;\r\n        } else {\r\n            const magicNumber = reader.readHex(2);\r\n\r\n            if (magicNumber !== pgMagicNumber) {\r\n                throw new Error(`Invalid magic number: ${magicNumber}`);\r\n            }\r\n\r\n            const presentationTimestamp = reader.readHex(4);\r\n            const decodingTimestamp = reader.readHex(4);\r\n            const segmentType = segmentTypeFromByte(reader.readHex(1));\r\n            const segmentSize = reader.readHex(2);\r\n            header = { presentationTimestamp, decodingTimestamp, segmentType, segmentSize };\r\n            bufferGenerator.requestedBytes = segmentSize;\r\n        }\r\n    }\r\n}\r\n\r\nfunction parsePcsSegment(reader: BufferReader, header: SegmentHeader): PresentationCompositionSegment {\r\n    const limit = reader.index + header.segmentSize;\r\n    const width = reader.readHex(2, limit);\r\n    const height = reader.readHex(2, limit);\r\n    reader.readHex(1); // ignore frame rate\r\n    const compositionNumber = reader.readHex(2, limit);\r\n    const compositionState = compositionStateFromByte(reader.readHex(1, limit));\r\n    const paletteUpdateFlag = paletteUpdateFlagFromByte(reader.readHex(1, limit));\r\n    const paletteId = reader.readHex(1, limit);\r\n    const compositionObjectCount = reader.readHex(1, limit);\r\n    const objectId = reader.readHex(2, limit);\r\n    const windowId = reader.readHex(1, limit);\r\n    const objectCroppedFlag = objectCroppedFlagFromByte(reader.readHex(1, limit));\r\n    const objectHorizontalPosition = reader.readHex(2, limit);\r\n    const objectVerticalPosition = reader.readHex(2, limit);\r\n    const objectCroppingHorizontalPosition = reader.readHex(2, limit);\r\n    const objectCroppingVerticalPosition = reader.readHex(2, limit);\r\n    const objectCroppingWidth = reader.readHex(2, limit);\r\n    const objectCroppingHeightPosition = reader.readHex(2, limit);\r\n\r\n    return {\r\n        header,\r\n        width,\r\n        height,\r\n        compositionNumber,\r\n        compositionState,\r\n        paletteUpdateFlag,\r\n        paletteId,\r\n        compositionObjectCount,\r\n        objectId,\r\n        windowId,\r\n        objectCroppedFlag,\r\n        objectHorizontalPosition,\r\n        objectVerticalPosition,\r\n        objectCroppingHorizontalPosition,\r\n        objectCroppingVerticalPosition,\r\n        objectCroppingWidth,\r\n        objectCroppingHeightPosition,\r\n    };\r\n}\r\n\r\nfunction parseWdsSegment(reader: BufferReader, header: SegmentHeader): WindowDefinitionSegment {\r\n    const limit = reader.index + header.segmentSize;\r\n    const windowCount = reader.readHex(1, limit);\r\n    const windowDefinitions = [];\r\n\r\n    for (let i = 0; i < windowCount; ++i) {\r\n        const windowId = reader.readHex(1, limit);\r\n        const windowHorizontalPosition = reader.readHex(2, limit);\r\n        const windowVerticalPosition = reader.readHex(2, limit);\r\n        const windowWidth = reader.readHex(2, limit);\r\n        const windowHeight = reader.readHex(2, limit);\r\n\r\n        windowDefinitions.push({\r\n            windowId,\r\n            windowHorizontalPosition,\r\n            windowVerticalPosition,\r\n            windowWidth,\r\n            windowHeight,\r\n        });\r\n    }\r\n\r\n    return {\r\n        header,\r\n        windowCount,\r\n        windowDefinitions,\r\n    };\r\n}\r\n\r\nfunction parsePdsSegment(reader: BufferReader, header: SegmentHeader): PaletteDefinitionSegment {\r\n    const limit = reader.index + header.segmentSize;\r\n    const paletteId = reader.readHex(1, limit);\r\n    const paletteVersionNumber = reader.readHex(1, limit);\r\n    const paletteEntries: PaletteEntry[] = [];\r\n\r\n    while (reader.index < limit) {\r\n        const paletteEntryId = reader.readHex(1, limit);\r\n        const luminance = reader.readHex(1, limit);\r\n        const colorDifferenceRed = reader.readHex(1, limit);\r\n        const colorDifferenceBlue = reader.readHex(1, limit);\r\n        const transparency = reader.readHex(1, limit);\r\n        paletteEntries.push({ paletteEntryId, luminance, colorDifferenceRed, colorDifferenceBlue, transparency });\r\n    }\r\n\r\n    return {\r\n        header,\r\n        paletteId,\r\n        paletteVersionNumber,\r\n        paletteEntries,\r\n    };\r\n}\r\n\r\nfunction parseOdsSegment(reader: BufferReader, header: SegmentHeader): ObjectDefinitionSegment {\r\n    const objectId = reader.readHex(2);\r\n    const objectVersionNumber = reader.readHex(1);\r\n    const lastInSequenceFlag = lastInSequenceFlagFromByte(reader.readHex(1));\r\n    const objectDataLength = reader.readHex(3);\r\n    let width: number | undefined;\r\n    let height: number | undefined;\r\n    let objectData: BufferAdapter;\r\n\r\n    if (\r\n        lastInSequenceFlag === LastInSequenceFlag.firstInSequence ||\r\n        lastInSequenceFlag === LastInSequenceFlag.firstAndLastInSequence\r\n    ) {\r\n        width = reader.readHex(2);\r\n        height = reader.readHex(2);\r\n        objectData = reader.readBuffer(objectDataLength - 4);\r\n    } else {\r\n        objectData = reader.readBuffer(objectDataLength);\r\n    }\r\n\r\n    return {\r\n        header,\r\n        objectId,\r\n        objectVersionNumber,\r\n        lastInSequenceFlag,\r\n        objectDataLength,\r\n        width,\r\n        height,\r\n        objectData: objectData,\r\n    };\r\n}\r\n","import { compile as parseAss } from 'ass-compiler';\r\nimport { parseSync as parseSrt } from 'subtitle';\r\nimport { WebVTT } from 'vtt.js';\r\nimport { XMLParser } from 'fast-xml-parser';\r\nimport { DisplaySet, parseDisplaySets as parsePgsDisplaySets } from './pgs-parser';\r\nimport { SubtitleTextImage, CanvasResizer } from '@project/common';\r\n\r\nconst tagRegex = RegExp('</?([^>]*)>', 'ig');\r\nconst assNewLineRegex = RegExp(/\\\\[nN]/, 'ig');\r\nconst helperElement = document.createElement('div');\r\nconst helperCanvas = document.createElement('canvas');\r\n\r\ninterface SubtitleNode {\r\n    start: number;\r\n    end: number;\r\n    text: string;\r\n    textImage?: SubtitleTextImage;\r\n    track: number;\r\n}\r\n\r\nexport default class SubtitleReader {\r\n    private readonly canvasResizer = new CanvasResizer();\r\n    private xmlParser?: XMLParser;\r\n\r\n    async subtitles(files: File[]) {\r\n        return (await Promise.all(files.map((f, i) => this._subtitles(f, i))))\r\n            .flatMap((nodes) => nodes)\r\n            .sort((n1, n2) => n1.start - n2.start);\r\n    }\r\n\r\n    async _subtitles(file: File, track: number): Promise<SubtitleNode[]> {\r\n        if (file.name.endsWith('.srt')) {\r\n            const nodes = parseSrt(await file.text());\r\n            return nodes.map((node: any) => ({ ...node.data, track: track }));\r\n        }\r\n\r\n        if (file.name.endsWith('.vtt') || file.name.endsWith('.nfvtt')) {\r\n            return new Promise(async (resolve, reject) => {\r\n                const isFromNetflix = file.name.endsWith('.nfvtt');\r\n                const parser = new WebVTT.Parser(window, WebVTT.StringDecoder());\r\n                const cues: any[] = [];\r\n                parser.oncue = (c: any) => {\r\n                    if (isFromNetflix) {\r\n                        c.text = c.text.replace(tagRegex, '');\r\n\r\n                        const lines = c.text.split('\\n');\r\n                        const newLines = [];\r\n\r\n                        for (const line of lines) {\r\n                            newLines.push(this._fixRTL(line));\r\n                        }\r\n\r\n                        c.text = newLines.join('\\n');\r\n                    }\r\n                    cues.push(c);\r\n                };\r\n                parser.onflush = () =>\r\n                    resolve(\r\n                        cues.map((c) => ({\r\n                            start: Math.floor(c.startTime * 1000),\r\n                            end: Math.floor(c.endTime * 1000),\r\n                            text: c.text as string,\r\n                            track: track,\r\n                        }))\r\n                    );\r\n                parser.parse(await file.text());\r\n                parser.flush();\r\n            });\r\n        }\r\n\r\n        if (file.name.endsWith('.ass')) {\r\n            const nodes = parseAss(await file.text(), {});\r\n            return nodes.dialogues.map((dialogue) => {\r\n                return {\r\n                    start: Math.round(dialogue.start * 1000),\r\n                    end: Math.round(dialogue.end * 1000),\r\n                    text: dialogue.slices\r\n                        .flatMap((slice) => slice.fragments.map((fragment) => fragment.text))\r\n                        .join('')\r\n                        .replace(assNewLineRegex, '\\n'),\r\n                    track: track,\r\n                };\r\n            });\r\n        }\r\n\r\n        if (file.name.endsWith('.ytxml')) {\r\n            const text = await file.text();\r\n            const xml = this._xmlParser().parse(text);\r\n\r\n            if (Object.keys(xml).length === 0) {\r\n                return [];\r\n            }\r\n\r\n            const textNodes = xml['transcript']['text'];\r\n            const subtitles = [];\r\n\r\n            for (let index = 0, length = textNodes.length; index < length; index++) {\r\n                const elm = textNodes[index];\r\n\r\n                if (!('#text' in elm) || !('@_dur' in elm) || !('@_start' in elm)) {\r\n                    continue;\r\n                }\r\n\r\n                const start = parseFloat(elm['@_start']);\r\n\r\n                subtitles.push({\r\n                    start: Math.floor(start * 1000),\r\n                    end: Math.floor((start + parseFloat(elm['@_dur'])) * 1000),\r\n                    text: this._decodeHTML(String(elm['#text']).replace(tagRegex, '')),\r\n                    track,\r\n                });\r\n            }\r\n\r\n            return subtitles;\r\n        }\r\n\r\n        if (file.name.endsWith('.sup')) {\r\n            let imageDataArray: Uint8ClampedArray | undefined;\r\n            const subtitles = [];\r\n            let currentImageDisplaySet: DisplaySet | undefined;\r\n\r\n            // FIXME: Figure out how to remove conflicts with @types/node ReadableStream\r\n            // @ts-ignore\r\n            for await (const displaySet of parsePgsDisplaySets(file.stream())) {\r\n                if (displaySet.objectDefinitionSegments.length > 0) {\r\n                    if (currentImageDisplaySet === undefined) {\r\n                        currentImageDisplaySet = displaySet;\r\n                    }\r\n                } else if (currentImageDisplaySet !== undefined) {\r\n                    const screenWidth = currentImageDisplaySet.presentationCompositionSegment.width;\r\n                    const screenHeight = currentImageDisplaySet.presentationCompositionSegment.height;\r\n                    imageDataArray =\r\n                        imageDataArray === undefined || imageDataArray.length < screenHeight * screenWidth * 4\r\n                            ? new Uint8ClampedArray(screenWidth * screenHeight * 4)\r\n                            : imageDataArray;\r\n                    const imageData = currentImageDisplaySet.imageData(imageDataArray);\r\n                    helperCanvas.width = imageData.width;\r\n                    helperCanvas.height = imageData.height;\r\n                    const context = helperCanvas.getContext('2d')!;\r\n                    context.putImageData(imageData, 0, 0);\r\n                    subtitles.push({\r\n                        start:\r\n                            currentImageDisplaySet.objectDefinitionSegments[0].header.presentationTimestamp / 90 ?? 0,\r\n                        end: displaySet.endDefinitionSegment.header.presentationTimestamp / 90,\r\n                        text: '',\r\n                        textImage: {\r\n                            dataUrl: helperCanvas.toDataURL('image/png'),\r\n                            image: {\r\n                                width: imageData.width,\r\n                                height: imageData.height,\r\n                            },\r\n                            screen: {\r\n                                width: currentImageDisplaySet.presentationCompositionSegment.width,\r\n                                height: currentImageDisplaySet.presentationCompositionSegment.height,\r\n                            },\r\n                        },\r\n                        track,\r\n                    });\r\n                    \r\n                    currentImageDisplaySet = undefined;\r\n                }\r\n            }\r\n\r\n            return subtitles;\r\n        }\r\n\r\n        throw new Error('Unsupported subtitle file format');\r\n    }\r\n\r\n    _fixRTL(line: string): string {\r\n        const index1 = line.indexOf('&lrm;');\r\n        const index2 = line.indexOf('&rlm;');\r\n        let newLine = '';\r\n\r\n        if (index1 > -1) {\r\n            newLine = line.substring(0, index1) + '\\u202a' + line.substring(index1 + 5) + '\\u202c';\r\n            return this._fixRTL(newLine);\r\n        } else if (index2 > -1) {\r\n            newLine = line.substring(0, index2) + '\\u202b' + line.substring(index2 + 5) + '\\u202c';\r\n            return this._fixRTL(newLine);\r\n        }\r\n\r\n        return line;\r\n    }\r\n\r\n    _decodeHTML(text: string): string {\r\n        helperElement.innerHTML = text;\r\n        return helperElement.childNodes.length === 0 ? '' : helperElement.childNodes[0].nodeValue!;\r\n    }\r\n\r\n    _xmlParser() {\r\n        if (this.xmlParser === undefined) {\r\n            this.xmlParser = new XMLParser({ ignoreAttributes: false });\r\n        }\r\n\r\n        return this.xmlParser;\r\n    }\r\n}\r\n","import { makeStyles, Theme } from '@material-ui/core/styles';\r\nimport clsx from 'clsx';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport BugReportIcon from '@material-ui/icons/BugReport';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport HelpIcon from '@material-ui/icons/Help';\r\nimport FolderOpenIcon from '@material-ui/icons/FolderOpen';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ListIcon from '@material-ui/icons/List';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Tooltip, { TooltipProps } from '@material-ui/core/Tooltip';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\ninterface BarProps {\r\n    drawerWidth: number;\r\n    drawerOpen: boolean;\r\n    hidden: boolean;\r\n    title: string;\r\n    onFileSelector: () => void;\r\n    onOpenHelp: () => void;\r\n    onOpenSettings: () => void;\r\n    onOpenCopyHistory: () => void;\r\n}\r\n\r\nconst useStyles = makeStyles<Theme, BarProps, string>((theme) => ({\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    appBar: {\r\n        transition: theme.transitions.create(['margin', 'width'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    appBarShift: {\r\n        width: ({ drawerWidth }) => `calc(100% - ${drawerWidth}px)`,\r\n        transition: theme.transitions.create(['margin', 'width'], {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n        marginRight: ({ drawerWidth }) => drawerWidth,\r\n    },\r\n    copyHistoryButton: {\r\n        transform: 'scaleX(1)',\r\n        width: 48,\r\n        padding: 12,\r\n        transition: theme.transitions.create(['transform', 'padding', 'width'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    copyHistoryButtonShift: {\r\n        transform: 'scaleX(0)',\r\n        width: 0,\r\n        padding: 5,\r\n        transition: theme.transitions.create(['transform', 'padding', 'width'], {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    hide: {\r\n        display: 'none',\r\n    },\r\n}));\r\n\r\ninterface CopyHistoryTooltipStylesProps {\r\n    show: boolean;\r\n}\r\n\r\ninterface CopyHistoryTooltipProps extends TooltipProps {\r\n    show: boolean;\r\n}\r\n\r\nconst useCopyHistoryTooltipStyles = makeStyles<Theme, CopyHistoryTooltipStylesProps, string>((theme) => ({\r\n    tooltip: ({ show }) => ({\r\n        display: show ? 'block' : 'none',\r\n    }),\r\n}));\r\n\r\nfunction CopyHistoryTooltip({ show, ...toolTipProps }: CopyHistoryTooltipProps) {\r\n    const classes = useCopyHistoryTooltipStyles({ show: show });\r\n    return <Tooltip classes={classes} {...toolTipProps} />;\r\n}\r\n\r\nexport default function Bar(props: BarProps) {\r\n    const classes = useStyles(props);\r\n    return (\r\n        <AppBar\r\n            position=\"static\"\r\n            elevation={0}\r\n            className={clsx(classes.appBar, {\r\n                [classes.appBarShift]: props.drawerOpen,\r\n                [classes.hide]: props.hidden\r\n            })}\r\n        >\r\n            <Toolbar>\r\n                <Tooltip title=\"Open Files\">\r\n                    <IconButton edge=\"start\" color=\"inherit\" onClick={props.onFileSelector}>\r\n                        <FolderOpenIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n                <Typography variant=\"h6\" className={classes.title}>\r\n                    {props.title}\r\n                </Typography>\r\n                <Tooltip title=\"Donate\">\r\n                    <IconButton\r\n                        edge=\"end\"\r\n                        color=\"inherit\"\r\n                        component=\"a\"\r\n                        href=\"https://github.com/sponsors/killergerbah?frequency=one-time\"\r\n                        target=\"_blank\"\r\n                        rel=\"noreferrer\"\r\n                    >\r\n                        <FavoriteIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n                <Tooltip title=\"Submit Issue\">\r\n                    <IconButton\r\n                        edge=\"end\"\r\n                        color=\"inherit\"\r\n                        component=\"a\"\r\n                        href=\"https://github.com/killergerbah/asbplayer/issues\"\r\n                        target=\"_blank\"\r\n                        rel=\"noreferrer\"\r\n                    >\r\n                        <BugReportIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n                <Tooltip title=\"Help\">\r\n                    <IconButton edge=\"end\" color=\"inherit\" onClick={props.onOpenHelp}>\r\n                        <HelpIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n                <Tooltip title=\"Settings\">\r\n                    <IconButton edge=\"end\" color=\"inherit\" onClick={props.onOpenSettings}>\r\n                        <SettingsIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n                <CopyHistoryTooltip title=\"Copy History\" show={!props.drawerOpen}>\r\n                    <IconButton\r\n                        edge=\"end\"\r\n                        color=\"inherit\"\r\n                        aria-label=\"menu\"\r\n                        className={clsx(classes.copyHistoryButton, {\r\n                            [classes.copyHistoryButtonShift]: props.drawerOpen,\r\n                        })}\r\n                        onClick={props.onOpenCopyHistory}\r\n                    >\r\n                        <ListIcon />\r\n                    </IconButton>\r\n                </CopyHistoryTooltip>\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n}\r\n","import { AsbPlayerToVideoCommandV2, Message, VideoTabModel } from '@project/common';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nexport interface ExtensionMessage {\r\n    data: Message;\r\n    tabId: number;\r\n    src: string;\r\n}\r\n\r\nexport default class ChromeExtension {\r\n    private readonly onMessageCallbacks: Array<(message: ExtensionMessage) => void>;\r\n    private readonly onTabsCallbacks: Array<(tabs: VideoTabModel[]) => void>;\r\n    private readonly versionPromise: Promise<string>;\r\n    private readonly id:string;\r\n\r\n    private tabs: VideoTabModel[];\r\n    private versionResolve?: (value: string | PromiseLike<string>) => void;\r\n\r\n    constructor(heartbeat: boolean) {\r\n        this.onMessageCallbacks = [];\r\n        this.onTabsCallbacks = [];\r\n        this.tabs = [];\r\n        this.versionPromise = new Promise((resolve, reject) => {\r\n            this.versionResolve = resolve;\r\n        });\r\n        this.id = uuidv4();\r\n\r\n        window.addEventListener('message', (event) => {\r\n            if (event.source !== window) {\r\n                return;\r\n            }\r\n\r\n            if (event.data.sender === 'asbplayer-extension-to-player') {\r\n                if (event.data.message) {\r\n                    if (event.data.message.command === 'tabs') {\r\n                        this.tabs = event.data.message.tabs;\r\n\r\n                        for (let c of this.onTabsCallbacks) {\r\n                            c(this.tabs);\r\n                        }\r\n\r\n                        return;\r\n                    }\r\n\r\n                    if (event.data.message.command === 'version') {\r\n                        this.versionResolve!(event.data.message.version);\r\n                        return;\r\n                    }\r\n\r\n                    for (let c of this.onMessageCallbacks) {\r\n                        c({\r\n                            data: event.data.message,\r\n                            tabId: event.data.tabId,\r\n                            src: event.data.src,\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        if (heartbeat) {\r\n            this._sendHeartbeat();\r\n            setInterval(() => this._sendHeartbeat(), 1000);\r\n        }\r\n    }\r\n\r\n    _sendHeartbeat() {\r\n        window.postMessage(\r\n            {\r\n                sender: 'asbplayerv2',\r\n                message: {\r\n                    command: 'heartbeat',\r\n                    id: this.id,\r\n                    receivedTabs: this.tabs,\r\n                },\r\n            },\r\n            '*'\r\n        );\r\n    }\r\n\r\n    async installedVersion(): Promise<string> {\r\n        return await this.versionPromise;\r\n    }\r\n\r\n    sendMessage(message: Message, tabId: number, src: string) {\r\n        const command: AsbPlayerToVideoCommandV2<Message> = { sender: 'asbplayerv2', message: message, tabId: tabId, src: src };\r\n        window.postMessage(command, '*');\r\n    }\r\n\r\n    publishMessage(message: Message) {\r\n        for (const tab of this.tabs) {\r\n            const command: AsbPlayerToVideoCommandV2<Message> = { sender: 'asbplayerv2', message: message, tabId: tab.id, src: tab.src };\r\n            window.postMessage(command, '*');\r\n        }\r\n    }\r\n\r\n    subscribeTabs(callback: (tabs: VideoTabModel[]) => void) {\r\n        this.onTabsCallbacks.push(callback);\r\n    }\r\n\r\n    unsubscribeTabs(callback: (tabs: VideoTabModel[]) => void) {\r\n        this._remove(callback, this.onTabsCallbacks);\r\n    }\r\n\r\n    subscribe(callback: (message: ExtensionMessage) => void) {\r\n        this.onMessageCallbacks.push(callback);\r\n    }\r\n\r\n    unsubscribe(callback: (message: ExtensionMessage) => void) {\r\n        this._remove(callback, this.onMessageCallbacks);\r\n    }\r\n\r\n    _remove(callback: Function, callbacks: Function[]) {\r\n        for (let i = callbacks.length - 1; i >= 0; --i) {\r\n            if (callback === callbacks[i]) {\r\n                callbacks.splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { Rgb } from \"@project/common\";\r\n\r\nexport function arrayEquals(a: any[], b: any[], equals = (a: any, b: any) => a === b) {\r\n    if (a.length !== b.length) {\r\n        return false;\r\n    }\r\n\r\n    for (let i = 0; i < a.length; ++i) {\r\n        if (!equals(a[i], b[i])) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport function keysAreEqual(a: any, b: any) {\r\n    for (let key in a) {\r\n        if (!(key in b)) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    for (let key in b) {\r\n        if (!(key in a)) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n// https://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb\r\nfunction hexToRgb(hex: string): Rgb {\r\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)!;\r\n    return {\r\n        r: parseInt(result[1], 16),\r\n        g: parseInt(result[2], 16),\r\n        b: parseInt(result[3], 16),\r\n    };\r\n}\r\n\r\ninterface SubtitleStyle {\r\n    subtitleColor: string;\r\n    subtitleSize: number;\r\n    subtitleOutlineThickness: number;\r\n    subtitleOutlineColor: string;\r\n    subtitleBackgroundOpacity: number;\r\n    subtitleBackgroundColor: string;\r\n    subtitleFontFamily: string;\r\n}\r\n\r\nexport function computeStyles({\r\n    subtitleColor,\r\n    subtitleSize,\r\n    subtitleOutlineThickness,\r\n    subtitleOutlineColor,\r\n    subtitleBackgroundOpacity,\r\n    subtitleBackgroundColor,\r\n    subtitleFontFamily,\r\n}: SubtitleStyle) {\r\n    const styles: any = {\r\n        color: subtitleColor,\r\n        fontSize: Number(subtitleSize),\r\n    };\r\n\r\n    if (subtitleOutlineThickness > 0) {\r\n        const thickness = subtitleOutlineThickness;\r\n        const color = subtitleOutlineColor;\r\n        styles[\r\n            'textShadow'\r\n        ] = `0 0 ${thickness}px ${color}, 0 0 ${thickness}px ${color}, 0 0 ${thickness}px ${color}, 0 0 ${thickness}px ${color}`;\r\n    }\r\n\r\n    if (subtitleBackgroundOpacity > 0) {\r\n        const opacity = subtitleBackgroundOpacity;\r\n        const color = subtitleBackgroundColor;\r\n        const { r, g, b } = hexToRgb(color);\r\n        styles['backgroundColor'] = `rgba(${r}, ${g}, ${b}, ${opacity})`;\r\n    }\r\n\r\n    if (subtitleFontFamily && subtitleFontFamily.length > 0) {\r\n        styles['fontFamily'] = subtitleFontFamily;\r\n    }\r\n\r\n    return styles;\r\n}\r\n\r\nexport function timeDurationDisplay(\r\n    milliseconds: number,\r\n    totalMilliseconds: number,\r\n    includeMilliseconds = true\r\n): string {\r\n    if (milliseconds < 0) {\r\n        return timeDurationDisplay(0, totalMilliseconds);\r\n    }\r\n\r\n    milliseconds = Math.round(milliseconds);\r\n    const ms = milliseconds % 1000;\r\n    milliseconds = (milliseconds - ms) / 1000;\r\n    const secs = milliseconds % 60;\r\n    milliseconds = (milliseconds - secs) / 60;\r\n    const mins = milliseconds % 60;\r\n\r\n    if (totalMilliseconds >= 3600000) {\r\n        const hrs = (milliseconds - mins) / 60;\r\n\r\n        if (includeMilliseconds) {\r\n            return pad(hrs) + ':' + pad(mins) + ':' + pad(secs) + '.' + padEnd(ms);\r\n        }\r\n\r\n        return pad(hrs) + ':' + pad(mins) + ':' + pad(secs);\r\n    }\r\n\r\n    if (includeMilliseconds) {\r\n        return pad(mins) + ':' + pad(secs) + '.' + padEnd(ms);\r\n    }\r\n\r\n    return pad(mins) + ':' + pad(secs);\r\n}\r\n\r\nfunction pad(n: number) {\r\n    return String(n).padStart(2, '0');\r\n}\r\n\r\nfunction padEnd(n: number) {\r\n    return String(n).padEnd(3, '0');\r\n}\r\n","import React, { useCallback, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { timeDurationDisplay } from '../services/Util';\r\nimport { Theme } from '@material-ui/core';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\nimport Popover from '@material-ui/core/Popover';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport StarIcon from '@material-ui/icons/Star';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { AudioModel, ImageModel, SubtitleModel } from '@project/common';\r\n\r\nexport interface CopyHistoryItem extends SubtitleModel {\r\n    name: string;\r\n    id: string;\r\n    timestamp: number;\r\n    surroundingSubtitles: SubtitleModel[];\r\n    audioFile?: File;\r\n    audioTrack?: string;\r\n    videoFile?: File;\r\n    subtitleFile?: File;\r\n    audio?: AudioModel;\r\n    image?: ImageModel;\r\n    url?: string;\r\n}\r\n\r\ninterface CopyHistoryProps {\r\n    open: boolean;\r\n    drawerWidth: number;\r\n    items: CopyHistoryItem[];\r\n    onClose: () => void;\r\n    onDelete: (item: CopyHistoryItem) => void;\r\n    onAnki: (item: CopyHistoryItem) => void;\r\n    onSelect: (item: CopyHistoryItem) => void;\r\n    onClipAudio: (item: CopyHistoryItem) => void;\r\n    onDownloadImage: (item: CopyHistoryItem) => void;\r\n}\r\n\r\nconst useStyles = makeStyles<Theme, CopyHistoryProps, string>((theme) => ({\r\n    drawer: {\r\n        width: ({ drawerWidth }) => drawerWidth,\r\n        flexShrink: 0,\r\n    },\r\n    drawerPaper: {\r\n        width: ({ drawerWidth }) => drawerWidth,\r\n    },\r\n    drawerHeader: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        position: 'static',\r\n        padding: theme.spacing(0, 1),\r\n        // necessary for content to be below app bar\r\n        ...theme.mixins.toolbar,\r\n        justifyContent: 'flex-start',\r\n    },\r\n    listContainer: {\r\n        position: 'relative',\r\n        height: '100%',\r\n        overflowY: 'auto',\r\n        overflowX: 'hidden',\r\n    },\r\n    listItem: {\r\n        '&:hover': {\r\n            backgroundColor: theme.palette.action.hover,\r\n        },\r\n    },\r\n    listItemGutters: {\r\n        paddingLeft: 5,\r\n        paddingRight: 5,\r\n    },\r\n    listItemIconRoot: {\r\n        minWidth: 20,\r\n    },\r\n    emptyState: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        flexDirection: 'column',\r\n        textAlign: 'center',\r\n        height: '100%',\r\n        padding: 15,\r\n    },\r\n    text: {\r\n        flexGrow: 1,\r\n    },\r\n    emptyText: {\r\n        flexGrow: 1,\r\n        color: theme.palette.text.secondary,\r\n    },\r\n    timestamp: {\r\n        paddingRight: 15,\r\n        paddingLeft: 15,\r\n        color: theme.palette.text.secondary,\r\n    },\r\n}));\r\n\r\ninterface MenuProps {\r\n    open: boolean;\r\n    item?: CopyHistoryItem;\r\n    anchorEl?: Element;\r\n    onClose: () => void;\r\n    onSelect: (item: CopyHistoryItem) => void;\r\n    onClipAudio: (item: CopyHistoryItem) => void;\r\n    onDownloadImage: (item: CopyHistoryItem) => void;\r\n    onDelete: (item: CopyHistoryItem) => void;\r\n}\r\n\r\nfunction Menu({ open, anchorEl, onClose, onSelect, onClipAudio, onDownloadImage, onDelete, item }: MenuProps) {\r\n    const handleCopy = useCallback(() => {\r\n        navigator.clipboard.writeText(item!.text);\r\n        onClose();\r\n    }, [item, onClose]);\r\n\r\n    const handleJumpTo = useCallback(() => {\r\n        onSelect(item!);\r\n        onClose();\r\n    }, [item, onSelect, onClose]);\r\n\r\n    const handleClipAudio = useCallback(() => {\r\n        onClipAudio(item!);\r\n        onClose();\r\n    }, [item, onClipAudio, onClose]);\r\n\r\n    const handleDownloadImage = useCallback(() => {\r\n        onDownloadImage(item!);\r\n        onClose();\r\n    }, [item, onDownloadImage, onClose]);\r\n\r\n    const handleDelete = useCallback(() => {\r\n        onDelete(item!);\r\n        onClose();\r\n    }, [item, onDelete, onClose]);\r\n\r\n    if (!item) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <Popover\r\n            disableEnforceFocus={true}\r\n            open={open}\r\n            anchorEl={anchorEl}\r\n            onClose={onClose}\r\n            anchorOrigin={{\r\n                vertical: 'center',\r\n                horizontal: 'center',\r\n            }}\r\n            transformOrigin={{\r\n                vertical: 'top',\r\n                horizontal: 'right',\r\n            }}\r\n        >\r\n            <List>\r\n                <ListItem button onClick={handleCopy}>\r\n                    <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Copy\" />\r\n                </ListItem>\r\n                <ListItem button onClick={handleJumpTo}>\r\n                    <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Jump To\" />\r\n                </ListItem>\r\n                {(item.videoFile || item.audioFile || item.audio) && (\r\n                    <ListItem button onClick={handleClipAudio}>\r\n                        <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Download Audio\" />\r\n                    </ListItem>\r\n                )}\r\n                {(item.videoFile || item.image) && (\r\n                    <ListItem button onClick={handleDownloadImage}>\r\n                        <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Download Image\" />\r\n                    </ListItem>\r\n                )}\r\n                <ListItem button onClick={handleDelete}>\r\n                    <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Delete\" />\r\n                </ListItem>\r\n            </List>\r\n        </Popover>\r\n    );\r\n}\r\n\r\nexport default function CopyHistory(props: CopyHistoryProps) {\r\n    const onDelete = props.onDelete;\r\n    const classes = useStyles(props);\r\n    const scrollToBottomRefCallback = useCallback((element: HTMLElement | null) => {\r\n        if (element) {\r\n            element.scrollIntoView();\r\n        }\r\n    }, []);\r\n    const [menuItem, setMenuItem] = useState<CopyHistoryItem>();\r\n    const [menuOpen, setMenuOpen] = useState<boolean>(false);\r\n    const [menuAnchorEl, setMenuAnchorEl] = useState<Element>();\r\n\r\n    const handleMenu = useCallback((e: React.MouseEvent, item: CopyHistoryItem) => {\r\n        setMenuItem(item);\r\n        setMenuOpen(true);\r\n        setMenuAnchorEl(e.currentTarget);\r\n    }, []);\r\n\r\n    const handleMenuClosed = useCallback(() => {\r\n        setMenuItem(undefined);\r\n        setMenuOpen(false);\r\n        setMenuAnchorEl(undefined);\r\n    }, []);\r\n\r\n    const handleDelete = useCallback(\r\n        (item: CopyHistoryItem) => {\r\n            onDelete(item);\r\n        },\r\n        [onDelete]\r\n    );\r\n\r\n    let content;\r\n\r\n    if (props.items.length > 0) {\r\n        const items = [];\r\n        let lastSeenItemName = null;\r\n        let i = 0;\r\n        const itemNameCounters: { [name: string]: number } = {};\r\n\r\n        for (const item of props.items) {\r\n            if (lastSeenItemName === null || lastSeenItemName !== item.name) {\r\n                if (item.name in itemNameCounters) {\r\n                    itemNameCounters[item.name]++;\r\n                } else {\r\n                    itemNameCounters[item.name] = 0;\r\n                }\r\n\r\n                lastSeenItemName = item.name;\r\n                items.push(\r\n                    <ListSubheader disableSticky={true} key={item.name + '-' + itemNameCounters[item.name]}>\r\n                        {item.name}\r\n                    </ListSubheader>\r\n                );\r\n            }\r\n\r\n            const ref = i === props.items.length - 1 ? scrollToBottomRefCallback : null;\r\n\r\n            items.push(\r\n                <ListItem\r\n                    ref={ref}\r\n                    key={item.id}\r\n                    className={classes.listItem}\r\n                    classes={{ gutters: classes.listItemGutters }}\r\n                >\r\n                    <ListItemIcon classes={{ root: classes.listItemIconRoot }}>\r\n                        <Tooltip title=\"Export to Anki\">\r\n                            <IconButton onClick={() => props.onAnki(item)}>\r\n                                <StarIcon fontSize=\"small\" />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </ListItemIcon>\r\n                    <ListItemIcon classes={{ root: classes.listItemIconRoot }}>\r\n                        <IconButton onClick={(e) => handleMenu(e, item)}>\r\n                            <MoreVertIcon fontSize=\"small\" />\r\n                        </IconButton>\r\n                    </ListItemIcon>\r\n                    <ListItemText\r\n                        primary={\r\n                            <Grid wrap=\"nowrap\" container>\r\n                                <Grid item className={item.text === '' ? classes.emptyText : classes.text}>\r\n                                    {item.text === '' ? 'No text' : item.text}\r\n                                </Grid>\r\n                                <Grid item className={classes.timestamp}>\r\n                                    {timeDurationDisplay(item.start, item.start, false)}\r\n                                </Grid>\r\n                            </Grid>\r\n                        }\r\n                    />\r\n                </ListItem>\r\n            );\r\n\r\n            ++i;\r\n        }\r\n\r\n        content = (\r\n            <div className={classes.listContainer}>\r\n                <List>{items}</List>\r\n            </div>\r\n        );\r\n    } else {\r\n        content = (\r\n            <div className={classes.emptyState}>\r\n                <Typography variant=\"h6\">Copy history is empty.</Typography>\r\n                <Typography variant=\"caption\">See the help for keyboard shortcuts.</Typography>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Drawer\r\n                variant=\"persistent\"\r\n                anchor=\"right\"\r\n                open={props.open}\r\n                className={classes.drawer}\r\n                classes={{\r\n                    paper: classes.drawerPaper,\r\n                }}\r\n            >\r\n                <div className={classes.drawerHeader}>\r\n                    <IconButton onClick={props.onClose}>\r\n                        <ChevronRightIcon />\r\n                    </IconButton>\r\n                </div>\r\n                <Divider />\r\n                {content}\r\n            </Drawer>\r\n            <Menu\r\n                open={props.open && menuOpen}\r\n                anchorEl={menuAnchorEl}\r\n                item={menuItem}\r\n                onClose={handleMenuClosed}\r\n                onSelect={props.onSelect}\r\n                onClipAudio={props.onClipAudio}\r\n                onDownloadImage={props.onDownloadImage}\r\n                onDelete={handleDelete}\r\n            />\r\n        </React.Fragment>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport gt from 'semver/functions/gt';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport Link from '@material-ui/core/Link';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ChromeExtension from '../services/ChromeExtension';\r\nimport { Theme } from '@material-ui/core/styles';\r\n\r\ninterface StylesProps {\r\n    appBarHidden: boolean;\r\n}\r\n\r\nconst useStyles = makeStyles<Theme, StylesProps>((theme) => ({\r\n    background: ({ appBarHidden }) => ({\r\n        position: 'absolute',\r\n        height: appBarHidden ? '100vh' : 'calc(100vh - 64px)',\r\n        width: '100%',\r\n        zIndex: 100,\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        padding: 15,\r\n        textAlign: 'center',\r\n    }),\r\n    browseLink: {\r\n        cursor: 'pointer',\r\n    },\r\n}));\r\n\r\ninterface Props {\r\n    extension: ChromeExtension;\r\n    latestExtensionVersion: string;\r\n    extensionUrl: string;\r\n    loading: boolean;\r\n    dragging: boolean;\r\n    appBarHidden: boolean;\r\n    onFileSelector: React.MouseEventHandler<HTMLAnchorElement> &\r\n        React.MouseEventHandler<HTMLSpanElement> &\r\n        React.MouseEventHandler<HTMLLabelElement>;\r\n}\r\n\r\nexport default function LandingPage({\r\n    extension,\r\n    latestExtensionVersion,\r\n    extensionUrl,\r\n    loading,\r\n    dragging,\r\n    appBarHidden,\r\n    onFileSelector,\r\n}: Props) {\r\n    const classes = useStyles({ appBarHidden });\r\n    const [installedExtensionVersion, setInstalledExtensionVersion] = useState<string>();\r\n\r\n    useEffect(() => {\r\n        async function fetchInstalledExtensionVersion() {\r\n            setInstalledExtensionVersion(await extension.installedVersion());\r\n        }\r\n\r\n        fetchInstalledExtensionVersion();\r\n    }, [extension]);\r\n\r\n    const extensionUpdateAvailable = installedExtensionVersion && gt(latestExtensionVersion, installedExtensionVersion);\r\n    const extensionNotInstalled = !installedExtensionVersion;\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Fade in={!loading && !dragging} timeout={500}>\r\n                <div className={classes.background}>\r\n                    <Typography variant=\"h6\">\r\n                        Drag and drop subtitle and media files, or{' '}\r\n                        <Link\r\n                            target=\"#\"\r\n                            className={classes.browseLink}\r\n                            onClick={onFileSelector}\r\n                            color=\"secondary\"\r\n                            component=\"label\"\r\n                        >\r\n                            browse\r\n                        </Link>\r\n                        .\r\n                        <br />\r\n                        {extensionNotInstalled && (\r\n                            <span>\r\n                                Install the{' '}\r\n                                <Link color=\"secondary\" target=\"_blank\" rel=\"noreferrer\" href={extensionUrl}>\r\n                                    Chrome extension\r\n                                </Link>{' '}\r\n                                to sync subtitles with streaming video.\r\n                            </span>\r\n                        )}\r\n                        {extensionUpdateAvailable && (\r\n                            <span>\r\n                                An extension{' '}\r\n                                <Link color=\"secondary\" target=\"_blank\" rel=\"noreferrer\" href={extensionUrl}>\r\n                                    update\r\n                                </Link>{' '}\r\n                                is available.\r\n                            </span>\r\n                        )}\r\n                    </Typography>\r\n                </div>\r\n            </Fade>\r\n        </React.Fragment>\r\n    );\r\n}\r\n","import { Message } from \"@project/common\";\r\nimport { VideoProtocol, VideoProtocolMessage } from \"./VideoProtocol\";\r\n\r\nexport default class BroadcastChannelVideoProtocol implements VideoProtocol {\r\n    private channel?: BroadcastChannel;\r\n\r\n    onMessage?: (message: VideoProtocolMessage) => void;\r\n    \r\n    constructor(channelId: string) {\r\n        this.channel = new BroadcastChannel(channelId);\r\n        const that = this;\r\n        this.channel.onmessage = (event) => {\r\n            that.onMessage?.(event as VideoProtocolMessage);\r\n        };\r\n    }\r\n\r\n    postMessage(message: Message) {\r\n        this.channel?.postMessage(message);\r\n    }\r\n\r\n    close() {\r\n        this.channel?.close();\r\n        this.channel = undefined;\r\n    }\r\n}\r\n","import { Message } from '@project/common';\r\nimport ChromeExtension, { ExtensionMessage } from './ChromeExtension';\r\nimport { VideoProtocol, VideoProtocolMessage } from './VideoProtocol';\r\n\r\nexport default class ChromeTabVideoProtocol implements VideoProtocol {\r\n    private readonly tabId: number;\r\n    private readonly src: string;\r\n    private readonly extension: ChromeExtension;\r\n    private readonly listener: (message: ExtensionMessage) => void;\r\n\r\n    onMessage?: (message: VideoProtocolMessage) => void;\r\n\r\n    constructor(tabId: number, src: string, extension: ChromeExtension) {\r\n        this.tabId = tabId;\r\n        this.src = src;\r\n        this.listener = (message) => {\r\n            if (message.tabId === tabId && (!message.src || message.src === src)) {\r\n                this.onMessage?.({\r\n                    data: message.data,\r\n                });\r\n            }\r\n        };\r\n\r\n        extension.subscribe(this.listener);\r\n        this.extension = extension;\r\n    }\r\n\r\n    postMessage(message: Message) {\r\n        this.extension.sendMessage(message, this.tabId, this.src);\r\n    }\r\n\r\n    close() {\r\n        this.extension.unsubscribe(this.listener);\r\n    }\r\n}\r\n","export default class Clock {\r\n    private accumulated: number;\r\n    private started: boolean;\r\n    private startTime?: number;\r\n\r\n    constructor() {\r\n        this.accumulated = 0;\r\n        this.started = false;\r\n    }\r\n\r\n    time(max: number) {\r\n        if (this.started) {\r\n            return Math.min(max, this.accumulated + Date.now() - this.startTime!);\r\n        }\r\n\r\n        return Math.min(max, this.accumulated);\r\n    }\r\n\r\n    stop() {\r\n        if (!this.started) {\r\n            return;\r\n        }\r\n\r\n        this.started = false;\r\n        this.accumulated += Date.now() - this.startTime!;\r\n    }\r\n\r\n    start() {\r\n        this.startTime = Date.now();\r\n        this.started = true;\r\n    }\r\n\r\n    setTime(time: number) {\r\n        if (this.started) {\r\n            this.startTime = Date.now();\r\n            this.accumulated = time;\r\n        } else {\r\n            this.accumulated = time;\r\n        }\r\n    }\r\n\r\n    progress(max: number) {\r\n        return max === 0 ? 0 : Math.min(1, this.time(max) / max);\r\n    }\r\n}\r\n","import React, { useCallback, useEffect, useState, useRef, MutableRefObject } from 'react';\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\r\nimport AudiotrackIcon from '@material-ui/icons/Audiotrack';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Input from '@material-ui/core/Input';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport OpenInNewIcon from '@material-ui/icons/OpenInNew';\r\nimport Popover from '@material-ui/core/Popover';\r\nimport FullscreenIcon from '@material-ui/icons/Fullscreen';\r\nimport AspectRatioIcon from '@material-ui/icons/AspectRatio';\r\nimport FullscreenExitIcon from '@material-ui/icons/FullscreenExit';\r\nimport PauseIcon from '@material-ui/icons/Pause';\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\r\nimport QueueMusicIcon from '@material-ui/icons/QueueMusic';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport SpeedIcon from '@material-ui/icons/Speed';\r\nimport SubtitlesIcon from '@material-ui/icons/Subtitles';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport VideocamIcon from '@material-ui/icons/Videocam';\r\nimport VolumeOffIcon from '@material-ui/icons/VolumeOff';\r\nimport VolumeUpIcon from '@material-ui/icons/VolumeUp';\r\nimport { AsbplayerSettingsProvider, AudioTrackModel, VideoTabModel } from '@project/common';\r\nimport Clock from '../services/Clock';\r\n\r\nconst useControlStyles = makeStyles((theme) => ({\r\n    container: {\r\n        position: 'absolute',\r\n        left: '50%',\r\n        width: '50%',\r\n        bottom: 0,\r\n        pointerEvents: 'none',\r\n        color: '#fff',\r\n    },\r\n    buttonContainer: {\r\n        flexDirection: 'row',\r\n    },\r\n    timeDisplay: {\r\n        color: '#fff',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        height: '100%',\r\n        cursor: 'default',\r\n        fontSize: 20,\r\n        marginLeft: 10,\r\n    },\r\n    offsetInput: {\r\n        height: '100%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        fontSize: 20,\r\n        marginLeft: 10,\r\n        width: 100,\r\n        color: '#fff',\r\n        pointerEvents: 'auto',\r\n    },\r\n    volumeInputContainerShown: {\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.short,\r\n        }),\r\n        marginRight: 5,\r\n        pointerEvents: 'auto',\r\n    },\r\n    volumeInputContainerHidden: {\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.short,\r\n        }),\r\n        marginRight: 0,\r\n        pointerEvents: 'auto',\r\n    },\r\n    volumeInputHidden: {\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.short,\r\n        }),\r\n        width: 0,\r\n        pointerEvents: 'auto',\r\n    },\r\n    volumeInputShown: {\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.short,\r\n        }),\r\n        width: 100,\r\n        pointerEvents: 'auto',\r\n    },\r\n    volumeInputThumbHidden: {\r\n        transition: theme.transitions.create('visibility', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.short,\r\n        }),\r\n        opacity: 0,\r\n        pointerEvents: 'auto',\r\n    },\r\n    volumeInputThumbShown: {\r\n        transition: theme.transitions.create('visibility', {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.short,\r\n        }),\r\n        opacity: 1,\r\n        pointerEvents: 'auto',\r\n    },\r\n    subContainer: {\r\n        background: 'linear-gradient(to bottom, rgba(0, 0, 0, 0), rgba(0, 0, 0, .4) 40%, rgba(0, 0, 0, 0.7))',\r\n        position: 'relative',\r\n        left: '-100%',\r\n        width: '200%',\r\n        zIndex: 10,\r\n    },\r\n    button: {\r\n        pointerEvents: 'auto',\r\n    },\r\n    inactiveButton: {\r\n        color: 'rgba(72, 72, 72, 0.7)',\r\n        pointerEvents: 'auto',\r\n    },\r\n    inactiveTopButton: {\r\n        color: 'rgba(255, 255, 255, 0.5)',\r\n        pointerEvents: 'auto',\r\n    },\r\n    progress: {\r\n        margin: 5,\r\n    },\r\n    topButton: {\r\n        pointerEvents: 'auto',\r\n        color: '#fff',\r\n    },\r\n    gridContainer: {\r\n        pointerEvents: 'auto',\r\n        padding: 2,\r\n    },\r\n}));\r\n\r\nconst useProgressBarStyles = makeStyles((theme) => ({\r\n    root: {\r\n        height: 10,\r\n    },\r\n    container: {\r\n        height: 10,\r\n        pointerEvents: 'auto',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        flexDirection: 'column',\r\n        position: 'absolute',\r\n        width: 'calc(100% - 20px)',\r\n        marginLeft: 10,\r\n    },\r\n    mouseEventListener: {\r\n        zIndex: 1,\r\n        height: 10,\r\n        cursor: 'pointer',\r\n        pointerEvents: 'auto',\r\n        position: 'absolute',\r\n        width: '100%',\r\n    },\r\n    fillContainer: {\r\n        background: 'rgba(30,30,30,0.7)',\r\n        width: '100%',\r\n        height: 5,\r\n        position: 'relative',\r\n    },\r\n    fillContainerThick: {\r\n        transition: theme.transitions.create('height', {\r\n            easing: theme.transitions.easing.easeInOut,\r\n            duration: 50,\r\n        }),\r\n        height: 8,\r\n    },\r\n    fill: {\r\n        background: 'linear-gradient(to left, #ff1f62, #49007a)',\r\n        height: '100%',\r\n    },\r\n    handleContainer: {\r\n        position: 'absolute',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        flexDirection: 'column',\r\n        height: '100%',\r\n        bottom: 0,\r\n    },\r\n    handle: {\r\n        borderRadius: '50%',\r\n        width: 16,\r\n        height: 16,\r\n        opacity: 0,\r\n        left: -8,\r\n        background: 'white',\r\n        position: 'absolute',\r\n    },\r\n    handleOn: {\r\n        opacity: 1,\r\n        transition: theme.transitions.create('opacity', {\r\n            easing: theme.transitions.easing.easeInOut,\r\n            duration: theme.transitions.duration.shortest,\r\n        }),\r\n    },\r\n}));\r\n\r\nconst VolumeSlider = withStyles((theme) => ({\r\n    root: {\r\n        color: 'white',\r\n        verticalAlign: 'middle',\r\n    },\r\n    thumb: {\r\n        backgroundColor: 'white',\r\n        color: 'white',\r\n        '&:focus': {\r\n            boxShadow: 'inherit',\r\n        },\r\n        '&:hover, &$active': {\r\n            boxShadow: '0px 0px 0px 8px rgba(255, 255, 255, 0.1)',\r\n        },\r\n    },\r\n    active: {\r\n        color: 'white',\r\n    },\r\n}))(Slider);\r\n\r\nfunction displayTime(milliseconds: number) {\r\n    const seconds = Math.floor(milliseconds / 1000);\r\n    const minutes = Math.floor(seconds / 60);\r\n    const secondsInMinute = seconds % 60;\r\n    return String(minutes) + ':' + String(secondsInMinute).padStart(2, '0');\r\n}\r\n\r\nfunction elementWidth(element: HTMLElement) {\r\n    const rect = element.getBoundingClientRect();\r\n    return rect.right - rect.left;\r\n}\r\n\r\ninterface ProgressBarProps {\r\n    onSeek: (progress: number) => void;\r\n    value: number;\r\n}\r\n\r\nfunction ProgressBar({ onSeek, value }: ProgressBarProps) {\r\n    const classes = useProgressBarStyles();\r\n    const [mouseOver, setMouseOver] = useState(false);\r\n    const containerRef = useRef(null);\r\n\r\n    const handleClick = useCallback(\r\n        (e: React.MouseEvent<HTMLDivElement>) => {\r\n            const rect = e.currentTarget.getBoundingClientRect();\r\n            // Account for margins by subtracting 10 from left/right sides\r\n            const width = rect.right - rect.left - 20;\r\n            const progress = Math.min(1, Math.max(0, (e.pageX - rect.left - 10) / width));\r\n            onSeek(progress);\r\n        },\r\n        [onSeek]\r\n    );\r\n\r\n    const handleMouseOver = useCallback(() => setMouseOver(true), []);\r\n    const handleMouseOut = useCallback(() => setMouseOver(false), []);\r\n    const progressWidth = containerRef.current ? (elementWidth(containerRef.current) * value) / 100 : 0;\r\n    const fillStyle = { width: progressWidth };\r\n    const handleStyle = { marginLeft: progressWidth };\r\n    const fillContainerClassName = mouseOver\r\n        ? classes.fillContainer + ' ' + classes.fillContainerThick\r\n        : classes.fillContainer;\r\n    const handleClassName = mouseOver ? classes.handle + ' ' + classes.handleOn : classes.handle;\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <div ref={containerRef} className={classes.container}>\r\n                <div className={fillContainerClassName}>\r\n                    <div className={classes.fill} style={fillStyle}></div>\r\n                    <div className={classes.handleContainer}>\r\n                        <div className={handleClassName} style={handleStyle} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div\r\n                className={classes.mouseEventListener}\r\n                onClick={handleClick}\r\n                onMouseOver={handleMouseOver}\r\n                onMouseOut={handleMouseOut}\r\n            ></div>\r\n        </div>\r\n    );\r\n}\r\n\r\ninterface AudioTrackSelectorProps {\r\n    open: boolean;\r\n    anchorEl?: Element;\r\n    audioTracks?: AudioTrackModel[];\r\n    selectedAudioTrack?: string;\r\n    onAudioTrackSelected: (id: string) => void;\r\n    onClose: () => void;\r\n}\r\n\r\nfunction AudioTrackSelector({\r\n    open,\r\n    anchorEl,\r\n    audioTracks,\r\n    selectedAudioTrack,\r\n    onAudioTrackSelected,\r\n    onClose,\r\n}: AudioTrackSelectorProps) {\r\n    if (!audioTracks || audioTracks.length === 0) {\r\n        return null;\r\n    }\r\n\r\n    const list = audioTracks.map((t) => {\r\n        return (\r\n            <ListItem\r\n                key={t.id}\r\n                selected={t.id === selectedAudioTrack}\r\n                button\r\n                onClick={() => onAudioTrackSelected(t.id)}\r\n            >\r\n                {t.language} {t.label}\r\n            </ListItem>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <Popover\r\n                disableEnforceFocus={true}\r\n                open={open}\r\n                anchorEl={anchorEl}\r\n                onClose={onClose}\r\n                anchorOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'center',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'center',\r\n                }}\r\n            >\r\n                <List>{list}</List>\r\n            </Popover>\r\n        </div>\r\n    );\r\n}\r\n\r\ninterface TabSelectorProps {\r\n    open: boolean;\r\n    anchorEl?: Element;\r\n    tabs?: VideoTabModel[];\r\n    selectedTab?: VideoTabModel;\r\n    onTabSelected: (tab: VideoTabModel) => void;\r\n    onClose: () => void;\r\n}\r\n\r\nfunction TabSelector({ open, anchorEl, onClose, tabs, selectedTab, onTabSelected }: TabSelectorProps) {\r\n    if (!tabs || tabs.length === 0) {\r\n        return null;\r\n    }\r\n\r\n    const list = tabs.map((t) => {\r\n        return (\r\n            <ListItem\r\n                key={t.id}\r\n                selected={selectedTab && t.id === selectedTab.id && t.src === selectedTab.src}\r\n                button\r\n                onClick={() => onTabSelected(t)}\r\n            >\r\n                {t.id} {t.title} {t.src}\r\n            </ListItem>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <Popover\r\n                disableEnforceFocus={true}\r\n                open={open}\r\n                anchorEl={anchorEl}\r\n                onClose={onClose}\r\n                anchorOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'center',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'center',\r\n                }}\r\n            >\r\n                <List>{list}</List>\r\n            </Popover>\r\n        </div>\r\n    );\r\n}\r\n\r\ninterface MediaUnloaderProps {\r\n    open: boolean;\r\n    anchorEl?: Element;\r\n    file?: string;\r\n    onUnload: () => void;\r\n    onClose: () => void;\r\n}\r\n\r\nfunction MediaUnloader({ open, anchorEl, onUnload, onClose, file }: MediaUnloaderProps) {\r\n    return (\r\n        <div>\r\n            <Popover\r\n                disableEnforceFocus={true}\r\n                open={open}\r\n                anchorEl={anchorEl}\r\n                onClose={onClose}\r\n                anchorOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'center',\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'center',\r\n                }}\r\n            >\r\n                <List>\r\n                    <ListItem button onClick={(e) => onUnload()}>\r\n                        Unload {file}\r\n                    </ListItem>\r\n                </List>\r\n            </Popover>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport interface Point {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\ninterface ControlsProps {\r\n    clock: Clock;\r\n    playing: boolean;\r\n    length: number;\r\n    offsetEnabled?: boolean;\r\n    displayLength?: number;\r\n    offset: number;\r\n    onAudioTrackSelected: (id: string) => void;\r\n    onSeek: (progress: number) => void;\r\n    mousePositionRef: MutableRefObject<Point>;\r\n    onShow?: (show: boolean) => void;\r\n    onPause: () => void;\r\n    onPlay: () => void;\r\n    onTabSelected?: (tab: VideoTabModel) => void;\r\n    onUnloadAudio?: () => void;\r\n    onUnloadVideo?: () => void;\r\n    onOffsetChange: (offset: number) => void;\r\n    onVolumeChange: (volume: number) => void;\r\n    disableKeyEvents?: boolean;\r\n    settingsProvider: AsbplayerSettingsProvider;\r\n    closeEnabled?: boolean;\r\n    onClose?: () => void;\r\n    volumeEnabled?: boolean;\r\n    condensedModeEnabled?: boolean;\r\n    condensedModeToggleEnabled?: boolean;\r\n    onCondensedModeToggle?: () => void;\r\n    subtitlesEnabled?: boolean;\r\n    subtitlesToggle?: boolean;\r\n    onSubtitlesToggle?: () => void;\r\n    videoFile?: string;\r\n    audioFile?: string;\r\n    audioTracks?: AudioTrackModel[];\r\n    selectedAudioTrack?: string;\r\n    tabs?: VideoTabModel[];\r\n    selectedTab?: VideoTabModel;\r\n    popOutEnabled?: boolean;\r\n    popOut?: boolean;\r\n    onPopOutToggle?: () => void;\r\n    fullscreenEnabled?: boolean;\r\n    fullscreen?: boolean;\r\n    onFullscreenToggle?: () => void;\r\n    hideSubtitlePlayerToggleEnabled?: boolean;\r\n    subtitlePlayerHidden?: boolean;\r\n    onHideSubtitlePlayerToggle?: () => void;\r\n    showOnMouseMovement: boolean;\r\n    theaterModeToggleEnabled?: boolean;\r\n    theaterModeEnabled?: boolean;\r\n    onTheaterModeToggle?: () => void;\r\n}\r\n\r\nexport default function Controls({\r\n    clock,\r\n    playing,\r\n    length,\r\n    offsetEnabled,\r\n    displayLength,\r\n    offset,\r\n    onAudioTrackSelected,\r\n    onSeek,\r\n    mousePositionRef,\r\n    onShow,\r\n    onPause,\r\n    onPlay,\r\n    onTabSelected,\r\n    onUnloadAudio,\r\n    onUnloadVideo,\r\n    onOffsetChange,\r\n    onVolumeChange,\r\n    disableKeyEvents,\r\n    settingsProvider,\r\n    closeEnabled,\r\n    onClose,\r\n    volumeEnabled,\r\n    condensedModeEnabled,\r\n    condensedModeToggleEnabled,\r\n    onCondensedModeToggle,\r\n    subtitlesEnabled,\r\n    subtitlesToggle,\r\n    onSubtitlesToggle,\r\n    videoFile,\r\n    audioFile,\r\n    audioTracks,\r\n    selectedAudioTrack,\r\n    tabs,\r\n    selectedTab,\r\n    popOutEnabled,\r\n    popOut,\r\n    onPopOutToggle,\r\n    fullscreenEnabled,\r\n    fullscreen,\r\n    onFullscreenToggle,\r\n    hideSubtitlePlayerToggleEnabled,\r\n    subtitlePlayerHidden,\r\n    onHideSubtitlePlayerToggle,\r\n    showOnMouseMovement,\r\n    theaterModeToggleEnabled,\r\n    theaterModeEnabled,\r\n    onTheaterModeToggle\r\n}: ControlsProps) {\r\n    const classes = useControlStyles();\r\n    const [show, setShow] = useState<boolean>(true);\r\n    const [audioTrackSelectorOpen, setAudioTrackSelectorOpen] = useState<boolean>(false);\r\n    const [audioTrackSelectorAnchorEl, setAudioTrackSelectorAnchorEl] = useState<Element>();\r\n    const [tabSelectorOpen, setTabSelectorOpen] = useState<boolean>(false);\r\n    const [tabSelectorAnchorEl, setTabSelectorAnchorEl] = useState<Element>();\r\n    const [audioUnloaderOpen, setAudioUnloaderOpen] = useState<boolean>(false);\r\n    const [audioUnloaderAnchorEl, setAudioUnloaderAnchorEl] = useState<Element>();\r\n    const [videoUnloaderOpen, setVideoUnloaderOpen] = useState<boolean>(false);\r\n    const [videoUnloaderAnchorEl, setVideoUnloaderAnchorEl] = useState<Element>();\r\n    const [showVolumeBar, setShowVolumeBar] = useState<boolean>(false);\r\n    const [volume, setVolume] = useState<number>(100);\r\n    const [lastCommittedVolume, setLastCommittedVolume] = useState<number>(100);\r\n    const lastMousePositionRef = useRef<Point>({ x: 0, y: 0 });\r\n    const lastShowTimestampRef = useRef<number>(Date.now());\r\n    const lastOffsetInputChangeTimestampRef = useRef<number>(Date.now());\r\n    const lastShowRef = useRef<boolean>(true);\r\n    const forceShowRef = useRef<boolean>(false);\r\n    const offsetInputRef = useRef<HTMLInputElement>();\r\n    const containerRef = useRef<HTMLDivElement>(null);\r\n    const closeButtonRef = useRef<HTMLButtonElement>(null);\r\n    const [, updateState] = useState<any>();\r\n    const forceUpdate = useCallback(() => updateState({}), []);\r\n\r\n    const handleSeek = useCallback(\r\n        (progress: number) => {\r\n            onSeek(progress);\r\n        },\r\n        [onSeek]\r\n    );\r\n\r\n    function handleMouseOver() {\r\n        forceShowRef.current = true;\r\n    }\r\n\r\n    function handleMouseOut() {\r\n        forceShowRef.current = false;\r\n    }\r\n\r\n    useEffect(() => {\r\n        const savedVolume = Number(settingsProvider.volume);\r\n        setVolume(savedVolume);\r\n        onVolumeChange(savedVolume / 100);\r\n\r\n        if (savedVolume > 0) {\r\n            setLastCommittedVolume(savedVolume);\r\n        }\r\n    }, [settingsProvider, onVolumeChange]);\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            let currentShow: boolean;\r\n\r\n            if (showOnMouseMovement) {\r\n                currentShow =\r\n                    Date.now() - lastShowTimestampRef.current < 2000 ||\r\n                    Math.pow(mousePositionRef.current.x - lastMousePositionRef.current.x, 2) +\r\n                        Math.pow(mousePositionRef.current.y - lastMousePositionRef.current.y, 2) >\r\n                        100;\r\n            } else {\r\n                currentShow =\r\n                    ((containerRef.current && mousePositionRef.current.y > containerRef.current.offsetTop - 20) ||\r\n                        (closeButtonRef.current &&\r\n                            mousePositionRef.current.y < closeButtonRef.current.offsetHeight + 20)) ??\r\n                    false;\r\n            }\r\n\r\n            currentShow =\r\n                currentShow ||\r\n                forceShowRef.current ||\r\n                offsetInputRef.current === document.activeElement ||\r\n                Date.now() - lastOffsetInputChangeTimestampRef.current < 2000;\r\n\r\n            if (currentShow && !lastShowRef.current) {\r\n                lastShowTimestampRef.current = Date.now();\r\n                setShow(currentShow);\r\n            } else if (!currentShow && lastShowRef.current) {\r\n                setShow(currentShow);\r\n            }\r\n\r\n            lastShowRef.current = currentShow;\r\n            lastMousePositionRef.current.x = mousePositionRef.current.x;\r\n            lastMousePositionRef.current.y = mousePositionRef.current.y;\r\n        }, 100);\r\n        return () => clearInterval(interval);\r\n    }, [mousePositionRef, showOnMouseMovement]);\r\n\r\n    useEffect(() => onShow?.(show), [onShow, show]);\r\n\r\n    useEffect(() => {\r\n        if (disableKeyEvents) {\r\n            return;\r\n        }\r\n\r\n        function handleKey(event: KeyboardEvent) {\r\n            if (event.key === 'Enter') {\r\n                if (offsetInputRef.current === document.activeElement) {\r\n                    const offset = Number(offsetInputRef.current.value);\r\n\r\n                    if (Number.isNaN(offset)) {\r\n                        return;\r\n                    }\r\n\r\n                    onOffsetChange(offset * 1000);\r\n                    offsetInputRef.current.blur();\r\n                }\r\n            }\r\n        }\r\n\r\n        window.addEventListener('keydown', handleKey);\r\n\r\n        return () => {\r\n            window.removeEventListener('keydown', handleKey);\r\n        };\r\n    }, [onOffsetChange, disableKeyEvents]);\r\n\r\n    const handleOffsetInputClicked = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\r\n        const inputElement = e.target as HTMLInputElement;\r\n        inputElement.setSelectionRange(0, inputElement.value?.length || 0);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            forceUpdate();\r\n        }, 100);\r\n\r\n        return () => clearInterval(interval);\r\n    }, [forceUpdate]);\r\n\r\n    useEffect(() => {\r\n        if (offsetInputRef.current) {\r\n            if (offset === 0) {\r\n                offsetInputRef.current.value = '';\r\n            } else {\r\n                const offsetSeconds = offset / 1000;\r\n                const value = offsetSeconds >= 0 ? '+' + offsetSeconds.toFixed(2) : String(offsetSeconds.toFixed(2));\r\n                offsetInputRef.current.value = value;\r\n                lastOffsetInputChangeTimestampRef.current = Date.now();\r\n            }\r\n        }\r\n    }, [offset]);\r\n\r\n    const handleAudioTrackSelectorClosed = useCallback(() => {\r\n        setAudioTrackSelectorAnchorEl(undefined);\r\n        setAudioTrackSelectorOpen(false);\r\n    }, []);\r\n\r\n    const handleAudioTrackSelectorOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        setAudioTrackSelectorAnchorEl(e.currentTarget);\r\n        setAudioTrackSelectorOpen(true);\r\n    }, []);\r\n\r\n    const handleAudioTrackSelected = useCallback(\r\n        (id: string) => {\r\n            onAudioTrackSelected(id);\r\n            setAudioTrackSelectorAnchorEl(undefined);\r\n            setAudioTrackSelectorOpen(false);\r\n        },\r\n        [onAudioTrackSelected]\r\n    );\r\n\r\n    const handleTabSelectorClosed = useCallback(() => {\r\n        setTabSelectorAnchorEl(undefined);\r\n        setTabSelectorOpen(false);\r\n    }, []);\r\n\r\n    const handleTabSelectorOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        setTabSelectorAnchorEl(e.currentTarget);\r\n        setTabSelectorOpen(true);\r\n    }, []);\r\n\r\n    const handleTabSelected = useCallback(\r\n        (tab: VideoTabModel) => {\r\n            onTabSelected?.(tab);\r\n            setTabSelectorAnchorEl(undefined);\r\n            setTabSelectorOpen(false);\r\n        },\r\n        [onTabSelected]\r\n    );\r\n\r\n    const handleAudioUnloaderClosed = useCallback(() => {\r\n        setAudioUnloaderAnchorEl(undefined);\r\n        setAudioUnloaderOpen(false);\r\n    }, []);\r\n\r\n    const handleAudioUnloaderOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        setAudioUnloaderAnchorEl(e.currentTarget);\r\n        setAudioUnloaderOpen(true);\r\n    }, []);\r\n\r\n    const handleUnloadAudio = useCallback(() => {\r\n        onUnloadAudio?.();\r\n        setAudioUnloaderOpen(false);\r\n    }, [onUnloadAudio]);\r\n\r\n    const handleVideoUnloaderClosed = useCallback(() => {\r\n        setVideoUnloaderAnchorEl(undefined);\r\n        setVideoUnloaderOpen(false);\r\n    }, []);\r\n\r\n    const handleVideoUnloaderOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        setVideoUnloaderAnchorEl(e.currentTarget);\r\n        setVideoUnloaderOpen(true);\r\n    }, []);\r\n\r\n    const handleUnloadVideo = useCallback(() => {\r\n        onUnloadVideo?.();\r\n        setVideoUnloaderOpen(false);\r\n    }, [onUnloadVideo]);\r\n\r\n    const handleVolumeMouseOut = useCallback(() => setShowVolumeBar(false), []);\r\n    const handleVolumeMouseOver = useCallback(() => setShowVolumeBar(true), []);\r\n\r\n    const handleVolumeChange = useCallback(\r\n        (e: React.ChangeEvent<{}>, value: number | number[]) => {\r\n            if (typeof value !== 'number') {\r\n                return;\r\n            }\r\n\r\n            setVolume(value);\r\n            onVolumeChange(value / 100);\r\n        },\r\n        [onVolumeChange]\r\n    );\r\n\r\n    const handleVolumeChangeCommitted = useCallback(\r\n        (e: React.ChangeEvent<{}>, value: number | number[]) => {\r\n            if (typeof value !== 'number') {\r\n                return;\r\n            }\r\n\r\n            if (value > 0) {\r\n                setLastCommittedVolume(value);\r\n            }\r\n\r\n            settingsProvider.volume = value;\r\n        },\r\n        [settingsProvider]\r\n    );\r\n\r\n    const handleVolumeToggle = useCallback(() => {\r\n        setVolume((volume) => {\r\n            const newVolume = volume > 0 ? 0 : lastCommittedVolume;\r\n            onVolumeChange(newVolume / 100);\r\n            return newVolume;\r\n        });\r\n    }, [onVolumeChange, lastCommittedVolume]);\r\n\r\n    const progress = clock.progress(length);\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Fade in={show} timeout={200}>\r\n                <Grid container style={{position: 'absolute', top: 0}}>\r\n                    <Grid item style={{flexGrow: 1}}>\r\n                        {closeEnabled && (\r\n                            <IconButton\r\n                                ref={closeButtonRef}\r\n                                color=\"inherit\"\r\n                                className={classes.topButton}\r\n                                onClick={onClose}\r\n                                onMouseOver={handleMouseOver}\r\n                                onMouseOut={handleMouseOut}\r\n                            >\r\n                                <CloseIcon />\r\n                            </IconButton>\r\n                        )}\r\n                    </Grid>\r\n                    <Grid item>\r\n                        {theaterModeToggleEnabled && (\r\n                            <IconButton\r\n                                color=\"inherit\"\r\n                                className={theaterModeEnabled ? classes.topButton : classes.inactiveTopButton}\r\n                                onClick={onTheaterModeToggle}\r\n                                onMouseOver={handleMouseOver}\r\n                                onMouseOut={handleMouseOut}\r\n                            >\r\n                                <AspectRatioIcon />\r\n                            </IconButton>\r\n                        )}\r\n                        {hideSubtitlePlayerToggleEnabled && (\r\n                            <IconButton\r\n                                color=\"inherit\"\r\n                                className={classes.topButton}\r\n                                onClick={onHideSubtitlePlayerToggle}\r\n                                onMouseOver={handleMouseOver}\r\n                                onMouseOut={handleMouseOut}\r\n                            >\r\n                                {subtitlePlayerHidden ? <ArrowBackIcon /> : <ArrowForwardIcon />}\r\n                            </IconButton>\r\n                        )}\r\n                    </Grid>\r\n                </Grid>\r\n            </Fade>\r\n            <div\r\n                ref={containerRef}\r\n                className={classes.container}\r\n                onMouseOver={handleMouseOver}\r\n                onMouseOut={handleMouseOut}\r\n            >\r\n                <Fade in={show} timeout={200}>\r\n                    <div className={classes.subContainer}>\r\n                        <ProgressBar onSeek={handleSeek} value={progress * 100} />\r\n                        <Grid container className={classes.gridContainer} direction=\"row\">\r\n                            <Grid item>\r\n                                <IconButton color=\"inherit\" onClick={() => (playing ? onPause() : onPlay())}>\r\n                                    {playing ? (\r\n                                        <PauseIcon className={classes.button} />\r\n                                    ) : (\r\n                                        <PlayArrowIcon className={classes.button} />\r\n                                    )}\r\n                                </IconButton>\r\n                            </Grid>\r\n                            {volumeEnabled && (\r\n                                <Grid\r\n                                    item\r\n                                    onMouseOver={handleVolumeMouseOver}\r\n                                    onMouseOut={handleVolumeMouseOut}\r\n                                    className={\r\n                                        showVolumeBar\r\n                                            ? classes.volumeInputContainerShown\r\n                                            : classes.volumeInputContainerHidden\r\n                                    }\r\n                                >\r\n                                    <IconButton color=\"inherit\" onClick={handleVolumeToggle}>\r\n                                        {volume === 0 ? <VolumeOffIcon /> : <VolumeUpIcon />}\r\n                                    </IconButton>\r\n                                    <VolumeSlider\r\n                                        onChange={handleVolumeChange}\r\n                                        onChangeCommitted={handleVolumeChangeCommitted}\r\n                                        value={volume}\r\n                                        defaultValue={100}\r\n                                        classes={{\r\n                                            root: showVolumeBar ? classes.volumeInputShown : classes.volumeInputHidden,\r\n                                            thumb: showVolumeBar\r\n                                                ? classes.volumeInputThumbShown\r\n                                                : classes.volumeInputThumbHidden,\r\n                                        }}\r\n                                    />\r\n                                </Grid>\r\n                            )}\r\n                            <Grid item>\r\n                                <div className={classes.timeDisplay}>\r\n                                    {displayTime(progress * length)} / {displayTime(displayLength || length)}\r\n                                </div>\r\n                            </Grid>\r\n                            {offsetEnabled && (\r\n                                <Grid item>\r\n                                    <Input\r\n                                        inputRef={offsetInputRef}\r\n                                        disableUnderline={true}\r\n                                        className={classes.offsetInput}\r\n                                        placeholder={'±' + Number(0).toFixed(2)}\r\n                                        onClick={handleOffsetInputClicked}\r\n                                    />\r\n                                </Grid>\r\n                            )}\r\n                            <Grid item style={{ flexGrow: 1 }}></Grid>\r\n                            {condensedModeToggleEnabled && (\r\n                                <Grid item>\r\n                                    <Tooltip title=\"Condensed Mode\">\r\n                                        <IconButton color=\"inherit\" onClick={onCondensedModeToggle}>\r\n                                            <SpeedIcon\r\n                                                className={\r\n                                                    condensedModeEnabled ? classes.button : classes.inactiveButton\r\n                                                }\r\n                                            />\r\n                                        </IconButton>\r\n                                    </Tooltip>\r\n                                </Grid>\r\n                            )}\r\n                            {subtitlesToggle && (\r\n                                <Grid item>\r\n                                    <IconButton color=\"inherit\" onClick={onSubtitlesToggle}>\r\n                                        <SubtitlesIcon\r\n                                            className={subtitlesEnabled ? classes.button : classes.inactiveButton}\r\n                                        />\r\n                                    </IconButton>\r\n                                </Grid>\r\n                            )}\r\n                            {videoFile && (\r\n                                <Grid item>\r\n                                    <IconButton color=\"inherit\" onClick={handleVideoUnloaderOpened}>\r\n                                        <VideocamIcon className={classes.button} />\r\n                                    </IconButton>\r\n                                </Grid>\r\n                            )}\r\n                            {audioFile && (\r\n                                <Grid item>\r\n                                    <IconButton color=\"inherit\" onClick={handleAudioUnloaderOpened}>\r\n                                        <AudiotrackIcon className={classes.button} />\r\n                                    </IconButton>\r\n                                </Grid>\r\n                            )}\r\n                            {audioTracks && audioTracks.length > 1 && (\r\n                                <Grid item>\r\n                                    <IconButton color=\"inherit\" onClick={handleAudioTrackSelectorOpened}>\r\n                                        <QueueMusicIcon className={classes.button} />\r\n                                    </IconButton>\r\n                                </Grid>\r\n                            )}\r\n                            {tabs && tabs.length > 0 && (\r\n                                <Grid item>\r\n                                    <IconButton color=\"inherit\" onClick={handleTabSelectorOpened}>\r\n                                        <VideocamIcon\r\n                                            className={selectedTab ? classes.button : classes.inactiveButton}\r\n                                        />\r\n                                    </IconButton>\r\n                                </Grid>\r\n                            )}\r\n                            {popOutEnabled && (\r\n                                <Grid item>\r\n                                    <IconButton color=\"inherit\" onClick={onPopOutToggle}>\r\n                                        <OpenInNewIcon\r\n                                            className={classes.button}\r\n                                            style={popOut ? { transform: 'rotateX(180deg)' } : {}}\r\n                                        />\r\n                                    </IconButton>\r\n                                </Grid>\r\n                            )}\r\n                            {fullscreenEnabled && (\r\n                                <Grid item>\r\n                                    <IconButton color=\"inherit\" onClick={onFullscreenToggle}>\r\n                                        {fullscreen ? (\r\n                                            <FullscreenExitIcon className={classes.button} />\r\n                                        ) : (\r\n                                            <FullscreenIcon className={classes.button} />\r\n                                        )}\r\n                                    </IconButton>\r\n                                </Grid>\r\n                            )}\r\n                        </Grid>\r\n                    </div>\r\n                </Fade>\r\n                <TabSelector\r\n                    open={tabSelectorOpen && show}\r\n                    anchorEl={tabSelectorAnchorEl}\r\n                    tabs={tabs}\r\n                    selectedTab={selectedTab}\r\n                    onClose={handleTabSelectorClosed}\r\n                    onTabSelected={handleTabSelected}\r\n                />\r\n                <AudioTrackSelector\r\n                    open={audioTrackSelectorOpen && show}\r\n                    anchorEl={audioTrackSelectorAnchorEl}\r\n                    audioTracks={audioTracks}\r\n                    selectedAudioTrack={selectedAudioTrack}\r\n                    onClose={handleAudioTrackSelectorClosed}\r\n                    onAudioTrackSelected={handleAudioTrackSelected}\r\n                />\r\n                <MediaUnloader\r\n                    open={audioUnloaderOpen}\r\n                    anchorEl={audioUnloaderAnchorEl}\r\n                    file={audioFile}\r\n                    onClose={handleAudioUnloaderClosed}\r\n                    onUnload={handleUnloadAudio}\r\n                />\r\n                <MediaUnloader\r\n                    open={videoUnloaderOpen}\r\n                    anchorEl={videoUnloaderAnchorEl}\r\n                    file={videoFile}\r\n                    onClose={handleVideoUnloaderClosed}\r\n                    onUnload={handleUnloadVideo}\r\n                />\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n","import { RefObject } from \"react\";\r\n\r\nexport interface MediaElement {\r\n    currentTime: number;\r\n    readyState: number;\r\n    oncanplay: ((ev: Event) => void) | null;\r\n    play: () => Promise<void>;\r\n    pause: () => void;\r\n    duration: number;\r\n}\r\n\r\nexport default class MediaAdapter {\r\n    private readonly ref: RefObject<MediaElement | undefined>;\r\n    private readonly readyResolves: (() => void)[];\r\n\r\n    constructor(ref: RefObject<MediaElement | undefined>) {\r\n        this.ref = ref;\r\n        this.readyResolves = [];\r\n    }\r\n\r\n    async seek(time: number) {\r\n        return new Promise((resolve, reject) => {\r\n            if (this.ref.current) {\r\n                this.ref.current.currentTime = time;\r\n                this._onMediaCanPlay(() => resolve(undefined));\r\n            } else {\r\n                resolve(undefined);\r\n            }\r\n        });\r\n    }\r\n\r\n    async onReady() {\r\n        return new Promise((resolve, reject) => {\r\n            if (this.ref.current) {\r\n                this._onMediaCanPlay(() => resolve(undefined));\r\n            } else {\r\n                resolve(undefined);\r\n            }\r\n        });\r\n    }\r\n\r\n    _onMediaCanPlay(callback: () => void) {\r\n        if (this.ref.current?.readyState === 4) {\r\n            callback();\r\n            return;\r\n        }\r\n\r\n        if (this.ref.current && !this.ref.current.oncanplay) {\r\n            this.ref.current.oncanplay = (e) => {\r\n                for (const resolve of this.readyResolves) {\r\n                    resolve();\r\n                }\r\n\r\n                this.readyResolves.length = 0;\r\n\r\n                if (this.ref.current) {\r\n                    this.ref.current.oncanplay = null;\r\n                }\r\n            };\r\n        }\r\n\r\n        this.readyResolves.push(callback);\r\n    }\r\n\r\n    play() {\r\n        this.ref.current?.play();\r\n    }\r\n\r\n    pause() {\r\n        this.ref.current?.pause();\r\n    }\r\n}\r\n","import React, { useCallback, useEffect, useState, useMemo, useRef, createRef, RefObject } from 'react';\r\nimport { makeStyles, Theme } from '@material-ui/core/styles';\r\nimport { keysAreEqual } from '../services/Util';\r\nimport { useWindowSize } from '../hooks/useWindowSize';\r\nimport { AsbplayerSettingsProvider, KeyBindings, surroundingSubtitles, SubtitleModel } from '@project/common';\r\nimport { SubtitleTextImage } from '@project/common/components';\r\nimport FileCopy from '@material-ui/icons/FileCopy';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableRow, { TableRowProps } from '@material-ui/core/TableRow';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Clock from '../services/Clock';\r\n\r\ninterface StylesProps {\r\n    compressed: boolean;\r\n    appBarHidden: boolean;\r\n    windowWidth: number;\r\n}\r\n\r\nconst useSubtitlePlayerStyles = makeStyles<Theme, StylesProps, string>((theme) => ({\r\n    container: {\r\n        height: ({ appBarHidden }) => (appBarHidden ? '100vh' : 'calc(100vh - 64px)'),\r\n        position: 'relative',\r\n        overflowX: 'hidden',\r\n        backgroundColor: theme.palette.background.default,\r\n        width: ({ compressed, windowWidth }) => (compressed ? Math.max(350, 0.25 * windowWidth) : '100%'),\r\n    },\r\n    table: {\r\n        backgroundColor: theme.palette.background.default,\r\n        marginBottom: 75, // so the last row doesn't collide with controls\r\n    },\r\n    noSubtitles: {\r\n        height: '100%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        padding: 15,\r\n        textAlign: 'center',\r\n    },\r\n}));\r\n\r\nconst useSubtitleRowStyles = makeStyles((theme) => ({\r\n    subtitleRow: {\r\n        '&:hover': {\r\n            backgroundColor: theme.palette.action.hover,\r\n        },\r\n    },\r\n    subtitle: {\r\n        fontSize: 20,\r\n        paddingRight: 0,\r\n        minWidth: 200,\r\n        width: '100%',\r\n        overflowWrap: 'anywhere',\r\n    },\r\n    compressedSubtitle: {\r\n        fontSize: 16,\r\n        paddingRight: 0,\r\n        minWidth: 200,\r\n        width: '100%',\r\n        overflowWrap: 'anywhere',\r\n    },\r\n    disabledSubtitle: {\r\n        color: 'transparent',\r\n        backgroundColor: theme.palette.action.disabledBackground,\r\n        borderRadius: 5,\r\n    },\r\n    timestamp: {\r\n        fontSize: 14,\r\n        color: '#aaaaaa',\r\n        textAlign: 'right',\r\n        paddingRight: 15,\r\n        paddingLeft: 5,\r\n    },\r\n    copyButton: {\r\n        textAlign: 'right',\r\n        padding: 0,\r\n    },\r\n}));\r\n\r\nexport interface DisplaySubtitleModel extends SubtitleModel {\r\n    displayTime: string;\r\n}\r\n\r\ninterface SubtitleRowProps extends TableRowProps {\r\n    index: number;\r\n    compressed: boolean;\r\n    selected: boolean;\r\n    disabled: boolean;\r\n    subtitle: DisplaySubtitleModel;\r\n    subtitleRef: RefObject<HTMLTableRowElement>;\r\n    onClickSubtitle: (index: number) => void;\r\n    onCopySubtitle: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>, index: number) => void;\r\n}\r\n\r\nconst SubtitleRow = React.memo((props: SubtitleRowProps) => {\r\n    const {\r\n        index,\r\n        selected,\r\n        subtitleRef,\r\n        onClickSubtitle,\r\n        onCopySubtitle,\r\n        compressed,\r\n        disabled,\r\n        subtitle,\r\n        ...tableRowProps\r\n    } = props;\r\n    const classes = useSubtitleRowStyles();\r\n    const textRef = useRef<HTMLSpanElement>(null);\r\n    const [textSelected, setTextSelected] = useState<boolean>(false);\r\n    let className = compressed ? classes.compressedSubtitle : classes.subtitle;\r\n    let disabledClassName = disabled ? classes.disabledSubtitle : '';\r\n\r\n    if (subtitle.start < 0 || subtitle.end < 0) {\r\n        return null;\r\n    }\r\n\r\n    function handleMouseUp() {\r\n        const selection = document.getSelection();\r\n        const selected =\r\n            selection?.type === 'Range' && textRef.current?.isSameNode(selection.anchorNode?.parentNode ?? null);\r\n        setTextSelected(selected ?? false);\r\n    }\r\n\r\n    const content = subtitle.textImage ? (\r\n        <SubtitleTextImage availableWidth={window.screen.availWidth / 2} subtitle={subtitle} scale={1} />\r\n    ) : (\r\n        <span ref={textRef} className={disabledClassName}>\r\n            {subtitle.text}\r\n        </span>\r\n    );\r\n\r\n    return (\r\n        <TableRow\r\n            onClick={() => !textSelected && onClickSubtitle(index)}\r\n            onMouseUp={handleMouseUp}\r\n            ref={subtitleRef}\r\n            className={classes.subtitleRow}\r\n            selected={selected}\r\n            {...tableRowProps}\r\n        >\r\n            <TableCell className={className}>{content}</TableCell>\r\n            <TableCell className={classes.copyButton}>\r\n                <IconButton onClick={(e) => onCopySubtitle(e, index)}>\r\n                    <FileCopy fontSize={compressed ? 'small' : 'medium'} />\r\n                </IconButton>\r\n            </TableCell>\r\n            <TableCell className={classes.timestamp}>{subtitle.displayTime}</TableCell>\r\n        </TableRow>\r\n    );\r\n});\r\n\r\ninterface SubtitlePlayerProps {\r\n    clock: Clock;\r\n    onSeek: (progress: number, shouldPlay: boolean) => void;\r\n    onCopy: (subtitle: SubtitleModel, surroundingSubtitles: SubtitleModel[], preventDuplicate: boolean) => void;\r\n    onOffsetChange: (offset: number) => void;\r\n    onAnkiDialogRequest: () => void;\r\n    onToggleSubtitleTrack: (track: number) => void;\r\n    playing: boolean;\r\n    subtitles?: DisplaySubtitleModel[];\r\n    length: number;\r\n    jumpToSubtitle?: SubtitleModel;\r\n    compressed: boolean;\r\n    loading: boolean;\r\n    drawerOpen: boolean;\r\n    appBarHidden: boolean;\r\n    displayHelp?: string;\r\n    disableKeyEvents: boolean;\r\n    lastJumpToTopTimestamp: number;\r\n    hidden: boolean;\r\n    disabledSubtitleTracks: { [track: number]: boolean };\r\n    settingsProvider: AsbplayerSettingsProvider;\r\n}\r\n\r\nexport default function SubtitlePlayer({\r\n    clock,\r\n    onSeek,\r\n    onCopy,\r\n    onOffsetChange,\r\n    onAnkiDialogRequest,\r\n    onToggleSubtitleTrack,\r\n    playing,\r\n    subtitles,\r\n    length,\r\n    jumpToSubtitle,\r\n    compressed,\r\n    loading,\r\n    drawerOpen,\r\n    appBarHidden,\r\n    displayHelp,\r\n    disableKeyEvents,\r\n    lastJumpToTopTimestamp,\r\n    hidden,\r\n    disabledSubtitleTracks,\r\n    settingsProvider,\r\n}: SubtitlePlayerProps) {\r\n    const playingRef = useRef<boolean>();\r\n    playingRef.current = playing;\r\n    const clockRef = useRef<Clock>(clock);\r\n    clockRef.current = clock;\r\n    const subtitleListRef = useRef<DisplaySubtitleModel[]>();\r\n    subtitleListRef.current = subtitles;\r\n    const subtitleRefs = useMemo<RefObject<HTMLTableRowElement>[]>(\r\n        () =>\r\n            subtitles\r\n                ? Array(subtitles.length)\r\n                      .fill(undefined)\r\n                      .map((_) => createRef<HTMLTableRowElement>())\r\n                : [],\r\n        [subtitles]\r\n    );\r\n    const subtitleRefsRef = useRef<RefObject<HTMLTableRowElement>[]>([]);\r\n    subtitleRefsRef.current = subtitleRefs;\r\n    const disableKeyEventsRef = useRef<boolean>();\r\n    disableKeyEventsRef.current = disableKeyEvents;\r\n    const [selectedSubtitleIndexes, setSelectedSubtitleIndexes] = useState<{ [index: number]: boolean }>({});\r\n    const selectedSubtitleIndexesRef = useRef<{ [index: number]: boolean }>({});\r\n    const lengthRef = useRef<number>(0);\r\n    lengthRef.current = length;\r\n    const hiddenRef = useRef<boolean>(false);\r\n    hiddenRef.current = hidden;\r\n    const lastScrollTimestampRef = useRef<number>(0);\r\n    const requestAnimationRef = useRef<number>();\r\n    const containerRef = useRef<HTMLElement>();\r\n    const drawerOpenRef = useRef<boolean>();\r\n    drawerOpenRef.current = drawerOpen;\r\n    const [windowWidth] = useWindowSize(true);\r\n    const classes = useSubtitlePlayerStyles({ compressed, windowWidth, appBarHidden });\r\n\r\n    // This effect should be scheduled only once as re-scheduling seems to cause performance issues.\r\n    // Therefore all of the state it operates on is contained in refs.\r\n    useEffect(() => {\r\n        const update = () => {\r\n            const subtitles = subtitleListRef.current || [];\r\n            const subtitleRefs = subtitleRefsRef.current;\r\n            const length = lengthRef.current;\r\n            const clock = clockRef.current;\r\n            const progress = clock.progress(lengthRef.current);\r\n\r\n            let smallestIndex = Number.MAX_SAFE_INTEGER;\r\n            let fallbackIndex = -1;\r\n            const currentSubtitleIndexes: { [index: number]: boolean } = {};\r\n\r\n            for (let i = subtitles.length - 1; i >= 0; --i) {\r\n                const s = subtitles[i];\r\n                const start = s.start / length;\r\n                const end = s.end / length;\r\n\r\n                if (progress >= start) {\r\n                    if (progress < end) {\r\n                        smallestIndex = i < smallestIndex ? i : smallestIndex;\r\n                        currentSubtitleIndexes[i] = true;\r\n                    }\r\n\r\n                    if (fallbackIndex === -1) {\r\n                        fallbackIndex = i;\r\n                    }\r\n                } else if (smallestIndex !== Number.MAX_SAFE_INTEGER) {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            // Attempt to highlight *something* if no subtitles were found at the current timestamp\r\n            if (smallestIndex === Number.MAX_SAFE_INTEGER && fallbackIndex !== -1) {\r\n                currentSubtitleIndexes[fallbackIndex] = true;\r\n            }\r\n\r\n            if (!keysAreEqual(currentSubtitleIndexes, selectedSubtitleIndexesRef.current)) {\r\n                selectedSubtitleIndexesRef.current = currentSubtitleIndexes;\r\n                setSelectedSubtitleIndexes(currentSubtitleIndexes);\r\n\r\n                if (smallestIndex !== Number.MAX_SAFE_INTEGER) {\r\n                    const scrollToSubtitleRef = subtitleRefs[smallestIndex];\r\n                    const allowScroll = !hiddenRef.current && Date.now() - lastScrollTimestampRef.current > 5000;\r\n\r\n                    if (scrollToSubtitleRef?.current && allowScroll) {\r\n                        scrollToSubtitleRef.current.scrollIntoView({\r\n                            block: 'center',\r\n                            inline: 'nearest',\r\n                            behavior: 'smooth',\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n            requestAnimationRef.current = requestAnimationFrame(update);\r\n        };\r\n\r\n        requestAnimationRef.current = requestAnimationFrame(update);\r\n\r\n        return () => {\r\n            if (requestAnimationRef.current !== undefined) {\r\n                cancelAnimationFrame(requestAnimationRef.current);\r\n            }\r\n        };\r\n    }, []);\r\n\r\n    const scrollToCurrentSubtitle = useCallback(() => {\r\n        const selectedSubtitleIndexes = selectedSubtitleIndexesRef.current;\r\n\r\n        if (!selectedSubtitleIndexes) {\r\n            return;\r\n        }\r\n\r\n        const indexes = Object.keys(selectedSubtitleIndexes);\r\n\r\n        if (indexes.length === 0) {\r\n            return;\r\n        }\r\n\r\n        const scrollToSubtitleRef = subtitleRefs[Number(indexes[0])];\r\n\r\n        scrollToSubtitleRef?.current?.scrollIntoView({\r\n            block: 'center',\r\n            inline: 'nearest',\r\n            behavior: 'smooth',\r\n        });\r\n    }, [subtitleRefs]);\r\n\r\n    useEffect(() => {\r\n        if (hidden) {\r\n            return;\r\n        }\r\n\r\n        function scrollIfVisible() {\r\n            if (document.visibilityState === 'visible') {\r\n                scrollToCurrentSubtitle();\r\n            }\r\n        }\r\n\r\n        document.addEventListener('visibilitychange', scrollIfVisible);\r\n\r\n        return () => document.removeEventListener('visibilitychange', scrollIfVisible);\r\n    }, [hidden, selectedSubtitleIndexes, subtitleRefs, scrollToCurrentSubtitle]);\r\n\r\n    useEffect(() => {\r\n        if (!hidden) {\r\n            scrollToCurrentSubtitle();\r\n        }\r\n    }, [hidden, scrollToCurrentSubtitle]);\r\n\r\n    useEffect(() => {\r\n        if (hiddenRef.current) {\r\n            return;\r\n        }\r\n\r\n        const subtitleRefs = subtitleRefsRef.current;\r\n\r\n        if (!subtitleRefs || subtitleRefs.length === 0) {\r\n            return;\r\n        }\r\n\r\n        const firstSubtitleRef = subtitleRefs[0];\r\n        firstSubtitleRef?.current?.scrollIntoView({\r\n            block: 'center',\r\n            inline: 'nearest',\r\n            behavior: 'smooth',\r\n        });\r\n    }, [lastJumpToTopTimestamp]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindAdjustOffset(\r\n            (event, offset) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                onOffsetChange(offset);\r\n            },\r\n            () => disableKeyEvents,\r\n            () => subtitles\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [onOffsetChange, disableKeyEvents, subtitles]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindOffsetToSubtitle(\r\n            (event, offset) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                onOffsetChange(offset);\r\n            },\r\n            () => disableKeyEvents,\r\n            () => clock.time(length),\r\n            () => subtitles\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [onOffsetChange, disableKeyEvents, clock, subtitles, length]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindSeekToSubtitle(\r\n            (event, subtitle) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                onSeek(subtitle.start, false);\r\n            },\r\n            () => disableKeyEvents,\r\n            () => clock.time(length),\r\n            () => subtitles\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [onSeek, subtitles, disableKeyEvents, clock, length]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindSeekToBeginningOfCurrentSubtitle(\r\n            (event, subtitle) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                onSeek(subtitle.start, false);\r\n            },\r\n            () => disableKeyEvents,\r\n            () => clock.time(length),\r\n            () => subtitles\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [onSeek, subtitles, disableKeyEvents, clock, length]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindSeekBackwardOrForward(\r\n            (event, forward) => {\r\n                event.stopPropagation();\r\n                event.preventDefault();\r\n                if (forward) {\r\n                    onSeek(Math.min(length, clock.time(length) + 5000), false);\r\n                } else {\r\n                    onSeek(Math.max(0, clock.time(length) - 5000), false);\r\n                }\r\n            },\r\n            () => disableKeyEvents\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [clock, length, disableKeyEvents, onSeek]);\r\n\r\n    useEffect(() => {\r\n        function handleScroll() {\r\n            lastScrollTimestampRef.current = Date.now();\r\n        }\r\n\r\n        const table = containerRef.current;\r\n        table?.addEventListener('wheel', handleScroll);\r\n\r\n        return () => table?.removeEventListener('wheel', handleScroll);\r\n    }, [containerRef, lastScrollTimestampRef]);\r\n\r\n    useEffect(() => {\r\n        if (hidden) {\r\n            return;\r\n        }\r\n\r\n        if (!jumpToSubtitle || !subtitles) {\r\n            return;\r\n        }\r\n\r\n        let jumpToIndex = -1;\r\n        let i = 0;\r\n\r\n        for (let s of subtitles) {\r\n            if (s.originalStart === jumpToSubtitle.originalStart && s.text === jumpToSubtitle.text) {\r\n                jumpToIndex = i;\r\n                break;\r\n            }\r\n\r\n            ++i;\r\n        }\r\n\r\n        if (jumpToIndex !== -1) {\r\n            subtitleRefs[jumpToIndex]?.current?.scrollIntoView({\r\n                block: 'center',\r\n                inline: 'nearest',\r\n                behavior: 'smooth',\r\n            });\r\n        }\r\n    }, [hidden, jumpToSubtitle, subtitles, subtitleRefs]);\r\n\r\n    const calculateSurroundingSubtitlesForIndex = useCallback(\r\n        (index: number) => {\r\n            if (!selectedSubtitleIndexesRef.current || !subtitles) {\r\n                return [];\r\n            }\r\n\r\n            return surroundingSubtitles(\r\n                subtitles,\r\n                index,\r\n                settingsProvider.surroundingSubtitlesCountRadius,\r\n                settingsProvider.surroundingSubtitlesTimeRadius\r\n            );\r\n        },\r\n        [subtitles, settingsProvider.surroundingSubtitlesCountRadius, settingsProvider.surroundingSubtitlesTimeRadius]\r\n    );\r\n\r\n    const calculateSurroundingSubtitles = useCallback(() => {\r\n        if (!selectedSubtitleIndexesRef.current) {\r\n            return [];\r\n        }\r\n        const index = Math.min(...Object.keys(selectedSubtitleIndexesRef.current).map((i) => Number(i)));\r\n        return calculateSurroundingSubtitlesForIndex(index);\r\n    }, [calculateSurroundingSubtitlesForIndex]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindCopy(\r\n            (event, subtitle) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                onCopy(subtitle, calculateSurroundingSubtitles(), false);\r\n            },\r\n            () => disableKeyEventsRef.current ?? false,\r\n            () => {\r\n                const subtitleIndexes = Object.keys(selectedSubtitleIndexesRef.current).map((i) => Number(i));\r\n\r\n                if (!subtitles || !subtitleIndexes || subtitleIndexes.length === 0) {\r\n                    return undefined;\r\n                }\r\n\r\n                const index = Math.min(...subtitleIndexes);\r\n                return subtitles[index];\r\n            }\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [subtitles, calculateSurroundingSubtitles, onCopy]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindToggleSubtitleTrackInList(\r\n            (event, track) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                onToggleSubtitleTrack(track);\r\n            },\r\n            () => {},\r\n            () => disableKeyEvents\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [disableKeyEvents, onToggleSubtitleTrack]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindAnkiExport(\r\n            (event) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                const subtitleIndexes = Object.keys(selectedSubtitleIndexesRef.current).map((i) => Number(i));\r\n\r\n                if (subtitles && subtitleIndexes && subtitleIndexes.length > 0) {\r\n                    const index = Math.min(...subtitleIndexes);\r\n                    onCopy(subtitles[index], calculateSurroundingSubtitlesForIndex(index), true);\r\n                }\r\n\r\n                onAnkiDialogRequest();\r\n            },\r\n            () => false\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [onAnkiDialogRequest, onCopy, subtitles, calculateSurroundingSubtitlesForIndex]);\r\n\r\n    const handleClick = useCallback(\r\n        (index: number) => {\r\n            if (!subtitles) {\r\n                return;\r\n            }\r\n\r\n            const selectedSubtitleIndexes = selectedSubtitleIndexesRef.current || {};\r\n            onSeek(subtitles[index].start, !playingRef.current && index in selectedSubtitleIndexes);\r\n        },\r\n        [subtitles, onSeek]\r\n    );\r\n\r\n    const handleCopy = useCallback(\r\n        (e: React.MouseEvent<HTMLButtonElement, MouseEvent>, index: number) => {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n\r\n            if (!subtitles) {\r\n                return;\r\n            }\r\n\r\n            onCopy(subtitles[index], calculateSurroundingSubtitlesForIndex(index), false);\r\n        },\r\n        [subtitles, calculateSurroundingSubtitlesForIndex, onCopy]\r\n    );\r\n\r\n    let subtitleTable = null;\r\n\r\n    if (!subtitles || subtitles.length === 0) {\r\n        if (!loading && displayHelp) {\r\n            subtitleTable = !loading && displayHelp && (\r\n                <div className={classes.noSubtitles}>\r\n                    <Typography variant=\"h6\">{displayHelp}</Typography>\r\n                </div>\r\n            );\r\n        } else if (subtitles && subtitles.length === 0) {\r\n            subtitleTable = (\r\n                <div className={classes.noSubtitles}>\r\n                    <Typography variant=\"h6\">No subtitles</Typography>\r\n                </div>\r\n            );\r\n        }\r\n    } else {\r\n        subtitleTable = (\r\n            <TableContainer className={classes.table}>\r\n                <Table>\r\n                    <TableBody>\r\n                        {subtitles.map((s: SubtitleModel, index: number) => {\r\n                            const selected = index in selectedSubtitleIndexes;\r\n\r\n                            return (\r\n                                <SubtitleRow\r\n                                    key={index}\r\n                                    index={index}\r\n                                    compressed={compressed}\r\n                                    selected={selected}\r\n                                    disabled={disabledSubtitleTracks[s.track]}\r\n                                    subtitle={subtitles[index]}\r\n                                    subtitleRef={subtitleRefs[index]}\r\n                                    onClickSubtitle={handleClick}\r\n                                    onCopySubtitle={handleCopy}\r\n                                />\r\n                            );\r\n                        })}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Paper square elevation={0} ref={containerRef} className={classes.container}>\r\n            {subtitleTable}\r\n        </Paper>\r\n    );\r\n}\r\n","import {\r\n    AnkiDialogRequestFromVideoMessage,\r\n    AnkiSettings,\r\n    AnkiSettingsToVideoMessage,\r\n    AppBarToggleMessageToVideoMessage,\r\n    AudioModel,\r\n    AudioTrackModel,\r\n    AudioTrackSelectedFromVideoMessage,\r\n    AudioTrackSelectedToVideoMessage,\r\n    CondensedModeToggleToVideoMessage,\r\n    CopyMessage,\r\n    CurrentTimeFromVideoMessage,\r\n    CurrentTimeToVideoMessage,\r\n    FinishedAnkiDialogRequestToVideoMessage,\r\n    HideSubtitlePlayerToggleToVideoMessage,\r\n    ImageModel,\r\n    MiscSettings,\r\n    MiscSettingsToVideoMessage,\r\n    OffsetFromVideoMessage,\r\n    PauseFromVideoMessage,\r\n    PlayFromVideoMessage,\r\n    ReadyFromVideoMessage,\r\n    ReadyStateFromVideoMessage,\r\n    ReadyToVideoMessage,\r\n    SubtitleModel,\r\n    SubtitleSettings,\r\n    SubtitleSettingsToVideoMessage,\r\n    SubtitlesToVideoMessage,\r\n    ToggleSubtitleTrackInListFromVideoMessage,\r\n} from '@project/common';\r\nimport { VideoProtocol } from './VideoProtocol';\r\n\r\nexport default class VideoChannel {\r\n    private readonly protocol: VideoProtocol;\r\n    private time: number;\r\n    private isReady: boolean;\r\n    private readyCallbacks: ((paused: boolean) => void)[];\r\n    private playCallbacks: ((echo: boolean) => void)[];\r\n    private pauseCallbacks: ((echo: boolean) => void)[];\r\n    private audioTrackSelectedCallbacks: ((audioTrack: string) => void)[];\r\n    private currentTimeCallbacks: ((currentTime: number, echo: boolean) => void)[];\r\n    private exitCallbacks: (() => void)[];\r\n    private offsetCallbacks: ((offset: number) => void)[];\r\n    private popOutToggleCallbacks: (() => void)[];\r\n    private copyCallbacks: ((\r\n        subtitle: SubtitleModel,\r\n        surroundingSubtitles: SubtitleModel[],\r\n        audio: AudioModel | undefined,\r\n        image: ImageModel | undefined,\r\n        url: string | undefined,\r\n        preventDuplicate: boolean,\r\n        id: string | undefined\r\n    ) => void)[];\r\n    private condensedModeToggleCallbacks: (() => void)[];\r\n    private hideSubtitlePlayerToggleCallbacks: (() => void)[];\r\n    private appBarToggleCallbacks: (() => void)[];\r\n    private ankiDialogRequestCallbacks: ((forwardToVideo: boolean) => void)[];\r\n    private toggleSubtitleTrackInListCallbacks: ((track: number) => void)[];\r\n\r\n    readyState: number;\r\n    oncanplay: ((ev: Event) => void) | null = null;\r\n    audioTracks?: AudioTrackModel[];\r\n    selectedAudioTrack?: string;\r\n    duration: number;\r\n\r\n    constructor(protocol: VideoProtocol) {\r\n        this.protocol = protocol;\r\n        this.time = 0;\r\n        this.duration = 0;\r\n        this.isReady = false;\r\n        this.readyState = 0;\r\n        this.selectedAudioTrack = undefined;\r\n        this.readyCallbacks = [];\r\n        this.playCallbacks = [];\r\n        this.pauseCallbacks = [];\r\n        this.currentTimeCallbacks = [];\r\n        this.audioTrackSelectedCallbacks = [];\r\n        this.exitCallbacks = [];\r\n        this.offsetCallbacks = [];\r\n        this.popOutToggleCallbacks = [];\r\n        this.copyCallbacks = [];\r\n        this.condensedModeToggleCallbacks = [];\r\n        this.hideSubtitlePlayerToggleCallbacks = [];\r\n        this.appBarToggleCallbacks = [];\r\n        this.ankiDialogRequestCallbacks = [];\r\n        this.toggleSubtitleTrackInListCallbacks = [];\r\n\r\n        const that = this;\r\n\r\n        this.protocol.onMessage = (event) => {\r\n            switch (event.data.command) {\r\n                case 'ready':\r\n                    const readyMessage = event.data as ReadyFromVideoMessage;\r\n\r\n                    that.duration = readyMessage.duration;\r\n                    that.isReady = true;\r\n                    that.audioTracks = readyMessage.audioTracks;\r\n                    that.selectedAudioTrack = readyMessage.selectedAudioTrack;\r\n                    that.readyState = 4;\r\n                    that.time = readyMessage.currentTime;\r\n\r\n                    for (let callback of that.readyCallbacks) {\r\n                        callback(readyMessage.paused);\r\n                    }\r\n                    break;\r\n                case 'readyState':\r\n                    const readyStateMessage = event.data as ReadyStateFromVideoMessage;\r\n\r\n                    that.readyState = readyStateMessage.value;\r\n                    if (that.readyState === 4) {\r\n                        that.oncanplay?.(new Event('canplay'));\r\n                    }\r\n                    break;\r\n                case 'play':\r\n                    const playMessage = event.data as PlayFromVideoMessage;\r\n\r\n                    for (let callback of that.playCallbacks) {\r\n                        callback(playMessage.echo);\r\n                    }\r\n                    break;\r\n                case 'pause':\r\n                    const pauseMessage = event.data as PauseFromVideoMessage;\r\n\r\n                    for (let callback of that.pauseCallbacks) {\r\n                        callback(pauseMessage.echo);\r\n                    }\r\n                    break;\r\n                case 'audioTrackSelected':\r\n                    const audioTrackSelectedMessage = event.data as AudioTrackSelectedFromVideoMessage;\r\n\r\n                    for (let callback of that.audioTrackSelectedCallbacks) {\r\n                        that.selectedAudioTrack = audioTrackSelectedMessage.id;\r\n                        callback(audioTrackSelectedMessage.id);\r\n                    }\r\n                    break;\r\n                case 'currentTime':\r\n                    const currentTimeMessage = event.data as CurrentTimeFromVideoMessage;\r\n\r\n                    for (let callback of that.currentTimeCallbacks) {\r\n                        callback(currentTimeMessage.value, currentTimeMessage.echo);\r\n                    }\r\n                    break;\r\n                case 'exit':\r\n                    for (let callback of that.exitCallbacks) {\r\n                        callback();\r\n                    }\r\n                    break;\r\n                case 'offset':\r\n                    const offsetMessage = event.data as OffsetFromVideoMessage;\r\n\r\n                    for (let callback of that.offsetCallbacks) {\r\n                        callback(offsetMessage.value);\r\n                    }\r\n                    break;\r\n                case 'popOutToggle':\r\n                    for (let callback of that.popOutToggleCallbacks) {\r\n                        callback();\r\n                    }\r\n                    break;\r\n                case 'copy':\r\n                    for (let callback of that.copyCallbacks) {\r\n                        const copyMessage = event.data as CopyMessage;\r\n\r\n                        callback(\r\n                            copyMessage.subtitle,\r\n                            copyMessage.surroundingSubtitles,\r\n                            copyMessage.audio,\r\n                            copyMessage.image,\r\n                            copyMessage.url,\r\n                            copyMessage.preventDuplicate ?? false,\r\n                            copyMessage.id\r\n                        );\r\n                    }\r\n                    break;\r\n                case 'condensedModeToggle':\r\n                    for (let callback of that.condensedModeToggleCallbacks) {\r\n                        callback();\r\n                    }\r\n                    break;\r\n                case 'hideSubtitlePlayerToggle':\r\n                    for (let callback of that.hideSubtitlePlayerToggleCallbacks) {\r\n                        callback();\r\n                    }\r\n                    break;\r\n                case 'appBarToggle':\r\n                    for (let callback of that.appBarToggleCallbacks) {\r\n                        callback();\r\n                    }\r\n                    break;\r\n                case 'sync':\r\n                    // ignore\r\n                    break;\r\n                case 'syncv2':\r\n                    // ignore\r\n                    break;\r\n                case 'ankiDialogRequest':\r\n                    const ankiDialogRequestMessage = event.data as AnkiDialogRequestFromVideoMessage;\r\n\r\n                    for (let callback of that.ankiDialogRequestCallbacks) {\r\n                        callback(ankiDialogRequestMessage.forwardToVideo);\r\n                    }\r\n                    break;\r\n                case 'toggleSubtitleTrackInList':\r\n                    const toggleSubtitleTrackInListMessage = event.data as ToggleSubtitleTrackInListFromVideoMessage;\r\n\r\n                    for (const callback of that.toggleSubtitleTrackInListCallbacks) {\r\n                        callback(toggleSubtitleTrackInListMessage.track);\r\n                    }\r\n                    break;\r\n                case 'playbackRate':\r\n                    // ignore for now\r\n                    break;\r\n                default:\r\n                    console.error('Unrecognized event ' + event.data.command);\r\n            }\r\n        };\r\n    }\r\n\r\n    get currentTime() {\r\n        return this.time;\r\n    }\r\n\r\n    set currentTime(value: number) {\r\n        this.time = value;\r\n        this.readyState = 3;\r\n        const message: CurrentTimeToVideoMessage = { command: 'currentTime', value: this.time };\r\n        this.protocol.postMessage(message);\r\n    }\r\n\r\n    onReady(callback: (paused: boolean) => void) {\r\n        if (this.isReady) {\r\n            callback(false);\r\n        }\r\n        this.readyCallbacks.push(callback);\r\n    }\r\n\r\n    onPlay(callback: (echo: boolean) => void) {\r\n        this.playCallbacks.push(callback);\r\n    }\r\n\r\n    onPause(callback: (echo: boolean) => void) {\r\n        this.pauseCallbacks.push(callback);\r\n    }\r\n\r\n    onCurrentTime(callback: (currentTime: number, echo: boolean) => void) {\r\n        this.currentTimeCallbacks.push(callback);\r\n    }\r\n\r\n    onAudioTrackSelected(callback: (id: string) => void) {\r\n        this.audioTrackSelectedCallbacks.push(callback);\r\n    }\r\n\r\n    onExit(callback: () => void) {\r\n        this.exitCallbacks.push(callback);\r\n    }\r\n\r\n    onOffset(callback: (offset: number) => void) {\r\n        this.offsetCallbacks.push(callback);\r\n    }\r\n\r\n    onPopOutToggle(callback: () => void) {\r\n        this.popOutToggleCallbacks.push(callback);\r\n    }\r\n\r\n    onCopy(\r\n        callback: (\r\n            subtitle: SubtitleModel,\r\n            surroundingSubtitles: SubtitleModel[],\r\n            audio: AudioModel | undefined,\r\n            image: ImageModel | undefined,\r\n            url: string | undefined,\r\n            preventDuplicate: boolean,\r\n            id: string | undefined\r\n        ) => void\r\n    ) {\r\n        this.copyCallbacks.push(callback);\r\n    }\r\n\r\n    onCondensedModeToggle(callback: () => void) {\r\n        this.condensedModeToggleCallbacks.push(callback);\r\n    }\r\n\r\n    onHideSubtitlePlayerToggle(callback: () => void) {\r\n        this.hideSubtitlePlayerToggleCallbacks.push(callback);\r\n    }\r\n\r\n    onAppBarToggle(callback: () => void) {\r\n        this.appBarToggleCallbacks.push(callback);\r\n    }\r\n\r\n    onAnkiDialogRequest(callback: (forwardToVideo: boolean) => void) {\r\n        this.ankiDialogRequestCallbacks.push(callback);\r\n    }\r\n\r\n    onToggleSubtitleTrackInList(callback: (track: number) => void) {\r\n        this.toggleSubtitleTrackInListCallbacks.push(callback);\r\n    }\r\n\r\n    ready(duration: number) {\r\n        const message: ReadyToVideoMessage = { command: 'ready', duration: duration };\r\n        this.protocol.postMessage(message);\r\n    }\r\n\r\n    init() {\r\n        this.protocol.postMessage({ command: 'init' });\r\n    }\r\n\r\n    // Return a promise to implement the analogous HTMLMediaElement method\r\n    play(): Promise<void> {\r\n        this.protocol.postMessage({ command: 'play' });\r\n        return new Promise((resolve, reject) => resolve());\r\n    }\r\n\r\n    pause() {\r\n        this.protocol.postMessage({ command: 'pause' });\r\n    }\r\n\r\n    audioTrackSelected(id: string) {\r\n        const message: AudioTrackSelectedToVideoMessage = { command: 'audioTrackSelected', id: id };\r\n        this.protocol.postMessage(message);\r\n    }\r\n\r\n    subtitles(subtitles: SubtitleModel[], subtitleFileNames: string[]) {\r\n        this.protocol.postMessage({\r\n            command: 'subtitles',\r\n            value: subtitles,\r\n            name: subtitleFileNames.length > 0 ? subtitleFileNames[0] : null,\r\n            names: subtitleFileNames,\r\n        } as SubtitlesToVideoMessage);\r\n    }\r\n\r\n    subtitleSettings(settings: SubtitleSettings) {\r\n        const message: SubtitleSettingsToVideoMessage = { command: 'subtitleSettings', value: settings };\r\n        this.protocol.postMessage(message);\r\n    }\r\n\r\n    condensedModeToggle(enabled: boolean) {\r\n        const message: CondensedModeToggleToVideoMessage = {\r\n            command: 'condensedModeToggle',\r\n            value: enabled,\r\n        };\r\n        this.protocol.postMessage(message);\r\n    }\r\n\r\n    hideSubtitlePlayerToggle(hidden: boolean) {\r\n        const message: HideSubtitlePlayerToggleToVideoMessage = {\r\n            command: 'hideSubtitlePlayerToggle',\r\n            value: hidden,\r\n        };\r\n        this.protocol.postMessage(message);\r\n    }\r\n\r\n    appBarToggle(hidden: boolean) {\r\n        const message: AppBarToggleMessageToVideoMessage = {\r\n            command: 'appBarToggle',\r\n            value: hidden,\r\n        };\r\n        this.protocol.postMessage(message);\r\n    }\r\n\r\n    ankiDialogRequest() {\r\n        this.protocol.postMessage({ command: 'ankiDialogRequest' });\r\n    }\r\n\r\n    finishedAnkiDialogRequest(resume: boolean) {\r\n        const message: FinishedAnkiDialogRequestToVideoMessage = {\r\n            command: 'finishedAnkiDialogRequest',\r\n            resume: resume,\r\n        };\r\n        this.protocol.postMessage(message);\r\n    }\r\n\r\n    ankiSettings(settings: AnkiSettings) {\r\n        const message: AnkiSettingsToVideoMessage = { command: 'ankiSettings', value: settings };\r\n        this.protocol.postMessage(message);\r\n    }\r\n\r\n    miscSettings(settings: MiscSettings) {\r\n        const message: MiscSettingsToVideoMessage = { command: 'miscSettings', value: settings };\r\n        this.protocol.postMessage(message);\r\n    }\r\n\r\n    close() {\r\n        this.protocol.postMessage({ command: 'close' });\r\n        this.protocol.close();\r\n        this.readyCallbacks = [];\r\n        this.playCallbacks = [];\r\n        this.pauseCallbacks = [];\r\n        this.currentTimeCallbacks = [];\r\n        this.audioTrackSelectedCallbacks = [];\r\n        this.exitCallbacks = [];\r\n        this.offsetCallbacks = [];\r\n        this.popOutToggleCallbacks = [];\r\n        this.copyCallbacks = [];\r\n        this.condensedModeToggleCallbacks = [];\r\n        this.hideSubtitlePlayerToggleCallbacks = [];\r\n        this.appBarToggleCallbacks = [];\r\n        this.ankiDialogRequestCallbacks = [];\r\n        this.toggleSubtitleTrackInListCallbacks = [];\r\n    }\r\n}\r\n","import React, { useEffect, useState, useMemo, useCallback, useRef, MutableRefObject } from 'react';\r\nimport { makeStyles, Theme } from '@material-ui/core/styles';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport {\r\n    AsbplayerSettingsProvider,\r\n    AudioModel,\r\n    AudioTrackModel,\r\n    ImageModel,\r\n    KeyBindings,\r\n    mockSurroundingSubtitles,\r\n    SubtitleModel,\r\n    VideoTabModel,\r\n} from '@project/common';\r\nimport { timeDurationDisplay } from '../services/Util';\r\nimport BroadcastChannelVideoProtocol from '../services/BroadcastChannelVideoProtocol';\r\nimport ChromeTabVideoProtocol from '../services/ChromeTabVideoProtocol';\r\nimport Clock from '../services/Clock';\r\nimport Controls, { Point } from './Controls';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport MediaAdapter, { MediaElement } from '../services/MediaAdapter';\r\nimport SubtitlePlayer, { DisplaySubtitleModel } from './SubtitlePlayer';\r\nimport VideoChannel from '../services/VideoChannel';\r\nimport ChromeExtension from '../services/ChromeExtension';\r\nimport SubtitleReader from '../services/SubtitleReader';\r\n\r\ninterface StylesProps {\r\n    appBarHidden: boolean;\r\n}\r\n\r\nconst useStyles = makeStyles<Theme, StylesProps>({\r\n    root: ({ appBarHidden }) => ({\r\n        height: appBarHidden ? '100vh' : 'calc(100vh - 64px)',\r\n        position: 'relative',\r\n        overflowX: 'hidden',\r\n    }),\r\n    container: {\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n    videoFrame: {\r\n        width: '100%',\r\n        height: '100%',\r\n        border: 0,\r\n        display: 'block',\r\n    },\r\n});\r\n\r\nfunction trackLength(\r\n    audioRef: MutableRefObject<HTMLAudioElement | null>,\r\n    videoRef: MutableRefObject<MediaElement | undefined>,\r\n    subtitles: SubtitleModel[] | undefined,\r\n    useOffset?: boolean\r\n) {\r\n    let subtitlesLength;\r\n    if (subtitles && subtitles.length > 0) {\r\n        if (useOffset) {\r\n            subtitlesLength = subtitles[subtitles.length - 1].end;\r\n        } else {\r\n            subtitlesLength = subtitles[subtitles.length - 1].originalEnd;\r\n        }\r\n    } else {\r\n        subtitlesLength = 0;\r\n    }\r\n\r\n    const audioLength = audioRef.current && audioRef.current.duration ? 1000 * audioRef.current.duration : 0;\r\n\r\n    const videoLength = videoRef.current && videoRef.current.duration ? 1000 * videoRef.current.duration : 0;\r\n\r\n    return Math.max(videoLength, Math.max(subtitlesLength, audioLength));\r\n}\r\n\r\nexport interface MediaSources {\r\n    subtitleFiles: File[];\r\n    audioFile?: File;\r\n    audioFileUrl?: string;\r\n    videoFile?: File;\r\n    videoFileUrl?: string;\r\n}\r\n\r\nexport interface AnkiDialogFinishedRequest {\r\n    resume: boolean;\r\n    timestamp: number;\r\n}\r\n\r\ninterface PlayerProps {\r\n    sources: MediaSources;\r\n    subtitleReader: SubtitleReader;\r\n    settingsProvider: AsbplayerSettingsProvider;\r\n    extension: ChromeExtension;\r\n    videoFrameRef: MutableRefObject<HTMLIFrameElement | null>;\r\n    drawerOpen: boolean;\r\n    appBarHidden: boolean;\r\n    videoPopOut: boolean;\r\n    tab?: VideoTabModel;\r\n    availableTabs: VideoTabModel[];\r\n    ankiDialogRequestToVideo?: number;\r\n    ankiDialogRequested: boolean;\r\n    ankiDialogFinishedRequest: AnkiDialogFinishedRequest;\r\n    onError: (error: string) => void;\r\n    onUnloadAudio: (url: string) => void;\r\n    onUnloadVideo: (url: string) => void;\r\n    onCopy: (\r\n        subtitle: SubtitleModel,\r\n        surroundingSubtitles: SubtitleModel[],\r\n        audioFile: File | undefined,\r\n        videoFile: File | undefined,\r\n        subtitleFile: File | undefined,\r\n        audioTrack: string | undefined,\r\n        audio: AudioModel | undefined,\r\n        image: ImageModel | undefined,\r\n        url: string | undefined,\r\n        preventDuplicate: boolean | undefined,\r\n        id: string | undefined\r\n    ) => void;\r\n    onLoaded: () => void;\r\n    onTabSelected: (tab: VideoTabModel) => void;\r\n    onAnkiDialogRequest: (forwardToVideo?: boolean) => void;\r\n    onAppBarToggle: () => void;\r\n    onVideoPopOut: () => void;\r\n    disableKeyEvents: boolean;\r\n    jumpToSubtitle?: SubtitleModel;\r\n}\r\n\r\nexport default function Player({\r\n    sources: { subtitleFiles, audioFile, audioFileUrl, videoFile, videoFileUrl },\r\n    subtitleReader,\r\n    settingsProvider,\r\n    extension,\r\n    videoFrameRef,\r\n    drawerOpen,\r\n    appBarHidden,\r\n    videoPopOut,\r\n    tab,\r\n    availableTabs,\r\n    ankiDialogRequestToVideo,\r\n    ankiDialogRequested,\r\n    ankiDialogFinishedRequest,\r\n    onError,\r\n    onUnloadAudio,\r\n    onUnloadVideo,\r\n    onCopy,\r\n    onLoaded,\r\n    onTabSelected,\r\n    onAnkiDialogRequest,\r\n    onAppBarToggle,\r\n    onVideoPopOut,\r\n    disableKeyEvents,\r\n    jumpToSubtitle,\r\n}: PlayerProps) {\r\n    const [subtitles, setSubtitles] = useState<DisplaySubtitleModel[]>();\r\n    const subtitlesRef = useRef<SubtitleModel[]>();\r\n    subtitlesRef.current = subtitles;\r\n    const [loadingSubtitles, setLoadingSubtitles] = useState<boolean>(false);\r\n    const [playing, setPlaying] = useState<boolean>(false);\r\n    const [lastJumpToTopTimestamp, setLastJumpToTopTimestamp] = useState<number>(0);\r\n    const [offset, setOffset] = useState<number>(0);\r\n    const playingRef = useRef<boolean>();\r\n    playingRef.current = playing;\r\n    const [, updateState] = useState<any>();\r\n    const [audioTracks, setAudioTracks] = useState<AudioTrackModel[]>();\r\n    const [selectedAudioTrack, setSelectedAudioTrack] = useState<string>();\r\n    const [channelId, setChannelId] = useState<string>();\r\n    const [, setResumeOnFinishedAnkiDialogRequest] = useState<boolean>(false);\r\n    const [hideSubtitlePlayer, setHideSubtitlePlayer] = useState<boolean>(false);\r\n    const hideSubtitlePlayerRef = useRef<boolean>();\r\n    hideSubtitlePlayerRef.current = hideSubtitlePlayer;\r\n    const [disabledSubtitleTracks, setDisabledSubtitleTracks] = useState<{ [track: number]: boolean }>({});\r\n    const [condensedModeEnabled, setCondensedModeEnabled] = useState<boolean>(false);\r\n    const condensedModeEnabledRef = useRef<boolean>();\r\n    condensedModeEnabledRef.current = condensedModeEnabled;\r\n    const forceUpdate = useCallback(() => updateState({}), []);\r\n    const mousePositionRef = useRef<Point>({ x: 0, y: 0 });\r\n    const audioRef = useRef<HTMLAudioElement>(null);\r\n    const videoRef = useRef<MediaElement>();\r\n    const mediaAdapter = useMemo(() => {\r\n        if (audioFileUrl) {\r\n            return new MediaAdapter(audioRef);\r\n        } else if (videoFileUrl || tab) {\r\n            return new MediaAdapter(videoRef);\r\n        }\r\n\r\n        return new MediaAdapter({ current: null });\r\n    }, [audioFileUrl, videoFileUrl, tab]);\r\n    const clock = useMemo<Clock>(() => new Clock(), []);\r\n    const classes = useStyles({ appBarHidden });\r\n    const lengthRef = useRef<number>(0);\r\n    lengthRef.current = trackLength(audioRef, videoRef, subtitles, true);\r\n\r\n    const seek = useCallback(\r\n        async (time: number, clock: Clock, forwardToMedia: boolean) => {\r\n            clock.setTime(time);\r\n            forceUpdate();\r\n\r\n            if (forwardToMedia) {\r\n                await mediaAdapter.seek(time / 1000);\r\n            }\r\n        },\r\n        [forceUpdate, mediaAdapter]\r\n    );\r\n\r\n    const applyOffset = useCallback(\r\n        (offset: number, forwardToVideo: boolean) => {\r\n            setOffset(offset);\r\n\r\n            setSubtitles((subtitles) => {\r\n                if (!subtitles) {\r\n                    return;\r\n                }\r\n\r\n                const length = subtitles.length > 0 ? subtitles[subtitles.length - 1].end + offset : 0;\r\n\r\n                const newSubtitles = subtitles.map((s) => ({\r\n                    text: s.text,\r\n                    textImage: s.textImage,\r\n                    start: s.originalStart + offset,\r\n                    originalStart: s.originalStart,\r\n                    end: s.originalEnd + offset,\r\n                    originalEnd: s.originalEnd,\r\n                    displayTime: timeDurationDisplay(s.originalStart + offset, length),\r\n                    track: s.track,\r\n                }));\r\n\r\n                if (forwardToVideo) {\r\n                    if (videoRef.current instanceof VideoChannel) {\r\n                        videoRef.current.subtitles(\r\n                            newSubtitles,\r\n                            subtitleFiles.map((f) => f.name)\r\n                        );\r\n                    }\r\n                }\r\n\r\n                return newSubtitles;\r\n            });\r\n        },\r\n        [subtitleFiles]\r\n    );\r\n\r\n    useEffect(() => {\r\n        let channel: VideoChannel | undefined = undefined;\r\n        let channelClosed = false;\r\n\r\n        async function init() {\r\n            if (videoRef.current instanceof VideoChannel) {\r\n                videoRef.current.close();\r\n            }\r\n            videoRef.current = undefined;\r\n            clock.setTime(0);\r\n            clock.stop();\r\n            setOffset(0);\r\n            setPlaying(false);\r\n            setAudioTracks(undefined);\r\n            setSelectedAudioTrack(undefined);\r\n            setCondensedModeEnabled(false);\r\n            if (audioRef.current) {\r\n                audioRef.current.currentTime = 0;\r\n                audioRef.current.pause();\r\n            }\r\n\r\n            let subtitles: DisplaySubtitleModel[] | undefined;\r\n\r\n            if (subtitleFiles.length > 0) {\r\n                setLoadingSubtitles(true);\r\n\r\n                try {\r\n                    const nodes = await subtitleReader.subtitles(subtitleFiles);\r\n                    const length = nodes.length > 0 ? nodes[nodes.length - 1].end : 0;\r\n                    subtitles = nodes.map((s) => ({\r\n                        text: s.text,\r\n                        textImage: s.textImage,\r\n                        start: s.start,\r\n                        originalStart: s.start,\r\n                        end: s.end,\r\n                        originalEnd: s.end,\r\n                        displayTime: timeDurationDisplay(s.start, length),\r\n                        track: s.track,\r\n                    }));\r\n\r\n                    setSubtitles(subtitles);\r\n                    setLastJumpToTopTimestamp(Date.now());\r\n                } catch (e) {\r\n                    if (e instanceof Error) {\r\n                        onError(e.message);\r\n                    } else {\r\n                        onError(String(e));\r\n                    }\r\n                } finally {\r\n                    setLoadingSubtitles(false);\r\n                }\r\n            } else {\r\n                subtitles = undefined;\r\n            }\r\n\r\n            if (audioFileUrl) {\r\n                await mediaAdapter.onReady();\r\n                forceUpdate();\r\n            } else if (videoFileUrl || tab) {\r\n                if (channelClosed) {\r\n                    return;\r\n                }\r\n\r\n                if (videoFileUrl) {\r\n                    const channelId = uuidv4();\r\n                    channel = new VideoChannel(new BroadcastChannelVideoProtocol(channelId));\r\n                    setChannelId(channelId);\r\n                } else if (tab) {\r\n                    channel = new VideoChannel(new ChromeTabVideoProtocol(tab.id, tab.src, extension));\r\n                    channel.init();\r\n                } else {\r\n                    // Not possible\r\n                    // But throw error so typescript recognizes channel as defined\r\n                    throw new Error('Unreachable code');\r\n                }\r\n\r\n                videoRef.current = channel;\r\n                let subscribed = false;\r\n\r\n                channel.onExit(() => videoFileUrl && onUnloadVideo(videoFileUrl));\r\n                channel.onPopOutToggle(() => onVideoPopOut());\r\n                channel.onHideSubtitlePlayerToggle(() => {\r\n                    setHideSubtitlePlayer((hidden) => {\r\n                        channel?.hideSubtitlePlayerToggle(!hidden);\r\n                        return !hidden;\r\n                    });\r\n                });\r\n                channel.onAppBarToggle(() => {\r\n                    onAppBarToggle();\r\n                });\r\n                channel.onReady((paused) => {\r\n                    lengthRef.current = trackLength(audioRef, videoRef, subtitlesRef.current);\r\n                    channel?.ready(lengthRef.current);\r\n\r\n                    if (subtitlesRef.current) {\r\n                        channel?.subtitleSettings(settingsProvider.subtitleSettings);\r\n                        channel?.subtitles(\r\n                            subtitlesRef.current,\r\n                            subtitleFiles.map((f) => f.name)\r\n                        );\r\n                    }\r\n\r\n                    channel?.ankiSettings(settingsProvider.ankiSettings);\r\n                    channel?.miscSettings(settingsProvider.miscSettings);\r\n                    channel?.condensedModeToggle(condensedModeEnabledRef.current ?? false);\r\n                    channel?.hideSubtitlePlayerToggle(hideSubtitlePlayerRef.current ?? false);\r\n\r\n                    if (channel?.audioTracks && channel?.audioTracks?.length > 1) {\r\n                        setAudioTracks(channel?.audioTracks);\r\n                        setSelectedAudioTrack(channel?.selectedAudioTrack);\r\n                    } else {\r\n                        setAudioTracks(undefined);\r\n                        setSelectedAudioTrack(undefined);\r\n                    }\r\n\r\n                    if (videoRef.current) {\r\n                        clock.setTime(videoRef.current.currentTime * 1000);\r\n                    }\r\n\r\n                    if (paused) {\r\n                        clock.stop();\r\n                    } else {\r\n                        clock.start();\r\n                    }\r\n\r\n                    setPlaying(!paused);\r\n\r\n                    if (!subscribed) {\r\n                        channel?.onPlay((forwardToMedia) => play(clock, mediaAdapter, forwardToMedia));\r\n                        channel?.onPause((forwardToMedia) => pause(clock, mediaAdapter, forwardToMedia));\r\n                        channel?.onOffset((offset) => applyOffset(Math.max(-lengthRef.current ?? 0, offset), false));\r\n                        channel?.onCopy((subtitle, surroundingSubtitles, audio, image, url, preventDuplicate, id) =>\r\n                            onCopy(\r\n                                subtitle,\r\n                                surroundingSubtitles,\r\n                                audioFile,\r\n                                videoFile,\r\n                                subtitle ? subtitleFiles[subtitle.track] : undefined,\r\n                                channel?.selectedAudioTrack,\r\n                                audio,\r\n                                image,\r\n                                url,\r\n                                preventDuplicate,\r\n                                id\r\n                            )\r\n                        );\r\n                        channel?.onCondensedModeToggle(() =>\r\n                            setCondensedModeEnabled((enabled) => {\r\n                                const newValue = !enabled;\r\n                                channel?.condensedModeToggle(newValue);\r\n                                return newValue;\r\n                            })\r\n                        );\r\n                        channel?.onCurrentTime(async (currentTime, forwardToMedia) => {\r\n                            if (playingRef.current) {\r\n                                clock.stop();\r\n                            }\r\n\r\n                            await seek(currentTime * 1000, clock, forwardToMedia);\r\n\r\n                            if (playingRef.current) {\r\n                                clock.start();\r\n                            }\r\n                        });\r\n                        channel?.onAudioTrackSelected(async (id) => {\r\n                            if (playingRef.current) {\r\n                                clock.stop();\r\n                            }\r\n\r\n                            await mediaAdapter.onReady();\r\n                            if (playingRef.current) {\r\n                                clock.start();\r\n                            }\r\n\r\n                            setSelectedAudioTrack(id);\r\n                        });\r\n                        channel?.onAnkiDialogRequest((forwardToVideo) => onAnkiDialogRequest(forwardToVideo));\r\n                        channel?.onToggleSubtitleTrackInList((track) =>\r\n                            setDisabledSubtitleTracks((tracks) => {\r\n                                const newTracks = { ...tracks };\r\n                                newTracks[track] = !tracks[track];\r\n                                return newTracks;\r\n                            })\r\n                        );\r\n\r\n                        subscribed = true;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        init().then(() => onLoaded());\r\n\r\n        return () => {\r\n            channel?.close();\r\n            channelClosed = true;\r\n        };\r\n    }, [\r\n        subtitleReader,\r\n        extension,\r\n        settingsProvider,\r\n        clock,\r\n        mediaAdapter,\r\n        seek,\r\n        onLoaded,\r\n        onError,\r\n        onUnloadVideo,\r\n        onCopy,\r\n        onAnkiDialogRequest,\r\n        onAppBarToggle,\r\n        onVideoPopOut,\r\n        subtitleFiles,\r\n        audioFile,\r\n        audioFileUrl,\r\n        videoFile,\r\n        videoFileUrl,\r\n        tab,\r\n        forceUpdate,\r\n        videoFrameRef,\r\n        applyOffset,\r\n    ]);\r\n\r\n    function play(clock: Clock, mediaAdapter: MediaAdapter, forwardToMedia: boolean) {\r\n        setPlaying(true);\r\n        clock.start();\r\n\r\n        if (forwardToMedia) {\r\n            mediaAdapter.play();\r\n        }\r\n    }\r\n\r\n    function pause(clock: Clock, mediaAdapter: MediaAdapter, forwardToMedia: boolean) {\r\n        setPlaying(false);\r\n        clock.stop();\r\n\r\n        if (forwardToMedia) {\r\n            mediaAdapter.pause();\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (ankiDialogRequestToVideo && videoRef.current instanceof VideoChannel) {\r\n            videoRef.current.ankiDialogRequest();\r\n        }\r\n    }, [ankiDialogRequestToVideo]);\r\n\r\n    useEffect(() => {\r\n        if (ankiDialogFinishedRequest && ankiDialogFinishedRequest.timestamp > 0) {\r\n            if (videoRef.current instanceof VideoChannel) {\r\n                videoRef.current.finishedAnkiDialogRequest(ankiDialogFinishedRequest.resume);\r\n            }\r\n\r\n            setResumeOnFinishedAnkiDialogRequest((resumeOnFinishedAnkiDialogRequest) => {\r\n                if (resumeOnFinishedAnkiDialogRequest && ankiDialogFinishedRequest.resume) {\r\n                    play(clock, mediaAdapter, true);\r\n                }\r\n\r\n                return false;\r\n            });\r\n        }\r\n    }, [ankiDialogFinishedRequest, clock, mediaAdapter]);\r\n\r\n    useEffect(() => {\r\n        if (ankiDialogRequested && playingRef.current) {\r\n            pause(clock, mediaAdapter, true);\r\n            setResumeOnFinishedAnkiDialogRequest(true);\r\n        }\r\n    }, [ankiDialogRequested, clock, mediaAdapter]);\r\n\r\n    useEffect(() => {\r\n        if (!condensedModeEnabled) {\r\n            return;\r\n        }\r\n\r\n        if (!subtitles || subtitles.length === 0) {\r\n            return;\r\n        }\r\n\r\n        let seeking = false;\r\n        let expectedSeekTime = 1000;\r\n\r\n        const interval = setInterval(async () => {\r\n            const length = lengthRef.current;\r\n\r\n            if (!length) {\r\n                return;\r\n            }\r\n\r\n            const progress = clock.progress(length);\r\n\r\n            let currentOrNextIndex = 0;\r\n            let currentIndex = -1;\r\n\r\n            for (let i = subtitles.length - 1; i >= 0; --i) {\r\n                const s = subtitles[i];\r\n                const start = s.start / length;\r\n                const end = s.end / length;\r\n\r\n                if (progress >= start) {\r\n                    if (progress < end) {\r\n                        currentIndex = i;\r\n                        currentOrNextIndex = i;\r\n                    } else {\r\n                        currentOrNextIndex = Math.min(subtitles.length - 1, i + 1);\r\n                    }\r\n\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (currentIndex !== currentOrNextIndex) {\r\n                const nextSubtitle = subtitles[currentOrNextIndex];\r\n\r\n                if (nextSubtitle.start - progress * length < expectedSeekTime + 500) {\r\n                    return;\r\n                }\r\n\r\n                if (playingRef.current) {\r\n                    clock.stop();\r\n                }\r\n\r\n                if (!seeking) {\r\n                    seeking = true;\r\n                    const t0 = Date.now();\r\n                    await seek(nextSubtitle.start, clock, true);\r\n                    expectedSeekTime = Date.now() - t0;\r\n                    seeking = false;\r\n                }\r\n\r\n                if (playingRef.current) {\r\n                    clock.start();\r\n                }\r\n            }\r\n        }, 100);\r\n\r\n        return () => clearInterval(interval);\r\n    }, [subtitles, condensedModeEnabled, clock, seek]);\r\n\r\n    useEffect(() => {\r\n        if (videoPopOut && channelId && videoFileUrl) {\r\n            window.open(\r\n                process.env.PUBLIC_URL +\r\n                    '/?video=' +\r\n                    encodeURIComponent(videoFileUrl) +\r\n                    '&channel=' +\r\n                    channelId +\r\n                    '&popout=true',\r\n                'asbplayer-video-' + videoFileUrl,\r\n                'resizable,width=800,height=450'\r\n            );\r\n        }\r\n\r\n        setLastJumpToTopTimestamp(Date.now());\r\n    }, [videoPopOut, channelId, videoFileUrl, videoFrameRef]);\r\n\r\n    const handlePlay = useCallback(() => play(clock, mediaAdapter, true), [clock, mediaAdapter]);\r\n    const handlePause = useCallback(() => pause(clock, mediaAdapter, true), [clock, mediaAdapter]);\r\n    const handleSeek = useCallback(\r\n        async (progress: number) => {\r\n            if (!lengthRef.current) {\r\n                return;\r\n            }\r\n\r\n            if (playingRef.current) {\r\n                clock.stop();\r\n            }\r\n\r\n            await seek(progress * lengthRef.current, clock, true);\r\n\r\n            if (playingRef.current) {\r\n                clock.start();\r\n            }\r\n        },\r\n        [clock, seek]\r\n    );\r\n\r\n    const handleSeekToSubtitle = useCallback(\r\n        async (time: number, shouldPlay: boolean) => {\r\n            if (!shouldPlay) {\r\n                pause(clock, mediaAdapter, true);\r\n            }\r\n\r\n            if (playingRef.current) {\r\n                clock.stop();\r\n            }\r\n\r\n            await seek(time, clock, true);\r\n\r\n            if (shouldPlay && !playingRef.current) {\r\n                // play method will start the clock again\r\n                play(clock, mediaAdapter, true);\r\n            }\r\n        },\r\n        [clock, seek, mediaAdapter]\r\n    );\r\n\r\n    const handleCopy = useCallback(\r\n        (subtitle: SubtitleModel, surroundingSubtitles: SubtitleModel[], preventDuplicate: boolean) => {\r\n            onCopy(\r\n                subtitle,\r\n                surroundingSubtitles,\r\n                audioFile,\r\n                videoFile,\r\n                subtitleFiles[subtitle.track],\r\n                selectedAudioTrack,\r\n                undefined,\r\n                undefined,\r\n                undefined,\r\n                preventDuplicate,\r\n                undefined\r\n            );\r\n        },\r\n        [onCopy, audioFile, videoFile, subtitleFiles, selectedAudioTrack]\r\n    );\r\n\r\n    const handleMouseMove = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\r\n        mousePositionRef.current.x = e.screenX;\r\n        mousePositionRef.current.y = e.screenY;\r\n    }, []);\r\n\r\n    const handleAudioTrackSelected = useCallback(\r\n        async (id: string) => {\r\n            if (videoRef.current instanceof VideoChannel) {\r\n                videoRef.current.audioTrackSelected(id);\r\n            }\r\n\r\n            pause(clock, mediaAdapter, true);\r\n\r\n            await seek(0, clock, true);\r\n\r\n            if (playingRef.current) {\r\n                play(clock, mediaAdapter, true);\r\n            }\r\n        },\r\n        [clock, mediaAdapter, seek]\r\n    );\r\n\r\n    const handleOffsetChange = useCallback(\r\n        (offset: number) => {\r\n            applyOffset(Math.max(-lengthRef.current ?? 0, offset), true);\r\n        },\r\n        [applyOffset]\r\n    );\r\n\r\n    const handleVolumeChange = useCallback((volume: number) => {\r\n        if (audioRef.current instanceof HTMLMediaElement) {\r\n            audioRef.current.volume = volume;\r\n        }\r\n    }, []);\r\n\r\n    const handleCondensedModeToggle = useCallback(() => setCondensedModeEnabled((value) => !value), []);\r\n\r\n    const handleToggleSubtitleTrack = useCallback(\r\n        (track: number) =>\r\n            setDisabledSubtitleTracks((tracks) => {\r\n                const newTracks = { ...tracks };\r\n                newTracks[track] = !tracks[track];\r\n                return newTracks;\r\n            }),\r\n        []\r\n    );\r\n\r\n    useEffect(() => {\r\n        if (tab) {\r\n            return;\r\n        }\r\n\r\n        const interval = setInterval(async () => {\r\n            const length = lengthRef.current;\r\n            const progress = clock.progress(length);\r\n\r\n            if (progress >= 1) {\r\n                pause(clock, mediaAdapter, true);\r\n                await seek(0, clock, true);\r\n                setLastJumpToTopTimestamp(Date.now());\r\n            }\r\n        }, 1000);\r\n\r\n        return () => clearInterval(interval);\r\n    }, [clock, subtitles, mediaAdapter, seek, tab]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindPlay(\r\n            (event) => {\r\n                event.preventDefault();\r\n\r\n                if (playing) {\r\n                    pause(clock, mediaAdapter, true);\r\n                } else {\r\n                    play(clock, mediaAdapter, true);\r\n                }\r\n            },\r\n            () => disableKeyEvents\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [playing, clock, mediaAdapter, disableKeyEvents]);\r\n\r\n    useEffect(() => {\r\n        if ((audioFile || videoFile) && (!subtitles || subtitles.length === 0)) {\r\n            const unbindCopy = KeyBindings.bindCopy(\r\n                (event, subtitle) => {\r\n                    event.preventDefault();\r\n                    event.stopPropagation();\r\n                    const surroundingSubtitles = mockSurroundingSubtitles(subtitle, lengthRef.current, 5000);\r\n                    onCopy(\r\n                        subtitle,\r\n                        surroundingSubtitles,\r\n                        audioFile,\r\n                        videoFile,\r\n                        undefined,\r\n                        selectedAudioTrack,\r\n                        undefined,\r\n                        undefined,\r\n                        undefined,\r\n                        undefined,\r\n                        undefined\r\n                    );\r\n                },\r\n                () => disableKeyEvents,\r\n                () => {\r\n                    if (!lengthRef.current) {\r\n                        return undefined;\r\n                    }\r\n\r\n                    const timestamp = clock.time(lengthRef.current);\r\n                    const end = Math.min(timestamp + 5000, lengthRef.current);\r\n\r\n                    return {\r\n                        text: '',\r\n                        start: timestamp,\r\n                        originalStart: timestamp,\r\n                        end: end,\r\n                        originalEnd: end,\r\n                        track: 0,\r\n                    };\r\n                }\r\n            );\r\n\r\n            const unbindAnkiExport = KeyBindings.bindAnkiExport(\r\n                (event) => {\r\n                    event.preventDefault();\r\n                    event.stopPropagation();\r\n                    const timestamp = clock.time(lengthRef.current);\r\n                    const end = Math.min(timestamp + 5000, lengthRef.current);\r\n                    const subtitle = {\r\n                        text: '',\r\n                        start: timestamp,\r\n                        originalStart: timestamp,\r\n                        end: end,\r\n                        originalEnd: end,\r\n                        track: 0,\r\n                    };\r\n                    const surroundingSubtitles = mockSurroundingSubtitles(subtitle, lengthRef.current, 5000);\r\n                    onCopy(\r\n                        subtitle,\r\n                        surroundingSubtitles,\r\n                        audioFile,\r\n                        videoFile,\r\n                        undefined,\r\n                        selectedAudioTrack,\r\n                        undefined,\r\n                        undefined,\r\n                        undefined,\r\n                        undefined,\r\n                        undefined\r\n                    );\r\n\r\n                    onAnkiDialogRequest();\r\n                },\r\n                () => false\r\n            );\r\n\r\n            return () => {\r\n                unbindCopy();\r\n                unbindAnkiExport();\r\n            };\r\n        }\r\n    }, [audioFile, videoFile, subtitles, clock, selectedAudioTrack, disableKeyEvents, onCopy, onAnkiDialogRequest]);\r\n\r\n    useEffect(() => {\r\n        if (videoRef.current instanceof VideoChannel) {\r\n            videoRef.current.appBarToggle(appBarHidden);\r\n        }\r\n    }, [appBarHidden]);\r\n\r\n    const length = lengthRef.current;\r\n    const loaded = audioFileUrl || videoFileUrl || subtitles;\r\n    const videoInWindow = Boolean(loaded && videoFileUrl && !videoPopOut);\r\n\r\n    return (\r\n        <div onMouseMove={handleMouseMove} className={classes.root}>\r\n            <Grid container direction=\"row\" wrap=\"nowrap\" className={classes.container}>\r\n                {videoInWindow && (\r\n                    <Grid item style={{ flexGrow: 1, minWidth: 600 }}>\r\n                        <iframe\r\n                            ref={videoFrameRef}\r\n                            className={classes.videoFrame}\r\n                            src={\r\n                                process.env.PUBLIC_URL +\r\n                                '/?video=' +\r\n                                encodeURIComponent(videoFileUrl!) +\r\n                                '&channel=' +\r\n                                channelId +\r\n                                '&popout=false'\r\n                            }\r\n                            title=\"asbplayer\"\r\n                        />\r\n                    </Grid>\r\n                )}\r\n                {(!videoInWindow || (subtitles && subtitles?.length > 0)) && (\r\n                    <Grid\r\n                        item\r\n                        style={{\r\n                            flexGrow: videoInWindow ? 0 : 1,\r\n                            width: videoInWindow && hideSubtitlePlayer ? 0 : 'auto',\r\n                        }}\r\n                    >\r\n                        {loaded && !(videoFileUrl && !videoPopOut) && (\r\n                            <Controls\r\n                                mousePositionRef={mousePositionRef}\r\n                                playing={playing}\r\n                                clock={clock}\r\n                                length={length}\r\n                                displayLength={trackLength(audioRef, videoRef, subtitles, false)}\r\n                                audioTracks={audioTracks}\r\n                                selectedAudioTrack={selectedAudioTrack}\r\n                                tabs={(!videoFileUrl && !audioFileUrl && availableTabs) || undefined}\r\n                                selectedTab={tab}\r\n                                audioFile={audioFile?.name}\r\n                                videoFile={videoFile?.name}\r\n                                offsetEnabled={true}\r\n                                offset={offset}\r\n                                volumeEnabled={Boolean(audioFileUrl)}\r\n                                condensedModeToggleEnabled={Boolean(audioFileUrl) && subtitles && subtitles.length > 0}\r\n                                condensedModeEnabled={condensedModeEnabled}\r\n                                onPlay={handlePlay}\r\n                                onPause={handlePause}\r\n                                onSeek={handleSeek}\r\n                                onAudioTrackSelected={handleAudioTrackSelected}\r\n                                onTabSelected={onTabSelected}\r\n                                onUnloadAudio={() => audioFileUrl && onUnloadAudio(audioFileUrl)}\r\n                                onUnloadVideo={() => videoFileUrl && onUnloadVideo(videoFileUrl)}\r\n                                onOffsetChange={handleOffsetChange}\r\n                                onVolumeChange={handleVolumeChange}\r\n                                onCondensedModeToggle={handleCondensedModeToggle}\r\n                                disableKeyEvents={disableKeyEvents}\r\n                                settingsProvider={settingsProvider}\r\n                                showOnMouseMovement={true}\r\n                            />\r\n                        )}\r\n                        <SubtitlePlayer\r\n                            playing={playing}\r\n                            subtitles={subtitles}\r\n                            clock={clock}\r\n                            length={length}\r\n                            jumpToSubtitle={jumpToSubtitle}\r\n                            drawerOpen={drawerOpen}\r\n                            appBarHidden={appBarHidden}\r\n                            compressed={Boolean(videoFileUrl && !videoPopOut)}\r\n                            loading={loadingSubtitles}\r\n                            displayHelp={audioFile?.name || (videoPopOut && videoFile?.name) || undefined}\r\n                            disableKeyEvents={disableKeyEvents}\r\n                            lastJumpToTopTimestamp={lastJumpToTopTimestamp}\r\n                            hidden={videoInWindow && hideSubtitlePlayer}\r\n                            disabledSubtitleTracks={disabledSubtitleTracks}\r\n                            onSeek={handleSeekToSubtitle}\r\n                            onCopy={handleCopy}\r\n                            onOffsetChange={handleOffsetChange}\r\n                            onAnkiDialogRequest={onAnkiDialogRequest}\r\n                            onToggleSubtitleTrack={handleToggleSubtitleTrack}\r\n                            settingsProvider={settingsProvider}\r\n                        />\r\n                    </Grid>\r\n                )}\r\n            </Grid>\r\n            <audio ref={audioRef} src={audioFileUrl} />\r\n        </div>\r\n    );\r\n}\r\n","import { useState, useEffect } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\ninterface Props {\r\n    open: boolean;\r\n    onProceed: (fieldName: string) => void;\r\n    onCancel: () => void;\r\n    existingCustomFieldNames: string[];\r\n}\r\n\r\nexport default function CustomFieldDialog({ open, onProceed, onCancel, existingCustomFieldNames }: Props) {\r\n    const [fieldName, setFieldName] = useState<string>('');\r\n\r\n    useEffect(() => {\r\n        setFieldName('');\r\n    }, [open]);\r\n\r\n    const fieldExists = [\r\n        ...existingCustomFieldNames,\r\n        'Sentence',\r\n        'Word',\r\n        'Definition',\r\n        'Source',\r\n        'Image',\r\n        'Audio',\r\n    ].includes(fieldName);\r\n\r\n    return (\r\n        <Dialog\r\n            open={open}\r\n            disableEnforceFocus\r\n            fullWidth\r\n            maxWidth=\"xs\"\r\n            onClose={onCancel}\r\n        >\r\n            <DialogTitle>New Custom Field</DialogTitle>\r\n            <DialogContent>\r\n                <form>\r\n                    <TextField\r\n                        error={fieldExists}\r\n                        helperText={fieldExists && `Field ${fieldName} already exists`}\r\n                        variant=\"filled\"\r\n                        fullWidth\r\n                        label=\"Field Name\"\r\n                        value={fieldName}\r\n                        color=\"secondary\"\r\n                        onChange={(e) => setFieldName(e.target.value)}\r\n                    />\r\n                </form>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={() => onCancel()}>Cancel</Button>\r\n                <Button disabled={fieldExists || fieldName.trim() === ''} onClick={() => onProceed(fieldName.trim())}>\r\n                    Create\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n}\r\n","import React, { useCallback, useState, useEffect, useMemo, ChangeEvent, ReactNode } from 'react';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport { computeStyles } from '../services/Util';\r\nimport Button from '@material-ui/core/Button';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport CustomFieldDialog from './CustomFieldDialog';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Link from '@material-ui/core/Link';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport Select from '@material-ui/core/Select';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Theme } from '@material-ui/core/styles';\r\nimport { Anki, AsbplayerSettings } from '@project/common';\r\nimport { TagsTextField } from '@project/common/components';\r\n\r\nconst useStyles = makeStyles<Theme>((theme) => ({\r\n    root: {\r\n        '& .MuiTextField-root': {\r\n            marginTop: theme.spacing(1),\r\n            marginBottom: theme.spacing(1),\r\n        },\r\n    },\r\n    subtitleSetting: {\r\n        '& .MuiTextField-root': {\r\n            marginTop: theme.spacing(1),\r\n            marginBottom: theme.spacing(1),\r\n        },\r\n    },\r\n    subtitlePreview: {\r\n        backgroundImage: `linear-gradient(45deg, ${theme.palette.action.disabledBackground} 25%, transparent 25%), linear-gradient(-45deg, ${theme.palette.action.disabledBackground} 25%, transparent 25%), linear-gradient(45deg, transparent 75%, ${theme.palette.action.disabledBackground} 75%), linear-gradient(-45deg, transparent 75%,${theme.palette.action.disabledBackground} 75%)`,\r\n        backgroundSize: '20px 20px',\r\n        backgroundPosition: '0 0, 0 10px, 10px -10px, -10px 0px',\r\n        marginTop: theme.spacing(1),\r\n        marginBottom: theme.spacing(1),\r\n        maxWidth: '100%',\r\n        padding: 10,\r\n    },\r\n    subtitlePreviewInput: {\r\n        border: 'none',\r\n        width: '100%',\r\n        textAlign: 'center',\r\n        backgroundColor: 'rgba(0,0,0,0)',\r\n        '&:focus': {\r\n            outline: 'none',\r\n        },\r\n    },\r\n    addFieldButton: {\r\n        width: '100%',\r\n    },\r\n}));\r\n\r\nconst useSelectableSettingStyles = makeStyles<Theme>((theme) => ({\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n    },\r\n    root: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        justifyContent: 'end',\r\n        alignItems: 'flex-end',\r\n    },\r\n}));\r\n\r\ninterface SelectableSettingProps {\r\n    label: string;\r\n    value: string;\r\n    selections?: string[];\r\n    removable?: boolean;\r\n    onChange: (event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => void;\r\n    onSelectionChange: (event: ChangeEvent<{ name?: string | undefined; value: unknown }>, child: ReactNode) => void;\r\n    onRemoval?: () => void;\r\n}\r\n\r\nfunction SelectableSetting({\r\n    label,\r\n    value,\r\n    selections,\r\n    removable,\r\n    onChange,\r\n    onSelectionChange,\r\n    onRemoval,\r\n}: SelectableSettingProps) {\r\n    const classes = useSelectableSettingStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <TextField\r\n                label={label}\r\n                value={value}\r\n                onChange={onChange}\r\n                fullWidth\r\n                color=\"secondary\"\r\n                InputProps={{\r\n                    endAdornment: removable && (\r\n                        <InputAdornment position=\"end\">\r\n                            <IconButton onClick={(e) => onRemoval?.()}>\r\n                                <DeleteIcon />\r\n                            </IconButton>\r\n                        </InputAdornment>\r\n                    ),\r\n                }}\r\n            />\r\n            <FormControl className={classes.formControl}>\r\n                <InputLabel></InputLabel>\r\n                <Select value={value} disabled={!selections} color=\"secondary\" onChange={onSelectionChange}>\r\n                    {selections &&\r\n                        selections.map((s) => (\r\n                            <MenuItem key={s} value={s}>\r\n                                {s}\r\n                            </MenuItem>\r\n                        ))}\r\n                </Select>\r\n            </FormControl>\r\n        </div>\r\n    );\r\n}\r\n\r\ninterface Props {\r\n    anki: Anki;\r\n    open: boolean;\r\n    settings: AsbplayerSettings;\r\n    onClose: (settings: AsbplayerSettings) => void;\r\n}\r\n\r\nexport default function SettingsDialog({ anki, open, settings, onClose }: Props) {\r\n    const classes = useStyles();\r\n    const [ankiConnectUrl, setAnkiConnectUrl] = useState<string>(settings.ankiConnectUrl);\r\n    const [ankiConnectUrlError, setAnkiConnectUrlError] = useState<string>();\r\n    const [ankiConnectUrlChangeTimestamp, setAnkiConnectUrlChangeTimestamp] = useState<number>(0);\r\n    const [deck, setDeck] = useState<string>(settings.deck || '');\r\n    const [deckNames, setDeckNames] = useState<string[]>();\r\n    const [noteType, setNoteType] = useState<string>(settings.noteType || '');\r\n    const [modelNames, setModelNames] = useState<string[]>();\r\n    const [sentenceField, setSentenceField] = useState<string>(settings.sentenceField || '');\r\n    const [definitionField, setDefinitionField] = useState<string>(settings.definitionField || '');\r\n    const [audioField, setAudioField] = useState<string>(settings.audioField || '');\r\n    const [imageField, setImageField] = useState<string>(settings.imageField || '');\r\n    const [wordField, setWordField] = useState<string>(settings.wordField || '');\r\n    const [sourceField, setSourceField] = useState<string>(settings.sourceField || '');\r\n    const [urlField, setUrlField] = useState<string>(settings.urlField || '');\r\n    const [customFields, setCustomFields] = useState<{ [key: string]: string }>(settings.customAnkiFields);\r\n    const [tags, setTags] = useState<string[]>(settings.tags);\r\n    const [preferMp3, setPreferMp3] = useState<boolean>(settings.preferMp3);\r\n    const [fieldNames, setFieldNames] = useState<string[]>();\r\n    const [customFieldDialogOpen, setCustomFieldDialogOpen] = useState<boolean>(false);\r\n    const [audioPaddingStart, setAudioPaddingStart] = useState<number>(settings.audioPaddingStart);\r\n    const [audioPaddingEnd, setAudioPaddingEnd] = useState<number>(settings.audioPaddingEnd);\r\n    const [maxImageWidth, setMaxImageWidth] = useState<number>(settings.maxImageWidth);\r\n    const [maxImageHeight, setMaxImageHeight] = useState<number>(settings.maxImageHeight);\r\n    const [subtitleColor, setSubtitleColor] = useState<string>(settings.subtitleColor);\r\n    const [subtitleSize, setSubtitleSize] = useState<number>(settings.subtitleSize);\r\n    const [subtitleOutlineColor, setSubtitleOutlineColor] = useState<string>(settings.subtitleOutlineColor);\r\n    const [subtitleOutlineThickness, setSubtitleOutlineThickness] = useState<number>(settings.subtitleOutlineThickness);\r\n    const [subtitleBackgroundColor, setSubtitleBackgroundColor] = useState<string>(settings.subtitleBackgroundColor);\r\n    const [subtitleBackgroundOpacity, setSubtitleBackgroundOpacity] = useState<number>(\r\n        settings.subtitleBackgroundOpacity\r\n    );\r\n    const [subtitleFontFamily, setSubtitleFontFamily] = useState<string>(settings.subtitleFontFamily);\r\n    const [imageBasedSubtitleScaleFactor, setImageBasedSubtitleScaleFactor] = useState<number>(settings.imageBasedSubtitleScaleFactor);\r\n    const [subtitlePreview, setSubtitlePreview] = useState<string>(settings.subtitlePreview);\r\n    const [themeType, setThemeType] = useState<'dark' | 'light'>(settings.themeType);\r\n\r\n    const handleAnkiConnectUrlChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\r\n        setAnkiConnectUrl(e.target.value);\r\n        setAnkiConnectUrlChangeTimestamp(Date.now());\r\n    }, []);\r\n\r\n    const handleRetryAnkiConnectUrl = useCallback(\r\n        (e: React.MouseEvent<HTMLButtonElement>) => setAnkiConnectUrlChangeTimestamp(Date.now()),\r\n        []\r\n    );\r\n    const handleDeckChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setDeck(e.target.value),\r\n        []\r\n    );\r\n    const handleDeckSelectionChange = useCallback(\r\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setDeck(e.target.value as string),\r\n        []\r\n    );\r\n    const handleNoteTypeChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setNoteType(e.target.value),\r\n        []\r\n    );\r\n    const handleNoteTypeSelectionChange = useCallback(\r\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setNoteType(e.target.value as string),\r\n        []\r\n    );\r\n    const handleSentenceFieldChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSentenceField(e.target.value),\r\n        []\r\n    );\r\n    const handleSentenceFieldSelectionChange = useCallback(\r\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setSentenceField(e.target.value as string),\r\n        []\r\n    );\r\n    const handleDefinitionFieldChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setDefinitionField(e.target.value),\r\n        []\r\n    );\r\n    const handleDefinitionFieldSelectionChange = useCallback(\r\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setDefinitionField(e.target.value as string),\r\n        []\r\n    );\r\n    const handleAudioFieldChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setAudioField(e.target.value),\r\n        []\r\n    );\r\n    const handleAudioFieldSelectionChange = useCallback(\r\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setAudioField(e.target.value as string),\r\n        []\r\n    );\r\n    const handleImageFieldChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setImageField(e.target.value),\r\n        []\r\n    );\r\n    const handleImageFieldSelectionChange = useCallback(\r\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setImageField(e.target.value as string),\r\n        []\r\n    );\r\n    const handleWordFieldChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setWordField(e.target.value),\r\n        []\r\n    );\r\n    const handleWordFieldSelectionChange = useCallback(\r\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setWordField(e.target.value as string),\r\n        []\r\n    );\r\n    const handleSourceFieldChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSourceField(e.target.value),\r\n        []\r\n    );\r\n    const handleSourceFieldSelectionChange = useCallback(\r\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setSourceField(e.target.value as string),\r\n        []\r\n    );\r\n    const handleUrlFieldChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setUrlField(e.target.value),\r\n        []\r\n    );\r\n    const handleUrlFieldSelectionChange = useCallback(\r\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setUrlField(e.target.value as string),\r\n        []\r\n    );\r\n    const handleAudioPaddingStart = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setAudioPaddingStart(Number(e.target.value)),\r\n        []\r\n    );\r\n    const handleAudioPaddingEnd = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setAudioPaddingEnd(Number(e.target.value)),\r\n        []\r\n    );\r\n    const handleMaxImageWidth = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setMaxImageWidth(Number(e.target.value)),\r\n        []\r\n    );\r\n    const handleMaxImageHeight = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setMaxImageHeight(Number(e.target.value)),\r\n        []\r\n    );\r\n    const handleSubtitleColorChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleColor(e.target.value),\r\n        []\r\n    );\r\n    const handleSubtitleSizeChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleSize(Number(e.target.value)),\r\n        []\r\n    );\r\n    const handleSubtitleOutlineColorChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleOutlineColor(e.target.value),\r\n        []\r\n    );\r\n    const handleSubtitleOutlineThicknessChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleOutlineThickness(Number(e.target.value)),\r\n        []\r\n    );\r\n    const handleSubtitleBackgroundColorChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleBackgroundColor(e.target.value),\r\n        []\r\n    );\r\n    const handleSubtitleBackgroundOpacityChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) =>\r\n            setSubtitleBackgroundOpacity(Number(e.target.value)),\r\n        []\r\n    );\r\n    const handleSubtitleFontFamilyChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleFontFamily(e.target.value),\r\n        []\r\n    );\r\n    const handleSubtitlePreviewChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitlePreview(e.target.value),\r\n        []\r\n    );\r\n    const handleImageBasedSubtitleScaleFactorChange = useCallback(\r\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setImageBasedSubtitleScaleFactor(Number(e.target.value)),\r\n        []\r\n    );\r\n    const handleAddCustomField = useCallback((customFieldName: string) => {\r\n        setCustomFields((oldCustomFields: { [key: string]: string }) => {\r\n            const newCustomFields: { [key: string]: string } = {};\r\n            Object.assign(newCustomFields, oldCustomFields);\r\n            newCustomFields[customFieldName] = '';\r\n            return newCustomFields;\r\n        });\r\n        setCustomFieldDialogOpen(false);\r\n    }, []);\r\n    const handleCustomFieldChange = useCallback((customFieldName: string, value: string) => {\r\n        setCustomFields((oldCustomFields: { [key: string]: string }) => {\r\n            const newCustomFields: { [key: string]: string } = {};\r\n            Object.assign(newCustomFields, oldCustomFields);\r\n            newCustomFields[customFieldName] = value;\r\n            return newCustomFields;\r\n        });\r\n    }, []);\r\n    const handleCustomFieldRemoval = useCallback(\r\n        (customFieldName: string) =>\r\n            setCustomFields((oldCustomFields: { [key: string]: string }) => {\r\n                const newCustomFields: { [key: string]: string } = {};\r\n                Object.assign(newCustomFields, oldCustomFields);\r\n                delete newCustomFields[customFieldName];\r\n                return newCustomFields;\r\n            }),\r\n        []\r\n    );\r\n    const handleTagsChange = useCallback((newTags: string[]) => {\r\n        setTags(newTags);\r\n    }, []);\r\n    const handlePreferMp3Change = useCallback((e: ChangeEvent<HTMLInputElement>) => setPreferMp3(e.target.checked), []);\r\n    const handleThemeTypeChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.value !== 'dark' && e.target.value !== 'light') {\r\n            throw new Error(`Invalid theme type ${e.target.value}`);\r\n        }\r\n\r\n        setThemeType(e.target.value);\r\n    }, []);\r\n    const subtitlePreviewStyles = useMemo(\r\n        () =>\r\n            computeStyles({\r\n                subtitleColor: subtitleColor,\r\n                subtitleSize: subtitleSize,\r\n                subtitleOutlineThickness: subtitleOutlineThickness,\r\n                subtitleOutlineColor: subtitleOutlineColor,\r\n                subtitleBackgroundOpacity: subtitleBackgroundOpacity,\r\n                subtitleBackgroundColor: subtitleBackgroundColor,\r\n                subtitleFontFamily: subtitleFontFamily,\r\n            }),\r\n        [\r\n            subtitleColor,\r\n            subtitleSize,\r\n            subtitleOutlineThickness,\r\n            subtitleOutlineColor,\r\n            subtitleBackgroundOpacity,\r\n            subtitleBackgroundColor,\r\n            subtitleFontFamily,\r\n        ]\r\n    );\r\n\r\n    useEffect(() => {\r\n        let canceled = false;\r\n\r\n        const timeout = setTimeout(async () => {\r\n            try {\r\n                if (canceled) {\r\n                    return;\r\n                }\r\n\r\n                await anki.requestPermission(ankiConnectUrl);\r\n                setDeckNames(await anki.deckNames(ankiConnectUrl));\r\n                setModelNames(await anki.modelNames(ankiConnectUrl));\r\n                setAnkiConnectUrlError(undefined);\r\n            } catch (e) {\r\n                if (canceled) {\r\n                    return;\r\n                }\r\n\r\n                console.error(e);\r\n                setDeckNames(undefined);\r\n                setModelNames(undefined);\r\n\r\n                if (e instanceof Error) {\r\n                    setAnkiConnectUrlError(e.message);\r\n                } else if (typeof e === 'string') {\r\n                    setAnkiConnectUrlError(e);\r\n                } else {\r\n                    setAnkiConnectUrlError(String(e));\r\n                }\r\n            }\r\n        }, 1000);\r\n\r\n        return () => {\r\n            canceled = true;\r\n            clearTimeout(timeout);\r\n        };\r\n    }, [anki, ankiConnectUrl, ankiConnectUrlChangeTimestamp]);\r\n\r\n    useEffect(() => {\r\n        if (!noteType || ankiConnectUrlError) {\r\n            return undefined;\r\n        }\r\n\r\n        let canceled = false;\r\n\r\n        async function refreshFieldNames() {\r\n            try {\r\n                if (canceled) {\r\n                    return;\r\n                }\r\n\r\n                setFieldNames(['', ...(await anki.modelFieldNames(noteType, ankiConnectUrl))]);\r\n                setAnkiConnectUrlError(undefined);\r\n            } catch (e) {\r\n                if (canceled) {\r\n                    return;\r\n                }\r\n\r\n                console.error(e);\r\n                setFieldNames(undefined);\r\n\r\n                if (e instanceof Error) {\r\n                    setAnkiConnectUrlError(e.message);\r\n                } else if (typeof e === 'string') {\r\n                    setAnkiConnectUrlError(e);\r\n                } else {\r\n                    setAnkiConnectUrlError(String(e));\r\n                }\r\n            }\r\n        }\r\n\r\n        refreshFieldNames();\r\n\r\n        return () => {\r\n            canceled = true;\r\n        };\r\n    }, [anki, noteType, ankiConnectUrl, ankiConnectUrlError, ankiConnectUrlChangeTimestamp]);\r\n\r\n    const handleClose = useCallback(() => {\r\n        onClose({\r\n            ankiConnectUrl: ankiConnectUrl,\r\n            deck: deck,\r\n            noteType: noteType,\r\n            sentenceField: sentenceField,\r\n            definitionField: definitionField,\r\n            audioField: audioField,\r\n            imageField: imageField,\r\n            wordField: wordField,\r\n            sourceField: sourceField,\r\n            urlField: urlField,\r\n            tags: tags.filter((t) => t !== ''),\r\n            subtitleSize: Number(subtitleSize),\r\n            subtitleColor: subtitleColor,\r\n            subtitleOutlineThickness: Number(subtitleOutlineThickness),\r\n            subtitleOutlineColor: subtitleOutlineColor,\r\n            subtitleBackgroundColor: subtitleBackgroundColor,\r\n            subtitleBackgroundOpacity: Number(subtitleBackgroundOpacity),\r\n            subtitleFontFamily: subtitleFontFamily,\r\n            subtitlePreview: subtitlePreview,\r\n            imageBasedSubtitleScaleFactor: imageBasedSubtitleScaleFactor,\r\n            customAnkiFields: customFields,\r\n            preferMp3: preferMp3,\r\n            themeType: themeType,\r\n            audioPaddingStart: audioPaddingStart,\r\n            audioPaddingEnd: audioPaddingEnd,\r\n            maxImageWidth: maxImageWidth,\r\n            maxImageHeight: maxImageHeight,\r\n            surroundingSubtitlesCountRadius: settings.surroundingSubtitlesCountRadius,\r\n            surroundingSubtitlesTimeRadius: settings.surroundingSubtitlesTimeRadius,\r\n            volume: settings.volume,\r\n            theaterMode: settings.theaterMode,\r\n        });\r\n    }, [\r\n        onClose,\r\n        ankiConnectUrl,\r\n        deck,\r\n        noteType,\r\n        sentenceField,\r\n        definitionField,\r\n        audioField,\r\n        imageField,\r\n        wordField,\r\n        sourceField,\r\n        urlField,\r\n        customFields,\r\n        tags,\r\n        preferMp3,\r\n        subtitleSize,\r\n        subtitleColor,\r\n        subtitleOutlineThickness,\r\n        subtitleOutlineColor,\r\n        subtitleBackgroundColor,\r\n        subtitleBackgroundOpacity,\r\n        subtitleFontFamily,\r\n        subtitlePreview,\r\n        imageBasedSubtitleScaleFactor,\r\n        themeType,\r\n        audioPaddingStart,\r\n        audioPaddingEnd,\r\n        maxImageWidth,\r\n        maxImageHeight,\r\n        settings.surroundingSubtitlesCountRadius,\r\n        settings.surroundingSubtitlesTimeRadius,\r\n        settings.volume,\r\n        settings.theaterMode,\r\n    ]);\r\n\r\n    const customFieldInputs = Object.keys(customFields).map((customFieldName) => {\r\n        return (\r\n            <SelectableSetting\r\n                key={customFieldName}\r\n                label={`${customFieldName} Field`}\r\n                value={customFields[customFieldName]}\r\n                selections={fieldNames!}\r\n                onChange={(e) => handleCustomFieldChange(customFieldName, e.target.value)}\r\n                onSelectionChange={(e) => handleCustomFieldChange(customFieldName, e.target.value as string)}\r\n                onRemoval={() => handleCustomFieldRemoval(customFieldName)}\r\n                removable={true}\r\n            />\r\n        );\r\n    });\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <CustomFieldDialog\r\n                open={customFieldDialogOpen}\r\n                existingCustomFieldNames={Object.keys(customFields)}\r\n                onProceed={handleAddCustomField}\r\n                onCancel={() => setCustomFieldDialogOpen(false)}\r\n            />\r\n            <Dialog open={open} maxWidth=\"xs\" fullWidth onClose={handleClose}>\r\n                <DialogTitle>Settings</DialogTitle>\r\n                <DialogContent>\r\n                    <Grid container direction=\"column\" spacing={3}>\r\n                        <Grid item>\r\n                            <FormLabel>Anki</FormLabel>\r\n                            <FormGroup className={classes.root}>\r\n                                <TextField\r\n                                    label=\"Anki Connect URL\"\r\n                                    value={ankiConnectUrl}\r\n                                    error={Boolean(ankiConnectUrlError)}\r\n                                    helperText={ankiConnectUrlError}\r\n                                    color=\"secondary\"\r\n                                    onChange={handleAnkiConnectUrlChange}\r\n                                    InputProps={{\r\n                                        endAdornment: (\r\n                                            <InputAdornment position=\"end\">\r\n                                                <IconButton onClick={handleRetryAnkiConnectUrl}>\r\n                                                    <RefreshIcon />\r\n                                                </IconButton>\r\n                                            </InputAdornment>\r\n                                        ),\r\n                                    }}\r\n                                />\r\n                                <FormHelperText>\r\n                                    Ensure that {window.location.protocol + '//' + window.location.hostname} is in the\r\n                                    webCorsOriginList in your AnkiConnect settings as in this{' '}\r\n                                    <Link\r\n                                        color=\"secondary\"\r\n                                        target=\"_blank\"\r\n                                        rel=\"noreferrer\"\r\n                                        href=\"https://youtu.be/Mv7fEVb6PHo?t=44\"\r\n                                    >\r\n                                        video\r\n                                    </Link>\r\n                                    .\r\n                                </FormHelperText>\r\n                                <SelectableSetting\r\n                                    label=\"Deck\"\r\n                                    value={deck}\r\n                                    selections={deckNames}\r\n                                    onChange={handleDeckChange}\r\n                                    onSelectionChange={handleDeckSelectionChange}\r\n                                />\r\n                                <SelectableSetting\r\n                                    label=\"Note Type\"\r\n                                    value={noteType}\r\n                                    selections={modelNames}\r\n                                    onChange={handleNoteTypeChange}\r\n                                    onSelectionChange={handleNoteTypeSelectionChange}\r\n                                />\r\n                                <SelectableSetting\r\n                                    label=\"Sentence Field\"\r\n                                    value={sentenceField}\r\n                                    selections={fieldNames}\r\n                                    onChange={handleSentenceFieldChange}\r\n                                    onSelectionChange={handleSentenceFieldSelectionChange}\r\n                                />\r\n                                <SelectableSetting\r\n                                    label=\"Definition Field\"\r\n                                    value={definitionField}\r\n                                    selections={fieldNames}\r\n                                    onChange={handleDefinitionFieldChange}\r\n                                    onSelectionChange={handleDefinitionFieldSelectionChange}\r\n                                />\r\n                                <SelectableSetting\r\n                                    label=\"Word Field\"\r\n                                    value={wordField}\r\n                                    selections={fieldNames}\r\n                                    onChange={handleWordFieldChange}\r\n                                    onSelectionChange={handleWordFieldSelectionChange}\r\n                                />\r\n                                <SelectableSetting\r\n                                    label=\"Audio Field\"\r\n                                    value={audioField}\r\n                                    selections={fieldNames}\r\n                                    onChange={handleAudioFieldChange}\r\n                                    onSelectionChange={handleAudioFieldSelectionChange}\r\n                                />\r\n                                <SelectableSetting\r\n                                    label=\"Image Field\"\r\n                                    value={imageField}\r\n                                    selections={fieldNames}\r\n                                    onChange={handleImageFieldChange}\r\n                                    onSelectionChange={handleImageFieldSelectionChange}\r\n                                />\r\n                                <SelectableSetting\r\n                                    label=\"Source Field\"\r\n                                    value={sourceField}\r\n                                    selections={fieldNames}\r\n                                    onChange={handleSourceFieldChange}\r\n                                    onSelectionChange={handleSourceFieldSelectionChange}\r\n                                />\r\n                                <SelectableSetting\r\n                                    label=\"URL Field\"\r\n                                    value={urlField}\r\n                                    selections={fieldNames}\r\n                                    onChange={handleUrlFieldChange}\r\n                                    onSelectionChange={handleUrlFieldSelectionChange}\r\n                                />\r\n                                {customFieldInputs}\r\n                                <Button\r\n                                    className={classes.addFieldButton}\r\n                                    onClick={(e) => setCustomFieldDialogOpen(true)}\r\n                                >\r\n                                    Add Custom Field\r\n                                </Button>\r\n                                <TagsTextField\r\n                                    label=\"Tags\"\r\n                                    helperText=\"Comma-separated list of strings\"\r\n                                    fullWidth\r\n                                    color=\"secondary\"\r\n                                    tags={tags}\r\n                                    onTagsChange={handleTagsChange}\r\n                                />\r\n                                <FormControlLabel\r\n                                    control={<Checkbox checked={preferMp3} onChange={handlePreferMp3Change} />}\r\n                                    label=\"Re-encode audio as mp3 (slower)\"\r\n                                />\r\n                                <TextField\r\n                                    type=\"number\"\r\n                                    label=\"Audio Padding Start\"\r\n                                    fullWidth\r\n                                    value={audioPaddingStart}\r\n                                    color=\"secondary\"\r\n                                    onChange={handleAudioPaddingStart}\r\n                                    inputProps={{\r\n                                        min: 0,\r\n                                        step: 1,\r\n                                    }}\r\n                                    InputProps={{\r\n                                        endAdornment: <InputAdornment position=\"end\">ms</InputAdornment>,\r\n                                    }}\r\n                                />\r\n                                <TextField\r\n                                    type=\"number\"\r\n                                    label=\"Audio Padding End\"\r\n                                    fullWidth\r\n                                    value={audioPaddingEnd}\r\n                                    color=\"secondary\"\r\n                                    onChange={handleAudioPaddingEnd}\r\n                                    inputProps={{\r\n                                        min: 0,\r\n                                        step: 1,\r\n                                    }}\r\n                                    InputProps={{\r\n                                        endAdornment: <InputAdornment position=\"end\">ms</InputAdornment>,\r\n                                    }}\r\n                                />\r\n                                <TextField\r\n                                    type=\"number\"\r\n                                    label=\"Max Image Width\"\r\n                                    fullWidth\r\n                                    value={maxImageWidth}\r\n                                    color=\"secondary\"\r\n                                    onChange={handleMaxImageWidth}\r\n                                    inputProps={{\r\n                                        min: 0,\r\n                                        step: 1,\r\n                                    }}\r\n                                />\r\n                                <TextField\r\n                                    type=\"number\"\r\n                                    label=\"Max Image Height\"\r\n                                    fullWidth\r\n                                    value={maxImageHeight}\r\n                                    color=\"secondary\"\r\n                                    onChange={handleMaxImageHeight}\r\n                                    inputProps={{\r\n                                        min: 0,\r\n                                        step: 1,\r\n                                    }}\r\n                                />\r\n                            </FormGroup>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <FormLabel>Video Subtitle Appearance</FormLabel>\r\n                            <FormGroup>\r\n                                <div className={classes.subtitleSetting}>\r\n                                    <TextField\r\n                                        type=\"color\"\r\n                                        label=\"Subtitle Color\"\r\n                                        fullWidth\r\n                                        value={subtitleColor}\r\n                                        color=\"secondary\"\r\n                                        onChange={handleSubtitleColorChange}\r\n                                    />\r\n                                </div>\r\n                                <div className={classes.subtitleSetting}>\r\n                                    <TextField\r\n                                        type=\"number\"\r\n                                        label=\"Subtitle Size\"\r\n                                        fullWidth\r\n                                        value={subtitleSize}\r\n                                        color=\"secondary\"\r\n                                        onChange={handleSubtitleSizeChange}\r\n                                        inputProps={{\r\n                                            min: 1,\r\n                                            step: 1,\r\n                                        }}\r\n                                    />\r\n                                </div>\r\n                                <div className={classes.subtitleSetting}>\r\n                                    <TextField\r\n                                        type=\"color\"\r\n                                        label=\"Subtitle Outline Color\"\r\n                                        fullWidth\r\n                                        value={subtitleOutlineColor}\r\n                                        color=\"secondary\"\r\n                                        onChange={handleSubtitleOutlineColorChange}\r\n                                    />\r\n                                </div>\r\n                                <div className={classes.subtitleSetting}>\r\n                                    <TextField\r\n                                        type=\"number\"\r\n                                        label=\"Subtitle Outline Thickness\"\r\n                                        fullWidth\r\n                                        value={subtitleOutlineThickness}\r\n                                        onChange={handleSubtitleOutlineThicknessChange}\r\n                                        inputProps={{\r\n                                            min: 0,\r\n                                            step: 1,\r\n                                        }}\r\n                                        color=\"secondary\"\r\n                                    />\r\n                                </div>\r\n                                <div className={classes.subtitleSetting}>\r\n                                    <TextField\r\n                                        type=\"color\"\r\n                                        label=\"Subtitle Background Color\"\r\n                                        fullWidth\r\n                                        value={subtitleBackgroundColor}\r\n                                        color=\"secondary\"\r\n                                        onChange={handleSubtitleBackgroundColorChange}\r\n                                    />\r\n                                </div>\r\n                                <div className={classes.subtitleSetting}>\r\n                                    <TextField\r\n                                        type=\"number\"\r\n                                        label=\"Subtitle Background Opacity\"\r\n                                        fullWidth\r\n                                        inputProps={{\r\n                                            min: 0,\r\n                                            max: 1,\r\n                                            step: 0.1,\r\n                                        }}\r\n                                        value={subtitleBackgroundOpacity}\r\n                                        color=\"secondary\"\r\n                                        onChange={handleSubtitleBackgroundOpacityChange}\r\n                                    />\r\n                                </div>\r\n                                <div className={classes.subtitleSetting}>\r\n                                    <TextField\r\n                                        type=\"text\"\r\n                                        label=\"Subtitle Font Family\"\r\n                                        placeholder=\"Inherited\"\r\n                                        fullWidth\r\n                                        value={subtitleFontFamily}\r\n                                        color=\"secondary\"\r\n                                        onChange={handleSubtitleFontFamilyChange}\r\n                                    />\r\n                                </div>\r\n                                <div className={classes.subtitleSetting}>\r\n                                    <TextField\r\n                                        type=\"number\"\r\n                                        label=\"Image-based Subtitle Scale Factor\"\r\n                                        placeholder=\"Inherited\"\r\n                                        fullWidth\r\n                                        inputProps={{\r\n                                            min: 0,\r\n                                            max: 1,\r\n                                            step: 0.1,\r\n                                        }}\r\n                                        value={imageBasedSubtitleScaleFactor}\r\n                                        color=\"secondary\"\r\n                                        onChange={handleImageBasedSubtitleScaleFactorChange}\r\n                                    />\r\n                                </div>\r\n                                <div className={classes.subtitlePreview}>\r\n                                    <input\r\n                                        value={subtitlePreview}\r\n                                        className={classes.subtitlePreviewInput}\r\n                                        onChange={handleSubtitlePreviewChange}\r\n                                        style={subtitlePreviewStyles}\r\n                                    />\r\n                                </div>\r\n                            </FormGroup>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <FormLabel>Theme</FormLabel>\r\n                            <div>\r\n                                <FormControlLabel\r\n                                    control={\r\n                                        <Radio\r\n                                            checked={themeType === 'light'}\r\n                                            value=\"light\"\r\n                                            onChange={handleThemeTypeChange}\r\n                                        />\r\n                                    }\r\n                                    label=\"Light\"\r\n                                />\r\n                                <FormControlLabel\r\n                                    control={\r\n                                        <Radio\r\n                                            checked={themeType === 'dark'}\r\n                                            value=\"dark\"\r\n                                            onChange={handleThemeTypeChange}\r\n                                        />\r\n                                    }\r\n                                    label=\"Dark\"\r\n                                />\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose}>OK</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </React.Fragment>\r\n    );\r\n}\r\n","import { AsbplayerSettings, AsbplayerSettingsProvider } from '@project/common';\r\n\r\nconst defaultAnkiConnectUrl = 'http://127.0.0.1:8765';\r\nconst defaultSubtitleSize = 36;\r\nconst defaultSubtitleColor = '#ffffff';\r\nconst defaultSubtitleOutlineThickness = 0;\r\nconst defaultSubtitleOutlineColor = '#000000';\r\nconst defaultSubtitleBackgroundColor = '#000000';\r\nconst defaultSubtitleBackgroundOpacity = 0.5;\r\nconst defaultSubtitleFontFamily = '';\r\nconst defaultSubtitlePreview = 'アあ安';\r\nconst defaultVolume = 100;\r\nconst defaultAudioPaddingStart = 0;\r\nconst defaultAudioPaddingEnd = 500;\r\nconst defaultMaxImageWidth = 0;\r\nconst defaultMaxImageHeight = 0;\r\nconst defaultSurroundingSubtitlesCountRadius = 1;\r\nconst defaultSurroundingSubtitlesTimeRadius = 5000;\r\n\r\nconst ankiConnectUrlKey = 'ankiConnectUrl';\r\nconst deckKey = 'deck';\r\nconst noteTypeKey = 'noteType';\r\nconst sentenceFieldKey = 'sentenceField';\r\nconst definitionFieldKey = 'definitionField';\r\nconst audioFieldKey = 'audioField';\r\nconst imageFieldKey = 'imageField';\r\nconst wordFieldKey = 'wordField';\r\nconst sourceFieldKey = 'sourceField';\r\nconst urlFieldKey = 'urlField';\r\nconst customAnkiFieldsKey = 'customAnkiFields';\r\nconst tagsKey = 'tags';\r\nconst subtitleSizeKey = 'subtitleSize';\r\nconst subtitleColorKey = 'subtitleColor';\r\nconst subtitleOutlineThicknessKey = 'subtitleOutlineThickness';\r\nconst subtitleOutlineColorKey = 'subtitleOutlineColor';\r\nconst subtitleBackgroundColorKey = 'subtitleBackgroundColor';\r\nconst subtitleBackgroundOpacityKey = 'subtitleBackgroundOpacity';\r\nconst subtitleFontFamilyKey = 'subtitleFontFamily';\r\nconst subtitlePreviewKey = 'subtitlePreview';\r\nconst imageBasedSubtitleScaleFactorKey = 'imageBasedSubtitleScaleFactor';\r\nconst audioPaddingStartKey = 'audioPaddingStart';\r\nconst audioPaddingEndKey = 'audioPaddingEnd';\r\nconst maxImageWidthKey = 'maxImageWidth';\r\nconst maxImageHeightKey = 'maxImageHeight';\r\nconst volumeKey = 'volume';\r\nconst theaterModeKey = 'theaterMode';\r\nconst preferMp3Key = 'preferMp3';\r\nconst themeTypeKey = 'themeType';\r\n\r\nexport default class SettingsProvider implements AsbplayerSettingsProvider {\r\n    private _tags?: string[];\r\n\r\n    constructor() {\r\n        // Cache tags so that it can be used in useEffect dependencies\r\n        this._tags = this.tags;\r\n    }\r\n\r\n    get settings(): AsbplayerSettings {\r\n        return {\r\n            ankiConnectUrl: this.ankiConnectUrl,\r\n            deck: this.deck,\r\n            noteType: this.noteType,\r\n            sentenceField: this.sentenceField,\r\n            definitionField: this.definitionField,\r\n            audioField: this.audioField,\r\n            imageField: this.imageField,\r\n            wordField: this.wordField,\r\n            urlField: this.urlField,\r\n            customAnkiFields: this.customAnkiFields,\r\n            tags: this.tags,\r\n            sourceField: this.sourceField,\r\n            subtitleSize: this.subtitleSize,\r\n            subtitleColor: this.subtitleColor,\r\n            subtitleOutlineThickness: this.subtitleOutlineThickness,\r\n            subtitleOutlineColor: this.subtitleOutlineColor,\r\n            subtitleBackgroundColor: this.subtitleBackgroundColor,\r\n            subtitleBackgroundOpacity: this.subtitleBackgroundOpacity,\r\n            subtitleFontFamily: this.subtitleFontFamily,\r\n            subtitlePreview: this.subtitlePreview,\r\n            imageBasedSubtitleScaleFactor: this.imageBasedSubtitleScaleFactor,\r\n            preferMp3: this.preferMp3,\r\n            themeType: this.themeType,\r\n            audioPaddingStart: this.audioPaddingStart,\r\n            audioPaddingEnd: this.audioPaddingEnd,\r\n            maxImageWidth: this.maxImageWidth,\r\n            maxImageHeight: this.maxImageHeight,\r\n            surroundingSubtitlesCountRadius: this.surroundingSubtitlesCountRadius,\r\n            surroundingSubtitlesTimeRadius: this.surroundingSubtitlesTimeRadius,\r\n            volume: this.volume,\r\n            theaterMode: this.theaterMode,\r\n        };\r\n    }\r\n\r\n    set settings(newSettings: AsbplayerSettings) {\r\n        this.ankiConnectUrl = newSettings.ankiConnectUrl;\r\n        this.deck = newSettings.deck;\r\n        this.noteType = newSettings.noteType;\r\n        this.sentenceField = newSettings.sentenceField;\r\n        this.definitionField = newSettings.definitionField;\r\n        this.audioField = newSettings.audioField;\r\n        this.imageField = newSettings.imageField;\r\n        this.wordField = newSettings.wordField;\r\n        this.sourceField = newSettings.sourceField;\r\n        this.urlField = newSettings.urlField;\r\n        this.tags = newSettings.tags;\r\n        this.subtitleSize = newSettings.subtitleSize;\r\n        this.subtitleColor = newSettings.subtitleColor;\r\n        this.subtitleOutlineThickness = newSettings.subtitleOutlineThickness;\r\n        this.subtitleOutlineColor = newSettings.subtitleOutlineColor;\r\n        this.subtitleBackgroundColor = newSettings.subtitleBackgroundColor;\r\n        this.subtitleBackgroundOpacity = newSettings.subtitleBackgroundOpacity;\r\n        this.subtitleFontFamily = newSettings.subtitleFontFamily;\r\n        this.subtitlePreview = newSettings.subtitlePreview;\r\n        this.imageBasedSubtitleScaleFactor = newSettings.imageBasedSubtitleScaleFactor;\r\n        this.customAnkiFields = newSettings.customAnkiFields;\r\n        this.preferMp3 = newSettings.preferMp3;\r\n        this.themeType = newSettings.themeType;\r\n        this.audioPaddingStart = newSettings.audioPaddingStart;\r\n        this.audioPaddingEnd = newSettings.audioPaddingEnd;\r\n        this.maxImageWidth = newSettings.maxImageWidth;\r\n        this.maxImageHeight = newSettings.maxImageHeight;\r\n        this.volume = newSettings.volume;\r\n        this.theaterMode = newSettings.theaterMode;\r\n    }\r\n\r\n    get subtitleSettings() {\r\n        return {\r\n            subtitleSize: this.subtitleSize,\r\n            subtitleColor: this.subtitleColor,\r\n            subtitleOutlineThickness: this.subtitleOutlineThickness,\r\n            subtitleOutlineColor: this.subtitleOutlineColor,\r\n            subtitleBackgroundColor: this.subtitleBackgroundColor,\r\n            subtitleBackgroundOpacity: this.subtitleBackgroundOpacity,\r\n            subtitleFontFamily: this.subtitleFontFamily,\r\n            imageBasedSubtitleScaleFactor: this.imageBasedSubtitleScaleFactor\r\n        };\r\n    }\r\n\r\n    get ankiSettings() {\r\n        return {\r\n            ankiConnectUrl: this.ankiConnectUrl,\r\n            deck: this.deck,\r\n            noteType: this.noteType,\r\n            sentenceField: this.sentenceField,\r\n            definitionField: this.definitionField,\r\n            audioField: this.audioField,\r\n            imageField: this.imageField,\r\n            wordField: this.wordField,\r\n            sourceField: this.sourceField,\r\n            urlField: this.urlField,\r\n            customAnkiFields: this.customAnkiFields,\r\n            tags: this.tags,\r\n            preferMp3: this.preferMp3,\r\n            audioPaddingStart: this.audioPaddingStart,\r\n            audioPaddingEnd: this.audioPaddingEnd,\r\n            maxImageWidth: this.maxImageWidth,\r\n            maxImageHeight: this.maxImageHeight,\r\n            surroundingSubtitlesCountRadius: this.surroundingSubtitlesCountRadius,\r\n            surroundingSubtitlesTimeRadius: this.surroundingSubtitlesTimeRadius,\r\n        };\r\n    }\r\n\r\n    get miscSettings() {\r\n        return {\r\n            themeType: this.themeType,\r\n        };\r\n    }\r\n\r\n    _getNumberItem(key: string, defaultValue: number) {\r\n        const value = localStorage.getItem(key);\r\n\r\n        if (value === null) {\r\n            return defaultValue;\r\n        }\r\n\r\n        return Number(value);\r\n    }\r\n\r\n    _setOptionalItem(key: string, value?: string) {\r\n        if (typeof value === 'undefined') {\r\n            localStorage.removeItem(key);\r\n        } else {\r\n            localStorage.setItem(key, value);\r\n        }\r\n    }\r\n\r\n    get ankiConnectUrl() {\r\n        return localStorage.getItem(ankiConnectUrlKey) || defaultAnkiConnectUrl;\r\n    }\r\n\r\n    set ankiConnectUrl(url) {\r\n        localStorage.setItem(ankiConnectUrlKey, url);\r\n    }\r\n\r\n    get deck() {\r\n        return localStorage.getItem(deckKey) ?? undefined;\r\n    }\r\n\r\n    set deck(deck) {\r\n        this._setOptionalItem(deckKey, deck);\r\n    }\r\n\r\n    get noteType() {\r\n        return localStorage.getItem(noteTypeKey) ?? undefined;\r\n    }\r\n\r\n    set noteType(noteType) {\r\n        this._setOptionalItem(noteTypeKey, noteType);\r\n    }\r\n\r\n    get sentenceField() {\r\n        return localStorage.getItem(sentenceFieldKey) ?? undefined;\r\n    }\r\n\r\n    set sentenceField(sentenceField) {\r\n        this._setOptionalItem(sentenceFieldKey, sentenceField);\r\n    }\r\n\r\n    get definitionField() {\r\n        return localStorage.getItem(definitionFieldKey) ?? undefined;\r\n    }\r\n\r\n    set definitionField(definitionField) {\r\n        this._setOptionalItem(definitionFieldKey, definitionField);\r\n    }\r\n\r\n    get audioField() {\r\n        return localStorage.getItem(audioFieldKey) ?? undefined;\r\n    }\r\n\r\n    set audioField(audioField) {\r\n        this._setOptionalItem(audioFieldKey, audioField);\r\n    }\r\n\r\n    get imageField() {\r\n        return localStorage.getItem(imageFieldKey) ?? undefined;\r\n    }\r\n\r\n    set imageField(imageField) {\r\n        this._setOptionalItem(imageFieldKey, imageField);\r\n    }\r\n\r\n    get wordField() {\r\n        return localStorage.getItem(wordFieldKey) ?? undefined;\r\n    }\r\n\r\n    set wordField(wordField) {\r\n        this._setOptionalItem(wordFieldKey, wordField);\r\n    }\r\n\r\n    get sourceField() {\r\n        return localStorage.getItem(sourceFieldKey) ?? undefined;\r\n    }\r\n\r\n    set sourceField(sourceField) {\r\n        this._setOptionalItem(sourceFieldKey, sourceField);\r\n    }\r\n\r\n    get urlField() {\r\n        return localStorage.getItem(urlFieldKey) ?? undefined;\r\n    }\r\n\r\n    set urlField(urlField) {\r\n        this._setOptionalItem(urlFieldKey, urlField);\r\n    }\r\n\r\n    get customAnkiFields() {\r\n        const ankiFieldsString = localStorage.getItem(customAnkiFieldsKey);\r\n\r\n        if (ankiFieldsString) {\r\n            return JSON.parse(ankiFieldsString);\r\n        }\r\n\r\n        return {};\r\n    }\r\n\r\n    set customAnkiFields(customAnkiFields) {\r\n        localStorage.setItem(customAnkiFieldsKey, JSON.stringify(customAnkiFields));\r\n    }\r\n\r\n    get tags() {\r\n        if (typeof this._tags !== 'undefined') {\r\n            return this._tags;\r\n        }\r\n\r\n        const tagsString = localStorage.getItem(tagsKey);\r\n\r\n        if (tagsString) {\r\n            this._tags = JSON.parse(tagsString) as string[];\r\n            return this._tags;\r\n        }\r\n\r\n        return [];\r\n    }\r\n\r\n    set tags(tags) {\r\n        localStorage.setItem(tagsKey, JSON.stringify(tags));\r\n        this._tags = undefined;\r\n    }\r\n\r\n    get subtitleColor() {\r\n        return localStorage.getItem(subtitleColorKey) || defaultSubtitleColor;\r\n    }\r\n\r\n    set subtitleColor(subtitleColor) {\r\n        localStorage.setItem(subtitleColorKey, subtitleColor);\r\n    }\r\n\r\n    get subtitleSize() {\r\n        return this._getNumberItem(subtitleSizeKey, defaultSubtitleSize);\r\n    }\r\n\r\n    set subtitleSize(subtitleSize) {\r\n        localStorage.setItem(subtitleSizeKey, String(subtitleSize));\r\n    }\r\n\r\n    get subtitleOutlineColor() {\r\n        return localStorage.getItem(subtitleOutlineColorKey) || defaultSubtitleOutlineColor;\r\n    }\r\n\r\n    set subtitleOutlineColor(subtitleOutlineColor) {\r\n        localStorage.setItem(subtitleOutlineColorKey, subtitleOutlineColor);\r\n    }\r\n\r\n    get subtitleOutlineThickness() {\r\n        return this._getNumberItem(subtitleOutlineThicknessKey, defaultSubtitleOutlineThickness);\r\n    }\r\n\r\n    set subtitleOutlineThickness(subtitleOutlineThickness) {\r\n        localStorage.setItem(subtitleOutlineThicknessKey, String(subtitleOutlineThickness));\r\n    }\r\n\r\n    get subtitleBackgroundColor() {\r\n        return localStorage.getItem(subtitleBackgroundColorKey) || defaultSubtitleBackgroundColor;\r\n    }\r\n\r\n    set subtitleBackgroundColor(subtitleBackgroundColor) {\r\n        localStorage.setItem(subtitleBackgroundColorKey, subtitleBackgroundColor);\r\n    }\r\n\r\n    get subtitleBackgroundOpacity() {\r\n        return this._getNumberItem(subtitleBackgroundOpacityKey, defaultSubtitleBackgroundOpacity);\r\n    }\r\n\r\n    set subtitleBackgroundOpacity(subtitleBackgroundOpacity) {\r\n        localStorage.setItem(subtitleBackgroundOpacityKey, String(subtitleBackgroundOpacity));\r\n    }\r\n\r\n    get subtitleFontFamily() {\r\n        return localStorage.getItem(subtitleFontFamilyKey) || defaultSubtitleFontFamily;\r\n    }\r\n\r\n    set subtitleFontFamily(subtitleFontFamily) {\r\n        localStorage.setItem(subtitleFontFamilyKey, subtitleFontFamily);\r\n    }\r\n\r\n    get subtitlePreview() {\r\n        return localStorage.getItem(subtitlePreviewKey) || defaultSubtitlePreview;\r\n    }\r\n\r\n    set subtitlePreview(subtitlePreview) {\r\n        localStorage.setItem(subtitlePreviewKey, subtitlePreview);\r\n    }\r\n\r\n    get imageBasedSubtitleScaleFactor() {\r\n        return this._getNumberItem(imageBasedSubtitleScaleFactorKey, 1);\r\n    }\r\n\r\n    set imageBasedSubtitleScaleFactor(imageBasedSubtitleScaleFactor: number) {\r\n        localStorage.setItem(imageBasedSubtitleScaleFactorKey, String(imageBasedSubtitleScaleFactor));\r\n    }\r\n\r\n    get volume() {\r\n        return this._getNumberItem(volumeKey, defaultVolume);\r\n    }\r\n\r\n    set volume(volume) {\r\n        localStorage.setItem(volumeKey, String(volume));\r\n    }\r\n\r\n    get theaterMode() {\r\n        return localStorage.getItem(theaterModeKey) === 'true' || false;\r\n    }\r\n\r\n    set theaterMode(theaterMode) {\r\n        localStorage.setItem(theaterModeKey, String(theaterMode));\r\n    }\r\n\r\n    get preferMp3() {\r\n        return localStorage.getItem(preferMp3Key) === 'true' || false;\r\n    }\r\n\r\n    set preferMp3(preferMp3) {\r\n        localStorage.setItem(preferMp3Key, String(preferMp3));\r\n    }\r\n\r\n    get themeType() {\r\n        const themeType = localStorage.getItem(themeTypeKey) as 'dark' | 'light' | null;\r\n\r\n        if (themeType === null) {\r\n            return 'dark';\r\n        }\r\n\r\n        return themeType;\r\n    }\r\n\r\n    set themeType(themeType: 'dark' | 'light') {\r\n        localStorage.setItem(themeTypeKey, themeType);\r\n    }\r\n\r\n    get audioPaddingStart() {\r\n        const value = localStorage.getItem(audioPaddingStartKey);\r\n\r\n        if (!value) {\r\n            return defaultAudioPaddingStart;\r\n        }\r\n\r\n        return Number(value);\r\n    }\r\n\r\n    set audioPaddingStart(audioPaddingStart) {\r\n        localStorage.setItem(audioPaddingStartKey, String(audioPaddingStart));\r\n    }\r\n\r\n    get audioPaddingEnd() {\r\n        return this._getNumberItem(audioPaddingEndKey, defaultAudioPaddingEnd);\r\n    }\r\n\r\n    set audioPaddingEnd(audioPaddingEnd) {\r\n        localStorage.setItem(audioPaddingEndKey, String(audioPaddingEnd));\r\n    }\r\n\r\n    get maxImageWidth() {\r\n        const value = localStorage.getItem(maxImageWidthKey);\r\n\r\n        if (!value) {\r\n            return defaultMaxImageWidth;\r\n        }\r\n\r\n        return Number(value);\r\n    }\r\n\r\n    set maxImageWidth(maxImageWidth) {\r\n        localStorage.setItem(maxImageWidthKey, String(maxImageWidth));\r\n    }\r\n\r\n    get maxImageHeight() {\r\n        return this._getNumberItem(maxImageHeightKey, defaultMaxImageHeight);\r\n    }\r\n\r\n    set maxImageHeight(maxImageHeight) {\r\n        localStorage.setItem(maxImageHeightKey, String(maxImageHeight));\r\n    }\r\n\r\n    get surroundingSubtitlesCountRadius() {\r\n        // For now, not configurable\r\n        return defaultSurroundingSubtitlesCountRadius;\r\n    }\r\n\r\n    get surroundingSubtitlesTimeRadius() {\r\n        // For now, not configurable\r\n        return defaultSurroundingSubtitlesTimeRadius;\r\n    }\r\n}\r\n","import {\r\n    AnkiDialogRequestFromVideoMessage,\r\n    AppBarToggleMessageToVideoMessage,\r\n    AudioTrackModel,\r\n    AudioTrackSelectedFromVideoMessage,\r\n    AudioTrackSelectedToVideoMessage,\r\n    CondensedModeToggleToVideoMessage,\r\n    CopyMessage,\r\n    CurrentTimeToVideoMessage,\r\n    FinishedAnkiDialogRequestToVideoMessage,\r\n    HideSubtitlePlayerToggleToVideoMessage,\r\n    OffsetFromVideoMessage,\r\n    PauseFromVideoMessage,\r\n    PlayFromVideoMessage,\r\n    ReadyFromVideoMessage,\r\n    ReadyStateFromVideoMessage,\r\n    ReadyToVideoMessage,\r\n    SubtitleModel,\r\n    SubtitlesToVideoMessage,\r\n    ToggleSubtitleTrackInListFromVideoMessage,\r\n} from '@project/common';\r\n\r\nexport default class PlayerChannel {\r\n    private channel?: BroadcastChannel;\r\n    private time: number;\r\n    private duration: number;\r\n    private readyCallbacks: ((duration: number) => void)[];\r\n    private playCallbacks: (() => void)[];\r\n    private pauseCallbacks: (() => void)[];\r\n    private currentTimeCallbacks: ((currentTime: number) => void)[];\r\n    private audioTrackSelectedCallbacks: ((id: string) => void)[];\r\n    private closeCallbacks: (() => void)[];\r\n    private subtitlesCallbacks: ((subtitles: SubtitleModel[]) => void)[];\r\n    private condensedModeToggleCallbacks: ((enabled: boolean) => void)[];\r\n    private hideSubtitlePlayerToggleCallbacks: ((hidden: boolean) => void)[];\r\n    private appBarToggleCallbacks: ((hidden: boolean) => void)[];\r\n    private ankiDialogRequestCallbacks: (() => void)[];\r\n    private finishedAnkiDialogRequestCallbacks: ((resume: boolean) => void)[];\r\n\r\n    constructor(channel: string) {\r\n        this.channel = new BroadcastChannel(channel);\r\n        this.time = 0;\r\n        this.duration = 0;\r\n        this.playCallbacks = [];\r\n        this.pauseCallbacks = [];\r\n        this.currentTimeCallbacks = [];\r\n        this.audioTrackSelectedCallbacks = [];\r\n        this.closeCallbacks = [];\r\n        this.readyCallbacks = [];\r\n        this.subtitlesCallbacks = [];\r\n        this.condensedModeToggleCallbacks = [];\r\n        this.hideSubtitlePlayerToggleCallbacks = [];\r\n        this.appBarToggleCallbacks = [];\r\n        this.ankiDialogRequestCallbacks = [];\r\n        this.finishedAnkiDialogRequestCallbacks = [];\r\n\r\n        const that = this;\r\n\r\n        this.channel.onmessage = (event) => {\r\n            switch (event.data.command) {\r\n                case 'init':\r\n                    // ignore, this is for the chrome extension\r\n                    break;\r\n                case 'ready':\r\n                    const readyMessage = event.data as ReadyToVideoMessage;\r\n\r\n                    for (let callback of that.readyCallbacks) {\r\n                        callback(readyMessage.duration);\r\n                    }\r\n                    break;\r\n                case 'play':\r\n                    for (let callback of that.playCallbacks) {\r\n                        callback();\r\n                    }\r\n                    break;\r\n                case 'pause':\r\n                    for (let callback of that.pauseCallbacks) {\r\n                        callback();\r\n                    }\r\n                    break;\r\n                case 'currentTime':\r\n                    const currentTimeMessage = event.data as CurrentTimeToVideoMessage;\r\n\r\n                    for (let callback of that.currentTimeCallbacks) {\r\n                        callback(currentTimeMessage.value);\r\n                    }\r\n                    break;\r\n                case 'audioTrackSelected':\r\n                    const audioTrackSelectedMessage = event.data as AudioTrackSelectedToVideoMessage;\r\n\r\n                    for (let callback of that.audioTrackSelectedCallbacks) {\r\n                        callback(audioTrackSelectedMessage.id);\r\n                    }\r\n                    break;\r\n                case 'close':\r\n                    for (let callback of that.closeCallbacks) {\r\n                        callback();\r\n                    }\r\n                    break;\r\n                case 'subtitles':\r\n                    const subtitlesMessage = event.data as SubtitlesToVideoMessage;\r\n\r\n                    for (let callback of that.subtitlesCallbacks) {\r\n                        callback(subtitlesMessage.value);\r\n                    }\r\n                    break;\r\n                case 'subtitleSettings':\r\n                    // ignore\r\n                    break;\r\n                case 'condensedModeToggle':\r\n                    const condensedModeToggleMessage = event.data as CondensedModeToggleToVideoMessage;\r\n\r\n                    for (let callback of that.condensedModeToggleCallbacks) {\r\n                        callback(condensedModeToggleMessage.value);\r\n                    }\r\n                    break;\r\n                case 'hideSubtitlePlayerToggle':\r\n                    const hideSubtitlePlayerToggleMessage = event.data as HideSubtitlePlayerToggleToVideoMessage;\r\n\r\n                    for (let callback of that.hideSubtitlePlayerToggleCallbacks) {\r\n                        callback(hideSubtitlePlayerToggleMessage.value);\r\n                    }\r\n                    break;\r\n                case 'appBarToggle':\r\n                    const appBarToggleMessage = event.data as AppBarToggleMessageToVideoMessage;\r\n\r\n                    for (let callback of that.appBarToggleCallbacks) {\r\n                        callback(appBarToggleMessage.value);\r\n                    }\r\n                    break;\r\n                case 'ankiDialogRequest':\r\n                    for (let callback of that.ankiDialogRequestCallbacks) {\r\n                        callback();\r\n                    }\r\n                    break;\r\n                case 'finishedAnkiDialogRequest':\r\n                    const finishedAnkiDialogRequestMessage = event.data as FinishedAnkiDialogRequestToVideoMessage;\r\n\r\n                    for (let callback of that.finishedAnkiDialogRequestCallbacks) {\r\n                        callback(finishedAnkiDialogRequestMessage.resume);\r\n                    }\r\n                    break;\r\n                case 'ankiSettings':\r\n                    // ignore\r\n                    break;\r\n                case 'miscSettings':\r\n                    // ignore\r\n                    break;\r\n                default:\r\n                    console.error('Unrecognized event ' + event.data.command);\r\n            }\r\n        };\r\n    }\r\n\r\n    get currentTime() {\r\n        return this.time;\r\n    }\r\n\r\n    set currentTime(value) {\r\n        this.time = value;\r\n        this.channel?.postMessage({ command: 'currentTime', value: this.time, echo: true });\r\n    }\r\n\r\n    onPlay(callback: () => void) {\r\n        this.playCallbacks.push(callback);\r\n    }\r\n\r\n    onPause(callback: () => void) {\r\n        this.pauseCallbacks.push(callback);\r\n    }\r\n\r\n    onCurrentTime(callback: (currentTime: number) => void) {\r\n        this.currentTimeCallbacks.push(callback);\r\n    }\r\n\r\n    onAudioTrackSelected(callback: (id: string) => void) {\r\n        this.audioTrackSelectedCallbacks.push(callback);\r\n    }\r\n\r\n    onClose(callback: () => void) {\r\n        this.closeCallbacks.push(callback);\r\n    }\r\n\r\n    onReady(callback: (duration: number) => void) {\r\n        this.readyCallbacks.push(callback);\r\n    }\r\n\r\n    onSubtitles(callback: (subtitles: SubtitleModel[]) => void) {\r\n        this.subtitlesCallbacks.push(callback);\r\n    }\r\n\r\n    onCondensedModeToggle(callback: (enabled: boolean) => void) {\r\n        this.condensedModeToggleCallbacks.push(callback);\r\n    }\r\n\r\n    onHideSubtitlePlayerToggle(callback: (hidden: boolean) => void) {\r\n        this.hideSubtitlePlayerToggleCallbacks.push(callback);\r\n    }\r\n\r\n    onAppBarToggle(callback: (hidden: boolean) => void) {\r\n        this.appBarToggleCallbacks.push(callback);\r\n    }\r\n\r\n    onAnkiDialogRequest(callback: () => void) {\r\n        this.ankiDialogRequestCallbacks.push(callback);\r\n    }\r\n\r\n    onFinishedAnkiDialogRequest(callback: (resume: boolean) => void) {\r\n        this.finishedAnkiDialogRequestCallbacks.push(callback);\r\n    }\r\n\r\n    ready(\r\n        duration: number,\r\n        paused: boolean,\r\n        audioTracks: AudioTrackModel[] | undefined,\r\n        selectedAudioTrack: string | undefined\r\n    ) {\r\n        const message: ReadyFromVideoMessage = {\r\n            command: 'ready',\r\n            duration: duration,\r\n            paused: paused,\r\n            currentTime: 0,\r\n            audioTracks: audioTracks,\r\n            selectedAudioTrack: selectedAudioTrack,\r\n            playbackRate: 1,\r\n        };\r\n\r\n        this.channel?.postMessage(message);\r\n    }\r\n\r\n    readyState(readyState: number) {\r\n        const message: ReadyStateFromVideoMessage = { command: 'readyState', value: readyState };\r\n        this.channel?.postMessage(message);\r\n    }\r\n\r\n    play() {\r\n        const message: PlayFromVideoMessage = { command: 'play', echo: true };\r\n        this.channel?.postMessage(message);\r\n    }\r\n\r\n    pause() {\r\n        const message: PauseFromVideoMessage = { command: 'pause', echo: true };\r\n        this.channel?.postMessage(message);\r\n    }\r\n\r\n    audioTrackSelected(id: string) {\r\n        const message: AudioTrackSelectedFromVideoMessage = { command: 'audioTrackSelected', id: id };\r\n        this.channel?.postMessage(message);\r\n    }\r\n\r\n    offset(offset: number) {\r\n        const message: OffsetFromVideoMessage = { command: 'offset', value: offset };\r\n        this.channel?.postMessage(message);\r\n    }\r\n\r\n    popOutToggle() {\r\n        this.channel?.postMessage({ command: 'popOutToggle' });\r\n    }\r\n\r\n    copy(subtitle: SubtitleModel, surroundingSubtitles: SubtitleModel[], preventDuplicate?: boolean) {\r\n        const message: CopyMessage = {\r\n            command: 'copy',\r\n            subtitle: subtitle,\r\n            surroundingSubtitles: surroundingSubtitles,\r\n            preventDuplicate: preventDuplicate,\r\n        };\r\n\r\n        this.channel?.postMessage(message);\r\n    }\r\n\r\n    condensedModeToggle() {\r\n        this.channel?.postMessage({ command: 'condensedModeToggle' });\r\n    }\r\n\r\n    hideSubtitlePlayerToggle() {\r\n        this.channel?.postMessage({ command: 'hideSubtitlePlayerToggle' });\r\n    }\r\n\r\n    appBarToggle() {\r\n        this.channel?.postMessage({ command: 'appBarToggle' });\r\n    }\r\n\r\n    ankiDialogRequest(forwardToVideo: boolean) {\r\n        const message: AnkiDialogRequestFromVideoMessage = {\r\n            command: 'ankiDialogRequest',\r\n            forwardToVideo: forwardToVideo,\r\n        };\r\n        this.channel?.postMessage(message);\r\n    }\r\n\r\n    toggleSubtitleTrackInList(track: number) {\r\n        const message: ToggleSubtitleTrackInListFromVideoMessage = {\r\n            command: 'toggleSubtitleTrackInList',\r\n            track: track,\r\n        };\r\n        this.channel?.postMessage(message);\r\n    }\r\n\r\n    close() {\r\n        if (this.channel) {\r\n            this.channel.postMessage({ command: 'exit' });\r\n            this.channel.close();\r\n            this.channel = undefined;\r\n            this.playCallbacks = [];\r\n            this.pauseCallbacks = [];\r\n            this.currentTimeCallbacks = [];\r\n            this.audioTrackSelectedCallbacks = [];\r\n            this.closeCallbacks = [];\r\n            this.readyCallbacks = [];\r\n            this.subtitlesCallbacks = [];\r\n            this.condensedModeToggleCallbacks = [];\r\n            this.hideSubtitlePlayerToggleCallbacks = [];\r\n            this.appBarToggleCallbacks = [];\r\n            this.ankiDialogRequestCallbacks = [];\r\n            this.finishedAnkiDialogRequestCallbacks = [];\r\n        }\r\n    }\r\n}\r\n","import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\r\nimport { isMobile } from 'react-device-detect';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useWindowSize } from '../hooks/useWindowSize';\r\nimport { arrayEquals, computeStyles } from '../services/Util';\r\nimport {\r\n    KeyBindings,\r\n    surroundingSubtitles,\r\n    mockSurroundingSubtitles,\r\n    humanReadableTime,\r\n    SubtitleModel,\r\n    AudioTrackModel,\r\n} from '@project/common';\r\nimport { SubtitleTextImage } from '@project/common/components';\r\nimport Alert from './Alert';\r\nimport Clock from '../services/Clock';\r\nimport Controls, { Point } from './Controls';\r\nimport PlayerChannel from '../services/PlayerChannel';\r\nimport SettingsProvider from '../services/SettingsProvider';\r\n\r\ninterface ExperimentalHTMLVideoElement extends HTMLVideoElement {\r\n    readonly audioTracks: any;\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        position: 'relative',\r\n        backgroundColor: 'black',\r\n        height: '100vh',\r\n        overflow: 'hidden',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n    },\r\n    video: {\r\n        margin: 'auto',\r\n    },\r\n    cursorHidden: {\r\n        cursor: 'none',\r\n    },\r\n    subtitleContainer: {\r\n        position: 'absolute',\r\n        paddingLeft: 20,\r\n        paddingRight: 20,\r\n        bottom: 100,\r\n        textAlign: 'center',\r\n    },\r\n});\r\n\r\nfunction notifyReady(\r\n    element: ExperimentalHTMLVideoElement,\r\n    playerChannel: PlayerChannel,\r\n    setAudioTracks: React.Dispatch<React.SetStateAction<AudioTrackModel[] | undefined>>,\r\n    setSelectedAudioTrack: React.Dispatch<React.SetStateAction<string | undefined>>\r\n) {\r\n    if (window.outerWidth && element.videoWidth > 0 && element.videoHeight > 0) {\r\n        const availWidth = window.screen.availWidth - (window.outerWidth - window.innerWidth);\r\n        const availHeight = window.screen.availHeight - (window.outerHeight - window.innerHeight);\r\n        const resizeRatio = Math.min(1, Math.min(availWidth / element.videoWidth, availHeight / element.videoHeight));\r\n\r\n        window.resizeTo(\r\n            resizeRatio * element.videoWidth + (window.outerWidth - window.innerWidth),\r\n            resizeRatio * element.videoHeight + (window.outerHeight - window.innerHeight)\r\n        );\r\n    }\r\n\r\n    let tracks: AudioTrackModel[] | undefined;\r\n    let selectedTrack: string | undefined;\r\n\r\n    if (element.audioTracks) {\r\n        tracks = [];\r\n\r\n        for (let t of element.audioTracks) {\r\n            tracks.push({\r\n                id: t.id,\r\n                label: t.label,\r\n                language: t.language,\r\n            });\r\n\r\n            if (t.enabled) {\r\n                selectedTrack = t.id;\r\n            }\r\n        }\r\n    } else {\r\n        tracks = undefined;\r\n        selectedTrack = undefined;\r\n    }\r\n\r\n    setAudioTracks(tracks);\r\n    setSelectedAudioTrack(selectedTrack);\r\n    playerChannel.ready(element.duration, element.paused, tracks, selectedTrack);\r\n}\r\n\r\nfunction errorMessage(element: HTMLVideoElement) {\r\n    let error;\r\n    switch (element.error?.code) {\r\n        case 1:\r\n            error = 'Aborted';\r\n            break;\r\n        case 2:\r\n            error = 'Network error';\r\n            break;\r\n        case 3:\r\n            error = 'Decoding error';\r\n            break;\r\n        case 4:\r\n            error = 'Source not supported';\r\n            break;\r\n        default:\r\n            error = 'Unknown error';\r\n            break;\r\n    }\r\n\r\n    return error + ': ' + (element.error?.message || '<details missing>');\r\n}\r\n\r\nfunction useFullscreen() {\r\n    const [fullscreen, setFullscreen] = useState(Boolean(document.fullscreenElement));\r\n\r\n    useEffect(() => {\r\n        const listener = () => setFullscreen(Boolean(document.fullscreenElement));\r\n        document.addEventListener('fullscreenchange', listener);\r\n\r\n        return () => document.removeEventListener('fullscreenchange', listener);\r\n    }, []);\r\n\r\n    return fullscreen;\r\n}\r\n\r\ninterface Props {\r\n    settingsProvider: SettingsProvider;\r\n    videoFile: string;\r\n    channel: string;\r\n    popOut: boolean;\r\n    onError: (error: string) => void;\r\n}\r\n\r\ninterface IndexedSubtitleModel extends SubtitleModel {\r\n    index: number;\r\n}\r\n\r\nexport default function VideoPlayer(props: Props) {\r\n    const classes = useStyles();\r\n    const { settingsProvider, videoFile, channel, popOut, onError } = props;\r\n    const poppingInRef = useRef<boolean>();\r\n    const videoRef = useRef<ExperimentalHTMLVideoElement>();\r\n    const [windowWidth, windowHeight] = useWindowSize(true);\r\n    if (videoRef.current) {\r\n        videoRef.current.width = windowWidth;\r\n        videoRef.current.height = windowHeight;\r\n    }\r\n    const playerChannel = useMemo(() => new PlayerChannel(channel), [channel]);\r\n    const [playing, setPlaying] = useState<boolean>(false);\r\n    const fullscreen = useFullscreen();\r\n    const fullscreenRef = useRef<boolean>();\r\n    fullscreenRef.current = fullscreen;\r\n    const playingRef = useRef<boolean>();\r\n    playingRef.current = playing;\r\n    const [length, setLength] = useState<number>(0);\r\n    const [offset, setOffset] = useState<number>(0);\r\n    const [audioTracks, setAudioTracks] = useState<AudioTrackModel[]>();\r\n    const [selectedAudioTrack, setSelectedAudioTrack] = useState<string>();\r\n    const [subtitles, setSubtitles] = useState<SubtitleModel[]>([]);\r\n    const [showSubtitles, setShowSubtitles] = useState<IndexedSubtitleModel[]>([]);\r\n    const [subtitlesEnabled, setSubtitlesEnabled] = useState(true);\r\n    const [disabledSubtitleTracks, setDisabledSubtitleTracks] = useState<{ [index: number]: boolean }>({});\r\n    const [condensedModeEnabled, setCondensedModeEnabled] = useState<boolean>(false);\r\n    const [subtitlePlayerHidden, setSubtitlePlayerHidden] = useState<boolean>(false);\r\n    const [appBarHidden, setAppBarHidden] = useState<boolean>(settingsProvider.theaterMode);\r\n    const showSubtitlesRef = useRef<IndexedSubtitleModel[]>([]);\r\n    showSubtitlesRef.current = showSubtitles;\r\n    const clock = useMemo<Clock>(() => new Clock(), []);\r\n    const mousePositionRef = useRef<Point>({ x: 0, y: 0 });\r\n    const [showCursor, setShowCursor] = useState<boolean>(false);\r\n    const lastMouseMovementTimestamp = useRef<number>(0);\r\n    const containerRef = useRef<HTMLDivElement>(null);\r\n    const [alert, setAlert] = useState<string>();\r\n    const [alertOpen, setAlertOpen] = useState<boolean>(false);\r\n    const [returnToFullscreenOnFinishedAnkiDialogRequest, setReturnToFullscreenOnFinishedAnkiDialogRequest] =\r\n        useState<boolean>(false);\r\n    const returnToFullscreenOnFinishedAnkiDialogRequestRef = useRef<boolean>();\r\n    returnToFullscreenOnFinishedAnkiDialogRequestRef.current = returnToFullscreenOnFinishedAnkiDialogRequest;\r\n\r\n    const videoRefCallback = useCallback(\r\n        (element: HTMLVideoElement) => {\r\n            if (element) {\r\n                const videoElement = element as ExperimentalHTMLVideoElement;\r\n                videoRef.current = videoElement;\r\n\r\n                if (videoElement.readyState === 4) {\r\n                    notifyReady(videoElement, playerChannel, setAudioTracks, setSelectedAudioTrack);\r\n                } else {\r\n                    videoElement.onloadeddata = (event) => {\r\n                        notifyReady(videoElement, playerChannel, setAudioTracks, setSelectedAudioTrack);\r\n                    };\r\n                }\r\n\r\n                videoElement.oncanplay = (event) => {\r\n                    playerChannel.readyState(4);\r\n\r\n                    if (playingRef.current) {\r\n                        clock.start();\r\n                    }\r\n                };\r\n\r\n                videoElement.ontimeupdate = (event) => clock.setTime(element.currentTime * 1000);\r\n\r\n                videoElement.onerror = (event) => onError(errorMessage(element));\r\n            }\r\n        },\r\n        [clock, playerChannel, onError]\r\n    );\r\n\r\n    function selectAudioTrack(id: string) {\r\n        const audioTracks = videoRef.current?.audioTracks;\r\n\r\n        if (!audioTracks) {\r\n            return;\r\n        }\r\n\r\n        // @ts-ignore\r\n        for (const t of audioTracks) {\r\n            if (t.id === id) {\r\n                t.enabled = true;\r\n            } else {\r\n                t.enabled = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        playerChannel.onReady((duration) => setLength(duration));\r\n\r\n        playerChannel.onPlay(async () => {\r\n            await videoRef.current?.play();\r\n            clock.start();\r\n            setPlaying(true);\r\n        });\r\n\r\n        playerChannel.onPause(() => {\r\n            videoRef.current?.pause();\r\n            clock.stop();\r\n            setPlaying(false);\r\n        });\r\n\r\n        playerChannel.onCurrentTime((currentTime) => {\r\n            if (videoRef.current) {\r\n                videoRef.current.currentTime = currentTime;\r\n            }\r\n\r\n            if (videoRef.current?.readyState === 4) {\r\n                playerChannel.readyState(4);\r\n            }\r\n\r\n            clock.stop();\r\n            clock.setTime(currentTime * 1000);\r\n        });\r\n\r\n        playerChannel.onAudioTrackSelected((id) => {\r\n            selectAudioTrack(id);\r\n            setSelectedAudioTrack(id);\r\n            playerChannel.audioTrackSelected(id);\r\n        });\r\n\r\n        playerChannel.onClose(() => {\r\n            playerChannel.close();\r\n            window.close();\r\n        });\r\n\r\n        playerChannel.onSubtitles((subtitles) => {\r\n            setSubtitles(subtitles);\r\n\r\n            if (subtitles && subtitles.length > 0) {\r\n                const s = subtitles[0];\r\n                const offset = s.start - s.originalStart;\r\n                setOffset(offset);\r\n            }\r\n        });\r\n\r\n        playerChannel.onCondensedModeToggle((enabled) => setCondensedModeEnabled(enabled));\r\n        playerChannel.onHideSubtitlePlayerToggle((hidden) => setSubtitlePlayerHidden(hidden));\r\n        playerChannel.onAppBarToggle((hidden) => setAppBarHidden(hidden));\r\n        playerChannel.onAnkiDialogRequest(() => {\r\n            if (fullscreenRef.current && !popOut) {\r\n                document.exitFullscreen();\r\n                setReturnToFullscreenOnFinishedAnkiDialogRequest(true);\r\n            }\r\n        });\r\n\r\n        playerChannel.onFinishedAnkiDialogRequest(async (resume) => {\r\n            if (returnToFullscreenOnFinishedAnkiDialogRequestRef.current) {\r\n                if (resume) {\r\n                    try {\r\n                        await containerRef.current?.requestFullscreen();\r\n                    } catch (e) {\r\n                        console.error(e);\r\n                    }\r\n                }\r\n\r\n                setReturnToFullscreenOnFinishedAnkiDialogRequest(false);\r\n            }\r\n        });\r\n\r\n        window.onbeforeunload = (e) => {\r\n            if (!poppingInRef.current) {\r\n                playerChannel.close();\r\n            }\r\n        };\r\n\r\n        return () => playerChannel.close();\r\n    }, [clock, playerChannel, popOut]);\r\n\r\n    const handlePlay = useCallback(() => {\r\n        if (videoRef.current) {\r\n            playerChannel.play();\r\n        }\r\n    }, [playerChannel]);\r\n\r\n    const handlePause = useCallback(() => playerChannel.pause(), [playerChannel]);\r\n\r\n    const handleSeek = useCallback(\r\n        (progress: number) => {\r\n            if (playingRef.current) {\r\n                clock.stop();\r\n            }\r\n\r\n            const time = progress * length;\r\n            playerChannel.currentTime = time / 1000;\r\n        },\r\n        [length, clock, playerChannel]\r\n    );\r\n\r\n    function handleMouseMove(e: React.MouseEvent<HTMLDivElement>) {\r\n        lastMouseMovementTimestamp.current = Date.now();\r\n\r\n        if (!containerRef.current) {\r\n            return;\r\n        }\r\n\r\n        var bounds = containerRef.current.getBoundingClientRect();\r\n        mousePositionRef.current.x = e.clientX - bounds.left;\r\n        mousePositionRef.current.y = e.clientY - bounds.top;\r\n    }\r\n\r\n    const handleAudioTrackSelected = useCallback(\r\n        (id: string) => {\r\n            if (playingRef.current) {\r\n                clock.stop();\r\n                playerChannel.pause();\r\n            }\r\n\r\n            selectAudioTrack(id);\r\n            setSelectedAudioTrack(id);\r\n            playerChannel.currentTime = 0;\r\n            playerChannel.audioTrackSelected(id);\r\n        },\r\n        [playerChannel, clock]\r\n    );\r\n\r\n    useEffect(() => {\r\n        if (!subtitles || subtitles.length === 0) {\r\n            return;\r\n        }\r\n\r\n        const interval = setInterval(() => {\r\n            const now = clock.time(length);\r\n            let showSubtitles = [];\r\n\r\n            for (let i = 0; i < subtitles.length; ++i) {\r\n                const s = subtitles[i];\r\n\r\n                if (now >= s.start && now < s.end && !disabledSubtitleTracks[s.track]) {\r\n                    showSubtitles.push({ ...s, index: i });\r\n                }\r\n\r\n                if (now < s.start) {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            showSubtitles = showSubtitles.sort((s1, s2) => s1.track - s2.track);\r\n\r\n            if (!arrayEquals(showSubtitles, showSubtitlesRef.current, (s1, s2) => s1.index === s2.index)) {\r\n                setShowSubtitles(showSubtitles);\r\n            }\r\n        }, 50);\r\n\r\n        return () => clearTimeout(interval);\r\n    }, [subtitles, disabledSubtitleTracks, clock, length]);\r\n\r\n    const handleOffsetChange = useCallback(\r\n        (offset: number) => {\r\n            setOffset(offset);\r\n            setSubtitles((subtitles) =>\r\n                subtitles.map((s) => ({\r\n                    text: s.text,\r\n                    textImage: s.textImage,\r\n                    start: s.originalStart + offset,\r\n                    originalStart: s.originalStart,\r\n                    end: s.originalEnd + offset,\r\n                    originalEnd: s.originalEnd,\r\n                    track: s.track,\r\n                }))\r\n            );\r\n            playerChannel.offset(offset);\r\n        },\r\n        [playerChannel]\r\n    );\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindSeekToSubtitle(\r\n            (event, subtitle) => {\r\n                event.stopPropagation();\r\n                event.preventDefault();\r\n                playerChannel.currentTime = subtitle.start / 1000;\r\n            },\r\n            () => !videoRef.current,\r\n            () => clock.time(length),\r\n            () => subtitles\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [playerChannel, subtitles, length, clock]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindSeekToBeginningOfCurrentSubtitle(\r\n            (event, subtitle) => {\r\n                event.stopPropagation();\r\n                event.preventDefault();\r\n                playerChannel.currentTime = subtitle.start / 1000;\r\n            },\r\n            () => !videoRef.current,\r\n            () => clock.time(length),\r\n            () => subtitles\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [playerChannel, subtitles, length, clock]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindSeekBackwardOrForward(\r\n            (event, forward) => {\r\n                event.stopPropagation();\r\n                event.preventDefault();\r\n                if (forward) {\r\n                    playerChannel.currentTime = Math.min(length / 1000, playerChannel.currentTime + 5);\r\n                } else {\r\n                    playerChannel.currentTime = Math.max(0, playerChannel.currentTime - 5);\r\n                }\r\n            },\r\n            () => !videoRef.current\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [playerChannel, length]);\r\n\r\n    const calculateSurroundingSubtitles = useCallback(\r\n        (index: number) => {\r\n            return surroundingSubtitles(\r\n                subtitles,\r\n                index,\r\n                settingsProvider.surroundingSubtitlesCountRadius,\r\n                settingsProvider.surroundingSubtitlesTimeRadius\r\n            );\r\n        },\r\n        [subtitles, settingsProvider.surroundingSubtitlesCountRadius, settingsProvider.surroundingSubtitlesTimeRadius]\r\n    );\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindCopy<IndexedSubtitleModel>(\r\n            (event, subtitle) => {\r\n                event.stopPropagation();\r\n                event.preventDefault();\r\n\r\n                const noSubtitles = !subtitles || subtitles.length === 0;\r\n\r\n                playerChannel.copy(\r\n                    subtitle,\r\n                    noSubtitles\r\n                        ? mockSurroundingSubtitles(subtitle, length, 5000)\r\n                        : calculateSurroundingSubtitles(subtitle.index)\r\n                );\r\n\r\n                if (fullscreen) {\r\n                    setAlert(\r\n                        subtitle.text === ''\r\n                            ? `Saved ${humanReadableTime(subtitle.start)}`\r\n                            : `Copied: \"${subtitle.text}\"`\r\n                    );\r\n                    setAlertOpen(true);\r\n                }\r\n            },\r\n            () => false,\r\n            () => {\r\n                if (!subtitles || subtitles.length === 0) {\r\n                    const timestamp = clock.time(length);\r\n                    const end = Math.min(timestamp + 5000, length);\r\n\r\n                    return {\r\n                        text: '',\r\n                        start: timestamp,\r\n                        originalStart: timestamp,\r\n                        end: end,\r\n                        originalEnd: end,\r\n                        track: 0,\r\n                        index: 0,\r\n                    };\r\n                }\r\n\r\n                if (!showSubtitlesRef.current || showSubtitlesRef.current.length === 0) {\r\n                    return undefined;\r\n                }\r\n\r\n                return showSubtitlesRef.current[0];\r\n            }\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [playerChannel, clock, length, subtitles, calculateSurroundingSubtitles, fullscreen]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindAdjustOffset(\r\n            (event, offset) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                handleOffsetChange(offset);\r\n            },\r\n            () => false,\r\n            () => subtitles\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [handleOffsetChange, subtitles]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindToggleSubtitles(\r\n            (event) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                setSubtitlesEnabled((enabled) => !enabled);\r\n            },\r\n            () => {},\r\n            () => false\r\n        );\r\n\r\n        return () => unbind();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindToggleSubtitleTrackInVideo(\r\n            (event, track) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                setDisabledSubtitleTracks((tracks) => {\r\n                    const newTracks = { ...tracks };\r\n                    newTracks[track] = !tracks[track];\r\n                    return newTracks;\r\n                });\r\n            },\r\n            () => {},\r\n            () => false\r\n        );\r\n\r\n        return () => unbind();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindToggleSubtitleTrackInList(\r\n            (event, track) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                playerChannel.toggleSubtitleTrackInList(track);\r\n            },\r\n            () => {},\r\n            () => false\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [playerChannel]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindOffsetToSubtitle(\r\n            (event, offset) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                handleOffsetChange(offset);\r\n            },\r\n            () => false,\r\n            () => clock.time(length),\r\n            () => subtitles\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [handleOffsetChange, subtitles, clock, length]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindAnkiExport(\r\n            (event) => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n\r\n                if (!subtitles || subtitles.length === 0) {\r\n                    const timestamp = clock.time(length);\r\n                    const end = Math.min(timestamp + 5000, length);\r\n                    const subtitle = {\r\n                        text: '',\r\n                        start: timestamp,\r\n                        originalStart: timestamp,\r\n                        end: end,\r\n                        originalEnd: end,\r\n                        track: 0,\r\n                    };\r\n\r\n                    playerChannel.copy(subtitle, mockSurroundingSubtitles(subtitle, length, 5000), false);\r\n                } else if (showSubtitlesRef.current && showSubtitlesRef.current.length > 0) {\r\n                    const currentSubtitle = showSubtitlesRef.current[0];\r\n                    playerChannel.copy(currentSubtitle, calculateSurroundingSubtitles(currentSubtitle.index), true);\r\n                }\r\n\r\n                // Ensure that anki dialog request is handled after the subtitle has appeared in copy history\r\n                // FIXME: This is a hack\r\n                setTimeout(() => playerChannel.ankiDialogRequest(fullscreen), 10);\r\n            },\r\n            () => false\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [playerChannel, subtitles, clock, length, calculateSurroundingSubtitles, fullscreen]);\r\n\r\n    useEffect(() => {\r\n        const unbind = KeyBindings.bindPlay(\r\n            (event) => {\r\n                event.preventDefault();\r\n\r\n                if (playing) {\r\n                    playerChannel.pause();\r\n                } else {\r\n                    playerChannel.play();\r\n                }\r\n            },\r\n            () => false\r\n        );\r\n\r\n        return () => unbind();\r\n    }, [playing, playerChannel]);\r\n\r\n    const handleSubtitlesToggle = useCallback(() => setSubtitlesEnabled((subtitlesEnabled) => !subtitlesEnabled), []);\r\n\r\n    const handleFullscreenToggle = useCallback(() => {\r\n        if (fullscreen) {\r\n            document.exitFullscreen();\r\n        } else {\r\n            containerRef.current?.requestFullscreen();\r\n        }\r\n    }, [fullscreen]);\r\n\r\n    const handleVolumeChange = useCallback((volume: number) => {\r\n        if (videoRef.current) {\r\n            videoRef.current.volume = volume;\r\n        }\r\n    }, []);\r\n\r\n    const handlePopOutToggle = useCallback(() => {\r\n        playerChannel.popOutToggle();\r\n        if (popOut) {\r\n            poppingInRef.current = true;\r\n            window.close();\r\n        }\r\n    }, [playerChannel, popOut]);\r\n\r\n    const handleCondensedModeToggle = useCallback(() => {\r\n        playerChannel.condensedModeToggle();\r\n    }, [playerChannel]);\r\n\r\n    const handleClose = useCallback(() => {\r\n        playerChannel.close();\r\n        window.close();\r\n    }, [playerChannel]);\r\n\r\n    const handleHideSubtitlePlayerToggle = useCallback(() => {\r\n        playerChannel.hideSubtitlePlayerToggle();\r\n    }, [playerChannel]);\r\n\r\n    const handleTheaterModeToggle = useCallback(() => {\r\n        playerChannel.appBarToggle();\r\n    }, [playerChannel]);\r\n\r\n    const handleClick = useCallback(() => {\r\n        if (playing) {\r\n            playerChannel.pause();\r\n        } else {\r\n            playerChannel.play();\r\n        }\r\n    }, [playerChannel, playing]);\r\n\r\n    const handleDoubleClick = useCallback(() => handleFullscreenToggle(), [handleFullscreenToggle]);\r\n\r\n    const handleAlertClosed = useCallback(() => setAlertOpen(false), []);\r\n    const {\r\n        subtitleSize,\r\n        subtitleColor,\r\n        subtitleOutlineThickness,\r\n        subtitleOutlineColor,\r\n        subtitleBackgroundColor,\r\n        subtitleBackgroundOpacity,\r\n        subtitleFontFamily,\r\n        imageBasedSubtitleScaleFactor,\r\n    } = settingsProvider.subtitleSettings;\r\n    const subtitleStyles = useMemo(\r\n        () =>\r\n            computeStyles({\r\n                subtitleSize,\r\n                subtitleColor,\r\n                subtitleOutlineThickness,\r\n                subtitleOutlineColor,\r\n                subtitleBackgroundColor,\r\n                subtitleBackgroundOpacity,\r\n                subtitleFontFamily,\r\n            }),\r\n        [\r\n            subtitleSize,\r\n            subtitleColor,\r\n            subtitleOutlineThickness,\r\n            subtitleOutlineColor,\r\n            subtitleBackgroundColor,\r\n            subtitleBackgroundOpacity,\r\n            subtitleFontFamily,\r\n        ]\r\n    );\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            if (Date.now() - lastMouseMovementTimestamp.current > 300) {\r\n                if (showCursor) {\r\n                    setShowCursor(false);\r\n                }\r\n            } else if (!showCursor) {\r\n                setShowCursor(true);\r\n            }\r\n        }, 100);\r\n\r\n        return () => clearInterval(interval);\r\n    }, [showCursor]);\r\n\r\n    return (\r\n        <div ref={containerRef} onMouseMove={handleMouseMove} className={classes.root}>\r\n            <video\r\n                preload=\"auto\"\r\n                controls={false}\r\n                onClick={handleClick}\r\n                onDoubleClick={handleDoubleClick}\r\n                className={showCursor ? classes.video : `${classes.cursorHidden} ${classes.video}`}\r\n                ref={videoRefCallback}\r\n                src={videoFile}\r\n            />\r\n            {subtitlesEnabled && (\r\n                <div className={classes.subtitleContainer}>\r\n                    {showSubtitles.map((subtitle) => {\r\n                        let content;\r\n\r\n                        if (subtitle.textImage) {\r\n                            content = (\r\n                                <SubtitleTextImage\r\n                                    availableWidth={videoRef.current?.width ?? window.screen.availWidth}\r\n                                    subtitle={subtitle}\r\n                                    scale={imageBasedSubtitleScaleFactor}\r\n                                />\r\n                            );\r\n                        } else {\r\n                            content = <span style={subtitleStyles}>{subtitle.text}</span>;\r\n                        }\r\n                        return <React.Fragment key={subtitle.index}>{content}</React.Fragment>;\r\n                    })}\r\n                </div>\r\n            )}\r\n            {fullscreen && (\r\n                <Alert open={alertOpen} onClose={handleAlertClosed} autoHideDuration={3000} severity=\"success\">\r\n                    {alert}\r\n                </Alert>\r\n            )}\r\n            <Controls\r\n                mousePositionRef={mousePositionRef}\r\n                playing={playing}\r\n                clock={clock}\r\n                length={length}\r\n                audioTracks={audioTracks}\r\n                selectedAudioTrack={selectedAudioTrack}\r\n                subtitlesToggle={subtitles && subtitles.length > 0}\r\n                subtitlesEnabled={subtitlesEnabled}\r\n                offsetEnabled={true}\r\n                offset={offset}\r\n                fullscreenEnabled={true}\r\n                fullscreen={fullscreen}\r\n                closeEnabled={!popOut}\r\n                popOut={popOut}\r\n                volumeEnabled={true}\r\n                popOutEnabled={!isMobile}\r\n                condensedModeToggleEnabled={true}\r\n                condensedModeEnabled={condensedModeEnabled}\r\n                hideSubtitlePlayerToggleEnabled={subtitles?.length > 0 && !popOut && !fullscreen}\r\n                subtitlePlayerHidden={subtitlePlayerHidden}\r\n                onPlay={handlePlay}\r\n                onPause={handlePause}\r\n                onSeek={handleSeek}\r\n                onAudioTrackSelected={handleAudioTrackSelected}\r\n                onSubtitlesToggle={handleSubtitlesToggle}\r\n                onFullscreenToggle={handleFullscreenToggle}\r\n                onVolumeChange={handleVolumeChange}\r\n                onOffsetChange={handleOffsetChange}\r\n                onPopOutToggle={handlePopOutToggle}\r\n                onCondensedModeToggle={handleCondensedModeToggle}\r\n                onClose={handleClose}\r\n                onHideSubtitlePlayerToggle={handleHideSubtitlePlayerToggle}\r\n                settingsProvider={settingsProvider}\r\n                showOnMouseMovement={false}\r\n                theaterModeToggleEnabled={true}\r\n                theaterModeEnabled={appBarHidden}\r\n                onTheaterModeToggle={handleTheaterModeToggle}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n","import React, { useCallback, useEffect, useState, useMemo, useRef } from 'react';\r\nimport { Route, Navigate, Routes, useLocation, useSearchParams } from 'react-router-dom';\r\nimport { ThemeProvider, createTheme, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport { useWindowSize } from '../hooks/useWindowSize';\r\nimport { red } from '@material-ui/core/colors';\r\nimport {\r\n    Anki,\r\n    AudioClip,\r\n    Image,\r\n    humanReadableTime,\r\n    AnkiDialogSliderContext,\r\n    SubtitleModel,\r\n    VideoTabModel,\r\n    SubtitleSettingsToVideoMessage,\r\n    AnkiSettingsToVideoMessage,\r\n    MiscSettingsToVideoMessage,\r\n    LegacyPlayerSyncMessage,\r\n    PlayerSyncMessage,\r\n    AudioModel,\r\n    ImageModel,\r\n    AsbplayerSettings,\r\n} from '@project/common';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport clsx from 'clsx';\r\nimport Alert from './Alert';\r\nimport { AnkiDialog, ImageDialog } from '@project/common/components';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport DragOverlay from './DragOverlay';\r\nimport HelpDialog from './HelpDialog';\r\nimport SubtitleReader from '../services/SubtitleReader';\r\nimport Bar from './Bar';\r\nimport ChromeExtension, { ExtensionMessage } from '../services/ChromeExtension';\r\nimport CopyHistory, { CopyHistoryItem } from './CopyHistory';\r\nimport LandingPage from './LandingPage';\r\nimport Player, { AnkiDialogFinishedRequest, MediaSources } from './Player';\r\nimport SettingsDialog from './SettingsDialog';\r\nimport SettingsProvider from '../services/SettingsProvider';\r\nimport VideoPlayer from './VideoPlayer';\r\nimport { Color } from '@material-ui/lab';\r\nimport { AnkiExportMode } from '@project/common';\r\n\r\nconst latestExtensionVersion = '0.17.0';\r\nconst extensionUrl = 'https://github.com/killergerbah/asbplayer/releases/latest';\r\n\r\nconst useContentStyles = makeStyles<Theme, ContentProps>((theme) => ({\r\n    content: {\r\n        flexGrow: 1,\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        marginRight: 0,\r\n    },\r\n    contentShift: ({ drawerWidth }) => ({\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n        marginRight: drawerWidth,\r\n    }),\r\n}));\r\n\r\nfunction extractSources(files: FileList): MediaSources {\r\n    let subtitleFiles = [];\r\n    let audioFile = undefined;\r\n    let videoFile = undefined;\r\n\r\n    for (let i = 0; i < files.length; ++i) {\r\n        const f = files[i];\r\n        const extensionStartIndex = f.name.lastIndexOf('.');\r\n\r\n        if (extensionStartIndex === -1) {\r\n            throw new Error('Unable to determine extension of ' + f.name);\r\n        }\r\n\r\n        const extension = f.name.substring(extensionStartIndex + 1, f.name.length);\r\n        switch (extension) {\r\n            case 'ass':\r\n            case 'srt':\r\n            case 'vtt':\r\n                subtitleFiles.push(f);\r\n                break;\r\n            case 'sup':\r\n                subtitleFiles.push(f);\r\n                break;\r\n            case 'mkv':\r\n            case 'mp4':\r\n            case 'avi':\r\n                if (videoFile) {\r\n                    throw new Error('Cannot open two video files simultaneously');\r\n                }\r\n                videoFile = f;\r\n                break;\r\n            case 'mp3':\r\n            case 'm4a':\r\n            case 'aac':\r\n            case 'flac':\r\n            case 'ogg':\r\n            case 'wav':\r\n            case 'opus':\r\n                if (audioFile) {\r\n                    throw new Error('Cannot open two audio files simultaneously');\r\n                }\r\n                audioFile = f;\r\n                break;\r\n            default:\r\n                throw new Error('Unsupported extension ' + extension);\r\n        }\r\n    }\r\n\r\n    if (videoFile && audioFile) {\r\n        throw new Error('Cannot load both an audio and video file simultaneously');\r\n    }\r\n\r\n    return { subtitleFiles: subtitleFiles, audioFile: audioFile, videoFile: videoFile };\r\n}\r\n\r\nfunction audioClipFromItem(\r\n    item: CopyHistoryItem,\r\n    sliderContext: AnkiDialogSliderContext | undefined,\r\n    paddingStart: number,\r\n    paddingEnd: number\r\n) {\r\n    if (item.audio) {\r\n        const start = item.audio.start ?? item.start;\r\n        const end = item.audio.end ?? item.end;\r\n\r\n        return AudioClip.fromBase64(\r\n            item.subtitleFile!.name,\r\n            Math.max(0, start - (item.audio.paddingStart ?? 0)),\r\n            end + (item.audio.paddingEnd ?? 0),\r\n            item.audio.base64,\r\n            item.audio.extension\r\n        );\r\n    }\r\n\r\n    if (item.audioFile || item.videoFile) {\r\n        let start;\r\n        let end;\r\n\r\n        if (sliderContext) {\r\n            start = sliderContext.subtitleStart;\r\n            end = sliderContext.subtitleEnd;\r\n        } else {\r\n            start = item.start;\r\n            end = item.end;\r\n        }\r\n\r\n        return AudioClip.fromFile(\r\n            (item.audioFile || item.videoFile)!,\r\n            Math.max(0, start - paddingStart),\r\n            end + paddingEnd,\r\n            item.audioTrack\r\n        );\r\n    }\r\n\r\n    return undefined;\r\n}\r\n\r\nfunction imageFromItem(item: CopyHistoryItem, maxWidth: number, maxHeight: number) {\r\n    if (item.image) {\r\n        return Image.fromBase64(item.subtitleFile!.name, item.start, item.image.base64, item.image.extension);\r\n    }\r\n\r\n    if (item.videoFile) {\r\n        return Image.fromFile(item.videoFile, item.start, maxWidth, maxHeight);\r\n    }\r\n\r\n    return undefined;\r\n}\r\n\r\nfunction itemSourceString(item: CopyHistoryItem | undefined) {\r\n    if (!item) {\r\n        return undefined;\r\n    }\r\n\r\n    const source = item.subtitleFile?.name ?? item.audioFile?.name ?? item.videoFile?.name;\r\n\r\n    if (!source) {\r\n        return undefined;\r\n    }\r\n\r\n    return `${source} (${humanReadableTime(item.start)})`;\r\n}\r\n\r\nfunction itemSliderContext(item: CopyHistoryItem) {\r\n    if (!item) {\r\n        return undefined;\r\n    }\r\n\r\n    return {\r\n        subtitleStart: item.start,\r\n        subtitleEnd: item.end,\r\n        subtitles: item.surroundingSubtitles || [\r\n            { start: item.start, end: item.end, text: item.text, track: item.track },\r\n        ],\r\n    };\r\n}\r\n\r\nfunction revokeUrls(sources: MediaSources) {\r\n    if (sources.audioFileUrl) {\r\n        URL.revokeObjectURL(sources.audioFileUrl);\r\n    }\r\n\r\n    if (sources.videoFileUrl) {\r\n        URL.revokeObjectURL(sources.videoFileUrl);\r\n    }\r\n}\r\n\r\ninterface NavigateToVideoProps {\r\n    searchParams: URLSearchParams;\r\n}\r\n\r\nfunction NavigateToVideo({ searchParams }: NavigateToVideoProps) {\r\n    const videoFile = searchParams.get('video')!;\r\n    const channel = searchParams.get('channel')!;\r\n    const popOut = searchParams.get('popout')!;\r\n\r\n    return (\r\n        <Navigate to={'/video?video=' + encodeURIComponent(videoFile) + '&channel=' + channel + '&popout=' + popOut} />\r\n    );\r\n}\r\n\r\ninterface RenderVideoProps {\r\n    searchParams: URLSearchParams;\r\n    settingsProvider: SettingsProvider;\r\n    onError: (error: string) => void;\r\n}\r\n\r\nfunction RenderVideo({ searchParams, settingsProvider, onError }: RenderVideoProps) {\r\n    const videoFile = searchParams.get('video')!;\r\n    const channel = searchParams.get('channel')!;\r\n    const popOut = searchParams.get('popout')! === 'true';\r\n\r\n    return (\r\n        <VideoPlayer\r\n            settingsProvider={settingsProvider}\r\n            videoFile={videoFile}\r\n            popOut={popOut}\r\n            channel={channel}\r\n            onError={onError}\r\n        />\r\n    );\r\n}\r\n\r\ninterface ContentProps {\r\n    drawerOpen: boolean;\r\n    drawerWidth: number;\r\n    children: React.ReactNode[];\r\n}\r\n\r\nfunction Content(props: ContentProps) {\r\n    const classes = useContentStyles(props);\r\n\r\n    return (\r\n        <main\r\n            className={clsx(classes.content, {\r\n                [classes.contentShift]: props.drawerOpen,\r\n            })}\r\n        >\r\n            {props.children}\r\n        </main>\r\n    );\r\n}\r\n\r\nfunction App() {\r\n    const subtitleReader = useMemo<SubtitleReader>(() => new SubtitleReader(), []);\r\n    const settingsProvider = useMemo<SettingsProvider>(() => new SettingsProvider(), []);\r\n    const theme = useMemo<Theme>(\r\n        () =>\r\n            createTheme({\r\n                palette: {\r\n                    primary: {\r\n                        main: '#49007a',\r\n                    },\r\n                    secondary: {\r\n                        main: '#ff1f62',\r\n                    },\r\n                    error: {\r\n                        main: red.A400,\r\n                    },\r\n                    type: settingsProvider.themeType,\r\n                },\r\n            }),\r\n        [settingsProvider.themeType]\r\n    );\r\n    const anki = useMemo<Anki>(() => new Anki(settingsProvider), [settingsProvider]);\r\n    const location = useLocation();\r\n    const inVideoPlayer = location.pathname === '/video';\r\n    const extension = useMemo<ChromeExtension>(() => new ChromeExtension(!inVideoPlayer), [inVideoPlayer]);\r\n    const videoFrameRef = useRef<HTMLIFrameElement>(null);\r\n    const [width] = useWindowSize(!inVideoPlayer);\r\n    const drawerRatio = videoFrameRef.current ? 0.2 : 0.3;\r\n    const minDrawerSize = videoFrameRef.current ? 150 : 300;\r\n    const drawerWidth = Math.max(minDrawerSize, width * drawerRatio);\r\n    const [copiedSubtitles, setCopiedSubtitles] = useState<CopyHistoryItem[]>([]);\r\n    const copiedSubtitlesRef = useRef<CopyHistoryItem[]>([]);\r\n    copiedSubtitlesRef.current = copiedSubtitles;\r\n    const [copyHistoryOpen, setCopyHistoryOpen] = useState<boolean>(false);\r\n    const [theaterMode, setTheaterMode] = useState<boolean>(settingsProvider.theaterMode);\r\n    const [videoPopOut, setVideoPopOut] = useState<boolean>(false);\r\n    const [alert, setAlert] = useState<string>();\r\n    const [alertOpen, setAlertOpen] = useState<boolean>(false);\r\n    const [alertSeverity, setAlertSeverity] = useState<Color>();\r\n    const [jumpToSubtitle, setJumpToSubtitle] = useState<SubtitleModel>();\r\n    const [sources, setSources] = useState<MediaSources>({ subtitleFiles: [] });\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n    const [dragging, setDragging] = useState<boolean>(false);\r\n    const dragEnterRef = useRef<Element | null>(null);\r\n    const [fileName, setFileName] = useState<string>();\r\n    const [ankiDialogOpen, setAnkiDialogOpen] = useState<boolean>(false);\r\n    const [ankiDialogDisabled, setAnkiDialogDisabled] = useState<boolean>(false);\r\n    const [ankiDialogItem, setAnkiDialogItem] = useState<CopyHistoryItem>();\r\n    const ankiDialogItemSliderContext = useMemo<AnkiDialogSliderContext | undefined>(\r\n        () => ankiDialogItem && itemSliderContext(ankiDialogItem),\r\n        [ankiDialogItem]\r\n    );\r\n    const ankiDialogAudioClip = useMemo<AudioClip | undefined>(\r\n        () =>\r\n            ankiDialogItem &&\r\n            audioClipFromItem(\r\n                ankiDialogItem,\r\n                ankiDialogItemSliderContext,\r\n                settingsProvider.audioPaddingStart,\r\n                settingsProvider.audioPaddingEnd\r\n            ),\r\n        [\r\n            ankiDialogItem,\r\n            ankiDialogItemSliderContext,\r\n            settingsProvider.audioPaddingStart,\r\n            settingsProvider.audioPaddingEnd,\r\n        ]\r\n    );\r\n    const ankiDialogImage = useMemo<Image | undefined>(\r\n        () =>\r\n            ankiDialogItem &&\r\n            imageFromItem(ankiDialogItem, settingsProvider.maxImageWidth, settingsProvider.maxImageHeight),\r\n        [ankiDialogItem, settingsProvider.maxImageWidth, settingsProvider.maxImageHeight]\r\n    );\r\n    const [ankiDialogRequestToVideo, setAnkiDialogRequestToVideo] = useState<number>();\r\n    const [ankiDialogRequested, setAnkiDialogRequested] = useState<boolean>(false);\r\n    const [ankiDialogFinishedRequest, setAnkiDialogFinishedRequest] = useState<AnkiDialogFinishedRequest>({\r\n        timestamp: 0,\r\n        resume: false,\r\n    });\r\n    const [settingsDialogOpen, setSettingsDialogOpen] = useState<boolean>(false);\r\n    const [helpDialogOpen, setHelpDialogOpen] = useState<boolean>(false);\r\n    const [imageDialogOpen, setImageDialogOpen] = useState<boolean>(false);\r\n    const [disableKeyEvents, setDisableKeyEvents] = useState<boolean>(false);\r\n    const [image, setImage] = useState<Image>();\r\n    const [tab, setTab] = useState<VideoTabModel>();\r\n    const [availableTabs, setAvailableTabs] = useState<VideoTabModel[]>([]);\r\n    const fileInputRef = useRef<HTMLInputElement>(null);\r\n    const { subtitleFiles } = sources;\r\n\r\n    const handleCopy = useCallback(\r\n        (\r\n            subtitle: SubtitleModel,\r\n            surroundingSubtitles: SubtitleModel[],\r\n            audioFile: File | undefined,\r\n            videoFile: File | undefined,\r\n            subtitleFile: File | undefined,\r\n            audioTrack: string | undefined,\r\n            audio: AudioModel | undefined,\r\n            image: ImageModel | undefined,\r\n            url: string | undefined,\r\n            preventDuplicate: boolean | undefined,\r\n            id: string | undefined\r\n        ) => {\r\n            if (subtitle) {\r\n                navigator.clipboard.writeText(subtitle.text);\r\n            }\r\n\r\n            setCopiedSubtitles((copiedSubtitles) => {\r\n                if (preventDuplicate && copiedSubtitles.length > 0) {\r\n                    const last = copiedSubtitles[copiedSubtitles.length - 1];\r\n\r\n                    if (\r\n                        subtitle.start === last.start &&\r\n                        subtitle.end === last.end &&\r\n                        subtitle.text === last.text &&\r\n                        subtitleFile?.name === last.subtitleFile?.name\r\n                    ) {\r\n                        return copiedSubtitles;\r\n                    }\r\n                }\r\n\r\n                const newCopiedSubtitles: CopyHistoryItem[] = [];\r\n                let updated = false;\r\n\r\n                for (const copiedSubtitle of copiedSubtitles) {\r\n                    if (id && copiedSubtitle.id === id) {\r\n                        const newCopiedSubtitle = {\r\n                            ...copiedSubtitle,\r\n                            ...subtitle,\r\n                            ...(surroundingSubtitles && { surroundingSubtitles: surroundingSubtitles }),\r\n                            ...(subtitleFile && { subtitleFile: subtitleFile }),\r\n                            ...(audioFile && { audioFile: audioFile }),\r\n                            ...(videoFile && { videoFile: videoFile }),\r\n                            ...(audioTrack && { audioTrack: audioTrack }),\r\n                            ...(audio && { audio: audio }),\r\n                            ...(image && { image: image }),\r\n                            ...(url && { url: url }),\r\n                        };\r\n                        newCopiedSubtitles.push(newCopiedSubtitle);\r\n                        updated = true;\r\n                    } else {\r\n                        newCopiedSubtitles.push(copiedSubtitle);\r\n                    }\r\n                }\r\n\r\n                if (!updated) {\r\n                    newCopiedSubtitles.push({\r\n                        ...subtitle,\r\n                        surroundingSubtitles: surroundingSubtitles,\r\n                        timestamp: Date.now(),\r\n                        id: id || uuidv4(),\r\n                        name: fileName!,\r\n                        subtitleFile: subtitleFile,\r\n                        audioFile: audioFile,\r\n                        videoFile: videoFile,\r\n                        audioTrack: audioTrack,\r\n                        audio: audio,\r\n                        image: image,\r\n                        url: url,\r\n                    });\r\n                }\r\n\r\n                return newCopiedSubtitles;\r\n            });\r\n\r\n            if (subtitle) {\r\n                setAlertSeverity('success');\r\n                setAlert(\r\n                    subtitle.text === '' ? `Saved ${humanReadableTime(subtitle.start)}` : `Copied: \"${subtitle.text}\"`\r\n                );\r\n                setAlertOpen(true);\r\n            }\r\n        },\r\n        [fileName]\r\n    );\r\n\r\n    const handleOpenCopyHistory = useCallback(() => setCopyHistoryOpen((copyHistoryOpen) => !copyHistoryOpen), []);\r\n    const handleCloseCopyHistory = useCallback(() => setCopyHistoryOpen(false), []);\r\n    const handleAppBarToggle = useCallback(() => {\r\n        settingsProvider.theaterMode = !settingsProvider.theaterMode;\r\n        setTheaterMode(settingsProvider.theaterMode);\r\n    }, [settingsProvider]);\r\n    const handleVideoPopOut = useCallback(() => {\r\n        setVideoPopOut((videoPopOut) => !videoPopOut);\r\n    }, []);\r\n    const handleOpenSettings = useCallback(() => {\r\n        setDisableKeyEvents(true);\r\n        setSettingsDialogOpen(true);\r\n    }, []);\r\n    const handleOpenHelp = useCallback(() => setHelpDialogOpen(true), []);\r\n    const handleCloseHelp = useCallback(() => setHelpDialogOpen(false), []);\r\n    const handleAlertClosed = useCallback(() => setAlertOpen(false), []);\r\n    const handleImageDialogClosed = useCallback(() => setImageDialogOpen(false), []);\r\n    const handleCloseSettings = useCallback(\r\n        (newSettings: AsbplayerSettings) => {\r\n            settingsProvider.settings = newSettings;\r\n            setSettingsDialogOpen(false);\r\n            setDisableKeyEvents(false);\r\n            const subtitleSettingsMessage: SubtitleSettingsToVideoMessage = {\r\n                command: 'subtitleSettings',\r\n                value: settingsProvider.subtitleSettings,\r\n            };\r\n            const ankiSettingsMessage: AnkiSettingsToVideoMessage = {\r\n                command: 'ankiSettings',\r\n                value: settingsProvider.ankiSettings,\r\n            };\r\n            const miscSettingsMessage: MiscSettingsToVideoMessage = {\r\n                command: 'miscSettings',\r\n                value: settingsProvider.miscSettings,\r\n            };\r\n            extension.publishMessage(subtitleSettingsMessage);\r\n            extension.publishMessage(ankiSettingsMessage);\r\n            extension.publishMessage(miscSettingsMessage);\r\n        },\r\n        [extension, settingsProvider]\r\n    );\r\n\r\n    const handleDeleteCopyHistoryItem = useCallback(\r\n        (item: CopyHistoryItem) => {\r\n            const newCopiedSubtitles = [];\r\n\r\n            for (let subtitle of copiedSubtitles) {\r\n                if (item.id !== subtitle.id) {\r\n                    newCopiedSubtitles.push(subtitle);\r\n                }\r\n            }\r\n\r\n            setCopiedSubtitles(newCopiedSubtitles);\r\n        },\r\n        [copiedSubtitles]\r\n    );\r\n\r\n    const handleError = useCallback((message: string) => {\r\n        setAlertSeverity('error');\r\n        setAlert(message);\r\n        setAlertOpen(true);\r\n    }, []);\r\n\r\n    const handleUnloadAudio = useCallback(\r\n        (audioFileUrl: string) => {\r\n            if (audioFileUrl !== sources.audioFileUrl) {\r\n                return;\r\n            }\r\n\r\n            setSources((previous) => {\r\n                URL.revokeObjectURL(audioFileUrl);\r\n\r\n                return {\r\n                    subtitleFiles: previous.subtitleFiles,\r\n                    audioFile: undefined,\r\n                    audioFileUrl: undefined,\r\n                    videoFile: previous.videoFile,\r\n                    videoFileUrl: previous.videoFileUrl,\r\n                };\r\n            });\r\n        },\r\n        [sources]\r\n    );\r\n\r\n    const handleUnloadVideo = useCallback(\r\n        (videoFileUrl: string) => {\r\n            if (videoFileUrl !== sources.videoFileUrl) {\r\n                return;\r\n            }\r\n\r\n            setSources((previous) => {\r\n                URL.revokeObjectURL(videoFileUrl);\r\n\r\n                return {\r\n                    subtitleFiles: previous.subtitleFiles,\r\n                    audioFile: previous.audioFile,\r\n                    audioFileUrl: previous.audioFileUrl,\r\n                    videoFile: undefined,\r\n                    videoFileUrl: undefined,\r\n                };\r\n            });\r\n        },\r\n        [sources]\r\n    );\r\n\r\n    const handleClipAudio = useCallback(\r\n        async (item: CopyHistoryItem) => {\r\n            try {\r\n                const clip = await audioClipFromItem(\r\n                    item,\r\n                    undefined,\r\n                    settingsProvider.audioPaddingStart,\r\n                    settingsProvider.audioPaddingEnd\r\n                );\r\n\r\n                if (settingsProvider.preferMp3) {\r\n                    clip!.toMp3().download();\r\n                } else {\r\n                    clip!.download();\r\n                }\r\n            } catch (e) {\r\n                console.error(e);\r\n                if (e instanceof Error) {\r\n                    handleError(e.message);\r\n                } else {\r\n                    handleError(String(e));\r\n                }\r\n            }\r\n        },\r\n        [handleError, settingsProvider]\r\n    );\r\n\r\n    const handleDownloadImage = useCallback(\r\n        async (item: CopyHistoryItem) => {\r\n            try {\r\n                (await imageFromItem(\r\n                    item,\r\n                    settingsProvider.maxImageWidth,\r\n                    settingsProvider.maxImageHeight\r\n                ))!.download();\r\n            } catch (e) {\r\n                console.error(e);\r\n                if (e instanceof Error) {\r\n                    handleError(e.message);\r\n                } else {\r\n                    handleError(String(e));\r\n                }\r\n            }\r\n        },\r\n        [handleError, settingsProvider]\r\n    );\r\n\r\n    const handleSelectCopyHistoryItem = useCallback(\r\n        (item: CopyHistoryItem) => {\r\n            if (!subtitleFiles.find((f) => f.name === item.subtitleFile?.name)) {\r\n                handleError('Subtitle file ' + item.subtitleFile?.name + ' is not open.');\r\n                return;\r\n            }\r\n\r\n            setJumpToSubtitle(item);\r\n        },\r\n        [subtitleFiles, handleError]\r\n    );\r\n\r\n    const handleAnki = useCallback((item: CopyHistoryItem) => {\r\n        setAnkiDialogItem(item);\r\n        setAnkiDialogOpen(true);\r\n        setAnkiDialogDisabled(false);\r\n        setDisableKeyEvents(true);\r\n    }, []);\r\n\r\n    const handleAnkiDialogCancel = useCallback(() => {\r\n        setAnkiDialogOpen(false);\r\n        setAnkiDialogDisabled(false);\r\n        setDisableKeyEvents(false);\r\n\r\n        if (ankiDialogRequested) {\r\n            setAnkiDialogFinishedRequest({ timestamp: Date.now(), resume: true });\r\n            setAnkiDialogRequested(false);\r\n        }\r\n    }, [ankiDialogRequested]);\r\n\r\n    const handleAnkiDialogProceed = useCallback(\r\n        async (\r\n            text: string,\r\n            definition: string,\r\n            audioClip: AudioClip | undefined,\r\n            image: Image | undefined,\r\n            word: string,\r\n            source: string,\r\n            url: string,\r\n            customFieldValues: { [key: string]: string },\r\n            tags: string[],\r\n            mode: AnkiExportMode\r\n        ) => {\r\n            setAnkiDialogDisabled(true);\r\n\r\n            try {\r\n                const result = await anki.export(\r\n                    text,\r\n                    definition,\r\n                    audioClip,\r\n                    image,\r\n                    word,\r\n                    source,\r\n                    url,\r\n                    customFieldValues,\r\n                    tags,\r\n                    mode\r\n                );\r\n\r\n                if (mode !== 'gui') {\r\n                    if (mode === 'default') {\r\n                        setAlertSeverity('success');\r\n                        setAlert('Export succeeded: ' + result);\r\n                        setAlertOpen(true);\r\n                    } else if (mode === 'updateLast') {\r\n                        setAlertSeverity('success');\r\n                        setAlert('Update succeeded: ' + result);\r\n                        setAlertOpen(true);\r\n                    }\r\n\r\n                    setAnkiDialogOpen(false);\r\n\r\n                    if (ankiDialogRequested) {\r\n                        setAnkiDialogFinishedRequest({ timestamp: Date.now(), resume: true });\r\n                        setAnkiDialogRequested(false);\r\n                    }\r\n                }\r\n            } catch (e) {\r\n                console.error(e);\r\n                if (e instanceof Error) {\r\n                    handleError(e.message);\r\n                } else {\r\n                    handleError(String(e));\r\n                }\r\n            } finally {\r\n                setAnkiDialogDisabled(false);\r\n                setDisableKeyEvents(false);\r\n            }\r\n        },\r\n        [anki, handleError, ankiDialogRequested]\r\n    );\r\n\r\n    const handleAnkiDialogRequest = useCallback((forwardToVideo?: boolean) => {\r\n        if (copiedSubtitlesRef.current!.length === 0) {\r\n            return;\r\n        }\r\n\r\n        const item = copiedSubtitlesRef.current[copiedSubtitlesRef.current.length - 1];\r\n        setAnkiDialogItem(item);\r\n        setAnkiDialogOpen(true);\r\n        setAnkiDialogDisabled(false);\r\n        setDisableKeyEvents(true);\r\n        setAnkiDialogRequested(true);\r\n\r\n        if (forwardToVideo) {\r\n            setAnkiDialogRequestToVideo(Date.now());\r\n        }\r\n    }, []);\r\n\r\n    const handleViewImage = useCallback((image: Image) => {\r\n        setImage(image);\r\n        setImageDialogOpen(true);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        function onTabs(tabs: VideoTabModel[]) {\r\n            if (tabs.length !== availableTabs.length) {\r\n                setAvailableTabs(tabs);\r\n            } else {\r\n                let update = false;\r\n\r\n                for (let i = 0; i < availableTabs.length; ++i) {\r\n                    const t1 = availableTabs[i];\r\n                    const t2 = tabs[i];\r\n                    if (t1.id !== t2.id || t1.title !== t2.title || t1.src !== t2.src) {\r\n                        update = true;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (update) {\r\n                    setAvailableTabs(tabs);\r\n                }\r\n            }\r\n\r\n            let selectedTabMissing = tab && tabs.filter((t) => t.id === tab.id && t.src === tab.src).length === 0;\r\n\r\n            if (selectedTabMissing) {\r\n                setTab(undefined);\r\n                handleError('Lost connection with tab ' + tab!.id + ' ' + tab!.title);\r\n            }\r\n        }\r\n\r\n        extension.subscribeTabs(onTabs);\r\n\r\n        return () => extension.unsubscribeTabs(onTabs);\r\n    }, [availableTabs, tab, extension, handleError]);\r\n\r\n    const handleTabSelected = useCallback((tab: VideoTabModel) => setTab(tab), []);\r\n\r\n    const handleFiles = useCallback(\r\n        (files: FileList) => {\r\n            try {\r\n                let { subtitleFiles, audioFile, videoFile } = extractSources(files);\r\n\r\n                setSources((previous) => {\r\n                    setLoading(true);\r\n\r\n                    let videoFileUrl = undefined;\r\n                    let audioFileUrl = undefined;\r\n\r\n                    if (videoFile || audioFile) {\r\n                        revokeUrls(previous);\r\n\r\n                        if (videoFile) {\r\n                            videoFileUrl = URL.createObjectURL(videoFile);\r\n                        } else if (audioFile) {\r\n                            audioFileUrl = URL.createObjectURL(audioFile);\r\n                        }\r\n\r\n                        setTab(undefined);\r\n                    } else {\r\n                        videoFile = previous.videoFile;\r\n                        videoFileUrl = previous.videoFileUrl;\r\n                        audioFile = previous.audioFile;\r\n                        audioFileUrl = previous.audioFileUrl;\r\n                    }\r\n\r\n                    const sources = {\r\n                        subtitleFiles: subtitleFiles.length === 0 ? previous.subtitleFiles : subtitleFiles,\r\n                        audioFile: audioFile,\r\n                        audioFileUrl: audioFileUrl,\r\n                        videoFile: videoFile,\r\n                        videoFileUrl: videoFileUrl,\r\n                    };\r\n\r\n                    return sources;\r\n                });\r\n\r\n                if (subtitleFiles.length > 0) {\r\n                    const subtitleFileName = subtitleFiles[0].name;\r\n                    setFileName(subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')));\r\n                }\r\n            } catch (e) {\r\n                console.error(e);\r\n                if (e instanceof Error) {\r\n                    handleError(e.message);\r\n                } else {\r\n                    handleError(String(e));\r\n                }\r\n            }\r\n        },\r\n        [handleError]\r\n    );\r\n\r\n    useEffect(() => {\r\n        async function onMessage(message: ExtensionMessage) {\r\n            if (message.data.command === 'sync' || message.data.command === 'syncv2') {\r\n                const tabs = availableTabs.filter((t) => {\r\n                    if (t.id !== message.tabId) {\r\n                        return false;\r\n                    }\r\n\r\n                    return !message.src || t.src === message.src;\r\n                });\r\n\r\n                if (tabs.length === 0) {\r\n                    if (message.src) {\r\n                        console.error(\r\n                            'Received sync request but the requesting tab ID ' +\r\n                                message.tabId +\r\n                                ' with src ' +\r\n                                message.src +\r\n                                ' was not found'\r\n                        );\r\n                    } else {\r\n                        console.error(\r\n                            'Received sync request but the requesting tab ID ' + message.tabId + ' was not found'\r\n                        );\r\n                    }\r\n\r\n                    return;\r\n                }\r\n\r\n                const tab = tabs[0];\r\n                let subtitleFiles: File[];\r\n\r\n                if (message.data.command === 'sync') {\r\n                    const syncMessage = message.data as LegacyPlayerSyncMessage;\r\n                    subtitleFiles = [\r\n                        new File(\r\n                            [await (await fetch('data:text/plain;base64,' + syncMessage.subtitles.base64)).blob()],\r\n                            syncMessage.subtitles.name\r\n                        ),\r\n                    ];\r\n                } else if (message.data.command === 'syncv2') {\r\n                    const syncMessage = message.data as PlayerSyncMessage;\r\n                    subtitleFiles = await Promise.all(\r\n                        syncMessage.subtitles.map(\r\n                            async (s) =>\r\n                                new File([await (await fetch('data:text/plain;base64,' + s.base64)).blob()], s.name)\r\n                        )\r\n                    );\r\n                } else {\r\n                    console.error('Unknown message ' + message.data.command);\r\n                    return;\r\n                }\r\n\r\n                const subtitleFileName = subtitleFiles[0].name;\r\n                setFileName(subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')));\r\n                setSources({\r\n                    subtitleFiles: subtitleFiles,\r\n                    audioFile: undefined,\r\n                    audioFileUrl: undefined,\r\n                    videoFile: undefined,\r\n                    videoFileUrl: undefined,\r\n                });\r\n                setTab(tab);\r\n            }\r\n        }\r\n\r\n        extension.subscribe(onMessage);\r\n\r\n        return () => extension.unsubscribe(onMessage);\r\n    }, [extension, availableTabs]);\r\n\r\n    const handleDrop = useCallback(\r\n        (e: React.DragEvent) => {\r\n            e.preventDefault();\r\n\r\n            if (inVideoPlayer) {\r\n                handleError('Video player cannot receive dropped files. Drop outside of the video frame instead.');\r\n                return;\r\n            }\r\n\r\n            setDragging(false);\r\n            dragEnterRef.current = null;\r\n\r\n            if (!e.dataTransfer.files || e.dataTransfer.files.length === 0) {\r\n                return;\r\n            }\r\n\r\n            handleFiles(e.dataTransfer.files);\r\n        },\r\n        [inVideoPlayer, handleError, handleFiles]\r\n    );\r\n\r\n    const handleFileInputChange = useCallback(() => {\r\n        const files = fileInputRef.current?.files;\r\n\r\n        if (files && files.length > 0) {\r\n            handleFiles(files);\r\n        }\r\n    }, [handleFiles]);\r\n\r\n    const handleFileSelector = useCallback(() => fileInputRef.current?.click(), []);\r\n\r\n    const handleDragEnter = useCallback(\r\n        (e: React.DragEvent<HTMLDivElement>) => {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n\r\n            if (!inVideoPlayer) {\r\n                dragEnterRef.current = e.target as Element;\r\n                setDragging(true);\r\n            }\r\n        },\r\n        [inVideoPlayer]\r\n    );\r\n\r\n    const handleDragLeave = useCallback(\r\n        (e: React.DragEvent<HTMLDivElement>) => {\r\n            e.nativeEvent.preventDefault();\r\n            e.nativeEvent.stopPropagation();\r\n\r\n            if (!inVideoPlayer && dragEnterRef.current === e.target) {\r\n                setDragging(false);\r\n            }\r\n        },\r\n        [inVideoPlayer]\r\n    );\r\n\r\n    const handleSourcesLoaded = useCallback(() => setLoading(false), []);\r\n    const [searchParams] = useSearchParams();\r\n\r\n    if (location.pathname === '/' && searchParams.get('video')) {\r\n        return <NavigateToVideo searchParams={searchParams} />;\r\n    }\r\n\r\n    const nothingLoaded =\r\n        (loading && !videoFrameRef.current) ||\r\n        (sources.subtitleFiles.length === 0 && !sources.audioFile && !sources.videoFile);\r\n    const appBarHidden = sources.videoFile !== undefined && theaterMode && !videoPopOut;\r\n\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <CssBaseline />\r\n            <div\r\n                onDrop={handleDrop}\r\n                onDragOver={(e) => e.preventDefault()}\r\n                onDragEnter={handleDragEnter}\r\n                onDragLeave={handleDragLeave}\r\n            >\r\n                <Alert open={alertOpen} onClose={handleAlertClosed} autoHideDuration={3000} severity={alertSeverity}>\r\n                    {alert}\r\n                </Alert>\r\n                <Routes>\r\n                    <Route\r\n                        path=\"/video\"\r\n                        element={\r\n                            <RenderVideo\r\n                                searchParams={searchParams}\r\n                                settingsProvider={settingsProvider}\r\n                                onError={handleError}\r\n                            />\r\n                        }\r\n                    />\r\n                    <Route\r\n                        path=\"/\"\r\n                        element={\r\n                            <div>\r\n                                <CopyHistory\r\n                                    items={copiedSubtitles}\r\n                                    open={copyHistoryOpen}\r\n                                    drawerWidth={drawerWidth}\r\n                                    onClose={handleCloseCopyHistory}\r\n                                    onDelete={handleDeleteCopyHistoryItem}\r\n                                    onClipAudio={handleClipAudio}\r\n                                    onDownloadImage={handleDownloadImage}\r\n                                    onSelect={handleSelectCopyHistoryItem}\r\n                                    onAnki={handleAnki}\r\n                                />\r\n                                <AnkiDialog\r\n                                    open={ankiDialogOpen}\r\n                                    disabled={ankiDialogDisabled}\r\n                                    text={ankiDialogItem?.text}\r\n                                    audioClip={ankiDialogAudioClip}\r\n                                    image={ankiDialogImage}\r\n                                    source={itemSourceString(ankiDialogItem)}\r\n                                    url={ankiDialogItem?.url}\r\n                                    sliderContext={ankiDialogItemSliderContext}\r\n                                    customFields={settingsProvider.customAnkiFields}\r\n                                    anki={anki}\r\n                                    settingsProvider={settingsProvider}\r\n                                    onCancel={handleAnkiDialogCancel}\r\n                                    onProceed={handleAnkiDialogProceed}\r\n                                    onViewImage={handleViewImage}\r\n                                    onOpenSettings={handleOpenSettings}\r\n                                />\r\n                                <ImageDialog open={imageDialogOpen} image={image} onClose={handleImageDialogClosed} />\r\n                                <SettingsDialog\r\n                                    anki={anki}\r\n                                    open={settingsDialogOpen}\r\n                                    onClose={handleCloseSettings}\r\n                                    settings={settingsProvider.settings}\r\n                                />\r\n                                <HelpDialog\r\n                                    open={helpDialogOpen}\r\n                                    extensionUrl={extensionUrl}\r\n                                    onClose={handleCloseHelp}\r\n                                />\r\n                                <Bar\r\n                                    title={fileName || 'asbplayer'}\r\n                                    drawerWidth={drawerWidth}\r\n                                    drawerOpen={copyHistoryOpen}\r\n                                    hidden={appBarHidden}\r\n                                    onOpenCopyHistory={handleOpenCopyHistory}\r\n                                    onOpenSettings={handleOpenSettings}\r\n                                    onOpenHelp={handleOpenHelp}\r\n                                    onFileSelector={handleFileSelector}\r\n                                />\r\n                                <input\r\n                                    ref={fileInputRef}\r\n                                    onChange={handleFileInputChange}\r\n                                    type=\"file\"\r\n                                    accept=\".srt,.ass,.vtt,.sup,.mp3,.m4a,.aac,.flac,.ogg,.wav,.opus,.mkv,.mp4,.avi\"\r\n                                    multiple\r\n                                    hidden\r\n                                />\r\n                                <Content drawerWidth={drawerWidth} drawerOpen={copyHistoryOpen}>\r\n                                    {nothingLoaded && (\r\n                                        <LandingPage\r\n                                            latestExtensionVersion={latestExtensionVersion}\r\n                                            extensionUrl={extensionUrl}\r\n                                            extension={extension}\r\n                                            loading={loading}\r\n                                            dragging={dragging}\r\n                                            appBarHidden={appBarHidden}\r\n                                            onFileSelector={handleFileSelector}\r\n                                        />\r\n                                    )}\r\n                                    <DragOverlay dragging={dragging} appBarHidden={appBarHidden} loading={loading} />\r\n                                    <Player\r\n                                        subtitleReader={subtitleReader}\r\n                                        settingsProvider={settingsProvider}\r\n                                        onCopy={handleCopy}\r\n                                        onError={handleError}\r\n                                        onUnloadAudio={handleUnloadAudio}\r\n                                        onUnloadVideo={handleUnloadVideo}\r\n                                        onLoaded={handleSourcesLoaded}\r\n                                        onTabSelected={handleTabSelected}\r\n                                        onAnkiDialogRequest={handleAnkiDialogRequest}\r\n                                        onAppBarToggle={handleAppBarToggle}\r\n                                        onVideoPopOut={handleVideoPopOut}\r\n                                        tab={tab}\r\n                                        availableTabs={availableTabs}\r\n                                        sources={sources}\r\n                                        jumpToSubtitle={jumpToSubtitle}\r\n                                        videoFrameRef={videoFrameRef}\r\n                                        extension={extension}\r\n                                        drawerOpen={copyHistoryOpen}\r\n                                        appBarHidden={appBarHidden}\r\n                                        videoPopOut={videoPopOut}\r\n                                        disableKeyEvents={disableKeyEvents}\r\n                                        ankiDialogRequested={ankiDialogRequested}\r\n                                        ankiDialogRequestToVideo={ankiDialogRequestToVideo}\r\n                                        ankiDialogFinishedRequest={ankiDialogFinishedRequest}\r\n                                    />\r\n                                </Content>\r\n                            </div>\r\n                        }\r\n                    />\r\n                </Routes>\r\n            </div>\r\n        </ThemeProvider>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = (onPerfEntry) => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n            getCLS(onPerfEntry);\r\n            getFID(onPerfEntry);\r\n            getFCP(onPerfEntry);\r\n            getLCP(onPerfEntry);\r\n            getTTFB(onPerfEntry);\r\n        });\r\n    }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import '@fontsource/roboto';\r\nimport { createRoot } from 'react-dom/client';\r\nimport App from './components/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\ncreateRoot(document.querySelector('#root')!).render(\r\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n        <App />\r\n    </BrowserRouter>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}