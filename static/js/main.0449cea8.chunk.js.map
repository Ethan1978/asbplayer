{"version":3,"sources":["hooks/useWindowSize/index.ts","../../common/src/KeyBinder.ts","../../common/src/Mp3Encoder.ts","../../common/src/mp3-encoder.js","../../common/src/util.ts","../../common/src/AudioClip.ts","../../common/src/Model.ts","../../common/src/CanvasResizer.ts","../../common/src/Image.ts","../../common/src/Fetcher.ts","../../common/src/Anki.ts","../../common/src/SubtitleCollection.ts","../../common/src/AutoPauseContext.ts","components/Alert.tsx","../../common/components/src/TagsTextField.tsx","../../common/components/src/ImageDialog.tsx","../../common/components/src/SubtitleTextImage.tsx","../../common/components/src/AnkiDialog.tsx","components/background-colored.png","components/DragOverlay.tsx","services/SubtitleReader.ts","components/Bar.tsx","services/util.ts","components/CopyHistory.tsx","components/LandingPage.tsx","services/BroadcastChannelVideoProtocol.ts","services/ChromeTabVideoProtocol.ts","services/Clock.ts","components/Controls.tsx","services/MediaAdapter.ts","components/SubtitlePlayer.tsx","services/VideoChannel.ts","components/Player.tsx","components/CustomFieldDialog.tsx","components/SettingsDialog.tsx","services/SettingsProvider.ts","services/PlayerChannel.ts","services/AppKeyBinder.ts","components/VideoPlayer.tsx","services/ChromeExtension.ts","services/ChromeExtensionProvider.ts","services/PlaybackPreferences.ts","components/App.tsx","reportWebVitals.js","index.tsx"],"names":["useWindowSize","enabled","useState","size","setSize","useLayoutEffect","updateSize","window","innerWidth","innerHeight","addEventListener","removeEventListener","DefaultKeyBinder","keyBindSet","this","onCopy","disabledGetter","subtitleGetter","useCapture","shortcut","copySubtitle","keys","handler","copyHandler","hotkeys","capture","unbind","event","subtitle","onAnkiExport","ankiExport","ankiExportHandler","onUpdateLastCard","updateLastCard","updateLastCardHandler","onSeekToSubtitle","timeGetter","subtitlesGetter","delegate","forward","subtitles","length","_adjacentSubtitle","start","end","previousShortcut","seekToPreviousSubtitle","nextShortcut","seekToNextSubtitle","previousHandler","nextHandler","onSeekToBeginningOfCurrentSubtitle","seekToBeginningOfCurrentSubtitle","_currentSubtitle","undefined","time","currentSubtitle","now","minDiff","Number","MAX_SAFE_INTEGER","i","s","diff","onSeekBackwardOrForward","backShortcut","seekBackward","seekForward","backHandler","onOffsetChange","subtitleStart","originalStart","adjustOffsetToPreviousSubtitle","adjustOffsetToNextSubtitle","adjacentSubtitleIndex","Math","max","increase","currentOffset","decreaseShortcut","decreaseOffset","increaseShortcut","increaseOffset","decreaseHandler","increaseHandler","onAdjustPlaybackRate","increasePlaybackRate","decreasePlaybackRate","onToggleSubtitles","toggleSubtitles","onToggleSubtitleTrack","shortcuts","toggleVideoSubtitleTrack1","toggleVideoSubtitleTrack2","filter","track","handlers","push","onToggleSubtitleTrackInList","toggleAsbplayerSubtitleTrack1","toggleAsbplayerSubtitleTrack2","onPlay","togglePlay","onAutoPause","toggleAutoPause","toggleCondensedPlayback","Mp3Encoder","blob","workerFactory","Promise","resolve","reject","a","reader","FileReader","onload","e","audioContext","AudioContext","target","Error","decodeAudioData","result","audioBuffer","channels","numberOfChannels","getChannelData","worker","postMessage","command","sampleRate","onmessage","Blob","data","buffer","type","terminate","onerror","error","message","readAsArrayBuffer","Worker_fn","Worker","Direction","humanReadableTime","timestamp","seconds","nearestTenth","totalSeconds","floor","round","minutes","hours","String","padStart","surroundingSubtitles","index","countRadius","timeRadius","startIndex","atBoundary","backward","endIndex","slice","mockSurroundingSubtitles","middleSubtitle","maxTimestamp","offset","afterTimestamp","min","text","originalEnd","beforeTimestamp","unshift","initialIndex","direction","next","abs","download","name","url","URL","createObjectURL","document","createElement","body","appendChild","style","display","href","sanitize","click","revokeObjectURL","remove","PostMineAction","AutoPausePreference","PlayMode","defaultMp3WorkerFactory","Base64AudioData","baseName","playbackRate","base64","extension","_name","_start","_end","_base64","_extension","playingAudio","stopAudioTimeout","cachedBlob","_blob","stopAudio","clearTimeout","audio","Audio","src","preload","load","play","setTimeout","pause","fetch","FileAudioData","file","trackId","recorderMimeType","clippingAudio","clippingAudioReject","stopClippingTimeout","_recorderConfiguration","recorderExtension","readAsDataURL","onloadend","substring","indexOf","_clipAudio","_audioElement","currentTime","oncanplay","stream","_captureStream","recorder","MediaRecorder","mimeType","chunks","ondataavailable","finished","onstop","stop","getAudioTracks","source","selectTrack","onloadedmetadata","audioTracks","t","id","captureStream","mozCaptureStream","audioStream","MediaStream","getVideoTracks","addTrack","AUDIO_TYPES","Object","isTypeSupported","map","Mp3AudioData","encode","isSliceable","AudioClip","mp3WorkerFactory","subtitleFileName","lastIndexOf","CanvasResizer","canvas","ctx","maxWidth","maxHeight","widthRatio","width","heightRatio","height","ratio","newWidth","newHeight","createImageBitmap","resizeWidth","resizeHeight","then","sprite","drawImage","catch","Base64ImageData","_dataUrl","FileImageData","_canvas","dataUrl","toDataURL","toBlob","video","_videoElement","videoWidth","videoHeight","getContext","resizer","resize","Image","bitMap","imageName","HttpFetcher","method","JSON","stringify","response","json","ankiQuerySpecialCharacters","Anki","settingsProvider","fetcher","ankiConnectUrl","_executeAction","modelName","word","query","wordField","_escapeQuery","escaped","char","includes","definition","audioClip","image","customFieldValues","tags","mode","fields","_appendField","sentenceField","definitionField","sourceField","urlField","customFieldName","customAnkiFields","params","note","deckName","deck","noteType","options","allowDuplicate","duplicateScope","duplicateScopeOptions","checkChildren","gui","updateLast","audioField","sanitizedName","_sanitizeFileName","_storeMediaFile","fileName","filename","imageField","recentNotes","sort","lastNoteId","notes","infoResponse","noteId","info","value","_inheritHtmlMarkup","fieldName","multiline","newValue","split","join","existingValue","replacement","original","markedUp","htmlTagRegex","RegExp","markedUpWithoutBreaklines","replace","inherited","match","exec","action","version","SubtitleCollection","tree","gapsTree","IntervalTree","returnLastShown","returnNextToShow","last","insert","lastShown","nextToShow","startedShowing","willStopShowing","interval","showing","search","gapIntervals","nextStart","high","showingCheckRadiusMs","emptySubtitleCollection","AutoPauseContext","lastStartedShowing","lastWillStopShowing","onStartedShowing","onWillStopShowing","onNextToShow","useAlertStyles","makeStyles","root","justifyContent","position","top","pointerEvents","zIndex","Alert","props","classes","useEffect","open","timeout","onClose","autoHideDuration","className","Grow","in","severity","children","TagsTextField","onTagsChange","setValue","handleChange","useCallback","currentValue","endsWith","newTags","splitTags","tag","trim","extractTagsFromString","TextField","onChange","useStyles","theme","backgroundSize","ImageDialog","resizeRatio","setDataUrl","setWidth","setHeight","windowWidth","windowHeight","img","fetchImage","Dialog","Card","CardMedia","title","SubtitleTextImage","availableWidth","scale","textImage","screen","alt","marginBottom","spacing","flexGrow","mediaField","cursor","rangeSelectSlider","transform","sliderMarksFromSliderContext","sliderContext","boundary","seenTimestamps","label","mark","sliderValueLabelFormat","ms","subtitleIntersectsTimeInterval","overlapStart","ValueLabelComponent","Tooltip","enterTouchDelay","placement","useTextImageSetStyles","padding","backgroundColor","palette","disabledBackground","TextImageSet","selectedSubtitles","Paper","elevation","TextFieldEndAdornment","withStyles","InputAdornment","AnkiDialog","disabled","initialText","onProceed","onRewind","onCancel","onViewImage","onOpenSettings","onRerecord","initialAudioClip","initialSource","initialUrl","customFields","anki","initialDefinition","initialWord","initialCustomFieldValues","initialSelectedTimestampInterval","timestampInterval","forceTimestampBoundaryInterval","timestampBoundaryInterval","forceInitialTimestampInterval","initialTimestampInterval","initialLastAppliedTimestampIntervalToText","lastAppliedTimestampIntervalToText","initialLastAppliedTimestampIntervalToAudio","lastAppliedTimestampIntervalToAudio","stateRef","setDefinition","setText","setWord","lastSearchedWord","setLastSearchedWord","setSource","setTags","setUrl","duplicateNotes","setDuplicateNotes","wordTimestamp","setWordTimestamp","setCustomFieldValues","setTimestampInterval","setSelectedSubtitles","setInitialTimestampInterval","initialTimestampBoundaryInterval","setInitialTimestampBoundaryInterval","setTimestampBoundaryInterval","timestampMarks","setTimestampMarks","setLastAppliedTimestampIntervalToText","setLastAppliedTimestampIntervalToAudio","setAudioClip","dialogRefCallback","element","getBoundingClientRect","current","textForTimestampInterval","subtitleEnd","findIndex","subtitlesToDisplay","boundaryIntervalFromSliderContext","newAudioClip","preferMp3","toMp3","audioPaddingStart","audioPaddingEnd","Date","trimmedWord","findNotesWithWord","console","wordHelperText","handlePlayAudio","preventDefault","stopPropagation","handleCustomFieldChange","newCustomFieldValues","assign","handleViewImage","handleApplyTimestampIntervalToText","newText","handleTimestampIntervalChange","newTimestampInterval","expectedUnchangedText","handleApplyTimestampIntervalToAudio","handleResetTimestampInterval","handleZoomInTimestampInterval","newTimestampBoundaryInterval","handleZoomOutTimestampInterval","handleCopyImageToClipboard","navigator","clipboard","ClipboardItem","pngBlob","write","disableApplyTextSelection","audioActionElement","IconButton","onClick","edge","disableEnforceFocus","fullWidth","Toolbar","Typography","variant","DialogContent","ref","color","maxRows","InputProps","endAdornment","rows","helperText","findNotesWithWordGui","Grid","container","item","Slider","valueLabelFormat","marks","step","valueLabelDisplay","marginTop","DialogActions","Button","dragging","appBarHidden","transparentBackground","content","flexDirection","alignItems","textAlign","backgroundRepeat","backgroundPosition","backgroundImage","coloredBackground","backgroundBlendMode","background","DragOverlay","loading","Fade","tagRegex","assNewLineRegex","helperElement","helperCanvas","SubtitleReader","xmlParser","files","flatten","all","f","_subtitles","flatMap","nodes","n1","n2","parseSrt","node","cue","isFromNetflix","parser","WebVTT","Parser","StringDecoder","cues","oncue","c","lines","newLines","line","_fixRTL","onflush","startTime","endTime","parse","flush","parseAss","dialogues","dialogue","slices","fragments","fragment","xml","_xmlParser","textNodes","elm","parseFloat","_decodeHTML","pipeThrough","parseDisplaySets","pipeTo","_displaySetsToSubtitles","DOMParser","doc","parseFromString","_xmlNodePath","documentElement","beginAttribute","getAttribute","endAttribute","textContent","_parseTtmlTimestamp","parts","parent","path","_dropTagNamespace","tagName","colonIndex","imageDataArray","currentImageDisplaySet","WritableStream","displaySet","controller","objectDefinitionSegments","screenWidth","presentationCompositionSegment","screenHeight","Uint8ClampedArray","imageData","putImageData","header","presentationTimestamp","endDefinitionSegment","index1","index2","newLine","innerHTML","innerText","XMLParser","ignoreAttributes","subtitleNode","writeSrt","format","subtitlesToSrt","leftButton","marginRight","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","drawerWidth","easeOut","enteringScreen","copyHistoryButton","copyHistoryButtonShift","hide","useCopyHistoryTooltipStyles","tooltip","show","CopyHistoryTooltip","toolTipProps","Bar","drawerOpen","hidden","subtitleFiles","onOpenCopyHistory","onFileSelector","onDownloadSubtitleFilesAsSrt","menuOpen","setMenuOpen","menuAnchorEl","setMenuAnchorEl","canSaveAsSrt","find","handleFileAction","currentTarget","handleMenuClose","handleOpenFilesFromMenu","handleDownloadSubtitleFilesAsSrt","Popover","anchorEl","anchorOrigin","vertical","horizontal","ListItem","button","AppBar","clsx","disableFocusListener","disableHoverListener","disableTouchListener","component","rel","computeStyles","subtitleColor","subtitleSize","subtitleOutlineThickness","subtitleOutlineColor","subtitleBackgroundOpacity","subtitleBackgroundColor","subtitleFontFamily","styles","fontSize","thickness","opacity","hex","r","parseInt","g","b","hexToRgb","timeDurationDisplay","milliseconds","totalMilliseconds","includeMilliseconds","secs","mins","hrs","pad","n","zeros","drawer","flexShrink","drawerPaper","drawerHeader","mixins","toolbar","listContainer","overflowY","overflowX","listItem","hover","listItemGutters","paddingLeft","paddingRight","listItemIconRoot","minWidth","emptyState","emptyText","secondary","Menu","onSelect","onClipAudio","onDownloadImage","onDelete","handleCopy","writeText","handleJumpTo","handleClipAudio","handleDownloadImage","handleDelete","transformOrigin","ListItemText","primaryTypographyProps","primary","videoFile","audioFile","CopyHistory","scrollToBottomRefCallback","scrollIntoView","menuItem","setMenuItem","handleMenu","handleMenuClosed","items","currentKey","lastSeenItemName","itemNameCounters","itemsBySection","key","ListItemSecondaryAction","onDownloadSectionAsSrt","gutters","ListItemIcon","onAnki","wrap","Fragment","Drawer","anchor","paper","Divider","browseLink","LandingPage","latestExtensionVersion","extensionUrl","installedExtensionVersion","setInstalledExtensionVersion","fetchInstalledExtensionVersion","extensionUpdateAvailable","gt","extensionNotInstalled","Link","BroadcastChannelVideoProtocol","channelId","channel","onMessage","BroadcastChannel","that","close","ChromeTabVideoProtocol","tabId","listener","unsubscribeFromExtension","subscribe","sendMessage","Clock","accumulated","started","_rate","rate","_elapsed","useControlStyles","left","bottom","buttonContainer","timeDisplay","marginLeft","numberInput","volumeInputContainerShown","short","volumeInputContainerHidden","volumeInputHidden","volumeInputShown","volumeInputThumbHidden","volumeInputThumbShown","subContainer","inactiveButton","inactiveTopButton","progress","margin","topButton","gridContainer","useProgressBarStyles","mouseEventListener","fillContainer","fillContainerThick","easeInOut","fill","handleContainer","handle","borderRadius","handleOn","shortest","VolumeSlider","verticalAlign","thumb","boxShadow","active","displayTime","secondsInMinute","ProgressBar","onSeek","mouseOver","setMouseOver","containerRef","useRef","handleClick","rect","right","pageX","handleMouseOver","handleMouseOut","progressWidth","elementWidth","fillStyle","handleStyle","fillContainerClassName","handleClassName","onMouseOver","onMouseOut","AudioTrackSelector","selectedAudioTrack","onAudioTrackSelected","list","selected","language","TabSelector","tabs","selectedTab","onTabSelected","MediaUnloader","onUnload","PlayModeSelector","selectedPlayMode","onPlayMode","normal","condensed","autoPause","Controls","clock","playing","offsetEnabled","displayLength","playbackRateEnabled","mousePositionRef","onShow","onPause","onUnloadAudio","onUnloadVideo","onPlaybackRateChange","onVolumeChange","disableKeyEvents","playbackPreferences","closeEnabled","volumeEnabled","playMode","playModeEnabled","subtitlesEnabled","subtitlesToggle","onSubtitlesToggle","popOutEnabled","popOut","onPopOutToggle","fullscreenEnabled","fullscreen","onFullscreenToggle","hideSubtitlePlayerToggleEnabled","subtitlePlayerHidden","onHideSubtitlePlayerToggle","showOnMouseMovement","theaterModeToggleEnabled","theaterModeEnabled","onTheaterModeToggle","setShow","audioTrackSelectorOpen","setAudioTrackSelectorOpen","audioTrackSelectorAnchorEl","setAudioTrackSelectorAnchorEl","tabSelectorOpen","setTabSelectorOpen","tabSelectorAnchorEl","setTabSelectorAnchorEl","audioUnloaderOpen","setAudioUnloaderOpen","audioUnloaderAnchorEl","setAudioUnloaderAnchorEl","videoUnloaderOpen","setVideoUnloaderOpen","videoUnloaderAnchorEl","setVideoUnloaderAnchorEl","playModeSelectorOpen","setPlayModeSelectorOpen","playModeSelectorAnchorEl","setPlayModeSelectorAnchorEl","showVolumeBar","setShowVolumeBar","volume","setVolume","lastCommittedVolume","setLastCommittedVolume","lastMousePositionRef","x","y","lastShowTimestampRef","lastNumberInputChangeTimestampRef","lastShowRef","forceShowRef","offsetInputWidth","setOffsetInputWidth","playbackRateInputWidth","setPlaybackRateInputWidth","offsetInputRef","playbackRateInputRef","closeButtonRef","updateState","forceUpdate","handleSeek","savedVolume","setInterval","currentShow","pow","offsetTop","offsetHeight","activeElement","clearInterval","updateOffset","offsetSeconds","toFixed","blur","updatePlaybackRate","handleKey","newOffset","isNaN","newPlaybackRate","handleNumberInputClicked","inputElement","setSelectionRange","handleAudioTrackSelectorClosed","handleAudioTrackSelectorOpened","handleAudioTrackSelected","handleTabSelectorClosed","handleTabSelectorOpened","handleTabSelected","tab","handleAudioUnloaderClosed","handleAudioUnloaderOpened","handleUnloadAudio","handleVideoUnloaderClosed","handleVideoUnloaderOpened","handleUnloadVideo","handlePlayModeSelectorClosed","handlePlayModeSelectorOpened","handlePlayModeSelected","handleVolumeMouseOut","handleVolumeMouseOver","handleVolumeChange","handleVolumeChangeCommitted","handleVolumeToggle","newVolume","onChangeCommitted","defaultValue","Input","inputRef","disableUnderline","placeholder","MediaAdapter","readyResolves","_onMediaCanPlay","callback","readyState","useSubtitlePlayerStyles","default","compressed","table","noSubtitles","useSubtitleRowStyles","subtitleRow","overflowWrap","whiteSpace","compressedSubtitle","disabledSubtitle","copyButton","SubtitleRow","React","memo","subtitleRef","onClickSubtitle","onCopySubtitle","copyButtonEnabled","tableRowProps","textRef","textSelected","setTextSelected","disabledClassName","availWidth","TableRow","onMouseUp","selection","getSelection","isSameNode","anchorNode","parentNode","TableCell","SubtitlePlayer","onSubtitlesSelected","autoPauseContext","subtitleCollection","jumpToSubtitle","displayHelp","lastJumpToTopTimestamp","disabledSubtitleTracks","keyBinder","playingRef","clockRef","subtitleRefs","useMemo","Array","_","createRef","subtitleCollectionRef","empty","subtitleRefsRef","disableKeyEventsRef","selectedSubtitleIndexes","setSelectedSubtitleIndexes","selectedSubtitleIndexesRef","lengthRef","hiddenRef","lastScrollTimestampRef","requestAnimationRef","autoPauseContextRef","onSubtitlesSelectedRef","requestAnimationFrame","update","smallestIndex","currentSubtitleIndexes","subtitlesAt","keysAreEqual","scrollToSubtitleRef","allowScroll","block","inline","behavior","cancelAnimationFrame","scrollToCurrentSubtitle","indexes","scrollIfVisible","visibilityState","firstSubtitleRef","bindAdjustOffset","bindOffsetToSubtitle","bindSeekToSubtitle","bindSeekToBeginningOfCurrentSubtitle","bindSeekBackwardOrForward","handleScroll","jumpToIndex","calculateSurroundingSubtitlesForIndex","surroundingSubtitlesCountRadius","surroundingSubtitlesTimeRadius","calculateSurroundingSubtitles","calculateCurrentSubtitle","subtitleIndexes","bindCopy","none","bindToggleSubtitleTrackInList","bindAnkiExport","showAnkiDialog","bindUpdateLastCard","subtitleTable","TableContainer","Table","TableBody","square","VideoChannel","protocol","isReady","readyCallbacks","playCallbacks","pauseCallbacks","audioTrackSelectedCallbacks","currentTimeCallbacks","exitCallbacks","offsetCallbacks","playbackRateCallbacks","popOutToggleCallbacks","copyCallbacks","playModeCallbacks","hideSubtitlePlayerToggleCallbacks","appBarToggleCallbacks","fullscreenToggleCallbacks","ankiDialogRequestCallbacks","toggleSubtitleTrackInListCallbacks","_playbackRate","readyMessage","paused","readyStateMessage","Event","playMessage","echo","pauseMessage","audioTrackSelectedMessage","currentTimeMessage","offsetMessage","playbackRateMessage","copyMessage","postMineAction","preventDuplicate","toggleSubtitleTrackInListMessage","videoFileName","subtitleFileNames","names","settings","msg","videoFrame","border","trackLength","audioRef","videoRef","useOffset","subtitlesLength","audioLength","videoLength","Player","sources","flattenSubtitleFiles","audioFileUrl","videoFileUrl","subtitleReader","videoFrameRef","videoChannelRef","videoFullscreen","hideSubtitlePlayer","videoPopOut","availableTabs","ankiDialogRequested","ankiDialogFinishedRequest","onError","onLoaded","onAnkiDialogRequest","onAppBarToggle","onHideSubtitlePlayer","onVideoPopOut","onPlayModeChangedViaBind","rewindSubtitle","setPlayMode","playModeRef","setSubtitles","subtitlesRef","Boolean","loadingSubtitles","setLoadingSubtitles","setPlaying","setLastJumpToTopTimestamp","setOffset","setPlaybackRate","setAudioTracks","setSelectedAudioTrack","setChannelId","setResumeOnFinishedAnkiDialogRequest","hideSubtitlePlayerRef","setDisabledSubtitleTracks","mediaAdapter","handleOnStartedShowingSubtitle","autoPausePreference","atStart","handleOnWillStopShowingSubtitle","atEnd","context","seek","forwardToMedia","setTime","clear","applyOffset","forwardToVideo","newSubtitles","installed","lte","channelClosed","onReady","uuidv4","init","subscribed","onExit","ready","subtitleSettings","ankiSettings","miscSettings","hideSubtitlePlayerToggle","onOffset","onPlaybackRate","onCurrentTime","tracks","newTracks","resumeOnFinishedAnkiDialogRequest","resume","seeking","expectedSeekTime","nextSubtitle","t0","process","encodeURIComponent","handlePlay","handlePause","handleSeekToSubtitle","shouldPlay","handleCopyFromSubtitlePlayer","handleMouseMove","screenX","screenY","audioTrackSelected","handleOffsetChange","HTMLMediaElement","handlePlaybackRateChange","handlePlayMode","handleToggleSubtitleTrack","handleSubtitlesSelected","autoCopyCurrentSubtitle","hasFocus","bindPlay","bindAdjustPlaybackRate","togglePlayMode","newPlayMode","bindAutoPause","bindCondensedPlayback","unbindCopy","unbindAnkiExport","appBarToggle","fullscreenToggle","loaded","videoInWindow","onMouseMove","gte","CustomFieldDialog","existingCustomFieldNames","setFieldName","fieldExists","DialogTitle","subtitleSetting","subtitlePreview","subtitlePreviewInput","outline","addFieldButton","switchLabel","useSelectableSettingStyles","formControl","SelectableSetting","selections","removable","onSelectionChange","onRemoval","FormControl","InputLabel","Select","MenuItem","keyBindProperties","extensionOverridden","modifierKeyReplacements","isMacOs","modifierKeys","useKeyBindFieldStyles","labelItem","KeyBindField","onKeysChange","onOpenExtensionShortcuts","currentKeyString","setCurrentKeyString","currentKeyStringRef","onKeysChangeRef","editing","setEditing","handleEditKeyBinding","nativeEvent","detail","pressed","getPressedKeyString","isAModifier","isBModifier","keyup","contains","xs","contentEditable","SettingsDialog","scrollToId","setAnkiConnectUrl","ankiConnectUrlError","setAnkiConnectUrlError","ankiConnectUrlChangeTimestamp","setAnkiConnectUrlChangeTimestamp","setDeck","deckNames","setDeckNames","setNoteType","modelNames","setModelNames","setSentenceField","setDefinitionField","setAudioField","setImageField","setWordField","setSourceField","setUrlField","setCustomFields","setPreferMp3","fieldNames","setFieldNames","customFieldDialogOpen","setCustomFieldDialogOpen","setAudioPaddingStart","setAudioPaddingEnd","maxImageWidth","setMaxImageWidth","maxImageHeight","setMaxImageHeight","setSurroundingSubtitlesCountRadius","setSurroundingSubtitlesTimeRadius","setSubtitleColor","setSubtitleSize","setSubtitleOutlineColor","setSubtitleOutlineThickness","setSubtitleBackgroundColor","setSubtitleBackgroundOpacity","setSubtitleFontFamily","imageBasedSubtitleScaleFactor","setImageBasedSubtitleScaleFactor","setSubtitlePreview","themeType","setThemeType","copyToClipboardOnMine","setCopyToClipboardOnMine","setAutoPausePreference","setKeyBindSet","rememberSubtitleOffset","setRememberSubtitleOffset","setAutoCopyCurrentSubtitle","handleAnkiConnectUrlChange","handleRetryAnkiConnectUrl","handleDeckChange","handleDeckSelectionChange","handleNoteTypeChange","handleNoteTypeSelectionChange","handleSentenceFieldChange","handleSentenceFieldSelectionChange","handleDefinitionFieldChange","handleDefinitionFieldSelectionChange","handleAudioFieldChange","handleAudioFieldSelectionChange","handleImageFieldChange","handleImageFieldSelectionChange","handleWordFieldChange","handleWordFieldSelectionChange","handleSourceFieldChange","handleSourceFieldSelectionChange","handleUrlFieldChange","handleUrlFieldSelectionChange","handleAudioPaddingStart","handleAudioPaddingEnd","handleMaxImageWidth","handleMaxImageHeight","handleSurroundingSubtitlesCountRadius","handleSurroundingSubtitlesTimeRadius","handleSubtitleColorChange","handleSubtitleSizeChange","handleSubtitleOutlineColorChange","handleSubtitleOutlineThicknessChange","handleSubtitleBackgroundColorChange","handleSubtitleBackgroundOpacityChange","handleSubtitleFontFamilyChange","handleSubtitlePreviewChange","handleImageBasedSubtitleScaleFactorChange","handleAddCustomField","oldCustomFields","newCustomFields","handleCustomFieldRemoval","handleTagsChange","handlePreferMp3Change","checked","handleThemeTypeChange","handleCopyToClipboardOnMine","handleAutoPausePreferenceChange","handleKeysChange","keyBindName","newKeyBindSet","handleRememberSubtitleOffsetChange","handleAutoCopyCurrentSubtitle","subtitlePreviewStyles","canceled","requestPermission","refreshFieldNames","modelFieldNames","handleClose","customFieldInputs","getElementById","FormLabel","FormGroup","FormHelperText","location","hostname","FormControlLabel","control","Switch","labelPlacement","inputProps","RadioGroup","row","Radio","properties","extensionCommands","openShortcuts","defaultAutoPausePreference","defaultKeyBindSet","ankiConnectUrlKey","deckKey","noteTypeKey","sentenceFieldKey","definitionFieldKey","audioFieldKey","imageFieldKey","wordFieldKey","sourceFieldKey","urlFieldKey","customAnkiFieldsKey","tagsKey","subtitleSizeKey","subtitleColorKey","subtitleOutlineThicknessKey","subtitleOutlineColorKey","subtitleBackgroundColorKey","subtitleBackgroundOpacityKey","subtitleFontFamilyKey","subtitlePreviewKey","imageBasedSubtitleScaleFactorKey","audioPaddingStartKey","audioPaddingEndKey","maxImageWidthKey","maxImageHeightKey","surroundingSubtitlesCountRadiusKey","surroundingSubtitlesTimeRadiusKey","preferMp3Key","themeTypeKey","copyToClipboardOnMineKey","autoPausePreferenceKey","keyBindSetKey","rememberSubtitleOffsetKey","autoCopyCurrentSubtitleKey","SettingsProvider","_tags","_keyBindSet","newSettings","localStorage","getItem","removeItem","setItem","_setOptionalItem","ankiFieldsString","tagsString","_getNumberItem","serialized","PlayerChannel","closeCallbacks","subtitlesCallbacks","subtitleSettingsCallbacks","miscSettingsCallbacks","ankiSettingsCallbacks","alertCallbacks","subtitlesMessage","subtitleSettingsMessage","playModeMessage","hideSubtitlePlayerToggleMessage","appBarToggleMessage","fullscreenToggleMessage","ankiSettingsMessage","miscSettingsMessage","alertMessage","AppKeyBinder","defaultKeyBinder","copyHandlers","ankiExportHandlers","updateLastCardHandlers","onExtensionMessage","h","KeyboardEvent","_remove","splice","bindToggleSubtitles","bindToggleSubtitleTrackInVideo","onCondensedPlayback","overflow","cursorHidden","subtitleContainer","lineHeight","notifyReady","playerChannel","outerWidth","availHeight","outerHeight","resizeTo","selectedTrack","VideoPlayer","poppingInRef","setFullscreen","setLength","setVideoFileName","showSubtitles","setShowSubtitles","setSubtitlesEnabled","setSubtitlePlayerHidden","theaterMode","setAppBarHidden","showSubtitlesRef","showCursor","setShowCursor","lastMouseMovementTimestamp","setMiscSettings","setSubtitleSettings","setAnkiSettings","alertOpen","setAlertOpen","setAlertMessage","alertSeverity","setAlertSeverity","videoRefCallback","videoElement","onloadeddata","ontimeupdate","code","errorMessage","selectAudioTrack","updateSubtitlesWithOffset","forwardToPlayer","onSubtitles","onSubtitleSettings","onMiscSettings","onAnkiSettings","onAlert","onbeforeunload","equals","arrayEquals","s1","s2","copy","toggleSubtitleTrackInList","extractSubtitles","noSubtitleCallback","subtitleCallback","handleSubtitlesToggle","handleFullscreenToggle","exitFullscreen","requestFullscreen","handlePopOutToggle","popOutToggle","handleHideSubtitlePlayerToggle","handleTheaterModeToggle","handleDoubleClick","subtitleStyles","handleAlertClosed","bounds","clientX","clientY","controls","onDoubleClick","isMobile","ChromeExtension","windowEventListener","onMessageCallbacks","onTabsCallbacks","heartbeatStarted","sender","tabsCommand","ackRequested","receivedTabs","fromVideoPlayer","_sendHeartbeat","videoPlayer","callbacks","keyBindNameMap","ChromeExtensionProvider","translatedCommands","extensionCommandName","volumeKey","theaterModeKey","offsetKey","PlaybackPreferences","useContentStyles","contentShift","audioClipFromItem","paddingStart","paddingEnd","fromBase64","subtitleFile","fromFile","filePlaybackRate","audioTrack","imageFromItem","mediaTimestamp","itemSourceString","NavigateToVideo","searchParams","get","to","RenderVideo","Content","App","createTheme","main","red","A400","useLocation","useSearchParams","inVideoPlayer","pathname","extensionProvider","setExtension","setVideoFullscreen","onChromeExtension","drawerRatio","minDrawerSize","copiedSubtitles","setCopiedSubtitles","copiedSubtitlesRef","copyHistoryOpen","setCopyHistoryOpen","setTheaterMode","setHideSubtitlePlayer","setVideoPopOut","alert","setAlert","setJumpToSubtitle","setRewindSubtitle","setSources","setLoading","setDragging","dragEnterRef","setFileName","ankiDialogOpen","setAnkiDialogOpen","ankiDialogDisabled","setAnkiDialogDisabled","ankiDialogItem","setAnkiDialogItem","ankiDialogItemSliderContext","itemSliderContext","ankiDialogAudioClip","ankiDialogImage","setAnkiDialogRequested","setAnkiDialogFinishedRequest","settingsDialogOpen","setSettingsDialogOpen","settingsDialogScrollToId","setSettingsDialogScrollToId","imageDialogOpen","setImageDialogOpen","setDisableKeyEvents","setImage","setTab","setAvailableTabs","fileInputRef","ankiDialogRequestedRef","handleError","handleAnkiDialogRequest","handleAnkiDialogRequestFromVideoPlayer","blobFile","File","handleAnkiDialogProceed","export","newCopiedSubtitle","newCopiedSubtitles","handleOpenCopyHistory","handleCloseCopyHistory","handleAppBarToggle","fullscreenElement","handleHideSubtitlePlayer","handleVideoPopOut","handleOpenSettings","handleImageDialogClosed","handleCloseSettings","handleDeleteCopyHistoryItem","previous","clip","handleDownloadCopyHistorySectionAsSrt","deduplicated","toISOString","handleSelectCopyHistoryItem","handleAnki","handleAnkiDialogCancel","handleAnkiDialogRewind","subscribeTabs","t1","t2","handleFiles","extensionStartIndex","extractSources","revokeUrls","handleDirectory","fileSystemEntry","webkitGetAsEntry","isDirectory","fileSystemDirectoryEntry","createReader","readEntries","entries","filePromises","unsubscribe","startHeartbeat","syncMessage","handleAutoPauseModeChangedViaBind","oldPlayMode","handleDrop","dataTransfer","allDirectories","handleFileInputChange","handleFileSelector","nonSupSubtitleFiles","filesToSrt","handleDragOver","handleDragEnter","handleDragLeave","handleSourcesLoaded","hash","startsWith","nothingLoaded","effectiveCopyHistoryOpen","ThemeProvider","CssBaseline","onDrop","onDragOver","onDragEnter","onDragLeave","accept","multiple","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","createRoot","querySelector","render","basename"],"mappings":"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","file":"static/js/main.0449cea8.chunk.js","sourcesContent":["import { useLayoutEffect, useState } from 'react';\n\n// https://stackoverflow.com/questions/19014250/rerender-view-on-browser-resize-with-react\nexport function useWindowSize(enabled: boolean) {\n    const [size, setSize] = useState([0, 0]);\n\n    useLayoutEffect(() => {\n        function updateSize() {\n            if (enabled) {\n                setSize([window.innerWidth, window.innerHeight]);\n            }\n        }\n\n        window.addEventListener('resize', updateSize);\n        updateSize();\n\n        return () => window.removeEventListener('resize', updateSize);\n    }, [enabled]);\n\n    return size;\n}\n","import { SubtitleModel } from './Model';\nimport hotkeys from 'hotkeys-js';\nimport { KeyBindSet } from './Settings';\n\nexport interface KeyBinder {\n    bindCopy<T extends SubtitleModel = SubtitleModel>(\n        onCopy: (event: KeyboardEvent, subtitle: T) => void,\n        disabledGetter: () => boolean,\n        subtitleGetter: () => T | undefined,\n        useCapture?: boolean\n    ): () => void;\n    bindAnkiExport(\n        onAnkiExport: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean\n    ): () => void;\n    bindUpdateLastCard(\n        onUpdateLastCard: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean\n    ): () => void;\n    bindSeekToSubtitle(\n        onSeekToSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean\n    ): () => void;\n    bindSeekToBeginningOfCurrentSubtitle(\n        onSeekToBeginningOfCurrentSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean\n    ): () => void;\n    bindSeekBackwardOrForward(\n        onSeekBackwardOrForward: (event: KeyboardEvent, forward: boolean) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean\n    ): () => void;\n    bindOffsetToSubtitle(\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean\n    ): () => void;\n    bindAdjustOffset(\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\n        disabledGetter: () => boolean,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean\n    ): () => void;\n    bindAdjustPlaybackRate(\n        onAdjustPlaybackRate: (event: KeyboardEvent, increase: boolean) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean\n    ): () => void;\n    bindToggleSubtitles(\n        onToggleSubtitles: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean\n    ): () => void;\n    bindToggleSubtitleTrackInVideo(\n        onToggleSubtitleTrack: (event: KeyboardEvent, extra: any) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean\n    ): () => void;\n    bindToggleSubtitleTrackInList(\n        onToggleSubtitleTrackInList: (event: KeyboardEvent, extra: any) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean\n    ): () => void;\n    bindPlay(onPlay: (event: KeyboardEvent) => void, disabledGetter: () => boolean, useCapture?: boolean): () => void;\n    bindAutoPause(\n        onAutoPause: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean\n    ): () => void;\n    bindCondensedPlayback(\n        onCondensedPlayback: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean\n    ): () => void;\n}\n\nexport class DefaultKeyBinder implements KeyBinder {\n    private readonly keyBindSet: KeyBindSet;\n\n    constructor(keyBindSet: KeyBindSet) {\n        this.keyBindSet = keyBindSet;\n    }\n    bindCopy<T extends SubtitleModel = SubtitleModel>(\n        onCopy: (event: KeyboardEvent, subtitle: T) => void,\n        disabledGetter: () => boolean,\n        subtitleGetter: () => T | undefined,\n        useCapture = false\n    ) {\n        const shortcut = this.keyBindSet.copySubtitle.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = this.copyHandler(onCopy, disabledGetter, subtitleGetter);\n        hotkeys(shortcut, { capture: useCapture }, handler);\n        return () => hotkeys.unbind(shortcut, handler);\n    }\n\n    copyHandler<T extends SubtitleModel>(\n        onCopy: (event: KeyboardEvent, subtitle: T) => void,\n        disabledGetter: () => boolean,\n        subtitleGetter: () => T | undefined\n    ) {\n        return (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            const subtitle = subtitleGetter();\n\n            if (!subtitle) {\n                return;\n            }\n\n            onCopy(event, subtitle);\n        };\n    }\n\n    bindAnkiExport(onAnkiExport: (event: KeyboardEvent) => void, disabledGetter: () => boolean, useCapture = false) {\n        const shortcut = this.keyBindSet.ankiExport.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = this.ankiExportHandler(onAnkiExport, disabledGetter);\n        hotkeys(shortcut, { capture: useCapture }, handler);\n        return () => hotkeys.unbind(shortcut, handler);\n    }\n\n    ankiExportHandler(onAnkiExport: (event: KeyboardEvent) => void, disabledGetter: () => boolean) {\n        return (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onAnkiExport(event);\n        };\n    }\n\n    bindUpdateLastCard(\n        onUpdateLastCard: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture = false\n    ) {\n        const shortcut = this.keyBindSet.updateLastCard.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = this.updateLastCardHandler(onUpdateLastCard, disabledGetter);\n        hotkeys(shortcut, { capture: useCapture }, handler);\n        return () => hotkeys.unbind(shortcut, handler);\n    }\n\n    updateLastCardHandler(onUpdateLastCard: (event: KeyboardEvent) => void, disabledGetter: () => boolean) {\n        return (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onUpdateLastCard(event);\n        };\n    }\n\n    bindSeekToSubtitle(\n        onSeekToSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture = false\n    ) {\n        const delegate = (event: KeyboardEvent, forward: boolean) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            const subtitles = subtitlesGetter();\n\n            if (!subtitles || subtitles.length === 0) {\n                return;\n            }\n\n            const subtitle = this._adjacentSubtitle(forward, timeGetter(), subtitles);\n\n            if (subtitle !== null && subtitle.start >= 0 && subtitle.end >= 0) {\n                onSeekToSubtitle(event, subtitle);\n            }\n        };\n        const previousShortcut = this.keyBindSet.seekToPreviousSubtitle.keys;\n        const nextShortcut = this.keyBindSet.seekToNextSubtitle.keys;\n        const previousHandler = (event: KeyboardEvent) => delegate(event, false);\n        const nextHandler = (event: KeyboardEvent) => delegate(event, true);\n\n        if (previousShortcut) {\n            hotkeys(previousShortcut, { capture: useCapture }, previousHandler);\n        }\n\n        if (nextShortcut) {\n            hotkeys(nextShortcut, { capture: useCapture }, nextHandler);\n        }\n\n        return () => {\n            if (previousShortcut) {\n                hotkeys.unbind(previousShortcut, previousHandler);\n            }\n\n            if (nextShortcut) {\n                hotkeys.unbind(nextShortcut, nextHandler);\n            }\n        };\n    }\n\n    bindSeekToBeginningOfCurrentSubtitle(\n        onSeekToBeginningOfCurrentSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture = false\n    ) {\n        const shortcut = this.keyBindSet.seekToBeginningOfCurrentSubtitle.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            const subtitles = subtitlesGetter();\n\n            if (!subtitles || subtitles.length === 0) {\n                return;\n            }\n\n            const subtitle = this._currentSubtitle(timeGetter(), subtitles);\n\n            if (subtitle !== undefined && subtitle.start >= 0 && subtitle.end >= 0) {\n                onSeekToBeginningOfCurrentSubtitle(event, subtitle);\n            }\n        };\n        hotkeys(shortcut, { capture: useCapture }, handler);\n        return () => hotkeys.unbind(shortcut, handler);\n    }\n\n    _currentSubtitle(time: number, subtitles: SubtitleModel[]) {\n        const now = time;\n        let currentSubtitle: SubtitleModel | undefined;\n        let minDiff = Number.MAX_SAFE_INTEGER;\n\n        for (let i = 0; i < subtitles.length; ++i) {\n            const s = subtitles[i];\n\n            if (s.start < 0 || s.end < 0) {\n                continue;\n            }\n\n            const diff = now - s.start;\n\n            if (now >= s.start && now < s.end) {\n                if (diff < minDiff) {\n                    currentSubtitle = s;\n                    minDiff = diff;\n                }\n            }\n        }\n\n        return currentSubtitle;\n    }\n\n    bindSeekBackwardOrForward(\n        onSeekBackwardOrForward: (event: KeyboardEvent, forward: boolean) => void,\n        disabledGetter: () => boolean,\n        useCapture = false\n    ) {\n        const delegate = (event: KeyboardEvent, forward: boolean) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onSeekBackwardOrForward(event, forward);\n        };\n        const backShortcut = this.keyBindSet.seekBackward.keys;\n        const nextShortcut = this.keyBindSet.seekForward.keys;\n        const backHandler = (event: KeyboardEvent) => delegate(event, false);\n        const nextHandler = (event: KeyboardEvent) => delegate(event, true);\n\n        if (backShortcut) {\n            hotkeys(backShortcut, { capture: useCapture }, backHandler);\n        }\n\n        if (nextShortcut) {\n            hotkeys(nextShortcut, { capture: useCapture }, nextHandler);\n        }\n\n        return () => {\n            if (backShortcut) {\n                hotkeys.unbind(backShortcut, backHandler);\n            }\n\n            if (nextShortcut) {\n                hotkeys.unbind(nextShortcut, nextHandler);\n            }\n        };\n    }\n\n    bindOffsetToSubtitle(\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture = false\n    ) {\n        const delegate = (event: KeyboardEvent, forward: boolean) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            const subtitles = subtitlesGetter();\n\n            if (!subtitles || subtitles.length === 0) {\n                return;\n            }\n\n            const time = timeGetter();\n            const subtitle = this._adjacentSubtitle(forward, time, subtitles);\n\n            if (subtitle !== null) {\n                const subtitleStart = subtitle.originalStart;\n                const newOffset = time - subtitleStart;\n                onOffsetChange(event, newOffset);\n            }\n        };\n        const previousShortcut = this.keyBindSet.adjustOffsetToPreviousSubtitle.keys;\n        const nextShortcut = this.keyBindSet.adjustOffsetToNextSubtitle.keys;\n        const previousHandler = (event: KeyboardEvent) => delegate(event, false);\n        const nextHandler = (event: KeyboardEvent) => delegate(event, true);\n\n        if (previousShortcut) {\n            hotkeys(previousShortcut, { capture: useCapture }, previousHandler);\n        }\n\n        if (nextShortcut) {\n            hotkeys(nextShortcut, { capture: useCapture }, nextHandler);\n        }\n\n        return () => {\n            if (previousShortcut) {\n                hotkeys.unbind(previousShortcut, previousHandler);\n            }\n\n            if (nextShortcut) {\n                hotkeys.unbind(nextShortcut, nextHandler);\n            }\n        };\n    }\n\n    _adjacentSubtitle(forward: boolean, time: number, subtitles: SubtitleModel[]) {\n        const now = time;\n        let adjacentSubtitleIndex = -1;\n        let minDiff = Number.MAX_SAFE_INTEGER;\n\n        for (let i = 0; i < subtitles.length; ++i) {\n            const s = subtitles[i];\n            const diff = forward ? s.start - now : now - s.start;\n\n            if (minDiff <= diff) {\n                continue;\n            }\n\n            if (forward && now < s.start) {\n                minDiff = diff;\n                adjacentSubtitleIndex = i;\n            } else if (!forward && now > s.start) {\n                minDiff = diff;\n                adjacentSubtitleIndex = now < s.end ? Math.max(0, i - 1) : i;\n            }\n        }\n\n        if (adjacentSubtitleIndex !== -1) {\n            return subtitles[adjacentSubtitleIndex];\n        }\n\n        return null;\n    }\n\n    bindAdjustOffset(\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\n        disabledGetter: () => boolean,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture = false\n    ) {\n        const delegate = (event: KeyboardEvent, increase: boolean) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            const subtitles = subtitlesGetter();\n\n            if (!subtitles || subtitles.length === 0) {\n                return;\n            }\n\n            const currentOffset = subtitles[0].start - subtitles[0].originalStart;\n            const newOffset = currentOffset + (increase ? 100 : -100);\n            onOffsetChange(event, newOffset);\n        };\n\n        const decreaseShortcut = this.keyBindSet.decreaseOffset.keys;\n        const increaseShortcut = this.keyBindSet.increaseOffset.keys;\n        const decreaseHandler = (event: KeyboardEvent) => delegate(event, false);\n        const increaseHandler = (event: KeyboardEvent) => delegate(event, true);\n\n        hotkeys(decreaseShortcut, { capture: useCapture }, decreaseHandler);\n        hotkeys(increaseShortcut, { capture: useCapture }, increaseHandler);\n        return () => {\n            hotkeys.unbind(decreaseShortcut, decreaseHandler);\n            hotkeys.unbind(increaseShortcut, increaseHandler);\n        };\n    }\n\n    bindAdjustPlaybackRate(\n        onAdjustPlaybackRate: (event: KeyboardEvent, increase: boolean) => void,\n        disabledGetter: () => boolean,\n        useCapture = false\n    ) {\n        const delegate = (event: KeyboardEvent, increase: boolean) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onAdjustPlaybackRate(event, increase);\n        };\n        const increaseShortcut = this.keyBindSet.increasePlaybackRate.keys;\n        const decreaseShortcut = this.keyBindSet.decreasePlaybackRate.keys;\n        const decreaseHandler = (event: KeyboardEvent) => delegate(event, false);\n        const increaseHandler = (event: KeyboardEvent) => delegate(event, true);\n\n        if (decreaseShortcut) {\n            hotkeys(decreaseShortcut, { capture: useCapture }, decreaseHandler);\n        }\n\n        if (increaseShortcut) {\n            hotkeys(increaseShortcut, { capture: useCapture }, increaseHandler);\n        }\n\n        return () => {\n            if (decreaseShortcut) {\n                hotkeys.unbind(decreaseShortcut, decreaseHandler);\n            }\n\n            if (increaseShortcut) {\n                hotkeys.unbind(increaseShortcut, increaseHandler);\n            }\n        };\n    }\n\n    bindToggleSubtitles(\n        onToggleSubtitles: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture = false\n    ) {\n        const shortcut = this.keyBindSet.toggleSubtitles.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onToggleSubtitles(event);\n        };\n        hotkeys(shortcut, { capture: useCapture }, handler);\n        return () => {\n            hotkeys.unbind(shortcut, handler);\n        };\n    }\n\n    bindToggleSubtitleTrackInVideo(\n        onToggleSubtitleTrack: (event: KeyboardEvent, extra: any) => void,\n        disabledGetter: () => boolean,\n        useCapture = false\n    ) {\n        const shortcuts = [\n            this.keyBindSet.toggleVideoSubtitleTrack1.keys,\n            this.keyBindSet.toggleVideoSubtitleTrack2.keys,\n        ].filter((s) => s);\n\n        if (shortcuts.length === 0) {\n            return () => {};\n        }\n\n        const delegate = (event: KeyboardEvent, track: number) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onToggleSubtitleTrack(event, track);\n        };\n        let handlers: ((event: KeyboardEvent) => void)[] = [];\n\n        for (let i = 0; i < shortcuts.length; ++i) {\n            const handler = (event: KeyboardEvent) => delegate(event, i);\n            handlers.push(handler);\n            hotkeys(shortcuts[i], { capture: useCapture }, handler);\n        }\n\n        return () => {\n            for (let i = 0; i < shortcuts.length; ++i) {\n                const handler = handlers[i];\n                hotkeys.unbind(shortcuts[i], handler);\n            }\n        };\n    }\n\n    bindToggleSubtitleTrackInList(\n        onToggleSubtitleTrackInList: (event: KeyboardEvent, extra: any) => void,\n        disabledGetter: () => boolean,\n        useCapture = false\n    ) {\n        const shortcuts = [\n            this.keyBindSet.toggleAsbplayerSubtitleTrack1.keys,\n            this.keyBindSet.toggleAsbplayerSubtitleTrack2.keys,\n        ].filter((s) => s);\n\n        if (shortcuts.length === 0) {\n            return () => {};\n        }\n\n        const delegate = (event: KeyboardEvent, track: number) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onToggleSubtitleTrackInList(event, track);\n        };\n\n        let handlers: ((event: KeyboardEvent) => void)[] = [];\n\n        for (let i = 0; i < 9; ++i) {\n            const handler = (event: KeyboardEvent) => delegate(event, i);\n            handlers.push(handler);\n            hotkeys(shortcuts[i], { capture: useCapture }, handler);\n        }\n\n        return () => {\n            for (let i = 0; i < 9; ++i) {\n                const handler = handlers[i];\n                hotkeys.unbind(shortcuts[i], handler);\n            }\n        };\n    }\n\n    bindPlay(onPlay: (event: KeyboardEvent) => void, disabledGetter: () => boolean, useCapture = false) {\n        const shortcut = this.keyBindSet.togglePlay.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onPlay(event);\n        };\n\n        hotkeys(shortcut, { capture: useCapture }, handler);\n        return () => {\n            hotkeys.unbind(shortcut, handler);\n        };\n    }\n\n    bindAutoPause(onAutoPause: (event: KeyboardEvent) => void, disabledGetter: () => boolean, useCapture = false) {\n        const shortcut = this.keyBindSet.toggleAutoPause.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onAutoPause(event);\n        };\n        hotkeys(shortcut, { capture: useCapture }, handler);\n        return () => {\n            hotkeys.unbind(shortcut, handler);\n        };\n    }\n\n    bindCondensedPlayback(\n        onAutoPause: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture = false\n    ) {\n        const shortcut = this.keyBindSet.toggleCondensedPlayback.keys;\n\n        if (!shortcut) {\n            return () => {};\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (disabledGetter()) {\n                return;\n            }\n\n            onAutoPause(event);\n        };\n        hotkeys(shortcut, { capture: useCapture }, handler);\n        return () => {\n            hotkeys.unbind(shortcut, handler);\n        };\n    }\n}\n","export default class Mp3Encoder {\n    static async encode(blob: Blob, workerFactory: () => Worker): Promise<Blob> {\n        return new Promise(async (resolve, reject) => {\n            var reader = new FileReader();\n            reader.onload = async (e) => {\n                try {\n                    const audioContext = new AudioContext();\n\n                    if (e.target === null) {\n                        reject(new Error(\"Could not obtain buffer to encode\"));\n                        return;\n                    }\n\n                    const audioBuffer = await audioContext.decodeAudioData(e.target.result as ArrayBuffer);\n                    const channels = [];\n\n                    for (let i = 0; i < audioBuffer.numberOfChannels; ++i) {\n                        channels.push(audioBuffer.getChannelData(i));\n                    }\n\n                    const worker = workerFactory();\n                    worker.postMessage({\n                        command: 'encode',\n                        audioBuffer: {\n                            channels: channels,\n                            numberOfChannels: audioBuffer.numberOfChannels,\n                            length: audioBuffer.length,\n                            sampleRate: audioBuffer.sampleRate,\n                        },\n                    });\n                    worker.onmessage = (e) => {\n                        resolve(new Blob(e.data.buffer, { type: 'audio/mp3' }));\n                        worker.terminate();\n                    };\n                    worker.onerror = (e) => {\n                        const error = e?.error ?? new Error('MP3 encoding failed: ' + e?.message);\n                        reject(error);\n                        worker.terminate();\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            };\n            reader.readAsArrayBuffer(blob);\n        });\n    }\n}\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/js/mp3-encoder.7f842300.worker.js\");\n}\n","import sanitize from 'sanitize-filename';\nimport { SubtitleModel } from './Model';\n\nexport function humanReadableTime(timestamp: number, nearestTenth = false): string {\n    const totalSeconds = Math.floor(timestamp / 1000);\n    let seconds;\n\n    if (nearestTenth) {\n        seconds = Math.round(((timestamp / 1000) % 60) * 10) / 10;\n    } else {\n        seconds = totalSeconds % 60;\n    }\n\n    const minutes = Math.floor(totalSeconds / 60) % 60;\n    const hours = Math.floor(totalSeconds / 3600);\n\n    if (hours > 0) {\n        return hours + 'h' + String(minutes).padStart(2, '0') + 'm' + String(seconds).padStart(2, '0') + 's';\n    }\n\n    return minutes + 'm' + String(seconds).padStart(2, '0') + 's';\n}\n\nexport function surroundingSubtitles(\n    subtitles: SubtitleModel[],\n    index: number,\n    countRadius: number,\n    timeRadius: number\n): SubtitleModel[] {\n    let startIndex = index;\n\n    for (let i = index; i >= 0; --i) {\n        startIndex = i;\n\n        if (atBoundary(subtitles, startIndex, index, countRadius, timeRadius, Direction.backward)) {\n            break;\n        }\n    }\n\n    let endIndex = startIndex;\n\n    for (let i = index; i <= subtitles.length - 1; ++i) {\n        endIndex = i;\n\n        if (atBoundary(subtitles, endIndex, index, countRadius, timeRadius, Direction.forward)) {\n            break;\n        }\n    }\n\n    return subtitles.slice(startIndex, endIndex + 1);\n}\n\nfunction indexNearTimestamp(subtitles: SubtitleModel[], timestamp: number, direction: Direction) {\n    if (direction === Direction.forward) {\n        for (let i = 0; i < subtitles.length; ++i) {\n            if (subtitles[i].start >= timestamp) {\n                return i;\n            }\n        }\n    } else {\n        for (let i = subtitles.length - 1; i >= 0; --i) {\n            if (subtitles[i].start <= timestamp) {\n                return i;\n            }\n        }\n    }\n\n    return undefined;\n}\n\nexport function surroundingSubtitlesAroundInterval(\n    subtitles: SubtitleModel[],\n    startTimestamp: number,\n    endTimestamp: number,\n    countRadius: number,\n    timeRadius: number\n) {\n    if (subtitles.length === 0) {\n        return {};\n    }\n\n    let startBoundaryIndex = 0;\n    const indexAfterStartTimestamp =\n        indexNearTimestamp(subtitles, startTimestamp, Direction.forward) ?? subtitles.length - 1;\n\n    for (let i = 0; i < subtitles.length; ++i) {\n        startBoundaryIndex = i;\n\n        if (\n            withinBoundaryAroundInterval(\n                subtitles,\n                i,\n                countRadius,\n                timeRadius,\n                startTimestamp,\n                indexAfterStartTimestamp\n            )\n        ) {\n            break;\n        }\n    }\n\n    let endBoundaryIndex = subtitles.length - 1;\n    const indexBeforeEndTimestamp = indexNearTimestamp(subtitles, endTimestamp, Direction.backward) ?? 0;\n\n    for (let i = subtitles.length - 1; i >= 0; --i) {\n        endBoundaryIndex = i;\n\n        if (\n            withinBoundaryAroundInterval(subtitles, i, countRadius, timeRadius, endTimestamp, indexBeforeEndTimestamp)\n        ) {\n            break;\n        }\n    }\n\n    if (endBoundaryIndex <= startBoundaryIndex) {\n        return {};\n    }\n\n    return {\n        surroundingSubtitles: subtitles.slice(startBoundaryIndex, endBoundaryIndex + 1),\n        subtitle: subtitles[indexAfterStartTimestamp],\n    };\n}\n\nexport function mockSurroundingSubtitles(\n    middleSubtitle: SubtitleModel,\n    maxTimestamp: number,\n    timeRadius: number\n): SubtitleModel[] {\n    const subtitles = [middleSubtitle];\n    const offset = middleSubtitle.start - middleSubtitle.originalStart;\n\n    if (middleSubtitle.end < maxTimestamp) {\n        const afterTimestamp = Math.min(maxTimestamp, middleSubtitle.end + timeRadius);\n        subtitles.push({\n            text: '',\n            start: middleSubtitle.end,\n            end: afterTimestamp,\n            originalStart: middleSubtitle.end - offset,\n            originalEnd: afterTimestamp - offset,\n            track: middleSubtitle.track,\n        });\n    }\n\n    if (middleSubtitle.start > 0) {\n        const beforeTimestamp = Math.max(0, middleSubtitle.start - timeRadius);\n        subtitles.unshift({\n            text: '',\n            start: beforeTimestamp,\n            end: middleSubtitle.start,\n            originalStart: beforeTimestamp - offset,\n            originalEnd: middleSubtitle.start - offset,\n            track: middleSubtitle.track,\n        });\n    }\n\n    return subtitles;\n}\n\nenum Direction {\n    forward,\n    backward,\n}\n\nfunction atBoundary(\n    subtitles: SubtitleModel[],\n    index: number,\n    initialIndex: number,\n    countRadius: number,\n    timeRadius: number,\n    direction: Direction\n): boolean {\n    let next;\n\n    if (direction == Direction.forward) {\n        next = index + 1 < subtitles.length ? subtitles[index + 1] : null;\n    } else {\n        next = index - 1 >= 0 ? subtitles[index - 1] : null;\n    }\n\n    if (\n        Math.abs(initialIndex - index) >= countRadius &&\n        (next === null || Math.abs(next.start - subtitles[initialIndex].start) >= timeRadius)\n    ) {\n        return true;\n    }\n\n    return false;\n}\n\nfunction withinBoundaryAroundInterval(\n    subtitles: SubtitleModel[],\n    index: number,\n    countRadius: number,\n    timeRadius: number,\n    timestamp: number,\n    indexNearTimestamp: number\n): boolean {\n    const current = subtitles[index];\n\n    if (Math.abs(indexNearTimestamp - index) <= countRadius || Math.abs(current.start - timestamp) <= timeRadius) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function download(blob: Blob, name: string) {\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    document.body.appendChild(a);\n    a.style.display = 'none';\n    a.href = url;\n    a.download = sanitize(name);\n    a.click();\n    URL.revokeObjectURL(url);\n    a.remove();\n}\n","import Mp3Encoder from './Mp3Encoder';\n// eslint-disable-next-line\n// @ts-ignore\nimport Worker from 'worker-loader!./mp3-encoder.js';\nimport { download } from './util';\nconst defaultMp3WorkerFactory = () => new Worker();\n\ninterface ExperimentalAudioElement extends HTMLAudioElement {\n    audioTracks: any;\n    captureStream?: () => MediaStream;\n    mozCaptureStream?: () => MediaStream;\n}\n\ninterface AudioData {\n    name: string;\n    extension: string;\n    start: number;\n    end: number;\n    play: () => Promise<void>;\n    blob: () => Promise<Blob>;\n    base64: () => Promise<string>;\n    slice: (start: number, end: number) => AudioData;\n    isSliceable: () => boolean;\n}\n\nclass Base64AudioData implements AudioData {\n    private readonly _name: string;\n    private readonly _start: number;\n    private readonly _end: number;\n    private readonly playbackRate: number;\n    private readonly _base64: string;\n    private readonly _extension: string;\n\n    private playingAudio?: HTMLAudioElement;\n    private stopAudioTimeout?: NodeJS.Timeout;\n    private cachedBlob?: Blob;\n\n    constructor(baseName: string, start: number, end: number, playbackRate: number, base64: string, extension: string) {\n        this._name = baseName + '_' + Math.floor(start) + '_' + Math.floor(end);\n        this._start = start;\n        this._end = end;\n        this.playbackRate = playbackRate;\n        this._base64 = base64;\n        this._extension = extension;\n    }\n\n    get name(): string {\n        return this._name;\n    }\n\n    get extension(): string {\n        return this._extension;\n    }\n\n    get start(): number {\n        return this._start;\n    }\n\n    get end(): number {\n        return this._end;\n    }\n\n    async base64() {\n        return this._base64;\n    }\n\n    async blob() {\n        return await this._blob();\n    }\n\n    async play(): Promise<void> {\n        if (this.playingAudio) {\n            this.stopAudio(this.playingAudio);\n            clearTimeout(this.stopAudioTimeout!);\n            this.playingAudio = undefined;\n            this.stopAudioTimeout = undefined;\n            return;\n        }\n\n        const blob = await this._blob();\n        const audio = new Audio();\n        audio.src = URL.createObjectURL(blob);\n        audio.preload = 'none';\n        audio.load();\n        this.playingAudio = audio;\n\n        await audio.play();\n\n        this.stopAudioTimeout = setTimeout(() => {\n            this.stopAudio(audio);\n            this.playingAudio = undefined;\n            this.stopAudioTimeout = undefined;\n        }, (this._end - this._start) / this.playbackRate + 100);\n    }\n\n    private stopAudio(audio: HTMLAudioElement) {\n        audio.pause();\n        const src = audio.src;\n        audio.src = '';\n        URL.revokeObjectURL(src);\n    }\n\n    async _blob() {\n        if (!this.cachedBlob) {\n            this.cachedBlob = await (await fetch('data:audio/' + this.extension + ';base64,' + this._base64)).blob();\n        }\n\n        return this.cachedBlob;\n    }\n\n    slice(start: number, end: number): AudioData {\n        // Not supported\n        return this;\n    }\n\n    isSliceable() {\n        return false;\n    }\n}\n\nclass FileAudioData implements AudioData {\n    private readonly file: File;\n    private readonly _name: string;\n    private readonly _start: number;\n    private readonly _end: number;\n    private readonly playbackRate: number;\n    private readonly trackId?: string;\n    private readonly _extension: string;\n    private readonly recorderMimeType: string;\n\n    private clippingAudio?: HTMLAudioElement;\n    private clippingAudioReject?: (error: string) => void;\n    private stopClippingTimeout?: NodeJS.Timeout;\n\n    private playingAudio?: HTMLAudioElement;\n    private stopAudioTimeout?: NodeJS.Timeout;\n\n    private _blob?: Blob;\n\n    constructor(file: File, start: number, end: number, playbackRate: number, trackId?: string) {\n        const [recorderMimeType, recorderExtension] = FileAudioData._recorderConfiguration();\n        this.recorderMimeType = recorderMimeType;\n        this.file = file;\n        this._name = file.name + '_' + start + '_' + end;\n        this._start = start;\n        this._end = end;\n        this.playbackRate = playbackRate;\n        this.trackId = trackId;\n        this._extension = recorderExtension;\n    }\n\n    private static _recorderConfiguration() {\n        const AUDIO_TYPES: { [key: string]: string } = {\n            'audio/ogg;codecs=opus': 'ogg',\n            'audio/webm;codecs=opus': 'webm',\n        };\n        return Object.keys(AUDIO_TYPES)\n            .filter(MediaRecorder.isTypeSupported)\n            .map((t) => [t as string, AUDIO_TYPES[t] as string])[0];\n    }\n\n    get name(): string {\n        return this._name;\n    }\n\n    get extension(): string {\n        return this._extension;\n    }\n\n    get start() {\n        return this._start;\n    }\n\n    get end() {\n        return this._end;\n    }\n\n    async base64() {\n        return new Promise<string>(async (resolve, reject) => {\n            var reader = new FileReader();\n            const blob = await this.blob();\n\n            if (blob === undefined) {\n                reject('Did not finish recording blob');\n            } else {\n                reader.readAsDataURL(blob);\n                reader.onloadend = () => {\n                    const result = reader.result as string;\n                    const base64 = result.substring(result.indexOf(',') + 1);\n                    resolve(base64);\n                };\n            }\n        });\n    }\n\n    async play() {\n        if (!this._blob) {\n            this._blob = await this._clipAudio();\n            return;\n        }\n\n        if (this.playingAudio) {\n            this.stopAudio(this.playingAudio);\n            clearTimeout(this.stopAudioTimeout!);\n            this.playingAudio = undefined;\n            this.stopAudioTimeout = undefined;\n            return;\n        }\n\n        const audio = await this._audioElement(this._blob, false);\n        audio.currentTime = 0;\n        await audio.play();\n        this.playingAudio = audio;\n        this.stopAudioTimeout = setTimeout(() => {\n            this.stopAudio(audio);\n            this.stopAudioTimeout = undefined;\n            this.playingAudio = undefined;\n        }, (this._end - this._start) / this.playbackRate + 100);\n    }\n\n    async blob() {\n        if (!this._blob) {\n            this._blob = await this._clipAudio();\n        }\n\n        if (this._blob === undefined) {\n            throw new Error('Did not finish recording blob');\n        }\n\n        return this._blob;\n    }\n\n    async _clipAudio(): Promise<Blob | undefined> {\n        if (this.clippingAudio) {\n            this.stopAudio(this.clippingAudio);\n            clearTimeout(this.stopClippingTimeout!);\n            this.clippingAudioReject?.('Did not finish recording blob');\n            this.clippingAudio = undefined;\n            this.stopClippingTimeout = undefined;\n            this.clippingAudioReject = undefined;\n            return undefined;\n        }\n\n        return new Promise(async (resolve, reject) => {\n            try {\n                const audio = await this._audioElement(this.file, true);\n                audio.oncanplay = async (e) => {\n                    audio.play();\n                    const stream = this._captureStream(audio);\n                    const recorder = new MediaRecorder(stream, { mimeType: this.recorderMimeType });\n                    const chunks: BlobPart[] = [];\n\n                    recorder.ondataavailable = (e) => {\n                        chunks.push(e.data);\n                    };\n\n                    let finished = false;\n\n                    recorder.onstop = (e) => {\n                        if (finished) {\n                            resolve(new Blob(chunks, { type: this.recorderMimeType }));\n                        }\n                    };\n\n                    recorder.start();\n\n                    this.clippingAudioReject = reject;\n                    this.clippingAudio = audio;\n                    this.stopClippingTimeout = setTimeout(() => {\n                        this.stopAudio(audio);\n                        this.clippingAudio = undefined;\n                        this.stopClippingTimeout = undefined;\n                        this.clippingAudioReject = undefined;\n                        finished = true;\n                        recorder.stop();\n                        for (const track of stream.getAudioTracks()) {\n                            track.stop();\n                        }\n                    }, (this._end - this._start) / this.playbackRate + 100);\n                };\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    private _audioElement(source: Blob, selectTrack: boolean): Promise<ExperimentalAudioElement> {\n        const audio = new Audio() as ExperimentalAudioElement;\n        audio.src = URL.createObjectURL(source);\n\n        return new Promise((resolve, reject) => {\n            audio.onloadedmetadata = (e) => {\n                if (selectTrack && this.trackId && audio.audioTracks && audio.audioTracks.length > 0) {\n                    // @ts-ignore\n                    for (const t of audio.audioTracks) {\n                        t.enabled = this.trackId === t.id;\n                    }\n                }\n\n                audio.currentTime = this._start / 1000;\n                audio.playbackRate = this.playbackRate;\n                resolve(audio);\n            };\n        });\n    }\n\n    private stopAudio(audio: HTMLAudioElement) {\n        audio.pause();\n        const src = audio.src;\n        audio.src = '';\n        URL.revokeObjectURL(src);\n    }\n\n    private _captureStream(audio: ExperimentalAudioElement) {\n        let stream: MediaStream | undefined;\n\n        if (typeof audio.captureStream === 'function') {\n            stream = audio.captureStream();\n        }\n\n        if (typeof audio.mozCaptureStream === 'function') {\n            stream = audio.mozCaptureStream();\n        }\n\n        if (stream === undefined) {\n            throw new Error('Unable to capture stream from audio');\n        }\n\n        const audioStream = new MediaStream();\n\n        for (const track of stream.getVideoTracks()) {\n            track.stop();\n        }\n\n        for (const track of stream.getAudioTracks()) {\n            if (track.enabled) {\n                audioStream.addTrack(track);\n            }\n        }\n\n        return audioStream;\n    }\n\n    slice(start: number, end: number) {\n        return new FileAudioData(this.file, start, end, this.playbackRate, this.trackId);\n    }\n\n    isSliceable() {\n        return true;\n    }\n}\n\nclass Mp3AudioData implements AudioData {\n    private readonly data: AudioData;\n    private readonly workerFactory: () => Worker;\n    private _blob?: Blob;\n\n    constructor(data: AudioData, workerFactory: () => Worker) {\n        this.data = data;\n        this.workerFactory = workerFactory;\n    }\n\n    get name() {\n        return this.data.name;\n    }\n\n    get extension() {\n        return 'mp3';\n    }\n\n    get start() {\n        return this.data.start;\n    }\n\n    get end() {\n        return this.data.end;\n    }\n\n    async base64() {\n        return new Promise<string>(async (resolve, reject) => {\n            try {\n                var reader = new FileReader();\n                reader.readAsDataURL(await this.blob());\n                reader.onloadend = () => {\n                    const result = reader.result as string;\n                    const base64 = result.substring(result.indexOf(',') + 1);\n                    resolve(base64);\n                };\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    async play() {\n        await this.data.play();\n    }\n\n    async blob() {\n        if (!this._blob) {\n            this._blob = await Mp3Encoder.encode(await this.data.blob(), this.workerFactory);\n        }\n\n        return this._blob;\n    }\n\n    slice(start: number, end: number) {\n        return new Mp3AudioData(this.data.slice(start, end), this.workerFactory);\n    }\n\n    isSliceable() {\n        return this.data.isSliceable();\n    }\n}\n\nexport default class AudioClip {\n    private readonly data: AudioData;\n\n    constructor(data: AudioData) {\n        this.data = data;\n    }\n\n    static fromBase64(\n        subtitleFileName: string,\n        start: number,\n        end: number,\n        playbackRate: number,\n        base64: string,\n        extension: string\n    ) {\n        return new AudioClip(\n            new Base64AudioData(\n                subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')),\n                start,\n                end,\n                playbackRate,\n                base64,\n                extension\n            )\n        );\n    }\n\n    static fromFile(file: File, start: number, end: number, playbackRate: number, trackId?: string) {\n        return new AudioClip(new FileAudioData(file, start, end, playbackRate, trackId));\n    }\n\n    get start() {\n        return this.data.start;\n    }\n\n    get end() {\n        return this.data.end;\n    }\n\n    get name() {\n        return this.data.name + '.' + this.data.extension;\n    }\n\n    async play() {\n        await this.data.play();\n    }\n\n    async base64() {\n        return await this.data.base64();\n    }\n\n    async download() {\n        const blob = await this.data.blob();\n        download(blob, this.name);\n    }\n\n    toMp3(mp3WorkerFactory = defaultMp3WorkerFactory) {\n        if (this.data instanceof Mp3AudioData) {\n            return this;\n        }\n\n        if (this.data.extension === 'mp3') {\n            return this;\n        }\n\n        return new AudioClip(new Mp3AudioData(this.data, mp3WorkerFactory));\n    }\n\n    slice(start: number, end: number) {\n        return new AudioClip(this.data.slice(start, end));\n    }\n\n    isSliceable() {\n        return this.data.isSliceable();\n    }\n}\n","import { AnkiSettings } from './Settings';\n\nexport interface RectModel {\n    readonly left: number;\n    readonly top: number;\n    readonly width: number;\n    readonly height: number;\n}\n\nexport interface DimensionsModel {\n    readonly width: number;\n    readonly height: number;\n}\n\nexport interface SubtitleTextImage {\n    readonly dataUrl: string;\n    readonly screen: DimensionsModel;\n    readonly image: DimensionsModel;\n}\n\nexport interface SubtitleModel {\n    readonly text: string;\n    readonly textImage?: SubtitleTextImage;\n    readonly start: number;\n    readonly end: number;\n    readonly originalStart: number;\n    readonly originalEnd: number;\n    readonly track: number;\n}\n\nexport interface CopiedSubtitleModel extends SubtitleModel {\n    surroundingSubtitles: SubtitleModel[];\n    timestamp: number;\n    id: string;\n    name: string;\n    subtitleFile?: File;\n    audioFile?: File;\n    videoFile?: File;\n    audioTrack?: number;\n    audio?: AudioModel;\n    image?: ImageModel;\n}\n\nexport interface ImageModel {\n    readonly base64: string;\n    readonly extension: 'jpeg';\n}\n\nexport interface AudioModel {\n    readonly base64: string;\n    readonly extension: 'webm' | 'mp3';\n    readonly paddingStart: number;\n    readonly paddingEnd: number;\n    readonly start?: number;\n    readonly end?: number;\n    readonly playbackRate?: number;\n}\n\nexport interface AnkiDialogSliderContext {\n    subtitleStart: number;\n    subtitleEnd: number;\n    subtitles: SubtitleModel[];\n}\n\nexport interface AnkiUiState {\n    readonly type: 'initial' | 'resume';\n    readonly open: boolean;\n    readonly settingsProvider: AnkiSettings;\n    readonly subtitle: SubtitleModel;\n    readonly url: string;\n    readonly source: string;\n    readonly image?: ImageModel;\n    readonly audio?: AudioModel;\n    readonly themeType: string;\n    readonly dialogRequestedTimestamp: number;\n}\n\nexport interface AnkiUiInitialState extends AnkiUiState {\n    readonly type: 'initial';\n    readonly surroundingSubtitles: SubtitleModel[];\n}\n\nexport interface AnkiUiResumeState extends AnkiUiState {\n    readonly type: 'resume';\n\n    readonly text: string;\n    readonly initialTimestampInterval: number[];\n    readonly timestampInterval: number[];\n    readonly timestampBoundaryInterval?: number[];\n    readonly sliderContext: AnkiDialogSliderContext;\n    readonly definition: string;\n    readonly word: string;\n    readonly customFieldValues: { [key: string]: string };\n    readonly lastAppliedTimestampIntervalToText: number[];\n    readonly lastAppliedTimestampIntervalToAudio?: number[];\n}\n\nexport interface AnkiUiSavedState {\n    subtitle: SubtitleModel;\n    text: string;\n    sliderContext: AnkiDialogSliderContext;\n    definition: string;\n    image?: ImageModel;\n    audio?: AudioModel;\n    word: string;\n    source: string;\n    url: string;\n    customFieldValues: { [key: string]: string };\n    timestampInterval: number[];\n    initialTimestampInterval: number[];\n    timestampBoundaryInterval?: number[];\n    lastAppliedTimestampIntervalToText: number[];\n    lastAppliedTimestampIntervalToAudio?: number[];\n    dialogRequestedTimestamp: number;\n}\n\nexport interface VideoDataSubtitleTrack {\n    label: string;\n    language: string;\n    url: string;\n    m3U8BaseUrl?: string;\n    extension: string;\n}\n\nexport interface ConfirmedVideoDataSubtitleTrack {\n    name: string;\n    language: string;\n    subtitleUrl: string;\n    m3U8BaseUrl?: string;\n    extension: string;\n}\n\nexport interface VideoData {\n    basename: string;\n    error?: string;\n    subtitles: VideoDataSubtitleTrack[];\n}\n\nexport interface VideoDataUiState {\n    open?: boolean;\n    isLoading?: boolean;\n    suggestedName?: string;\n    subtitles?: VideoDataSubtitleTrack[];\n    error?: string;\n    themeType?: string;\n    selectedSubtitle?: string;\n    showSubSelect?: boolean;\n}\n\nexport interface VideoTabModel {\n    id: number; // Actually the tab ID\n    title?: string;\n    src: string; // Video src\n}\n\nexport interface Rgb {\n    r: number;\n    g: number;\n    b: number;\n}\n\nexport interface AudioTrackModel {\n    id: string;\n    label: string;\n    language: string;\n}\n\nexport enum PostMineAction {\n    none = 0,\n    showAnkiDialog = 1,\n    updateLastCard = 2,\n}\n\nexport enum AutoPausePreference {\n    atStart = 1,\n    atEnd = 2,\n}\n\nexport enum PlayMode {\n    normal = 1,\n    condensed = 2,\n    autoPause = 3,\n}\n","export default class CanvasResizer {\n    resize(\n        canvas: HTMLCanvasElement,\n        ctx: CanvasRenderingContext2D,\n        maxWidth: number,\n        maxHeight: number\n    ): Promise<HTMLCanvasElement> {\n        return new Promise((resolve, reject) => {\n            const widthRatio = maxWidth <= 0 ? 1 : maxWidth / canvas.width;\n            const heightRatio = maxHeight <= 0 ? 1 : maxHeight / canvas.height;\n            const ratio = Math.min(1, Math.min(widthRatio, heightRatio));\n\n            if (ratio < 1) {\n                const newWidth = canvas.width * ratio;\n                const newHeight = canvas.height * ratio;\n                createImageBitmap(canvas, { resizeWidth: newWidth, resizeHeight: newHeight })\n                    .then((sprite) => {\n                        canvas.width = newWidth;\n                        canvas.height = newHeight;\n                        ctx.drawImage(sprite, 0, 0);\n                        resolve(canvas);\n                    })\n                    .catch((e) => reject(e));\n            } else {\n                resolve(canvas);\n            }\n        });\n    }\n}\n","import { resolveConfig } from 'prettier';\nimport sanitize from 'sanitize-filename';\nimport CanvasResizer from './CanvasResizer';\nimport { download } from './util';\n\nclass Base64ImageData implements ImageData {\n    private readonly _name: string;\n    private readonly _base64: string;\n    private readonly _extension: string;\n\n    private cachedBlob?: Blob;\n\n    constructor(name: string, base64: string, extension: string) {\n        this._name = name;\n        this._base64 = base64;\n        this._extension = extension;\n    }\n\n    get name() {\n        return this._name;\n    }\n\n    get extension() {\n        return this._extension;\n    }\n\n    async base64() {\n        return this._base64;\n    }\n\n    async blob() {\n        return await this._blob();\n    }\n\n    async _blob() {\n        if (!this.cachedBlob) {\n            this.cachedBlob = await (await fetch(this._dataUrl())).blob();\n        }\n\n        return this.cachedBlob;\n    }\n\n    async dataUrl() {\n        return this._dataUrl();\n    }\n\n    _dataUrl() {\n        return 'data:image/' + this.extension + ';base64,' + this._base64;\n    }\n}\n\nclass FileImageData implements ImageData {\n    private readonly file: File;\n    private readonly timestamp: number;\n    private readonly maxWidth: number;\n    private readonly maxHeight: number;\n    private readonly _name: string;\n\n    constructor(file: File, timestamp: number, maxWidth: number, maxHeight: number) {\n        this.file = file;\n        this._name = file.name + '_' + Math.floor(timestamp) + '.jpeg';\n        this.timestamp = timestamp;\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n    }\n\n    get name() {\n        return this._name;\n    }\n\n    get extension() {\n        return 'jpeg';\n    }\n\n    async base64(): Promise<string> {\n        return new Promise(async (resolve, reject) => {\n            const canvas = await this._canvas();\n            const dataUrl = canvas.toDataURL('image/jpeg');\n            resolve(dataUrl.substring(dataUrl.indexOf(',') + 1));\n        });\n    }\n\n    async blob(): Promise<Blob> {\n        return new Promise(async (resolve, reject) => {\n            const canvas = await this._canvas();\n            canvas.toBlob((blob) => {\n                if (blob === null) {\n                    reject(new Error('Could not obtain blob'));\n                } else {\n                    resolve(blob);\n                }\n            }, 'image/jpeg');\n        });\n    }\n\n    async dataUrl() {\n        const canvas = await this._canvas();\n        return canvas.toDataURL();\n    }\n\n    async _canvas(): Promise<HTMLCanvasElement> {\n        return new Promise(async (resolve, reject) => {\n            const video = this._videoElement(this.file);\n\n            video.oncanplay = async (e) => {\n                const canvas = document.createElement('canvas');\n                canvas.width = video.videoWidth;\n                canvas.height = video.videoHeight;\n                const ctx = canvas.getContext('2d');\n                ctx!.drawImage(video, 0, 0, canvas.width, canvas.height);\n                if (this.maxWidth > 0 || this.maxHeight > 0) {\n                    const resizer = new CanvasResizer();\n                    await resizer.resize(canvas, ctx!, this.maxWidth, this.maxHeight);\n                    resolve(canvas);\n                } else {\n                    resolve(canvas);\n                }\n                URL.revokeObjectURL(video.src);\n            };\n        });\n    }\n\n    _videoElement(source: File) {\n        const video = document.createElement('video');\n        video.src = URL.createObjectURL(source);\n        video.preload = 'none';\n        video.currentTime = this.timestamp / 1000;\n        video.load();\n\n        return video;\n    }\n}\n\ninterface ImageData {\n    name: string;\n    extension: string;\n    base64: () => Promise<string>;\n    dataUrl: () => Promise<string>;\n    blob: () => Promise<Blob>;\n}\n\nexport default class Image {\n    private readonly data: ImageData;\n\n    constructor(data: ImageData) {\n        this.data = data;\n    }\n\n    static fromBase64(subtitleFileName: string, timestamp: number, base64: string, extension: string) {\n        const imageName =\n            subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')) +\n            '_' +\n            Math.floor(timestamp) +\n            '.' +\n            extension;\n        return new Image(new Base64ImageData(imageName, base64, extension));\n    }\n\n    static fromFile(file: File, timestamp: number, maxWidth: number, maxHeight: number) {\n        return new Image(new FileImageData(file, timestamp, maxWidth, maxHeight));\n    }\n\n    get name() {\n        return this.data.name;\n    }\n\n    get extension() {\n        return this.data.extension;\n    }\n\n    async base64() {\n        return await this.data.base64();\n    }\n\n    async dataUrl() {\n        return await this.data.dataUrl();\n    }\n\n    async blob() {\n        return await this.data.blob();\n    }\n\n    async pngBlob() {\n        return new Promise<Blob>(async (resolve, reject) => {\n            try {\n                createImageBitmap(await this.blob()).then((bitMap) => {\n                    const canvas = document.createElement('canvas');\n                    canvas.width = bitMap.width;\n                    canvas.height = bitMap.height;\n                    canvas.getContext('2d')!.drawImage(bitMap, 0, 0);\n                    canvas.toBlob((blob) => {\n                        if (blob) {\n                            resolve(blob);\n                        } else {\n                            reject('Failed to convert to PNG');\n                        }\n                    }, 'image/png');\n                });\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n    async download() {\n        const blob = await this.data.blob();\n        download(blob, this.data.name);\n    }\n}\n","export interface Fetcher {\n    fetch: (url: string, body: any) => Promise<any>;\n}\n\nexport class HttpFetcher implements Fetcher {\n    async fetch(url: string, body: any) {\n        const response = await fetch(url, {\n            method: 'POST',\n            body: JSON.stringify(body),\n        });\n        return await response.json();\n    }\n}\n","import AudioClip from './AudioClip';\nimport Image from './Image';\nimport { HttpFetcher, Fetcher } from './Fetcher';\nimport { AnkiSettings } from './Settings';\nimport sanitize from 'sanitize-filename';\n\nconst ankiQuerySpecialCharacters = ['\"', '*', '_', '\\\\', ':'];\n\nexport type AnkiExportMode = 'gui' | 'updateLast' | 'default';\n\nexport class Anki {\n    private readonly settingsProvider: AnkiSettings;\n    private readonly fetcher: Fetcher;\n\n    constructor(settingsProvider: AnkiSettings, fetcher = new HttpFetcher()) {\n        this.settingsProvider = settingsProvider;\n        this.fetcher = fetcher;\n    }\n\n    async deckNames(ankiConnectUrl?: string) {\n        const response = await this._executeAction('deckNames', null, ankiConnectUrl);\n        return response.result;\n    }\n\n    async modelNames(ankiConnectUrl?: string) {\n        const response = await this._executeAction('modelNames', null, ankiConnectUrl);\n        return response.result;\n    }\n\n    async modelFieldNames(modelName: string, ankiConnectUrl?: string) {\n        const response = await this._executeAction('modelFieldNames', { modelName: modelName }, ankiConnectUrl);\n        return response.result;\n    }\n\n    async findNotesWithWord(word: string, ankiConnectUrl?: string) {\n        const response = await this._executeAction(\n            'findNotes',\n            { query: this.settingsProvider.wordField + ':' + this._escapeQuery(word) },\n            ankiConnectUrl\n        );\n        return response.result;\n    }\n\n    async findNotesWithWordGui(word: string, ankiConnectUrl?: string) {\n        const response = await this._executeAction(\n            'guiBrowse',\n            { query: this.settingsProvider.wordField + ':' + this._escapeQuery(word) },\n            ankiConnectUrl\n        );\n        return response.result;\n    }\n\n    private _escapeQuery(query: string) {\n        let escaped = '';\n\n        for (let i = 0; i < query.length; ++i) {\n            const char = query[i];\n            if (ankiQuerySpecialCharacters.includes(char)) {\n                escaped += `\\\\${char}`;\n            } else {\n                escaped += char;\n            }\n        }\n\n        return `\"${escaped}\"`;\n    }\n\n    async requestPermission(ankiConnectUrl?: string) {\n        const response = await this._executeAction('requestPermission', null, ankiConnectUrl);\n        return response.result;\n    }\n\n    async export(\n        text: string | undefined,\n        definition: string | undefined,\n        audioClip: AudioClip | undefined,\n        image: Image | undefined,\n        word: string | undefined,\n        source: string | undefined,\n        url: string | undefined,\n        customFieldValues: { [key: string]: string },\n        tags: string[],\n        mode: AnkiExportMode,\n        ankiConnectUrl?: string\n    ) {\n        const fields = {};\n\n        this._appendField(fields, this.settingsProvider.sentenceField, text, true);\n        this._appendField(fields, this.settingsProvider.definitionField, definition, true);\n        this._appendField(fields, this.settingsProvider.wordField, word, false);\n        this._appendField(fields, this.settingsProvider.sourceField, source, false);\n        this._appendField(fields, this.settingsProvider.urlField, url, false);\n\n        if (customFieldValues) {\n            for (const customFieldName of Object.keys(customFieldValues)) {\n                this._appendField(\n                    fields,\n                    this.settingsProvider.customAnkiFields[customFieldName],\n                    customFieldValues[customFieldName],\n                    true\n                );\n            }\n        }\n\n        const params: any = {\n            note: {\n                deckName: this.settingsProvider.deck,\n                modelName: this.settingsProvider.noteType,\n                tags: tags,\n                options: {\n                    allowDuplicate: false,\n                    duplicateScope: 'deck',\n                    duplicateScopeOptions: {\n                        deckName: this.settingsProvider.deck,\n                        checkChildren: false,\n                    },\n                },\n            },\n        };\n\n        const gui = mode === 'gui';\n        const updateLast = mode === 'updateLast';\n\n        if (this.settingsProvider.audioField && audioClip) {\n            const sanitizedName = this._sanitizeFileName(audioClip.name);\n\n            if (gui || updateLast) {\n                const fileName = (await this._storeMediaFile(sanitizedName, await audioClip.base64(), ankiConnectUrl))\n                    .result;\n                this._appendField(fields, this.settingsProvider.audioField, `[sound:${fileName}]`, false);\n            } else {\n                params.note['audio'] = {\n                    filename: sanitizedName,\n                    data: await audioClip.base64(),\n                    fields: [this.settingsProvider.audioField],\n                };\n            }\n        }\n\n        if (this.settingsProvider.imageField && image) {\n            const sanitizedName = this._sanitizeFileName(image.name);\n\n            if (gui || updateLast) {\n                const fileName = (await this._storeMediaFile(sanitizedName, await image.base64(), ankiConnectUrl))\n                    .result;\n                this._appendField(\n                    fields,\n                    this.settingsProvider.imageField,\n                    `<div><img src=\"${fileName}\"></div>`,\n                    false\n                );\n            } else {\n                params.note['picture'] = {\n                    filename: sanitizedName,\n                    data: await image.base64(),\n                    fields: [this.settingsProvider.imageField],\n                };\n            }\n        }\n\n        params.note['fields'] = fields;\n\n        switch (mode) {\n            case 'gui':\n                return (await this._executeAction('guiAddCards', params, ankiConnectUrl)).result;\n            case 'updateLast':\n                const recentNotes = (\n                    await this._executeAction('findNotes', { query: 'added:1' }, ankiConnectUrl)\n                ).result.sort();\n\n                if (recentNotes.length === 0) {\n                    throw new Error('Could not find note to update');\n                }\n\n                const lastNoteId = recentNotes[recentNotes.length - 1];\n                params.note['id'] = lastNoteId;\n                const infoResponse = await this._executeAction('notesInfo', { notes: [lastNoteId] });\n\n                if (infoResponse.result.length > 0 && infoResponse.result[0].noteId === lastNoteId) {\n                    const info = infoResponse.result[0];\n\n                    if (\n                        this.settingsProvider.sentenceField &&\n                        info.fields &&\n                        typeof info.fields[this.settingsProvider.sentenceField]?.value === 'string' &&\n                        typeof params.note.fields[this.settingsProvider.sentenceField] === 'string'\n                    ) {\n                        params.note.fields[this.settingsProvider.sentenceField] = this._inheritHtmlMarkup(\n                            params.note.fields[this.settingsProvider.sentenceField],\n                            info.fields[this.settingsProvider.sentenceField].value\n                        );\n                    }\n\n                    await this._executeAction('updateNoteFields', params, ankiConnectUrl);\n\n                    if (!this.settingsProvider.wordField || !info.fields) {\n                        return info.noteId;\n                    }\n\n                    const wordField = info.fields[this.settingsProvider.wordField];\n\n                    if (!wordField || !wordField.value) {\n                        return info.noteId;\n                    }\n\n                    return wordField.value;\n                }\n\n                throw new Error('Could not update last card because the card info could not be fetched');\n            case 'default':\n                return (await this._executeAction('addNote', params, ankiConnectUrl)).result;\n            default:\n                throw new Error('Unknown export mode: ' + mode);\n        }\n    }\n\n    private _appendField(fields: any, fieldName: string | undefined, value: string | undefined, multiline: boolean) {\n        if (!fieldName || !value) {\n            return;\n        }\n\n        let newValue = multiline ? value.split('\\n').join('<br>') : value;\n        const existingValue = fields[fieldName];\n\n        if (existingValue) {\n            newValue = existingValue + '<br>' + newValue;\n        }\n\n        fields[fieldName] = newValue;\n    }\n\n    private _sanitizeFileName(name: string) {\n        return sanitize(name, { replacement: '_' });\n    }\n\n    private _inheritHtmlMarkup(original: string, markedUp: string) {\n        const htmlTagRegex = RegExp('<[^>]*>(.*?)</[^>]*>', 'ig');\n        const markedUpWithoutBreaklines = markedUp.replace('<br>', '');\n        let inherited = original;\n\n        while (true) {\n            const match = htmlTagRegex.exec(markedUpWithoutBreaklines);\n\n            if (match === null || match.length < 2) {\n                break;\n            }\n\n            inherited = inherited.replace(match[1], match[0]);\n        }\n\n        return inherited;\n    }\n\n    private async _storeMediaFile(name: string, base64: string, ankiConnectUrl?: string) {\n        return this._executeAction('storeMediaFile', { filename: name, data: base64 }, ankiConnectUrl);\n    }\n\n    private async _executeAction(action: string, params: any, ankiConnectUrl?: string) {\n        const body: any = {\n            action: action,\n            version: 6,\n        };\n\n        if (params) {\n            body['params'] = params;\n        }\n\n        const json = await this.fetcher.fetch(ankiConnectUrl || this.settingsProvider.ankiConnectUrl, body);\n\n        if (json.error) {\n            throw new Error(json.error);\n        }\n\n        return json;\n    }\n}\n","import IntervalTree, { Interval, NumericTuple } from '@flatten-js/interval-tree';\nimport { SubtitleModel } from './Model';\n\nexport interface SubtitleSlice<T> {\n    showing: T[];\n    lastShown?: T[];\n    nextToShow?: T[];\n    startedShowing?: T;\n    willStopShowing?: T;\n}\n\nexport interface SubtitleCollectionOptions {\n    returnLastShown?: boolean;\n    returnNextToShow?: boolean;\n    showingCheckRadiusMs?: number;\n}\n\nexport class SubtitleCollection<T extends SubtitleModel> {\n    static emptySubtitleCollection = new SubtitleCollection([]);\n\n    // Tree for subtitles\n    private readonly tree: IntervalTree<T>;\n    // Tree for gaps between subtitles. The gaps are populated with the last subtitle before the gap.\n    private readonly gapsTree?: IntervalTree<T>;\n    private readonly options: SubtitleCollectionOptions;\n\n    constructor(subtitles: T[], options: SubtitleCollectionOptions = {}) {\n        this.tree = new IntervalTree<T>();\n        this.options = options;\n\n        if (options.returnLastShown || options.returnNextToShow) {\n            let last: T | undefined;\n            this.gapsTree = new IntervalTree<T>();\n\n            if (subtitles.length > 0 && subtitles[0].start > 0) {\n                this.gapsTree.insert([0, subtitles[0].start - 1], subtitles[0]);\n            }\n\n            for (const s of subtitles) {\n                this.tree.insert([s.start, s.end], s);\n\n                if (last !== undefined && last.end < s.start) {\n                    this.gapsTree.insert([last.end + 1, s.start - 1], last);\n                }\n\n                last = s;\n            }\n        } else {\n            for (const s of subtitles) {\n                this.tree.insert([s.start, s.end], s);\n            }\n        }\n    }\n\n    static empty<S extends SubtitleModel>() {\n        return SubtitleCollection.emptySubtitleCollection as SubtitleCollection<S>;\n    }\n\n    subtitlesAt(timestamp: number): SubtitleSlice<T> {\n        const interval: NumericTuple = [timestamp, timestamp];\n        const showing = this.tree.search(interval) as T[];\n        let lastShown: T[] | undefined;\n        let nextToShow: T[] | undefined;\n        let startedShowing: T | undefined;\n        let willStopShowing: T | undefined;\n\n        if (showing.length === 0) {\n            if (this.gapsTree !== undefined) {\n                // One of returnLastShown or returnNextToShow is true due to constructor\n                const gapIntervals: Interval[] = [];\n                lastShown = this.gapsTree.search(interval, (s, i) => {\n                    gapIntervals.push(i);\n                    return s;\n                }) as T[];\n\n                if (lastShown.length > 0 && this.options.returnNextToShow) {\n                    const nextStart = gapIntervals[0].high + 1;\n                    nextToShow = this.tree.search([nextStart, nextStart]) as T[];\n                }\n            }\n        } else if (this.options.showingCheckRadiusMs !== undefined) {\n            for (const s of showing) {\n                if (willStopShowing === undefined && s.end < timestamp + this.options.showingCheckRadiusMs) {\n                    willStopShowing = s;\n                }\n\n                if (startedShowing === undefined && timestamp - this.options.showingCheckRadiusMs < s.start) {\n                    startedShowing = s;\n                }\n\n                if (startedShowing !== undefined && willStopShowing !== undefined) {\n                    break;\n                }\n            }\n        }\n\n        return { showing, lastShown, nextToShow, startedShowing, willStopShowing };\n    }\n}\n","import { SubtitleModel } from './Model';\n\nexport default class AutoPauseContext {\n    private lastStartedShowing?: SubtitleModel;\n    private lastWillStopShowing?: SubtitleModel;\n\n    onStartedShowing?: () => void;\n    onWillStopShowing?: () => void;\n    onNextToShow?: (subtitle: SubtitleModel) => void;\n\n    willStopShowing(subtitle: SubtitleModel) {\n        if (subtitle.end === this.lastWillStopShowing?.end) {\n            return;\n        }\n\n        this.onWillStopShowing?.();\n        this.lastWillStopShowing = subtitle;\n    }\n\n    startedShowing(subtitle: SubtitleModel) {\n        if (subtitle.start === this.lastStartedShowing?.start) {\n            return;\n        }\n\n        this.onStartedShowing?.();\n        this.lastStartedShowing = subtitle;\n    }\n\n    clear() {\n        this.lastStartedShowing = undefined;\n        this.lastWillStopShowing = undefined;\n    }\n}\n","import { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport MuiAlert, { Color } from '@material-ui/lab/Alert';\nimport Grow from '@material-ui/core/Grow';\n\nconst useAlertStyles = makeStyles({\n    root: {\n        display: 'flex',\n        justifyContent: 'center',\n        position: 'fixed',\n        top: 80,\n        width: '100%',\n        pointerEvents: 'none',\n        zIndex: 2000,\n    },\n});\n\ninterface Props {\n    open: boolean;\n    autoHideDuration: number;\n    onClose: () => void;\n    severity: Color | undefined;\n    children: React.ReactNode\n}\n\nexport default function Alert(props: Props) {\n    const classes = useAlertStyles();\n\n    useEffect(() => {\n        if (props.open) {\n            const timeout = setTimeout(props.onClose, props.autoHideDuration);\n            return () => clearTimeout(timeout);\n        }\n    }, [props.open, props.autoHideDuration, props.onClose]);\n\n    return (\n        <div className={classes.root}>\n            <Grow in={props.open}>\n                <MuiAlert severity={props.severity}>{props.children}</MuiAlert>\n            </Grow>\n        </div>\n    );\n}\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport { TextField, TextFieldProps } from \"@material-ui/core\";\n\nfunction extractTagsFromString(value: string) {\n    const splitTags = value.split(' ').join('').split(',');\n    const tags = [];\n\n    for (const tag of splitTags) {\n        tags.push(tag.trim());\n    }\n\n    return tags;\n}\n\nexport interface Props {\n    tags: string[];\n    onTagsChange: (tags: string[]) => void;\n}\n\nexport default function TagsTextField({tags, onTagsChange, ...props}: Props & TextFieldProps) {\n    const [value, setValue] = useState('');\n\n    useEffect(() => {\n        const tagsString = tags.join(', ');\n\n        if (tagsString !== value) {\n            setValue(tags.join(', '));\n        }\n    }, [value, tags]);\n\n    const handleChange = useCallback((e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        let currentValue = e.target.value;\n\n        if (\n            value.length > currentValue.length &&\n            value.includes(currentValue) &&\n            currentValue.endsWith(',')\n        ) {\n            // Detected a backspace at the last comma, move cursor back enough to remove the comma\n            currentValue = currentValue.substring(0, currentValue.length - 1);\n        }\n\n        // Decompose string into individual tags by removing all spaces and splitting on \",\"\n        const newTags = extractTagsFromString(currentValue);\n        setValue(newTags.join(', '));\n        onTagsChange(newTags);\n    }, [value, onTagsChange]);\n\n    return (\n        <TextField\n            {...props}\n            value={value}\n            onChange={handleChange}\n        />\n    );\n}\n","import React, { useEffect, useState, useLayoutEffect } from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport Card from '@material-ui/core/Card';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Dialog from '@material-ui/core/Dialog';\nimport { Image as CommonImage } from '@project/common';\n\ninterface ImageDimensions {\n    width: number;\n    height: number;\n}\n\nconst useStyles = makeStyles((theme) => ({\n    image: ({ width, height }: ImageDimensions) => ({\n        width: width,\n        height: height,\n        backgroundSize: 'contain',\n    }),\n}));\n\n// https://stackoverflow.com/questions/19014250/rerender-view-on-browser-resize-with-react\nfunction useWindowSize() {\n    const [size, setSize] = useState([0, 0]);\n\n    useLayoutEffect(() => {\n        function updateSize() {\n            setSize([window.innerWidth, window.innerHeight]);\n        }\n\n        window.addEventListener('resize', updateSize);\n        updateSize();\n\n        return () => window.removeEventListener('resize', updateSize);\n    }, []);\n\n    return size;\n}\n\ninterface Props {\n    open: boolean;\n    image?: CommonImage;\n    onClose: () => void;\n}\n\nexport default function ImageDialog({ open, image, onClose }: Props) {\n    const [dataUrl, setDataUrl] = useState<string>();\n    const [width, setWidth] = useState<number>(0);\n    const [height, setHeight] = useState<number>(0);\n    const [windowWidth, windowHeight] = useWindowSize();\n\n    let resizeRatio;\n\n    if (width > 0 && height > 0) {\n        resizeRatio = Math.min(1, Math.min(windowWidth / (2 * width), windowHeight / (2 * height)));\n    } else {\n        resizeRatio = 1;\n    }\n\n    const classes = useStyles({ width: width * resizeRatio, height: height * resizeRatio });\n\n    useEffect(() => {\n        setDataUrl(undefined);\n        async function fetchImage() {\n            if (!image) {\n                return;\n            }\n\n            const dataUrl = await image.dataUrl();\n            const img = new Image();\n            img.onload = () => {\n                setWidth(img.width);\n                setHeight(img.height);\n                setDataUrl(dataUrl);\n            };\n            img.src = dataUrl;\n        }\n\n        fetchImage();\n    }, [image]);\n\n    if (!image || !dataUrl) {\n        return null;\n    }\n\n    return (\n        <Dialog open={open} onClose={onClose} maxWidth=\"lg\">\n            <Card>\n                <CardMedia\n                    className={classes.image}\n                    image={dataUrl}\n                    title={image.name}\n                    style={{ width: width * resizeRatio, height: height * resizeRatio }}\n                />\n            </Card>\n        </Dialog>\n    );\n}\n","import React from 'react';\nimport { SubtitleModel } from '../..';\n\ninterface Props {\n    subtitle: SubtitleModel;\n    availableWidth: number;\n    scale: number;\n}\n\nexport default function SubtitleTextImage({ subtitle, availableWidth, scale }: Props) {\n    if (subtitle.textImage === undefined) {\n        return null;\n    }\n\n    const imageScale = (scale * availableWidth) / subtitle.textImage.screen.width;\n    const width = imageScale * subtitle.textImage.image.width;\n\n    return (\n        <div style={{ maxWidth: width }}>\n            <img style={{ width: '100%' }} alt=\"subtitle\" src={subtitle.textImage.dataUrl} />\n        </div>\n    );\n}\n","import React, { MutableRefObject, useCallback, useState, useEffect } from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport {\n    Anki,\n    AnkiDialogSliderContext,\n    AudioClip,\n    Image,\n    humanReadableTime,\n    AnkiSettings,\n    SubtitleModel,\n    surroundingSubtitles,\n} from '@project/common';\nimport Button from '@material-ui/core/Button';\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DoneIcon from '@material-ui/icons/Done';\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Paper from '@material-ui/core/Paper';\nimport RestoreIcon from '@material-ui/icons/Restore';\nimport SearchIcon from '@material-ui/icons/Search';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport Slider, { Mark } from '@material-ui/core/Slider';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport ZoomInIcon from '@material-ui/icons/ZoomIn';\nimport ZoomOutIcon from '@material-ui/icons/ZoomOut';\nimport SubtitleTextImage from './SubtitleTextImage';\nimport TagsTextField from './TagsTextField';\nimport { AnkiExportMode } from '@project/common';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& .MuiTextField-root': {\n            marginBottom: theme.spacing(1),\n        },\n    },\n    title: {\n        flexGrow: 1,\n    },\n    mediaField: {\n        cursor: 'pointer',\n        '& input': {\n            cursor: 'pointer',\n        },\n    },\n    rangeSelectSlider: {\n        '& .MuiSlider-markLabel': {\n            transform: 'translateX(-3%)',\n        },\n    },\n}));\n\nconst boundaryIntervalSubtitleCountRadius = 1;\nconst boundaryIntervalSubtitleTimeRadius = 5000;\n\nfunction boundaryIntervalFromSliderContext(sliderContext: AnkiDialogSliderContext) {\n    let index = sliderContext.subtitles.findIndex((s) => s.start === sliderContext.subtitleStart);\n    index = index === -1 ? sliderContext.subtitles.length / 2 : index;\n\n    const subtitlesToDisplay = surroundingSubtitles(\n        sliderContext.subtitles,\n        index,\n        boundaryIntervalSubtitleCountRadius,\n        boundaryIntervalSubtitleTimeRadius\n    );\n\n    let min = null;\n    let max = null;\n\n    for (const s of subtitlesToDisplay) {\n        if (min === null || s.start < min) {\n            min = s.start;\n        }\n\n        if (max === null || s.end > max) {\n            max = s.end;\n        }\n    }\n\n    return min !== null && max !== null && [min, max];\n}\n\nfunction sliderMarksFromSliderContext(sliderContext: AnkiDialogSliderContext, boundary: number[]): Mark[] {\n    const seenTimestamps: any = {};\n\n    return sliderContext.subtitles\n        .filter((s) => s.text.trim() !== '' || s.textImage !== undefined)\n        .map((s) => {\n            if (s.start in seenTimestamps) {\n                return null;\n            }\n\n            seenTimestamps[s.start] = true;\n\n            return {\n                value: s.start,\n                label: `${s.text.trim().substring(0, Math.min(s.text.length, 3))}...`,\n            };\n        })\n        .filter((mark: Mark | null) => mark !== null)\n        .filter((mark: Mark | null) => mark!.value >= boundary[0] && mark!.value <= boundary[1]) as Mark[];\n}\n\nfunction sliderValueLabelFormat(ms: number) {\n    return humanReadableTime(ms, true);\n}\n\nfunction subtitleIntersectsTimeInterval(subtitle: SubtitleModel, interval: number[]) {\n    const length = Math.max(0, subtitle.end - subtitle.start);\n\n    if (length === 0) {\n        return false;\n    }\n\n    const overlapStart = Math.max(subtitle.start, interval[0]);\n    const overlapEnd = Math.min(subtitle.end, interval[1]);\n\n    return overlapEnd - overlapStart >= length / 2;\n}\n\ninterface ValueLabelComponentProps {\n    children: React.ReactElement;\n    open: boolean;\n    value: number;\n}\n\nfunction ValueLabelComponent({ children, open, value }: ValueLabelComponentProps) {\n    return (\n        <Tooltip open={open} enterTouchDelay={0} placement=\"top\" title={value}>\n            {children}\n        </Tooltip>\n    );\n}\n\ninterface TextImageSetProps {\n    selectedSubtitles: SubtitleModel[];\n    width: number;\n}\n\nconst useTextImageSetStyles = makeStyles((theme) => ({\n    root: {\n        marginBottom: theme.spacing(1),\n        padding: theme.spacing(1),\n        backgroundColor: theme.palette.action.disabledBackground,\n    },\n}));\n\nfunction TextImageSet({ selectedSubtitles, width }: TextImageSetProps) {\n    const classes = useTextImageSetStyles();\n\n    if (selectedSubtitles.length === 0 || width <= 0) {\n        return null;\n    }\n\n    return (\n        <Paper elevation={0} className={classes.root}>\n            {selectedSubtitles.map((s, index) => {\n                return <SubtitleTextImage key={index} availableWidth={width} subtitle={s} scale={1} />;\n            })}\n        </Paper>\n    );\n}\n\nconst TextFieldEndAdornment = withStyles({\n    // Hack to recenter TextField end adornment\n    root: {\n        transform: 'translateY(-8px)',\n    },\n})(InputAdornment);\n\nexport interface AnkiDialogState {\n    text: string;\n    sliderContext?: AnkiDialogSliderContext;\n    definition: string;\n    word: string;\n    source: string;\n    url: string;\n    customFieldValues: { [key: string]: string };\n    lastAppliedTimestampIntervalToText?: number[];\n    lastAppliedTimestampIntervalToAudio?: number[];\n    initialTimestampInterval?: number[];\n    timestampBoundaryInterval?: number[];\n    timestampInterval?: number[];\n}\n\ninterface AnkiDialogProps {\n    open: boolean;\n    disabled: boolean;\n    text?: string;\n    onProceed: (\n        text: string,\n        definition: string,\n        audioClip: AudioClip | undefined,\n        image: Image | undefined,\n        word: string,\n        source: string,\n        url: string,\n        customFieldValues: { [key: string]: string },\n        tags: string[],\n        mode: AnkiExportMode\n    ) => void;\n    onRerecord?: () => void;\n    onRewind: () => void;\n    onCancel: () => void;\n    onViewImage: (image: Image) => void;\n    onOpenSettings?: () => void;\n    audioClip?: AudioClip;\n    image?: Image;\n    source?: string;\n    url?: string;\n    sliderContext?: AnkiDialogSliderContext;\n    settingsProvider: AnkiSettings;\n    anki: Anki;\n    definition?: string;\n    word?: string;\n    customFields: { [key: string]: string };\n    customFieldValues?: { [key: string]: string };\n    initialTimestampInterval?: number[];\n    timestampBoundaryInterval?: number[];\n    timestampInterval?: number[];\n    lastAppliedTimestampIntervalToText?: number[];\n    lastAppliedTimestampIntervalToAudio?: number[];\n    stateRef?: MutableRefObject<AnkiDialogState | undefined>;\n}\n\nexport function AnkiDialog({\n    open,\n    disabled,\n    text: initialText,\n    onProceed,\n    onRewind,\n    onCancel,\n    onViewImage,\n    onOpenSettings,\n    onRerecord,\n    audioClip: initialAudioClip,\n    image,\n    source: initialSource,\n    url: initialUrl,\n    sliderContext,\n    customFields,\n    settingsProvider,\n    anki,\n    definition: initialDefinition,\n    word: initialWord,\n    customFieldValues: initialCustomFieldValues,\n    timestampInterval: initialSelectedTimestampInterval,\n    timestampBoundaryInterval: forceTimestampBoundaryInterval,\n    initialTimestampInterval: forceInitialTimestampInterval,\n    lastAppliedTimestampIntervalToText: initialLastAppliedTimestampIntervalToText,\n    lastAppliedTimestampIntervalToAudio: initialLastAppliedTimestampIntervalToAudio,\n    stateRef,\n}: AnkiDialogProps) {\n    const classes = useStyles();\n    const [definition, setDefinition] = useState<string>('');\n    const [text, setText] = useState<string>('');\n    const [word, setWord] = useState<string>('');\n    const [lastSearchedWord, setLastSearchedWord] = useState<string>();\n    const [source, setSource] = useState<string>(initialSource ?? '');\n    const [tags, setTags] = useState<string[]>(settingsProvider.tags);\n    const [url, setUrl] = useState<string>(initialUrl ?? '');\n    const [duplicateNotes, setDuplicateNotes] = useState<any[]>([]);\n    const [wordTimestamp, setWordTimestamp] = useState<number>(0);\n    const [customFieldValues, setCustomFieldValues] = useState<{ [key: string]: string }>({});\n    const [timestampInterval, setTimestampInterval] = useState<number[]>();\n    const [selectedSubtitles, setSelectedSubtitles] = useState<SubtitleModel[]>([]);\n    const [initialTimestampInterval, setInitialTimestampInterval] = useState<number[]>();\n    const [initialTimestampBoundaryInterval, setInitialTimestampBoundaryInterval] = useState<number[]>();\n    const [timestampBoundaryInterval, setTimestampBoundaryInterval] = useState<number[]>();\n    const [timestampMarks, setTimestampMarks] = useState<Mark[]>();\n    const [lastAppliedTimestampIntervalToText, setLastAppliedTimestampIntervalToText] = useState<number[]>();\n    const [lastAppliedTimestampIntervalToAudio, setLastAppliedTimestampIntervalToAudio] = useState<number[]>();\n    const [width, setWidth] = useState<number>(0);\n    const [audioClip, setAudioClip] = useState<AudioClip>();\n    const dialogRefCallback = useCallback((element: HTMLElement) => {\n        setWidth(element?.getBoundingClientRect().width ?? 0);\n    }, []);\n\n    if (stateRef) {\n        stateRef.current = {\n            text,\n            sliderContext,\n            definition,\n            word,\n            source,\n            url,\n            customFieldValues,\n            initialTimestampInterval,\n            timestampBoundaryInterval,\n            lastAppliedTimestampIntervalToText,\n            lastAppliedTimestampIntervalToAudio,\n            timestampInterval,\n        };\n    }\n\n    const textForTimestampInterval = useCallback(\n        (timestampInterval: number[]) => {\n            return sliderContext!.subtitles\n                .filter((s) => subtitleIntersectsTimeInterval(s, timestampInterval))\n                .filter((s) => s.text.trim() !== '')\n                .map((s) => s.text)\n                .join('\\n');\n        },\n        [sliderContext]\n    );\n\n    useEffect(() => {\n        setText(initialText ?? '');\n        setDefinition(initialDefinition ?? '');\n        setWord(initialWord ?? '');\n        setSource(initialSource ?? '');\n        setUrl(initialUrl ?? '');\n        setDuplicateNotes([]);\n        setCustomFieldValues(initialCustomFieldValues ?? {});\n    }, [initialText, initialSource, initialDefinition, initialWord, initialCustomFieldValues, initialUrl]);\n\n    useEffect(() => {\n        setTags(settingsProvider.tags);\n    }, [settingsProvider.tags]);\n\n    useEffect(() => {\n        const timestampInterval =\n            initialSelectedTimestampInterval ||\n            (sliderContext && [sliderContext.subtitleStart, sliderContext.subtitleEnd]) ||\n            undefined;\n        const timestampBoundaryInterval =\n            (sliderContext && boundaryIntervalFromSliderContext(sliderContext)) || undefined;\n        const timestampMarks =\n            (sliderContext && sliderMarksFromSliderContext(sliderContext, timestampBoundaryInterval!)) || undefined;\n        const selectedSubtitles =\n            sliderContext === undefined || timestampInterval === undefined\n                ? []\n                : sliderContext.subtitles.filter((s) => subtitleIntersectsTimeInterval(s, timestampInterval));\n        setText(\n            initialText ??\n                selectedSubtitles\n                    .filter((s) => s.text.trim() !== '')\n                    .map((s) => s.text)\n                    .join('\\n')\n        );\n        setTimestampInterval(timestampInterval);\n        setSelectedSubtitles(selectedSubtitles);\n        setInitialTimestampInterval(forceInitialTimestampInterval || timestampInterval);\n        setLastAppliedTimestampIntervalToText(initialLastAppliedTimestampIntervalToText || timestampInterval);\n        setLastAppliedTimestampIntervalToAudio(initialLastAppliedTimestampIntervalToAudio || timestampInterval);\n        setTimestampBoundaryInterval(forceTimestampBoundaryInterval ?? timestampBoundaryInterval);\n        setInitialTimestampBoundaryInterval(timestampBoundaryInterval);\n        setTimestampMarks(timestampMarks);\n    }, [\n        sliderContext,\n        forceInitialTimestampInterval,\n        initialSelectedTimestampInterval,\n        forceTimestampBoundaryInterval,\n        initialLastAppliedTimestampIntervalToText,\n        initialLastAppliedTimestampIntervalToAudio,\n    ]);\n\n    useEffect(() => {\n        if (!initialAudioClip) {\n            setAudioClip(undefined);\n            return;\n        }\n\n        let newAudioClip = initialAudioClip;\n\n        if (settingsProvider.preferMp3) {\n            newAudioClip = newAudioClip.toMp3();\n        }\n\n        if (lastAppliedTimestampIntervalToAudio) {\n            newAudioClip = newAudioClip.slice(\n                Math.max(0, Math.round(lastAppliedTimestampIntervalToAudio[0]) - settingsProvider.audioPaddingStart),\n                Math.round(lastAppliedTimestampIntervalToAudio[1]) + settingsProvider.audioPaddingEnd\n            );\n        }\n\n        setAudioClip(newAudioClip);\n    }, [\n        initialAudioClip,\n        settingsProvider.preferMp3,\n        lastAppliedTimestampIntervalToAudio,\n        settingsProvider.audioPaddingStart,\n        settingsProvider.audioPaddingEnd,\n    ]);\n\n    useEffect(() => {\n        setWordTimestamp(Date.now());\n    }, [word]);\n\n    useEffect(() => {\n        if (!word || !settingsProvider.wordField) {\n            return;\n        }\n\n        const trimmedWord = word.trim();\n\n        if (trimmedWord === '' || trimmedWord === lastSearchedWord) {\n            return;\n        }\n\n        const timeout = setTimeout(async () => {\n            try {\n                setDuplicateNotes(await anki.findNotesWithWord(trimmedWord));\n                setLastSearchedWord(trimmedWord);\n            } catch (e) {\n                console.error(e);\n            }\n        }, 500);\n\n        return () => clearTimeout(timeout);\n    }, [word, wordTimestamp, lastSearchedWord, anki, settingsProvider.wordField]);\n\n    const handlePlayAudio = useCallback(\n        (e: React.MouseEvent<HTMLDivElement>) => {\n            e.preventDefault();\n            e.stopPropagation();\n            audioClip!.play();\n        },\n        [audioClip]\n    );\n\n    const handleCustomFieldChange = useCallback(\n        (customFieldName: string, value: string) => {\n            const newCustomFieldValues: { [fieldName: string]: string } = {};\n            Object.assign(newCustomFieldValues, customFieldValues);\n            newCustomFieldValues[customFieldName] = value;\n            setCustomFieldValues(newCustomFieldValues);\n        },\n        [customFieldValues]\n    );\n\n    let wordHelperText;\n\n    if (word && word.trim() === lastSearchedWord && settingsProvider.wordField) {\n        wordHelperText =\n            duplicateNotes.length > 0\n                ? `Found ${duplicateNotes.length} notes with word \"${word}\" in field \"${settingsProvider.wordField}\"`\n                : `No notes found with word \"${word.trim()}\" in field \"${settingsProvider.wordField}\"`;\n    } else {\n        wordHelperText = '';\n    }\n\n    const handleViewImage = useCallback(\n        (e: React.MouseEvent<HTMLDivElement>) => {\n            e.preventDefault();\n            e.stopPropagation();\n            onViewImage(image!);\n        },\n        [image, onViewImage]\n    );\n\n    const handleApplyTimestampIntervalToText = useCallback(() => {\n        if (timestampInterval === undefined) {\n            return;\n        }\n\n        const newText = textForTimestampInterval(timestampInterval);\n        setText(newText);\n        setLastAppliedTimestampIntervalToText(timestampInterval);\n    }, [textForTimestampInterval, timestampInterval]);\n\n    const handleTimestampIntervalChange = useCallback(\n        (e: React.ChangeEvent<{}>, newValue: number | number[]) => {\n            const newTimestampInterval = newValue as number[];\n            setTimestampInterval(newTimestampInterval);\n            const selectedSubtitles = sliderContext!.subtitles.filter((s) =>\n                subtitleIntersectsTimeInterval(s, newTimestampInterval)\n            );\n            setSelectedSubtitles(selectedSubtitles);\n\n            if (lastAppliedTimestampIntervalToText !== undefined) {\n                const expectedUnchangedText = textForTimestampInterval(lastAppliedTimestampIntervalToText);\n\n                if (text.trim() === expectedUnchangedText.trim()) {\n                    const newText = textForTimestampInterval(newTimestampInterval);\n                    setText(newText);\n                    setLastAppliedTimestampIntervalToText(newTimestampInterval);\n                }\n            }\n\n            if (onRerecord === undefined && audioClip?.isSliceable() === true) {\n                setLastAppliedTimestampIntervalToAudio(newTimestampInterval);\n            }\n        },\n        [sliderContext, text, lastAppliedTimestampIntervalToText, textForTimestampInterval]\n    );\n\n    const handleApplyTimestampIntervalToAudio = useCallback(\n        (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n            if (onRerecord) {\n                e.stopPropagation();\n                onRerecord();\n            } else {\n                setLastAppliedTimestampIntervalToAudio(timestampInterval);\n            }\n        },\n        [onRerecord, timestampInterval]\n    );\n\n    const handleResetTimestampInterval = useCallback(() => {\n        if (!initialTimestampBoundaryInterval) {\n            return;\n        }\n\n        const selectedSubtitles =\n            sliderContext === undefined || initialTimestampInterval === undefined\n                ? []\n                : sliderContext.subtitles.filter((s) => subtitleIntersectsTimeInterval(s, initialTimestampInterval));\n        setSelectedSubtitles(selectedSubtitles);\n        setTimestampInterval(initialTimestampInterval);\n        setTimestampBoundaryInterval(initialTimestampBoundaryInterval);\n        setTimestampMarks(\n            sliderContext && sliderMarksFromSliderContext(sliderContext, initialTimestampBoundaryInterval)\n        );\n    }, [initialTimestampInterval, initialTimestampBoundaryInterval, sliderContext]);\n\n    const handleZoomInTimestampInterval = useCallback(() => {\n        if (!timestampBoundaryInterval || !timestampInterval) {\n            return;\n        }\n\n        const newMin = (timestampBoundaryInterval[0] + timestampInterval[0]) / 2;\n        const newMax = (timestampBoundaryInterval[1] + timestampInterval[1]) / 2;\n        const newTimestampBoundaryInterval = [newMin, newMax];\n        setTimestampBoundaryInterval(newTimestampBoundaryInterval);\n        setTimestampMarks(sliderContext && sliderMarksFromSliderContext(sliderContext, newTimestampBoundaryInterval));\n    }, [timestampBoundaryInterval, timestampInterval, sliderContext]);\n\n    const handleZoomOutTimestampInterval = useCallback(() => {\n        if (!timestampBoundaryInterval || !timestampInterval) {\n            return;\n        }\n\n        const newMin = Math.max(0, 2 * timestampBoundaryInterval[0] - timestampInterval[0]);\n        const newMax = 2 * timestampBoundaryInterval[1] - timestampInterval[1];\n        const newTimestampBoundaryInterval = [newMin, newMax];\n        setTimestampBoundaryInterval(newTimestampBoundaryInterval);\n        setTimestampMarks(sliderContext && sliderMarksFromSliderContext(sliderContext, newTimestampBoundaryInterval));\n    }, [timestampBoundaryInterval, timestampInterval, sliderContext]);\n\n    const handleCopyImageToClipboard = useCallback(\n        async (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n            e.stopPropagation();\n\n            if (!image) {\n                return;\n            }\n\n            navigator.clipboard.write([new ClipboardItem({ 'image/png': await image.pngBlob() })]);\n        },\n        [image]\n    );\n\n    const disableApplyTextSelection =\n        !sliderContext || sliderContext.subtitles.filter((s) => s.text.trim() !== '').length === 0;\n\n    let audioActionElement: JSX.Element | undefined = undefined;\n\n    if (onRerecord !== undefined) {\n        audioActionElement = (\n            <Tooltip title=\"Apply Selection (rerecord)\">\n                <span>\n                    <IconButton\n                        disabled={\n                            !timestampInterval ||\n                            !lastAppliedTimestampIntervalToAudio ||\n                            (timestampInterval[0] === lastAppliedTimestampIntervalToAudio[0] &&\n                                timestampInterval[1] === lastAppliedTimestampIntervalToAudio[1])\n                        }\n                        onClick={handleApplyTimestampIntervalToAudio}\n                        edge=\"end\"\n                    >\n                        <FiberManualRecordIcon />\n                    </IconButton>\n                </span>\n            </Tooltip>\n        );\n    }\n\n    return (\n        <Dialog open={open} disableEnforceFocus fullWidth maxWidth=\"sm\" onClose={onCancel}>\n            <Toolbar>\n                <Typography variant=\"h6\" className={classes.title}>\n                    Anki Export\n                </Typography>\n                {onOpenSettings && (\n                    <IconButton edge=\"end\" onClick={() => onOpenSettings()}>\n                        <SettingsIcon />\n                    </IconButton>\n                )}\n            </Toolbar>\n            <DialogContent ref={dialogRefCallback}>\n                <form className={classes.root}>\n                    {sliderContext && timestampInterval && (\n                        <TextImageSet\n                            selectedSubtitles={selectedSubtitles.filter((s) => s.textImage !== undefined)}\n                            width={width}\n                        />\n                    )}\n                    <TextField\n                        variant=\"filled\"\n                        color=\"secondary\"\n                        multiline\n                        fullWidth\n                        maxRows={8}\n                        label=\"Sentence\"\n                        value={text}\n                        onChange={(e) => setText(e.target.value)}\n                        InputProps={{\n                            endAdornment: timestampInterval && (\n                                <TextFieldEndAdornment position=\"end\">\n                                    <Tooltip title=\"Apply Selection\">\n                                        <span>\n                                            <IconButton\n                                                disabled={\n                                                    !timestampInterval ||\n                                                    !lastAppliedTimestampIntervalToText ||\n                                                    (timestampInterval[0] === lastAppliedTimestampIntervalToText[0] &&\n                                                        timestampInterval[1] ===\n                                                            lastAppliedTimestampIntervalToText[1]) ||\n                                                    disableApplyTextSelection\n                                                }\n                                                onClick={handleApplyTimestampIntervalToText}\n                                                edge=\"end\"\n                                            >\n                                                <DoneIcon />\n                                            </IconButton>\n                                        </span>\n                                    </Tooltip>\n                                </TextFieldEndAdornment>\n                            ),\n                        }}\n                    />\n                    <TextField\n                        variant=\"filled\"\n                        color=\"secondary\"\n                        multiline\n                        fullWidth\n                        rows={8}\n                        label=\"Definition\"\n                        value={definition}\n                        onChange={(e) => setDefinition(e.target.value)}\n                    />\n                    <TextField\n                        variant=\"filled\"\n                        color=\"secondary\"\n                        fullWidth\n                        label=\"Word\"\n                        value={word}\n                        onChange={(e) => setWord(e.target.value)}\n                        helperText={wordHelperText}\n                        InputProps={{\n                            endAdornment: (\n                                <InputAdornment position=\"end\">\n                                    <Tooltip title=\"Search in Anki\">\n                                        <span>\n                                            <IconButton\n                                                disabled={\n                                                    disabled ||\n                                                    !settingsProvider.wordField ||\n                                                    !word ||\n                                                    word.trim() === ''\n                                                }\n                                                onClick={() => anki.findNotesWithWordGui(word.trim())}\n                                                edge=\"end\"\n                                            >\n                                                <SearchIcon />\n                                            </IconButton>\n                                        </span>\n                                    </Tooltip>\n                                </InputAdornment>\n                            ),\n                        }}\n                    />\n                    {Object.keys(customFields).map((customFieldName) => (\n                        <TextField\n                            key={customFieldName}\n                            variant=\"filled\"\n                            color=\"secondary\"\n                            fullWidth\n                            multiline\n                            maxRows={8}\n                            label={customFieldName}\n                            value={customFieldValues[customFieldName] || ''}\n                            onChange={(e) => handleCustomFieldChange(customFieldName, e.target.value)}\n                        />\n                    ))}\n                    {audioClip && (\n                        <div className={classes.mediaField} onClick={handlePlayAudio}>\n                            <TextField\n                                variant=\"filled\"\n                                color=\"secondary\"\n                                fullWidth\n                                value={audioClip.name}\n                                label=\"Audio\"\n                                helperText={\n                                    onRerecord === undefined &&\n                                    !audioClip.isSliceable() &&\n                                    'Audio clip cannot be updated because it is pre-recorded'\n                                }\n                                InputProps={{\n                                    endAdornment: audioActionElement && timestampInterval && (\n                                        <InputAdornment position=\"end\">{audioActionElement}</InputAdornment>\n                                    ),\n                                }}\n                            />\n                        </div>\n                    )}\n                    {image && (\n                        <div className={classes.mediaField} onClick={handleViewImage}>\n                            <TextField\n                                variant=\"filled\"\n                                color=\"secondary\"\n                                fullWidth\n                                value={image.name}\n                                label=\"Image\"\n                                InputProps={{\n                                    endAdornment: (\n                                        <InputAdornment position=\"end\">\n                                            <Tooltip title=\"Copy to Clipboard\">\n                                                <span>\n                                                    <IconButton onClick={handleCopyImageToClipboard} edge=\"end\">\n                                                        <FileCopyIcon />\n                                                    </IconButton>\n                                                </span>\n                                            </Tooltip>\n                                        </InputAdornment>\n                                    ),\n                                }}\n                            />\n                        </div>\n                    )}\n                    <TextField\n                        variant=\"filled\"\n                        color=\"secondary\"\n                        fullWidth\n                        label=\"Source\"\n                        value={source}\n                        onChange={(e) => setSource(e.target.value)}\n                    />\n                    {initialUrl && (\n                        <TextField\n                            variant=\"filled\"\n                            color=\"secondary\"\n                            fullWidth\n                            label=\"URL\"\n                            value={url}\n                            onChange={(e) => setUrl(e.target.value)}\n                        />\n                    )}\n                    {settingsProvider.tags.length > 0 && (\n                        <TagsTextField\n                            variant=\"filled\"\n                            label=\"Tags\"\n                            helperText=\"Comma-separated list of strings\"\n                            fullWidth\n                            color=\"secondary\"\n                            tags={tags}\n                            onTagsChange={(newTags) => setTags(newTags)}\n                        />\n                    )}\n                    {timestampInterval && timestampBoundaryInterval && timestampMarks && (\n                        <Grid container direction=\"row\">\n                            <Grid item style={{ flexGrow: 1 }}>\n                                <Slider\n                                    ValueLabelComponent={ValueLabelComponent}\n                                    value={timestampInterval}\n                                    valueLabelFormat={sliderValueLabelFormat}\n                                    onChange={handleTimestampIntervalChange}\n                                    min={timestampBoundaryInterval[0]}\n                                    max={timestampBoundaryInterval[1]}\n                                    marks={timestampMarks}\n                                    step={1}\n                                    valueLabelDisplay=\"auto\"\n                                    className={classes.rangeSelectSlider}\n                                    color=\"secondary\"\n                                />\n                            </Grid>\n                            <Grid item>\n                                <Tooltip title=\"Reset\">\n                                    <span>\n                                        <IconButton\n                                            edge=\"end\"\n                                            style={{ marginTop: -8 }}\n                                            onClick={handleResetTimestampInterval}\n                                        >\n                                            <RestoreIcon />\n                                        </IconButton>\n                                    </span>\n                                </Tooltip>\n                            </Grid>\n                            <Grid item>\n                                <Tooltip title=\"Zoom In\">\n                                    <span>\n                                        <IconButton\n                                            edge=\"end\"\n                                            style={{ marginTop: -8 }}\n                                            onClick={handleZoomInTimestampInterval}\n                                        >\n                                            <ZoomInIcon />\n                                        </IconButton>\n                                    </span>\n                                </Tooltip>\n                            </Grid>\n                            <Grid item>\n                                <Tooltip title=\"Zoom Out\">\n                                    <span>\n                                        <IconButton\n                                            edge=\"end\"\n                                            style={{ marginTop: -8 }}\n                                            onClick={handleZoomOutTimestampInterval}\n                                        >\n                                            <ZoomOutIcon />\n                                        </IconButton>\n                                    </span>\n                                </Tooltip>\n                            </Grid>\n                        </Grid>\n                    )}\n                </form>\n            </DialogContent>\n            <DialogActions>\n                <Button disabled={disabled} onClick={() => onCancel()}>\n                    Cancel\n                </Button>\n                {sliderContext && (\n                    <Button disabled={disabled} onClick={() => onRewind()}>\n                        Rewind\n                    </Button>\n                )}\n                <Button\n                    disabled={disabled}\n                    onClick={() =>\n                        onProceed(\n                            text,\n                            definition,\n                            audioClip,\n                            image,\n                            word,\n                            source ?? '',\n                            url ?? '',\n                            customFieldValues,\n                            tags,\n                            'gui'\n                        )\n                    }\n                >\n                    Open in Anki\n                </Button>\n                <Button\n                    disabled={disabled}\n                    onClick={() =>\n                        onProceed(\n                            text,\n                            definition,\n                            audioClip,\n                            image,\n                            word,\n                            source ?? '',\n                            url ?? '',\n                            customFieldValues,\n                            tags,\n                            'updateLast'\n                        )\n                    }\n                >\n                    Update Last Card\n                </Button>\n                <Button\n                    disabled={disabled}\n                    onClick={() =>\n                        onProceed(\n                            text,\n                            definition,\n                            audioClip,\n                            image,\n                            word,\n                            source ?? '',\n                            url ?? '',\n                            customFieldValues,\n                            tags,\n                            'default'\n                        )\n                    }\n                >\n                    Export\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n","export default __webpack_public_path__ + \"static/media/background-colored.cbc50e45.png\";","import { makeStyles } from '@material-ui/styles';\nimport Fade from '@material-ui/core/Fade';\nimport coloredBackground from './background-colored.png';\nimport { Theme } from '@material-ui/core';\n\ninterface StylesProps {\n    dragging: boolean;\n    appBarHidden: boolean;\n}\n\ninterface Props {\n    dragging: boolean;\n    appBarHidden: boolean;\n    loading: boolean;\n}\n\nconst useStyles = makeStyles<Theme, StylesProps>((theme) => ({\n    root: ({ dragging, appBarHidden }) => ({\n        position: 'absolute',\n        height: appBarHidden ? '100%' : 'calc(100% - 64px)',\n        width: '100%',\n        zIndex: 101,\n        pointerEvents: dragging ? 'auto' : 'none',\n    }),\n    transparentBackground: ({ appBarHidden }) => ({\n        '&::before': {\n            content: \"' '\",\n            position: 'absolute',\n            height: appBarHidden ? '100vh' : 'calc(100vh - 64px)',\n            width: '100%',\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            alignItems: 'center',\n            textAlign: 'center',\n            backgroundSize: '300px 300px',\n            backgroundRepeat: 'no-repeat',\n            backgroundPosition: 'center',\n            backgroundImage: `url(${coloredBackground})`,\n            backgroundBlendMode: 'overlay',\n            background: 'rgba(0, 0, 0, .3)',\n            filter: 'drop-shadow(10px 10px 10px rgb(0, 0, 0, .4))',\n        },\n        width: '100%',\n        height: '100%',\n    }),\n}));\n\nexport default function DragOverlay({ dragging, appBarHidden, loading }: Props) {\n    const classes = useStyles({ dragging, appBarHidden });\n\n    return (\n        <div className={classes.root}>\n            <Fade in={dragging || loading}>\n                <div className={classes.transparentBackground} />\n            </Fade>\n        </div>\n    );\n}\n","import { compile as parseAss } from 'ass-compiler';\nimport { Cue, parseSync as parseSrt, Node as SrtNode, stringifySync as writeSrt } from 'subtitle';\nimport { WebVTT } from 'vtt.js';\nimport { XMLParser } from 'fast-xml-parser';\nimport { DisplaySet, parseDisplaySets } from 'pgs-parser';\nimport { SubtitleTextImage } from '@project/common';\n\nconst tagRegex = RegExp('</?([^>]*)>', 'ig');\nconst assNewLineRegex = RegExp(/\\\\[nN]/, 'ig');\nconst helperElement = document.createElement('div');\nconst helperCanvas = document.createElement('canvas');\n\ninterface SubtitleNode {\n    start: number;\n    end: number;\n    text: string;\n    textImage?: SubtitleTextImage;\n    track: number;\n}\n\nexport default class SubtitleReader {\n    private xmlParser?: XMLParser;\n\n    async subtitles(files: File[], flatten?: boolean) {\n        return (await Promise.all(files.map((f, i) => this._subtitles(f, flatten === true ? 0 : i))))\n            .flatMap((nodes) => nodes)\n            .sort((n1, n2) => n1.start - n2.start);\n    }\n\n    async _subtitles(file: File, track: number): Promise<SubtitleNode[]> {\n        if (file.name.endsWith('.srt')) {\n            const nodes = parseSrt(await file.text());\n            return nodes\n                .filter((node) => node.type === 'cue')\n                .map((node) => {\n                    const cue = node.data as Cue;\n                    return {\n                        start: cue.start,\n                        end: cue.end,\n                        text: cue.text.replace(tagRegex, ''),\n                        track: track,\n                    };\n                });\n        }\n\n        if (file.name.endsWith('.vtt') || file.name.endsWith('.nfvtt')) {\n            return new Promise(async (resolve, reject) => {\n                const isFromNetflix = file.name.endsWith('.nfvtt');\n                const parser = new WebVTT.Parser(window, WebVTT.StringDecoder());\n                const cues: any[] = [];\n                parser.oncue = (c: any) => {\n                    c.text = c.text.replace(tagRegex, '');\n\n                    if (isFromNetflix) {\n                        const lines = c.text.split('\\n');\n                        const newLines = [];\n\n                        for (const line of lines) {\n                            newLines.push(this._fixRTL(line));\n                        }\n\n                        c.text = newLines.join('\\n');\n                    }\n                    cues.push(c);\n                };\n                parser.onflush = () =>\n                    resolve(\n                        cues.map((c) => ({\n                            start: Math.floor(c.startTime * 1000),\n                            end: Math.floor(c.endTime * 1000),\n                            text: c.text as string,\n                            track: track,\n                        }))\n                    );\n                parser.parse(await file.text());\n                parser.flush();\n            });\n        }\n\n        if (file.name.endsWith('.ass')) {\n            const nodes = parseAss(await file.text(), {});\n            return nodes.dialogues.map((dialogue) => {\n                return {\n                    start: Math.round(dialogue.start * 1000),\n                    end: Math.round(dialogue.end * 1000),\n                    text: dialogue.slices\n                        .flatMap((slice) => slice.fragments.map((fragment) => fragment.text))\n                        .join('')\n                        .replace(assNewLineRegex, '\\n'),\n                    track: track,\n                };\n            });\n        }\n\n        if (file.name.endsWith('.ytxml')) {\n            const text = await file.text();\n            const xml = this._xmlParser().parse(text);\n\n            if (Object.keys(xml).length === 0) {\n                return [];\n            }\n\n            const textNodes = xml['transcript']['text'];\n            const subtitles = [];\n\n            for (let index = 0, length = textNodes.length; index < length; index++) {\n                const elm = textNodes[index];\n\n                if (!('#text' in elm) || !('@_dur' in elm) || !('@_start' in elm)) {\n                    continue;\n                }\n\n                const start = parseFloat(elm['@_start']);\n\n                subtitles.push({\n                    start: Math.floor(start * 1000),\n                    end: Math.floor((start + parseFloat(elm['@_dur'])) * 1000),\n                    text: this._decodeHTML(String(elm['#text']).replace(tagRegex, '')),\n                    track,\n                });\n            }\n\n            return subtitles;\n        }\n\n        if (file.name.endsWith('.sup')) {\n            const subtitles: SubtitleNode[] = [];\n            await file\n                .stream()\n                // FIXME: Figure out how to remove conflicts with @types/node ReadableStream\n                // @ts-ignore\n                .pipeThrough(parseDisplaySets())\n                .pipeTo(this._displaySetsToSubtitles(subtitles, track));\n\n            return subtitles;\n        }\n\n        if (file.name.endsWith('.dfxp') || file.name.endsWith('ttml2')) {\n            const text = await file.text();\n            const parser = new DOMParser();\n            const doc = parser.parseFromString(text, 'application/xml');\n            const nodes = this._xmlNodePath(doc.documentElement, ['body', 'div']);\n            const subtitles: SubtitleNode[] = [];\n\n            for (let index = 0, length = nodes.length; index < length; index++) {\n                const elm = nodes[index];\n                const beginAttribute = elm.getAttribute('begin');\n                const endAttribute = elm.getAttribute('end');\n\n                if (beginAttribute === null || endAttribute === null) {\n                    continue;\n                }\n\n                subtitles.push({\n                    text: elm.textContent ?? '',\n                    start: this._parseTtmlTimestamp(beginAttribute),\n                    end: this._parseTtmlTimestamp(endAttribute),\n                    track,\n                });\n            }\n\n            return subtitles;\n        }\n\n        throw new Error('Unsupported subtitle file format');\n    }\n\n    private _parseTtmlTimestamp(timestamp: string) {\n        const parts = timestamp.split(':');\n        const milliseconds = Math.floor(parseFloat(parts[parts.length - 1]) * 1000);\n        const minutes = parts.length < 2 ? 0 : Number(parts[parts.length - 2]);\n        const hours = parts.length < 3 ? 0 : Number(parts[parts.length - 3]);\n\n        return milliseconds + minutes * 60000 + hours * 3600000;\n    }\n\n    private _xmlNodePath(parent: Element, path: string[]): Element[] {\n        if (path.length === 0) {\n            const children: Element[] = [];\n\n            for (let i = 0; i < parent.children.length; ++i) {\n                const node = parent.children[i];\n                children.push(node);\n            }\n\n            return children;\n        }\n\n        for (let i = 0; i < parent.children.length; ++i) {\n            const node = parent.children[i];\n            const tag = this._dropTagNamespace(node.tagName);\n\n            if (tag === path[0]) {\n                return this._xmlNodePath(node, path.slice(1));\n            }\n        }\n\n        throw new Error('Failied to parse XML path');\n    }\n\n    private _dropTagNamespace(tag: string) {\n        const colonIndex = tag.lastIndexOf(':');\n\n        if (colonIndex !== -1) {\n            return tag.substring(colonIndex + 1);\n        }\n\n        return tag;\n    }\n\n    private _displaySetsToSubtitles(subtitles: SubtitleNode[], track: number) {\n        let imageDataArray: Uint8ClampedArray | undefined;\n        let currentImageDisplaySet: DisplaySet | undefined;\n\n        return new WritableStream<DisplaySet>({\n            write(displaySet, controller) {\n                if (displaySet.objectDefinitionSegments.length > 0) {\n                    if (currentImageDisplaySet === undefined) {\n                        currentImageDisplaySet = displaySet;\n                    }\n                } else if (currentImageDisplaySet !== undefined) {\n                    const screenWidth = currentImageDisplaySet.presentationCompositionSegment.width;\n                    const screenHeight = currentImageDisplaySet.presentationCompositionSegment.height;\n                    imageDataArray =\n                        imageDataArray === undefined || imageDataArray.length < screenHeight * screenWidth * 4\n                            ? new Uint8ClampedArray(screenWidth * screenHeight * 4)\n                            : imageDataArray;\n                    const imageData = currentImageDisplaySet.imageData(imageDataArray);\n                    helperCanvas.width = imageData.width;\n                    helperCanvas.height = imageData.height;\n                    const context = helperCanvas.getContext('2d')!;\n                    context.putImageData(imageData, 0, 0);\n                    subtitles.push({\n                        start:\n                            currentImageDisplaySet.objectDefinitionSegments[0].header.presentationTimestamp / 90 ?? 0,\n                        end: displaySet.endDefinitionSegment.header.presentationTimestamp / 90,\n                        text: '',\n                        textImage: {\n                            dataUrl: helperCanvas.toDataURL('image/png'),\n                            image: {\n                                width: imageData.width,\n                                height: imageData.height,\n                            },\n                            screen: {\n                                width: currentImageDisplaySet.presentationCompositionSegment.width,\n                                height: currentImageDisplaySet.presentationCompositionSegment.height,\n                            },\n                        },\n                        track,\n                    });\n\n                    currentImageDisplaySet = undefined;\n                }\n            },\n        });\n    }\n\n    private _fixRTL(line: string): string {\n        const index1 = line.indexOf('&lrm;');\n        const index2 = line.indexOf('&rlm;');\n        let newLine = '';\n\n        if (index1 > -1) {\n            newLine = line.substring(0, index1) + '\\u202a' + line.substring(index1 + 5) + '\\u202c';\n            return this._fixRTL(newLine);\n        } else if (index2 > -1) {\n            newLine = line.substring(0, index2) + '\\u202b' + line.substring(index2 + 5) + '\\u202c';\n            return this._fixRTL(newLine);\n        }\n\n        return line;\n    }\n\n    private _decodeHTML(text: string): string {\n        helperElement.innerHTML = text;\n        return helperElement.textContent ?? helperElement.innerText;\n    }\n\n    private _xmlParser() {\n        if (this.xmlParser === undefined) {\n            this.xmlParser = new XMLParser({\n                ignoreAttributes: false,\n            });\n        }\n\n        return this.xmlParser;\n    }\n\n    subtitlesToSrt(subtitles: SubtitleNode[]) {\n        const nodes: SrtNode[] = subtitles.map((subtitleNode) => {\n            return {\n                type: 'cue',\n                data: {\n                    start: subtitleNode.start,\n                    end: subtitleNode.end,\n                    text: subtitleNode.text,\n                },\n            };\n        });\n        return writeSrt(nodes, { format: 'SRT' });\n    }\n\n    async filesToSrt(files: File[]) {\n        return this.subtitlesToSrt(await this.subtitles(files));\n    }\n}\n","import { makeStyles, Theme } from '@material-ui/core/styles';\nimport clsx from 'clsx';\nimport AppBar from '@material-ui/core/AppBar';\nimport BugReportIcon from '@material-ui/icons/BugReport';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport HelpIcon from '@material-ui/icons/Help';\nimport FolderIcon from '@material-ui/icons/Folder';\nimport IconButton from '@material-ui/core/IconButton';\nimport ListIcon from '@material-ui/icons/List';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Tooltip, { TooltipProps } from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Popover from '@material-ui/core/Popover';\nimport { useCallback, useState } from 'react';\n\ninterface BarProps {\n    drawerWidth: number;\n    drawerOpen: boolean;\n    hidden: boolean;\n    title: string;\n    subtitleFiles?: File[];\n    onFileSelector: () => void;\n    onDownloadSubtitleFilesAsSrt: () => void;\n    onOpenSettings: () => void;\n    onOpenCopyHistory: () => void;\n}\n\ninterface StyleProps {\n    drawerWidth: number;\n}\n\nconst useStyles = makeStyles<Theme, StyleProps, string>((theme) => ({\n    title: {\n        flexGrow: 1,\n    },\n    leftButton: {\n        marginRight: theme.spacing(1),\n    },\n    appBar: {\n        transition: theme.transitions.create(['margin', 'width'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n    },\n    appBarShift: {\n        width: ({ drawerWidth }) => `calc(100% - ${drawerWidth}px)`,\n        transition: theme.transitions.create(['margin', 'width'], {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n        marginRight: ({ drawerWidth }) => drawerWidth,\n    },\n    copyHistoryButton: {\n        transform: 'scaleX(1)',\n        width: 48,\n        padding: 12,\n        transition: theme.transitions.create(['transform', 'padding', 'width'], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n    },\n    copyHistoryButtonShift: {\n        transform: 'scaleX(0)',\n        width: 0,\n        padding: 5,\n        transition: theme.transitions.create(['transform', 'padding', 'width'], {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n    },\n    hide: {\n        display: 'none',\n    },\n}));\n\ninterface CopyHistoryTooltipStylesProps {\n    show: boolean;\n}\n\ninterface CopyHistoryTooltipProps extends TooltipProps {\n    show: boolean;\n}\n\nconst useCopyHistoryTooltipStyles = makeStyles<Theme, CopyHistoryTooltipStylesProps, string>((theme) => ({\n    tooltip: ({ show }) => ({\n        display: show ? 'block' : 'none',\n    }),\n}));\n\nfunction CopyHistoryTooltip({ show, ...toolTipProps }: CopyHistoryTooltipProps) {\n    const classes = useCopyHistoryTooltipStyles({ show: show });\n    return <Tooltip classes={classes} {...toolTipProps} />;\n}\n\nexport default function Bar({\n    drawerWidth,\n    drawerOpen,\n    hidden,\n    title,\n    subtitleFiles,\n    onOpenSettings,\n    onOpenCopyHistory,\n    onFileSelector,\n    onDownloadSubtitleFilesAsSrt,\n}: BarProps) {\n    const classes = useStyles({ drawerWidth });\n    const [menuOpen, setMenuOpen] = useState<boolean>(false);\n    const [menuAnchorEl, setMenuAnchorEl] = useState<HTMLElement>();\n    const canSaveAsSrt =\n        subtitleFiles !== undefined && subtitleFiles.find((f) => !f.name.endsWith('.sup')) !== undefined;\n\n    const handleFileAction = useCallback(\n        (event: React.MouseEvent<HTMLButtonElement>) => {\n            if (canSaveAsSrt) {\n                setMenuAnchorEl(event.currentTarget);\n                setMenuOpen(true);\n            } else {\n                onFileSelector();\n            }\n        },\n        [onFileSelector, canSaveAsSrt]\n    );\n\n    const handleMenuClose = useCallback(() => {\n        setMenuOpen(false);\n    }, []);\n\n    const handleOpenFilesFromMenu = useCallback(() => {\n        setMenuOpen(false);\n        onFileSelector();\n    }, [onFileSelector]);\n\n    const handleDownloadSubtitleFilesAsSrt = useCallback(() => {\n        setMenuOpen(false);\n        onDownloadSubtitleFilesAsSrt();\n    }, [onDownloadSubtitleFilesAsSrt]);\n\n    return (\n        <>\n            {canSaveAsSrt && (\n                <Popover\n                    open={menuOpen}\n                    anchorEl={menuAnchorEl}\n                    onClose={handleMenuClose}\n                    anchorOrigin={{\n                        vertical: 'bottom',\n                        horizontal: 'center',\n                    }}\n                >\n                    <List>\n                        <ListItem button onClick={handleOpenFilesFromMenu}>\n                            Open Files\n                        </ListItem>\n                        <ListItem button onClick={handleDownloadSubtitleFilesAsSrt}>\n                            Download Subtitles as SRT\n                        </ListItem>\n                    </List>\n                </Popover>\n            )}\n            <AppBar\n                position=\"static\"\n                elevation={0}\n                className={clsx(classes.appBar, {\n                    [classes.appBarShift]: drawerOpen,\n                    [classes.hide]: hidden,\n                })}\n            >\n                <Toolbar>\n                    <Tooltip\n                        disableFocusListener={canSaveAsSrt}\n                        disableHoverListener={canSaveAsSrt}\n                        disableTouchListener={canSaveAsSrt}\n                        title=\"Open Files\"\n                    >\n                        <IconButton\n                            edge=\"start\"\n                            color=\"inherit\"\n                            className={classes.leftButton}\n                            onClick={handleFileAction}\n                        >\n                            <FolderIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        {title}\n                    </Typography>\n                    <Tooltip title=\"Donate\">\n                        <IconButton\n                            edge=\"end\"\n                            color=\"inherit\"\n                            component=\"a\"\n                            href=\"https://github.com/killergerbah/asbplayer#supporters\"\n                            target=\"_blank\"\n                            rel=\"noreferrer\"\n                        >\n                            <FavoriteIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title=\"Submit Issue\">\n                        <IconButton\n                            edge=\"end\"\n                            color=\"inherit\"\n                            component=\"a\"\n                            href=\"https://github.com/killergerbah/asbplayer/issues\"\n                            target=\"_blank\"\n                            rel=\"noreferrer\"\n                        >\n                            <BugReportIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title=\"Help\">\n                        <IconButton\n                            edge=\"end\"\n                            color=\"inherit\"\n                            component=\"a\"\n                            href=\"https://github.com/killergerbah/asbplayer#usage\"\n                            target=\"_blank\"\n                            rel=\"noreferrer\"\n                        >\n                            <HelpIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title=\"Settings\">\n                        <IconButton edge=\"end\" color=\"inherit\" onClick={onOpenSettings}>\n                            <SettingsIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <CopyHistoryTooltip title=\"Mining History\" show={!drawerOpen}>\n                        <IconButton\n                            edge=\"end\"\n                            color=\"inherit\"\n                            aria-label=\"menu\"\n                            className={clsx(classes.copyHistoryButton, {\n                                [classes.copyHistoryButtonShift]: drawerOpen,\n                            })}\n                            onClick={onOpenCopyHistory}\n                        >\n                            <ListIcon />\n                        </IconButton>\n                    </CopyHistoryTooltip>\n                </Toolbar>\n            </AppBar>\n        </>\n    );\n}\n","import { Rgb } from '@project/common';\n\nexport function arrayEquals(a: any[], b: any[], equals = (a: any, b: any) => a === b) {\n    if (a.length !== b.length) {\n        return false;\n    }\n\n    for (let i = 0; i < a.length; ++i) {\n        if (!equals(a[i], b[i])) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nexport function keysAreEqual(a: any, b: any) {\n    for (let key in a) {\n        if (!(key in b)) {\n            return false;\n        }\n    }\n\n    for (let key in b) {\n        if (!(key in a)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n// https://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb\nfunction hexToRgb(hex: string): Rgb {\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)!;\n    return {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16),\n    };\n}\n\ninterface SubtitleStyle {\n    subtitleColor: string;\n    subtitleSize: number;\n    subtitleOutlineThickness: number;\n    subtitleOutlineColor: string;\n    subtitleBackgroundOpacity: number;\n    subtitleBackgroundColor: string;\n    subtitleFontFamily: string;\n}\n\nexport function computeStyles({\n    subtitleColor,\n    subtitleSize,\n    subtitleOutlineThickness,\n    subtitleOutlineColor,\n    subtitleBackgroundOpacity,\n    subtitleBackgroundColor,\n    subtitleFontFamily,\n}: SubtitleStyle) {\n    const styles: any = {\n        color: subtitleColor,\n        fontSize: Number(subtitleSize),\n    };\n\n    if (subtitleOutlineThickness > 0) {\n        const thickness = subtitleOutlineThickness;\n        const color = subtitleOutlineColor;\n        styles[\n            'textShadow'\n        ] = `0 0 ${thickness}px ${color}, 0 0 ${thickness}px ${color}, 0 0 ${thickness}px ${color}, 0 0 ${thickness}px ${color}`;\n    }\n\n    if (subtitleBackgroundOpacity > 0) {\n        const opacity = subtitleBackgroundOpacity;\n        const color = subtitleBackgroundColor;\n        const { r, g, b } = hexToRgb(color);\n        styles['backgroundColor'] = `rgba(${r}, ${g}, ${b}, ${opacity})`;\n    }\n\n    if (subtitleFontFamily && subtitleFontFamily.length > 0) {\n        styles['fontFamily'] = subtitleFontFamily;\n    }\n\n    return styles;\n}\n\nexport function timeDurationDisplay(\n    milliseconds: number,\n    totalMilliseconds: number,\n    includeMilliseconds = true\n): string {\n    if (milliseconds < 0) {\n        return timeDurationDisplay(0, totalMilliseconds);\n    }\n\n    milliseconds = Math.round(milliseconds);\n    const ms = milliseconds % 1000;\n    milliseconds = (milliseconds - ms) / 1000;\n    const secs = milliseconds % 60;\n    milliseconds = (milliseconds - secs) / 60;\n    const mins = milliseconds % 60;\n\n    if (totalMilliseconds >= 3600000) {\n        const hrs = (milliseconds - mins) / 60;\n\n        if (includeMilliseconds) {\n            return pad(hrs) + ':' + pad(mins) + ':' + pad(secs) + '.' + pad(ms, 3);\n        }\n\n        return pad(hrs) + ':' + pad(mins) + ':' + pad(secs);\n    }\n\n    if (includeMilliseconds) {\n        return pad(mins) + ':' + pad(secs) + '.' + pad(ms, 3);\n    }\n\n    return pad(mins) + ':' + pad(secs);\n}\n\nfunction pad(n: number, zeros: number = 2) {\n    return String(n).padStart(zeros, '0');\n}\n","import React, { useCallback, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { timeDurationDisplay } from '../services/util';\nimport { ListItemSecondaryAction, Theme } from '@material-ui/core';\nimport Divider from '@material-ui/core/Divider';\nimport Drawer from '@material-ui/core/Drawer';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Popover from '@material-ui/core/Popover';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport StarIcon from '@material-ui/icons/Star';\nimport SaveAltIcon from '@material-ui/icons/SaveAlt';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport { AudioModel, ImageModel, SubtitleModel } from '@project/common';\n\nexport interface CopyHistoryItem extends SubtitleModel {\n    name: string;\n    id: string;\n    timestamp: number;\n    surroundingSubtitles: SubtitleModel[];\n    audioFile?: File;\n    audioTrack?: string;\n    videoFile?: File;\n    filePlaybackRate?: number;\n    subtitleFile?: File;\n    mediaTimestamp?: number;\n    audio?: AudioModel;\n    image?: ImageModel;\n    url?: string;\n}\n\ninterface CopyHistoryProps {\n    open: boolean;\n    drawerWidth: number;\n    items: CopyHistoryItem[];\n    onClose: () => void;\n    onDelete: (item: CopyHistoryItem) => void;\n    onAnki: (item: CopyHistoryItem) => void;\n    onSelect: (item: CopyHistoryItem) => void;\n    onClipAudio: (item: CopyHistoryItem) => void;\n    onDownloadImage: (item: CopyHistoryItem) => void;\n    onDownloadSectionAsSrt: (name: string, items: CopyHistoryItem[]) => void;\n}\n\nconst useStyles = makeStyles<Theme, CopyHistoryProps, string>((theme) => ({\n    drawer: {\n        width: ({ drawerWidth }) => drawerWidth,\n        flexShrink: 0,\n    },\n    drawerPaper: {\n        width: ({ drawerWidth }) => drawerWidth,\n    },\n    drawerHeader: {\n        display: 'flex',\n        alignItems: 'center',\n        position: 'static',\n        padding: theme.spacing(0, 1),\n        // necessary for content to be below app bar\n        ...theme.mixins.toolbar,\n        justifyContent: 'flex-start',\n    },\n    listContainer: {\n        position: 'relative',\n        height: '100%',\n        overflowY: 'auto',\n        overflowX: 'hidden',\n    },\n    listItem: {\n        '&:hover': {\n            backgroundColor: theme.palette.action.hover,\n        },\n    },\n    listItemGutters: {\n        paddingLeft: 5,\n        paddingRight: 5,\n    },\n    listItemIconRoot: {\n        minWidth: 20,\n    },\n    emptyState: {\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        textAlign: 'center',\n        height: '100%',\n        padding: 15,\n    },\n    text: {\n        flexGrow: 1,\n    },\n    emptyText: {\n        flexGrow: 1,\n        color: theme.palette.text.secondary,\n    },\n    timestamp: {\n        paddingRight: 15,\n        paddingLeft: 15,\n        color: theme.palette.text.secondary,\n    },\n}));\n\ninterface MenuProps {\n    open: boolean;\n    item?: CopyHistoryItem;\n    anchorEl?: Element;\n    onClose: () => void;\n    onSelect: (item: CopyHistoryItem) => void;\n    onClipAudio: (item: CopyHistoryItem) => void;\n    onDownloadImage: (item: CopyHistoryItem) => void;\n    onDelete: (item: CopyHistoryItem) => void;\n}\n\nfunction Menu({ open, anchorEl, onClose, onSelect, onClipAudio, onDownloadImage, onDelete, item }: MenuProps) {\n    const handleCopy = useCallback(() => {\n        navigator.clipboard.writeText(item!.text);\n        onClose();\n    }, [item, onClose]);\n\n    const handleJumpTo = useCallback(() => {\n        onSelect(item!);\n        onClose();\n    }, [item, onSelect, onClose]);\n\n    const handleClipAudio = useCallback(() => {\n        onClipAudio(item!);\n        onClose();\n    }, [item, onClipAudio, onClose]);\n\n    const handleDownloadImage = useCallback(() => {\n        onDownloadImage(item!);\n        onClose();\n    }, [item, onDownloadImage, onClose]);\n\n    const handleDelete = useCallback(() => {\n        onDelete(item!);\n        onClose();\n    }, [item, onDelete, onClose]);\n\n    if (!item) {\n        return null;\n    }\n\n    return (\n        <Popover\n            disableEnforceFocus={true}\n            open={open}\n            anchorEl={anchorEl}\n            onClose={onClose}\n            anchorOrigin={{\n                vertical: 'center',\n                horizontal: 'center',\n            }}\n            transformOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n            }}\n        >\n            <List>\n                <ListItem button onClick={handleCopy}>\n                    <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Copy\" />\n                </ListItem>\n                <ListItem button onClick={handleJumpTo}>\n                    <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Jump To\" />\n                </ListItem>\n                {(item.videoFile || item.audioFile || item.audio) && (\n                    <ListItem button onClick={handleClipAudio}>\n                        <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Download Audio\" />\n                    </ListItem>\n                )}\n                {(item.videoFile || item.image) && (\n                    <ListItem button onClick={handleDownloadImage}>\n                        <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Download Image\" />\n                    </ListItem>\n                )}\n                <ListItem button onClick={handleDelete}>\n                    <ListItemText primaryTypographyProps={{ variant: 'body2' }} primary=\"Delete\" />\n                </ListItem>\n            </List>\n        </Popover>\n    );\n}\n\nexport default function CopyHistory(props: CopyHistoryProps) {\n    const onDelete = props.onDelete;\n    const classes = useStyles(props);\n    const scrollToBottomRefCallback = useCallback((element: HTMLElement | null) => {\n        if (element) {\n            element.scrollIntoView();\n        }\n    }, []);\n    const [menuItem, setMenuItem] = useState<CopyHistoryItem>();\n    const [menuOpen, setMenuOpen] = useState<boolean>(false);\n    const [menuAnchorEl, setMenuAnchorEl] = useState<Element>();\n\n    const handleMenu = useCallback((e: React.MouseEvent, item: CopyHistoryItem) => {\n        setMenuItem(item);\n        setMenuOpen(true);\n        setMenuAnchorEl(e.currentTarget);\n    }, []);\n\n    const handleMenuClosed = useCallback(() => {\n        setMenuItem(undefined);\n        setMenuOpen(false);\n        setMenuAnchorEl(undefined);\n    }, []);\n\n    const handleDelete = useCallback(\n        (item: CopyHistoryItem) => {\n            onDelete(item);\n        },\n        [onDelete]\n    );\n\n    let content;\n\n    if (props.items.length > 0) {\n        const items = [];\n        let lastSeenItemName = null;\n        let i = 0;\n        const itemNameCounters: { [name: string]: number } = {};\n        let itemsBySection: { [key: string]: CopyHistoryItem[] } = {};\n        let currentKey: string | undefined;\n\n        for (const item of props.items) {\n            if (lastSeenItemName === null || lastSeenItemName !== item.name) {\n\n                if (item.name in itemNameCounters) {\n                    itemNameCounters[item.name]++;\n                } else {\n                    itemNameCounters[item.name] = 0;\n                }\n\n                const key = item.name + '-' + itemNameCounters[item.name];\n                itemsBySection[key] = [];\n                lastSeenItemName = item.name;\n                currentKey = key;\n\n                items.push(\n                    <ListItem key={key}>\n                        <Typography color=\"textSecondary\">{item.name}</Typography>\n                        <ListItemSecondaryAction>\n                            <Tooltip title=\"Download as SRT\">\n                                <IconButton\n                                    onClick={() => props.onDownloadSectionAsSrt(item.name, itemsBySection[key])}\n                                    edge=\"end\"\n                                >\n                                    <SaveAltIcon />\n                                </IconButton>\n                            </Tooltip>\n                        </ListItemSecondaryAction>\n                    </ListItem>\n                );\n            }\n\n            itemsBySection[currentKey!].push(item);\n            const ref = i === props.items.length - 1 ? scrollToBottomRefCallback : null;\n\n            items.push(\n                <ListItem\n                    ref={ref}\n                    key={item.id}\n                    className={classes.listItem}\n                    classes={{ gutters: classes.listItemGutters }}\n                >\n                    <ListItemIcon classes={{ root: classes.listItemIconRoot }}>\n                        <Tooltip title=\"Export to Anki\">\n                            <IconButton onClick={() => props.onAnki(item)}>\n                                <StarIcon fontSize=\"small\" />\n                            </IconButton>\n                        </Tooltip>\n                    </ListItemIcon>\n                    <ListItemIcon classes={{ root: classes.listItemIconRoot }}>\n                        <IconButton onClick={(e) => handleMenu(e, item)}>\n                            <MoreVertIcon fontSize=\"small\" />\n                        </IconButton>\n                    </ListItemIcon>\n                    <ListItemText\n                        primary={\n                            <Grid wrap=\"nowrap\" container>\n                                <Grid item className={item.text === '' ? classes.emptyText : classes.text}>\n                                    {item.text === '' ? 'No text' : item.text}\n                                </Grid>\n                                <Grid item className={classes.timestamp}>\n                                    {timeDurationDisplay(item.start, item.start, false)}\n                                </Grid>\n                            </Grid>\n                        }\n                    />\n                </ListItem>\n            );\n\n            ++i;\n        }\n\n        content = (\n            <div className={classes.listContainer}>\n                <List>{items}</List>\n            </div>\n        );\n    } else {\n        content = (\n            <div className={classes.emptyState}>\n                <Typography variant=\"h6\">Mining history is empty.</Typography>\n                <Typography variant=\"caption\">See the help for keyboard shortcuts.</Typography>\n            </div>\n        );\n    }\n\n    return (\n        <React.Fragment>\n            <Drawer\n                variant=\"persistent\"\n                anchor=\"right\"\n                open={props.open}\n                className={classes.drawer}\n                classes={{\n                    paper: classes.drawerPaper,\n                }}\n            >\n                <div className={classes.drawerHeader}>\n                    <IconButton onClick={props.onClose}>\n                        <ChevronRightIcon />\n                    </IconButton>\n                </div>\n                <Divider />\n                {content}\n            </Drawer>\n            <Menu\n                open={props.open && menuOpen}\n                anchorEl={menuAnchorEl}\n                item={menuItem}\n                onClose={handleMenuClosed}\n                onSelect={props.onSelect}\n                onClipAudio={props.onClipAudio}\n                onDownloadImage={props.onDownloadImage}\n                onDelete={handleDelete}\n            />\n        </React.Fragment>\n    );\n}\n","import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport gt from 'semver/functions/gt';\nimport Fade from '@material-ui/core/Fade';\nimport Link from '@material-ui/core/Link';\nimport Typography from '@material-ui/core/Typography';\nimport ChromeExtension from '../services/ChromeExtension';\nimport { Theme } from '@material-ui/core/styles';\n\ninterface StylesProps {\n    appBarHidden: boolean;\n}\n\nconst useStyles = makeStyles<Theme, StylesProps>((theme) => ({\n    background: ({ appBarHidden }) => ({\n        position: 'absolute',\n        height: appBarHidden ? '100vh' : 'calc(100vh - 64px)',\n        width: '100%',\n        zIndex: 100,\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        padding: 15,\n        textAlign: 'center',\n    }),\n    browseLink: {\n        cursor: 'pointer',\n    },\n}));\n\ninterface Props {\n    extension: ChromeExtension;\n    latestExtensionVersion: string;\n    extensionUrl: string;\n    loading: boolean;\n    dragging: boolean;\n    appBarHidden: boolean;\n    onFileSelector: React.MouseEventHandler<HTMLAnchorElement> &\n        React.MouseEventHandler<HTMLSpanElement> &\n        React.MouseEventHandler<HTMLLabelElement>;\n}\n\nexport default function LandingPage({\n    extension,\n    latestExtensionVersion,\n    extensionUrl,\n    loading,\n    dragging,\n    appBarHidden,\n    onFileSelector,\n}: Props) {\n    const classes = useStyles({ appBarHidden });\n    const [installedExtensionVersion, setInstalledExtensionVersion] = useState<string>();\n\n    useEffect(() => {\n        async function fetchInstalledExtensionVersion() {\n            setInstalledExtensionVersion(extension.version);\n        }\n\n        fetchInstalledExtensionVersion();\n    }, [extension]);\n\n    const extensionUpdateAvailable = installedExtensionVersion && gt(latestExtensionVersion, installedExtensionVersion);\n    const extensionNotInstalled = !installedExtensionVersion;\n\n    return (\n        <React.Fragment>\n            <Fade in={!loading && !dragging} timeout={500}>\n                <div className={classes.background}>\n                    <Typography variant=\"h6\">\n                        Drag and drop subtitle and media files, or{' '}\n                        <Link\n                            target=\"#\"\n                            className={classes.browseLink}\n                            onClick={onFileSelector}\n                            color=\"secondary\"\n                            component=\"label\"\n                        >\n                            browse\n                        </Link>\n                        .\n                        <br />\n                        {extensionNotInstalled && (\n                            <span>\n                                Install the{' '}\n                                <Link color=\"secondary\" target=\"_blank\" rel=\"noreferrer\" href={extensionUrl}>\n                                    Chrome extension\n                                </Link>{' '}\n                                to sync subtitles with streaming video.\n                            </span>\n                        )}\n                        {extensionUpdateAvailable && (\n                            <span>\n                                An extension{' '}\n                                <Link color=\"secondary\" target=\"_blank\" rel=\"noreferrer\" href={extensionUrl}>\n                                    update\n                                </Link>{' '}\n                                is available.\n                            </span>\n                        )}\n                    </Typography>\n                </div>\n            </Fade>\n        </React.Fragment>\n    );\n}\n","import { Message } from \"@project/common\";\nimport { VideoProtocol, VideoProtocolMessage } from \"./VideoProtocol\";\n\nexport default class BroadcastChannelVideoProtocol implements VideoProtocol {\n    private channel?: BroadcastChannel;\n\n    onMessage?: (message: VideoProtocolMessage) => void;\n    \n    constructor(channelId: string) {\n        this.channel = new BroadcastChannel(channelId);\n        const that = this;\n        this.channel.onmessage = (event) => {\n            that.onMessage?.(event as VideoProtocolMessage);\n        };\n    }\n\n    postMessage(message: Message) {\n        this.channel?.postMessage(message);\n    }\n\n    close() {\n        this.channel?.close();\n        this.channel = undefined;\n    }\n}\n","import { Message } from '@project/common';\nimport ChromeExtension, { ExtensionMessage } from './ChromeExtension';\nimport { VideoProtocol, VideoProtocolMessage } from './VideoProtocol';\n\nexport default class ChromeTabVideoProtocol implements VideoProtocol {\n    private readonly tabId: number;\n    private readonly src: string;\n    private readonly extension: ChromeExtension;\n    private readonly listener: (message: ExtensionMessage) => void;\n    private readonly unsubscribeFromExtension: () => void;\n\n    onMessage?: (message: VideoProtocolMessage) => void;\n\n    constructor(tabId: number, src: string, extension: ChromeExtension) {\n        this.tabId = tabId;\n        this.src = src;\n        this.listener = (message) => {\n            if (message.tabId === tabId && message.src === src) {\n                this.onMessage?.({\n                    data: message.data,\n                });\n            }\n        };\n\n        this.unsubscribeFromExtension = extension.subscribe(this.listener);\n        this.extension = extension;\n    }\n\n    postMessage(message: Message) {\n        this.extension.sendMessage(message, this.tabId, this.src);\n    }\n\n    close() {\n        this.unsubscribeFromExtension();\n    }\n}\n","export default class Clock {\n    private accumulated: number;\n    private started: boolean;\n    private startTime?: number;\n    private _rate = 1;\n\n    constructor() {\n        this.accumulated = 0;\n        this.started = false;\n    }\n\n    get rate() {\n        return this._rate;\n    }\n\n    set rate(rate: number) {\n        if (this.started) {\n            this.accumulated += this._elapsed();\n            this.startTime = Date.now();\n        }\n    \n        this._rate = rate;\n    }\n\n    time(max: number) {\n        if (this.started) {\n            return Math.min(max, this.accumulated + this._elapsed());\n        }\n\n        return Math.min(max, this.accumulated);\n    }\n\n    stop() {\n        if (!this.started) {\n            return;\n        }\n\n        this.started = false;\n        this.accumulated += this._elapsed();\n    }\n\n    private _elapsed() {\n        return (Date.now() - this.startTime!) * this._rate;\n    }\n\n    start() {\n        this.startTime = Date.now();\n        this.started = true;\n    }\n\n    setTime(time: number) {\n        if (this.started) {\n            this.startTime = Date.now();\n            this.accumulated = time;\n        } else {\n            this.accumulated = time;\n        }\n    }\n\n    progress(max: number) {\n        return max === 0 ? 0 : Math.min(1, this.time(max) / max);\n    }\n}\n","import React, { useCallback, useEffect, useState, useRef, MutableRefObject } from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\nimport AudiotrackIcon from '@material-ui/icons/Audiotrack';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Fade from '@material-ui/core/Fade';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport Input from '@material-ui/core/Input';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport OpenInNewIcon from '@material-ui/icons/OpenInNew';\nimport Popover from '@material-ui/core/Popover';\nimport FullscreenIcon from '@material-ui/icons/Fullscreen';\nimport AspectRatioIcon from '@material-ui/icons/AspectRatio';\nimport FullscreenExitIcon from '@material-ui/icons/FullscreenExit';\nimport PauseIcon from '@material-ui/icons/Pause';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport QueueMusicIcon from '@material-ui/icons/QueueMusic';\nimport Slider from '@material-ui/core/Slider';\nimport TuneIcon from '@material-ui/icons/Tune';\nimport SubtitlesIcon from '@material-ui/icons/Subtitles';\nimport VideocamIcon from '@material-ui/icons/Videocam';\nimport VolumeOffIcon from '@material-ui/icons/VolumeOff';\nimport VolumeUpIcon from '@material-ui/icons/VolumeUp';\nimport { AudioTrackModel, PlayMode, VideoTabModel } from '@project/common';\nimport Clock from '../services/Clock';\nimport PlaybackPreferences from '../services/PlaybackPreferences';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nconst useControlStyles = makeStyles((theme) => ({\n    container: {\n        position: 'absolute',\n        left: '50%',\n        width: '50%',\n        bottom: 0,\n        pointerEvents: 'none',\n        color: '#fff',\n    },\n    buttonContainer: {\n        flexDirection: 'row',\n    },\n    timeDisplay: {\n        color: '#fff',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        height: '100%',\n        cursor: 'default',\n        fontSize: 20,\n        marginLeft: 10,\n    },\n    numberInput: {\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        fontSize: 20,\n        marginLeft: 10,\n        width: 100,\n        color: '#fff',\n        pointerEvents: 'auto',\n    },\n    volumeInputContainerShown: {\n        transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.short,\n        }),\n        marginRight: 5,\n        pointerEvents: 'auto',\n    },\n    volumeInputContainerHidden: {\n        transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.short,\n        }),\n        marginRight: 0,\n        pointerEvents: 'auto',\n    },\n    volumeInputHidden: {\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.short,\n        }),\n        width: 0,\n        pointerEvents: 'auto',\n    },\n    volumeInputShown: {\n        transition: theme.transitions.create('width', {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.short,\n        }),\n        width: 100,\n        pointerEvents: 'auto',\n    },\n    volumeInputThumbHidden: {\n        transition: theme.transitions.create('visibility', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.short,\n        }),\n        opacity: 0,\n        pointerEvents: 'auto',\n    },\n    volumeInputThumbShown: {\n        transition: theme.transitions.create('visibility', {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.short,\n        }),\n        opacity: 1,\n        pointerEvents: 'auto',\n    },\n    subContainer: {\n        background: 'linear-gradient(to bottom, rgba(0, 0, 0, 0), rgba(0, 0, 0, .4) 40%, rgba(0, 0, 0, 0.7))',\n        position: 'relative',\n        left: '-100%',\n        width: '200%',\n        zIndex: 10,\n    },\n    button: {\n        pointerEvents: 'auto',\n    },\n    inactiveButton: {\n        color: 'rgba(72, 72, 72, 0.7)',\n        pointerEvents: 'auto',\n    },\n    inactiveTopButton: {\n        color: 'rgba(255, 255, 255, 0.5)',\n        pointerEvents: 'auto',\n    },\n    progress: {\n        margin: 5,\n    },\n    topButton: {\n        pointerEvents: 'auto',\n        color: '#fff',\n    },\n    gridContainer: {\n        pointerEvents: 'auto',\n        padding: 2,\n    },\n}));\n\nconst useProgressBarStyles = makeStyles((theme) => ({\n    root: {\n        height: 10,\n    },\n    container: {\n        height: 10,\n        pointerEvents: 'auto',\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        position: 'absolute',\n        width: 'calc(100% - 20px)',\n        marginLeft: 10,\n    },\n    mouseEventListener: {\n        zIndex: 1,\n        height: 10,\n        cursor: 'pointer',\n        pointerEvents: 'auto',\n        position: 'absolute',\n        width: '100%',\n    },\n    fillContainer: {\n        background: 'rgba(30,30,30,0.7)',\n        width: '100%',\n        height: 5,\n        position: 'relative',\n    },\n    fillContainerThick: {\n        transition: theme.transitions.create('height', {\n            easing: theme.transitions.easing.easeInOut,\n            duration: 50,\n        }),\n        height: 8,\n    },\n    fill: {\n        background: 'linear-gradient(to left, #ff1f62, #49007a)',\n        height: '100%',\n    },\n    handleContainer: {\n        position: 'absolute',\n        display: 'flex',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        height: '100%',\n        bottom: 0,\n    },\n    handle: {\n        borderRadius: '50%',\n        width: 16,\n        height: 16,\n        opacity: 0,\n        left: -8,\n        background: 'white',\n        position: 'absolute',\n    },\n    handleOn: {\n        opacity: 1,\n        transition: theme.transitions.create('opacity', {\n            easing: theme.transitions.easing.easeInOut,\n            duration: theme.transitions.duration.shortest,\n        }),\n    },\n}));\n\nconst VolumeSlider = withStyles((theme) => ({\n    root: {\n        color: 'white',\n        verticalAlign: 'middle',\n    },\n    thumb: {\n        backgroundColor: 'white',\n        color: 'white',\n        '&:focus': {\n            boxShadow: 'inherit',\n        },\n        '&:hover, &$active': {\n            boxShadow: '0px 0px 0px 8px rgba(255, 255, 255, 0.1)',\n        },\n    },\n    active: {\n        color: 'white',\n    },\n}))(Slider);\n\nfunction displayTime(milliseconds: number) {\n    const seconds = Math.floor(milliseconds / 1000);\n    const minutes = Math.floor(seconds / 60);\n    const secondsInMinute = seconds % 60;\n    return String(minutes) + ':' + String(secondsInMinute).padStart(2, '0');\n}\n\nfunction elementWidth(element: HTMLElement) {\n    const rect = element.getBoundingClientRect();\n    return rect.right - rect.left;\n}\n\ninterface ProgressBarProps {\n    onSeek: (progress: number) => void;\n    value: number;\n}\n\nfunction ProgressBar({ onSeek, value }: ProgressBarProps) {\n    const classes = useProgressBarStyles();\n    const [mouseOver, setMouseOver] = useState(false);\n    const containerRef = useRef(null);\n\n    const handleClick = useCallback(\n        (e: React.MouseEvent<HTMLDivElement>) => {\n            const rect = e.currentTarget.getBoundingClientRect();\n            // Account for margins by subtracting 10 from left/right sides\n            const width = rect.right - rect.left - 20;\n            const progress = Math.min(1, Math.max(0, (e.pageX - rect.left - 10) / width));\n            onSeek(progress);\n        },\n        [onSeek]\n    );\n\n    const handleMouseOver = useCallback(() => setMouseOver(true), []);\n    const handleMouseOut = useCallback(() => setMouseOver(false), []);\n    const progressWidth = containerRef.current ? (elementWidth(containerRef.current) * value) / 100 : 0;\n    const fillStyle = { width: progressWidth };\n    const handleStyle = { marginLeft: progressWidth };\n    const fillContainerClassName = mouseOver\n        ? classes.fillContainer + ' ' + classes.fillContainerThick\n        : classes.fillContainer;\n    const handleClassName = mouseOver ? classes.handle + ' ' + classes.handleOn : classes.handle;\n\n    return (\n        <div className={classes.root}>\n            <div ref={containerRef} className={classes.container}>\n                <div className={fillContainerClassName}>\n                    <div className={classes.fill} style={fillStyle}></div>\n                    <div className={classes.handleContainer}>\n                        <div className={handleClassName} style={handleStyle} />\n                    </div>\n                </div>\n            </div>\n            <div\n                className={classes.mouseEventListener}\n                onClick={handleClick}\n                onMouseOver={handleMouseOver}\n                onMouseOut={handleMouseOut}\n            ></div>\n        </div>\n    );\n}\n\ninterface AudioTrackSelectorProps {\n    open: boolean;\n    anchorEl?: Element;\n    audioTracks?: AudioTrackModel[];\n    selectedAudioTrack?: string;\n    onAudioTrackSelected: (id: string) => void;\n    onClose: () => void;\n}\n\nfunction AudioTrackSelector({\n    open,\n    anchorEl,\n    audioTracks,\n    selectedAudioTrack,\n    onAudioTrackSelected,\n    onClose,\n}: AudioTrackSelectorProps) {\n    if (!audioTracks || audioTracks.length === 0) {\n        return null;\n    }\n\n    const list = audioTracks.map((t) => {\n        return (\n            <ListItem\n                key={t.id}\n                selected={t.id === selectedAudioTrack}\n                button\n                onClick={() => onAudioTrackSelected(t.id)}\n            >\n                {t.language} {t.label}\n            </ListItem>\n        );\n    });\n\n    return (\n        <div>\n            <Popover\n                disableEnforceFocus={true}\n                open={open}\n                anchorEl={anchorEl}\n                onClose={onClose}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n            >\n                <List>{list}</List>\n            </Popover>\n        </div>\n    );\n}\n\ninterface TabSelectorProps {\n    open: boolean;\n    anchorEl?: Element;\n    tabs?: VideoTabModel[];\n    selectedTab?: VideoTabModel;\n    onTabSelected: (tab: VideoTabModel) => void;\n    onClose: () => void;\n}\n\nfunction TabSelector({ open, anchorEl, onClose, tabs, selectedTab, onTabSelected }: TabSelectorProps) {\n    if (!tabs || tabs.length === 0) {\n        return null;\n    }\n\n    const list = tabs.map((t) => {\n        return (\n            <ListItem\n                key={`${t.id}:${t.src}`}\n                selected={selectedTab && t.id === selectedTab.id && t.src === selectedTab.src}\n                button\n                onClick={() => onTabSelected(t)}\n            >\n                {t.id} {t.title} {t.src}\n            </ListItem>\n        );\n    });\n\n    return (\n        <div>\n            <Popover\n                disableEnforceFocus={true}\n                open={open}\n                anchorEl={anchorEl}\n                onClose={onClose}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n            >\n                <List>{list}</List>\n            </Popover>\n        </div>\n    );\n}\n\ninterface MediaUnloaderProps {\n    open: boolean;\n    anchorEl?: Element;\n    file?: string;\n    onUnload: () => void;\n    onClose: () => void;\n}\n\nfunction MediaUnloader({ open, anchorEl, onUnload, onClose, file }: MediaUnloaderProps) {\n    return (\n        <div>\n            <Popover\n                disableEnforceFocus={true}\n                open={open}\n                anchorEl={anchorEl}\n                onClose={onClose}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n            >\n                <List>\n                    <ListItem button onClick={(e) => onUnload()}>\n                        Unload {file}\n                    </ListItem>\n                </List>\n            </Popover>\n        </div>\n    );\n}\n\ninterface PlayModeSelectorProps {\n    open: boolean;\n    anchorEl?: Element;\n    selectedPlayMode?: PlayMode;\n    onPlayMode: (playMode: PlayMode) => void;\n    onClose: () => void;\n}\n\nfunction PlayModeSelector({ open, anchorEl, selectedPlayMode, onPlayMode, onClose }: PlayModeSelectorProps) {\n    return (\n        <div>\n            <Popover\n                disableEnforceFocus={true}\n                open={open}\n                anchorEl={anchorEl}\n                onClose={onClose}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n            >\n                <List>\n                    <ListItem\n                        selected={selectedPlayMode === PlayMode.normal}\n                        button\n                        onClick={(e) => onPlayMode(PlayMode.normal)}\n                    >\n                        Normal\n                    </ListItem>\n                    <ListItem\n                        selected={selectedPlayMode === PlayMode.condensed}\n                        button\n                        onClick={(e) => onPlayMode(PlayMode.condensed)}\n                    >\n                        Condensed\n                    </ListItem>\n                    <ListItem\n                        selected={selectedPlayMode === PlayMode.autoPause}\n                        button\n                        onClick={(e) => onPlayMode(PlayMode.autoPause)}\n                    >\n                        Auto-pause\n                    </ListItem>\n                </List>\n            </Popover>\n        </div>\n    );\n}\n\nexport interface Point {\n    x: number;\n    y: number;\n}\n\ninterface ControlsProps {\n    clock: Clock;\n    playing: boolean;\n    length: number;\n    offsetEnabled?: boolean;\n    displayLength?: number;\n    offset: number;\n    playbackRate: number;\n    playbackRateEnabled?: boolean;\n    onAudioTrackSelected: (id: string) => void;\n    onSeek: (progress: number) => void;\n    mousePositionRef: MutableRefObject<Point>;\n    onShow?: (show: boolean) => void;\n    onPause: () => void;\n    onPlay: () => void;\n    onTabSelected?: (tab: VideoTabModel) => void;\n    onUnloadAudio?: () => void;\n    onUnloadVideo?: () => void;\n    onOffsetChange: (offset: number) => void;\n    onPlaybackRateChange: (playbackRate: number) => void;\n    onVolumeChange: (volume: number) => void;\n    disableKeyEvents?: boolean;\n    playbackPreferences: PlaybackPreferences;\n    closeEnabled?: boolean;\n    onClose?: () => void;\n    volumeEnabled?: boolean;\n    playMode?: PlayMode;\n    playModeEnabled?: boolean;\n    onPlayMode?: (playMode: PlayMode) => void;\n    subtitlesEnabled?: boolean;\n    subtitlesToggle?: boolean;\n    onSubtitlesToggle?: () => void;\n    videoFile?: string;\n    audioFile?: string;\n    audioTracks?: AudioTrackModel[];\n    selectedAudioTrack?: string;\n    tabs?: VideoTabModel[];\n    selectedTab?: VideoTabModel;\n    popOutEnabled?: boolean;\n    popOut?: boolean;\n    onPopOutToggle?: () => void;\n    fullscreenEnabled?: boolean;\n    fullscreen?: boolean;\n    onFullscreenToggle?: () => void;\n    hideSubtitlePlayerToggleEnabled?: boolean;\n    subtitlePlayerHidden?: boolean;\n    onHideSubtitlePlayerToggle?: () => void;\n    showOnMouseMovement: boolean;\n    theaterModeToggleEnabled?: boolean;\n    theaterModeEnabled?: boolean;\n    onTheaterModeToggle?: () => void;\n}\n\nexport default function Controls({\n    clock,\n    playing,\n    length,\n    offsetEnabled,\n    displayLength,\n    offset,\n    playbackRate,\n    playbackRateEnabled,\n    onAudioTrackSelected,\n    onSeek,\n    mousePositionRef,\n    onShow,\n    onPause,\n    onPlay,\n    onTabSelected,\n    onUnloadAudio,\n    onUnloadVideo,\n    onOffsetChange,\n    onPlaybackRateChange,\n    onVolumeChange,\n    disableKeyEvents,\n    playbackPreferences,\n    closeEnabled,\n    onClose,\n    volumeEnabled,\n    playMode,\n    playModeEnabled,\n    onPlayMode,\n    subtitlesEnabled,\n    subtitlesToggle,\n    onSubtitlesToggle,\n    videoFile,\n    audioFile,\n    audioTracks,\n    selectedAudioTrack,\n    tabs,\n    selectedTab,\n    popOutEnabled,\n    popOut,\n    onPopOutToggle,\n    fullscreenEnabled,\n    fullscreen,\n    onFullscreenToggle,\n    hideSubtitlePlayerToggleEnabled,\n    subtitlePlayerHidden,\n    onHideSubtitlePlayerToggle,\n    showOnMouseMovement,\n    theaterModeToggleEnabled,\n    theaterModeEnabled,\n    onTheaterModeToggle,\n}: ControlsProps) {\n    const classes = useControlStyles();\n    const [show, setShow] = useState<boolean>(true);\n    const [audioTrackSelectorOpen, setAudioTrackSelectorOpen] = useState<boolean>(false);\n    const [audioTrackSelectorAnchorEl, setAudioTrackSelectorAnchorEl] = useState<Element>();\n    const [tabSelectorOpen, setTabSelectorOpen] = useState<boolean>(false);\n    const [tabSelectorAnchorEl, setTabSelectorAnchorEl] = useState<Element>();\n    const [audioUnloaderOpen, setAudioUnloaderOpen] = useState<boolean>(false);\n    const [audioUnloaderAnchorEl, setAudioUnloaderAnchorEl] = useState<Element>();\n    const [videoUnloaderOpen, setVideoUnloaderOpen] = useState<boolean>(false);\n    const [videoUnloaderAnchorEl, setVideoUnloaderAnchorEl] = useState<Element>();\n    const [playModeSelectorOpen, setPlayModeSelectorOpen] = useState<boolean>(false);\n    const [playModeSelectorAnchorEl, setPlayModeSelectorAnchorEl] = useState<Element>();\n    const [showVolumeBar, setShowVolumeBar] = useState<boolean>(false);\n    const [volume, setVolume] = useState<number>(100);\n    const [lastCommittedVolume, setLastCommittedVolume] = useState<number>(100);\n\n    const lastMousePositionRef = useRef<Point>({ x: 0, y: 0 });\n    const lastShowTimestampRef = useRef<number>(Date.now());\n    const lastNumberInputChangeTimestampRef = useRef<number>(Date.now());\n    const lastShowRef = useRef<boolean>(true);\n    const forceShowRef = useRef<boolean>(false);\n    const [offsetInputWidth, setOffsetInputWidth] = useState<number>(5);\n    const [playbackRateInputWidth, setPlaybackRateInputWidth] = useState<number>(5);\n    const offsetInputRef = useRef<HTMLInputElement>();\n    const playbackRateInputRef = useRef<HTMLInputElement>();\n    const containerRef = useRef<HTMLDivElement>(null);\n    const closeButtonRef = useRef<HTMLButtonElement>(null);\n    const [, updateState] = useState<any>();\n    const forceUpdate = useCallback(() => updateState({}), []);\n\n    const handleSeek = useCallback(\n        (progress: number) => {\n            onSeek(progress);\n        },\n        [onSeek]\n    );\n\n    function handleMouseOver() {\n        forceShowRef.current = true;\n    }\n\n    function handleMouseOut() {\n        forceShowRef.current = false;\n    }\n\n    useEffect(() => {\n        const savedVolume = Number(playbackPreferences.volume);\n        setVolume(savedVolume);\n        onVolumeChange(savedVolume / 100);\n\n        if (savedVolume > 0) {\n            setLastCommittedVolume(savedVolume);\n        }\n    }, [playbackPreferences, onVolumeChange]);\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            let currentShow: boolean;\n\n            if (showOnMouseMovement) {\n                currentShow =\n                    Date.now() - lastShowTimestampRef.current < 2000 ||\n                    Math.pow(mousePositionRef.current.x - lastMousePositionRef.current.x, 2) +\n                        Math.pow(mousePositionRef.current.y - lastMousePositionRef.current.y, 2) >\n                        100;\n            } else {\n                currentShow =\n                    ((containerRef.current && mousePositionRef.current.y > containerRef.current.offsetTop - 20) ||\n                        (closeButtonRef.current &&\n                            mousePositionRef.current.y < closeButtonRef.current.offsetHeight + 20)) ??\n                    false;\n            }\n\n            currentShow =\n                currentShow ||\n                forceShowRef.current ||\n                offsetInputRef.current === document.activeElement ||\n                playbackRateInputRef.current === document.activeElement ||\n                Date.now() - lastNumberInputChangeTimestampRef.current < 2000;\n\n            if (currentShow && !lastShowRef.current) {\n                lastShowTimestampRef.current = Date.now();\n                setShow(currentShow);\n            } else if (!currentShow && lastShowRef.current) {\n                setShow(currentShow);\n            }\n\n            lastShowRef.current = currentShow;\n            lastMousePositionRef.current.x = mousePositionRef.current.x;\n            lastMousePositionRef.current.y = mousePositionRef.current.y;\n        }, 100);\n        return () => clearInterval(interval);\n    }, [mousePositionRef, showOnMouseMovement]);\n\n    useEffect(() => onShow?.(show), [onShow, show]);\n\n    const updateOffset = useCallback((offset: number) => {\n        if (offsetInputRef.current) {\n            if (offset === 0) {\n                offsetInputRef.current.value = '';\n                setOffsetInputWidth(5);\n            } else {\n                const offsetSeconds = offset / 1000;\n                const value = offsetSeconds >= 0 ? '+' + offsetSeconds.toFixed(2) : String(offsetSeconds.toFixed(2));\n                offsetInputRef.current.value = value;\n                lastNumberInputChangeTimestampRef.current = Date.now();\n                setOffsetInputWidth(value.length);\n            }\n            offsetInputRef.current.blur();\n        }\n    }, []);\n\n    const updatePlaybackRate = useCallback((playbackRate: number) => {\n        if (playbackRateInputRef.current) {\n            if (playbackRate === 1) {\n                playbackRateInputRef.current.value = '';\n                setPlaybackRateInputWidth(5);\n            } else {\n                const value = '×' + String(playbackRate.toFixed(2));\n                playbackRateInputRef.current.value = value;\n                lastNumberInputChangeTimestampRef.current = Date.now();\n                setPlaybackRateInputWidth(value.length);\n            }\n            playbackRateInputRef.current.blur();\n        }\n    }, []);\n\n    useEffect(() => {\n        if (disableKeyEvents) {\n            return;\n        }\n\n        function handleKey(event: KeyboardEvent) {\n            if (event.key === 'Enter') {\n                if (offsetInputRef.current === document.activeElement) {\n                    const newOffset = Number(offsetInputRef.current.value);\n\n                    if (newOffset === offset) {\n                        updateOffset(offset);\n                        return;\n                    }\n\n                    if (Number.isNaN(newOffset)) {\n                        return;\n                    }\n\n                    onOffsetChange(newOffset * 1000);\n                } else if (playbackRateInputRef.current === document.activeElement) {\n                    const newPlaybackRate = Number(playbackRateInputRef.current.value);\n\n                    if (playbackRate === newPlaybackRate) {\n                        updatePlaybackRate(playbackRate);\n                        return;\n                    }\n\n                    if (Number.isNaN(newPlaybackRate) || newPlaybackRate < 0.1 || newPlaybackRate > 5) {\n                        return;\n                    }\n\n                    onPlaybackRateChange(newPlaybackRate);\n                }\n            }\n        }\n\n        window.addEventListener('keydown', handleKey);\n\n        return () => {\n            window.removeEventListener('keydown', handleKey);\n        };\n    }, [\n        onOffsetChange,\n        onPlaybackRateChange,\n        updateOffset,\n        updatePlaybackRate,\n        offset,\n        playbackRate,\n        disableKeyEvents,\n    ]);\n\n    const handleNumberInputClicked = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n        const inputElement = e.target as HTMLInputElement;\n        inputElement.setSelectionRange(0, inputElement.value?.length || 0);\n    }, []);\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            forceUpdate();\n        }, 100);\n\n        return () => clearInterval(interval);\n    }, [forceUpdate]);\n\n    useEffect(() => {\n        updateOffset(offset);\n    }, [offset, updateOffset]);\n\n    useEffect(() => {\n        updatePlaybackRate(playbackRate);\n    }, [playbackRate, updatePlaybackRate]);\n\n    const handleAudioTrackSelectorClosed = useCallback(() => {\n        setAudioTrackSelectorAnchorEl(undefined);\n        setAudioTrackSelectorOpen(false);\n    }, []);\n\n    const handleAudioTrackSelectorOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setAudioTrackSelectorAnchorEl(e.currentTarget);\n        setAudioTrackSelectorOpen(true);\n    }, []);\n\n    const handleAudioTrackSelected = useCallback(\n        (id: string) => {\n            onAudioTrackSelected(id);\n            setAudioTrackSelectorAnchorEl(undefined);\n            setAudioTrackSelectorOpen(false);\n        },\n        [onAudioTrackSelected]\n    );\n\n    const handleTabSelectorClosed = useCallback(() => {\n        setTabSelectorAnchorEl(undefined);\n        setTabSelectorOpen(false);\n    }, []);\n\n    const handleTabSelectorOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setTabSelectorAnchorEl(e.currentTarget);\n        setTabSelectorOpen(true);\n    }, []);\n\n    const handleTabSelected = useCallback(\n        (tab: VideoTabModel) => {\n            onTabSelected?.(tab);\n            setTabSelectorAnchorEl(undefined);\n            setTabSelectorOpen(false);\n        },\n        [onTabSelected]\n    );\n\n    const handleAudioUnloaderClosed = useCallback(() => {\n        setAudioUnloaderAnchorEl(undefined);\n        setAudioUnloaderOpen(false);\n    }, []);\n\n    const handleAudioUnloaderOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setAudioUnloaderAnchorEl(e.currentTarget);\n        setAudioUnloaderOpen(true);\n    }, []);\n\n    const handleUnloadAudio = useCallback(() => {\n        onUnloadAudio?.();\n        setAudioUnloaderOpen(false);\n    }, [onUnloadAudio]);\n\n    const handleVideoUnloaderClosed = useCallback(() => {\n        setVideoUnloaderAnchorEl(undefined);\n        setVideoUnloaderOpen(false);\n    }, []);\n\n    const handleVideoUnloaderOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setVideoUnloaderAnchorEl(e.currentTarget);\n        setVideoUnloaderOpen(true);\n    }, []);\n\n    const handleUnloadVideo = useCallback(() => {\n        onUnloadVideo?.();\n        setVideoUnloaderOpen(false);\n    }, [onUnloadVideo]);\n\n    const handlePlayModeSelectorClosed = useCallback(() => {\n        setPlayModeSelectorAnchorEl(undefined);\n        setPlayModeSelectorOpen(false);\n    }, []);\n\n    const handlePlayModeSelectorOpened = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        setPlayModeSelectorAnchorEl(e.currentTarget);\n        setPlayModeSelectorOpen(true);\n    }, []);\n\n    const handlePlayModeSelected = useCallback(\n        (playMode: PlayMode) => {\n            onPlayMode?.(playMode);\n            setPlayModeSelectorAnchorEl(undefined);\n            setPlayModeSelectorOpen(false);\n        },\n        [onPlayMode]\n    );\n\n    const handleVolumeMouseOut = useCallback(() => setShowVolumeBar(false), []);\n    const handleVolumeMouseOver = useCallback(() => setShowVolumeBar(true), []);\n\n    const handleVolumeChange = useCallback(\n        (e: React.ChangeEvent<{}>, value: number | number[]) => {\n            if (typeof value !== 'number') {\n                return;\n            }\n\n            setVolume(value);\n            onVolumeChange(value / 100);\n        },\n        [onVolumeChange]\n    );\n\n    const handleVolumeChangeCommitted = useCallback(\n        (e: React.ChangeEvent<{}>, value: number | number[]) => {\n            if (typeof value !== 'number') {\n                return;\n            }\n\n            if (value > 0) {\n                setLastCommittedVolume(value);\n            }\n\n            playbackPreferences.volume = value;\n        },\n        [playbackPreferences]\n    );\n\n    const handleVolumeToggle = useCallback(() => {\n        setVolume((volume) => {\n            const newVolume = volume > 0 ? 0 : lastCommittedVolume;\n            onVolumeChange(newVolume / 100);\n            return newVolume;\n        });\n    }, [onVolumeChange, lastCommittedVolume]);\n\n    const progress = clock.progress(length);\n\n    return (\n        <React.Fragment>\n            <Fade in={show} timeout={200}>\n                <Grid container style={{ position: 'absolute', top: 0 }}>\n                    <Grid item style={{ flexGrow: 1 }}>\n                        {closeEnabled && (\n                            <IconButton\n                                ref={closeButtonRef}\n                                color=\"inherit\"\n                                className={classes.topButton}\n                                onClick={onClose}\n                                onMouseOver={handleMouseOver}\n                                onMouseOut={handleMouseOut}\n                            >\n                                <CloseIcon />\n                            </IconButton>\n                        )}\n                    </Grid>\n                    <Grid item>\n                        {theaterModeToggleEnabled && (\n                            <IconButton\n                                color=\"inherit\"\n                                className={theaterModeEnabled ? classes.topButton : classes.inactiveTopButton}\n                                onClick={onTheaterModeToggle}\n                                onMouseOver={handleMouseOver}\n                                onMouseOut={handleMouseOut}\n                            >\n                                <AspectRatioIcon />\n                            </IconButton>\n                        )}\n                        {hideSubtitlePlayerToggleEnabled && (\n                            <IconButton\n                                color=\"inherit\"\n                                className={classes.topButton}\n                                onClick={onHideSubtitlePlayerToggle}\n                                onMouseOver={handleMouseOver}\n                                onMouseOut={handleMouseOut}\n                            >\n                                {subtitlePlayerHidden ? <ArrowBackIcon /> : <ArrowForwardIcon />}\n                            </IconButton>\n                        )}\n                    </Grid>\n                </Grid>\n            </Fade>\n            <div\n                ref={containerRef}\n                className={classes.container}\n                onMouseOver={handleMouseOver}\n                onMouseOut={handleMouseOut}\n            >\n                <Fade in={show} timeout={200}>\n                    <div className={classes.subContainer}>\n                        <ProgressBar onSeek={handleSeek} value={progress * 100} />\n                        <Grid container className={classes.gridContainer} direction=\"row\">\n                            <Grid item>\n                                <IconButton color=\"inherit\" onClick={() => (playing ? onPause() : onPlay())}>\n                                    {playing ? (\n                                        <PauseIcon className={classes.button} />\n                                    ) : (\n                                        <PlayArrowIcon className={classes.button} />\n                                    )}\n                                </IconButton>\n                            </Grid>\n                            {volumeEnabled && (\n                                <Grid\n                                    item\n                                    onMouseOver={handleVolumeMouseOver}\n                                    onMouseOut={handleVolumeMouseOut}\n                                    className={\n                                        showVolumeBar\n                                            ? classes.volumeInputContainerShown\n                                            : classes.volumeInputContainerHidden\n                                    }\n                                >\n                                    <IconButton color=\"inherit\" onClick={handleVolumeToggle}>\n                                        {volume === 0 ? <VolumeOffIcon /> : <VolumeUpIcon />}\n                                    </IconButton>\n                                    <VolumeSlider\n                                        onChange={handleVolumeChange}\n                                        onChangeCommitted={handleVolumeChangeCommitted}\n                                        value={volume}\n                                        defaultValue={100}\n                                        classes={{\n                                            root: showVolumeBar ? classes.volumeInputShown : classes.volumeInputHidden,\n                                            thumb: showVolumeBar\n                                                ? classes.volumeInputThumbShown\n                                                : classes.volumeInputThumbHidden,\n                                        }}\n                                    />\n                                </Grid>\n                            )}\n                            <Grid item>\n                                <div className={classes.timeDisplay}>\n                                    {displayTime(progress * length)} / {displayTime(displayLength || length)}\n                                </div>\n                            </Grid>\n                            {offsetEnabled && (\n                                <Grid item>\n                                    <Tooltip title=\"Subtitle Offset\">\n                                        <Input\n                                            style={{\n                                                width: `${offsetInputWidth}ch`,\n                                            }}\n                                            inputRef={offsetInputRef}\n                                            disableUnderline={true}\n                                            className={classes.numberInput}\n                                            placeholder={'±' + Number(0).toFixed(2)}\n                                            onClick={handleNumberInputClicked}\n                                            onChange={(e) => setOffsetInputWidth(Math.max(5, e.target.value.length))}\n                                        />\n                                    </Tooltip>\n                                </Grid>\n                            )}\n                            {playbackRateEnabled && (\n                                <Grid item>\n                                    <Tooltip title=\"Playback Rate\">\n                                        <Input\n                                            style={{\n                                                width: `${playbackRateInputWidth}ch`,\n                                                marginLeft: 4,\n                                            }}\n                                            inputRef={playbackRateInputRef}\n                                            disableUnderline={true}\n                                            className={classes.numberInput}\n                                            placeholder={'×' + Number(1).toFixed(2)}\n                                            onClick={handleNumberInputClicked}\n                                            onChange={(e) =>\n                                                setPlaybackRateInputWidth(Math.max(5, e.target.value.length))\n                                            }\n                                        />\n                                    </Tooltip>\n                                </Grid>\n                            )}\n                            <Grid item style={{ flexGrow: 1 }}></Grid>\n                            {subtitlesToggle && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={onSubtitlesToggle}>\n                                        <SubtitlesIcon\n                                            className={subtitlesEnabled ? classes.button : classes.inactiveButton}\n                                        />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {videoFile && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={handleVideoUnloaderOpened}>\n                                        <VideocamIcon className={classes.button} />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {audioFile && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={handleAudioUnloaderOpened}>\n                                        <AudiotrackIcon className={classes.button} />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {audioTracks && audioTracks.length > 1 && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={handleAudioTrackSelectorOpened}>\n                                        <QueueMusicIcon className={classes.button} />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {tabs && tabs.length > 0 && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={handleTabSelectorOpened}>\n                                        <VideocamIcon\n                                            className={selectedTab ? classes.button : classes.inactiveButton}\n                                        />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {playModeEnabled && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={handlePlayModeSelectorOpened}>\n                                        <TuneIcon\n                                            className={playModeEnabled ? classes.button : classes.inactiveButton}\n                                        />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {popOutEnabled && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={onPopOutToggle}>\n                                        <OpenInNewIcon\n                                            className={classes.button}\n                                            style={popOut ? { transform: 'rotateX(180deg)' } : {}}\n                                        />\n                                    </IconButton>\n                                </Grid>\n                            )}\n                            {fullscreenEnabled && (\n                                <Grid item>\n                                    <IconButton color=\"inherit\" onClick={onFullscreenToggle}>\n                                        {fullscreen ? (\n                                            <FullscreenExitIcon className={classes.button} />\n                                        ) : (\n                                            <FullscreenIcon className={classes.button} />\n                                        )}\n                                    </IconButton>\n                                </Grid>\n                            )}\n                        </Grid>\n                    </div>\n                </Fade>\n                <TabSelector\n                    open={tabSelectorOpen && show}\n                    anchorEl={tabSelectorAnchorEl}\n                    tabs={tabs}\n                    selectedTab={selectedTab}\n                    onClose={handleTabSelectorClosed}\n                    onTabSelected={handleTabSelected}\n                />\n                <AudioTrackSelector\n                    open={audioTrackSelectorOpen && show}\n                    anchorEl={audioTrackSelectorAnchorEl}\n                    audioTracks={audioTracks}\n                    selectedAudioTrack={selectedAudioTrack}\n                    onClose={handleAudioTrackSelectorClosed}\n                    onAudioTrackSelected={handleAudioTrackSelected}\n                />\n                <MediaUnloader\n                    open={audioUnloaderOpen}\n                    anchorEl={audioUnloaderAnchorEl}\n                    file={audioFile}\n                    onClose={handleAudioUnloaderClosed}\n                    onUnload={handleUnloadAudio}\n                />\n                <MediaUnloader\n                    open={videoUnloaderOpen}\n                    anchorEl={videoUnloaderAnchorEl}\n                    file={videoFile}\n                    onClose={handleVideoUnloaderClosed}\n                    onUnload={handleUnloadVideo}\n                />\n                <PlayModeSelector\n                    open={playModeSelectorOpen && show}\n                    anchorEl={playModeSelectorAnchorEl}\n                    selectedPlayMode={playMode}\n                    onClose={handlePlayModeSelectorClosed}\n                    onPlayMode={handlePlayModeSelected}\n                />\n            </div>\n        </React.Fragment>\n    );\n}\n","import { RefObject } from \"react\";\n\nexport interface MediaElement {\n    currentTime: number;\n    readyState: number;\n    playbackRate: number;\n    oncanplay: ((ev: Event) => void) | null;\n    play: () => Promise<void>;\n    pause: () => void;\n    duration: number;\n}\n\nexport default class MediaAdapter {\n    private readonly ref: RefObject<MediaElement | undefined>;\n    private readonly readyResolves: (() => void)[];\n\n    constructor(ref: RefObject<MediaElement | undefined>) {\n        this.ref = ref;\n        this.readyResolves = [];\n    }\n\n    async seek(time: number) {\n        return new Promise((resolve, reject) => {\n            if (this.ref.current) {\n                this.ref.current.currentTime = time;\n                this._onMediaCanPlay(() => resolve(undefined));\n            } else {\n                resolve(undefined);\n            }\n        });\n    }\n\n    async onReady() {\n        return new Promise((resolve, reject) => {\n            if (this.ref.current) {\n                this._onMediaCanPlay(() => resolve(undefined));\n            } else {\n                resolve(undefined);\n            }\n        });\n    }\n\n    _onMediaCanPlay(callback: () => void) {\n        if (this.ref.current?.readyState === 4) {\n            callback();\n            return;\n        }\n\n        if (this.ref.current && !this.ref.current.oncanplay) {\n            this.ref.current.oncanplay = (e) => {\n                for (const resolve of this.readyResolves) {\n                    resolve();\n                }\n\n                this.readyResolves.length = 0;\n\n                if (this.ref.current) {\n                    this.ref.current.oncanplay = null;\n                }\n            };\n        }\n\n        this.readyResolves.push(callback);\n    }\n\n    play() {\n        this.ref.current?.play();\n    }\n\n    pause() {\n        this.ref.current?.pause();\n    }\n\n    playbackRate(playbackRate: number) {\n        if (this.ref.current) {\n            this.ref.current.playbackRate = playbackRate;\n        }\n    }\n}\n","import React, { useCallback, useEffect, useState, useMemo, useRef, createRef, RefObject } from 'react';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport { keysAreEqual } from '../services/util';\nimport { useWindowSize } from '../hooks/useWindowSize';\nimport {\n    AsbplayerSettingsProvider,\n    PostMineAction,\n    surroundingSubtitles,\n    SubtitleModel,\n    SubtitleCollection,\n    KeyBinder,\n    AutoPauseContext,\n} from '@project/common';\nimport { SubtitleTextImage } from '@project/common/components';\nimport FileCopy from '@material-ui/icons/FileCopy';\nimport IconButton from '@material-ui/core/IconButton';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableRow, { TableRowProps } from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\nimport Clock from '../services/Clock';\n\ninterface StylesProps {\n    compressed: boolean;\n    appBarHidden: boolean;\n    windowWidth: number;\n}\n\nconst useSubtitlePlayerStyles = makeStyles<Theme, StylesProps, string>((theme) => ({\n    container: {\n        height: ({ appBarHidden }) => (appBarHidden ? '100vh' : 'calc(100vh - 64px)'),\n        position: 'relative',\n        overflowX: 'hidden',\n        backgroundColor: theme.palette.background.default,\n        width: ({ compressed, windowWidth }) => (compressed ? Math.max(350, 0.25 * windowWidth) : '100%'),\n    },\n    table: {\n        backgroundColor: theme.palette.background.default,\n        marginBottom: 75, // so the last row doesn't collide with controls\n    },\n    noSubtitles: {\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n        padding: 15,\n        textAlign: 'center',\n    },\n}));\n\nconst useSubtitleRowStyles = makeStyles((theme) => ({\n    subtitleRow: {\n        '&:hover': {\n            backgroundColor: theme.palette.action.hover,\n        },\n    },\n    subtitle: {\n        fontSize: 20,\n        paddingRight: 0,\n        minWidth: 200,\n        width: '100%',\n        overflowWrap: 'anywhere',\n        whiteSpace: 'pre-wrap',\n    },\n    compressedSubtitle: {\n        fontSize: 16,\n        paddingRight: 0,\n        minWidth: 200,\n        width: '100%',\n        overflowWrap: 'anywhere',\n        whiteSpace: 'pre-wrap',\n    },\n    disabledSubtitle: {\n        color: 'transparent',\n        backgroundColor: theme.palette.action.disabledBackground,\n        borderRadius: 5,\n    },\n    timestamp: {\n        fontSize: 14,\n        color: '#aaaaaa',\n        textAlign: 'right',\n        paddingRight: 15,\n        paddingLeft: 5,\n    },\n    copyButton: {\n        textAlign: 'right',\n        padding: 0,\n    },\n}));\n\nexport interface DisplaySubtitleModel extends SubtitleModel {\n    displayTime: string;\n    index: number;\n}\n\ninterface SubtitleRowProps extends TableRowProps {\n    index: number;\n    compressed: boolean;\n    selected: boolean;\n    disabled: boolean;\n    subtitle: DisplaySubtitleModel;\n    copyButtonEnabled: boolean;\n    subtitleRef: RefObject<HTMLTableRowElement>;\n    onClickSubtitle: (index: number) => void;\n    onCopySubtitle: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>, index: number) => void;\n}\n\nconst SubtitleRow = React.memo((props: SubtitleRowProps) => {\n    const {\n        index,\n        selected,\n        subtitleRef,\n        onClickSubtitle,\n        onCopySubtitle,\n        compressed,\n        disabled,\n        subtitle,\n        copyButtonEnabled,\n        ...tableRowProps\n    } = props;\n    const classes = useSubtitleRowStyles();\n    const textRef = useRef<HTMLSpanElement>(null);\n    const [textSelected, setTextSelected] = useState<boolean>(false);\n    let className = compressed ? classes.compressedSubtitle : classes.subtitle;\n    let disabledClassName = disabled ? classes.disabledSubtitle : '';\n\n    if (subtitle.start < 0 || subtitle.end < 0) {\n        return null;\n    }\n\n    function handleMouseUp() {\n        const selection = document.getSelection();\n        const selected =\n            selection?.type === 'Range' && textRef.current?.isSameNode(selection.anchorNode?.parentNode ?? null);\n        setTextSelected(selected ?? false);\n    }\n\n    const content = subtitle.textImage ? (\n        <SubtitleTextImage availableWidth={window.screen.availWidth / 2} subtitle={subtitle} scale={1} />\n    ) : (\n        <span ref={textRef} className={disabledClassName}>\n            {subtitle.text}\n        </span>\n    );\n\n    return (\n        <TableRow\n            onClick={() => !textSelected && onClickSubtitle(index)}\n            onMouseUp={handleMouseUp}\n            ref={subtitleRef}\n            className={classes.subtitleRow}\n            selected={selected}\n            {...tableRowProps}\n        >\n            <TableCell className={className}>{content}</TableCell>\n            {copyButtonEnabled && (\n                <TableCell className={classes.copyButton}>\n                    <IconButton onClick={(e) => onCopySubtitle(e, index)}>\n                        <FileCopy fontSize={compressed ? 'small' : 'medium'} />\n                    </IconButton>\n                </TableCell>\n            )}\n            <TableCell className={classes.timestamp}>\n                <div>{`\\n${subtitle.displayTime}\\n`}</div>\n            </TableCell>\n        </TableRow>\n    );\n});\n\ninterface SubtitlePlayerProps {\n    clock: Clock;\n    onSeek: (progress: number, shouldPlay: boolean) => void;\n    onCopy: (\n        subtitle: SubtitleModel,\n        surroundingSubtitles: SubtitleModel[],\n        postMineAction: PostMineAction,\n        preventDuplicate: boolean\n    ) => void;\n    onOffsetChange: (offset: number) => void;\n    onToggleSubtitleTrack: (track: number) => void;\n    onSubtitlesSelected: (subtitles: SubtitleModel[]) => void;\n    autoPauseContext: AutoPauseContext;\n    playing: boolean;\n    subtitles?: DisplaySubtitleModel[];\n    subtitleCollection?: SubtitleCollection<DisplaySubtitleModel>;\n    length: number;\n    jumpToSubtitle?: SubtitleModel;\n    compressed: boolean;\n    copyButtonEnabled: boolean;\n    loading: boolean;\n    drawerOpen: boolean;\n    appBarHidden: boolean;\n    displayHelp?: string;\n    disableKeyEvents: boolean;\n    lastJumpToTopTimestamp: number;\n    hidden: boolean;\n    disabledSubtitleTracks: { [track: number]: boolean };\n    settingsProvider: AsbplayerSettingsProvider;\n    keyBinder: KeyBinder;\n}\n\nexport default function SubtitlePlayer({\n    clock,\n    onSeek,\n    onCopy,\n    onOffsetChange,\n    onToggleSubtitleTrack,\n    onSubtitlesSelected,\n    autoPauseContext,\n    playing,\n    subtitles,\n    subtitleCollection,\n    length,\n    jumpToSubtitle,\n    compressed,\n    copyButtonEnabled,\n    loading,\n    drawerOpen,\n    appBarHidden,\n    displayHelp,\n    disableKeyEvents,\n    lastJumpToTopTimestamp,\n    hidden,\n    disabledSubtitleTracks,\n    settingsProvider,\n    keyBinder,\n}: SubtitlePlayerProps) {\n    const playingRef = useRef<boolean>();\n    playingRef.current = playing;\n    const clockRef = useRef<Clock>(clock);\n    clockRef.current = clock;\n    const subtitleListRef = useRef<DisplaySubtitleModel[]>();\n    subtitleListRef.current = subtitles;\n    const subtitleRefs = useMemo<RefObject<HTMLTableRowElement>[]>(\n        () =>\n            subtitles\n                ? Array(subtitles.length)\n                      .fill(undefined)\n                      .map((_) => createRef<HTMLTableRowElement>())\n                : [],\n        [subtitles]\n    );\n    const subtitleCollectionRef = useRef<SubtitleCollection<DisplaySubtitleModel>>(\n        SubtitleCollection.empty<DisplaySubtitleModel>()\n    );\n    subtitleCollectionRef.current = subtitleCollection ?? SubtitleCollection.empty<DisplaySubtitleModel>();\n    const subtitleRefsRef = useRef<RefObject<HTMLTableRowElement>[]>([]);\n    subtitleRefsRef.current = subtitleRefs;\n    const disableKeyEventsRef = useRef<boolean>();\n    disableKeyEventsRef.current = disableKeyEvents;\n    const [selectedSubtitleIndexes, setSelectedSubtitleIndexes] = useState<{ [index: number]: boolean }>({});\n    const selectedSubtitleIndexesRef = useRef<{ [index: number]: boolean }>({});\n    const lengthRef = useRef<number>(0);\n    lengthRef.current = length;\n    const hiddenRef = useRef<boolean>(false);\n    hiddenRef.current = hidden;\n    const lastScrollTimestampRef = useRef<number>(0);\n    const requestAnimationRef = useRef<number>();\n    const containerRef = useRef<HTMLElement>();\n    const drawerOpenRef = useRef<boolean>();\n    drawerOpenRef.current = drawerOpen;\n    const [windowWidth] = useWindowSize(true);\n    const classes = useSubtitlePlayerStyles({ compressed, windowWidth, appBarHidden });\n    const autoPauseContextRef = useRef<AutoPauseContext>();\n    autoPauseContextRef.current = autoPauseContext;\n    const onSubtitlesSelectedRef = useRef<(subtitles: SubtitleModel[]) => void>();\n    onSubtitlesSelectedRef.current = onSubtitlesSelected;\n\n    // This effect should be scheduled only once as re-scheduling seems to cause performance issues.\n    // Therefore all of the state it operates on is contained in refs.\n    useEffect(() => {\n        const update = () => {\n            const subtitleRefs = subtitleRefsRef.current;\n            const clock = clockRef.current;\n            const currentSubtitleIndexes: { [index: number]: boolean } = {};\n            const timestamp = clock.time(lengthRef.current);\n\n            let slice = subtitleCollectionRef.current.subtitlesAt(timestamp);\n            const showing = slice.showing.length === 0 ? slice.lastShown ?? [] : slice.showing;\n            let smallestIndex: number | undefined;\n\n            for (const s of showing) {\n                currentSubtitleIndexes[s.index] = true;\n\n                if (smallestIndex === undefined || s.index < smallestIndex) {\n                    smallestIndex = s.index;\n                }\n            }\n\n            if (!keysAreEqual(currentSubtitleIndexes, selectedSubtitleIndexesRef.current)) {\n                selectedSubtitleIndexesRef.current = currentSubtitleIndexes;\n                setSelectedSubtitleIndexes(currentSubtitleIndexes);\n                onSubtitlesSelectedRef.current?.(showing);\n\n                if (smallestIndex !== undefined) {\n                    const scrollToSubtitleRef = subtitleRefs[smallestIndex];\n                    const allowScroll = !hiddenRef.current && Date.now() - lastScrollTimestampRef.current > 5000;\n\n                    if (scrollToSubtitleRef?.current && allowScroll) {\n                        scrollToSubtitleRef.current.scrollIntoView({\n                            block: 'center',\n                            inline: 'nearest',\n                            behavior: 'smooth',\n                        });\n                    }\n                }\n            }\n\n            if (slice.startedShowing !== undefined) {\n                autoPauseContextRef.current?.startedShowing(slice.startedShowing);\n            }\n\n            if (slice.willStopShowing !== undefined) {\n                autoPauseContextRef.current?.willStopShowing(slice.willStopShowing);\n            }\n\n            requestAnimationRef.current = requestAnimationFrame(update);\n        };\n\n        requestAnimationRef.current = requestAnimationFrame(update);\n\n        return () => {\n            if (requestAnimationRef.current !== undefined) {\n                cancelAnimationFrame(requestAnimationRef.current);\n            }\n        };\n    }, []);\n\n    const scrollToCurrentSubtitle = useCallback(() => {\n        const selectedSubtitleIndexes = selectedSubtitleIndexesRef.current;\n\n        if (!selectedSubtitleIndexes) {\n            return;\n        }\n\n        const indexes = Object.keys(selectedSubtitleIndexes);\n\n        if (indexes.length === 0) {\n            return;\n        }\n\n        const scrollToSubtitleRef = subtitleRefs[Number(indexes[0])];\n\n        scrollToSubtitleRef?.current?.scrollIntoView({\n            block: 'center',\n            inline: 'nearest',\n            behavior: 'smooth',\n        });\n    }, [subtitleRefs]);\n\n    useEffect(() => {\n        if (hidden) {\n            return;\n        }\n\n        function scrollIfVisible() {\n            if (document.visibilityState === 'visible') {\n                scrollToCurrentSubtitle();\n            }\n        }\n\n        document.addEventListener('visibilitychange', scrollIfVisible);\n\n        return () => document.removeEventListener('visibilitychange', scrollIfVisible);\n    }, [hidden, selectedSubtitleIndexes, subtitleRefs, scrollToCurrentSubtitle]);\n\n    useEffect(() => {\n        if (!hidden) {\n            scrollToCurrentSubtitle();\n        }\n    }, [hidden, scrollToCurrentSubtitle]);\n\n    useEffect(() => {\n        if (hiddenRef.current) {\n            return;\n        }\n\n        const subtitleRefs = subtitleRefsRef.current;\n\n        if (!subtitleRefs || subtitleRefs.length === 0) {\n            return;\n        }\n\n        const firstSubtitleRef = subtitleRefs[0];\n        firstSubtitleRef?.current?.scrollIntoView({\n            block: 'center',\n            inline: 'nearest',\n            behavior: 'smooth',\n        });\n    }, [lastJumpToTopTimestamp]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindAdjustOffset(\n            (event, offset) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onOffsetChange(offset);\n            },\n            () => disableKeyEvents,\n            () => subtitles\n        );\n\n        return () => unbind();\n    }, [keyBinder, onOffsetChange, disableKeyEvents, subtitles]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindOffsetToSubtitle(\n            (event, offset) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onOffsetChange(offset);\n            },\n            () => disableKeyEvents,\n            () => clock.time(length),\n            () => subtitles\n        );\n\n        return () => unbind();\n    }, [keyBinder, onOffsetChange, disableKeyEvents, clock, subtitles, length]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindSeekToSubtitle(\n            (event, subtitle) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onSeek(subtitle.start, playingRef.current ?? false);\n            },\n            () => disableKeyEvents,\n            () => clock.time(length),\n            () => subtitles\n        );\n\n        return () => unbind();\n    }, [keyBinder, onSeek, subtitles, disableKeyEvents, clock, length]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindSeekToBeginningOfCurrentSubtitle(\n            (event, subtitle) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onSeek(subtitle.start, playingRef.current ?? false);\n            },\n            () => disableKeyEvents,\n            () => clock.time(length),\n            () => subtitles\n        );\n\n        return () => unbind();\n    }, [keyBinder, onSeek, subtitles, disableKeyEvents, clock, length]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindSeekBackwardOrForward(\n            (event, forward) => {\n                event.stopPropagation();\n                event.preventDefault();\n                if (forward) {\n                    onSeek(Math.min(length, clock.time(length) + 10000), playingRef.current ?? false);\n                } else {\n                    onSeek(Math.max(0, clock.time(length) - 10000), playingRef.current ?? false);\n                }\n            },\n            () => disableKeyEvents\n        );\n\n        return () => unbind();\n    }, [keyBinder, clock, length, disableKeyEvents, onSeek]);\n\n    useEffect(() => {\n        function handleScroll() {\n            lastScrollTimestampRef.current = Date.now();\n        }\n\n        const table = containerRef.current;\n        table?.addEventListener('wheel', handleScroll);\n\n        return () => table?.removeEventListener('wheel', handleScroll);\n    }, [containerRef, lastScrollTimestampRef]);\n\n    useEffect(() => {\n        if (hidden) {\n            return;\n        }\n\n        if (!jumpToSubtitle || !subtitles) {\n            return;\n        }\n\n        let jumpToIndex = -1;\n        let i = 0;\n\n        for (let s of subtitles) {\n            if (s.originalStart === jumpToSubtitle.originalStart && s.text === jumpToSubtitle.text) {\n                jumpToIndex = i;\n                break;\n            }\n\n            ++i;\n        }\n\n        if (jumpToIndex !== -1) {\n            subtitleRefs[jumpToIndex]?.current?.scrollIntoView({\n                block: 'center',\n                inline: 'nearest',\n                behavior: 'smooth',\n            });\n        }\n    }, [hidden, jumpToSubtitle, subtitles, subtitleRefs]);\n\n    const calculateSurroundingSubtitlesForIndex = useCallback(\n        (index: number) => {\n            if (!selectedSubtitleIndexesRef.current || !subtitles) {\n                return [];\n            }\n\n            return surroundingSubtitles(\n                subtitles,\n                index,\n                settingsProvider.surroundingSubtitlesCountRadius,\n                settingsProvider.surroundingSubtitlesTimeRadius\n            );\n        },\n        [subtitles, settingsProvider.surroundingSubtitlesCountRadius, settingsProvider.surroundingSubtitlesTimeRadius]\n    );\n\n    const calculateSurroundingSubtitles = useCallback(() => {\n        if (!selectedSubtitleIndexesRef.current) {\n            return [];\n        }\n        const index = Math.min(...Object.keys(selectedSubtitleIndexesRef.current).map((i) => Number(i)));\n        return calculateSurroundingSubtitlesForIndex(index);\n    }, [calculateSurroundingSubtitlesForIndex]);\n\n    const calculateCurrentSubtitle = useCallback(() => {\n        const subtitleIndexes = Object.keys(selectedSubtitleIndexesRef.current).map((i) => Number(i));\n\n        if (!subtitles || !subtitleIndexes || subtitleIndexes.length === 0) {\n            return undefined;\n        }\n\n        const index = Math.min(...subtitleIndexes);\n        return subtitles[index];\n    }, [subtitles]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindCopy(\n            (event, subtitle) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onCopy(subtitle, calculateSurroundingSubtitles(), PostMineAction.none, false);\n            },\n            () => disableKeyEventsRef.current ?? false,\n            () => calculateCurrentSubtitle()\n        );\n\n        return () => unbind();\n    }, [keyBinder, calculateCurrentSubtitle, calculateSurroundingSubtitles, onCopy]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindToggleSubtitleTrackInList(\n            (event, track) => {\n                event.preventDefault();\n                event.stopPropagation();\n                onToggleSubtitleTrack(track);\n            },\n            () => disableKeyEvents\n        );\n\n        return () => unbind();\n    }, [keyBinder, disableKeyEvents, onToggleSubtitleTrack]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindAnkiExport(\n            (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n                const subtitleIndexes = Object.keys(selectedSubtitleIndexesRef.current).map((i) => Number(i));\n\n                if (subtitles && subtitleIndexes && subtitleIndexes.length > 0) {\n                    const index = Math.min(...subtitleIndexes);\n                    onCopy(\n                        subtitles[index],\n                        calculateSurroundingSubtitlesForIndex(index),\n                        PostMineAction.showAnkiDialog,\n                        true\n                    );\n                }\n            },\n            () => !subtitles || subtitles.length === 0 || disableKeyEvents\n        );\n\n        return () => unbind();\n    }, [keyBinder, onCopy, disableKeyEvents, subtitles, calculateSurroundingSubtitlesForIndex]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindUpdateLastCard(\n            (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n                const subtitleIndexes = Object.keys(selectedSubtitleIndexesRef.current).map((i) => Number(i));\n\n                if (subtitles && subtitleIndexes && subtitleIndexes.length > 0) {\n                    const index = Math.min(...subtitleIndexes);\n                    onCopy(\n                        subtitles[index],\n                        calculateSurroundingSubtitlesForIndex(index),\n                        PostMineAction.updateLastCard,\n                        true\n                    );\n                }\n            },\n            () => !subtitles || subtitles.length === 0 || disableKeyEvents\n        );\n\n        return () => unbind();\n    }, [keyBinder, onCopy, disableKeyEvents, subtitles, calculateSurroundingSubtitlesForIndex]);\n\n    const handleClick = useCallback(\n        (index: number) => {\n            if (!subtitles) {\n                return;\n            }\n\n            const selectedSubtitleIndexes = selectedSubtitleIndexesRef.current || {};\n            onSeek(subtitles[index].start, !playingRef.current && index in selectedSubtitleIndexes);\n        },\n        [subtitles, onSeek]\n    );\n\n    const handleCopy = useCallback(\n        (e: React.MouseEvent<HTMLButtonElement, MouseEvent>, index: number) => {\n            e.preventDefault();\n            e.stopPropagation();\n\n            if (!subtitles) {\n                return;\n            }\n\n            onCopy(subtitles[index], calculateSurroundingSubtitlesForIndex(index), PostMineAction.none, false);\n        },\n        [subtitles, calculateSurroundingSubtitlesForIndex, onCopy]\n    );\n\n    let subtitleTable = null;\n\n    if (!subtitles || subtitles.length === 0) {\n        if (!loading && displayHelp) {\n            subtitleTable = !loading && displayHelp && (\n                <div className={classes.noSubtitles}>\n                    <Typography variant=\"h6\">{displayHelp}</Typography>\n                </div>\n            );\n        } else if (subtitles && subtitles.length === 0) {\n            subtitleTable = (\n                <div className={classes.noSubtitles}>\n                    <Typography variant=\"h6\">No subtitles</Typography>\n                </div>\n            );\n        }\n    } else {\n        subtitleTable = (\n            <TableContainer className={classes.table}>\n                <Table>\n                    <TableBody>\n                        {subtitles.map((s: SubtitleModel, index: number) => {\n                            const selected = index in selectedSubtitleIndexes;\n\n                            return (\n                                <SubtitleRow\n                                    key={index}\n                                    index={index}\n                                    compressed={compressed}\n                                    selected={selected}\n                                    copyButtonEnabled={copyButtonEnabled}\n                                    disabled={disabledSubtitleTracks[s.track]}\n                                    subtitle={subtitles[index]}\n                                    subtitleRef={subtitleRefs[index]}\n                                    onClickSubtitle={handleClick}\n                                    onCopySubtitle={handleCopy}\n                                />\n                            );\n                        })}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        );\n    }\n\n    return (\n        <Paper square elevation={0} ref={containerRef} className={classes.container}>\n            {subtitleTable}\n        </Paper>\n    );\n}\n","import {\n    AlertMessage,\n    AnkiSettings,\n    AnkiSettingsToVideoMessage,\n    AppBarToggleMessageToVideoMessage,\n    AudioModel,\n    AudioTrackModel,\n    AudioTrackSelectedFromVideoMessage,\n    AudioTrackSelectedToVideoMessage,\n    CopyMessage,\n    CurrentTimeFromVideoMessage,\n    CurrentTimeToVideoMessage,\n    FullscreenToggleMessageToVideoMessage,\n    HideSubtitlePlayerToggleToVideoMessage,\n    ImageModel,\n    MiscSettings,\n    MiscSettingsToVideoMessage,\n    OffsetFromVideoMessage,\n    OffsetToVideoMessage,\n    PauseFromVideoMessage,\n    PlaybackRateFromVideoMessage,\n    PlaybackRateToVideoMessage,\n    PlayFromVideoMessage,\n    PlayMode,\n    PlayModeMessage,\n    PostMineAction,\n    ReadyFromVideoMessage,\n    ReadyStateFromVideoMessage,\n    ReadyToVideoMessage,\n    SubtitleModel,\n    SubtitleSettings,\n    SubtitleSettingsToVideoMessage,\n    SubtitlesToVideoMessage,\n    ToggleSubtitleTrackInListFromVideoMessage,\n} from '@project/common';\nimport { VideoProtocol } from './VideoProtocol';\n\nexport default class VideoChannel {\n    private readonly protocol: VideoProtocol;\n    private time: number;\n    private isReady: boolean;\n    private readyCallbacks: ((paused: boolean) => void)[];\n    private playCallbacks: ((echo: boolean) => void)[];\n    private pauseCallbacks: ((echo: boolean) => void)[];\n    private audioTrackSelectedCallbacks: ((audioTrack: string) => void)[];\n    private currentTimeCallbacks: ((currentTime: number, echo: boolean) => void)[];\n    private exitCallbacks: (() => void)[];\n    private offsetCallbacks: ((offset: number) => void)[];\n    private playbackRateCallbacks: ((playbackRate: number, echo: boolean) => void)[];\n    private popOutToggleCallbacks: (() => void)[];\n    private copyCallbacks: ((\n        subtitle: SubtitleModel,\n        surroundingSubtitles: SubtitleModel[],\n        audio: AudioModel | undefined,\n        image: ImageModel | undefined,\n        url: string | undefined,\n        postMineAction: PostMineAction,\n        preventDuplicate: boolean,\n        id: string | undefined\n    ) => void)[];\n    private playModeCallbacks: ((mode: PlayMode) => void)[];\n    private hideSubtitlePlayerToggleCallbacks: (() => void)[];\n    private appBarToggleCallbacks: (() => void)[];\n    private fullscreenToggleCallbacks: (() => void)[];\n    private ankiDialogRequestCallbacks: (() => void)[];\n    private toggleSubtitleTrackInListCallbacks: ((track: number) => void)[];\n\n    readyState: number;\n    oncanplay: ((ev: Event) => void) | null = null;\n    audioTracks?: AudioTrackModel[];\n    selectedAudioTrack?: string;\n    duration: number;\n    _playbackRate: number;\n\n    constructor(protocol: VideoProtocol) {\n        this.protocol = protocol;\n        this.time = 0;\n        this.duration = 0;\n        this.isReady = false;\n        this.readyState = 0;\n        this._playbackRate = 1;\n        this.selectedAudioTrack = undefined;\n        this.readyCallbacks = [];\n        this.playCallbacks = [];\n        this.pauseCallbacks = [];\n        this.currentTimeCallbacks = [];\n        this.audioTrackSelectedCallbacks = [];\n        this.exitCallbacks = [];\n        this.offsetCallbacks = [];\n        this.playbackRateCallbacks = [];\n        this.popOutToggleCallbacks = [];\n        this.copyCallbacks = [];\n        this.playModeCallbacks = [];\n        this.hideSubtitlePlayerToggleCallbacks = [];\n        this.appBarToggleCallbacks = [];\n        this.fullscreenToggleCallbacks = [];\n        this.ankiDialogRequestCallbacks = [];\n        this.toggleSubtitleTrackInListCallbacks = [];\n\n        const that = this;\n\n        this.protocol.onMessage = (event) => {\n            switch (event.data.command) {\n                case 'ready':\n                    const readyMessage = event.data as ReadyFromVideoMessage;\n\n                    that.duration = readyMessage.duration;\n                    that.isReady = true;\n                    that.audioTracks = readyMessage.audioTracks;\n                    that.selectedAudioTrack = readyMessage.selectedAudioTrack;\n                    that.readyState = 4;\n                    that.time = readyMessage.currentTime;\n                    this._playbackRate = readyMessage.playbackRate;\n\n                    for (let callback of that.readyCallbacks) {\n                        callback(readyMessage.paused);\n                    }\n                    break;\n                case 'readyState':\n                    const readyStateMessage = event.data as ReadyStateFromVideoMessage;\n\n                    that.readyState = readyStateMessage.value;\n                    if (that.readyState === 4) {\n                        that.oncanplay?.(new Event('canplay'));\n                    }\n                    break;\n                case 'play':\n                    const playMessage = event.data as PlayFromVideoMessage;\n\n                    for (let callback of that.playCallbacks) {\n                        callback(playMessage.echo);\n                    }\n                    break;\n                case 'pause':\n                    const pauseMessage = event.data as PauseFromVideoMessage;\n\n                    for (let callback of that.pauseCallbacks) {\n                        callback(pauseMessage.echo);\n                    }\n                    break;\n                case 'audioTrackSelected':\n                    const audioTrackSelectedMessage = event.data as AudioTrackSelectedFromVideoMessage;\n\n                    for (let callback of that.audioTrackSelectedCallbacks) {\n                        that.selectedAudioTrack = audioTrackSelectedMessage.id;\n                        callback(audioTrackSelectedMessage.id);\n                    }\n                    break;\n                case 'currentTime':\n                    const currentTimeMessage = event.data as CurrentTimeFromVideoMessage;\n\n                    for (let callback of that.currentTimeCallbacks) {\n                        callback(currentTimeMessage.value, currentTimeMessage.echo);\n                    }\n                    break;\n                case 'exit':\n                    for (let callback of that.exitCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'offset':\n                    const offsetMessage = event.data as OffsetFromVideoMessage;\n\n                    for (let callback of that.offsetCallbacks) {\n                        callback(offsetMessage.value);\n                    }\n                    break;\n                case 'playbackRate':\n                    const playbackRateMessage = event.data as PlaybackRateFromVideoMessage;\n\n                    for (const callback of that.playbackRateCallbacks) {\n                        callback(playbackRateMessage.value, playbackRateMessage.echo);\n                    }\n                    break;\n                case 'popOutToggle':\n                    for (let callback of that.popOutToggleCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'copy':\n                    for (let callback of that.copyCallbacks) {\n                        const copyMessage = event.data as CopyMessage;\n\n                        callback(\n                            copyMessage.subtitle,\n                            copyMessage.surroundingSubtitles,\n                            copyMessage.audio,\n                            copyMessage.image,\n                            copyMessage.url,\n                            copyMessage.postMineAction ?? PostMineAction.none,\n                            copyMessage.preventDuplicate ?? false,\n                            copyMessage.id\n                        );\n                    }\n                    break;\n                case 'playMode':\n                    for (let callback of that.playModeCallbacks) {\n                        const playModeMessage = event.data as PlayModeMessage;\n                        callback(playModeMessage.playMode);\n                    }\n                    break;\n                case 'hideSubtitlePlayerToggle':\n                    for (let callback of that.hideSubtitlePlayerToggleCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'appBarToggle':\n                    for (let callback of that.appBarToggleCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'fullscreenToggle':\n                    for (const callback of this.fullscreenToggleCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'sync':\n                    // ignore\n                    break;\n                case 'syncv2':\n                    // ignore\n                    break;\n                case 'ankiDialogRequest':\n                    for (let callback of that.ankiDialogRequestCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'toggleSubtitleTrackInList':\n                    const toggleSubtitleTrackInListMessage = event.data as ToggleSubtitleTrackInListFromVideoMessage;\n\n                    for (const callback of that.toggleSubtitleTrackInListCallbacks) {\n                        callback(toggleSubtitleTrackInListMessage.track);\n                    }\n                    break;\n                default:\n                    console.error('Unrecognized event ' + event.data.command);\n            }\n        };\n    }\n\n    get currentTime() {\n        return this.time;\n    }\n\n    set currentTime(value: number) {\n        this.time = value;\n        this.readyState = 3;\n        const message: CurrentTimeToVideoMessage = { command: 'currentTime', value: this.time };\n        this.protocol.postMessage(message);\n    }\n\n    get playbackRate() {\n        return this._playbackRate;\n    }\n\n\n    set playbackRate(playbackRate: number) {\n        const message: PlaybackRateToVideoMessage = { command: 'playbackRate', value: playbackRate };\n        this.protocol.postMessage(message);\n    }\n\n    onReady(callback: (paused: boolean) => void) {\n        if (this.isReady) {\n            callback(false);\n        }\n        this.readyCallbacks.push(callback);\n    }\n\n    onPlay(callback: (echo: boolean) => void) {\n        this.playCallbacks.push(callback);\n    }\n\n    onPause(callback: (echo: boolean) => void) {\n        this.pauseCallbacks.push(callback);\n    }\n\n    onCurrentTime(callback: (currentTime: number, echo: boolean) => void) {\n        this.currentTimeCallbacks.push(callback);\n    }\n\n    onAudioTrackSelected(callback: (id: string) => void) {\n        this.audioTrackSelectedCallbacks.push(callback);\n    }\n\n    onExit(callback: () => void) {\n        this.exitCallbacks.push(callback);\n    }\n\n    onOffset(callback: (offset: number) => void) {\n        this.offsetCallbacks.push(callback);\n    }\n\n    onPlaybackRate(callback: (playbackRate: number, echo: boolean) => void) {\n        this.playbackRateCallbacks.push(callback);\n    }\n\n    onPopOutToggle(callback: () => void) {\n        this.popOutToggleCallbacks.push(callback);\n    }\n\n    onCopy(\n        callback: (\n            subtitle: SubtitleModel,\n            surroundingSubtitles: SubtitleModel[],\n            audio: AudioModel | undefined,\n            image: ImageModel | undefined,\n            url: string | undefined,\n            postMineAction: PostMineAction,\n            preventDuplicate: boolean,\n            id: string | undefined\n        ) => void\n    ) {\n        this.copyCallbacks.push(callback);\n    }\n\n    onPlayMode(callback: (playMode: PlayMode) => void) {\n        this.playModeCallbacks.push(callback);\n    }\n\n    onHideSubtitlePlayerToggle(callback: () => void) {\n        this.hideSubtitlePlayerToggleCallbacks.push(callback);\n    }\n\n    onAppBarToggle(callback: () => void) {\n        this.appBarToggleCallbacks.push(callback);\n    }\n\n    onFullscreenToggle(callback: () => void) {\n        this.fullscreenToggleCallbacks.push(callback);\n    }\n\n    onAnkiDialogRequest(callback: () => void) {\n        this.ankiDialogRequestCallbacks.push(callback);\n    }\n\n    onToggleSubtitleTrackInList(callback: (track: number) => void) {\n        this.toggleSubtitleTrackInListCallbacks.push(callback);\n    }\n\n    ready(duration: number, videoFileName?: string) {\n        const message: ReadyToVideoMessage = { command: 'ready', duration, videoFileName };\n        this.protocol.postMessage(message);\n    }\n\n    init() {\n        this.protocol.postMessage({ command: 'init' });\n    }\n\n    // Return a promise to implement the analogous HTMLMediaElement method\n    play(): Promise<void> {\n        this.protocol.postMessage({ command: 'play' });\n        return new Promise((resolve, reject) => resolve());\n    }\n\n    pause() {\n        this.protocol.postMessage({ command: 'pause' });\n    }\n\n    audioTrackSelected(id: string) {\n        const message: AudioTrackSelectedToVideoMessage = { command: 'audioTrackSelected', id: id };\n        this.protocol.postMessage(message);\n    }\n\n    subtitles(subtitles: SubtitleModel[], subtitleFileNames: string[]) {\n        this.protocol.postMessage({\n            command: 'subtitles',\n            value: subtitles,\n            name: subtitleFileNames.length > 0 ? subtitleFileNames[0] : null,\n            names: subtitleFileNames,\n        } as SubtitlesToVideoMessage);\n    }\n\n    offset(offset: number) {\n        const message: OffsetToVideoMessage = { command: 'offset', value: offset };\n        this.protocol.postMessage(message);\n    }\n\n    subtitleSettings(settings: SubtitleSettings) {\n        const message: SubtitleSettingsToVideoMessage = { command: 'subtitleSettings', value: settings };\n        this.protocol.postMessage(message);\n    }\n\n    playMode(playMode: PlayMode) {\n        const message: PlayModeMessage = {\n            command: 'playMode',\n            playMode: playMode,\n        };\n        this.protocol.postMessage(message);\n    }\n\n    hideSubtitlePlayerToggle(hidden: boolean) {\n        const message: HideSubtitlePlayerToggleToVideoMessage = {\n            command: 'hideSubtitlePlayerToggle',\n            value: hidden,\n        };\n        this.protocol.postMessage(message);\n    }\n\n    appBarToggle(hidden: boolean) {\n        const message: AppBarToggleMessageToVideoMessage = {\n            command: 'appBarToggle',\n            value: hidden,\n        };\n        this.protocol.postMessage(message);\n    }\n\n    fullscreenToggle(fullscreen: boolean) {\n        const message: FullscreenToggleMessageToVideoMessage = {\n            command: 'fullscreenToggle',\n            value: fullscreen,\n        };\n        this.protocol.postMessage(message);\n    }\n\n    ankiSettings(settings: AnkiSettings) {\n        const message: AnkiSettingsToVideoMessage = { command: 'ankiSettings', value: settings };\n        this.protocol.postMessage(message);\n    }\n\n    miscSettings(settings: MiscSettings) {\n        const message: MiscSettingsToVideoMessage = { command: 'miscSettings', value: settings };\n        this.protocol.postMessage(message);\n    }\n\n    alert(message: string, severity: string) {\n        const msg: AlertMessage = { command: 'alert', message, severity };\n        this.protocol.postMessage(msg);\n    }\n\n    close() {\n        this.protocol.postMessage({ command: 'close' });\n        this.protocol.close();\n        this.readyCallbacks = [];\n        this.playCallbacks = [];\n        this.pauseCallbacks = [];\n        this.currentTimeCallbacks = [];\n        this.audioTrackSelectedCallbacks = [];\n        this.exitCallbacks = [];\n        this.offsetCallbacks = [];\n        this.playbackRateCallbacks = [];\n        this.popOutToggleCallbacks = [];\n        this.copyCallbacks = [];\n        this.playModeCallbacks = [];\n        this.hideSubtitlePlayerToggleCallbacks = [];\n        this.appBarToggleCallbacks = [];\n        this.fullscreenToggleCallbacks = [];\n        this.ankiDialogRequestCallbacks = [];\n        this.toggleSubtitleTrackInListCallbacks = [];\n    }\n}\n","import React, { useEffect, useState, useMemo, useCallback, useRef, MutableRefObject } from 'react';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport { v4 as uuidv4 } from 'uuid';\nimport {\n    AsbplayerSettingsProvider,\n    AudioModel,\n    AudioTrackModel,\n    AutoPauseContext,\n    AutoPausePreference,\n    ImageModel,\n    KeyBinder,\n    mockSurroundingSubtitles,\n    PlayMode,\n    PostMineAction,\n    SubtitleCollection,\n    SubtitleModel,\n    VideoTabModel,\n} from '@project/common';\nimport { timeDurationDisplay } from '../services/util';\nimport BroadcastChannelVideoProtocol from '../services/BroadcastChannelVideoProtocol';\nimport ChromeTabVideoProtocol from '../services/ChromeTabVideoProtocol';\nimport Clock from '../services/Clock';\nimport Controls, { Point } from './Controls';\nimport Grid from '@material-ui/core/Grid';\nimport MediaAdapter, { MediaElement } from '../services/MediaAdapter';\nimport SubtitlePlayer, { DisplaySubtitleModel } from './SubtitlePlayer';\nimport VideoChannel from '../services/VideoChannel';\nimport ChromeExtension from '../services/ChromeExtension';\nimport SubtitleReader from '../services/SubtitleReader';\nimport PlaybackPreferences from '../services/PlaybackPreferences';\nimport lte from 'semver/functions/lte';\nimport gte from 'semver/functions/gte';\n\ninterface StylesProps {\n    appBarHidden: boolean;\n}\n\nconst useStyles = makeStyles<Theme, StylesProps>({\n    root: ({ appBarHidden }) => ({\n        height: appBarHidden ? '100vh' : 'calc(100vh - 64px)',\n        position: 'relative',\n        overflowX: 'hidden',\n    }),\n    container: {\n        width: '100%',\n        height: '100%',\n    },\n    videoFrame: {\n        width: '100%',\n        height: '100%',\n        border: 0,\n        display: 'block',\n    },\n});\n\nfunction trackLength(\n    audioRef: MutableRefObject<HTMLAudioElement | null>,\n    videoRef: MutableRefObject<MediaElement | undefined>,\n    subtitles: SubtitleModel[] | undefined,\n    useOffset?: boolean\n) {\n    let subtitlesLength;\n    if (subtitles && subtitles.length > 0) {\n        if (useOffset) {\n            subtitlesLength = subtitles[subtitles.length - 1].end;\n        } else {\n            subtitlesLength = subtitles[subtitles.length - 1].originalEnd;\n        }\n    } else {\n        subtitlesLength = 0;\n    }\n\n    const audioLength = audioRef.current && audioRef.current.duration ? 1000 * audioRef.current.duration : 0;\n\n    const videoLength = videoRef.current && videoRef.current.duration ? 1000 * videoRef.current.duration : 0;\n\n    return Math.max(videoLength, Math.max(subtitlesLength, audioLength));\n}\n\nexport interface MediaSources {\n    subtitleFiles: File[];\n    flattenSubtitleFiles?: boolean;\n    audioFile?: File;\n    audioFileUrl?: string;\n    videoFile?: File;\n    videoFileUrl?: string;\n}\n\nexport interface AnkiDialogFinishedRequest {\n    resume: boolean;\n    timestamp: number;\n}\n\ninterface PlayerProps {\n    sources: MediaSources;\n    subtitleReader: SubtitleReader;\n    settingsProvider: AsbplayerSettingsProvider;\n    playbackPreferences: PlaybackPreferences;\n    keyBinder: KeyBinder;\n    extension: ChromeExtension;\n    videoFrameRef: MutableRefObject<HTMLIFrameElement | null>;\n    videoChannelRef: MutableRefObject<VideoChannel | null>;\n    drawerOpen: boolean;\n    appBarHidden: boolean;\n    videoFullscreen: boolean;\n    hideSubtitlePlayer: boolean;\n    videoPopOut: boolean;\n    tab?: VideoTabModel;\n    availableTabs: VideoTabModel[];\n    ankiDialogRequested: boolean;\n    ankiDialogFinishedRequest: AnkiDialogFinishedRequest;\n    onError: (error: string) => void;\n    onUnloadAudio: (url: string) => void;\n    onUnloadVideo: (url: string) => void;\n    onCopy: (\n        subtitle: SubtitleModel,\n        surroundingSubtitles: SubtitleModel[],\n        audioFile: File | undefined,\n        videoFile: File | undefined,\n        subtitleFile: File | undefined,\n        mediaTimestamp: number | undefined,\n        audioTrack: string | undefined,\n        filePlaybackRate: number | undefined,\n        audio: AudioModel | undefined,\n        image: ImageModel | undefined,\n        url: string | undefined,\n        postMineAction: PostMineAction | undefined,\n        preventDuplicate: boolean | undefined,\n        id: string | undefined\n    ) => void;\n    onLoaded: () => void;\n    onTabSelected: (tab: VideoTabModel) => void;\n    onAnkiDialogRequest: () => void;\n    onAppBarToggle: () => void;\n    onFullscreenToggle: () => void;\n    onHideSubtitlePlayer: () => void;\n    onVideoPopOut: () => void;\n    onPlayModeChangedViaBind: (oldPlayMode: PlayMode, newPlayMode: PlayMode) => void;\n    disableKeyEvents: boolean;\n    jumpToSubtitle?: SubtitleModel;\n    rewindSubtitle?: SubtitleModel;\n}\n\nexport default function Player({\n    sources: { subtitleFiles, flattenSubtitleFiles, audioFile, audioFileUrl, videoFile, videoFileUrl },\n    subtitleReader,\n    settingsProvider,\n    playbackPreferences,\n    keyBinder,\n    extension,\n    videoFrameRef,\n    videoChannelRef,\n    drawerOpen,\n    appBarHidden,\n    videoFullscreen,\n    hideSubtitlePlayer,\n    videoPopOut,\n    tab,\n    availableTabs,\n    ankiDialogRequested,\n    ankiDialogFinishedRequest,\n    onError,\n    onUnloadAudio,\n    onUnloadVideo,\n    onCopy,\n    onLoaded,\n    onTabSelected,\n    onAnkiDialogRequest,\n    onAppBarToggle,\n    onFullscreenToggle,\n    onHideSubtitlePlayer,\n    onVideoPopOut,\n    onPlayModeChangedViaBind,\n    disableKeyEvents,\n    jumpToSubtitle,\n    rewindSubtitle,\n}: PlayerProps) {\n    const [playMode, setPlayMode] = useState<PlayMode>(PlayMode.normal);\n    const playModeRef = useRef<PlayMode>();\n    playModeRef.current = playMode;\n    const [subtitles, setSubtitles] = useState<DisplaySubtitleModel[]>();\n    const subtitleCollection = useMemo<SubtitleCollection<DisplaySubtitleModel>>(\n        () =>\n            new SubtitleCollection(subtitles ?? [], {\n                returnLastShown: true,\n                returnNextToShow: playMode === PlayMode.condensed,\n                showingCheckRadiusMs: 100,\n            }),\n        [subtitles, playMode]\n    );\n    const subtitlesRef = useRef<SubtitleModel[]>();\n    subtitlesRef.current = subtitles;\n    const playModeEnabled = subtitles && subtitles.length > 0 && Boolean(videoFileUrl || audioFileUrl);\n    const [loadingSubtitles, setLoadingSubtitles] = useState<boolean>(false);\n    const [playing, setPlaying] = useState<boolean>(false);\n    const [lastJumpToTopTimestamp, setLastJumpToTopTimestamp] = useState<number>(0);\n    const [offset, setOffset] = useState<number>(0);\n    const [playbackRate, setPlaybackRate] = useState<number>(1);\n    const playingRef = useRef<boolean>();\n    playingRef.current = playing;\n    const [, updateState] = useState<any>();\n    const [audioTracks, setAudioTracks] = useState<AudioTrackModel[]>();\n    const [selectedAudioTrack, setSelectedAudioTrack] = useState<string>();\n    const [channelId, setChannelId] = useState<string>();\n    const [, setResumeOnFinishedAnkiDialogRequest] = useState<boolean>(false);\n    const hideSubtitlePlayerRef = useRef<boolean>();\n    hideSubtitlePlayerRef.current = hideSubtitlePlayer;\n    const [disabledSubtitleTracks, setDisabledSubtitleTracks] = useState<{ [track: number]: boolean }>({});\n    const forceUpdate = useCallback(() => updateState({}), []);\n    const mousePositionRef = useRef<Point>({ x: 0, y: 0 });\n    const audioRef = useRef<HTMLAudioElement>(null);\n    const videoRef = useRef<MediaElement>();\n    const mediaAdapter = useMemo(() => {\n        if (audioFileUrl) {\n            return new MediaAdapter(audioRef);\n        } else if (videoFileUrl || tab) {\n            return new MediaAdapter(videoRef);\n        }\n\n        return new MediaAdapter({ current: null });\n    }, [audioFileUrl, videoFileUrl, tab]);\n    const clock = useMemo<Clock>(() => new Clock(), []);\n    const classes = useStyles({ appBarHidden });\n    const lengthRef = useRef<number>(0);\n    lengthRef.current = trackLength(audioRef, videoRef, subtitles, true);\n\n    const handleOnStartedShowingSubtitle = useCallback(() => {\n        if (\n            playMode !== PlayMode.autoPause ||\n            settingsProvider.autoPausePreference !== AutoPausePreference.atStart ||\n            videoFileUrl // Let VideoPlayer do the auto-pausing\n        ) {\n            return;\n        }\n\n        pause(clock, mediaAdapter, true);\n    }, [playMode, clock, mediaAdapter, videoFileUrl, settingsProvider]);\n\n    const handleOnWillStopShowingSubtitle = useCallback(() => {\n        if (\n            playMode !== PlayMode.autoPause ||\n            settingsProvider.autoPausePreference !== AutoPausePreference.atEnd ||\n            videoFileUrl // Let VideoPlayer do the auto-pausing\n        ) {\n            return;\n        }\n\n        pause(clock, mediaAdapter, true);\n    }, [playMode, clock, mediaAdapter, videoFileUrl, settingsProvider]);\n\n    const autoPauseContext = useMemo(() => {\n        const context = new AutoPauseContext();\n        context.onStartedShowing = handleOnStartedShowingSubtitle;\n        context.onWillStopShowing = handleOnWillStopShowingSubtitle;\n        return context;\n    }, [handleOnStartedShowingSubtitle, handleOnWillStopShowingSubtitle]);\n    const autoPauseContextRef = useRef<AutoPauseContext>();\n    autoPauseContextRef.current = autoPauseContext;\n\n    const seek = useCallback(\n        async (time: number, clock: Clock, forwardToMedia: boolean) => {\n            clock.setTime(time);\n            forceUpdate();\n\n            if (forwardToMedia) {\n                await mediaAdapter.seek(time / 1000);\n            }\n\n            autoPauseContextRef.current?.clear();\n        },\n        [forceUpdate, mediaAdapter]\n    );\n\n    const updatePlaybackRate = useCallback(\n        (playbackRate: number, forwardToMedia: boolean) => {\n            clock.rate = playbackRate;\n            setPlaybackRate(playbackRate);\n\n            if (forwardToMedia) {\n                mediaAdapter.playbackRate(playbackRate);\n            }\n        },\n        [clock, mediaAdapter]\n    );\n\n    const applyOffset = useCallback(\n        (offset: number, forwardToVideo: boolean) => {\n            setOffset(offset);\n            setSubtitles((subtitles) => {\n                if (!subtitles) {\n                    return;\n                }\n\n                const length = subtitles.length > 0 ? subtitles[subtitles.length - 1].end + offset : 0;\n\n                const newSubtitles = subtitles.map((s, i) => ({\n                    text: s.text,\n                    textImage: s.textImage,\n                    start: s.originalStart + offset,\n                    originalStart: s.originalStart,\n                    end: s.originalEnd + offset,\n                    originalEnd: s.originalEnd,\n                    displayTime: timeDurationDisplay(s.originalStart + offset, length),\n                    track: s.track,\n                    index: i,\n                }));\n\n                if (forwardToVideo) {\n                    if (videoRef.current instanceof VideoChannel) {\n                        videoRef.current.offset(offset);\n\n                        // Older versions of extension don't support the offset message\n                        if (tab !== undefined && extension.installed && lte(extension.version, '0.22.0')) {\n                            videoRef.current.subtitles(\n                                newSubtitles,\n                                subtitleFiles.map((f) => f.name)\n                            );\n                        }\n                    }\n                }\n\n                return newSubtitles;\n            });\n            playbackPreferences.offset = offset;\n        },\n        [subtitleFiles, extension, playbackPreferences, tab]\n    );\n\n    useEffect(() => {\n        let channel: VideoChannel | undefined = undefined;\n        let channelClosed = false;\n\n        async function init() {\n            if (videoRef.current instanceof VideoChannel) {\n                videoRef.current.close();\n            }\n            videoRef.current = undefined;\n            videoChannelRef.current = null;\n            clock.setTime(0);\n            clock.stop();\n            const offset = playbackPreferences.offset;\n            setOffset(offset);\n            setPlaying(false);\n            setAudioTracks(undefined);\n            setSelectedAudioTrack(undefined);\n            setPlayMode(PlayMode.normal);\n\n            if (audioRef.current) {\n                audioRef.current.currentTime = 0;\n                audioRef.current.pause();\n            }\n\n            let subtitles: DisplaySubtitleModel[] | undefined;\n\n            if (subtitleFiles.length > 0) {\n                setLoadingSubtitles(true);\n\n                try {\n                    const nodes = await subtitleReader.subtitles(subtitleFiles, flattenSubtitleFiles);\n                    const length = nodes.length > 0 ? nodes[nodes.length - 1].end + offset : 0;\n\n                    subtitles = nodes.map((s, i) => ({\n                        text: s.text,\n                        textImage: s.textImage,\n                        start: s.start + offset,\n                        originalStart: s.start,\n                        end: s.end + offset,\n                        originalEnd: s.end,\n                        displayTime: timeDurationDisplay(s.start + offset, length),\n                        track: s.track,\n                        index: i,\n                    }));\n\n                    setSubtitles(subtitles);\n                    setLastJumpToTopTimestamp(Date.now());\n                } catch (e) {\n                    if (e instanceof Error) {\n                        onError(e.message);\n                    } else {\n                        onError(String(e));\n                    }\n\n                    setSubtitles([]);\n                } finally {\n                    setLoadingSubtitles(false);\n                }\n            } else {\n                subtitles = undefined;\n            }\n\n            if (audioFileUrl) {\n                await mediaAdapter.onReady();\n                forceUpdate();\n            } else if (videoFileUrl || tab) {\n                if (channelClosed) {\n                    return;\n                }\n\n                if (videoFileUrl) {\n                    const channelId = uuidv4();\n                    channel = new VideoChannel(new BroadcastChannelVideoProtocol(channelId));\n                    setChannelId(channelId);\n                } else if (tab) {\n                    channel = new VideoChannel(new ChromeTabVideoProtocol(tab.id, tab.src, extension));\n                    channel.init();\n                } else {\n                    // Not possible\n                    // But throw error so typescript recognizes channel as defined\n                    throw new Error('Unreachable code');\n                }\n\n                videoRef.current = channel;\n                videoChannelRef.current = channel;\n                let subscribed = false;\n\n                channel.onExit(() => videoFileUrl && onUnloadVideo(videoFileUrl));\n                channel.onPopOutToggle(() => onVideoPopOut());\n                channel.onHideSubtitlePlayerToggle(() => {\n                    onHideSubtitlePlayer();\n                });\n                channel.onAppBarToggle(() => {\n                    onAppBarToggle();\n                });\n                channel.onFullscreenToggle(() => {\n                    onFullscreenToggle();\n                });\n                channel.onReady((paused) => {\n                    lengthRef.current = trackLength(audioRef, videoRef, subtitlesRef.current);\n                    channel?.ready(lengthRef.current, videoFile?.name);\n\n                    if (subtitlesRef.current) {\n                        channel?.subtitleSettings(settingsProvider.subtitleSettings);\n                        channel?.subtitles(\n                            subtitlesRef.current,\n                            flattenSubtitleFiles ? [subtitleFiles[0].name] : subtitleFiles.map((f) => f.name)\n                        );\n                    }\n\n                    channel?.ankiSettings(settingsProvider.ankiSettings);\n                    channel?.miscSettings(settingsProvider.miscSettings);\n                    channel?.playMode(playModeRef.current!);\n                    channel?.hideSubtitlePlayerToggle(hideSubtitlePlayerRef.current ?? false);\n\n                    if (channel?.audioTracks && channel?.audioTracks?.length > 1) {\n                        setAudioTracks(channel?.audioTracks);\n                        setSelectedAudioTrack(channel?.selectedAudioTrack);\n                    } else {\n                        setAudioTracks(undefined);\n                        setSelectedAudioTrack(undefined);\n                    }\n\n                    if (videoRef.current) {\n                        clock.setTime(videoRef.current.currentTime * 1000);\n                    }\n\n                    if (paused) {\n                        clock.stop();\n                    } else {\n                        clock.start();\n                    }\n\n                    setPlaying(!paused);\n\n                    if (channel?.playbackRate) {\n                        clock.rate = channel.playbackRate;\n                        setPlaybackRate(channel.playbackRate);\n                    }\n\n                    if (!subscribed) {\n                        channel?.onPlay((forwardToMedia) => play(clock, mediaAdapter, forwardToMedia));\n                        channel?.onPause((forwardToMedia) => pause(clock, mediaAdapter, forwardToMedia));\n                        channel?.onOffset((offset) => applyOffset(Math.max(-lengthRef.current ?? 0, offset), false));\n                        channel?.onPlaybackRate((playbackRate, forwardToMedia) =>\n                            updatePlaybackRate(playbackRate, forwardToMedia)\n                        );\n                        channel?.onCopy(\n                            (subtitle, surroundingSubtitles, audio, image, url, postMineAction, preventDuplicate, id) =>\n                                onCopy(\n                                    subtitle,\n                                    surroundingSubtitles,\n                                    audioFile,\n                                    videoFile,\n                                    subtitle ? subtitleFiles[subtitle.track] : undefined,\n                                    clock.time(lengthRef.current),\n                                    channel?.selectedAudioTrack,\n                                    channel?.playbackRate,\n                                    audio,\n                                    image,\n                                    url,\n                                    postMineAction,\n                                    preventDuplicate,\n                                    id\n                                )\n                        );\n                        channel?.onPlayMode((playMode) => {\n                            setPlayMode(playMode);\n                            channel?.playMode(playMode);\n                        });\n                        channel?.onCurrentTime(async (currentTime, forwardToMedia) => {\n                            if (playingRef.current) {\n                                clock.stop();\n                            }\n\n                            await seek(currentTime * 1000, clock, forwardToMedia);\n\n                            if (playingRef.current) {\n                                clock.start();\n                            }\n                        });\n                        channel?.onAudioTrackSelected(async (id) => {\n                            if (playingRef.current) {\n                                clock.stop();\n                            }\n\n                            await mediaAdapter.onReady();\n                            if (playingRef.current) {\n                                clock.start();\n                            }\n\n                            setSelectedAudioTrack(id);\n                        });\n                        channel?.onAnkiDialogRequest(() => onAnkiDialogRequest());\n                        channel?.onToggleSubtitleTrackInList((track) =>\n                            setDisabledSubtitleTracks((tracks) => {\n                                const newTracks = { ...tracks };\n                                newTracks[track] = !tracks[track];\n                                return newTracks;\n                            })\n                        );\n\n                        subscribed = true;\n                    }\n                });\n            }\n        }\n\n        init().then(() => onLoaded());\n\n        return () => {\n            channel?.close();\n            channelClosed = true;\n        };\n    }, [\n        subtitleReader,\n        extension,\n        settingsProvider,\n        playbackPreferences,\n        clock,\n        mediaAdapter,\n        seek,\n        onLoaded,\n        onError,\n        onUnloadVideo,\n        onCopy,\n        onAnkiDialogRequest,\n        onHideSubtitlePlayer,\n        onAppBarToggle,\n        onFullscreenToggle,\n        onVideoPopOut,\n        subtitleFiles,\n        audioFile,\n        audioFileUrl,\n        videoFile,\n        videoFileUrl,\n        tab,\n        forceUpdate,\n        videoFrameRef,\n        videoChannelRef,\n        applyOffset,\n        updatePlaybackRate,\n        flattenSubtitleFiles,\n    ]);\n\n    function play(clock: Clock, mediaAdapter: MediaAdapter, forwardToMedia: boolean) {\n        setPlaying(true);\n        clock.start();\n\n        if (forwardToMedia) {\n            mediaAdapter.play();\n        }\n    }\n\n    function pause(clock: Clock, mediaAdapter: MediaAdapter, forwardToMedia: boolean) {\n        setPlaying(false);\n        clock.stop();\n\n        if (forwardToMedia) {\n            mediaAdapter.pause();\n        }\n    }\n\n    useEffect(() => {\n        if (ankiDialogFinishedRequest && ankiDialogFinishedRequest.timestamp > 0) {\n            setResumeOnFinishedAnkiDialogRequest((resumeOnFinishedAnkiDialogRequest) => {\n                if (resumeOnFinishedAnkiDialogRequest && ankiDialogFinishedRequest.resume) {\n                    play(clock, mediaAdapter, true);\n                }\n\n                return false;\n            });\n        }\n    }, [ankiDialogFinishedRequest, clock, mediaAdapter]);\n\n    useEffect(() => {\n        if (ankiDialogRequested && playingRef.current) {\n            pause(clock, mediaAdapter, true);\n            setResumeOnFinishedAnkiDialogRequest(true);\n        }\n    }, [ankiDialogRequested, clock, mediaAdapter]);\n\n    useEffect(() => {\n        if (playMode !== PlayMode.condensed) {\n            return;\n        }\n\n        if (!subtitles || subtitles.length === 0) {\n            return;\n        }\n\n        let seeking = false;\n        let expectedSeekTime = 1000;\n\n        const interval = setInterval(async () => {\n            const length = lengthRef.current;\n\n            if (!length) {\n                return;\n            }\n\n            const timestamp = clock.time(length);\n            const slice = subtitleCollection.subtitlesAt(timestamp);\n\n            if (slice.nextToShow && slice.nextToShow.length > 0) {\n                const nextSubtitle = slice.nextToShow[0];\n\n                if (nextSubtitle.start - timestamp < expectedSeekTime + 500) {\n                    return;\n                }\n\n                if (playingRef.current) {\n                    clock.stop();\n                }\n\n                if (!seeking) {\n                    seeking = true;\n                    const t0 = Date.now();\n                    await seek(nextSubtitle.start, clock, true);\n                    expectedSeekTime = Date.now() - t0;\n                    seeking = false;\n                }\n\n                if (playingRef.current) {\n                    clock.start();\n                }\n            }\n        }, 100);\n\n        return () => clearInterval(interval);\n    }, [subtitles, subtitleCollection, playMode, clock, seek]);\n\n    useEffect(() => {\n        if (videoPopOut && channelId && videoFileUrl) {\n            window.open(\n                process.env.PUBLIC_URL +\n                    '/?video=' +\n                    encodeURIComponent(videoFileUrl) +\n                    '&channel=' +\n                    channelId +\n                    '&popout=true',\n                'asbplayer-video-' + videoFileUrl,\n                'resizable,width=800,height=450'\n            );\n        }\n\n        setLastJumpToTopTimestamp(Date.now());\n    }, [videoPopOut, channelId, videoFileUrl, videoFrameRef]);\n\n    const handlePlay = useCallback(() => play(clock, mediaAdapter, true), [clock, mediaAdapter]);\n    const handlePause = useCallback(() => pause(clock, mediaAdapter, true), [clock, mediaAdapter]);\n    const handleSeek = useCallback(\n        async (progress: number) => {\n            if (!lengthRef.current) {\n                return;\n            }\n\n            if (playingRef.current) {\n                clock.stop();\n            }\n\n            await seek(progress * lengthRef.current, clock, true);\n\n            if (playingRef.current) {\n                clock.start();\n            }\n        },\n        [clock, seek]\n    );\n\n    const handleSeekToSubtitle = useCallback(\n        async (time: number, shouldPlay: boolean) => {\n            if (!shouldPlay) {\n                pause(clock, mediaAdapter, true);\n            }\n\n            if (playingRef.current) {\n                clock.stop();\n            }\n\n            await seek(time, clock, true);\n\n            if (shouldPlay && !playingRef.current) {\n                // play method will start the clock again\n                play(clock, mediaAdapter, true);\n            }\n        },\n        [clock, seek, mediaAdapter]\n    );\n\n    const handleCopyFromSubtitlePlayer = useCallback(\n        (\n            subtitle: SubtitleModel,\n            surroundingSubtitles: SubtitleModel[],\n            postMineAction: PostMineAction,\n            preventDuplicate: boolean\n        ) => {\n            onCopy(\n                subtitle,\n                surroundingSubtitles,\n                audioFile,\n                videoFile,\n                subtitleFiles[subtitle.track],\n                clock.time(lengthRef.current),\n                selectedAudioTrack,\n                playbackRate,\n                undefined,\n                undefined,\n                undefined,\n                postMineAction,\n                preventDuplicate,\n                undefined\n            );\n        },\n        [clock, onCopy, audioFile, videoFile, subtitleFiles, selectedAudioTrack, playbackRate]\n    );\n\n    const handleMouseMove = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n        mousePositionRef.current.x = e.screenX;\n        mousePositionRef.current.y = e.screenY;\n    }, []);\n\n    const handleAudioTrackSelected = useCallback(\n        async (id: string) => {\n            if (videoRef.current instanceof VideoChannel) {\n                videoRef.current.audioTrackSelected(id);\n            }\n\n            pause(clock, mediaAdapter, true);\n\n            await seek(0, clock, true);\n\n            if (playingRef.current) {\n                play(clock, mediaAdapter, true);\n            }\n        },\n        [clock, mediaAdapter, seek]\n    );\n\n    const handleOffsetChange = useCallback(\n        (offset: number) => {\n            applyOffset(Math.max(-lengthRef.current ?? 0, offset), true);\n        },\n        [applyOffset]\n    );\n\n    const handleVolumeChange = useCallback((volume: number) => {\n        if (audioRef.current instanceof HTMLMediaElement) {\n            audioRef.current.volume = volume;\n        }\n    }, []);\n\n    const handlePlaybackRateChange = useCallback(\n        (playbackRate: number) => {\n            updatePlaybackRate(playbackRate, true);\n        },\n        [updatePlaybackRate]\n    );\n\n    const handlePlayMode = useCallback((playMode: PlayMode) => setPlayMode(playMode), []);\n\n    const handleToggleSubtitleTrack = useCallback(\n        (track: number) =>\n            setDisabledSubtitleTracks((tracks) => {\n                const newTracks = { ...tracks };\n                newTracks[track] = !tracks[track];\n                return newTracks;\n            }),\n        []\n    );\n\n    const handleSubtitlesSelected = useCallback(\n        (subtitles: SubtitleModel[]) => {\n            if (subtitles.length === 0 || !settingsProvider.autoCopyCurrentSubtitle || !document.hasFocus()) {\n                return;\n            }\n\n            navigator.clipboard.writeText(subtitles.map((s) => s.text).join('\\n')).catch((e) => {\n                // ignore\n            });\n        },\n        [settingsProvider.autoCopyCurrentSubtitle]\n    );\n\n    useEffect(() => {\n        if (tab) {\n            return;\n        }\n\n        const interval = setInterval(async () => {\n            const length = lengthRef.current;\n            const progress = clock.progress(length);\n\n            if (progress >= 1) {\n                pause(clock, mediaAdapter, true);\n                await seek(0, clock, true);\n                setLastJumpToTopTimestamp(Date.now());\n            }\n        }, 1000);\n\n        return () => clearInterval(interval);\n    }, [clock, subtitles, mediaAdapter, seek, tab]);\n\n    useEffect(() => {\n        const unbind = keyBinder.bindPlay(\n            (event) => {\n                event.preventDefault();\n\n                if (playing) {\n                    pause(clock, mediaAdapter, true);\n                } else {\n                    play(clock, mediaAdapter, true);\n                }\n            },\n            () => disableKeyEvents\n        );\n\n        return () => unbind();\n    }, [keyBinder, playing, clock, mediaAdapter, disableKeyEvents]);\n\n    useEffect(() => {\n        return keyBinder.bindAdjustPlaybackRate(\n            (event, increase) => {\n                event.preventDefault();\n                if (increase) {\n                    updatePlaybackRate(Math.min(5, playbackRate + 0.1), true);\n                } else {\n                    updatePlaybackRate(Math.max(0.1, playbackRate - 0.1), true);\n                }\n            },\n            () => disableKeyEvents\n        );\n    }, [updatePlaybackRate, playbackRate, disableKeyEvents, keyBinder]);\n\n    const togglePlayMode = useCallback(\n        (event: KeyboardEvent, togglePlayMode: PlayMode) => {\n            if (!playModeEnabled) {\n                return;\n            }\n\n            event.preventDefault();\n            const newPlayMode = playMode === togglePlayMode ? PlayMode.normal : togglePlayMode;\n            setPlayMode(newPlayMode);\n            onPlayModeChangedViaBind(playMode, newPlayMode);\n\n            if (videoRef.current instanceof VideoChannel) {\n                videoRef.current.playMode(newPlayMode);\n            }\n        },\n        [playMode, playModeEnabled, onPlayModeChangedViaBind]\n    );\n\n    useEffect(() => {\n        return keyBinder.bindAutoPause(\n            (event) => togglePlayMode(event, PlayMode.autoPause),\n            () => disableKeyEvents\n        );\n    }, [togglePlayMode, keyBinder, disableKeyEvents]);\n\n    useEffect(() => {\n        return keyBinder.bindCondensedPlayback(\n            (event) => togglePlayMode(event, PlayMode.condensed),\n            () => disableKeyEvents\n        );\n    }, [togglePlayMode, keyBinder, disableKeyEvents]);\n\n    useEffect(() => {\n        if ((audioFile || videoFile) && (!subtitles || subtitles.length === 0)) {\n            const unbindCopy = keyBinder.bindCopy(\n                (event, subtitle) => {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    const surroundingSubtitles = mockSurroundingSubtitles(subtitle, lengthRef.current, 5000);\n                    onCopy(\n                        subtitle,\n                        surroundingSubtitles,\n                        audioFile,\n                        videoFile,\n                        undefined,\n                        clock.time(lengthRef.current),\n                        selectedAudioTrack,\n                        playbackRate,\n                        undefined,\n                        undefined,\n                        undefined,\n                        undefined,\n                        undefined,\n                        undefined\n                    );\n                },\n                () => disableKeyEvents,\n                () => {\n                    if (!lengthRef.current) {\n                        return undefined;\n                    }\n\n                    const timestamp = clock.time(lengthRef.current);\n                    const end = Math.min(timestamp + 5000, lengthRef.current);\n\n                    return {\n                        text: '',\n                        start: timestamp,\n                        originalStart: timestamp,\n                        end: end,\n                        originalEnd: end,\n                        track: 0,\n                    };\n                }\n            );\n\n            const unbindAnkiExport = keyBinder.bindAnkiExport(\n                (event) => {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    const timestamp = clock.time(lengthRef.current);\n                    const end = Math.min(timestamp + 5000, lengthRef.current);\n                    const subtitle = {\n                        text: '',\n                        start: timestamp,\n                        originalStart: timestamp,\n                        end: end,\n                        originalEnd: end,\n                        track: 0,\n                    };\n                    const surroundingSubtitles = mockSurroundingSubtitles(subtitle, lengthRef.current, 5000);\n                    onCopy(\n                        subtitle,\n                        surroundingSubtitles,\n                        audioFile,\n                        videoFile,\n                        undefined,\n                        timestamp,\n                        selectedAudioTrack,\n                        playbackRate,\n                        undefined,\n                        undefined,\n                        undefined,\n                        PostMineAction.showAnkiDialog,\n                        undefined,\n                        undefined\n                    );\n                },\n                () => false\n            );\n\n            return () => {\n                unbindCopy();\n                unbindAnkiExport();\n            };\n        }\n    }, [\n        keyBinder,\n        audioFile,\n        videoFile,\n        subtitles,\n        clock,\n        playbackRate,\n        selectedAudioTrack,\n        disableKeyEvents,\n        onCopy,\n        onAnkiDialogRequest,\n    ]);\n\n    useEffect(() => {\n        if (videoRef.current instanceof VideoChannel) {\n            videoRef.current.appBarToggle(appBarHidden);\n        }\n    }, [appBarHidden]);\n\n    useEffect(() => {\n        if (videoRef.current instanceof VideoChannel) {\n            videoRef.current.hideSubtitlePlayerToggle(hideSubtitlePlayer);\n        }\n    }, [hideSubtitlePlayer]);\n\n    useEffect(() => {\n        if (videoRef.current instanceof VideoChannel) {\n            videoRef.current.fullscreenToggle(videoFullscreen);\n        }\n    }, [videoFullscreen]);\n\n    useEffect(() => {\n        if (!rewindSubtitle) {\n            return;\n        }\n\n        if (playingRef.current) {\n            clock.stop();\n        }\n\n        handleSeekToSubtitle(rewindSubtitle.start, false);\n    }, [clock, rewindSubtitle, handleSeekToSubtitle]);\n\n    const length = lengthRef.current;\n    const loaded = audioFileUrl || videoFileUrl || subtitles;\n    const videoInWindow = Boolean(loaded && videoFileUrl && !videoPopOut);\n\n    return (\n        <div onMouseMove={handleMouseMove} className={classes.root}>\n            <Grid container direction=\"row\" wrap=\"nowrap\" className={classes.container}>\n                {videoInWindow && (\n                    <Grid item style={{ flexGrow: 1, minWidth: 600 }}>\n                        <iframe\n                            ref={videoFrameRef}\n                            className={classes.videoFrame}\n                            src={\n                                process.env.PUBLIC_URL +\n                                '/?video=' +\n                                encodeURIComponent(videoFileUrl!) +\n                                '&channel=' +\n                                channelId +\n                                '&popout=false'\n                            }\n                            title=\"asbplayer\"\n                        />\n                    </Grid>\n                )}\n                {(!videoInWindow || (subtitles && subtitles?.length > 0)) && (\n                    <Grid\n                        item\n                        style={{\n                            flexGrow: videoInWindow ? 0 : 1,\n                            width: videoInWindow && hideSubtitlePlayer ? 0 : 'auto',\n                        }}\n                    >\n                        {loaded && !(videoFileUrl && !videoPopOut) && (\n                            <Controls\n                                mousePositionRef={mousePositionRef}\n                                playing={playing}\n                                clock={clock}\n                                length={length}\n                                displayLength={trackLength(audioRef, videoRef, subtitles, false)}\n                                audioTracks={audioTracks}\n                                selectedAudioTrack={selectedAudioTrack}\n                                tabs={(!videoFileUrl && !audioFileUrl && availableTabs) || undefined}\n                                selectedTab={tab}\n                                audioFile={audioFile?.name}\n                                videoFile={videoFile?.name}\n                                offsetEnabled={true}\n                                offset={offset}\n                                playbackRate={playbackRate}\n                                playbackRateEnabled={!tab || (extension.installed && gte(extension.version, '0.24.0'))}\n                                onPlaybackRateChange={handlePlaybackRateChange}\n                                volumeEnabled={Boolean(audioFileUrl)}\n                                playModeEnabled={playModeEnabled}\n                                playMode={playMode}\n                                onPlay={handlePlay}\n                                onPause={handlePause}\n                                onSeek={handleSeek}\n                                onAudioTrackSelected={handleAudioTrackSelected}\n                                onTabSelected={onTabSelected}\n                                onUnloadAudio={() => audioFileUrl && onUnloadAudio(audioFileUrl)}\n                                onUnloadVideo={() => videoFileUrl && onUnloadVideo(videoFileUrl)}\n                                onOffsetChange={handleOffsetChange}\n                                onVolumeChange={handleVolumeChange}\n                                onPlayMode={handlePlayMode}\n                                disableKeyEvents={disableKeyEvents}\n                                playbackPreferences={playbackPreferences}\n                                showOnMouseMovement={true}\n                            />\n                        )}\n                        <SubtitlePlayer\n                            playing={playing}\n                            subtitles={subtitles}\n                            subtitleCollection={subtitleCollection}\n                            clock={clock}\n                            length={length}\n                            jumpToSubtitle={jumpToSubtitle}\n                            drawerOpen={drawerOpen}\n                            appBarHidden={appBarHidden}\n                            compressed={Boolean(videoFileUrl && !videoPopOut)}\n                            copyButtonEnabled={tab === undefined}\n                            loading={loadingSubtitles}\n                            displayHelp={audioFile?.name || (videoPopOut && videoFile?.name) || undefined}\n                            disableKeyEvents={disableKeyEvents}\n                            lastJumpToTopTimestamp={lastJumpToTopTimestamp}\n                            hidden={videoInWindow && hideSubtitlePlayer}\n                            disabledSubtitleTracks={disabledSubtitleTracks}\n                            onSeek={handleSeekToSubtitle}\n                            onCopy={handleCopyFromSubtitlePlayer}\n                            onOffsetChange={handleOffsetChange}\n                            onToggleSubtitleTrack={handleToggleSubtitleTrack}\n                            onSubtitlesSelected={handleSubtitlesSelected}\n                            autoPauseContext={autoPauseContext}\n                            settingsProvider={settingsProvider}\n                            keyBinder={keyBinder}\n                        />\n                    </Grid>\n                )}\n            </Grid>\n            <audio ref={audioRef} src={audioFileUrl} />\n        </div>\n    );\n}\n","import { useState, useEffect } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\ninterface Props {\n    open: boolean;\n    onProceed: (fieldName: string) => void;\n    onCancel: () => void;\n    existingCustomFieldNames: string[];\n}\n\nexport default function CustomFieldDialog({ open, onProceed, onCancel, existingCustomFieldNames }: Props) {\n    const [fieldName, setFieldName] = useState<string>('');\n\n    useEffect(() => {\n        setFieldName('');\n    }, [open]);\n\n    const fieldExists = [\n        ...existingCustomFieldNames,\n        'Sentence',\n        'Word',\n        'Definition',\n        'Source',\n        'Image',\n        'Audio',\n    ].includes(fieldName);\n\n    return (\n        <Dialog\n            open={open}\n            disableEnforceFocus\n            fullWidth\n            maxWidth=\"xs\"\n            onClose={onCancel}\n        >\n            <DialogTitle>New Custom Field</DialogTitle>\n            <DialogContent>\n                <form>\n                    <TextField\n                        error={fieldExists}\n                        helperText={fieldExists && `Field ${fieldName} already exists`}\n                        variant=\"filled\"\n                        fullWidth\n                        label=\"Field Name\"\n                        value={fieldName}\n                        color=\"secondary\"\n                        onChange={(e) => setFieldName(e.target.value)}\n                    />\n                </form>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={() => onCancel()}>Cancel</Button>\n                <Button disabled={fieldExists || fieldName.trim() === ''} onClick={() => onProceed(fieldName.trim())}>\n                    Create\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n","import React, { useCallback, useState, useEffect, useMemo, ChangeEvent, ReactNode, useRef } from 'react';\nimport { makeStyles } from '@material-ui/styles';\nimport { computeStyles } from '../services/util';\nimport Button from '@material-ui/core/Button';\nimport CustomFieldDialog from './CustomFieldDialog';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport EditIcon from '@material-ui/icons/Edit';\nimport InfoIcon from '@material-ui/icons/Info';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Grid from '@material-ui/core/Grid';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Link from '@material-ui/core/Link';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Radio from '@material-ui/core/Radio';\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport Select from '@material-ui/core/Select';\nimport TextField from '@material-ui/core/TextField';\nimport { Theme } from '@material-ui/core/styles';\nimport { Anki, AsbplayerSettings, AutoPausePreference, KeyBindSet, KeyBindName } from '@project/common';\nimport { TagsTextField } from '@project/common/components';\nimport hotkeys from 'hotkeys-js';\nimport Typography from '@material-ui/core/Typography';\nimport ChromeExtension from '../services/ChromeExtension';\nimport { isMacOs } from 'react-device-detect';\nimport Switch from '@material-ui/core/Switch';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nconst useStyles = makeStyles<Theme>((theme) => ({\n    root: {\n        '& .MuiTextField-root': {\n            marginTop: theme.spacing(1),\n            marginBottom: theme.spacing(1),\n        },\n    },\n    subtitleSetting: {\n        '& .MuiTextField-root': {\n            marginTop: theme.spacing(1),\n            marginBottom: theme.spacing(1),\n        },\n    },\n    subtitlePreview: {\n        backgroundImage: `linear-gradient(45deg, ${theme.palette.action.disabledBackground} 25%, transparent 25%), linear-gradient(-45deg, ${theme.palette.action.disabledBackground} 25%, transparent 25%), linear-gradient(45deg, transparent 75%, ${theme.palette.action.disabledBackground} 75%), linear-gradient(-45deg, transparent 75%,${theme.palette.action.disabledBackground} 75%)`,\n        backgroundSize: '20px 20px',\n        backgroundPosition: '0 0, 0 10px, 10px -10px, -10px 0px',\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n        maxWidth: '100%',\n        padding: 10,\n    },\n    subtitlePreviewInput: {\n        border: 'none',\n        width: '100%',\n        textAlign: 'center',\n        backgroundColor: 'rgba(0,0,0,0)',\n        '&:focus': {\n            outline: 'none',\n        },\n    },\n    addFieldButton: {\n        width: '100%',\n    },\n    switchLabel: {\n        justifyContent: 'space-between',\n        marginLeft: 0,\n    },\n}));\n\nconst useSelectableSettingStyles = makeStyles<Theme>((theme) => ({\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 120,\n    },\n    root: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'end',\n        alignItems: 'flex-end',\n    },\n}));\n\ninterface SelectableSettingProps {\n    label: string;\n    value: string;\n    selections?: string[];\n    removable?: boolean;\n    onChange: (event: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => void;\n    onSelectionChange: (event: ChangeEvent<{ name?: string | undefined; value: unknown }>, child: ReactNode) => void;\n    onRemoval?: () => void;\n}\n\nfunction SelectableSetting({\n    label,\n    value,\n    selections,\n    removable,\n    onChange,\n    onSelectionChange,\n    onRemoval,\n}: SelectableSettingProps) {\n    const classes = useSelectableSettingStyles();\n\n    return (\n        <div className={classes.root}>\n            <TextField\n                label={label}\n                value={value}\n                onChange={onChange}\n                fullWidth\n                color=\"secondary\"\n                InputProps={{\n                    endAdornment: removable && (\n                        <InputAdornment position=\"end\">\n                            <IconButton onClick={(e) => onRemoval?.()}>\n                                <DeleteIcon />\n                            </IconButton>\n                        </InputAdornment>\n                    ),\n                }}\n            />\n            <FormControl className={classes.formControl}>\n                <InputLabel></InputLabel>\n                <Select value={value} disabled={!selections} color=\"secondary\" onChange={onSelectionChange}>\n                    {selections &&\n                        selections.map((s) => (\n                            <MenuItem key={s} value={s}>\n                                {s}\n                            </MenuItem>\n                        ))}\n                </Select>\n            </FormControl>\n        </div>\n    );\n}\n\ninterface KeyBindProperties {\n    label: string;\n    extensionOverridden: boolean;\n}\n\nconst keyBindProperties: { [key in KeyBindName]: KeyBindProperties } = {\n    copySubtitle: { label: 'Mine current subtitle', extensionOverridden: true },\n    ankiExport: { label: 'Mine current subtitle and open Anki dialog', extensionOverridden: true },\n    updateLastCard: {\n        label: 'Update last-created Anki card with asbplayer-captured screenshot, audio, etc.',\n        extensionOverridden: true,\n    },\n    togglePlay: { label: 'Play/pause', extensionOverridden: false },\n    toggleAutoPause: { label: 'Toggle auto-pause', extensionOverridden: false },\n    toggleCondensedPlayback: { label: 'Toggle condensed playback', extensionOverridden: false },\n    toggleSubtitles: { label: 'Toggle subtitles', extensionOverridden: false },\n    toggleVideoSubtitleTrack1: { label: 'Toggle subtitle track 1 in video', extensionOverridden: false },\n    toggleVideoSubtitleTrack2: { label: 'Toggle subtitle track 2 in video', extensionOverridden: false },\n    toggleAsbplayerSubtitleTrack1: { label: 'Toggle subtitle track 1 in asbplayer', extensionOverridden: false },\n    toggleAsbplayerSubtitleTrack2: { label: 'Toggle subtitle track 2 in asbplayer', extensionOverridden: false },\n    seekBackward: { label: 'Seek backward 10 seconds', extensionOverridden: false },\n    seekForward: { label: 'Seek forward 10 seconds', extensionOverridden: false },\n    seekToPreviousSubtitle: { label: 'Seek to previous subtitle', extensionOverridden: false },\n    seekToNextSubtitle: { label: 'Seek to next subtitle', extensionOverridden: false },\n    seekToBeginningOfCurrentSubtitle: { label: 'Seek to beginning of current subtitle', extensionOverridden: false },\n    adjustOffsetToPreviousSubtitle: {\n        label: 'Adjust subtitle offset so that previous subtitle is at current timestamp',\n        extensionOverridden: false,\n    },\n    adjustOffsetToNextSubtitle: {\n        label: 'Adjust subtitle offset so that next subtitle is at current timestamp',\n        extensionOverridden: false,\n    },\n    increaseOffset: { label: 'Adjust subtitle offset by +100ms', extensionOverridden: false },\n    decreaseOffset: { label: 'Adjust subtitle offset by -100ms', extensionOverridden: false },\n    increasePlaybackRate: { label: 'Adjust playback rate by +0.1', extensionOverridden: false },\n    decreasePlaybackRate: { label: 'Adjust playback rate by -0.1', extensionOverridden: false },\n};\n\n// hotkeys only returns strings for a Mac while requiring the OS-specific keys for the actual binds\nconst modifierKeyReplacements: { [key: string]: string } = isMacOs\n    ? {}\n    : {\n          '⌃': 'ctrl',\n          '⇧': 'shift',\n          '⌥': 'alt',\n      };\n\nconst modifierKeys = ['⌃', '⇧', '⌥', 'ctrl', 'shift', 'alt', 'option', 'control', 'command', '⌘'];\n\nconst useKeyBindFieldStyles = makeStyles<Theme>((theme) => ({\n    container: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n    },\n    labelItem: {},\n}));\n\ninterface KeyBindFieldProps {\n    label: string;\n    keys: string;\n    extensionOverridden: boolean;\n    onKeysChange: (keys: string) => void;\n    onOpenExtensionShortcuts: () => void;\n}\n\nfunction KeyBindField({ label, keys, extensionOverridden, onKeysChange, onOpenExtensionShortcuts }: KeyBindFieldProps) {\n    const classes = useKeyBindFieldStyles();\n    const [currentKeyString, setCurrentKeyString] = useState<string>(keys);\n    const currentKeyStringRef = useRef<string>();\n    currentKeyStringRef.current = currentKeyString;\n    const onKeysChangeRef = useRef<(keys: string) => void>();\n    onKeysChangeRef.current = onKeysChange;\n    const [editing, setEditing] = useState<boolean>(false);\n\n    useEffect(() => setCurrentKeyString(keys), [keys]);\n\n    const handleEditKeyBinding = useCallback(\n        (event: React.MouseEvent) => {\n            if (event.nativeEvent.detail === 0) {\n                return;\n            }\n\n            if (extensionOverridden) {\n                onOpenExtensionShortcuts();\n                return;\n            }\n\n            setCurrentKeyString('');\n            setEditing(true);\n        },\n        [onOpenExtensionShortcuts, extensionOverridden]\n    );\n\n    const ref = useRef<HTMLButtonElement>(null);\n\n    useEffect(() => {\n        if (!editing) {\n            return;\n        }\n\n        const handler = (event: KeyboardEvent) => {\n            if (event.type === 'keydown') {\n                // The ts declaration is missing getPressedKeyString()\n                // @ts-ignore\n                const pressed = hotkeys.getPressedKeyString() as string[];\n                setCurrentKeyString(\n                    pressed\n                        .map((key) => {\n                            return modifierKeyReplacements[key] ?? key;\n                        })\n                        .sort((a, b) => {\n                            const isAModifier = modifierKeys.includes(a);\n                            const isBModifier = modifierKeys.includes(b);\n\n                            if (isAModifier && !isBModifier) {\n                                return -1;\n                            }\n\n                            if (!isAModifier && isBModifier) {\n                                return 1;\n                            }\n\n                            return 0;\n                        })\n                        .join('+')\n                );\n            } else if (event.type === 'keyup') {\n                setEditing(false);\n\n                // Need to use refs because hotkeys returns the wrong keys\n                // if the handler is bound/unbound.\n                if (currentKeyStringRef.current) {\n                    onKeysChangeRef.current!(currentKeyStringRef.current);\n                }\n            }\n        };\n\n        hotkeys('*', { keyup: true }, handler);\n        return () => hotkeys.unbind('*', handler);\n    }, [editing]);\n\n    useEffect(() => {\n        const handler = (event: MouseEvent) => {\n            if (editing && !ref.current?.contains(event.target as Node)) {\n                setEditing(false);\n                setCurrentKeyString('');\n                onKeysChange('');\n            }\n        };\n        window.document.addEventListener('click', handler);\n        return () => window.document.removeEventListener('click', handler);\n    }, [editing, onKeysChange]);\n\n    let placeholder: string;\n\n    if (editing) {\n        placeholder = 'Recording';\n    } else if (extensionOverridden) {\n        placeholder = 'Overridden';\n    } else {\n        placeholder = 'Unbound';\n    }\n\n    return (\n        <Grid container className={classes.container} wrap={'nowrap'} spacing={1}>\n            <Grid item className={classes.labelItem} xs={6}>\n                <Typography>{label}</Typography>\n            </Grid>\n            <Grid item xs={6}>\n                <TextField\n                    placeholder={placeholder}\n                    size=\"small\"\n                    contentEditable={false}\n                    disabled={extensionOverridden}\n                    helperText={extensionOverridden ? 'Extension shortcut' : undefined}\n                    value={currentKeyString}\n                    color=\"secondary\"\n                    InputProps={{\n                        endAdornment: (\n                            <InputAdornment position=\"end\">\n                                <IconButton ref={ref} onClick={handleEditKeyBinding}>\n                                    <EditIcon />\n                                </IconButton>\n                            </InputAdornment>\n                        ),\n                    }}\n                />\n            </Grid>\n        </Grid>\n    );\n}\n\ninterface Props {\n    anki: Anki;\n    extension: ChromeExtension;\n    open: boolean;\n    settings: AsbplayerSettings;\n    scrollToId?: string;\n    onClose: (settings: AsbplayerSettings) => void;\n}\n\nexport default function SettingsDialog({ anki, extension, open, settings, scrollToId, onClose }: Props) {\n    const classes = useStyles();\n    const [ankiConnectUrl, setAnkiConnectUrl] = useState<string>(settings.ankiConnectUrl);\n    const [ankiConnectUrlError, setAnkiConnectUrlError] = useState<string>();\n    const [ankiConnectUrlChangeTimestamp, setAnkiConnectUrlChangeTimestamp] = useState<number>(0);\n    const [deck, setDeck] = useState<string>(settings.deck || '');\n    const [deckNames, setDeckNames] = useState<string[]>();\n    const [noteType, setNoteType] = useState<string>(settings.noteType || '');\n    const [modelNames, setModelNames] = useState<string[]>();\n    const [sentenceField, setSentenceField] = useState<string>(settings.sentenceField || '');\n    const [definitionField, setDefinitionField] = useState<string>(settings.definitionField || '');\n    const [audioField, setAudioField] = useState<string>(settings.audioField || '');\n    const [imageField, setImageField] = useState<string>(settings.imageField || '');\n    const [wordField, setWordField] = useState<string>(settings.wordField || '');\n    const [sourceField, setSourceField] = useState<string>(settings.sourceField || '');\n    const [urlField, setUrlField] = useState<string>(settings.urlField || '');\n    const [customFields, setCustomFields] = useState<{ [key: string]: string }>(settings.customAnkiFields);\n    const [tags, setTags] = useState<string[]>(settings.tags);\n    const [preferMp3, setPreferMp3] = useState<boolean>(settings.preferMp3);\n    const [fieldNames, setFieldNames] = useState<string[]>();\n    const [customFieldDialogOpen, setCustomFieldDialogOpen] = useState<boolean>(false);\n    const [audioPaddingStart, setAudioPaddingStart] = useState<number>(settings.audioPaddingStart);\n    const [audioPaddingEnd, setAudioPaddingEnd] = useState<number>(settings.audioPaddingEnd);\n    const [maxImageWidth, setMaxImageWidth] = useState<number>(settings.maxImageWidth);\n    const [maxImageHeight, setMaxImageHeight] = useState<number>(settings.maxImageHeight);\n    const [surroundingSubtitlesCountRadius, setSurroundingSubtitlesCountRadius] = useState<number>(\n        settings.surroundingSubtitlesCountRadius\n    );\n    const [surroundingSubtitlesTimeRadius, setSurroundingSubtitlesTimeRadius] = useState<number>(\n        settings.surroundingSubtitlesTimeRadius\n    );\n    const [subtitleColor, setSubtitleColor] = useState<string>(settings.subtitleColor);\n    const [subtitleSize, setSubtitleSize] = useState<number>(settings.subtitleSize);\n    const [subtitleOutlineColor, setSubtitleOutlineColor] = useState<string>(settings.subtitleOutlineColor);\n    const [subtitleOutlineThickness, setSubtitleOutlineThickness] = useState<number>(settings.subtitleOutlineThickness);\n    const [subtitleBackgroundColor, setSubtitleBackgroundColor] = useState<string>(settings.subtitleBackgroundColor);\n    const [subtitleBackgroundOpacity, setSubtitleBackgroundOpacity] = useState<number>(\n        settings.subtitleBackgroundOpacity\n    );\n    const [subtitleFontFamily, setSubtitleFontFamily] = useState<string>(settings.subtitleFontFamily);\n    const [imageBasedSubtitleScaleFactor, setImageBasedSubtitleScaleFactor] = useState<number>(\n        settings.imageBasedSubtitleScaleFactor\n    );\n    const [subtitlePreview, setSubtitlePreview] = useState<string>(settings.subtitlePreview);\n    const [themeType, setThemeType] = useState<'dark' | 'light'>(settings.themeType);\n    const [copyToClipboardOnMine, setCopyToClipboardOnMine] = useState<boolean>(settings.copyToClipboardOnMine);\n    const [autoPausePreference, setAutoPausePreference] = useState<AutoPausePreference>(settings.autoPausePreference);\n    const [keyBindSet, setKeyBindSet] = useState<KeyBindSet>(settings.keyBindSet);\n    const [rememberSubtitleOffset, setRememberSubtitleOffset] = useState<boolean>(settings.rememberSubtitleOffset);\n    const [autoCopyCurrentSubtitle, setAutoCopyCurrentSubtitle] = useState<boolean>(settings.autoCopyCurrentSubtitle);\n\n    const handleAnkiConnectUrlChange = useCallback((e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n        setAnkiConnectUrl(e.target.value);\n        setAnkiConnectUrlChangeTimestamp(Date.now());\n    }, []);\n\n    const handleRetryAnkiConnectUrl = useCallback(\n        (e: React.MouseEvent<HTMLButtonElement>) => setAnkiConnectUrlChangeTimestamp(Date.now()),\n        []\n    );\n    const handleDeckChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setDeck(e.target.value),\n        []\n    );\n    const handleDeckSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setDeck(e.target.value as string),\n        []\n    );\n    const handleNoteTypeChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setNoteType(e.target.value),\n        []\n    );\n    const handleNoteTypeSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setNoteType(e.target.value as string),\n        []\n    );\n    const handleSentenceFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSentenceField(e.target.value),\n        []\n    );\n    const handleSentenceFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setSentenceField(e.target.value as string),\n        []\n    );\n    const handleDefinitionFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setDefinitionField(e.target.value),\n        []\n    );\n    const handleDefinitionFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setDefinitionField(e.target.value as string),\n        []\n    );\n    const handleAudioFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setAudioField(e.target.value),\n        []\n    );\n    const handleAudioFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setAudioField(e.target.value as string),\n        []\n    );\n    const handleImageFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setImageField(e.target.value),\n        []\n    );\n    const handleImageFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setImageField(e.target.value as string),\n        []\n    );\n    const handleWordFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setWordField(e.target.value),\n        []\n    );\n    const handleWordFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setWordField(e.target.value as string),\n        []\n    );\n    const handleSourceFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSourceField(e.target.value),\n        []\n    );\n    const handleSourceFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setSourceField(e.target.value as string),\n        []\n    );\n    const handleUrlFieldChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setUrlField(e.target.value),\n        []\n    );\n    const handleUrlFieldSelectionChange = useCallback(\n        (e: ChangeEvent<{ name?: string | undefined; value: unknown }>) => setUrlField(e.target.value as string),\n        []\n    );\n    const handleAudioPaddingStart = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setAudioPaddingStart(Number(e.target.value)),\n        []\n    );\n    const handleAudioPaddingEnd = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setAudioPaddingEnd(Number(e.target.value)),\n        []\n    );\n    const handleMaxImageWidth = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setMaxImageWidth(Number(e.target.value)),\n        []\n    );\n    const handleMaxImageHeight = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setMaxImageHeight(Number(e.target.value)),\n        []\n    );\n    const handleSurroundingSubtitlesCountRadius = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) =>\n            setSurroundingSubtitlesCountRadius(Number(e.target.value)),\n        []\n    );\n    const handleSurroundingSubtitlesTimeRadius = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) =>\n            setSurroundingSubtitlesTimeRadius(Number(e.target.value)),\n        []\n    );\n    const handleSubtitleColorChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleColor(e.target.value),\n        []\n    );\n    const handleSubtitleSizeChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleSize(Number(e.target.value)),\n        []\n    );\n    const handleSubtitleOutlineColorChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleOutlineColor(e.target.value),\n        []\n    );\n    const handleSubtitleOutlineThicknessChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleOutlineThickness(Number(e.target.value)),\n        []\n    );\n    const handleSubtitleBackgroundColorChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleBackgroundColor(e.target.value),\n        []\n    );\n    const handleSubtitleBackgroundOpacityChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) =>\n            setSubtitleBackgroundOpacity(Number(e.target.value)),\n        []\n    );\n    const handleSubtitleFontFamilyChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitleFontFamily(e.target.value),\n        []\n    );\n    const handleSubtitlePreviewChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setSubtitlePreview(e.target.value),\n        []\n    );\n    const handleImageBasedSubtitleScaleFactorChange = useCallback(\n        (e: ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) =>\n            setImageBasedSubtitleScaleFactor(Number(e.target.value)),\n        []\n    );\n    const handleAddCustomField = useCallback((customFieldName: string) => {\n        setCustomFields((oldCustomFields: { [key: string]: string }) => {\n            const newCustomFields: { [key: string]: string } = {};\n            Object.assign(newCustomFields, oldCustomFields);\n            newCustomFields[customFieldName] = '';\n            return newCustomFields;\n        });\n        setCustomFieldDialogOpen(false);\n    }, []);\n    const handleCustomFieldChange = useCallback((customFieldName: string, value: string) => {\n        setCustomFields((oldCustomFields: { [key: string]: string }) => {\n            const newCustomFields: { [key: string]: string } = {};\n            Object.assign(newCustomFields, oldCustomFields);\n            newCustomFields[customFieldName] = value;\n            return newCustomFields;\n        });\n    }, []);\n    const handleCustomFieldRemoval = useCallback(\n        (customFieldName: string) =>\n            setCustomFields((oldCustomFields: { [key: string]: string }) => {\n                const newCustomFields: { [key: string]: string } = {};\n                Object.assign(newCustomFields, oldCustomFields);\n                delete newCustomFields[customFieldName];\n                return newCustomFields;\n            }),\n        []\n    );\n    const handleTagsChange = useCallback((newTags: string[]) => {\n        setTags(newTags);\n    }, []);\n    const handlePreferMp3Change = useCallback((e: ChangeEvent<HTMLInputElement>) => setPreferMp3(e.target.checked), []);\n    const handleThemeTypeChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        if (e.target.value !== 'dark' && e.target.value !== 'light') {\n            throw new Error(`Invalid theme type ${e.target.value}`);\n        }\n\n        setThemeType(e.target.value);\n    }, []);\n    const handleCopyToClipboardOnMine = useCallback(\n        (e: ChangeEvent<HTMLInputElement>) => setCopyToClipboardOnMine(e.target.checked),\n        []\n    );\n    const handleAutoPausePreferenceChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        setAutoPausePreference(Number(e.target.value) as AutoPausePreference);\n    }, []);\n    const handleKeysChange = useCallback((keys: string, keyBindName: KeyBindName) => {\n        setKeyBindSet((keyBindSet) => {\n            const newKeyBindSet = { ...keyBindSet };\n            newKeyBindSet[keyBindName] = { keys };\n            return newKeyBindSet;\n        });\n    }, []);\n    const handleRememberSubtitleOffsetChange = useCallback(\n        (e: ChangeEvent<HTMLInputElement>) => setRememberSubtitleOffset(e.target.checked),\n        []\n    );\n    const handleAutoCopyCurrentSubtitle = useCallback(\n        (e: ChangeEvent<HTMLInputElement>) => setAutoCopyCurrentSubtitle(e.target.checked),\n        []\n    );\n\n    const subtitlePreviewStyles = useMemo(\n        () =>\n            computeStyles({\n                subtitleColor: subtitleColor,\n                subtitleSize: subtitleSize,\n                subtitleOutlineThickness: subtitleOutlineThickness,\n                subtitleOutlineColor: subtitleOutlineColor,\n                subtitleBackgroundOpacity: subtitleBackgroundOpacity,\n                subtitleBackgroundColor: subtitleBackgroundColor,\n                subtitleFontFamily: subtitleFontFamily,\n            }),\n        [\n            subtitleColor,\n            subtitleSize,\n            subtitleOutlineThickness,\n            subtitleOutlineColor,\n            subtitleBackgroundOpacity,\n            subtitleBackgroundColor,\n            subtitleFontFamily,\n        ]\n    );\n\n    useEffect(() => {\n        let canceled = false;\n\n        const timeout = setTimeout(async () => {\n            try {\n                if (canceled) {\n                    return;\n                }\n\n                await anki.requestPermission(ankiConnectUrl);\n                setDeckNames(await anki.deckNames(ankiConnectUrl));\n                setModelNames(await anki.modelNames(ankiConnectUrl));\n                setAnkiConnectUrlError(undefined);\n            } catch (e) {\n                if (canceled) {\n                    return;\n                }\n\n                console.error(e);\n                setDeckNames(undefined);\n                setModelNames(undefined);\n\n                if (e instanceof Error) {\n                    setAnkiConnectUrlError(e.message);\n                } else if (typeof e === 'string') {\n                    setAnkiConnectUrlError(e);\n                } else {\n                    setAnkiConnectUrlError(String(e));\n                }\n            }\n        }, 1000);\n\n        return () => {\n            canceled = true;\n            clearTimeout(timeout);\n        };\n    }, [anki, ankiConnectUrl, ankiConnectUrlChangeTimestamp]);\n\n    useEffect(() => {\n        if (!noteType || ankiConnectUrlError) {\n            return undefined;\n        }\n\n        let canceled = false;\n\n        async function refreshFieldNames() {\n            try {\n                if (canceled) {\n                    return;\n                }\n\n                setFieldNames(['', ...(await anki.modelFieldNames(noteType, ankiConnectUrl))]);\n                setAnkiConnectUrlError(undefined);\n            } catch (e) {\n                if (canceled) {\n                    return;\n                }\n\n                console.error(e);\n                setFieldNames(undefined);\n\n                if (e instanceof Error) {\n                    setAnkiConnectUrlError(e.message);\n                } else if (typeof e === 'string') {\n                    setAnkiConnectUrlError(e);\n                } else {\n                    setAnkiConnectUrlError(String(e));\n                }\n            }\n        }\n\n        refreshFieldNames();\n\n        return () => {\n            canceled = true;\n        };\n    }, [anki, noteType, ankiConnectUrl, ankiConnectUrlError, ankiConnectUrlChangeTimestamp]);\n\n    const handleClose = useCallback(() => {\n        onClose({\n            ankiConnectUrl: ankiConnectUrl,\n            deck: deck,\n            noteType: noteType,\n            sentenceField: sentenceField,\n            definitionField: definitionField,\n            audioField: audioField,\n            imageField: imageField,\n            wordField: wordField,\n            sourceField: sourceField,\n            urlField: urlField,\n            tags: tags.filter((t) => t !== ''),\n            subtitleSize: Number(subtitleSize),\n            subtitleColor: subtitleColor,\n            subtitleOutlineThickness: Number(subtitleOutlineThickness),\n            subtitleOutlineColor: subtitleOutlineColor,\n            subtitleBackgroundColor: subtitleBackgroundColor,\n            subtitleBackgroundOpacity: Number(subtitleBackgroundOpacity),\n            subtitleFontFamily: subtitleFontFamily,\n            subtitlePreview: subtitlePreview,\n            imageBasedSubtitleScaleFactor: imageBasedSubtitleScaleFactor,\n            customAnkiFields: customFields,\n            preferMp3: preferMp3,\n            themeType: themeType,\n            audioPaddingStart: audioPaddingStart,\n            audioPaddingEnd: audioPaddingEnd,\n            maxImageWidth: maxImageWidth,\n            maxImageHeight: maxImageHeight,\n            surroundingSubtitlesCountRadius: surroundingSubtitlesCountRadius,\n            surroundingSubtitlesTimeRadius: surroundingSubtitlesTimeRadius,\n            copyToClipboardOnMine: copyToClipboardOnMine,\n            autoPausePreference: autoPausePreference,\n            keyBindSet: keyBindSet,\n            rememberSubtitleOffset: rememberSubtitleOffset,\n            autoCopyCurrentSubtitle: autoCopyCurrentSubtitle,\n        });\n    }, [\n        onClose,\n        ankiConnectUrl,\n        deck,\n        noteType,\n        sentenceField,\n        definitionField,\n        audioField,\n        imageField,\n        wordField,\n        sourceField,\n        urlField,\n        customFields,\n        tags,\n        preferMp3,\n        subtitleSize,\n        subtitleColor,\n        subtitleOutlineThickness,\n        subtitleOutlineColor,\n        subtitleBackgroundColor,\n        subtitleBackgroundOpacity,\n        subtitleFontFamily,\n        subtitlePreview,\n        imageBasedSubtitleScaleFactor,\n        themeType,\n        audioPaddingStart,\n        audioPaddingEnd,\n        maxImageWidth,\n        maxImageHeight,\n        surroundingSubtitlesCountRadius,\n        surroundingSubtitlesTimeRadius,\n        copyToClipboardOnMine,\n        autoPausePreference,\n        keyBindSet,\n        rememberSubtitleOffset,\n        autoCopyCurrentSubtitle,\n    ]);\n\n    const customFieldInputs = Object.keys(customFields).map((customFieldName) => {\n        return (\n            <SelectableSetting\n                key={customFieldName}\n                label={`${customFieldName} Field`}\n                value={customFields[customFieldName]}\n                selections={fieldNames!}\n                onChange={(e) => handleCustomFieldChange(customFieldName, e.target.value)}\n                onSelectionChange={(e) => handleCustomFieldChange(customFieldName, e.target.value as string)}\n                onRemoval={() => handleCustomFieldRemoval(customFieldName)}\n                removable={true}\n            />\n        );\n    });\n\n    useEffect(() => {\n        if (!scrollToId) {\n            return;\n        }\n\n        setTimeout(() => document.getElementById(scrollToId)?.scrollIntoView({ behavior: 'smooth' }), 0);\n    }, [scrollToId]);\n\n    return (\n        <React.Fragment>\n            <CustomFieldDialog\n                open={customFieldDialogOpen}\n                existingCustomFieldNames={Object.keys(customFields)}\n                onProceed={handleAddCustomField}\n                onCancel={() => setCustomFieldDialogOpen(false)}\n            />\n            <Dialog open={open} maxWidth=\"xs\" fullWidth onClose={handleClose}>\n                <DialogTitle>Settings</DialogTitle>\n                <DialogContent>\n                    <Grid container direction=\"column\" spacing={3}>\n                        <Grid item id=\"anki\">\n                            <FormLabel>Anki</FormLabel>\n                            <FormGroup className={classes.root}>\n                                <TextField\n                                    label=\"Anki Connect URL\"\n                                    value={ankiConnectUrl}\n                                    error={Boolean(ankiConnectUrlError)}\n                                    helperText={ankiConnectUrlError}\n                                    color=\"secondary\"\n                                    onChange={handleAnkiConnectUrlChange}\n                                    InputProps={{\n                                        endAdornment: (\n                                            <InputAdornment position=\"end\">\n                                                <IconButton onClick={handleRetryAnkiConnectUrl}>\n                                                    <RefreshIcon />\n                                                </IconButton>\n                                            </InputAdornment>\n                                        ),\n                                    }}\n                                />\n                                <FormHelperText>\n                                    Ensure that {window.location.protocol + '//' + window.location.hostname} is in the\n                                    webCorsOriginList in your AnkiConnect settings as in this{' '}\n                                    <Link\n                                        color=\"secondary\"\n                                        target=\"_blank\"\n                                        rel=\"noreferrer\"\n                                        href=\"https://youtu.be/Mv7fEVb6PHo?t=44\"\n                                    >\n                                        video\n                                    </Link>\n                                    .\n                                </FormHelperText>\n                                <SelectableSetting\n                                    label=\"Deck\"\n                                    value={deck}\n                                    selections={deckNames}\n                                    onChange={handleDeckChange}\n                                    onSelectionChange={handleDeckSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"Note Type\"\n                                    value={noteType}\n                                    selections={modelNames}\n                                    onChange={handleNoteTypeChange}\n                                    onSelectionChange={handleNoteTypeSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"Sentence Field\"\n                                    value={sentenceField}\n                                    selections={fieldNames}\n                                    onChange={handleSentenceFieldChange}\n                                    onSelectionChange={handleSentenceFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"Definition Field\"\n                                    value={definitionField}\n                                    selections={fieldNames}\n                                    onChange={handleDefinitionFieldChange}\n                                    onSelectionChange={handleDefinitionFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"Word Field\"\n                                    value={wordField}\n                                    selections={fieldNames}\n                                    onChange={handleWordFieldChange}\n                                    onSelectionChange={handleWordFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"Audio Field\"\n                                    value={audioField}\n                                    selections={fieldNames}\n                                    onChange={handleAudioFieldChange}\n                                    onSelectionChange={handleAudioFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"Image Field\"\n                                    value={imageField}\n                                    selections={fieldNames}\n                                    onChange={handleImageFieldChange}\n                                    onSelectionChange={handleImageFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"Source Field\"\n                                    value={sourceField}\n                                    selections={fieldNames}\n                                    onChange={handleSourceFieldChange}\n                                    onSelectionChange={handleSourceFieldSelectionChange}\n                                />\n                                <SelectableSetting\n                                    label=\"URL Field\"\n                                    value={urlField}\n                                    selections={fieldNames}\n                                    onChange={handleUrlFieldChange}\n                                    onSelectionChange={handleUrlFieldSelectionChange}\n                                />\n                                {customFieldInputs}\n                                <Button\n                                    className={classes.addFieldButton}\n                                    onClick={(e) => setCustomFieldDialogOpen(true)}\n                                >\n                                    Add Custom Field\n                                </Button>\n                                <TagsTextField\n                                    label=\"Tags\"\n                                    helperText=\"Comma-separated list of strings\"\n                                    fullWidth\n                                    color=\"secondary\"\n                                    tags={tags}\n                                    onTagsChange={handleTagsChange}\n                                />\n                            </FormGroup>\n                        </Grid>\n                        <Grid item id=\"mining\">\n                            <FormLabel>Mining</FormLabel>\n                            <FormGroup className={classes.root}>\n                                <FormControlLabel\n                                    control={<Switch checked={preferMp3} onChange={handlePreferMp3Change} />}\n                                    label=\"Re-encode audio as mp3 (slower)\"\n                                    labelPlacement=\"start\"\n                                    className={classes.switchLabel}\n                                />\n                                <FormControlLabel\n                                    control={\n                                        <Switch\n                                            checked={copyToClipboardOnMine}\n                                            onChange={handleCopyToClipboardOnMine}\n                                        />\n                                    }\n                                    label=\"Copy mined subtitles to clipboard\"\n                                    labelPlacement=\"start\"\n                                    className={classes.switchLabel}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label=\"Audio Padding Start\"\n                                    fullWidth\n                                    value={audioPaddingStart}\n                                    color=\"secondary\"\n                                    onChange={handleAudioPaddingStart}\n                                    inputProps={{\n                                        min: 0,\n                                        step: 1,\n                                    }}\n                                    InputProps={{\n                                        endAdornment: <InputAdornment position=\"end\">ms</InputAdornment>,\n                                    }}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label=\"Audio Padding End\"\n                                    fullWidth\n                                    value={audioPaddingEnd}\n                                    color=\"secondary\"\n                                    onChange={handleAudioPaddingEnd}\n                                    inputProps={{\n                                        min: 0,\n                                        step: 1,\n                                    }}\n                                    InputProps={{\n                                        endAdornment: <InputAdornment position=\"end\">ms</InputAdornment>,\n                                    }}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label=\"Max Image Width\"\n                                    fullWidth\n                                    value={maxImageWidth}\n                                    color=\"secondary\"\n                                    onChange={handleMaxImageWidth}\n                                    inputProps={{\n                                        min: 0,\n                                        step: 1,\n                                    }}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label=\"Max Image Height\"\n                                    fullWidth\n                                    value={maxImageHeight}\n                                    color=\"secondary\"\n                                    onChange={handleMaxImageHeight}\n                                    inputProps={{\n                                        min: 0,\n                                        step: 1,\n                                    }}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label=\"Surrounding Subtitles Count Radius\"\n                                    fullWidth\n                                    value={surroundingSubtitlesCountRadius}\n                                    color=\"secondary\"\n                                    onChange={handleSurroundingSubtitlesCountRadius}\n                                    inputProps={{\n                                        min: 1,\n                                        step: 1,\n                                    }}\n                                />\n                                <TextField\n                                    type=\"number\"\n                                    label=\"Surrounding Subtitles Time Radius\"\n                                    fullWidth\n                                    value={surroundingSubtitlesTimeRadius}\n                                    color=\"secondary\"\n                                    onChange={handleSurroundingSubtitlesTimeRadius}\n                                    inputProps={{\n                                        min: 0,\n                                        step: 1,\n                                    }}\n                                    InputProps={{\n                                        endAdornment: <InputAdornment position=\"end\">ms</InputAdornment>,\n                                    }}\n                                />\n                            </FormGroup>\n                        </Grid>\n                        <Grid item id=\"playback\">\n                            <FormLabel>Playback</FormLabel>\n                            <FormGroup>\n                                <FormControlLabel\n                                    control={\n                                        <Switch\n                                            checked={rememberSubtitleOffset}\n                                            onChange={handleRememberSubtitleOffsetChange}\n                                        />\n                                    }\n                                    label=\"Remember subtitle offset\"\n                                    labelPlacement=\"start\"\n                                    className={classes.switchLabel}\n                                />\n                                <FormControlLabel\n                                    control={\n                                        <Switch\n                                            checked={autoCopyCurrentSubtitle}\n                                            onChange={handleAutoCopyCurrentSubtitle}\n                                        />\n                                    }\n                                    label=\"Auto-copy current subtitle to clipboard\"\n                                    labelPlacement=\"start\"\n                                    className={classes.switchLabel}\n                                />\n                            </FormGroup>\n                        </Grid>\n                        <Grid item id=\"auto-pause\">\n                            <Grid container direction=\"row\" spacing={1}>\n                                <Grid item>\n                                    <FormLabel>Auto-pause Preference</FormLabel>\n                                </Grid>\n                                <Grid item>\n                                    <Tooltip\n                                        title=\"Does not enable auto-pause. Sets the preference for when to pause when auto-pause is\n                                    enabled.\"\n                                        placement=\"top\"\n                                    >\n                                        <InfoIcon fontSize=\"small\" />\n                                    </Tooltip>\n                                </Grid>\n                            </Grid>\n                            <RadioGroup row>\n                                <FormControlLabel\n                                    control={\n                                        <Radio\n                                            checked={autoPausePreference === AutoPausePreference.atStart}\n                                            value={AutoPausePreference.atStart}\n                                            onChange={handleAutoPausePreferenceChange}\n                                        />\n                                    }\n                                    label=\"At Subtitle Start\"\n                                />\n                                <FormControlLabel\n                                    control={\n                                        <Radio\n                                            checked={autoPausePreference === AutoPausePreference.atEnd}\n                                            value={AutoPausePreference.atEnd}\n                                            onChange={handleAutoPausePreferenceChange}\n                                        />\n                                    }\n                                    label=\"At Subtitle End\"\n                                />\n                            </RadioGroup>\n                        </Grid>\n                        <Grid item id=\"video-subtitle-appearance\">\n                            <FormLabel>Video Subtitle Appearance</FormLabel>\n                            <FormGroup className={classes.root}>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"color\"\n                                        label=\"Subtitle Color\"\n                                        fullWidth\n                                        value={subtitleColor}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleColorChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"number\"\n                                        label=\"Subtitle Size\"\n                                        fullWidth\n                                        value={subtitleSize}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleSizeChange}\n                                        inputProps={{\n                                            min: 1,\n                                            step: 1,\n                                        }}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"color\"\n                                        label=\"Subtitle Outline Color\"\n                                        fullWidth\n                                        value={subtitleOutlineColor}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleOutlineColorChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"number\"\n                                        label=\"Subtitle Outline Thickness\"\n                                        fullWidth\n                                        value={subtitleOutlineThickness}\n                                        onChange={handleSubtitleOutlineThicknessChange}\n                                        inputProps={{\n                                            min: 0,\n                                            step: 1,\n                                        }}\n                                        color=\"secondary\"\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"color\"\n                                        label=\"Subtitle Background Color\"\n                                        fullWidth\n                                        value={subtitleBackgroundColor}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleBackgroundColorChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"number\"\n                                        label=\"Subtitle Background Opacity\"\n                                        fullWidth\n                                        inputProps={{\n                                            min: 0,\n                                            max: 1,\n                                            step: 0.1,\n                                        }}\n                                        value={subtitleBackgroundOpacity}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleBackgroundOpacityChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"text\"\n                                        label=\"Subtitle Font Family\"\n                                        placeholder=\"Inherited\"\n                                        fullWidth\n                                        value={subtitleFontFamily}\n                                        color=\"secondary\"\n                                        onChange={handleSubtitleFontFamilyChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitleSetting}>\n                                    <TextField\n                                        type=\"number\"\n                                        label=\"Image-based Subtitle Scale Factor\"\n                                        placeholder=\"Inherited\"\n                                        fullWidth\n                                        inputProps={{\n                                            min: 0,\n                                            max: 1,\n                                            step: 0.1,\n                                        }}\n                                        value={imageBasedSubtitleScaleFactor}\n                                        color=\"secondary\"\n                                        onChange={handleImageBasedSubtitleScaleFactorChange}\n                                    />\n                                </div>\n                                <div className={classes.subtitlePreview}>\n                                    <input\n                                        value={subtitlePreview}\n                                        className={classes.subtitlePreviewInput}\n                                        onChange={handleSubtitlePreviewChange}\n                                        style={subtitlePreviewStyles}\n                                    />\n                                </div>\n                            </FormGroup>\n                        </Grid>\n                        <Grid item id=\"theme\">\n                            <FormLabel>Theme</FormLabel>\n                            <div>\n                                <FormControlLabel\n                                    control={\n                                        <Radio\n                                            checked={themeType === 'light'}\n                                            value=\"light\"\n                                            onChange={handleThemeTypeChange}\n                                        />\n                                    }\n                                    label=\"Light\"\n                                />\n                                <FormControlLabel\n                                    control={\n                                        <Radio\n                                            checked={themeType === 'dark'}\n                                            value=\"dark\"\n                                            onChange={handleThemeTypeChange}\n                                        />\n                                    }\n                                    label=\"Dark\"\n                                />\n                            </div>\n                        </Grid>\n                        <Grid item id=\"keyboard-shortcuts\">\n                            <FormLabel>Keyboard Shortcuts</FormLabel>\n                            <FormGroup>\n                                {Object.keys(keyBindProperties).map((key) => {\n                                    const keyBindName = key as KeyBindName;\n                                    const properties = keyBindProperties[keyBindName];\n                                    return (\n                                        <KeyBindField\n                                            key={key}\n                                            label={properties.label}\n                                            keys={\n                                                extension.installed && properties.extensionOverridden\n                                                    ? extension.extensionCommands[keyBindName] ?? ''\n                                                    : keyBindSet[keyBindName].keys\n                                            }\n                                            extensionOverridden={extension.installed && properties.extensionOverridden}\n                                            onKeysChange={(keys) => handleKeysChange(keys, keyBindName)}\n                                            onOpenExtensionShortcuts={() => extension.openShortcuts()}\n                                        />\n                                    );\n                                })}\n                            </FormGroup>\n                        </Grid>\n                    </Grid>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose}>OK</Button>\n                </DialogActions>\n            </Dialog>\n        </React.Fragment>\n    );\n}\n","import {\n    AsbplayerSettings,\n    AsbplayerSettingsProvider,\n    AutoPausePreference,\n    KeyBindName,\n    KeyBindSet,\n} from '@project/common';\nimport { isMacOs } from 'react-device-detect';\n\nconst defaultAnkiConnectUrl = 'http://127.0.0.1:8765';\nconst defaultSubtitleSize = 36;\nconst defaultSubtitleColor = '#ffffff';\nconst defaultSubtitleOutlineThickness = 0;\nconst defaultSubtitleOutlineColor = '#000000';\nconst defaultSubtitleBackgroundColor = '#000000';\nconst defaultSubtitleBackgroundOpacity = 0.5;\nconst defaultSubtitleFontFamily = '';\nconst defaultSubtitlePreview = 'アあ安';\nconst defaultAudioPaddingStart = 0;\nconst defaultAudioPaddingEnd = 500;\nconst defaultMaxImageWidth = 0;\nconst defaultMaxImageHeight = 0;\nconst defaultSurroundingSubtitlesCountRadius = 2;\nconst defaultSurroundingSubtitlesTimeRadius = 10000;\nconst defaultAutoPausePreference = AutoPausePreference.atEnd;\nconst defaultKeyBindSet: KeyBindSet = {\n    togglePlay: { keys: 'space' },\n    toggleAutoPause: { keys: isMacOs ? '⇧+P' : 'shift+P' },\n    toggleCondensedPlayback: { keys: isMacOs ? '⇧+O' : 'shift+O' },\n    toggleSubtitles: { keys: 'S' },\n    toggleVideoSubtitleTrack1: { keys: '1' },\n    toggleVideoSubtitleTrack2: { keys: '2' },\n    toggleAsbplayerSubtitleTrack1: { keys: 'W+1' },\n    toggleAsbplayerSubtitleTrack2: { keys: 'W+2' },\n    seekBackward: { keys: 'A' },\n    seekForward: { keys: 'D' },\n    seekToPreviousSubtitle: { keys: 'left' },\n    seekToNextSubtitle: { keys: 'right' },\n    seekToBeginningOfCurrentSubtitle: { keys: 'down' },\n    adjustOffsetToPreviousSubtitle: { keys: isMacOs ? '⇧+left' : 'ctrl+left' },\n    adjustOffsetToNextSubtitle: { keys: isMacOs ? '⇧+right' : 'ctrl+right' },\n    decreaseOffset: { keys: isMacOs ? '⇧+⌃+right' : 'ctrl+shift+right' },\n    increaseOffset: { keys: isMacOs ? '⇧+⌃+left' : 'ctrl+shift+left' },\n    copySubtitle: { keys: isMacOs ? '⇧+⌃+Z' : 'ctrl+shift+Z' },\n    ankiExport: { keys: isMacOs ? '⇧+⌃+X' : 'ctrl+shift+X' },\n    updateLastCard: { keys: isMacOs ? '⇧+⌃+U' : 'ctrl+shift+U' },\n    decreasePlaybackRate: { keys: isMacOs ? '⇧+⌃+[' : 'ctrl+shift+[' },\n    increasePlaybackRate: { keys: isMacOs ? '⇧+⌃+]' : 'ctrl+shift+]' },\n};\nconst defaultPreferMp3 = true;\n\nconst ankiConnectUrlKey = 'ankiConnectUrl';\nconst deckKey = 'deck';\nconst noteTypeKey = 'noteType';\nconst sentenceFieldKey = 'sentenceField';\nconst definitionFieldKey = 'definitionField';\nconst audioFieldKey = 'audioField';\nconst imageFieldKey = 'imageField';\nconst wordFieldKey = 'wordField';\nconst sourceFieldKey = 'sourceField';\nconst urlFieldKey = 'urlField';\nconst customAnkiFieldsKey = 'customAnkiFields';\nconst tagsKey = 'tags';\nconst subtitleSizeKey = 'subtitleSize';\nconst subtitleColorKey = 'subtitleColor';\nconst subtitleOutlineThicknessKey = 'subtitleOutlineThickness';\nconst subtitleOutlineColorKey = 'subtitleOutlineColor';\nconst subtitleBackgroundColorKey = 'subtitleBackgroundColor';\nconst subtitleBackgroundOpacityKey = 'subtitleBackgroundOpacity';\nconst subtitleFontFamilyKey = 'subtitleFontFamily';\nconst subtitlePreviewKey = 'subtitlePreview';\nconst imageBasedSubtitleScaleFactorKey = 'imageBasedSubtitleScaleFactor';\nconst audioPaddingStartKey = 'audioPaddingStart';\nconst audioPaddingEndKey = 'audioPaddingEnd';\nconst maxImageWidthKey = 'maxImageWidth';\nconst maxImageHeightKey = 'maxImageHeight';\nconst surroundingSubtitlesCountRadiusKey = 'surroundingSubtitlesCountRadius';\nconst surroundingSubtitlesTimeRadiusKey = 'surroundingSubtitlesTimeRadius';\nconst preferMp3Key = 'preferMp3';\nconst themeTypeKey = 'themeType';\nconst copyToClipboardOnMineKey = 'copyToClipboardOnMine';\nconst autoPausePreferenceKey = 'autoPausePreference';\nconst keyBindSetKey = 'keyBindSet';\nconst rememberSubtitleOffsetKey = 'rememberSubtitleOffset';\nconst autoCopyCurrentSubtitleKey = 'autoCopyCurrentSubtitle';\n\nexport default class SettingsProvider implements AsbplayerSettingsProvider {\n    private _tags?: string[];\n    private _keyBindSet?: KeyBindSet;\n\n    constructor() {\n        // Cache for use in useEffect dependencies\n        this._tags = this.tags;\n        this._keyBindSet = this.keyBindSet;\n    }\n\n    get settings(): AsbplayerSettings {\n        return {\n            ankiConnectUrl: this.ankiConnectUrl,\n            deck: this.deck,\n            noteType: this.noteType,\n            sentenceField: this.sentenceField,\n            definitionField: this.definitionField,\n            audioField: this.audioField,\n            imageField: this.imageField,\n            wordField: this.wordField,\n            urlField: this.urlField,\n            customAnkiFields: this.customAnkiFields,\n            tags: this.tags,\n            sourceField: this.sourceField,\n            subtitleSize: this.subtitleSize,\n            subtitleColor: this.subtitleColor,\n            subtitleOutlineThickness: this.subtitleOutlineThickness,\n            subtitleOutlineColor: this.subtitleOutlineColor,\n            subtitleBackgroundColor: this.subtitleBackgroundColor,\n            subtitleBackgroundOpacity: this.subtitleBackgroundOpacity,\n            subtitleFontFamily: this.subtitleFontFamily,\n            subtitlePreview: this.subtitlePreview,\n            imageBasedSubtitleScaleFactor: this.imageBasedSubtitleScaleFactor,\n            preferMp3: this.preferMp3,\n            themeType: this.themeType,\n            audioPaddingStart: this.audioPaddingStart,\n            audioPaddingEnd: this.audioPaddingEnd,\n            maxImageWidth: this.maxImageWidth,\n            maxImageHeight: this.maxImageHeight,\n            surroundingSubtitlesCountRadius: this.surroundingSubtitlesCountRadius,\n            surroundingSubtitlesTimeRadius: this.surroundingSubtitlesTimeRadius,\n            copyToClipboardOnMine: this.copyToClipboardOnMine,\n            autoPausePreference: this.autoPausePreference,\n            keyBindSet: this.keyBindSet,\n            rememberSubtitleOffset: this.rememberSubtitleOffset,\n            autoCopyCurrentSubtitle: this.autoCopyCurrentSubtitle,\n        };\n    }\n\n    set settings(newSettings: AsbplayerSettings) {\n        this.ankiConnectUrl = newSettings.ankiConnectUrl;\n        this.deck = newSettings.deck;\n        this.noteType = newSettings.noteType;\n        this.sentenceField = newSettings.sentenceField;\n        this.definitionField = newSettings.definitionField;\n        this.audioField = newSettings.audioField;\n        this.imageField = newSettings.imageField;\n        this.wordField = newSettings.wordField;\n        this.sourceField = newSettings.sourceField;\n        this.urlField = newSettings.urlField;\n        this.tags = newSettings.tags;\n        this.subtitleSize = newSettings.subtitleSize;\n        this.subtitleColor = newSettings.subtitleColor;\n        this.subtitleOutlineThickness = newSettings.subtitleOutlineThickness;\n        this.subtitleOutlineColor = newSettings.subtitleOutlineColor;\n        this.subtitleBackgroundColor = newSettings.subtitleBackgroundColor;\n        this.subtitleBackgroundOpacity = newSettings.subtitleBackgroundOpacity;\n        this.subtitleFontFamily = newSettings.subtitleFontFamily;\n        this.subtitlePreview = newSettings.subtitlePreview;\n        this.imageBasedSubtitleScaleFactor = newSettings.imageBasedSubtitleScaleFactor;\n        this.customAnkiFields = newSettings.customAnkiFields;\n        this.preferMp3 = newSettings.preferMp3;\n        this.themeType = newSettings.themeType;\n        this.audioPaddingStart = newSettings.audioPaddingStart;\n        this.audioPaddingEnd = newSettings.audioPaddingEnd;\n        this.maxImageWidth = newSettings.maxImageWidth;\n        this.maxImageHeight = newSettings.maxImageHeight;\n        this.surroundingSubtitlesCountRadius = newSettings.surroundingSubtitlesCountRadius;\n        this.surroundingSubtitlesTimeRadius = newSettings.surroundingSubtitlesTimeRadius;\n        this.copyToClipboardOnMine = newSettings.copyToClipboardOnMine;\n        this.autoPausePreference = newSettings.autoPausePreference;\n        this.keyBindSet = newSettings.keyBindSet;\n        this.rememberSubtitleOffset = newSettings.rememberSubtitleOffset;\n        this.autoCopyCurrentSubtitle = newSettings.autoCopyCurrentSubtitle;\n    }\n\n    get subtitleSettings() {\n        return {\n            subtitleSize: this.subtitleSize,\n            subtitleColor: this.subtitleColor,\n            subtitleOutlineThickness: this.subtitleOutlineThickness,\n            subtitleOutlineColor: this.subtitleOutlineColor,\n            subtitleBackgroundColor: this.subtitleBackgroundColor,\n            subtitleBackgroundOpacity: this.subtitleBackgroundOpacity,\n            subtitleFontFamily: this.subtitleFontFamily,\n            imageBasedSubtitleScaleFactor: this.imageBasedSubtitleScaleFactor,\n        };\n    }\n\n    get ankiSettings() {\n        return {\n            ankiConnectUrl: this.ankiConnectUrl,\n            deck: this.deck,\n            noteType: this.noteType,\n            sentenceField: this.sentenceField,\n            definitionField: this.definitionField,\n            audioField: this.audioField,\n            imageField: this.imageField,\n            wordField: this.wordField,\n            sourceField: this.sourceField,\n            urlField: this.urlField,\n            customAnkiFields: this.customAnkiFields,\n            tags: this.tags,\n            preferMp3: this.preferMp3,\n            audioPaddingStart: this.audioPaddingStart,\n            audioPaddingEnd: this.audioPaddingEnd,\n            maxImageWidth: this.maxImageWidth,\n            maxImageHeight: this.maxImageHeight,\n            surroundingSubtitlesCountRadius: this.surroundingSubtitlesCountRadius,\n            surroundingSubtitlesTimeRadius: this.surroundingSubtitlesTimeRadius,\n        };\n    }\n\n    get miscSettings() {\n        return {\n            themeType: this.themeType,\n            copyToClipboardOnMine: this.copyToClipboardOnMine,\n            autoPausePreference: this.autoPausePreference,\n            keyBindSet: this.keyBindSet,\n            rememberSubtitleOffset: this.rememberSubtitleOffset,\n            autoCopyCurrentSubtitle: this.autoCopyCurrentSubtitle,\n        };\n    }\n\n    _getNumberItem(key: string, defaultValue: number) {\n        const value = localStorage.getItem(key);\n\n        if (value === null) {\n            return defaultValue;\n        }\n\n        return Number(value);\n    }\n\n    _setOptionalItem(key: string, value?: string) {\n        if (typeof value === 'undefined') {\n            localStorage.removeItem(key);\n        } else {\n            localStorage.setItem(key, value);\n        }\n    }\n\n    get ankiConnectUrl() {\n        return localStorage.getItem(ankiConnectUrlKey) || defaultAnkiConnectUrl;\n    }\n\n    set ankiConnectUrl(url) {\n        localStorage.setItem(ankiConnectUrlKey, url);\n    }\n\n    get deck() {\n        return localStorage.getItem(deckKey) ?? undefined;\n    }\n\n    set deck(deck) {\n        this._setOptionalItem(deckKey, deck);\n    }\n\n    get noteType() {\n        return localStorage.getItem(noteTypeKey) ?? undefined;\n    }\n\n    set noteType(noteType) {\n        this._setOptionalItem(noteTypeKey, noteType);\n    }\n\n    get sentenceField() {\n        return localStorage.getItem(sentenceFieldKey) ?? undefined;\n    }\n\n    set sentenceField(sentenceField) {\n        this._setOptionalItem(sentenceFieldKey, sentenceField);\n    }\n\n    get definitionField() {\n        return localStorage.getItem(definitionFieldKey) ?? undefined;\n    }\n\n    set definitionField(definitionField) {\n        this._setOptionalItem(definitionFieldKey, definitionField);\n    }\n\n    get audioField() {\n        return localStorage.getItem(audioFieldKey) ?? undefined;\n    }\n\n    set audioField(audioField) {\n        this._setOptionalItem(audioFieldKey, audioField);\n    }\n\n    get imageField() {\n        return localStorage.getItem(imageFieldKey) ?? undefined;\n    }\n\n    set imageField(imageField) {\n        this._setOptionalItem(imageFieldKey, imageField);\n    }\n\n    get wordField() {\n        return localStorage.getItem(wordFieldKey) ?? undefined;\n    }\n\n    set wordField(wordField) {\n        this._setOptionalItem(wordFieldKey, wordField);\n    }\n\n    get sourceField() {\n        return localStorage.getItem(sourceFieldKey) ?? undefined;\n    }\n\n    set sourceField(sourceField) {\n        this._setOptionalItem(sourceFieldKey, sourceField);\n    }\n\n    get urlField() {\n        return localStorage.getItem(urlFieldKey) ?? undefined;\n    }\n\n    set urlField(urlField) {\n        this._setOptionalItem(urlFieldKey, urlField);\n    }\n\n    get customAnkiFields() {\n        const ankiFieldsString = localStorage.getItem(customAnkiFieldsKey);\n\n        if (ankiFieldsString) {\n            return JSON.parse(ankiFieldsString);\n        }\n\n        return {};\n    }\n\n    set customAnkiFields(customAnkiFields) {\n        localStorage.setItem(customAnkiFieldsKey, JSON.stringify(customAnkiFields));\n    }\n\n    get tags() {\n        if (typeof this._tags !== 'undefined') {\n            return this._tags;\n        }\n\n        const tagsString = localStorage.getItem(tagsKey);\n\n        if (tagsString) {\n            this._tags = JSON.parse(tagsString) as string[];\n            return this._tags;\n        }\n\n        return [];\n    }\n\n    set tags(tags) {\n        localStorage.setItem(tagsKey, JSON.stringify(tags));\n        this._tags = undefined;\n    }\n\n    get subtitleColor() {\n        return localStorage.getItem(subtitleColorKey) || defaultSubtitleColor;\n    }\n\n    set subtitleColor(subtitleColor) {\n        localStorage.setItem(subtitleColorKey, subtitleColor);\n    }\n\n    get subtitleSize() {\n        return this._getNumberItem(subtitleSizeKey, defaultSubtitleSize);\n    }\n\n    set subtitleSize(subtitleSize) {\n        localStorage.setItem(subtitleSizeKey, String(subtitleSize));\n    }\n\n    get subtitleOutlineColor() {\n        return localStorage.getItem(subtitleOutlineColorKey) || defaultSubtitleOutlineColor;\n    }\n\n    set subtitleOutlineColor(subtitleOutlineColor) {\n        localStorage.setItem(subtitleOutlineColorKey, subtitleOutlineColor);\n    }\n\n    get subtitleOutlineThickness() {\n        return this._getNumberItem(subtitleOutlineThicknessKey, defaultSubtitleOutlineThickness);\n    }\n\n    set subtitleOutlineThickness(subtitleOutlineThickness) {\n        localStorage.setItem(subtitleOutlineThicknessKey, String(subtitleOutlineThickness));\n    }\n\n    get subtitleBackgroundColor() {\n        return localStorage.getItem(subtitleBackgroundColorKey) || defaultSubtitleBackgroundColor;\n    }\n\n    set subtitleBackgroundColor(subtitleBackgroundColor) {\n        localStorage.setItem(subtitleBackgroundColorKey, subtitleBackgroundColor);\n    }\n\n    get subtitleBackgroundOpacity() {\n        return this._getNumberItem(subtitleBackgroundOpacityKey, defaultSubtitleBackgroundOpacity);\n    }\n\n    set subtitleBackgroundOpacity(subtitleBackgroundOpacity) {\n        localStorage.setItem(subtitleBackgroundOpacityKey, String(subtitleBackgroundOpacity));\n    }\n\n    get subtitleFontFamily() {\n        return localStorage.getItem(subtitleFontFamilyKey) || defaultSubtitleFontFamily;\n    }\n\n    set subtitleFontFamily(subtitleFontFamily) {\n        localStorage.setItem(subtitleFontFamilyKey, subtitleFontFamily);\n    }\n\n    get subtitlePreview() {\n        return localStorage.getItem(subtitlePreviewKey) || defaultSubtitlePreview;\n    }\n\n    set subtitlePreview(subtitlePreview) {\n        localStorage.setItem(subtitlePreviewKey, subtitlePreview);\n    }\n\n    get imageBasedSubtitleScaleFactor() {\n        return this._getNumberItem(imageBasedSubtitleScaleFactorKey, 1);\n    }\n\n    set imageBasedSubtitleScaleFactor(imageBasedSubtitleScaleFactor: number) {\n        localStorage.setItem(imageBasedSubtitleScaleFactorKey, String(imageBasedSubtitleScaleFactor));\n    }\n\n    get preferMp3(): boolean {\n        const value = localStorage.getItem(preferMp3Key);\n\n        if (value !== null) {\n            if (value === 'true') {\n                return true;\n            }\n\n            return false;\n        }\n\n        return defaultPreferMp3;\n    }\n\n    set preferMp3(preferMp3) {\n        localStorage.setItem(preferMp3Key, String(preferMp3));\n    }\n\n    get themeType() {\n        const themeType = localStorage.getItem(themeTypeKey) as 'dark' | 'light' | null;\n\n        if (themeType === null) {\n            return 'dark';\n        }\n\n        return themeType;\n    }\n\n    set themeType(themeType: 'dark' | 'light') {\n        localStorage.setItem(themeTypeKey, themeType);\n    }\n\n    get audioPaddingStart() {\n        const value = localStorage.getItem(audioPaddingStartKey);\n\n        if (!value) {\n            return defaultAudioPaddingStart;\n        }\n\n        return Number(value);\n    }\n\n    set audioPaddingStart(audioPaddingStart) {\n        localStorage.setItem(audioPaddingStartKey, String(audioPaddingStart));\n    }\n\n    get audioPaddingEnd() {\n        return this._getNumberItem(audioPaddingEndKey, defaultAudioPaddingEnd);\n    }\n\n    set audioPaddingEnd(audioPaddingEnd) {\n        localStorage.setItem(audioPaddingEndKey, String(audioPaddingEnd));\n    }\n\n    get maxImageWidth() {\n        const value = localStorage.getItem(maxImageWidthKey);\n\n        if (!value) {\n            return defaultMaxImageWidth;\n        }\n\n        return Number(value);\n    }\n\n    set maxImageWidth(maxImageWidth) {\n        localStorage.setItem(maxImageWidthKey, String(maxImageWidth));\n    }\n\n    get maxImageHeight() {\n        return this._getNumberItem(maxImageHeightKey, defaultMaxImageHeight);\n    }\n\n    set maxImageHeight(maxImageHeight) {\n        localStorage.setItem(maxImageHeightKey, String(maxImageHeight));\n    }\n\n    get surroundingSubtitlesCountRadius() {\n        return this._getNumberItem(surroundingSubtitlesCountRadiusKey, defaultSurroundingSubtitlesCountRadius);\n    }\n\n    set surroundingSubtitlesCountRadius(surroundingSubtitlesCountRadius) {\n        localStorage.setItem(surroundingSubtitlesCountRadiusKey, String(surroundingSubtitlesCountRadius));\n    }\n\n    get surroundingSubtitlesTimeRadius() {\n        return this._getNumberItem(surroundingSubtitlesTimeRadiusKey, defaultSurroundingSubtitlesTimeRadius);\n    }\n\n    set surroundingSubtitlesTimeRadius(surroundingSubtitlesTimeRadius) {\n        localStorage.setItem(surroundingSubtitlesTimeRadiusKey, String(surroundingSubtitlesTimeRadius));\n    }\n\n    get copyToClipboardOnMine() {\n        return localStorage.getItem(copyToClipboardOnMineKey) === 'true' || false;\n    }\n\n    set copyToClipboardOnMine(copyToClipboardOnMine) {\n        localStorage.setItem(copyToClipboardOnMineKey, String(copyToClipboardOnMine));\n    }\n\n    get autoPausePreference() {\n        return this._getNumberItem(autoPausePreferenceKey, defaultAutoPausePreference);\n    }\n\n    set autoPausePreference(autoPausePreference) {\n        localStorage.setItem(autoPausePreferenceKey, String(autoPausePreference));\n    }\n\n    get keyBindSet() {\n        if (this._keyBindSet !== undefined) {\n            return this._keyBindSet;\n        }\n\n        let serialized = localStorage.getItem(keyBindSetKey);\n\n        if (serialized === null) {\n            this._keyBindSet = defaultKeyBindSet;\n            return defaultKeyBindSet;\n        }\n\n        const keyBindSet = JSON.parse(serialized);\n\n        for (const key of Object.keys(defaultKeyBindSet)) {\n            const keyBindName = key as KeyBindName;\n\n            if (keyBindSet[keyBindName] === undefined) {\n                keyBindSet[keyBindName] = defaultKeyBindSet[keyBindName];\n            }\n        }\n\n        this._keyBindSet = keyBindSet;\n        return keyBindSet as KeyBindSet;\n    }\n\n    set keyBindSet(keyBindSet) {\n        localStorage.setItem(keyBindSetKey, JSON.stringify(keyBindSet));\n        this._keyBindSet = undefined;\n    }\n\n    get rememberSubtitleOffset() {\n        return localStorage.getItem(rememberSubtitleOffsetKey) === 'true' || false;\n    }\n\n    set rememberSubtitleOffset(rememberSubtitleOffset) {\n        localStorage.setItem(rememberSubtitleOffsetKey, String(rememberSubtitleOffset));\n    }\n\n    get autoCopyCurrentSubtitle() {\n        return localStorage.getItem(autoCopyCurrentSubtitleKey) === 'true' || false;\n    }\n\n    set autoCopyCurrentSubtitle(autoCopyCurrentSubtitle) {\n        localStorage.setItem(autoCopyCurrentSubtitleKey, String(autoCopyCurrentSubtitle));\n    }\n}\n","import {\n    AlertMessage,\n    AnkiDialogRequestFromVideoMessage,\n    AnkiSettings,\n    AnkiSettingsToVideoMessage,\n    AppBarToggleMessageToVideoMessage,\n    AudioTrackModel,\n    AudioTrackSelectedFromVideoMessage,\n    AudioTrackSelectedToVideoMessage,\n    CopyMessage,\n    CurrentTimeToVideoMessage,\n    FullscreenToggleMessageToVideoMessage,\n    HideSubtitlePlayerToggleToVideoMessage,\n    MiscSettings,\n    MiscSettingsToVideoMessage,\n    OffsetFromVideoMessage,\n    OffsetToVideoMessage,\n    PauseFromVideoMessage,\n    PlaybackRateFromVideoMessage,\n    PlaybackRateToVideoMessage,\n    PlayFromVideoMessage,\n    PlayMode,\n    PlayModeMessage,\n    PostMineAction,\n    ReadyFromVideoMessage,\n    ReadyStateFromVideoMessage,\n    ReadyToVideoMessage,\n    SubtitleModel,\n    SubtitleSettings,\n    SubtitleSettingsToVideoMessage,\n    SubtitlesToVideoMessage,\n    ToggleSubtitleTrackInListFromVideoMessage,\n} from '@project/common';\n\nexport default class PlayerChannel {\n    private channel?: BroadcastChannel;\n    private readyCallbacks: ((duration: number, videoFileName?: string) => void)[];\n    private playCallbacks: (() => void)[];\n    private pauseCallbacks: (() => void)[];\n    private currentTimeCallbacks: ((currentTime: number) => void)[];\n    private audioTrackSelectedCallbacks: ((id: string) => void)[];\n    private closeCallbacks: (() => void)[];\n    private subtitlesCallbacks: ((subtitles: SubtitleModel[]) => void)[];\n    private offsetCallbacks: ((offset: number) => void)[];\n    private playbackRateCallbacks: ((playbackRate: number) => void)[];\n    private playModeCallbacks: ((playMode: PlayMode) => void)[];\n    private hideSubtitlePlayerToggleCallbacks: ((hidden: boolean) => void)[];\n    private appBarToggleCallbacks: ((hidden: boolean) => void)[];\n    private fullscreenToggleCallbacks: ((hidden: boolean) => void)[];\n    private subtitleSettingsCallbacks: ((subtitleSettings: SubtitleSettings) => void)[];\n    private miscSettingsCallbacks: ((miscSettings: MiscSettings) => void)[];\n    private ankiSettingsCallbacks: ((ankiSettings: AnkiSettings) => void)[];\n    private alertCallbacks: ((message: string, severity: string) => void)[];\n\n    constructor(channel: string) {\n        this.channel = new BroadcastChannel(channel);\n        this.playCallbacks = [];\n        this.pauseCallbacks = [];\n        this.currentTimeCallbacks = [];\n        this.audioTrackSelectedCallbacks = [];\n        this.closeCallbacks = [];\n        this.readyCallbacks = [];\n        this.subtitlesCallbacks = [];\n        this.offsetCallbacks = [];\n        this.playbackRateCallbacks = [];\n        this.playModeCallbacks = [];\n        this.hideSubtitlePlayerToggleCallbacks = [];\n        this.appBarToggleCallbacks = [];\n        this.fullscreenToggleCallbacks = [];\n        this.subtitleSettingsCallbacks = [];\n        this.miscSettingsCallbacks = [];\n        this.ankiSettingsCallbacks = [];\n        this.alertCallbacks = [];\n\n        const that = this;\n\n        this.channel.onmessage = (event) => {\n            switch (event.data.command) {\n                case 'init':\n                    // ignore, this is for the chrome extension\n                    break;\n                case 'ready':\n                    const readyMessage = event.data as ReadyToVideoMessage;\n\n                    for (let callback of that.readyCallbacks) {\n                        callback(readyMessage.duration, readyMessage.videoFileName);\n                    }\n                    break;\n                case 'play':\n                    for (let callback of that.playCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'pause':\n                    for (let callback of that.pauseCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'currentTime':\n                    const currentTimeMessage = event.data as CurrentTimeToVideoMessage;\n\n                    for (let callback of that.currentTimeCallbacks) {\n                        callback(currentTimeMessage.value);\n                    }\n                    break;\n                case 'audioTrackSelected':\n                    const audioTrackSelectedMessage = event.data as AudioTrackSelectedToVideoMessage;\n\n                    for (let callback of that.audioTrackSelectedCallbacks) {\n                        callback(audioTrackSelectedMessage.id);\n                    }\n                    break;\n                case 'close':\n                    for (let callback of that.closeCallbacks) {\n                        callback();\n                    }\n                    break;\n                case 'subtitles':\n                    const subtitlesMessage = event.data as SubtitlesToVideoMessage;\n\n                    for (let callback of that.subtitlesCallbacks) {\n                        callback(subtitlesMessage.value);\n                    }\n                    break;\n                case 'offset':\n                    const offsetMessage = event.data as OffsetToVideoMessage;\n\n                    for (const callback of that.offsetCallbacks) {\n                        callback(offsetMessage.value);\n                    }\n                    break;\n                case 'playbackRate':\n                    const playbackRateMessage = event.data as PlaybackRateToVideoMessage;\n\n                    for (const callback of that.playbackRateCallbacks) {\n                        callback(playbackRateMessage.value);\n                    }\n                    break;\n                case 'subtitleSettings':\n                    const subtitleSettingsMessage = event.data as SubtitleSettingsToVideoMessage;\n\n                    for (let callback of that.subtitleSettingsCallbacks) {\n                        callback(subtitleSettingsMessage.value);\n                    }\n                    break;\n                case 'playMode':\n                    const playModeMessage = event.data as PlayModeMessage;\n\n                    for (let callback of that.playModeCallbacks) {\n                        callback(playModeMessage.playMode);\n                    }\n                    break;\n                case 'hideSubtitlePlayerToggle':\n                    const hideSubtitlePlayerToggleMessage = event.data as HideSubtitlePlayerToggleToVideoMessage;\n\n                    for (let callback of that.hideSubtitlePlayerToggleCallbacks) {\n                        callback(hideSubtitlePlayerToggleMessage.value);\n                    }\n                    break;\n                case 'appBarToggle':\n                    const appBarToggleMessage = event.data as AppBarToggleMessageToVideoMessage;\n\n                    for (let callback of that.appBarToggleCallbacks) {\n                        callback(appBarToggleMessage.value);\n                    }\n                    break;\n                case 'fullscreenToggle':\n                    const fullscreenToggleMessage = event.data as FullscreenToggleMessageToVideoMessage;\n\n                    for (const callback of that.fullscreenToggleCallbacks) {\n                        callback(fullscreenToggleMessage.value);\n                    }\n                    break;\n                case 'ankiSettings':\n                    const ankiSettingsMessage = event.data as AnkiSettingsToVideoMessage;\n\n                    for (let callback of that.ankiSettingsCallbacks) {\n                        callback(ankiSettingsMessage.value);\n                    }\n                    break;\n                case 'miscSettings':\n                    const miscSettingsMessage = event.data as MiscSettingsToVideoMessage;\n\n                    for (let callback of that.miscSettingsCallbacks) {\n                        callback(miscSettingsMessage.value);\n                    }\n                    break;\n                case 'alert':\n                    const alertMessage = event.data as AlertMessage;\n\n                    for (const callback of that.alertCallbacks) {\n                        callback(alertMessage.message, alertMessage.severity);\n                    }\n                    break;\n                default:\n                    console.error('Unrecognized event ' + event.data.command);\n            }\n        };\n    }\n\n    set currentTime(value: number) {\n        this.channel?.postMessage({ command: 'currentTime', value: value, echo: true });\n    }\n\n    onPlay(callback: () => void) {\n        this.playCallbacks.push(callback);\n    }\n\n    onPause(callback: () => void) {\n        this.pauseCallbacks.push(callback);\n    }\n\n    onCurrentTime(callback: (currentTime: number) => void) {\n        this.currentTimeCallbacks.push(callback);\n    }\n\n    onAudioTrackSelected(callback: (id: string) => void) {\n        this.audioTrackSelectedCallbacks.push(callback);\n    }\n\n    onClose(callback: () => void) {\n        this.closeCallbacks.push(callback);\n    }\n\n    onReady(callback: (duration: number, videoFileName?: string) => void) {\n        this.readyCallbacks.push(callback);\n    }\n\n    onSubtitles(callback: (subtitles: SubtitleModel[]) => void) {\n        this.subtitlesCallbacks.push(callback);\n    }\n\n    onOffset(callback: (offset: number) => void) {\n        this.offsetCallbacks.push(callback);\n    }\n\n    onPlaybackRate(callback: (playbackRate: number) => void) {\n        this.playbackRateCallbacks.push(callback);\n    }\n\n    onPlayMode(callback: (playMode: PlayMode) => void) {\n        this.playModeCallbacks.push(callback);\n    }\n\n    onHideSubtitlePlayerToggle(callback: (hidden: boolean) => void) {\n        this.hideSubtitlePlayerToggleCallbacks.push(callback);\n    }\n\n    onAppBarToggle(callback: (hidden: boolean) => void) {\n        this.appBarToggleCallbacks.push(callback);\n    }\n\n    onFullscreenToggle(callback: (fullscreen: boolean) => void) {\n        this.fullscreenToggleCallbacks.push(callback);\n    }\n\n    onSubtitleSettings(callback: (subtitleSettings: SubtitleSettings) => void) {\n        this.subtitleSettingsCallbacks.push(callback);\n    }\n\n    onMiscSettings(callback: (miscSettings: MiscSettings) => void) {\n        this.miscSettingsCallbacks.push(callback);\n    }\n\n    onAnkiSettings(callback: (ankiSettings: AnkiSettings) => void) {\n        this.ankiSettingsCallbacks.push(callback);\n    }\n\n    onAlert(callback: (message: string, severity: string) => void) {\n        this.alertCallbacks.push(callback);\n    }\n\n    ready(\n        duration: number,\n        paused: boolean,\n        playbackRate: number,\n        audioTracks: AudioTrackModel[] | undefined,\n        selectedAudioTrack: string | undefined\n    ) {\n        const message: ReadyFromVideoMessage = {\n            command: 'ready',\n            duration: duration,\n            paused: paused,\n            currentTime: 0,\n            audioTracks: audioTracks,\n            selectedAudioTrack: selectedAudioTrack,\n            playbackRate: playbackRate,\n        };\n\n        this.channel?.postMessage(message);\n    }\n\n    readyState(readyState: number) {\n        const message: ReadyStateFromVideoMessage = { command: 'readyState', value: readyState };\n        this.channel?.postMessage(message);\n    }\n\n    play() {\n        const message: PlayFromVideoMessage = { command: 'play', echo: true };\n        this.channel?.postMessage(message);\n    }\n\n    pause() {\n        const message: PauseFromVideoMessage = { command: 'pause', echo: true };\n        this.channel?.postMessage(message);\n    }\n\n    audioTrackSelected(id: string) {\n        const message: AudioTrackSelectedFromVideoMessage = { command: 'audioTrackSelected', id: id };\n        this.channel?.postMessage(message);\n    }\n\n    offset(offset: number) {\n        const message: OffsetFromVideoMessage = { command: 'offset', value: offset };\n        this.channel?.postMessage(message);\n    }\n\n    playbackRate(playbackRate: number) {\n        const message: PlaybackRateFromVideoMessage = { command: 'playbackRate', value: playbackRate, echo: true };\n        this.channel?.postMessage(message);\n    }\n\n    popOutToggle() {\n        this.channel?.postMessage({ command: 'popOutToggle' });\n    }\n\n    copy(\n        subtitle: SubtitleModel,\n        surroundingSubtitles: SubtitleModel[],\n        postMineAction: PostMineAction,\n        preventDuplicate?: boolean\n    ) {\n        const message: CopyMessage = {\n            command: 'copy',\n            subtitle: subtitle,\n            surroundingSubtitles: surroundingSubtitles,\n            preventDuplicate: preventDuplicate,\n            postMineAction: postMineAction,\n        };\n\n        this.channel?.postMessage(message);\n    }\n\n    playMode(playMode: PlayMode) {\n        this.channel?.postMessage({ command: 'playMode', playMode: playMode });\n    }\n\n    hideSubtitlePlayerToggle() {\n        this.channel?.postMessage({ command: 'hideSubtitlePlayerToggle' });\n    }\n\n    appBarToggle() {\n        this.channel?.postMessage({ command: 'appBarToggle' });\n    }\n\n    fullscreenToggle() {\n        this.channel?.postMessage({ command: 'fullscreenToggle' });\n    }\n\n    ankiDialogRequest(forwardToVideo: boolean) {\n        const message: AnkiDialogRequestFromVideoMessage = {\n            command: 'ankiDialogRequest',\n        };\n        this.channel?.postMessage(message);\n    }\n\n    toggleSubtitleTrackInList(track: number) {\n        const message: ToggleSubtitleTrackInListFromVideoMessage = {\n            command: 'toggleSubtitleTrackInList',\n            track: track,\n        };\n        this.channel?.postMessage(message);\n    }\n\n    close() {\n        if (this.channel) {\n            this.channel.postMessage({ command: 'exit' });\n            this.channel.close();\n            this.channel = undefined;\n            this.playCallbacks = [];\n            this.pauseCallbacks = [];\n            this.currentTimeCallbacks = [];\n            this.audioTrackSelectedCallbacks = [];\n            this.closeCallbacks = [];\n            this.readyCallbacks = [];\n            this.subtitlesCallbacks = [];\n            this.offsetCallbacks = [];\n            this.playbackRateCallbacks = [];\n            this.playModeCallbacks = [];\n            this.hideSubtitlePlayerToggleCallbacks = [];\n            this.appBarToggleCallbacks = [];\n            this.fullscreenToggleCallbacks = [];\n            this.subtitleSettingsCallbacks = [];\n            this.miscSettingsCallbacks = [];\n            this.ankiSettingsCallbacks = [];\n            this.alertCallbacks = [];\n        }\n    }\n}\n","import { CopySubtitleMessage, DefaultKeyBinder, KeyBinder, PostMineAction, SubtitleModel } from '@project/common';\nimport ChromeExtension, { ExtensionMessage } from './ChromeExtension';\n\nexport default class AppKeyBinder implements KeyBinder {\n    private readonly defaultKeyBinder: DefaultKeyBinder;\n    private readonly extension: ChromeExtension;\n    private readonly copyHandlers: ((event: KeyboardEvent) => void)[] = [];\n    private readonly ankiExportHandlers: ((event: KeyboardEvent) => void)[] = [];\n    private readonly updateLastCardHandlers: ((event: KeyboardEvent) => void)[] = [];\n    private readonly onExtensionMessage: (message: ExtensionMessage) => void;\n\n    constructor(keyBinder: DefaultKeyBinder, extension: ChromeExtension) {\n        this.defaultKeyBinder = keyBinder;\n        this.extension = extension;\n\n        this.onExtensionMessage = (message: ExtensionMessage) => {\n            if (message.data.command === 'copy-subtitle') {\n                const command = message.data as CopySubtitleMessage;\n                let handlers: ((event: KeyboardEvent) => void)[] | undefined;\n\n                switch (command.postMineAction) {\n                    case PostMineAction.none:\n                        handlers = this.copyHandlers;\n                        break;\n                    case PostMineAction.showAnkiDialog:\n                        handlers = this.ankiExportHandlers;\n                        break;\n                    case PostMineAction.updateLastCard:\n                        handlers = this.updateLastCardHandlers;\n                        break;\n                    default:\n                        console.error('Unknown post mine action ' + command.postMineAction);\n                }\n\n                for (const h of handlers!) {\n                    h(new KeyboardEvent('mock'));\n                }\n            }\n        };\n        extension.subscribe(this.onExtensionMessage);\n    }\n\n    bindCopy<T extends SubtitleModel = SubtitleModel>(\n        onCopy: (event: KeyboardEvent, subtitle: T) => void,\n        disabledGetter: () => boolean,\n        subtitleGetter: () => T | undefined,\n        useCapture?: boolean | undefined\n    ): () => void {\n        if (this.extension.installed) {\n            const handler = this.defaultKeyBinder.copyHandler(onCopy, disabledGetter, subtitleGetter);\n            this.copyHandlers.push(handler);\n            return () => {\n                this._remove(handler, this.copyHandlers);\n            };\n        }\n\n        return this.defaultKeyBinder.bindCopy(onCopy, disabledGetter, subtitleGetter, useCapture);\n    }\n\n    bindAnkiExport(\n        onAnkiExport: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        if (this.extension.installed) {\n            const handler = this.defaultKeyBinder.ankiExportHandler(onAnkiExport, disabledGetter);\n            this.ankiExportHandlers.push(handler);\n            return () => {\n                this._remove(handler, this.ankiExportHandlers);\n            };\n        }\n\n        return this.defaultKeyBinder.bindAnkiExport(onAnkiExport, disabledGetter, useCapture);\n    }\n\n    bindUpdateLastCard(\n        onUpdateLastCard: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        if (this.extension.installed) {\n            const handler = this.defaultKeyBinder.updateLastCardHandler(onUpdateLastCard, disabledGetter);\n            this.updateLastCardHandlers.push(handler);\n            return () => {\n                this._remove(handler, this.updateLastCardHandlers);\n            };\n        }\n\n        return this.defaultKeyBinder.bindUpdateLastCard(onUpdateLastCard, disabledGetter, useCapture);\n    }\n\n    private _remove(callback: (event: KeyboardEvent) => void, list: ((event: KeyboardEvent) => void)[]) {\n        for (let i = list.length - 1; i >= 0; --i) {\n            if (callback === list[i]) {\n                list.splice(i, 1);\n                break;\n            }\n        }\n    }\n\n    bindSeekToSubtitle(\n        onSeekToSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindSeekToSubtitle(\n            onSeekToSubtitle,\n            disabledGetter,\n            timeGetter,\n            subtitlesGetter,\n            useCapture\n        );\n    }\n\n    bindSeekToBeginningOfCurrentSubtitle(\n        onSeekToBeginningOfCurrentSubtitle: (event: KeyboardEvent, subtitle: SubtitleModel) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindSeekToBeginningOfCurrentSubtitle(\n            onSeekToBeginningOfCurrentSubtitle,\n            disabledGetter,\n            timeGetter,\n            subtitlesGetter,\n            useCapture\n        );\n    }\n\n    bindSeekBackwardOrForward(\n        onSeekBackwardOrForward: (event: KeyboardEvent, forward: boolean) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindSeekBackwardOrForward(onSeekBackwardOrForward, disabledGetter, useCapture);\n    }\n\n    bindOffsetToSubtitle(\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\n        disabledGetter: () => boolean,\n        timeGetter: () => number,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindOffsetToSubtitle(\n            onOffsetChange,\n            disabledGetter,\n            timeGetter,\n            subtitlesGetter,\n            useCapture\n        );\n    }\n\n    bindAdjustOffset(\n        onOffsetChange: (event: KeyboardEvent, newOffset: number) => void,\n        disabledGetter: () => boolean,\n        subtitlesGetter: () => SubtitleModel[] | undefined,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindAdjustOffset(onOffsetChange, disabledGetter, subtitlesGetter, useCapture);\n    }\n\n    bindAdjustPlaybackRate(\n        onAdjustPlaybackRate: (event: KeyboardEvent, increase: boolean) => void,\n        disabledGetter: () => boolean,\n        useCapture = false\n    ) {\n        return this.defaultKeyBinder.bindAdjustPlaybackRate(onAdjustPlaybackRate, disabledGetter, useCapture);\n    }\n\n    bindToggleSubtitles(\n        onToggleSubtitles: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindToggleSubtitles(onToggleSubtitles, disabledGetter, useCapture);\n    }\n\n    bindToggleSubtitleTrackInVideo(\n        onToggleSubtitleTrack: (event: KeyboardEvent, extra: any) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindToggleSubtitleTrackInVideo(onToggleSubtitleTrack, disabledGetter, useCapture);\n    }\n\n    bindToggleSubtitleTrackInList(\n        onToggleSubtitleTrackInList: (event: KeyboardEvent, extra: any) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindToggleSubtitleTrackInList(\n            onToggleSubtitleTrackInList,\n            disabledGetter,\n            useCapture\n        );\n    }\n\n    bindPlay(\n        onPlay: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindPlay(onPlay, disabledGetter, useCapture);\n    }\n\n    bindAutoPause(\n        onAutoPause: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindAutoPause(onAutoPause, disabledGetter, useCapture);\n    }\n\n    bindCondensedPlayback(\n        onCondensedPlayback: (event: KeyboardEvent) => void,\n        disabledGetter: () => boolean,\n        useCapture?: boolean | undefined\n    ): () => void {\n        return this.defaultKeyBinder.bindCondensedPlayback(onCondensedPlayback, disabledGetter, useCapture);\n    }\n}\n","import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { isMobile } from 'react-device-detect';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useWindowSize } from '../hooks/useWindowSize';\nimport { arrayEquals, computeStyles } from '../services/util';\nimport {\n    surroundingSubtitles,\n    mockSurroundingSubtitles,\n    SubtitleModel,\n    AudioTrackModel,\n    PostMineAction,\n    PlayMode,\n    MiscSettings,\n    SubtitleSettings,\n    DefaultKeyBinder,\n    AnkiSettings,\n    SubtitleCollection,\n    AutoPausePreference,\n    AutoPauseContext,\n} from '@project/common';\nimport { SubtitleTextImage } from '@project/common/components';\nimport Clock from '../services/Clock';\nimport Controls, { Point } from './Controls';\nimport PlayerChannel from '../services/PlayerChannel';\nimport SettingsProvider from '../services/SettingsProvider';\nimport AppKeyBinder from '../services/AppKeyBinder';\nimport ChromeExtension from '../services/ChromeExtension';\nimport PlaybackPreferences from '../services/PlaybackPreferences';\nimport { AnkiDialogFinishedRequest } from './Player';\nimport { Color } from '@material-ui/lab/Alert';\nimport Alert from './Alert';\n\ninterface ExperimentalHTMLVideoElement extends HTMLVideoElement {\n    readonly audioTracks: any;\n}\n\nconst useStyles = makeStyles({\n    root: {\n        position: 'relative',\n        backgroundColor: 'black',\n        height: '100vh',\n        overflow: 'hidden',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    video: {\n        margin: 'auto',\n    },\n    cursorHidden: {\n        cursor: 'none',\n    },\n    subtitleContainer: {\n        position: 'absolute',\n        paddingLeft: 20,\n        paddingRight: 20,\n        bottom: 100,\n        textAlign: 'center',\n        whiteSpace: 'pre-wrap',\n        lineHeight: 'normal',\n    },\n});\n\nfunction notifyReady(\n    element: ExperimentalHTMLVideoElement,\n    playerChannel: PlayerChannel,\n    setAudioTracks: React.Dispatch<React.SetStateAction<AudioTrackModel[] | undefined>>,\n    setSelectedAudioTrack: React.Dispatch<React.SetStateAction<string | undefined>>\n) {\n    if (window.outerWidth && element.videoWidth > 0 && element.videoHeight > 0) {\n        const availWidth = window.screen.availWidth - (window.outerWidth - window.innerWidth);\n        const availHeight = window.screen.availHeight - (window.outerHeight - window.innerHeight);\n        const resizeRatio = Math.min(1, Math.min(availWidth / element.videoWidth, availHeight / element.videoHeight));\n\n        window.resizeTo(\n            resizeRatio * element.videoWidth + (window.outerWidth - window.innerWidth),\n            resizeRatio * element.videoHeight + (window.outerHeight - window.innerHeight)\n        );\n    }\n\n    let tracks: AudioTrackModel[] | undefined;\n    let selectedTrack: string | undefined;\n\n    if (element.audioTracks) {\n        tracks = [];\n\n        for (let t of element.audioTracks) {\n            tracks.push({\n                id: t.id,\n                label: t.label,\n                language: t.language,\n            });\n\n            if (t.enabled) {\n                selectedTrack = t.id;\n            }\n        }\n    } else {\n        tracks = undefined;\n        selectedTrack = undefined;\n    }\n\n    setAudioTracks(tracks);\n    setSelectedAudioTrack(selectedTrack);\n    playerChannel.ready(element.duration, element.paused, element.playbackRate, tracks, selectedTrack);\n}\n\nfunction errorMessage(element: HTMLVideoElement) {\n    let error;\n    switch (element.error?.code) {\n        case 1:\n            error = 'Aborted';\n            break;\n        case 2:\n            error = 'Network error';\n            break;\n        case 3:\n            error = 'Decoding error';\n            break;\n        case 4:\n            error = 'Source not supported';\n            break;\n        default:\n            error = 'Unknown error';\n            break;\n    }\n\n    return error + ': ' + (element.error?.message || '<details missing>');\n}\n\ninterface Props {\n    settingsProvider: SettingsProvider;\n    playbackPreferences: PlaybackPreferences;\n    extension: ChromeExtension;\n    videoFile: string;\n    channel: string;\n    popOut: boolean;\n    ankiDialogFinishedRequest: AnkiDialogFinishedRequest;\n    onAnkiDialogRequest: (\n        videoFileUrl: string,\n        videoFileName: string,\n        selectedAudioTrack: string | undefined,\n        playbackRate: number,\n        subtitle: SubtitleModel,\n        surroundingSubtitles: SubtitleModel[],\n        timestamp: number\n    ) => void;\n    onError: (error: string) => void;\n    onPlayModeChangedViaBind: (oldPlayMode: PlayMode, newPlayMode: PlayMode) => void;\n}\n\ninterface IndexedSubtitleModel extends SubtitleModel {\n    index: number;\n}\n\nexport default function VideoPlayer({\n    settingsProvider,\n    playbackPreferences,\n    extension,\n    videoFile,\n    channel,\n    popOut,\n    ankiDialogFinishedRequest,\n    onAnkiDialogRequest,\n    onError,\n    onPlayModeChangedViaBind,\n}: Props) {\n    const classes = useStyles();\n    const poppingInRef = useRef<boolean>();\n    const videoRef = useRef<ExperimentalHTMLVideoElement>();\n    const [windowWidth, windowHeight] = useWindowSize(true);\n    if (videoRef.current) {\n        videoRef.current.width = windowWidth;\n        videoRef.current.height = windowHeight;\n    }\n    const playerChannel = useMemo(() => new PlayerChannel(channel), [channel]);\n    const [playing, setPlaying] = useState<boolean>(false);\n    const [fullscreen, setFullscreen] = useState<boolean>(false);\n    const playingRef = useRef<boolean>();\n    playingRef.current = playing;\n    const [length, setLength] = useState<number>(0);\n    const [videoFileName, setVideoFileName] = useState<string>();\n    const [offset, setOffset] = useState<number>(0);\n    const [playbackRate, setPlaybackRate] = useState<number>(1);\n    const [audioTracks, setAudioTracks] = useState<AudioTrackModel[]>();\n    const [selectedAudioTrack, setSelectedAudioTrack] = useState<string>();\n    const [, setResumeOnFinishedAnkiDialogRequest] = useState<boolean>(false);\n    const [subtitles, setSubtitles] = useState<IndexedSubtitleModel[]>([]);\n    const subtitleCollection = useMemo<SubtitleCollection<IndexedSubtitleModel>>(\n        () =>\n            new SubtitleCollection<IndexedSubtitleModel>(subtitles, {\n                returnLastShown: false,\n                showingCheckRadiusMs: 150,\n            }),\n        [subtitles]\n    );\n    const [showSubtitles, setShowSubtitles] = useState<IndexedSubtitleModel[]>([]);\n    const [subtitlesEnabled, setSubtitlesEnabled] = useState(true);\n    const [disabledSubtitleTracks, setDisabledSubtitleTracks] = useState<{ [index: number]: boolean }>({});\n    const [playMode, setPlayMode] = useState<PlayMode>(PlayMode.normal);\n    const [subtitlePlayerHidden, setSubtitlePlayerHidden] = useState<boolean>(false);\n    const [appBarHidden, setAppBarHidden] = useState<boolean>(playbackPreferences.theaterMode);\n    const showSubtitlesRef = useRef<IndexedSubtitleModel[]>([]);\n    showSubtitlesRef.current = showSubtitles;\n    const clock = useMemo<Clock>(() => new Clock(), []);\n    const mousePositionRef = useRef<Point>({ x: 0, y: 0 });\n    const [showCursor, setShowCursor] = useState<boolean>(false);\n    const lastMouseMovementTimestamp = useRef<number>(0);\n    const containerRef = useRef<HTMLDivElement>(null);\n    const [miscSettings, setMiscSettings] = useState<MiscSettings>(settingsProvider.miscSettings);\n    const [subtitleSettings, setSubtitleSettings] = useState<SubtitleSettings>(settingsProvider.subtitleSettings);\n    const [ankiSettings, setAnkiSettings] = useState<AnkiSettings>(settingsProvider.ankiSettings);\n    const [alertOpen, setAlertOpen] = useState<boolean>(false);\n    const [alertMessage, setAlertMessage] = useState<string>('');\n    const [alertSeverity, setAlertSeverity] = useState<Color>('info');\n    const autoPauseContext = useMemo(() => {\n        const context = new AutoPauseContext();\n        context.onStartedShowing = () => {\n            if (playMode !== PlayMode.autoPause || miscSettings.autoPausePreference !== AutoPausePreference.atStart) {\n                return;\n            }\n\n            playerChannel.pause();\n        };\n        context.onWillStopShowing = () => {\n            if (playMode !== PlayMode.autoPause || miscSettings.autoPausePreference !== AutoPausePreference.atEnd) {\n                return;\n            }\n\n            playerChannel.pause();\n        };\n        return context;\n    }, [playerChannel, miscSettings, playMode]);\n    const autoPauseContextRef = useRef<AutoPauseContext>();\n    autoPauseContextRef.current = autoPauseContext;\n\n    const keyBinder = useMemo<AppKeyBinder>(\n        () => new AppKeyBinder(new DefaultKeyBinder(miscSettings.keyBindSet), extension),\n        [miscSettings.keyBindSet, extension]\n    );\n    const videoRefCallback = useCallback(\n        (element: HTMLVideoElement) => {\n            if (element) {\n                const videoElement = element as ExperimentalHTMLVideoElement;\n                videoRef.current = videoElement;\n\n                if (videoElement.readyState === 4) {\n                    notifyReady(videoElement, playerChannel, setAudioTracks, setSelectedAudioTrack);\n                } else {\n                    videoElement.onloadeddata = (event) => {\n                        notifyReady(videoElement, playerChannel, setAudioTracks, setSelectedAudioTrack);\n                    };\n                }\n\n                videoElement.oncanplay = (event) => {\n                    playerChannel.readyState(4);\n\n                    if (playingRef.current) {\n                        clock.start();\n                    }\n                };\n\n                videoElement.ontimeupdate = (event) => clock.setTime(element.currentTime * 1000);\n\n                videoElement.onerror = (event) => onError(errorMessage(element));\n            }\n        },\n        [clock, playerChannel, onError]\n    );\n\n    function selectAudioTrack(id: string) {\n        const audioTracks = videoRef.current?.audioTracks;\n\n        if (!audioTracks) {\n            return;\n        }\n\n        // @ts-ignore\n        for (const t of audioTracks) {\n            if (t.id === id) {\n                t.enabled = true;\n            } else {\n                t.enabled = false;\n            }\n        }\n    }\n\n    const updateSubtitlesWithOffset = useCallback((offset: number) => {\n        setOffset(offset);\n        setSubtitles((subtitles) =>\n            subtitles.map((s, i) => ({\n                text: s.text,\n                textImage: s.textImage,\n                start: s.originalStart + offset,\n                originalStart: s.originalStart,\n                end: s.originalEnd + offset,\n                originalEnd: s.originalEnd,\n                track: s.track,\n                index: i,\n            }))\n        );\n    }, []);\n\n    const updatePlaybackRate = useCallback(\n        (playbackRate: number, forwardToPlayer: boolean) => {\n            if (videoRef.current) {\n                videoRef.current.playbackRate = playbackRate;\n                clock.rate = playbackRate;\n                setPlaybackRate(playbackRate);\n\n                if (forwardToPlayer) {\n                    playerChannel.playbackRate(playbackRate);\n                }\n            }\n        },\n        [playerChannel, clock]\n    );\n\n    useEffect(() => {\n        playerChannel.onReady((duration, videoFileName) => {\n            setLength(duration);\n            setVideoFileName(videoFileName);\n        });\n\n        playerChannel.onPlay(async () => {\n            await videoRef.current?.play();\n            clock.start();\n            setPlaying(true);\n        });\n\n        playerChannel.onPause(() => {\n            videoRef.current?.pause();\n            clock.stop();\n            setPlaying(false);\n        });\n\n        playerChannel.onCurrentTime((currentTime) => {\n            if (videoRef.current) {\n                videoRef.current.currentTime = currentTime;\n            }\n\n            if (videoRef.current?.readyState === 4) {\n                playerChannel.readyState(4);\n            }\n\n            clock.stop();\n            clock.setTime(currentTime * 1000);\n            autoPauseContextRef.current?.clear();\n        });\n\n        playerChannel.onAudioTrackSelected((id) => {\n            selectAudioTrack(id);\n            setSelectedAudioTrack(id);\n            playerChannel.audioTrackSelected(id);\n        });\n\n        playerChannel.onClose(() => {\n            playerChannel.close();\n            window.close();\n        });\n\n        playerChannel.onSubtitles((subtitles) => {\n            setSubtitles(subtitles.map((s, i) => ({ ...s, index: i })));\n\n            if (subtitles && subtitles.length > 0) {\n                const s = subtitles[0];\n                const offset = s.start - s.originalStart;\n                setOffset(offset);\n            }\n\n            autoPauseContextRef.current?.clear();\n        });\n\n        playerChannel.onPlayMode((playMode) => setPlayMode(playMode));\n        playerChannel.onHideSubtitlePlayerToggle((hidden) => setSubtitlePlayerHidden(hidden));\n        playerChannel.onAppBarToggle((hidden) => setAppBarHidden(hidden));\n        playerChannel.onFullscreenToggle((fullscreen) => setFullscreen(fullscreen));\n        playerChannel.onSubtitleSettings(setSubtitleSettings);\n        playerChannel.onMiscSettings(setMiscSettings);\n        playerChannel.onAnkiSettings(setAnkiSettings);\n        playerChannel.onOffset(updateSubtitlesWithOffset);\n        playerChannel.onPlaybackRate((playbackRate) => {\n            updatePlaybackRate(playbackRate, false);\n        });\n        playerChannel.onAlert((message, severity) => {\n            if (popOut) {\n                setAlertOpen(true);\n                setAlertMessage(message);\n                setAlertSeverity(severity as Color);\n            }\n        });\n\n        window.onbeforeunload = (e) => {\n            if (!poppingInRef.current) {\n                playerChannel.close();\n            }\n        };\n\n        return () => playerChannel.close();\n    }, [clock, playerChannel, updateSubtitlesWithOffset, updatePlaybackRate, popOut]);\n\n    const handlePlay = useCallback(() => {\n        if (videoRef.current) {\n            playerChannel.play();\n        }\n    }, [playerChannel]);\n\n    const handlePause = useCallback(() => playerChannel.pause(), [playerChannel]);\n\n    const handleSeek = useCallback(\n        (progress: number) => {\n            if (playingRef.current) {\n                clock.stop();\n            }\n\n            const time = progress * length;\n            playerChannel.currentTime = time / 1000;\n        },\n        [length, clock, playerChannel]\n    );\n\n    function handleMouseMove(e: React.MouseEvent<HTMLDivElement>) {\n        lastMouseMovementTimestamp.current = Date.now();\n\n        if (!containerRef.current) {\n            return;\n        }\n\n        var bounds = containerRef.current.getBoundingClientRect();\n        mousePositionRef.current.x = e.clientX - bounds.left;\n        mousePositionRef.current.y = e.clientY - bounds.top;\n    }\n\n    const handleAudioTrackSelected = useCallback(\n        (id: string) => {\n            if (playingRef.current) {\n                clock.stop();\n                playerChannel.pause();\n            }\n\n            selectAudioTrack(id);\n            setSelectedAudioTrack(id);\n            playerChannel.currentTime = 0;\n            playerChannel.audioTrackSelected(id);\n        },\n        [playerChannel, clock]\n    );\n\n    useEffect(() => {\n        if (!subtitles || subtitles.length === 0) {\n            return;\n        }\n\n        const interval = setInterval(() => {\n            const now = clock.time(length);\n            let showSubtitles = [];\n            const slice = subtitleCollection.subtitlesAt(now);\n\n            for (const s of slice.showing) {\n                if (!disabledSubtitleTracks[s.track]) {\n                    showSubtitles.push(s);\n                }\n            }\n\n            if (slice.startedShowing && !disabledSubtitleTracks[slice.startedShowing.track]) {\n                autoPauseContext.startedShowing(slice.startedShowing);\n            }\n\n            if (slice.willStopShowing && !disabledSubtitleTracks[slice.willStopShowing.track]) {\n                autoPauseContext.willStopShowing(slice.willStopShowing);\n            }\n\n            showSubtitles = showSubtitles.sort((s1, s2) => s1.track - s2.track);\n\n            if (!arrayEquals(showSubtitles, showSubtitlesRef.current, (s1, s2) => s1.index === s2.index)) {\n                setShowSubtitles(showSubtitles);\n                if (showSubtitles.length > 0 && miscSettings.autoCopyCurrentSubtitle && document.hasFocus()) {\n                    navigator.clipboard.writeText(showSubtitles.map((s) => s.text).join('\\n')).catch((e) => {\n                        // ignore\n                    });\n                }\n            }\n        }, 100);\n\n        return () => clearTimeout(interval);\n    }, [\n        subtitleCollection,\n        playerChannel,\n        subtitles,\n        disabledSubtitleTracks,\n        clock,\n        length,\n        autoPauseContext,\n        miscSettings,\n    ]);\n\n    const handleOffsetChange = useCallback(\n        (offset: number) => {\n            updateSubtitlesWithOffset(offset);\n            playerChannel.offset(offset);\n        },\n        [playerChannel, updateSubtitlesWithOffset]\n    );\n\n    const handlePlaybackRateChange = useCallback(\n        (playbackRate: number) => {\n            updatePlaybackRate(playbackRate, true);\n        },\n        [updatePlaybackRate]\n    );\n\n    useEffect(() => {\n        return keyBinder.bindSeekToSubtitle(\n            (event, subtitle) => {\n                event.stopPropagation();\n                event.preventDefault();\n                playerChannel.currentTime = subtitle.start / 1000;\n            },\n            () => !videoRef.current,\n            () => clock.time(length),\n            () => subtitles\n        );\n    }, [keyBinder, playerChannel, subtitles, length, clock]);\n\n    useEffect(() => {\n        return keyBinder.bindSeekToBeginningOfCurrentSubtitle(\n            (event, subtitle) => {\n                event.stopPropagation();\n                event.preventDefault();\n                playerChannel.currentTime = subtitle.start / 1000;\n            },\n            () => !videoRef.current,\n            () => clock.time(length),\n            () => subtitles\n        );\n    }, [keyBinder, playerChannel, subtitles, length, clock]);\n\n    useEffect(() => {\n        return keyBinder.bindSeekBackwardOrForward(\n            (event, forward) => {\n                event.stopPropagation();\n                event.preventDefault();\n                const timestamp = clock.time(length);\n\n                if (forward) {\n                    playerChannel.currentTime = Math.min(length / 1000, (timestamp + 10000) / 1000);\n                } else {\n                    playerChannel.currentTime = Math.max(0, (timestamp - 10000) / 1000);\n                }\n            },\n            () => !videoRef.current\n        );\n    }, [keyBinder, playerChannel, length, clock]);\n\n    const calculateSurroundingSubtitles = useCallback(\n        (index: number) => {\n            return surroundingSubtitles(\n                subtitles,\n                index,\n                ankiSettings.surroundingSubtitlesCountRadius,\n                ankiSettings.surroundingSubtitlesTimeRadius\n            );\n        },\n        [subtitles, ankiSettings.surroundingSubtitlesCountRadius, ankiSettings.surroundingSubtitlesTimeRadius]\n    );\n\n    useEffect(() => {\n        return keyBinder.bindCopy<IndexedSubtitleModel>(\n            (event, subtitle) => {\n                event.stopPropagation();\n                event.preventDefault();\n\n                const noSubtitles = !subtitles || subtitles.length === 0;\n\n                playerChannel.copy(\n                    subtitle,\n                    noSubtitles\n                        ? mockSurroundingSubtitles(subtitle, length, 5000)\n                        : calculateSurroundingSubtitles(subtitle.index),\n                    PostMineAction.none\n                );\n            },\n            () => false,\n            () => {\n                if (!subtitles || subtitles.length === 0) {\n                    const timestamp = clock.time(length);\n                    const end = Math.min(timestamp + 5000, length);\n\n                    return {\n                        text: '',\n                        start: timestamp,\n                        originalStart: timestamp,\n                        end: end,\n                        originalEnd: end,\n                        track: 0,\n                        index: 0,\n                    };\n                }\n\n                if (!showSubtitlesRef.current || showSubtitlesRef.current.length === 0) {\n                    return undefined;\n                }\n\n                return showSubtitlesRef.current[0];\n            }\n        );\n    }, [keyBinder, playerChannel, clock, length, subtitles, calculateSurroundingSubtitles]);\n\n    useEffect(() => {\n        return keyBinder.bindAdjustOffset(\n            (event, offset) => {\n                event.preventDefault();\n                event.stopPropagation();\n                handleOffsetChange(offset);\n            },\n            () => false,\n            () => subtitles\n        );\n    }, [keyBinder, handleOffsetChange, subtitles]);\n\n    useEffect(() => {\n        return keyBinder.bindAdjustPlaybackRate(\n            (event, increase) => {\n                event.preventDefault();\n                if (increase) {\n                    updatePlaybackRate(Math.min(5, playbackRate + 0.1), true);\n                } else {\n                    updatePlaybackRate(Math.max(0.1, playbackRate - 0.1), true);\n                }\n            },\n            () => false\n        );\n    }, [updatePlaybackRate, playbackRate, keyBinder]);\n\n    useEffect(() => {\n        return keyBinder.bindToggleSubtitles(\n            (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n                setSubtitlesEnabled((enabled) => !enabled);\n            },\n            () => false\n        );\n    }, [keyBinder]);\n\n    useEffect(() => {\n        return keyBinder.bindToggleSubtitleTrackInVideo(\n            (event, track) => {\n                event.preventDefault();\n                event.stopPropagation();\n                setDisabledSubtitleTracks((tracks) => {\n                    const newTracks = { ...tracks };\n                    newTracks[track] = !tracks[track];\n                    return newTracks;\n                });\n            },\n            () => false\n        );\n    }, [keyBinder]);\n\n    useEffect(() => {\n        return keyBinder.bindToggleSubtitleTrackInList(\n            (event, track) => {\n                event.preventDefault();\n                event.stopPropagation();\n                playerChannel.toggleSubtitleTrackInList(track);\n            },\n            () => false\n        );\n    }, [keyBinder, playerChannel]);\n\n    useEffect(() => {\n        return keyBinder.bindOffsetToSubtitle(\n            (event, offset) => {\n                event.preventDefault();\n                event.stopPropagation();\n                handleOffsetChange(offset);\n            },\n            () => false,\n            () => clock.time(length),\n            () => subtitles\n        );\n    }, [keyBinder, handleOffsetChange, subtitles, clock, length]);\n\n    const extractSubtitles = useCallback(\n        (\n            noSubtitleCallback: (subtitle: SubtitleModel, surroundingSubtitles: SubtitleModel[]) => void,\n            subtitleCallback: (subtitle: SubtitleModel, surroundingSubtitles: SubtitleModel[]) => void\n        ) => {\n            if (!subtitles || subtitles.length === 0) {\n                const timestamp = clock.time(length);\n                const end = Math.min(timestamp + 5000, length);\n                const subtitle = {\n                    text: '',\n                    start: timestamp,\n                    originalStart: timestamp,\n                    end: end,\n                    originalEnd: end,\n                    track: 0,\n                };\n\n                noSubtitleCallback(subtitle, mockSurroundingSubtitles(subtitle, length, 5000));\n            } else if (showSubtitlesRef.current && showSubtitlesRef.current.length > 0) {\n                const currentSubtitle = showSubtitlesRef.current[0];\n                subtitleCallback(currentSubtitle, calculateSurroundingSubtitles(currentSubtitle.index));\n            }\n        },\n        [subtitles, calculateSurroundingSubtitles, length, clock]\n    );\n\n    useEffect(() => {\n        return keyBinder.bindAnkiExport(\n            (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n\n                if (popOut) {\n                    extractSubtitles(\n                        (subtitle, surroundingSubtitles) => {\n                            playerChannel.copy(subtitle, surroundingSubtitles, PostMineAction.none, false);\n                            onAnkiDialogRequest(\n                                videoFile,\n                                videoFileName ?? '',\n                                selectedAudioTrack,\n                                playbackRate,\n                                subtitle,\n                                surroundingSubtitles,\n                                clock.time(length)\n                            );\n                        },\n                        (subtitle, surroundingSubtitles) => {\n                            playerChannel.copy(subtitle, surroundingSubtitles, PostMineAction.none, true);\n                            onAnkiDialogRequest(\n                                videoFile,\n                                videoFileName ?? '',\n                                selectedAudioTrack,\n                                playbackRate,\n                                subtitle,\n                                surroundingSubtitles,\n                                clock.time(length)\n                            );\n                        }\n                    );\n\n                    if (playing) {\n                        playerChannel.pause();\n                        setResumeOnFinishedAnkiDialogRequest(true);\n                    }\n                } else {\n                    extractSubtitles(\n                        (subtitle, surroundingSubtitles) =>\n                            playerChannel.copy(subtitle, surroundingSubtitles, PostMineAction.showAnkiDialog, false),\n                        (subtitle, surroundingSubtitles) =>\n                            playerChannel.copy(subtitle, surroundingSubtitles, PostMineAction.showAnkiDialog, true)\n                    );\n                }\n            },\n            () => false\n        );\n    }, [\n        keyBinder,\n        playerChannel,\n        extractSubtitles,\n        clock,\n        length,\n        videoFile,\n        videoFileName,\n        selectedAudioTrack,\n        playbackRate,\n        onAnkiDialogRequest,\n        popOut,\n        playing,\n    ]);\n\n    useEffect(() => {\n        if (ankiDialogFinishedRequest && ankiDialogFinishedRequest.timestamp > 0) {\n            setResumeOnFinishedAnkiDialogRequest((resumeOnFinishedAnkiDialogRequest) => {\n                if (resumeOnFinishedAnkiDialogRequest && ankiDialogFinishedRequest.resume) {\n                    playerChannel.play();\n                }\n\n                return false;\n            });\n        }\n    }, [ankiDialogFinishedRequest, playerChannel]);\n\n    useEffect(() => {\n        return keyBinder.bindUpdateLastCard(\n            (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n\n                extractSubtitles(\n                    (subtitle, surroundingSubtitles) =>\n                        playerChannel.copy(subtitle, surroundingSubtitles, PostMineAction.updateLastCard, false),\n                    (subtitle, surroundingSubtitles) =>\n                        playerChannel.copy(subtitle, surroundingSubtitles, PostMineAction.updateLastCard, true)\n                );\n            },\n            () => false\n        );\n    }, [keyBinder, playerChannel, extractSubtitles]);\n\n    useEffect(() => {\n        return keyBinder.bindPlay(\n            (event) => {\n                event.preventDefault();\n\n                if (playing) {\n                    playerChannel.pause();\n                } else {\n                    playerChannel.play();\n                }\n            },\n            () => false\n        );\n    }, [keyBinder, playing, playerChannel]);\n\n    const togglePlayMode = useCallback(\n        (event: KeyboardEvent, togglePlayMode: PlayMode) => {\n            event.preventDefault();\n            const newPlayMode = playMode === togglePlayMode ? PlayMode.normal : togglePlayMode;\n            playerChannel.playMode(newPlayMode);\n            onPlayModeChangedViaBind(playMode, newPlayMode);\n        },\n        [playMode, playerChannel, onPlayModeChangedViaBind]\n    );\n\n    useEffect(() => {\n        return keyBinder.bindAutoPause(\n            (event) => togglePlayMode(event, PlayMode.autoPause),\n            () => false\n        );\n    }, [keyBinder, togglePlayMode]);\n\n    useEffect(() => {\n        return keyBinder.bindCondensedPlayback(\n            (event) => togglePlayMode(event, PlayMode.condensed),\n            () => false\n        );\n    }, [keyBinder, togglePlayMode]);\n\n    const handleSubtitlesToggle = useCallback(() => setSubtitlesEnabled((subtitlesEnabled) => !subtitlesEnabled), []);\n\n    const handleFullscreenToggle = useCallback(() => {\n        if (popOut) {\n            setFullscreen((fullscreen) => {\n                if (fullscreen) {\n                    document.exitFullscreen();\n                } else {\n                    document.documentElement.requestFullscreen();\n                }\n\n                return !fullscreen;\n            });\n        } else {\n            playerChannel.fullscreenToggle();\n        }\n    }, [playerChannel, popOut]);\n\n    const handleVolumeChange = useCallback((volume: number) => {\n        if (videoRef.current) {\n            videoRef.current.volume = volume;\n        }\n    }, []);\n\n    const handlePopOutToggle = useCallback(() => {\n        playerChannel.popOutToggle();\n        if (popOut) {\n            poppingInRef.current = true;\n            window.close();\n        }\n    }, [playerChannel, popOut]);\n\n    const handlePlayMode = useCallback(\n        (playMode: PlayMode) => {\n            playerChannel.playMode(playMode);\n        },\n        [playerChannel]\n    );\n\n    const handleClose = useCallback(() => {\n        playerChannel.close();\n        window.close();\n    }, [playerChannel]);\n\n    const handleHideSubtitlePlayerToggle = useCallback(() => {\n        playerChannel.hideSubtitlePlayerToggle();\n    }, [playerChannel]);\n\n    const handleTheaterModeToggle = useCallback(() => {\n        playerChannel.appBarToggle();\n    }, [playerChannel]);\n\n    const handleClick = useCallback(() => {\n        if (playing) {\n            playerChannel.pause();\n        } else {\n            playerChannel.play();\n        }\n    }, [playerChannel, playing]);\n\n    const handleDoubleClick = useCallback(() => handleFullscreenToggle(), [handleFullscreenToggle]);\n\n    const {\n        subtitleSize,\n        subtitleColor,\n        subtitleOutlineThickness,\n        subtitleOutlineColor,\n        subtitleBackgroundColor,\n        subtitleBackgroundOpacity,\n        subtitleFontFamily,\n        imageBasedSubtitleScaleFactor,\n    } = subtitleSettings;\n    const subtitleStyles = useMemo(\n        () =>\n            computeStyles({\n                subtitleSize,\n                subtitleColor,\n                subtitleOutlineThickness,\n                subtitleOutlineColor,\n                subtitleBackgroundColor,\n                subtitleBackgroundOpacity,\n                subtitleFontFamily,\n            }),\n        [\n            subtitleSize,\n            subtitleColor,\n            subtitleOutlineThickness,\n            subtitleOutlineColor,\n            subtitleBackgroundColor,\n            subtitleBackgroundOpacity,\n            subtitleFontFamily,\n        ]\n    );\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            if (Date.now() - lastMouseMovementTimestamp.current > 300) {\n                if (showCursor) {\n                    setShowCursor(false);\n                }\n            } else if (!showCursor) {\n                setShowCursor(true);\n            }\n        }, 100);\n\n        return () => clearInterval(interval);\n    }, [showCursor]);\n\n    const handleAlertClosed = useCallback(() => setAlertOpen(false), []);\n\n    return (\n        <div ref={containerRef} onMouseMove={handleMouseMove} className={classes.root}>\n            <Alert open={alertOpen} onClose={handleAlertClosed} autoHideDuration={3000} severity={alertSeverity}>\n                {alertMessage}\n            </Alert>\n            <video\n                preload=\"auto\"\n                controls={false}\n                onClick={handleClick}\n                onDoubleClick={handleDoubleClick}\n                className={showCursor ? classes.video : `${classes.cursorHidden} ${classes.video}`}\n                ref={videoRefCallback}\n                src={videoFile}\n            />\n            {subtitlesEnabled && (\n                <div className={classes.subtitleContainer}>\n                    {showSubtitles.map((subtitle, index) => {\n                        let content;\n\n                        if (subtitle.textImage) {\n                            content = (\n                                <SubtitleTextImage\n                                    availableWidth={videoRef.current?.width ?? window.screen.availWidth}\n                                    subtitle={subtitle}\n                                    scale={imageBasedSubtitleScaleFactor}\n                                />\n                            );\n                        } else {\n                            content = <span style={subtitleStyles}>{subtitle.text}</span>;\n                        }\n\n                        if (index < showSubtitles.length - 1) {\n                            return (\n                                <React.Fragment key={subtitle.index}>\n                                    {content}\n                                    <br />\n                                </React.Fragment>\n                            );\n                        }\n\n                        return <React.Fragment key={subtitle.index}>{content}</React.Fragment>;\n                    })}\n                </div>\n            )}\n            <Controls\n                mousePositionRef={mousePositionRef}\n                playing={playing}\n                clock={clock}\n                length={length}\n                audioTracks={audioTracks}\n                selectedAudioTrack={selectedAudioTrack}\n                subtitlesToggle={subtitles && subtitles.length > 0}\n                subtitlesEnabled={subtitlesEnabled}\n                offsetEnabled={true}\n                offset={offset}\n                playbackRate={playbackRate}\n                playbackRateEnabled={true}\n                fullscreenEnabled={true}\n                fullscreen={fullscreen}\n                closeEnabled={!popOut}\n                popOut={popOut}\n                volumeEnabled={true}\n                popOutEnabled={!isMobile}\n                playModeEnabled={subtitles && subtitles.length > 0}\n                playMode={playMode}\n                hideSubtitlePlayerToggleEnabled={subtitles?.length > 0 && !popOut && !fullscreen}\n                subtitlePlayerHidden={subtitlePlayerHidden}\n                onPlay={handlePlay}\n                onPause={handlePause}\n                onSeek={handleSeek}\n                onAudioTrackSelected={handleAudioTrackSelected}\n                onSubtitlesToggle={handleSubtitlesToggle}\n                onFullscreenToggle={handleFullscreenToggle}\n                onVolumeChange={handleVolumeChange}\n                onOffsetChange={handleOffsetChange}\n                onPlaybackRateChange={handlePlaybackRateChange}\n                onPopOutToggle={handlePopOutToggle}\n                onPlayMode={handlePlayMode}\n                onClose={handleClose}\n                onHideSubtitlePlayerToggle={handleHideSubtitlePlayerToggle}\n                playbackPreferences={playbackPreferences}\n                showOnMouseMovement={false}\n                theaterModeToggleEnabled={!popOut && !fullscreen}\n                theaterModeEnabled={appBarHidden}\n                onTheaterModeToggle={handleTheaterModeToggle}\n            />\n        </div>\n    );\n}\n","import {\n    AsbPlayerToVideoCommandV2,\n    ExtensionToAsbPlayerCommand,\n    ExtensionToAsbPlayerCommandTabsCommand,\n    Message,\n    VideoTabModel,\n} from '@project/common';\nimport { gt } from 'semver';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport interface ExtensionMessage {\n    data: Message;\n    tabId?: number;\n    src?: string;\n}\n\nconst id = uuidv4();\n\nexport default class ChromeExtension {\n    readonly version: string;\n    readonly extensionCommands: { [key: string]: string | undefined };\n\n    tabs: VideoTabModel[];\n    installed: boolean;\n\n    private readonly windowEventListener: (event: MessageEvent) => void;\n    private onMessageCallbacks: Array<(message: ExtensionMessage) => void>;\n    private onTabsCallbacks: Array<(tabs: VideoTabModel[]) => void>;\n    private heartbeatStarted = false;\n\n    constructor(version?: string, extensionCommands?: { [key: string]: string | undefined }) {\n        this.onMessageCallbacks = [];\n        this.onTabsCallbacks = [];\n        this.tabs = [];\n        this.installed = version !== undefined;\n        this.version = version ?? '';\n        this.extensionCommands = extensionCommands ?? {};\n        this.windowEventListener = (event: MessageEvent) => {\n            if (event.source !== window) {\n                return;\n            }\n\n            if (event.data.sender !== 'asbplayer-extension-to-player' || !event.data.message) {\n                return;\n            }\n\n            if (event.data.message.command === 'tabs') {\n                const tabsCommand = event.data as ExtensionToAsbPlayerCommandTabsCommand;\n                this.tabs = tabsCommand.message.tabs;\n\n                for (let c of this.onTabsCallbacks) {\n                    c(this.tabs);\n                }\n\n                if (tabsCommand.message.ackRequested) {\n                    window.postMessage(\n                        {\n                            sender: 'asbplayerv2',\n                            message: {\n                                command: 'ackTabs',\n                                id: id,\n                                receivedTabs: this.tabs,\n                            },\n                        },\n                        '*'\n                    );\n                }\n            } else {\n                const command = event.data as ExtensionToAsbPlayerCommand<Message>;\n\n                for (let c of this.onMessageCallbacks) {\n                    c({\n                        data: command.message,\n                        tabId: command.tabId,\n                        src: command.src,\n                    });\n                }\n            }\n        };\n\n        window.addEventListener('message', this.windowEventListener);\n    }\n\n    startHeartbeat(fromVideoPlayer: boolean) {\n        if (!this.installed) {\n            return;\n        }\n\n        if (!this.heartbeatStarted) {\n            if (fromVideoPlayer) {\n                if (gt(this.version, '0.23.0')) {\n                    setInterval(() => this._sendHeartbeat(true), 1000);\n                }\n            } else {\n                setInterval(() => this._sendHeartbeat(false), 1000);\n            }\n\n            this.heartbeatStarted = true;\n        }\n    }\n\n    private _sendHeartbeat(fromVideoPlayer: boolean) {\n        window.postMessage(\n            {\n                sender: 'asbplayerv2',\n                message: {\n                    command: 'heartbeat',\n                    id: id,\n                    receivedTabs: fromVideoPlayer ? [] : this.tabs,\n                    videoPlayer: fromVideoPlayer\n                },\n            },\n            '*'\n        );\n    }\n\n    openShortcuts() {\n        window.postMessage({\n            sender: 'asbplayerv2',\n            message: {\n                command: 'open-extension-shortcuts',\n            },\n        });\n    }\n\n    sendMessage(message: Message, tabId: number, src: string) {\n        const command: AsbPlayerToVideoCommandV2<Message> = {\n            sender: 'asbplayerv2',\n            message: message,\n            tabId: tabId,\n            src: src,\n        };\n        window.postMessage(command, '*');\n    }\n\n    publishMessage(message: Message) {\n        for (const tab of this.tabs) {\n            const command: AsbPlayerToVideoCommandV2<Message> = {\n                sender: 'asbplayerv2',\n                message: message,\n                tabId: tab.id,\n                src: tab.src,\n            };\n            window.postMessage(command, '*');\n        }\n    }\n\n    subscribeTabs(callback: (tabs: VideoTabModel[]) => void) {\n        this.onTabsCallbacks.push(callback);\n        return () => this._remove(callback, this.onTabsCallbacks);\n    }\n\n    subscribe(callback: (message: ExtensionMessage) => void) {\n        this.onMessageCallbacks.push(callback);\n        return () => this._remove(callback, this.onMessageCallbacks);\n    }\n\n    _remove(callback: Function, callbacks: Function[]) {\n        for (let i = callbacks.length - 1; i >= 0; --i) {\n            if (callback === callbacks[i]) {\n                callbacks.splice(i, 1);\n                break;\n            }\n        }\n    }\n\n    unbind() {\n        window.removeEventListener('message', this.windowEventListener);\n        this.onMessageCallbacks = [];\n        this.onTabsCallbacks = [];\n    }\n}\n","import { ExtensionVersionMessage } from '@project/common';\nimport ChromeExtension from './ChromeExtension';\n\nconst keyBindNameMap: any = {\n    'copy-subtitle': 'copySubtitle',\n    'copy-subtitle-with-dialog': 'ankiExport',\n    'update-last-card': 'updateLastCard',\n};\n\nexport class ChromeExtensionProvider {\n    extension: ChromeExtension = new ChromeExtension();\n    private readonly callbacks: ((extension: ChromeExtension) => void)[] = [];\n\n    constructor() {\n        const listener = (event: MessageEvent) => {\n            if (event.source !== window) {\n                return;\n            }\n\n            if (event.data.sender === 'asbplayer-extension-to-player') {\n                if (event.data.message.command === 'version') {\n                    const message = event.data.message as ExtensionVersionMessage;\n\n                    for (const callback of this.callbacks) {\n                        this.extension.unbind();\n                        const translatedCommands: { [key: string]: string | undefined } = {};\n                        const extensionCommands = message.extensionCommands ?? {};\n                        \n                        for (const extensionCommandName of Object.keys(extensionCommands)) {\n                            translatedCommands[keyBindNameMap[extensionCommandName]] =\n                                extensionCommands[extensionCommandName];\n                        }\n\n                        this.extension = new ChromeExtension(message.version, translatedCommands);\n                        callback(this.extension);\n                    }\n\n                    window.removeEventListener('message', listener);\n                }\n            }\n        };\n\n        window.addEventListener('message', listener);\n    }\n\n    onChromeExtension(callback: (extension: ChromeExtension) => void) {\n        this.callbacks.push(callback);\n        callback(this.extension);\n    }\n}\n","import SettingsProvider from './SettingsProvider';\n\nconst volumeKey = 'volume';\nconst theaterModeKey = 'theaterMode';\nconst offsetKey = 'offset';\nconst defaultVolume = 100;\n\nexport default class PlaybackPreferences {\n    private readonly settingsProvider: SettingsProvider;\n\n    constructor(settingsProvider: SettingsProvider) {\n        this.settingsProvider = settingsProvider;\n    }\n\n    get volume() {\n        const value = localStorage.getItem(volumeKey);\n\n        if (value === null) {\n            return defaultVolume;\n        }\n\n        return Number(value);\n    }\n\n    set volume(volume) {\n        localStorage.setItem(volumeKey, String(volume));\n    }\n\n    get theaterMode() {\n        return localStorage.getItem(theaterModeKey) === 'true' || false;\n    }\n\n    set theaterMode(theaterMode) {\n        localStorage.setItem(theaterModeKey, String(theaterMode));\n    }\n\n    get offset(): number {\n        if (!this.settingsProvider.rememberSubtitleOffset) {\n            return 0;\n        }\n\n        const value = localStorage.getItem(offsetKey);\n\n        if (value === null) {\n            return 0;\n        }\n\n        return Number(value);\n    }\n\n    set offset(offset: number) {\n        localStorage.setItem(offsetKey, String(offset));\n    }\n}\n","import React, { useCallback, useEffect, useState, useMemo, useRef } from 'react';\nimport { Route, Navigate, Routes, useLocation, useSearchParams } from 'react-router-dom';\nimport { ThemeProvider, createTheme, makeStyles, Theme } from '@material-ui/core/styles';\nimport { useWindowSize } from '../hooks/useWindowSize';\nimport { red } from '@material-ui/core/colors';\nimport {\n    Anki,\n    AudioClip,\n    Image,\n    humanReadableTime,\n    AnkiDialogSliderContext,\n    SubtitleModel,\n    VideoTabModel,\n    LegacyPlayerSyncMessage,\n    PlayerSyncMessage,\n    AudioModel,\n    ImageModel,\n    AsbplayerSettings,\n    PostMineAction,\n    PlayMode,\n    download,\n} from '@project/common';\nimport { v4 as uuidv4 } from 'uuid';\nimport clsx from 'clsx';\nimport Alert from './Alert';\nimport { AnkiDialog, ImageDialog } from '@project/common/components';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport DragOverlay from './DragOverlay';\nimport SubtitleReader from '../services/SubtitleReader';\nimport Bar from './Bar';\nimport ChromeExtension, { ExtensionMessage } from '../services/ChromeExtension';\nimport CopyHistory, { CopyHistoryItem } from './CopyHistory';\nimport LandingPage from './LandingPage';\nimport Player, { AnkiDialogFinishedRequest, MediaSources } from './Player';\nimport SettingsDialog from './SettingsDialog';\nimport SettingsProvider from '../services/SettingsProvider';\nimport VideoPlayer from './VideoPlayer';\nimport { Color } from '@material-ui/lab';\nimport { AnkiExportMode } from '@project/common';\nimport { DefaultKeyBinder } from '@project/common/src/KeyBinder';\nimport AppKeyBinder from '../services/AppKeyBinder';\nimport VideoChannel from '../services/VideoChannel';\nimport { ChromeExtensionProvider } from '../services/ChromeExtensionProvider';\nimport PlaybackPreferences from '../services/PlaybackPreferences';\n\nconst latestExtensionVersion = '0.25.0';\nconst extensionUrl = 'https://github.com/killergerbah/asbplayer/releases/latest';\n\nconst useContentStyles = makeStyles<Theme, ContentProps>((theme) => ({\n    content: {\n        flexGrow: 1,\n        transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen,\n        }),\n        marginRight: 0,\n    },\n    contentShift: ({ drawerWidth }) => ({\n        transition: theme.transitions.create('margin', {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen,\n        }),\n        marginRight: drawerWidth,\n    }),\n}));\n\nfunction extractSources(files: FileList | File[]): MediaSources {\n    let subtitleFiles = [];\n    let audioFile = undefined;\n    let videoFile = undefined;\n\n    for (let i = 0; i < files.length; ++i) {\n        const f = files[i];\n        const extensionStartIndex = f.name.lastIndexOf('.');\n\n        if (extensionStartIndex === -1) {\n            throw new Error('Unable to determine extension of ' + f.name);\n        }\n\n        const extension = f.name.substring(extensionStartIndex + 1, f.name.length);\n        switch (extension) {\n            case 'ass':\n            case 'srt':\n            case 'vtt':\n            case 'nfvtt':\n            case 'sup':\n            case 'ytxml':\n            case 'dfxp':\n            case 'ttml2':\n                subtitleFiles.push(f);\n                break;\n            case 'mkv':\n            case 'mp4':\n            case 'avi':\n                if (videoFile) {\n                    throw new Error('Cannot open two video files simultaneously');\n                }\n                videoFile = f;\n                break;\n            case 'mp3':\n            case 'm4a':\n            case 'aac':\n            case 'flac':\n            case 'ogg':\n            case 'wav':\n            case 'opus':\n                if (audioFile) {\n                    throw new Error('Cannot open two audio files simultaneously');\n                }\n                audioFile = f;\n                break;\n            default:\n                throw new Error('Unsupported extension ' + extension);\n        }\n    }\n\n    if (videoFile && audioFile) {\n        throw new Error('Cannot load both an audio and video file simultaneously');\n    }\n\n    return { subtitleFiles: subtitleFiles, audioFile: audioFile, videoFile: videoFile };\n}\n\nfunction audioClipFromItem(\n    item: CopyHistoryItem,\n    sliderContext: AnkiDialogSliderContext | undefined,\n    paddingStart: number,\n    paddingEnd: number\n) {\n    if (item.audio) {\n        const start = item.audio.start ?? item.start;\n        const end = item.audio.end ?? item.end;\n\n        return AudioClip.fromBase64(\n            item.subtitleFile!.name,\n            Math.max(0, start - (item.audio.paddingStart ?? 0)),\n            end + (item.audio.paddingEnd ?? 0),\n            item.audio.playbackRate ?? 1,\n            item.audio.base64,\n            item.audio.extension\n        );\n    }\n\n    if (item.audioFile || item.videoFile) {\n        let start;\n        let end;\n\n        if (sliderContext) {\n            start = sliderContext.subtitleStart;\n            end = sliderContext.subtitleEnd;\n        } else {\n            start = item.start;\n            end = item.end;\n        }\n\n        return AudioClip.fromFile(\n            (item.audioFile || item.videoFile)!,\n            Math.max(0, start - paddingStart),\n            end + paddingEnd,\n            item.filePlaybackRate ?? 1,\n            item.audioTrack\n        );\n    }\n\n    return undefined;\n}\n\nfunction imageFromItem(item: CopyHistoryItem, maxWidth: number, maxHeight: number) {\n    if (item.image) {\n        return Image.fromBase64(item.subtitleFile!.name, item.start, item.image.base64, item.image.extension);\n    }\n\n    if (item.videoFile) {\n        return Image.fromFile(item.videoFile, item.mediaTimestamp ?? item.start, maxWidth, maxHeight);\n    }\n\n    return undefined;\n}\n\nfunction itemSourceString(item: CopyHistoryItem | undefined) {\n    if (!item) {\n        return undefined;\n    }\n\n    const source = item.subtitleFile?.name ?? item.audioFile?.name ?? item.videoFile?.name;\n\n    if (!source) {\n        return undefined;\n    }\n\n    return `${source} (${humanReadableTime(item.start)})`;\n}\n\nfunction itemSliderContext(item: CopyHistoryItem) {\n    if (!item) {\n        return undefined;\n    }\n\n    return {\n        subtitleStart: item.start,\n        subtitleEnd: item.end,\n        subtitles: item.surroundingSubtitles || [\n            { start: item.start, end: item.end, text: item.text, track: item.track },\n        ],\n    };\n}\n\nfunction revokeUrls(sources: MediaSources) {\n    if (sources.audioFileUrl) {\n        URL.revokeObjectURL(sources.audioFileUrl);\n    }\n\n    if (sources.videoFileUrl) {\n        URL.revokeObjectURL(sources.videoFileUrl);\n    }\n}\n\ninterface NavigateToVideoProps {\n    searchParams: URLSearchParams;\n}\n\nfunction NavigateToVideo({ searchParams }: NavigateToVideoProps) {\n    const videoFile = searchParams.get('video')!;\n    const channel = searchParams.get('channel')!;\n    const popOut = searchParams.get('popout')!;\n\n    return (\n        <Navigate to={'/video?video=' + encodeURIComponent(videoFile) + '&channel=' + channel + '&popout=' + popOut} />\n    );\n}\n\ninterface RenderVideoProps {\n    searchParams: URLSearchParams;\n    settingsProvider: SettingsProvider;\n    playbackPreferences: PlaybackPreferences;\n    extension: ChromeExtension;\n    ankiDialogFinishedRequest: AnkiDialogFinishedRequest;\n    onAnkiDialogRequest: (\n        videoFileUrl: string,\n        videoFileName: string,\n        selectedAudioTrack: string | undefined,\n        playbackRate: number,\n        subtitle: SubtitleModel,\n        surroundingSubtitles: SubtitleModel[],\n        timestamp: number\n    ) => void;\n    onError: (error: string) => void;\n    onPlayModeChangedViaBind: (oldPlayMode: PlayMode, newPlayMode: PlayMode) => void;\n}\n\nfunction RenderVideo({\n    searchParams,\n    settingsProvider,\n    playbackPreferences,\n    extension,\n    ankiDialogFinishedRequest,\n    onAnkiDialogRequest,\n    onError,\n    onPlayModeChangedViaBind,\n}: RenderVideoProps) {\n    const videoFile = searchParams.get('video')!;\n    const channel = searchParams.get('channel')!;\n    const popOut = searchParams.get('popout')! === 'true';\n\n    return (\n        <VideoPlayer\n            settingsProvider={settingsProvider}\n            playbackPreferences={playbackPreferences}\n            extension={extension}\n            videoFile={videoFile}\n            popOut={popOut}\n            channel={channel}\n            ankiDialogFinishedRequest={ankiDialogFinishedRequest}\n            onAnkiDialogRequest={onAnkiDialogRequest}\n            onError={onError}\n            onPlayModeChangedViaBind={onPlayModeChangedViaBind}\n        />\n    );\n}\n\ninterface ContentProps {\n    drawerOpen: boolean;\n    drawerWidth: number;\n    children: React.ReactNode[];\n}\n\nfunction Content(props: ContentProps) {\n    const classes = useContentStyles(props);\n\n    return (\n        <main\n            className={clsx(classes.content, {\n                [classes.contentShift]: props.drawerOpen,\n            })}\n        >\n            {props.children}\n        </main>\n    );\n}\n\nfunction App() {\n    const subtitleReader = useMemo<SubtitleReader>(() => new SubtitleReader(), []);\n    const settingsProvider = useMemo<SettingsProvider>(() => new SettingsProvider(), []);\n    const playbackPreferences = useMemo<PlaybackPreferences>(\n        () => new PlaybackPreferences(settingsProvider),\n        [settingsProvider]\n    );\n    const theme = useMemo<Theme>(\n        () =>\n            createTheme({\n                palette: {\n                    primary: {\n                        main: '#49007a',\n                    },\n                    secondary: {\n                        main: '#ff1f62',\n                    },\n                    error: {\n                        main: red.A400,\n                    },\n                    type: settingsProvider.themeType,\n                },\n            }),\n        [settingsProvider.themeType]\n    );\n    const anki = useMemo<Anki>(() => new Anki(settingsProvider), [settingsProvider]);\n    const location = useLocation();\n    const [searchParams] = useSearchParams();\n\n    const inVideoPlayer = location.pathname === '/video' || searchParams.get('video') !== null;\n    const extensionProvider = useMemo(() => new ChromeExtensionProvider(), []);\n    const [extension, setExtension] = useState<ChromeExtension>(extensionProvider.extension);\n    const [videoFullscreen, setVideoFullscreen] = useState<boolean>(false);\n    useEffect(() => extensionProvider.onChromeExtension(setExtension), [extensionProvider]);\n    const keyBinder = useMemo<AppKeyBinder>(\n        () => new AppKeyBinder(new DefaultKeyBinder(settingsProvider.keyBindSet), extension),\n        [settingsProvider.keyBindSet, extension]\n    );\n    const videoFrameRef = useRef<HTMLIFrameElement>(null);\n    const videoChannelRef = useRef<VideoChannel>(null);\n    const [width] = useWindowSize(!inVideoPlayer);\n    const drawerRatio = videoFrameRef.current ? 0.2 : 0.3;\n    const minDrawerSize = videoFrameRef.current ? 150 : 300;\n    const drawerWidth = Math.max(minDrawerSize, width * drawerRatio);\n    const [copiedSubtitles, setCopiedSubtitles] = useState<CopyHistoryItem[]>([]);\n    const copiedSubtitlesRef = useRef<CopyHistoryItem[]>([]);\n    copiedSubtitlesRef.current = copiedSubtitles;\n    const [copyHistoryOpen, setCopyHistoryOpen] = useState<boolean>(false);\n    const [theaterMode, setTheaterMode] = useState<boolean>(playbackPreferences.theaterMode);\n    const [hideSubtitlePlayer, setHideSubtitlePlayer] = useState<boolean>(false);\n    const [videoPopOut, setVideoPopOut] = useState<boolean>(false);\n    const [alert, setAlert] = useState<string>();\n    const [alertOpen, setAlertOpen] = useState<boolean>(false);\n    const [alertSeverity, setAlertSeverity] = useState<Color>();\n    const [jumpToSubtitle, setJumpToSubtitle] = useState<SubtitleModel>();\n    const [rewindSubtitle, setRewindSubtitle] = useState<SubtitleModel>();\n    const [sources, setSources] = useState<MediaSources>({ subtitleFiles: [] });\n    const [loading, setLoading] = useState<boolean>(false);\n    const [dragging, setDragging] = useState<boolean>(false);\n    const dragEnterRef = useRef<Element | null>(null);\n    const [fileName, setFileName] = useState<string>();\n    const [ankiDialogOpen, setAnkiDialogOpen] = useState<boolean>(false);\n    const [ankiDialogDisabled, setAnkiDialogDisabled] = useState<boolean>(false);\n    const [ankiDialogItem, setAnkiDialogItem] = useState<CopyHistoryItem>();\n    const ankiDialogItemSliderContext = useMemo<AnkiDialogSliderContext | undefined>(\n        () => ankiDialogItem && itemSliderContext(ankiDialogItem),\n        [ankiDialogItem]\n    );\n    const ankiDialogAudioClip = useMemo<AudioClip | undefined>(\n        () =>\n            ankiDialogItem &&\n            audioClipFromItem(\n                ankiDialogItem,\n                ankiDialogItemSliderContext,\n                settingsProvider.audioPaddingStart,\n                settingsProvider.audioPaddingEnd\n            ),\n        [\n            ankiDialogItem,\n            ankiDialogItemSliderContext,\n            settingsProvider.audioPaddingStart,\n            settingsProvider.audioPaddingEnd,\n        ]\n    );\n    const ankiDialogImage = useMemo<Image | undefined>(\n        () =>\n            ankiDialogItem &&\n            imageFromItem(ankiDialogItem, settingsProvider.maxImageWidth, settingsProvider.maxImageHeight),\n        [ankiDialogItem, settingsProvider.maxImageWidth, settingsProvider.maxImageHeight]\n    );\n    const [ankiDialogRequested, setAnkiDialogRequested] = useState<boolean>(false);\n    const [ankiDialogFinishedRequest, setAnkiDialogFinishedRequest] = useState<AnkiDialogFinishedRequest>({\n        timestamp: 0,\n        resume: false,\n    });\n    const [settingsDialogOpen, setSettingsDialogOpen] = useState<boolean>(false);\n    const [settingsDialogScrollToId, setSettingsDialogScrollToId] = useState<string>();\n    const [imageDialogOpen, setImageDialogOpen] = useState<boolean>(false);\n    const [disableKeyEvents, setDisableKeyEvents] = useState<boolean>(false);\n    const [image, setImage] = useState<Image>();\n    const [tab, setTab] = useState<VideoTabModel>();\n    const [availableTabs, setAvailableTabs] = useState<VideoTabModel[]>([]);\n    const fileInputRef = useRef<HTMLInputElement>(null);\n    const ankiDialogRequestedRef = useRef<boolean>(false);\n    ankiDialogRequestedRef.current = ankiDialogRequested;\n    const { subtitleFiles } = sources;\n\n    const handleError = useCallback((message: string) => {\n        setAlertSeverity('error');\n        setAlert(message);\n        setAlertOpen(true);\n    }, []);\n\n    const handleAnkiDialogRequest = useCallback((ankiDialogItem?: CopyHistoryItem) => {\n        if (!ankiDialogItem && copiedSubtitlesRef.current!.length === 0) {\n            return;\n        }\n\n        const item = ankiDialogItem ?? copiedSubtitlesRef.current[copiedSubtitlesRef.current.length - 1];\n        setAnkiDialogItem(item);\n        setAnkiDialogOpen(true);\n        setAnkiDialogDisabled(false);\n        setDisableKeyEvents(true);\n        setAnkiDialogRequested(true);\n    }, []);\n\n    const handleAnkiDialogRequestFromVideoPlayer = useCallback(\n        async (\n            videoFileUrl: string,\n            videoFileName: string,\n            selectedAudioTrack: string | undefined,\n            playbackRate: number,\n            subtitle: SubtitleModel,\n            surroundingSubtitles: SubtitleModel[],\n            timestamp: number\n        ) => {\n            const item = {\n                ...subtitle,\n                surroundingSubtitles: surroundingSubtitles,\n                timestamp: Date.now(),\n                id: uuidv4(),\n                name: videoFileName,\n                mediaTimestamp: timestamp,\n                videoFile: await fetch(videoFileUrl)\n                    .then((r) => r.blob())\n                    .then((blobFile) => new File([blobFile], videoFileName)),\n                selectedAudioTrack: selectedAudioTrack,\n                filePlaybackRate: playbackRate,\n            };\n            handleAnkiDialogRequest(item);\n        },\n        [handleAnkiDialogRequest]\n    );\n\n    const handleAnkiDialogProceed = useCallback(\n        async (\n            text: string,\n            definition: string,\n            audioClip: AudioClip | undefined,\n            image: Image | undefined,\n            word: string,\n            source: string,\n            url: string,\n            customFieldValues: { [key: string]: string },\n            tags: string[],\n            mode: AnkiExportMode\n        ) => {\n            setAnkiDialogDisabled(true);\n\n            try {\n                const result = await anki.export(\n                    text,\n                    definition,\n                    audioClip,\n                    image,\n                    word,\n                    source,\n                    url,\n                    customFieldValues,\n                    tags,\n                    mode\n                );\n\n                if (mode !== 'gui') {\n                    if (mode === 'default') {\n                        setAlertSeverity('success');\n                        setAlert('Exported card: ' + result);\n                        setAlertOpen(true);\n                    } else if (mode === 'updateLast') {\n                        setAlertSeverity('success');\n                        setAlert('Updated card: ' + result);\n                        setAlertOpen(true);\n                    }\n\n                    setAnkiDialogOpen(false);\n\n                    // We need the ref to avoid causing a state change that would re-init Player\n                    // It's a future task to make the Player init hook depend on less state\n                    if (ankiDialogRequestedRef.current) {\n                        setAnkiDialogFinishedRequest({ timestamp: Date.now(), resume: true });\n                        setAnkiDialogRequested(false);\n                    }\n                }\n            } catch (e) {\n                console.error(e);\n                if (e instanceof Error) {\n                    handleError(e.message);\n                } else {\n                    handleError(String(e));\n                }\n            } finally {\n                setAnkiDialogDisabled(false);\n                setDisableKeyEvents(false);\n            }\n        },\n        [anki, handleError]\n    );\n\n    const handleCopy = useCallback(\n        (\n            subtitle: SubtitleModel,\n            surroundingSubtitles: SubtitleModel[],\n            audioFile: File | undefined,\n            videoFile: File | undefined,\n            subtitleFile: File | undefined,\n            mediaTimestamp: number | undefined,\n            audioTrack: string | undefined,\n            filePlaybackRate: number | undefined,\n            audio: AudioModel | undefined,\n            image: ImageModel | undefined,\n            url: string | undefined,\n            postMineAction: PostMineAction | undefined,\n            preventDuplicate: boolean | undefined,\n            id: string | undefined\n        ) => {\n            if (subtitle && settingsProvider.copyToClipboardOnMine) {\n                navigator.clipboard.writeText(subtitle.text);\n            }\n\n            const newCopiedSubtitle = {\n                ...subtitle,\n                surroundingSubtitles: surroundingSubtitles,\n                timestamp: Date.now(),\n                id: id || uuidv4(),\n                name: fileName!,\n                subtitleFile: subtitleFile,\n                audioFile: audioFile,\n                videoFile: videoFile,\n                filePlaybackRate: filePlaybackRate,\n                mediaTimestamp: mediaTimestamp,\n                audioTrack: audioTrack,\n                audio: audio,\n                image: image,\n                url: url,\n            };\n\n            setCopiedSubtitles((copiedSubtitles) => {\n                if (preventDuplicate && copiedSubtitles.length > 0) {\n                    const last = copiedSubtitles[copiedSubtitles.length - 1];\n\n                    if (\n                        subtitle.start === last.start &&\n                        subtitle.end === last.end &&\n                        subtitle.text === last.text &&\n                        subtitleFile?.name === last.subtitleFile?.name\n                    ) {\n                        if (mediaTimestamp !== undefined && mediaTimestamp !== last.mediaTimestamp) {\n                            const newCopiedSubtitles = [...copiedSubtitles];\n                            newCopiedSubtitles[newCopiedSubtitles.length - 1] = newCopiedSubtitle;\n                            return newCopiedSubtitles;\n                        }\n\n                        return copiedSubtitles;\n                    }\n                }\n\n                // Note: we are not dealing with the case where an item with the given ID is already in the list\n                return [...copiedSubtitles, newCopiedSubtitle];\n            });\n\n            switch (postMineAction ?? PostMineAction.none) {\n                case PostMineAction.none:\n                    break;\n                case PostMineAction.showAnkiDialog:\n                    handleAnkiDialogRequest(newCopiedSubtitle);\n                    break;\n                case PostMineAction.updateLastCard:\n                    // FIXME: We should really rename the functions below because we're actually skipping the Anki dialog in this case\n                    setAnkiDialogRequested(true);\n                    let audioClip = audioClipFromItem(\n                        newCopiedSubtitle,\n                        undefined,\n                        settingsProvider.audioPaddingStart,\n                        settingsProvider.audioPaddingEnd\n                    );\n\n                    if (audioClip && settingsProvider.preferMp3) {\n                        audioClip = audioClip.toMp3();\n                    }\n\n                    handleAnkiDialogProceed(\n                        subtitle.text,\n                        '',\n                        audioClip,\n                        imageFromItem(\n                            newCopiedSubtitle,\n                            settingsProvider.maxImageWidth,\n                            settingsProvider.maxImageHeight\n                        ),\n                        '',\n                        itemSourceString(newCopiedSubtitle) ?? '',\n                        '',\n                        {},\n                        settingsProvider.tags,\n                        'updateLast'\n                    );\n                    break;\n                default:\n                    throw new Error('Unknown post mine action: ' + postMineAction);\n            }\n\n            if (subtitle) {\n                setAlertSeverity('success');\n                setAlert(\n                    subtitle.text === '' ? `Saved ${humanReadableTime(subtitle.start)}` : `Copied: \"${subtitle.text}\"`\n                );\n                setAlertOpen(true);\n            }\n        },\n        [fileName, settingsProvider, handleAnkiDialogProceed, handleAnkiDialogRequest]\n    );\n\n    const handleOpenCopyHistory = useCallback(() => {\n        setCopyHistoryOpen((copyHistoryOpen) => !copyHistoryOpen);\n        setVideoFullscreen(false);\n    }, []);\n    const handleCloseCopyHistory = useCallback(() => setCopyHistoryOpen(false), []);\n    const handleAppBarToggle = useCallback(() => {\n        const newValue = !playbackPreferences.theaterMode;\n        playbackPreferences.theaterMode = newValue;\n        setTheaterMode(newValue);\n        setVideoFullscreen(false);\n    }, [playbackPreferences]);\n    const handleFullscreenToggle = useCallback(() => {\n        setVideoFullscreen((fullscreen) => !fullscreen);\n    }, []);\n    useEffect(() => {\n        if (videoFullscreen) {\n            if (!document.fullscreenElement) {\n                document.documentElement.requestFullscreen();\n            }\n        } else if (document.fullscreenElement) {\n            document.exitFullscreen();\n        }\n    }, [videoFullscreen]);\n    useEffect(() => {\n        const listener = () => {\n            if (!document.fullscreenElement) {\n                setVideoFullscreen(false);\n            }\n        };\n        document.addEventListener('fullscreenchange', listener);\n        return () => document.removeEventListener('fullscreenchange', listener);\n    }, []);\n    const handleHideSubtitlePlayer = useCallback(() => {\n        setHideSubtitlePlayer((hidden) => !hidden);\n    }, []);\n    const handleVideoPopOut = useCallback(() => {\n        setVideoPopOut((videoPopOut) => !videoPopOut);\n    }, []);\n    const handleOpenSettings = useCallback(() => {\n        setDisableKeyEvents(true);\n        setSettingsDialogOpen(true);\n    }, []);\n    const handleAlertClosed = useCallback(() => setAlertOpen(false), []);\n    const handleImageDialogClosed = useCallback(() => setImageDialogOpen(false), []);\n    const handleCloseSettings = useCallback(\n        (newSettings: AsbplayerSettings) => {\n            settingsProvider.settings = newSettings;\n            setSettingsDialogOpen(false);\n            setSettingsDialogScrollToId(undefined);\n\n            // ATM only the Anki dialog may appear under the settings dialog,\n            // so it's the only one we need to check to re-enable key events\n            setDisableKeyEvents(ankiDialogOpen);\n\n            videoChannelRef.current?.subtitleSettings(settingsProvider.subtitleSettings);\n            videoChannelRef.current?.ankiSettings(settingsProvider.ankiSettings);\n            videoChannelRef.current?.miscSettings(settingsProvider.miscSettings);\n        },\n        [settingsProvider, ankiDialogOpen]\n    );\n\n    const handleDeleteCopyHistoryItem = useCallback(\n        (item: CopyHistoryItem) => {\n            const newCopiedSubtitles = [];\n\n            for (let subtitle of copiedSubtitles) {\n                if (item.id !== subtitle.id) {\n                    newCopiedSubtitles.push(subtitle);\n                }\n            }\n\n            setCopiedSubtitles(newCopiedSubtitles);\n        },\n        [copiedSubtitles]\n    );\n\n    const handleUnloadAudio = useCallback(\n        (audioFileUrl: string) => {\n            if (audioFileUrl !== sources.audioFileUrl) {\n                return;\n            }\n\n            setSources((previous) => {\n                URL.revokeObjectURL(audioFileUrl);\n\n                return {\n                    subtitleFiles: previous.subtitleFiles,\n                    audioFile: undefined,\n                    audioFileUrl: undefined,\n                    videoFile: previous.videoFile,\n                    videoFileUrl: previous.videoFileUrl,\n                };\n            });\n        },\n        [sources]\n    );\n\n    const handleUnloadVideo = useCallback(\n        (videoFileUrl: string) => {\n            if (videoFileUrl !== sources.videoFileUrl) {\n                return;\n            }\n\n            setSources((previous) => {\n                URL.revokeObjectURL(videoFileUrl);\n\n                return {\n                    subtitleFiles: previous.subtitleFiles,\n                    audioFile: previous.audioFile,\n                    audioFileUrl: previous.audioFileUrl,\n                    videoFile: undefined,\n                    videoFileUrl: undefined,\n                };\n            });\n            setVideoFullscreen(false);\n        },\n        [sources]\n    );\n\n    const handleClipAudio = useCallback(\n        async (item: CopyHistoryItem) => {\n            try {\n                const clip = await audioClipFromItem(\n                    item,\n                    undefined,\n                    settingsProvider.audioPaddingStart,\n                    settingsProvider.audioPaddingEnd\n                );\n\n                if (settingsProvider.preferMp3) {\n                    clip!.toMp3().download();\n                } else {\n                    clip!.download();\n                }\n            } catch (e) {\n                console.error(e);\n                if (e instanceof Error) {\n                    handleError(e.message);\n                } else {\n                    handleError(String(e));\n                }\n            }\n        },\n        [handleError, settingsProvider]\n    );\n\n    const handleDownloadImage = useCallback(\n        async (item: CopyHistoryItem) => {\n            try {\n                (await imageFromItem(\n                    item,\n                    settingsProvider.maxImageWidth,\n                    settingsProvider.maxImageHeight\n                ))!.download();\n            } catch (e) {\n                console.error(e);\n                if (e instanceof Error) {\n                    handleError(e.message);\n                } else {\n                    handleError(String(e));\n                }\n            }\n        },\n        [handleError, settingsProvider]\n    );\n\n    const handleDownloadCopyHistorySectionAsSrt = useCallback(\n        (name: string, items: CopyHistoryItem[]) => {\n            const deduplicated: SubtitleModel[] = [];\n\n            for (const item of items) {\n                if (\n                    deduplicated.find((i) => i.start === item.start && i.end === item.end && i.text === item.text) ===\n                    undefined\n                ) {\n                    deduplicated.push(item);\n                }\n            }\n\n            download(\n                new Blob([subtitleReader.subtitlesToSrt(deduplicated)], { type: 'text/plain' }),\n                `${name}_MiningHistory_${new Date().toISOString()}.srt`\n            );\n        },\n        [subtitleReader]\n    );\n\n    const handleSelectCopyHistoryItem = useCallback(\n        (item: CopyHistoryItem) => {\n            if (!subtitleFiles.find((f) => f.name === item.subtitleFile?.name)) {\n                handleError('Subtitle file ' + item.subtitleFile?.name + ' is not open.');\n                return;\n            }\n\n            setJumpToSubtitle({\n                text: item.text,\n                start: item.start,\n                end: item.end,\n                originalStart: item.originalStart,\n                originalEnd: item.originalEnd,\n                track: item.track,\n            });\n        },\n        [subtitleFiles, handleError]\n    );\n\n    const handleAnki = useCallback((item: CopyHistoryItem) => {\n        setAnkiDialogItem(item);\n        setAnkiDialogOpen(true);\n        setAnkiDialogDisabled(false);\n        setDisableKeyEvents(true);\n    }, []);\n\n    const handleAnkiDialogCancel = useCallback(() => {\n        setAnkiDialogOpen(false);\n        setAnkiDialogDisabled(false);\n        setDisableKeyEvents(false);\n\n        if (ankiDialogRequested) {\n            setAnkiDialogFinishedRequest({ timestamp: Date.now(), resume: true });\n            setAnkiDialogRequested(false);\n        }\n    }, [ankiDialogRequested]);\n\n    const handleAnkiDialogRewind = useCallback(() => {\n        if (!ankiDialogItem) {\n            return;\n        }\n\n        if (!subtitleFiles.find((f) => f.name === ankiDialogItem.subtitleFile?.name)) {\n            handleError('Subtitle file ' + ankiDialogItem.subtitleFile?.name + ' is not open.');\n            return;\n        }\n\n        const subtitle = {\n            text: ankiDialogItem.text,\n            start: ankiDialogItem.start,\n            end: ankiDialogItem.end,\n            originalStart: ankiDialogItem.originalStart,\n            originalEnd: ankiDialogItem.originalEnd,\n            track: ankiDialogItem.track,\n        };\n        setRewindSubtitle(subtitle);\n        setJumpToSubtitle(subtitle);\n\n        handleAnkiDialogCancel();\n    }, [ankiDialogItem, subtitleFiles, handleAnkiDialogCancel, handleError]);\n\n    const handleViewImage = useCallback((image: Image) => {\n        setImage(image);\n        setImageDialogOpen(true);\n    }, []);\n\n    useEffect(() => {\n        function onTabs(tabs: VideoTabModel[]) {\n            if (tabs.length !== availableTabs.length) {\n                setAvailableTabs(tabs);\n            } else {\n                let update = false;\n\n                for (let i = 0; i < availableTabs.length; ++i) {\n                    const t1 = availableTabs[i];\n                    const t2 = tabs[i];\n                    if (t1.id !== t2.id || t1.title !== t2.title || t1.src !== t2.src) {\n                        update = true;\n                        break;\n                    }\n                }\n\n                if (update) {\n                    setAvailableTabs(tabs);\n                }\n            }\n\n            let selectedTabMissing = tab && tabs.filter((t) => t.id === tab.id && t.src === tab.src).length === 0;\n\n            if (selectedTabMissing) {\n                setTab(undefined);\n                handleError('Lost connection with tab ' + tab!.id + ' ' + tab!.title);\n            }\n        }\n\n        return extension.subscribeTabs(onTabs);\n    }, [availableTabs, tab, extension, handleError]);\n\n    const handleTabSelected = useCallback((tab: VideoTabModel) => setTab(tab), []);\n\n    const handleFiles = useCallback(\n        (files: FileList | File[]) => {\n            try {\n                let { subtitleFiles, audioFile, videoFile } = extractSources(files);\n\n                setSources((previous) => {\n                    setLoading(true);\n\n                    let videoFileUrl = undefined;\n                    let audioFileUrl = undefined;\n\n                    if (videoFile || audioFile) {\n                        revokeUrls(previous);\n\n                        if (videoFile) {\n                            videoFileUrl = URL.createObjectURL(videoFile);\n                        } else if (audioFile) {\n                            audioFileUrl = URL.createObjectURL(audioFile);\n                        }\n\n                        setTab(undefined);\n                    } else {\n                        videoFile = previous.videoFile;\n                        videoFileUrl = previous.videoFileUrl;\n                        audioFile = previous.audioFile;\n                        audioFileUrl = previous.audioFileUrl;\n                    }\n\n                    const sources = {\n                        subtitleFiles: subtitleFiles.length === 0 ? previous.subtitleFiles : subtitleFiles,\n                        audioFile: audioFile,\n                        audioFileUrl: audioFileUrl,\n                        videoFile: videoFile,\n                        videoFileUrl: videoFileUrl,\n                    };\n\n                    return sources;\n                });\n\n                if (subtitleFiles.length > 0) {\n                    const subtitleFileName = subtitleFiles[0].name;\n                    setFileName(subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')));\n                }\n            } catch (e) {\n                console.error(e);\n                if (e instanceof Error) {\n                    handleError(e.message);\n                } else {\n                    handleError(String(e));\n                }\n            }\n        },\n        [handleError]\n    );\n\n    const handleDirectory = useCallback(\n        async (items: DataTransferItemList) => {\n            if (items.length !== 1) {\n                handleError('Cannot load more than one directory at a time');\n                return;\n            }\n\n            const fileSystemEntry = items[0].webkitGetAsEntry();\n\n            if (!fileSystemEntry || !fileSystemEntry.isDirectory) {\n                handleError('Failed to load directory');\n                return;\n            }\n\n            const fileSystemDirectoryEntry = fileSystemEntry as FileSystemDirectoryEntry;\n\n            try {\n                const entries = await new Promise<FileSystemEntry[]>((resolve, reject) =>\n                    fileSystemDirectoryEntry.createReader().readEntries(resolve, reject)\n                );\n\n                if (entries.find((e) => e.isDirectory)) {\n                    handleError('Cannot load a directory with subdirectories');\n                    return;\n                }\n\n                const filePromises = entries.map(\n                    (e) => new Promise<File>((resolve, reject) => (e as FileSystemFileEntry).file(resolve, reject))\n                );\n                const files: File[] = [];\n\n                for (const f of filePromises) {\n                    files.push(await f);\n                }\n\n                handleFiles(files);\n            } catch (e) {\n                console.error(e);\n                if (e instanceof Error) {\n                    handleError(e.message);\n                } else {\n                    handleError(String(e));\n                }\n            }\n        },\n        [handleError, handleFiles]\n    );\n\n    useEffect(() => {\n        if (inVideoPlayer) {\n            extension.startHeartbeat(true);\n            return undefined;\n        }\n\n        async function onMessage(message: ExtensionMessage) {\n            if (message.data.command === 'sync' || message.data.command === 'syncv2') {\n                const tabs = extension.tabs.filter((t) => {\n                    if (t.id !== message.tabId) {\n                        return false;\n                    }\n\n                    return !message.src || t.src === message.src;\n                });\n\n                if (tabs.length === 0) {\n                    if (message.src) {\n                        console.error(\n                            'Received sync request but the requesting tab ID ' +\n                                message.tabId +\n                                ' with src ' +\n                                message.src +\n                                ' was not found'\n                        );\n                    } else {\n                        console.error(\n                            'Received sync request but the requesting tab ID ' + message.tabId + ' was not found'\n                        );\n                    }\n\n                    return;\n                }\n\n                const tab = tabs[0];\n                let subtitleFiles: File[];\n                let flatten = false;\n\n                if (message.data.command === 'sync') {\n                    const syncMessage = message.data as LegacyPlayerSyncMessage;\n                    subtitleFiles = [\n                        new File(\n                            [await (await fetch('data:text/plain;base64,' + syncMessage.subtitles.base64)).blob()],\n                            syncMessage.subtitles.name\n                        ),\n                    ];\n                } else if (message.data.command === 'syncv2') {\n                    const syncMessage = message.data as PlayerSyncMessage;\n                    subtitleFiles = await Promise.all(\n                        syncMessage.subtitles.map(\n                            async (s) =>\n                                new File([await (await fetch('data:text/plain;base64,' + s.base64)).blob()], s.name)\n                        )\n                    );\n                    flatten = syncMessage.flatten ?? false;\n                } else {\n                    console.error('Unknown message ' + message.data.command);\n                    return;\n                }\n\n                const subtitleFileName = subtitleFiles[0].name;\n                setFileName(subtitleFileName.substring(0, subtitleFileName.lastIndexOf('.')));\n                setSources({\n                    subtitleFiles: subtitleFiles,\n                    flattenSubtitleFiles: flatten,\n                    audioFile: undefined,\n                    audioFileUrl: undefined,\n                    videoFile: undefined,\n                    videoFileUrl: undefined,\n                });\n                setTab(tab);\n            } else if (message.data.command === 'edit-keyboard-shortcuts') {\n                setSettingsDialogOpen(true);\n                setSettingsDialogScrollToId('keyboard-shortcuts');\n            }\n        }\n\n        const unsubscribe = extension.subscribe(onMessage);\n        extension.startHeartbeat(false);\n        return unsubscribe;\n    }, [extension, inVideoPlayer]);\n\n    const handleAutoPauseModeChangedViaBind = useCallback((oldPlayMode: PlayMode, newPlayMode: PlayMode) => {\n        switch (newPlayMode) {\n            case PlayMode.autoPause:\n                setAlert('Auto-pause: On');\n                break;\n            case PlayMode.condensed:\n                setAlert('Condensed playback: On');\n                break;\n            case PlayMode.normal:\n                if (oldPlayMode === PlayMode.autoPause) {\n                    setAlert('Auto-pause: Off');\n                } else if (oldPlayMode === PlayMode.condensed) {\n                    setAlert('Condensed playback: Off');\n                }\n                break;\n        }\n\n        setAlertSeverity('info');\n        setAlertOpen(true);\n    }, []);\n\n    const handleDrop = useCallback(\n        (e: React.DragEvent) => {\n            if (ankiDialogOpen) {\n                return;\n            }\n\n            e.preventDefault();\n\n            if (inVideoPlayer) {\n                handleError('Video player cannot receive dropped files. Drop outside of the video frame instead.');\n                return;\n            }\n\n            setDragging(false);\n            dragEnterRef.current = null;\n\n            function allDirectories(items: DataTransferItemList) {\n                for (let i = 0; i < items.length; ++i) {\n                    if (!items[i].webkitGetAsEntry()?.isDirectory) {\n                        return false;\n                    }\n                }\n\n                return true;\n            }\n\n            if (e.dataTransfer.items && e.dataTransfer.items.length > 0 && allDirectories(e.dataTransfer.items)) {\n                handleDirectory(e.dataTransfer.items);\n            } else if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n                handleFiles(e.dataTransfer.files);\n            }\n        },\n        [inVideoPlayer, handleError, handleFiles, handleDirectory, ankiDialogOpen]\n    );\n\n    const handleFileInputChange = useCallback(() => {\n        const files = fileInputRef.current?.files;\n\n        if (files && files.length > 0) {\n            handleFiles(files);\n        }\n    }, [handleFiles]);\n\n    const handleFileSelector = useCallback(() => fileInputRef.current?.click(), []);\n\n    const handleDownloadSubtitleFilesAsSrt = useCallback(async () => {\n        if (sources.subtitleFiles === undefined) {\n            return;\n        }\n\n        const nonSupSubtitleFiles = sources.subtitleFiles.filter((f) => !f.name.endsWith('.sup'));\n\n        if (nonSupSubtitleFiles.length === 0) {\n            return;\n        }\n\n        download(\n            new Blob([await subtitleReader.filesToSrt(nonSupSubtitleFiles)], {\n                type: 'text/plain',\n            }),\n            `${fileName}.srt`\n        );\n    }, [fileName, sources.subtitleFiles, subtitleReader]);\n\n    const handleDragOver = useCallback(\n        (e: React.DragEvent<HTMLDivElement>) => {\n            if (ankiDialogOpen) {\n                return;\n            }\n\n            e.preventDefault();\n        },\n        [ankiDialogOpen]\n    );\n\n    const handleDragEnter = useCallback(\n        (e: React.DragEvent<HTMLDivElement>) => {\n            if (ankiDialogOpen) {\n                return;\n            }\n\n            e.preventDefault();\n            e.stopPropagation();\n\n            if (!inVideoPlayer) {\n                dragEnterRef.current = e.target as Element;\n                setDragging(true);\n            }\n        },\n        [inVideoPlayer, ankiDialogOpen]\n    );\n\n    const handleDragLeave = useCallback(\n        (e: React.DragEvent<HTMLDivElement>) => {\n            e.nativeEvent.preventDefault();\n            e.nativeEvent.stopPropagation();\n\n            if (!inVideoPlayer && dragEnterRef.current === e.target) {\n                setDragging(false);\n            }\n        },\n        [inVideoPlayer]\n    );\n\n    const handleSourcesLoaded = useCallback(() => setLoading(false), []);\n\n    useEffect(() => {\n        var view = searchParams.get('view');\n        if (view === 'settings') {\n            setSettingsDialogOpen(true);\n\n            if (location.hash && location.hash.startsWith('#')) {\n                const id = location.hash.substring(1, location.hash.length);\n                setSettingsDialogScrollToId(id);\n            }\n        }\n    }, [searchParams, location]);\n\n    useEffect(() => {\n        if (alertOpen && alert && alertSeverity) {\n            videoChannelRef.current?.alert(alert, alertSeverity);\n        }\n    }, [alert, alertSeverity, alertOpen]);\n\n    if (location.pathname === '/' && searchParams.get('video')) {\n        return <NavigateToVideo searchParams={searchParams} />;\n    }\n\n    const nothingLoaded =\n        (loading && !videoFrameRef.current) ||\n        (sources.subtitleFiles.length === 0 && !sources.audioFile && !sources.videoFile);\n    const appBarHidden = sources.videoFile !== undefined && ((theaterMode && !videoPopOut) || videoFullscreen);\n    const effectiveCopyHistoryOpen = copyHistoryOpen && !videoFullscreen;\n\n    return (\n        <ThemeProvider theme={theme}>\n            <CssBaseline />\n            <div\n                onDrop={handleDrop}\n                onDragOver={handleDragOver}\n                onDragEnter={handleDragEnter}\n                onDragLeave={handleDragLeave}\n            >\n                <Alert open={alertOpen} onClose={handleAlertClosed} autoHideDuration={3000} severity={alertSeverity}>\n                    {alert}\n                </Alert>\n                <Routes>\n                    <Route\n                        path=\"/video\"\n                        element={\n                            <>\n                                <RenderVideo\n                                    searchParams={searchParams}\n                                    settingsProvider={settingsProvider}\n                                    playbackPreferences={playbackPreferences}\n                                    extension={extension}\n                                    ankiDialogFinishedRequest={ankiDialogFinishedRequest}\n                                    onAnkiDialogRequest={handleAnkiDialogRequestFromVideoPlayer}\n                                    onError={handleError}\n                                    onPlayModeChangedViaBind={handleAutoPauseModeChangedViaBind}\n                                />\n                                <AnkiDialog\n                                    open={ankiDialogOpen}\n                                    disabled={ankiDialogDisabled}\n                                    audioClip={ankiDialogAudioClip}\n                                    image={ankiDialogImage}\n                                    source={itemSourceString(ankiDialogItem)}\n                                    url={ankiDialogItem?.url}\n                                    sliderContext={ankiDialogItemSliderContext}\n                                    customFields={settingsProvider.customAnkiFields}\n                                    anki={anki}\n                                    settingsProvider={settingsProvider}\n                                    onCancel={handleAnkiDialogCancel}\n                                    onRewind={handleAnkiDialogRewind}\n                                    onProceed={handleAnkiDialogProceed}\n                                    onViewImage={handleViewImage}\n                                />\n                                <ImageDialog open={imageDialogOpen} image={image} onClose={handleImageDialogClosed} />\n                            </>\n                        }\n                    />\n                    <Route\n                        path=\"/\"\n                        element={\n                            <div>\n                                <CopyHistory\n                                    items={copiedSubtitles}\n                                    open={effectiveCopyHistoryOpen}\n                                    drawerWidth={drawerWidth}\n                                    onClose={handleCloseCopyHistory}\n                                    onDelete={handleDeleteCopyHistoryItem}\n                                    onClipAudio={handleClipAudio}\n                                    onDownloadImage={handleDownloadImage}\n                                    onDownloadSectionAsSrt={handleDownloadCopyHistorySectionAsSrt}\n                                    onSelect={handleSelectCopyHistoryItem}\n                                    onAnki={handleAnki}\n                                />\n                                <AnkiDialog\n                                    open={ankiDialogOpen}\n                                    disabled={ankiDialogDisabled}\n                                    audioClip={ankiDialogAudioClip}\n                                    image={ankiDialogImage}\n                                    source={itemSourceString(ankiDialogItem)}\n                                    url={ankiDialogItem?.url}\n                                    sliderContext={ankiDialogItemSliderContext}\n                                    customFields={settingsProvider.customAnkiFields}\n                                    anki={anki}\n                                    settingsProvider={settingsProvider}\n                                    onCancel={handleAnkiDialogCancel}\n                                    onRewind={handleAnkiDialogRewind}\n                                    onProceed={handleAnkiDialogProceed}\n                                    onViewImage={handleViewImage}\n                                    onOpenSettings={handleOpenSettings}\n                                />\n                                <ImageDialog open={imageDialogOpen} image={image} onClose={handleImageDialogClosed} />\n                                <SettingsDialog\n                                    anki={anki}\n                                    extension={extension}\n                                    open={settingsDialogOpen}\n                                    onClose={handleCloseSettings}\n                                    settings={settingsProvider.settings}\n                                    scrollToId={settingsDialogScrollToId}\n                                />\n                                <Bar\n                                    title={fileName || 'asbplayer'}\n                                    drawerWidth={drawerWidth}\n                                    drawerOpen={effectiveCopyHistoryOpen}\n                                    hidden={appBarHidden}\n                                    subtitleFiles={sources.subtitleFiles}\n                                    onOpenCopyHistory={handleOpenCopyHistory}\n                                    onDownloadSubtitleFilesAsSrt={handleDownloadSubtitleFilesAsSrt}\n                                    onOpenSettings={handleOpenSettings}\n                                    onFileSelector={handleFileSelector}\n                                />\n                                <input\n                                    ref={fileInputRef}\n                                    onChange={handleFileInputChange}\n                                    type=\"file\"\n                                    accept=\".srt,.ass,.vtt,.sup,.mp3,.m4a,.aac,.flac,.ogg,.wav,.opus,.mkv,.mp4,.avi\"\n                                    multiple\n                                    hidden\n                                />\n                                <Content drawerWidth={drawerWidth} drawerOpen={effectiveCopyHistoryOpen}>\n                                    {nothingLoaded && (\n                                        <LandingPage\n                                            latestExtensionVersion={latestExtensionVersion}\n                                            extensionUrl={extensionUrl}\n                                            extension={extension}\n                                            loading={loading}\n                                            dragging={dragging}\n                                            appBarHidden={appBarHidden}\n                                            onFileSelector={handleFileSelector}\n                                        />\n                                    )}\n                                    <DragOverlay dragging={dragging} appBarHidden={appBarHidden} loading={loading} />\n                                    <Player\n                                        subtitleReader={subtitleReader}\n                                        settingsProvider={settingsProvider}\n                                        playbackPreferences={playbackPreferences}\n                                        onCopy={handleCopy}\n                                        onError={handleError}\n                                        onUnloadAudio={handleUnloadAudio}\n                                        onUnloadVideo={handleUnloadVideo}\n                                        onLoaded={handleSourcesLoaded}\n                                        onTabSelected={handleTabSelected}\n                                        onAnkiDialogRequest={handleAnkiDialogRequest}\n                                        onAppBarToggle={handleAppBarToggle}\n                                        onFullscreenToggle={handleFullscreenToggle}\n                                        onHideSubtitlePlayer={handleHideSubtitlePlayer}\n                                        onVideoPopOut={handleVideoPopOut}\n                                        onPlayModeChangedViaBind={handleAutoPauseModeChangedViaBind}\n                                        tab={tab}\n                                        availableTabs={availableTabs}\n                                        sources={sources}\n                                        jumpToSubtitle={jumpToSubtitle}\n                                        rewindSubtitle={rewindSubtitle}\n                                        videoFrameRef={videoFrameRef}\n                                        videoChannelRef={videoChannelRef}\n                                        extension={extension}\n                                        drawerOpen={effectiveCopyHistoryOpen}\n                                        appBarHidden={appBarHidden}\n                                        videoFullscreen={videoFullscreen}\n                                        hideSubtitlePlayer={hideSubtitlePlayer || videoFullscreen}\n                                        videoPopOut={videoPopOut}\n                                        disableKeyEvents={disableKeyEvents}\n                                        ankiDialogRequested={ankiDialogRequested}\n                                        ankiDialogFinishedRequest={ankiDialogFinishedRequest}\n                                        keyBinder={keyBinder}\n                                    />\n                                </Content>\n                            </div>\n                        }\n                    />\n                </Routes>\n            </div>\n        </ThemeProvider>\n    );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import '@fontsource/roboto';\nimport { createRoot } from 'react-dom/client';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\n\ncreateRoot(document.querySelector('#root')!).render(\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <App />\n    </BrowserRouter>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}